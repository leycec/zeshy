#!/usr/bin/env zsh
# ====================[ zprofile                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Run after "zshenv" but before "zshrc" and "zlogin", for login shells.
#
# --------------------( VARIABLES                          )--------------------
# This script aggregates all environment variables into one file. Note that many
# distros dis-aggregate such environment variables into separate files under
# "/etc/env.d/", which they then programmatically aggregate into a composite
# "/etc/profile.env" file, which this script then sources. Since this tends to
# make for a rather clumsy and overly abstract means of defining environment
# variables, Zeshy prefers to "simply" clump such variables together, here.

# ....................{ DEPENDENCIES                       }....................
# Absolute path of Zeshy's top-most directory. Dismantled, this is:
#
# * "0", the absolute or relative path to this file.
# * ":h", the directory containing such file.
# * "/../..", the parent of the parent of such directory.
# * "(:A)", expanding to the absolute path of such directory if relative and
#   resolving symbolic links in such path to their non-symbolic targets.
[[ -n "${ZESHY_HOME-}" ]] || export ZESHY_HOME="${0:h}/../.."(:A)

# Initialize Zeshy.
[[ $(whence -w get_zeshy_version) == *': function' ]] ||
    source "${ZESHY_HOME}/src/main"

#FIXME: Hmm; I wonder if we can't shift this under "src/". Perhaps test for
#"-o login" in "src/always/core"?
# Establish default profile settings.
set_profile_defaults

# --------------------( WASTELANDS                         )--------------------
#[[ -n "${ZESHY_HOME-}" ]] ||
#    export ZESHY_HOME="$(readlink -e "${0:h}/../..")"

# Absolute path of the current script.
#local zprofile_path="$(readlink -e "${0}")"

# Absolute path of Zeshy's topmost directory.
#[[ -n "${ZESHY_HOME-}" ]] ||
#    export ZESHY_HOME="$(readlink -e "$(dirname "${zprofile_path}")/../..")"

# Initialize Zeshy. Note that "source zeshy" is insufficient on the first
# logon. Hence, our usage of an absolute path for safety here.

# Inform the user that this script is being imported.
#utter "loading \"${zprofile_path}\"..."

#           if is_nonempty "${PATH}"
#           then PATH+=":${dirname}"
#           else PATH="${dirname}"
#           fi
#
#is_set 'EDITOR' or global_string EDITOR=$(which_binaries_nonfatal emacs vim nano ed)
#is_set 'PAGER'  or global_string PAGER=$(which_binaries_nonfatal less more)
#zimport zeshy/type/integer
#zimport zeshy/os

#FIXME: Only do so if Firefox is installed. Actually, this probably no longer
#matters, does it? (It's been just a few years...)
# Disable Firefox's Pango-enabled font antialiasing on low-end machines.
#export MOZ_DISABLE_PANGO=$(one_if is $(get_memory_total) -ge GB si)

# Lastly, export munged paths into our caller's shell environment.
#export MANPATH INFOPATH

#FIXME: Hmm; and what, prey tell, is this?
#export XUSERFILESEARCHPATH="${XAPPLRESDIR}/%N"
#make_directory_if_not_found "${XAPPLRESDIR}" "${XUSERFILESEARCHPATH}"

#!/bin/zsh
# ....................{ PREAMBLE                           }....................
# Absolute path to the current script.
#local zprofile_path="$(readlink --canonicalize-existing "${0}")"

# Directory having the current script.
#[[ -n "${ZESHY_HOME}" ]] ||
#    export ZESHY_HOME=$(readlink --canonicalize-existing "$(dirname "${zprofile_path}")/..")

# Import Zeshy Core.
#if [[ $(whence -w zimport) =~ ': function' ]]
#then zimport zeshy/core
#else source "${ZESHY_HOME}/src/zeshy/core"
#fi

# Inform the user that this script is being imported.
#utter_import "${zprofile_path}"
