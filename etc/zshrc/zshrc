#!/usr/bin/env zsh
# ====================[ zshrc                              ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Run after "zshenv" and "zprofile" but before "zlogin", for interactive shells.
#
# --------------------( CONDITIONAL STATEMENTS             )--------------------
# Shell scripts perform conditional statements for a variety of reasons. The
# simplest is to test the return value of some command, as demonstrated by:
#
#   # Echo "'ibam' is installed" if the "ibam" executable is on the PATH.
#   if which ibam > /dev/null; then
#     echo "'ibam' is installed" 
#   fi
#
# --------------------( REGULAR EXPRESSIONS                )--------------------
# Shell scripts perform regular expression-style matching and substitution via
# one of two external utilities, usually: either "sed" or "awk." Although "sed"
# provides a seemingly simpler interface than "awk" for simple regular
# expression-style operations, its interface is clouded by its antiquated
# support for PERL-style regular expressions. In truth, "sed" regular expression
# syntax shares more in common with the syntax for Emacs Lisp regular
# expressions. "awk" regular expression syntax is, on the other hand, more
# compliant with the modern standards for that. Thus, although "awk" has a more
# convolute interface, it's usually nicer to execute that than "sed." For
# example, the following two commands perform the same substitution:
# 
#   # "awk"-style. Prints "tar.gz".
#   echo "hello.tar.gz" | awk '{ sub(/^.*\.(tar\.)?/, "\1"); print }'
#
#   # "sed"-style. Prints "tar.gz".
#   echo "hello.tar.gz" | sed 's/^.*\.\(tar\.\)\?/\1/' -
#
# Note that this is somewhat correctible by passing the "-r" option to "sed".
#
# --------------------( ASSOCIATIVE ARRAYS                 )--------------------
# ZSH implements associative arrays (i.e., hash tables) as a fundamental
# datatype, used as follows:
# 
#   # ZSH associative arrays must be declared before use.
#   typeset -A my_hash
#
#   # ZSH associative arrays must be written to before being read from. Here,
#   # the "set" command accepts a whitespace-delimited set of alternating keys
#   # and values.
#   set -A my_hash key_1 value_1 key_2 value_2
#   my_hash=(key_1 value_1 key_2 value_2)  # equivalent syntax
#
#   # ZSH associative arrays may also be written to in iterative fashion.
#   my_hash[key_1]=value_2
#   my_hash[key_2]=value_3
#
#   # ZSH associative arrays may be pushed with same syntax as ZSH arrays. The
#   # only (slight) difference is that the first pushed element is the key and
#   # the second pushed element is the value for this key-value pair.
#   my_hash+=(key_3 value_3)
#
#   # ZSH associative arrays are read from with same syntax as ZSH arrays. Thus,
#   # default values may be substituted for non-existant array keys.
#   echo ${my_hash[key_not_found]:default value}
#
#   # ZSH associative arrays are iterable, with same syntax as ZSH arrays. By
#   # default, this iterates over array values. To iterate over array keys
#   # instead, specify the "(k)" parameter expansion flag.
#   for $value in $my_hash;      do echo "value is $value"; done
#   for $key   in ${(k)my_hash}; do echo "key $key is $my_hash[$key]"; done
# 
# --------------------( CONTRIBUTORS                       )--------------------
# This file is thanks to the gracious contributions of:
#
# * Phil Gold's "Phil!'s ZSH Prompt" article at
#   "http://aperiodic.net/phil/prompt/", a wily discourse through the cursive
#   complexities of ZSH prompt manufacture.
#
# --------------------( AUDIO CONVERSION                   )--------------------
# To convert FLAC files with embedded CUE sheets to cleaved-apart MP4 files, do:
#
#   # From "A4~93~Ladymass.flac", extracts the second track from that file
#   # into "02~Polyphonic.mp4".
#   flac -dc --cue=2.1-3.1 "A4~93~Ladymass.flac" | faac - -o "02~Polyphonic.mp4"
#
# --------------------( TODO                               )--------------------
# * Google "zsh cdup" for a host of other useful options; particularly,
#   concerning completion and vi-key bindings. Also, see this zshrc: quite sexy!
#   http://dev.gentoo.org/~steev/files/zshrc
# * Re-run "compinstall" to produce a slightly more uniform and clean tab
#   completion configuration; or, alternately, "zsh-newuser-install".
# * Incorporate suggestions at:
#   http://aperiodic.net/phil/prompt/
# * Add a laptop battery indicator.
# * Enable run-help functionality. See the preamble for "man zshcontrib."
# * Autocompile all ZSH files to speed up startup. Research "zcompile."
# * All complex functions should autoloaded using the "fpath" variable to,
#   again, speed up startup.
# * Zeshy installation: it needs to not clobber existing ZSH installations. The
#   simplest mechanism may be to install to "/etc/zsh/zeshy/" and append
#   "ZDOTDIR=/etc/zsh/zeshy/" to... Wait a minute. Since Zeshy is a Fluvio-WM
#   subcomponent, we simply tie it into that. Simple. Of course, it won't work
#   at the command-line, but...*shrug*.

# ....................{ DEPENDENCIES                       }....................
# Absolute path of Zeshy's top-most directory. Dismantled, this is:
# 
# * "0", the absolute or relative path to this file.
# * ":h", the directory containing such file.
# * "/../..", the parent of the parent of such directory.
# * "(:A)", expanding to the absolute path of such directory if relative and
#   resolving symbolic links in such path to their non-symbolic targets.
[[ -n "${ZESHY_HOME-}" ]] || export ZESHY_HOME="${0:h}/../.."(:A)

# Initialize Zeshy.
[[ $(whence -w get_zeshy_version) == *': function' ]] ||
    source "${ZESHY_HOME}/src/main"

# ....................{ MAIN                               }....................
#FIXME: While we already provide zpage(), it could be helpful to examine this
#script and see if we can't strip anything useful out of in into zpage().
# Install "lesspipe", if available. This allows such helpful shell tomfoolery as
#     less innsmouth.bz2
#is_runnable lesspipe.sh && eval "$(lesspipe.sh)"

# ....................{ SHORTCUTS                          }....................
# One letter.
alias e="${EDITOR}"
alias f="fg"
alias g="grep"
alias l="ls"
alias m="mkdir"
alias n="ncmpcpp"
alias p="ps"
alias s="systemctl"  # "systemd" control mechanism
alias t="tail"
alias v="vim"

# Two letter.
alias ev="evince"
alias fr="find-recursive"
alias ir="irssi"
alias ok="okular"
alias rs="restart-service"
alias ss="stop-service"

# Three letter.
alias dil="diff-less"
alias mvp="mv-pcre"

# Four letter.
alias envl="env | less"
alias sedr="mv-pcre -rc"

# ....................{ ALIASES =unix                      }....................
# Crontab.
alias crontab="EDITOR=vim crontab"

crontab-edit() {
    if [[ "$USER" = "root" ]]; then
        sudo vim /etc/crontab
        /etc/init.d/vixie-cron restart
    else
        vim     "${HOME}/.crontab"
        crontab "${HOME}/.crontab"
        crontab -l
    fi
}

# Diff. Ensure we output diff headers appropriate for input to "patch": namely,
# output dates and times in Universal Time using traditional Unix format, so that
# patch recipients can use the -Z or --set-utc option.
alias diff="LC_ALL=C TZ=UTC0 diff -Nuar"
diff-less() {
    diff "${@}" | less
}

# File. (Copy.)
alias cp="cp --interactive --verbose" 
alias cp-unaliased="\cp"
cpr()       { \cp --archive --recursive --verbose --update "${@}" }
cpr-quiet() { \cp --archive --recursive --verbose --update "${@}" 2> /dev/null }

# File. (Move.)
alias mv="mv --interactive --verbose" 
alias mv-pdf="mv ~leycec/pub/new/*.pdf ~leycec/pub/new/pdf/"
alias mv-torrent="mv ~leycec/pub/new/*.torrent ~leycec/pub/new/torrent/"

# File. (Remove.)
alias rm="rm --interactive=always --verbose"
alias rmr="rm --recursive"
alias rmrf-matching="find-recursive-and-remove"
alias rm-unaliased="\rm"

# This alias is intended to be run after a call to "clean-machine", so as to
# finalize that cleaning. This is an inherently dangerous command, but
# necessarily.
alias clean-tmp="sudo rm --interactive=always --recursive --force --verbose /tmp/*"

# File contents.
alias tf="tail --follow"

# Find.
#alias locate="slocate -ir"
alias which="which -a"

# char *find(char *param1, char *param2, ...)
#
find() {
    # This is intentional; optimization options must precede the initial find
    # path.
    command find -O3 "${@}"  #-regextype posix-extended
}

# char *find-recursive(char *glob_expression)
# --OR--
# char *find-recursive(char *glob_expression, char* under_path)
# 
# Recursively match all file- and pathnames under the passed path (the second
# argument to this shell script) against the passed glob expression (the first
# argument to this shell script). If no path is passed, this recursively matches
# under the current path. Thusly, the simplest usage of this shell script is:
#
#   # Find all text files under the current path.
#   find-recursive '*.txt'
find-recursive() {
    [[ "${#}" -ge 1 ]] || die "no passed glob expression!"

    local FIND_GLOB="${1}"
    shift

    local FIND_ROOT 
    if [[ -n "${1}" ]]
    then FIND_ROOT="${1}"; shift
    else FIND_ROOT="."
    fi

    utter "finding ${FIND_GLOB} under \"${FIND_ROOT}\"..."
    try find "${FIND_ROOT}" -xdev -iname "'${FIND_GLOB}'" "${@}"
}

# char *find-recursive-empty-dirs(char* under_path)
# 
# Recursively match all pathnames under the passed path against the passed glob
# expression, which are also empty (i.e., have no files).
find-recursive-empty-dirs() {
    local FIND_ROOT 

    if [[ -n "${1}" ]]
    then FIND_ROOT="${1}"; shift
    else FIND_ROOT="."
    fi

    utter "finding empty directories under \"${FIND_ROOT}\"..."
    try find "${FIND_ROOT}" -xdev -type d -empty "${@}"
}

# Recursively match all file- and pathnames under the passed path (the second
# argument to this shell script) against the passed regular expression (the first
# argument to this shell script), and remove all such matches. This is a rather
# dangerous function; as such, it obtains your permission before running itself.
# As above, if no path is passed, this recursively matches under the current
# path. Thusly, the simplest usage of this shell script is:
#
#   # Remove all text files under the current path.
#   find-recursive-and-remove '*.txt'
find-recursive-and-remove() {
     [ -n "$1" ] || die "no glob expression passed!"
  if [ -z "$2" ]
  then FIND_ROOT="."
  else FIND_ROOT="$2"
  fi

  utter "========================================================================"
  echo "Recursively removing all matching '$1' from '$FIND_ROOT', without backup."
  echo -n "Are you sure you want to do this? [yes/no] "
  read IS_SURE

  if [ "$IS_SURE" = "y" -o "$IS_SURE" = "ye" -o "$IS_SURE" = "yes" ]; then
    command find -O3 $FIND_ROOT -xdev -iname "$1" -print0 | xargs -0 rm -rfv
    return $?
  fi

  return 0
}

# Help.
alias info="info --vi-keys"
alias man-find="man -f"
alias man-grep="man -k"
#alias man="man -a"

# Kernel.
alias modprobe="modprobe --verbose"

# List. (Files.)
alias ls="ls --all --color=always --group-directories-first --human-readable --indicator-style=classify --quoting-style=shell --sort=version --time-style=long-iso"

lr()  { ls --recursive               $* | less --no-init }
ll()  { ls --format=long             $* | less --no-init }
llr() { ls --format=long --recursive $* | less --no-init }

# List. (Processes.)
alias pstree="pstree -pU | less"

function ps() {
  if [ -z "$1" ]; then
    command ps -eo euser:6,egroup:6,pid,pcpu,pmem,stat,cmd \
       --cumulative --forest --sort uid,-start | \
    less
  else
    command ps $*
  fi
}

# List. (Connections.)
alias cs="netstat --numeric-hosts --numeric-ports --program --tcp"

# Logs.
alias dmesg-tail="tail -128 /var/log/dmesg"
alias dmesg-tail-follow="tail -64f /var/log/dmesg"
alias syslog-tail="tail -128 /var/log/everything/current"
alias syslog-tail-follow="tail -64f /var/log/everything/current"

dmesg() {
  command dmesg $* | less
}

# Permissions.
alias deumask="chmod go+rX,go-w"
alias doumask="chmod go-rwX"
alias chgrp="change_permissions chgrp"
alias chmod="change_permissions chmod"
alias chown="change_permissions chown"

# This script recursively changes file ownership or modification time for all
# files under some path.
change_permissions() {
  local SCRIPT_NAME="${1}"
  shift

     [ -n "${1}" ] || die "no arguments passed!"
  if [ -n "${2}" ]
  then command ${SCRIPT_NAME} --recursive --verbose ${*}
  else find . -exec ${SCRIPT_NAME} --verbose "${1}" '{}' \;
  fi

  return ${?}
}

# Pager.
alias less="less --RAW-CONTROL-CHARS --chop-long-lines --ignore-case --jump-target=.5 --long-prompt --squeeze-blank-lines --tabs=2"
#alias less="less --chop-long-lines --ignore-case --jump-target=.5 --lesskey-file=/etc/lesskey --long-prompt --squeeze-blank-lines --tabs=2"

# Touch.
function touch-recursive() {
  if [ -z "$1" ]; then
    echo "touch-recursive: no directory argument passed!" 1>&2
    return 1
  fi

  FIND_ROOT="$1"
  shift

  if [ -z "$1" ]; then
    echo "touch-recursive: no touch arguments passed!" 1>&2
    return 1
  fi

  echo "touch-recursive: recursively touching '$FIND_ROOT' with '$*'..."
  command find -O3 $FIND_ROOT -xdev -exec touch $* {} \;
  return $?
}

# User.
alias adduser='adduser --create-home --user-group --shell /bin/zsh'
alias useradd='useradd --create-home --user-group --shell /bin/zsh'

#FIXME: Pretty bad. Shift to an interactive_alias.
su() {
    is_arguments or set -- --login
    command su "${@}"
}

# ....................{ ALIASES =hardware                  }....................
# Hdparm.
hdparm-info() {
  local DEVICES

  if [ -n "$*" ]
  then  DEVICES="$*"
  else  DEVICES=$(echo /dev/sd?)
  fi

  # Pass the word-splitted list of devices to "hdparm". The ZSH variable
  # expansion argument "=" ensures this word-splitting, without which ZSH
  # passes (by way of example) a device list "/dev/sda /dev/sdb" as a single
  # string rather than two strings split on whitespace.
  hdparm -BIv ${=DEVICES} | less
}

# CMOS.
ntpd-set() {
  utter "Synchronizing time via ntpd..."
  ntpd -ds
}

# ....................{ ALIASES =ppc                       }....................
# Bootloader.
alias ybin="ybin --verbose"
alias ybin-install="ybin --boot /dev/hda2"

# ....................{ ALIASES =gentoo                    }....................
# Eix.
# List all installed ebuilds via eix.
alias eix-installed="\eix -cI | less"

# Mirrors.
alias mirrorselect-auto="mirrorselect -s4 -t8"

# Overlays.
alias layman="nice --adjustment=19 layman"
alias playman="nice --adjustment=19 playman"

# Portage. (Emerge.)
alias emerge-find-reverse-dependencies="equery depends"
alias qdepends="qdepends -a"

# Runlevels.
alias rc-update="rc-update --verbose"

# USE flags.
alias e-make_conf="${EDITOR} /etc/make.conf"
alias e-package_keywords="${EDITOR} /etc/portage/package.keywords"
alias e-package_use="${EDITOR} /etc/portage/package.use"
alias e-use_desc="${EDITOR} /usr/portage/profiles/use.desc"
alias e-use_local_desc="${EDITOR} /usr/portage/profiles/use.local.desc"

g-use() {
  grep "$*" /var/db/gentoo/profiles/use.*desc
}

# ....................{ ALIASES =math                      }....................
# Some notes on the GNU calculator, "bc," due its rather incoherent interface.
#
#                     { BASE CHANGES                       }
# To convert a decimal integer to hexadecimal, input "obase=16;" followed by
# the decimal integer; likewise, to convert a hexadecimal integer to decimal,
# input "ibase=16;obase=A;" followed by the hexadecimal integer.
#
#                     { EXPONENTS                          }
# To print the integer exponent ${EXPONENT} of a number ${NUMBER}, input
# "${NUMBER}^${EXPONENT}". Alas, but "bc" cannot interpret the fractional
# portion of exponents, as yet; one interim solution is an online calculator at
# "http://www.calculator.com/calcs/calc_sci.html".
#
#                     { LOGARITHMS                         }
# To print the logarithm (base e) of a number ${NUMBER}, input "l(${NUMBER})".
# To print the logarithm (of arbitrary base B) of a number ${NUMBER}, input
# "l(${NUMBER})/l(B)".
alias bc="bc --mathlib --quiet"

# Print a random number between [0, 1023].
echo-random() { echo $[$RANDOM%1024] }
#lias echo-random-ascii="dd if=/dev/urandom bs=18 count=1 2>/dev/null | uuencode -m - | head -n 2 | tail -n 1"

# ....................{ ALIASES =code                      }....................
# Eclipse.
function eclipse() { eclipse-3.5 $* & }
alias eclipse-clean="eclipse -clean"

# Lisp.
function emacs() { command emacs $* & }

# MultiMarkdown. (MultiMarkdown scripts cannot be symlinked; we alias, instead.)
alias mmd='perl /usr/share/multimarkdown/bin/multimarkdown2XHTML.pl'
alias mmd2tex='perl /usr/share/multimarkdown/bin/multimarkdown2latex.pl'

# Python.
function dreampie() { command dreampie $* & }

# ....................{ ALIASES =pen                       }....................
# Graphs.
function tulip() { tulip $* & }

# ....................{ ALIASES =web                       }....................
# Leech.
#alias wget="..."

# CVS.
alias cvs="EDITOR='vim' cvs"

cvs-status() {
  cvs -q status | command grep '^[?F]' | command grep -v 'to-date'
}

# DHCP.
alias dhcpcd="\dhcpcd --timeout 24 --nohook ntp.conf --noipv4ll"

dhcpcd-rebind() {
  if [ -n "$1" ]
  then IFACE="$1"
  else IFACE="eth0"
  fi

  dhcpcd --rebind $IFACE
}

dhcpcd-test() {
  if [ -n "$1" ]
  then IFACE="$1"
  else IFACE="eth0"
  fi

  dhcpcd --debug --test $IFACE
}

# DNS.
alias hostx="hostx -v"

# Downloaders.

# Retrieve remote files as local files having corresponding filenames.
alias curl-get="curl --remote-name-all"

# HTTP.
alias firefox-safe-mode="firefox -safe-mode"

firefox() {
    # Prevent Firefox from running as root.
    if [ "$EUID" = "0" ] || [ "$USER" = "root" ]; then
        die "do not run as root"
    fi

    command firefox $* 1> /dev/null 2>&1 &
}

# If under X.org, open a graphical "links"; otherwise, open a terminal "links".
links()   {
  if [ -n "$DISPLAY" ]
  then command links -g -force-html $* &
  else command links    -force-html $*
  fi
}

# IMAP.
alias offlineimap-debug="offlineimap -1 -d imap"

# IP.
alias route="route -vn"

# IP (wired).
alias re0="killall dhcpcd; restart-service net.eth0"
alias se0="killall dhcpcd; stop-service net.eth0"
alias ifconfig-eth0-static="ifconfig eth0 192.168.1.144 netmask 255.255.255.0 broadcast 192.168.1.255"

# IP (wireless).
alias wpa_supplicant-conf="${EDITOR} /etc/wpa_supplicant/wpa_supplicant.conf"
alias wpa_supplicant-test="wpa_supplicant -dd -Dwext -ieth1 -c /etc/wpa_supplicant/wpa_supplicant.conf -w"

# IRC.
#alias irssi-rsync="rsync -avz --existing main.irssi.org::irssiweb/scripts/scripts/ ~/.irssi/scripts/"

#FIXME: Generalize this into an "/etc/init.d/rtorrent-screen" script for
#treating screen-enabled command-line applications as system services. Thus,
#each of "/etc/init.d/rtorrent", "/etc/init.d/irssi", and so on
#would be a symlink to "/etc/init.d/screenify" which, when invoked via such a
#symlink, would implicitly do the right thing. Packaging this as a proper
#exheres, we might then also install shell aliases at install time according to
#which other exheres are also installed on the system. Python or Ruby might
#make appropriate languages given their ubiquity under modern systems.
irssi() {
    screenify "$(which_binary irssi)"
}

# SMTP.
alias mutt="mutt -y"

# TCP/IP.
alias ipa="ip -details -resolve -statistics addr"

# ....................{ ALIASES =x11                       }....................
# Startup.
alias startx="startx > ${HOME}/.xsession 2>&1"

# Configuration.
alias e-xorg_conf="${EDITOR} /etc/X11/xorg.conf"
alias e-xmodmap="${EDITOR} /etc/X11/Xmodmap"

# FVWM.
alias ll-wallpapers="ll /home/leycec/.fvwm-crystal/wallpapers/"

# Color management.
GAMMApage() { command GAMMApage $* & }
lprof()     { command lprof $* & }

# ....................{ ALIASES =games                     }....................
# PSP.
# Note: for lagged games, try "-l7 -t49"; online forums indicate this runs well.
alias cisoplus="cisoplus -opt"

# Famicom. (FCEUltra.)
alias fceu="\fceu -bpp 8 -clipsides 1 -frameskip 0 -fs 0 -gg 0 -no8lim 1 -nofs 1 -nothrottle 1 -opengl 0 -sound 11025 -soundq 0 -ntsccol 0 -pal 0"
alias fceu-scale="fceu -xscale 2 -yscale 2"
alias fceu-pal="fceu -pal 1"
alias fceu-cfg-gamepad1="fceu -inputcfg gamepad1"
alias fceu-cfg-gamepad2="fceu -inputcfg gamepad2"
alias fceu-vanilla="/usr/games/bin/fceu"
alias fceu-man="links -g /usr/share/doc/fceultra-0.98.12/html/fceultra.html"

# Star Control II: The Ur-Quan Masters.
alias uqm="uqm --addon uqmremix"

# ....................{ ALIASES =media                     }....................
# Audio.
alias alsamixer-save="sudo /etc/init.d/alsasound save"
alias crip="cd /media/sda1/new/; crip"

mp3splt-cue() {
  if [ -z "$1" ]; then
    echo "mp3splt-cue: no filenames passed!" 1>&2
    return 1
  fi

  if [ -z "$2" ]; then
    MP3_FILE="$1"
    CUE_FILE=$(echo "$MP3_FILE" | awk '{ sub(/\.mp3$/, ".cue"); print }')
  else
    MP3_FILE="$2"
    CUE_FILE="$1"
  fi

  echo "mp3splt-cue: splitting \"$MP3_FILE\" using cue file \"$CUE_FILE\"..."
  mp3splt -afc "$CUE_FILE" "$MP3_FILE"
}

ncmpcpp() {
    # Start the local "mpd" server if not already started.
    if not is_running mpd; then
        utter 'restarting mpd...'
        
        # If a baselayout-style "mpd" control script exists, run that;
        # otherwise, run "mpd" itself.
        if is -x '/etc/init.d/mpd' si
        then run_as_superuser '/etc/init.d/mpd restart'
        else run_as_superuser 'mpd --no-create-db'
        fi
    fi

    # Run the "ncmpcpp" interface.
    command ncmpcpp
}

# Fonts.
alias fc-cache="\fc-cache --verbose"
alias fc-match="\fc-match --verbose"
fc-list()   { command fc-list $* | sort }
fontforge() { command fontforge $* & }

# Images. (Feh.)
alias fehu="feh-unzoom"
alias fehz="feh-zoom"
alias feh="\feh --hide-pointer"
alias feh-full="feh-all --full-screen"
alias feh-unzoom="feh-all"
alias feh-thumbnails="feh-all --thumbnails --draw-filename --limit-height 600"

feh-all() {
  feh $* *.(gif|jpg|png) &
}

# Images. (Graphviz.)
dot-eps() {
  cat "$1" | unflatten | dot -Tps 1>"$1.eps"
  command evince "$1.eps" &
}
dot-pdf() {
  cat "$1" | unflatten | dot -Tpdf 1>"$1.pdf"
  command evince "$1.pdf" &
}
dot-png() {
  cat "$1" | unflatten | dot -Tpng 1>"$1.png"
  feh "$1.png" &
}
dot-svg() {
  cat "$1" | unflatten | dot -Tsvg 1>"$1.svg"
}
neato-feh() {
  neato -Tpng "$1" 1>"$1.png"
  feh "$1.png" &
}

# Text.
abiword() { command abiword --nosplash "${@}" 1> /dev/null 2>&1 & }
evince()  { command evince "${@}" & }
okular()  { command okular "${@}" & }
scribus() { command scribus "${@}" & }

# Text. (PDF.)
alias pdftohtml="\pdftohtml -c -nodrm -zoom 1.0"

pdfsam() { command pdfsam-1.4 $* & }

lyx() {
  # Ensure LyX's temporary path exists prior to running LyX. Oddly, it does not
  # ensure this, itself.
  local  TEMP_PATH="${HOME}/tmp/lyx"
  [ -d "$TEMP_PATH" ] || mkdir "$TEMP_PATH"

  command lyx $* &
}

# Disk usage.
baobab()    { command baobab    "${@}" & }
filelight() { command filelight "${@}" & }

# Images.
dia()    { command dia "${@}" & } 
geeqie() { command geeqie "${@}" & } 
gimp()   { command gimp "${@}" & } 

# Images. (Inkscape.)
inkscape() { command inkscape "${@}" & } 
inkscape_export_eps() {
    inkscape $* --export-eps="${1}.eps"
}
inkscape_export_pdf() {
    inkscape --export-area-drawing $* --export-pdf="${1}.pdf"
}

# Videos.
vlc() { command vlc "${@}" & }

# ....................{ KEYCHAIN                           }--------------------
# If "keychain" is runnable and no public/private key pairs have been cached
# yet (as indicated by the absence of a running "ssh-agent" process), do so.
is_installed keychain and\
    not is_running ssh-agent and\
    keychain_init

# ....................{ SYSTEM TIME                        }....................
#FIXME: Avoid performing when offline. Check first!
#Ugh; "baselayout"-dependent. Fix me; just call "ntpd" explicitly only if
#network access is available.
# If logging in as the superuser and if the current system time is fallacious
# (e.g., due to a dead CMOS or inaccessible RTC), set this time according to
# "ntp-client".
#if [[ ${USER} == "root" && $(date +%s) -lt 0 ]]; then
#    ECHO_PREFIX=" ${BOLD}${GREEN}*${WHITE}"
#    echo "${ECHO_PREFIX} System time "$(date --rfc-3339=seconds)" probably invalid!"
#    NTP_CLIENT='/etc/init.d/ntp-client'
#
#    if [[ -x "${NTP_CLIENT}" ]]; then
#        NTP_CLIENT_MESSAGE="${ECHO_PREFIX} Repairing system time via '${NTP_CLIENT}'..."
#        echo "${NTP_CLIENT_MESSAGE}"
#        "${NTP_CLIENT}" restart
#        echo "${NTP_CLIENT_MESSAGE}done"
#    else
#        echo "${ECHO_PREFIX} System time cannot be repaired; '${NTP_CLIENT}' not found!"
#    fi
#fi

#FIXME: Obsolete.
# ....................{ IMPORTS                            }....................
# Import Zeshy Core.
#if [[ $(whence -w get_zeshy_version) =~ ': function' ]]
#then zimport zeshy/core
##FIXME: Uhm; this doesn't work. Perhaps we meant "zeshy/.main"?
#else source  zeshy
#fi

#FIXME: This should definitely be replaced by on-demand autoloading, at some point.
# Import all other Zeshy components.
#zimport zeshy

#   if is_arguments
#   then command su "${@}"
#   else command su --login
#   fi
#
# ....................{ FUNCTIONS                          }....................
#run-deumasked() {
#    umask 022
#    $*
#    umask 077
#}

# ....................{ PREAMBLE                           }....................
# Absolute path to the current script.
#local zshrc_path="$(readlink --canonicalize-existing "${0}")"

# Directory having the current script.
#[[ -n "${ZESHY_HOME}" ]] ||
#    export ZESHY_HOME=$(readlink --canonicalize-existing "$(dirname "${zprofile_path}")/..")

# Import Zeshy Core.
#if [[ $(whence -w zimport) =~ ': function' ]]
#then zimport zeshy/core
#else source "${ZESHY_HOME}/src/zeshy/core"
#fi

# Inform the user that this script is being imported.
#utter_import "${zshrc_path}"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
