#!/usr/bin/env zsh
# ====================[ elicker                            ]====================
#
# --------------------( NAME                               )--------------------
# elicker - run eLyXer under sane defaults and sanitize output HTML files
#
# --------------------( SYNOPSIS                           )--------------------
# elicker [ELYXER_OPTION]... SOURCE_LYX_DIR SOURCE_LYX_FILE TARGET_HTML_FILE
#
# --------------------( USAGE                              )--------------------
# Change the "Converter" of "LyX -> HTML" of "Tools->Preferences" from:
#
#     elyxer --directory $$r $$i $$o
#
# ...to:
#
#    elicker $$r $$i $$o
#
# Due to eLyXer inadequacies, we also recommend passing the following options in
# the above call to "elicker":
#
# * "--title '${title_name}'", where ${title_name} is the desired title for such
#   document. Sadly, eLyXer defaults such title to "Converted document".
#
# --------------------( DESCRIPTION                        )--------------------
# Convert the passed source LyX file in the passed directory into the passed
# target HTML file via external Python converter eLyXer passed the passed
# options. After running eLyXer, elicker sanitizes the produced HTML file.

# ....................{ ZSH                                }....................
# Enforce strictness.
set -e

# Enable sane shell defaults.
setopt extended_glob no_unset rc_quotes rematch_pcre

# Enable exception handling.
autoload throw catch

# Load core zsh modules.
zmodload zsh/pcre zsh/parameter

# Print the passed message to standard error and throw a fatal exception.
function die() {
    print "${*}" 1>&2
    throw elicker_exception
}

# If eLyXer is *NOT* in the current ${PATH}, fail.
(( ${+commands[elyxer]} )) || die\
    '"elyxer" not installed or not in the current ${PATH}.'

# ....................{ CLI                                }....................
# Validate sanity.
(( # >= 3 )) || die\
    'Expected optional eLyXer options, one absolute base dirname, one absolute or relative source LyX filename, and one absolute or relative target HTML filename.'
local\
    dirname_src="${@[-3]}"\
    filename_src_lyx="${@[-2]}"\
    filename_trg_html="${@[-1]}"\
    filename_trg_html_old\
    dirname_trg
#print 'pwd: '${PWD}'\n$$r: '${dirname_src}'\n$$i: '${filename_src_lyx}'\n$$o: '${filename_trg_html}

# Pop such filenames from the argument list, leaving only eLyXer options.
argv[-3,-1]=()

# Strip a suffixing "/" from such source directory, if present.
dirname_src="${dirname_src%/}"

# If such target file is an absolute path, set the target directory to the
# directory containing such file.
if [[ "${filename_trg_html}" == '/'* ]] {
    dirname_trg="${filename_trg_html:h}"
# Else, set the target directory to the current directory and prefix the target
# file by such directory.
} else {
    dirname_trg="${PWD}"
    filename_trg_html="${dirname_trg}/${filename_trg_html}"
}

# If such target directory is *NOT* writable, fail.
[[ -w "${dirname_trg}" ]] || die\
    '"'${dirname_trg}'/" unwritable by current user '${USER}'.'

# If such source file is *NOT* an absolute path, prefix such path by such target
# directory. Since the original source file may have been altered by a prior
# converter in the current conversion, obtain such file from where LyX copied it
# to in the target directory.
if [[ "${filename_src_lyx}" != '/'* ]] {
    filename_src_lyx="${dirname_trg}/${filename_src_lyx}"
}

# Insist eLyXer output to an intermediate target file rather than the passed
# target file that LyX expects. While we could permit eLyXer to instead output
# to the latter, preserving eLyXer's preprocessed output can be helpful for
# archival and debugging purposes.
filename_trg_html_old="${filename_trg_html%.html}_old.html"

# ....................{ ELYXER                             }....................
# Optional files and subdirectories of such directory.
local\
    dirname_src_mathjax="${dirname_src}/MathJax"\
    filename_src_css="${dirname_src}/lyx.css"
#print "Current arguments: ${*}"

# Set sane defaults for eLyXer options.
argv+=(
    --nofooter
    --directory "${dirname_src}"
)

# If the caller passed no "--css" option *AND* the source CSS file exists,
# default to local CSS usage.
if (( ${@[(ie)--css]} > ${#} )) && [[ -f "${filename_src_css}" ]] {
    argv+=( --css "${filename_src_css}" )
}

# If the caller passed no "--mathjax" option, set sane MathJax eLyXer options.
if (( ${@[(ie)--mathjax]} > ${#} )) {
    # If the source "MathJax" subdirectory exists, default to local MathJax usage.
    if [[ -d "${dirname_src_mathjax}" ]] {
        argv+=( --mathjax "${dirname_src_mathjax}" )
    # Else, default to remote MathJax usage.
    } else {
        argv+=( --mathjax remote )
    }
}

# Run eLyXer, converting such source to target file.
print "Running eLyXer as:
    elyxer ${*} \"${filename_src_lyx}\" \"${filename_trg_html_old}\""
command elyxer "${@}"\
    "${filename_src_lyx}"\
    "${filename_trg_html_old}"

# ....................{ POST-PROCESS                       }....................
print "Post-processing \"${filename_trg_html}\"..."

# Copy such temporary target file to the target file LyX expects.
cp "${filename_trg_html_old}" "${filename_trg_html}"

# Load zsh module "zsh/mapfile", providing both read and write access to text
# file contents by map global ${mapfile}, only for the exact duration of such
# access. Since unsetting map entries permanently, silently deletes the
# corresponding files, such module is inherently unsafe and should only be
# loaded as long as required.
zmodload zsh/mapfile
{
    # Change MathJax's math color from default grey (bad!) to black (good).
    #
    # For safety, performing such change requires matching multiple lines. While
    # either "awk" or "sed" could be employed to do so, both behave awkwardly
    # across multiple lines. Instead, leverage the the multiline-matching
    # PCRE facilities of zsh module "zsh/pcre" to do so. It should be noted that
    # XMLStarlet is a preferable means of modifying XML. Due to laziness and a
    # distate for additional dependencies, however, we take the hard way.
    print "Renaming default MathJax math color..."

    # Regex matching lines loading MathJax's JavaScript library from the output
    # HTML file to ${match[1]}. Note that the dot matches all characters
    # excluding newlines, here.
    local pcre='(.*?src=".*?MathJax.js[^"]++">\n</script>)'

    # Match such substrings in such file.
    [[ "${mapfile[${filename_trg_html}]}" =~ "${pcre}" ]] || die\
        '"'${filename_trg_html}'" fails to match PCRE "'${pcre}'".'

    # Embed such change between such substrings, implicitly rewriting such file.
    mapfile[${filename_trg_html}]="${mapfile[${filename_trg_html}][1,MBEGIN-1]}${match[1]}
<style>
    .MathJax_Preview { color: black !important }
</style>${mapfile[${filename_trg_html}][MEND+1,-1]}"

    #FIXME: If this is *STILL* too slow, resort to in-place "sed". *shrug*

    # Remove all forward references to index and glossary entries from the body
    # of such document. While LaTeX hides such references by default, eLyXer
    # displays such references as Unicode down arrows. Since readers rarely care
    # whether and where the index or glossary references the current sentence,
    # hiding such references tends to produce significantly more readable and
    # navigable text.  Moreover, since titles can contain such references *AND*
    # since such references can be concatenated together, displaying such
    # references as arrows tends to produce unaesthetic output.
    #
    # Specifically, globally replace all "<a>...</a>" tags resembling:
    #
    # * <a class="IndexReference" name="entry-Fruit-patterns-Watermelon-spiral-0" href="#index-Fruit-patterns-Watermelon-spiral">↓</a>
    # * <a class="NomenclatureEntry" name="noment-vitalism" href="#nom-vitalism">↓</a>
    print "Removing empty forward references..."

    # Original text of such file. For efficiency, iteration below modifies
    # such text "in-place."
    local text_old="${mapfile[${filename_trg_html}]}"

    # Replaced text of such file.
    local text_new

    # While there exist substrings matching such PCRE in such text, dynamically
    # replace such substrings with their replacement. Since each such
    # replacement guaranteeably replaces such match, the implementation below
    # need *NOT* store the byte offset of the current match to string global
    # ${ZPCRE_OP} (unlike most PCRE match iterations). Such implementation
    # strongly resembles that of for_string_text_matching_pcre:() but differs enough to
    # warrant separation here. See such function for further details.
    #
    # For efficiency, avoid performing brute-force matching ala
    # 'while is "${text_old__rltmpbt}" =~ "${pcre__rltmpbt}" si {...}'. Such
    # approach does suffice to implement the desired iteration but could
    # conceivably recompile such PCRE on each iteration (depending on zsh
    # internals) and in any case is unlikely to optimize such compilation by
    # internally calling pcre_study().
    pcre_compile -- '<a[^>]++>↓</a>'
    pcre_study

    # Unfortunately, pcre_match() fails to set global integers ${MBEGIN} and
    # ${MEND} to the character indices of the start and end of the matched
    # substring. Fortunately, it sets global string ${ZPCRE_OP} to the " "-
    # delimited *BYTE* indices of the start and end of such substring.
    # Unfortunately, multibyte strings (e.g., UTF8-encoded) are indexed with
    # character rather than byte indices under default zsh option "multibyte".
    # Fortunately, such option can be locally disabled to force zsh to index all
    # strings (multibyte or not) with byte rather than character indices.
    unsetopt multibyte

    while { pcre_match -b -- "${text_old}" } {
        # If such substring is empty, throw an exception. This avoids infinite
        # loops on perverse PCREs matching only zero-width assertions or the
        # empty string.
        (( ${#MATCH} )) || die 'PCRE erroneously matched the empty string.'

        # Append the replaced text by the portion of the original text preceding
        # such match.
        text_new+="${text_old[1,${ZPCRE_OP[(w)1]}]}"

        # Reduce the original text to the portion following such match.
        text_old="${text_old[${ZPCRE_OP[(w)2]},-1]}"

        setopt multibyte
        text_old="${text_old[2,-1]}"
        unsetopt multibyte
    }

    # Set such scalar to such replaced text followed by all remaining original
    # text. To avoid extraneous string copies, inline such implementation.
    mapfile[${filename_trg_html}]="${text_new}${text_old}"

    # Reenable default character indexing.
    setopt multibyte
# For safety, unload "zsh/mapfile" even in the event of exceptions.
} always {
    zmodload -ui zsh/mapfile
}

# --------------------( WASTELANDS                         )--------------------
#   mapfile[${filename_trg_html}]="${mapfile[${filename_trg_html}]//\<a[^>]#\>↓\</a\>}"
    # across multiple lines. Instead, leverage the text file expansion
    # facilities of zsh module "zsh/mapfile" along with the multiline-matching
    # PCRE facilities of zsh module "zsh/pcre" to do so. Since "zsh/mapfile" is
    # a rather unsafe module to leave loaded, load such module only for the
    # duration of such change.

    # Regex matching the loading of MathJax's JavaScript library from the output
    # HTML file to ${match[1]} and the remainder of such file to ${match[2]}.
#   local pcre='(.*?src=".*?MathJax.js[^"]++">\n</script>)(.*)'

#command sed -ie\
    #'s~\(</script>\)~\1<style>.MathJax_Preview { color: black !important}</style>~'\
    #"${filename_trg_html}"
# Directory containing the original source LyX file.
#dirname_src="${filename_src_lyx_old:h}"

# List set of all passed arguments, excluding repeated arguments and including
# sane defaults.
#typeset -Ua options
#options=( "${@[1,-4]}" '--nofooter' )

# Pop such filenames from the argument list, leaving only eLyXer options.
#argv[-2,-1]=()
