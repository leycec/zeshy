#!/usr/bin/env zeshy

# To correctly run this script, touch the zeshy codebase to ensure
# ${ZESHY_ALIAS_NAMES} and ${ZESHY_FUNCTION_NAMES} have been defined.

list_set runnable_names runnable_names_ununderscored

# List of runnable names to be renamed.
runnable_names=( "${ZESHY_ALIAS_NAMES[@]}" "${ZESHY_FUNCTION_NAMES[@]}" )

# List of runnable names containing no underscores.
set_list_to_list_items_matching_glob\
    runnable_names_ununderscored runnable_names '[^_]##'

# Do *NOT* rename runnables either containing no underscores or already suffixed
# by a colon.
remove_list_items_matching_glob runnable_names '(*:|[^_]##)'

# For confirmation, print such lists.
{
    print_message_heading "Runnable names to be renamed"
    output_strings_newlined "${runnable_names[@]}"

    print_message_heading "Runnable names containing no underscores"
    output_strings_newlined "${runnable_names_ununderscored[@]}"
} | page_stdin

#FIXME: All following code will be generally useful for others and, more
#importantly, provide the basis for a pure-zeshy replacement to my current
#"mv-pcre" script. Consequently, generalize such code into a new function: say,
#
#"void replace_file_text_matching_map_pcre_by_text:(
#    string filename1, ..., string map_name)".
#
#Hence, the set of files is passed as direct arguments (permitting direct use of
#recursive file globbing operators) while the set of PCREs and text replacements
#is passed as a single map from the latter to the former.
#FIXME: Actually, such function needs to accept an ordered list rather than map,
#as the order in which replacements are performed can be *VERY* significant:
#
#void replace_file_text_matching_list_pcres_by_texts:(
#    string filename1, ..., string list_name)
#
#Naturally, the size of such list must be an even integer.
#FIXME: That said, we probably want an interface to such function delimiting the
#two lists with an argument "--". Since this precludes use of "--" for either
#filenames or PCREs, such function can only ever be an interface -- but, its
#utility is plain. Moreover, such function should contain logic providing a
#dry-run preview of such replacement and requiring the user provide
#confirmation when run interactively.
#FIXME: Given the complexity, a new parcel @{path/file/text/replace} may be
#warranted.

#FIXME: O.K.; by the nature of the search-and-replace motif, we can only perform
#one search-and-replace at a time on a file. For improved file caching, we'd
#might as well then have our outer loop iterate across all *FILES* (i.e., "(.)")
#recursively under ${ZESHY_HOME} and our inner loop iterate across
#${runnable_names}.
#FIXME: *AFTER* successfully performing all possible search-and-replaces, print
#the set of all runnable names *NOT* containing underscores and hence not renamed.
#FIXME: Great. Only problem is, we currently have no function for performing
#PCRE-driven search-and-replacement. Happily, the zsh codebase does -- and it's
#actually fairly clever, using "(e)" to good advantage. See:
#    /usr/share/zsh!command vim 5.0.2/functions/Misc/regexp-replace
#Convert such autoloadable function into a pair of zeshy functions -- say,
#
#"void replace_string_text_matching_pcre_by_text:(
#     string string_name, string pcre, string code)" internally calling.
#"void set_string_to_string_text_matching_pcre_by_text:(
#     string target_string_name,
#     string source_string_name,
#     string pcre,
#     string code)".
#
#We'll want to test replace_string_text_matching_pcre_by_text:() a fair amount
#before definitively calling it here. Unfortunately, as we're operating on
#${mapfile} keys, I'm not entirely clear how we'll do this without file content
#copies. Perhaps we really just want a new
#"replace_map_key_value_text_matching_pcre_by_text:(
#     string map_name,
#     string key,
#     string pcre,
#     string code)" function? (No need for an internal setter, in this case, I
#should think.) Right. That function should do it, really. I can't imagine much
#use for it outside of ${mapfile}, but that alone makes it *EXCEPTIONALLY*
#worthwhile.
#
#Let's do this.
