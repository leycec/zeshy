#!/usr/bin/env zsh
# ====================[ zeshy                              ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Shebang Zeshy loader. This Zeshy-specific Zsh shell script replaces the
# "#!/usr/bin/env zsh" shebang command, which invokes Zsh on the file, with a
# "#!/usr/bin/env zeshy" shebang command, which invokes Zeshy-capable Zsh on the
# same file.
#
# Here, "Zeshy-capable Zsh" means a Zsh shell process having available:
#
# * All functions, aliases, and variables exported by Zeshy Core.
# * No functions or aliases exported by other Zeshy components.
# * But possibly variables exported by other Zeshy components, if inherited from the
#   caller's environment. In other words, do not rely on this.
#
# --------------------( USAGE                              )--------------------
# Third-party scripts requiring one or more Zeshy components are encouraged to
# replace any existing shebang line at the top of each such file with:
#
#     #!/usr/bin/env zeshy
#
# This invokes this script on each such file, which:
#
# * Sources "zeshy/core", the core Zeshy module providing (among other base
#   functionality) the import() function with which third-party scripts may
#   optionally import all other Zeshy modules in a platform portable manner.
# * Runs "zsh" on the passed file.
#
# Third-party scripts requiring one or more Zeshy components but not declaring
# the above shebang line *must* manually source "zeshy/core" at the top of each
# such file with:
#
#     #!/usr/bin/env zsh
#
# Note that this script performs additional checks for path and platform sanity;
# thus, the above approach is strongly discouraged.

# ....................{ SANITY                             }....................
# Ensure "${ZESHY_HOME}" is defined and, if not, try doing so.
if [[ -z "${ZESHY_HOME}" ]]; then
    if [[ -r    '/etc/env.d/%%zeshy' ]]
    then source '/etc/env.d/%%zeshy'
    else export ZESHY_HOME='/usr/share/zeshy'
    fi
fi

# If Zeshy does not exist, fail with error.
if [[ ! -d "${ZESHY_HOME}" ]]; then
    print "zeshy: \"${ZESHY_HOME}\" not found" 1>&2
    exit 1
fi

# Absolute path of the Zsh script bootstrapping Zeshy.
local ZESHY_MAIN_SCRIPT="${ZESHY_HOME}/src/main"

# ....................{ VANITY                             }....................
# Bootstrap Zeshy.
source "${ZESHY_MAIN_SCRIPT}"

# If the caller passed arguments, interpret the first argument as the absolute
# path to the Zeshy script to be "executed" and remaining arguments as the
# arguments to be passed such script. Certainly, this is always the case when
# this wrapper script is indirectly invoked by a shebang script header (e.g.,
# "#!/usr/bin/env zeshy").
if (( # )); then
    # Ensure this Zeshy script receives the expected arguments by popping off
    # the absolute path to this script from the argument list, thus leaving only
    # the script-specific arguments the caller passed.
    #FIXME: Hmmm; what was the idea here, again? Does the simple statement below
    #work, instead?
#   list arguments; arguments=( "${@}" )
#   shift_one_arg
#   source "${arguments}"
    source "${@}"
#FIXME: Does this run "src/always/shell/profile" or do we need to add additional
#options or function calls to do so?
# If the caller passed no arguments but is interactively attached to a terminal
# device, drop the caller into an interactive Zsh shell inheriting the currently
# bootstrapped Zeshy functionality.
elif [[ -t 0 ]]; then
    # Replace the current script with the new Zsh shell.
    exec zsh
# Otherwise, drop the caller off the Tarabithian bridge.
else
    print 'zeshy: expected one source filename and zero or more arguments when called non-interactively' 1>&2
    exit 1
fi

# --------------------( WASTELANDS                         )--------------------
#   source "${ZESHY_MAIN_SCRIPT}"
#   exec zsh -i "${ZESHY_MAIN_SCRIPT}"
#   zsh -ic "source '${ZESHY_MAIN_SCRIPT}'"
#elif [[ -o interactive ]]; then
#FIXME: There's no way this works as is. (It'd be nice, though...) First, I
#doubt is_interactive() ever returns true in this context. Hence, this should
#probably test whether standard input and/or output are attached to a terminal
#device: e.g.,
#elif is_terminal; then
#Second, I highly doubt the invoked "zsh" subshell actually inherits the Zeshy
#functions initialized above. Hence, the above "source" statement should be
#shifted under the above "if is_args; then" and then also executed here as
#something resembling (note the prefixing "exec"):
#   exec zsh -c "source '${ZESHY_HOME}/src/main'"
#But even that may not quite be right. Does this run "src/always/shell/profile"
#or do we need to add additional options or function calls to do so?

