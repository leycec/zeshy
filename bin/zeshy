#!/usr/bin/env sh
# ====================[ zeshy                             ]====================
#
# --------------------( LICENSE                           )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.
#
# --------------------( SYNOPSIS                          )--------------------
# If passed neither arguments or standard input, run zeshy as an interactive
# shell under the current terminal; else, run such arguments and/or standard
# input under zeshy.
#
# --------------------( OPTIONS                           )--------------------
# zeshy accepts most command-line options accepted by zsh.
#
# --------------------( SCRIPTS                           )--------------------
# zeshy scripts may load zeshy by adding a shebang line to the first line of
# such files. For cross-platform portability, consider the following line:
#
#     #!/usr/bin/env zeshy
#
# zeshy accepts most shell scripts accepted by zsh. However, several strategic
# design differences between zeshy and zsh preclude perfect backward
# compatibility. The largest difference is strictness: zeshy always throws an
# exception on any alias, command, or function returning non-zero exit status;
# zsh, on the other hand, ignores non-zero exit status where not explicitly
# handled (e.g., by appending "|| { print 'command failed' 1>&2; exit 1 }" to
# commands expected to fail).

#FIXME: Document somewhere that setting zeshy as a user's default "/etc/passwd"
#shell requires adding "zeshy-login" to "/etc/shells" under Linux and
#"zeshy-login" as the corresponding shell field.
#FIXME: Hmm; this should be a part of "zeshy" installation, no? What does "zsh"
#do? (Surely, not attempt to patch "/etc/shells"? If not, perhaps the best we
#can do is inform the user in ebuild post-installation messages of the need to
#manually edit "/bin/zeshy-login" into "/etc/shells". Since such file *ONLY*
#lists login shells, "/bin/zeshy" needn't be added.)
#FIXME: This also highlights the need to install both "zeshy" and "zeshy-login"
#to "/bin", in accordance with other similar shells.

#FIXME: The fact that zsh squelches "-" prefixes on ${argv[0]} is a clue that we
#probably want to reimplement this script in POSIX C. (Could be quite fun,
#actually, aside from the fact that it'll require a substantially smarter zeshy
#makefile.) Shouldn't be a terribly large file; everything we're doing here has
#a direct C analogue. The potential startup speedup makes this a particularly
#worthwhile improvement.
#FIXME: O.K.; make this happen. The refactoring suggested below strongly implies
#we should go this road. Naturally, contemplate a CMake makefile.
#FIXME: O.K., O.K.! This *HAS* to happen. Why? Because we *NEED* to pass option
#"NO_RCS" to zsh to prevent recursion. (Which we currently do avoid with boolean
#global ${ZY_PID_LAST_LOADED_BY}, though such solution is highly fragile,
#extremely difficult to debug and hence maintain, and likely to fail
#inexplicably.) Unfortunately, however, Linux does not perform word splitting on
#arguments passed to "!/usr/bin/env" shebang lines, meaning we can't modify the
#above shebang to:
#
#    !/usr/bin/env zsh -o no_rcs
#
#Indeed, to do so reliably, we'd need to convert "bin/zeshy" into a Bourne shell
#script execing the true zsh driver script "bin/zeshy.zsh" with option "NO_RCS".
#Since this rapidly becomes patently absurd, however, with shell interpreter
#spawning shell interpreter after shell interpreter, the only sensible solution
#is to reimplement this script as a precompiled C frontend.
#FIXME: The only difficult aspect of doing so will be reimplementing the
#parameter expansion "${(qq)@}" in C. Not a pretty thought, actually. Wait!
#Actually, since zsh itself is C, such implementation would be trivial. Ya!

# :void set_zsh_wrapper_script[stdin=(:str zsh_script)]
#
# Set string global ${ZY_ZSH_WRAPPER} to the zsh shell script passed on
# standard input (e.g., as a here-document). Defining this script as a here-
# document permits this script to be defined significantly more naturally than
# were this script defined with customary single or double quotes.
#
# Unlike zsh, Bourne shell prohibits arbitrary code blocks from accepting here-
# documents (or any redirections, for that matter). Like zsh, however, Bourne
# shell does permit function calls from accepting here-documents. Hence, the
# following logic is equivalent in intent to the following zeshy command:
#
#     { ZY_ZSH_WRAPPER="$(get_stdin)" } <<'/---'
#     ...
#     /---
set_zsh_wrapper_script () {
    ZY_ZSH_WRAPPER="$(cat /dev/stdin)"
}

# Implicitly set the ${ZY_ZSH_WRAPPER} string global to this here-document.
set_zsh_wrapper_script <<'/---'
# Wrap this script in a function context, confining all local variables
# declared below to this context.
() {
# print "[${0}] starting zeshy wrapper"

# ....................{ OPTIONS                           }....................
# Enable:
#
# * Shell strictness. While zeshy replaces such crude options with
#   considerably more robust error handling (e.g., printing stack traces and
#   help documentation on errors), anything beats zsh's default laxity.
# * Extended glob expressions (e.g., to match options).
setopt err_return no_unset warn_create_global extended_glob

# ....................{ GLOBALS                           }....................
# Globally export such variables for subsequent expansion by the zeshy
# codebase. Exporting such variables preserves such variables between calls to
# builtin exec() (e.g., if replacing the current non-interactive zsh process
# with an interactive zsh process below). While such variables may also be
# preserved by explicitly passing such variables to such calls, unconditionally
# exporting such variables here remains both simpler and safer.
typeset -gx ZY_HOME ZY_MAIN_SCRIPT

# ....................{ PATHS                             }....................
#FIXME: The "install" script *MUST* absolutely globally replace all instances
#of #@ZY_HOME@ in this script. (There should only be one such instance,
#but... *shrug*.) The at sign "@" is particularly helpful for this #purpose, as
#it appears to have no current reserved uses in zsh.
#FIXME: Such script *MUST* also globally prefix all single quotes in such path
#with another such quote (e.g., replacing "'" with "''"), to avoid syntax
#errors with edge-case paths.

# Absolute path of the main zeshy overlay (i.e., topmost zeshy directory).
# zeshy's installation script defaults such path to that passed to that script.
# Globalize such path for reuse by zeshy parcels sourced below.
ZY_HOME="${ZY_HOME:-@ZY_HOME@}"

# If such path has not been replaced, the user failed to install zeshy (e.g.,
# due to legitimately running zeshy under a cloned "git" repository). Detect
# this and attempt to respond rationally.
if [[ ${ZY_HOME} == '@ZY_HOME@' ]] {
    local zeshy_wrapper_filename zeshy_bin_dir zeshy_src_dir
    local -a pathname_canonical

    # Absolute or relative path of the Bourne script wrapping the current zsh
    # script. To prevent syntax errors in the event this path contains either
    # single or double quotes, this path is localized ala :Str.set().
    # Technically, this assignment can still fail with syntax errors in the
    # event such path contains a "}" character. Since this is substantially
    # less likely than this path containing quote characters, however, we
    # currently ignore this edge case.
    zeshy_wrapper_filename=${ZY_BOURNE_WRAPPER_FILENAME}

    #FIXME: Odd logic. Why not just set ${zeshy_wrapper_filename} directly? As:
    #   zeshy_wrapper_filename=${ZY_BOURNE_PWD}'/'${ZY_BOURNE_WRAPPER_FILENAME}

    # If this path is relative rather than absolute, this path is assumed to be
    # relative to the current working directory of the wrapping Bourne script.
    # In this case, convert this relative path into an absolute path by
    # prefixing this path by the absolute path of that directory.
    [[ ${zeshy_wrapper_filename} == '/'* ]] ||
        : "${zeshy_wrapper_filename::=${ZY_BOURNE_PWD}/${ZY_BOURNE_WRAPPER_FILENAME}}"

    # If this script does not exist, fail. (This should never happen.)
    [[ -f ${zeshy_wrapper_filename} ]] || {
        print 'zeshy: Wrapper script "'${zeshy_wrapper_filename}'" not found or not a file.' 1>&2
        exit 1
    }

    # Canonicalize this path (i.e., resolve all intermediate symbolic links).
    # Since the current script necessarily exists, this canonicalization is
    # guaranteed to succeed and hence need *NOT* be validated (unlike below).
    pathname_canonical=( "${zeshy_wrapper_filename}"(:A) )
    zeshy_wrapper_filename="${pathname_canonical[1]}"
    # print "zeshy_wrapper_filename: ${zeshy_wrapper_filename}"

    # Absolute path of the directory containing this script.
    zeshy_bin_dir="${zeshy_wrapper_filename:h}"

    # Relative path of the main zeshy overlay directory.
    zeshy_src_dir="${zeshy_bin_dir}/../src"

    # Absolute path of the main zeshy overlay directory.
    pathname_canonical=( "${zeshy_src_dir}"(:A) )

    # If such path does *NOT* exist, report failure. See the main zeshy script
    # for similar logic (and further explanation).
    (( ${#pathname_canonical} )) || {
        print 'Main overlay "'${zeshy_src_dir}'/" not found.' 1>&2
        exit 1
    }

    # Else, set such global accordingly.
    ZY_HOME="${pathname_canonical[1]}"
}

# Absolute path of zeshy's entry script, conditionally compiling and
# autoloading the zeshy codebase into the current digest file.
ZY_MAIN_SCRIPT="${ZY_HOME}/zeshy.zy"

# If such directory does not exist, fail.
[[ -d "${ZY_HOME}" ]] || {
    print 'zeshy: Main overlay "'${ZY_HOME}'" not found or not a directory.' 1>&2
    exit 1
}
#print "ZY_HOME: ${ZY_HOME}"

# If such script does not exist, fail.
[[ -f "${ZY_MAIN_SCRIPT}" ]] || {
    print 'zeshy: Main script "'${ZY_MAIN_SCRIPT}'" not found or not a file.' 1>&2
    exit 1
}

# ....................{ OPTIONS                           }....................
# If called as "zeshy-login", prepend option "-l" to the passed arguments.
# Ideally, this script would itself ascertain whether or not it was run as a
# login shell by a process running "login". Such process reliably prefixes the
# ${argv[0]} string identifying the name of this process with "-", thus
# signifying this shell to be a login shell. Unfortunately, zsh squelches such
# "-" unless explicitly running this script under "zsh" rather than an implicit
# shebang line (e.g., as "- zsh /usr/bin/zeshy" rather than "-
# /usr/bin/zeshy").
#
# While replacing this script with a customary C-based binary would rectify
# such issue, "the best laid schemes of mice and men/often go awry."
if [[ "${ZY_BOURNE_WRAPPER_FILENAME:t}" == 'zeshy-login' ]] {
    # print -r "zeshy: called as zeshy-login"
    set -- -l "${@}"
}

# If passed no arguments specifying a course of action, default to opening an
# interactive shell by prepending option "-i" *AFTER* testing whether we were
# called as a login shell. Dismantled, this is:
#
# * "${@[(i)...]}", expanding to the 1-based index of the first passed argument
#   matching such glob or to the number of such arguments plus 1 if no argument
#   matches such glob:
#   * "[^-]*", matching a non-option argument if passed. In zeshy's case, such
#     argument *ALWAYS* signifies a script to be sourced.
#   * "-[a-z]#[chilv][a-z]#", matching a string of short arguments containing
#     at least one of options "-c", "-h", "-i", "-l", or "-v". See "zeshy -h"
#     for further details.
# * "#", expanding to the number of such arguments.
(( ${@[(i)([^-]*|-[a-z]#[chilv][a-z]#|--(command=*|help|interactive|login|version))]} <= # )) || {
#   print 'passed no other action; defaulting to interactive (i.e., "-i")'
    # If standard input to the current shell is attached to a terminal, drop
    # the caller into an interactive zeshy shell.
    if [[ -t 0 ]] {
        set -- -i "${@}"
    # Else, drop the caller off the Tarabithian bridge. (Spoiler alert.)
    } else {
        print "zeshy: Expected at least one argument when called non-interactively." 1>&2
        exit 1
    }
}

# Load module "zutil", defining zparseargs() and other core builtins.
zmodload zsh/zutil

# Parse passed options specific to this script, propagating all other arguments
# to the main zeshy script. If such parsing fails, print the help string to
# standard error and exit with non-zero status. See parse_arg_options() for
# further details. While it *SHOULD* be theoretically infeasible for parsing of
# such simple options to fail, one just never knows.
#
# Map long- to short-form options (e.g., "--interactive" to "-i") rather than
# the other way around to simplify zsh interaction below. If such options were
# passed, we in turn pass such options to zsh. Since zsh may or may not expect
# long-form options depending on platform or version, prefer short-form options.
local -A arg_options
zparseopts -M -D -E -A arg_options -- i l -interactive=i -login=l || {
    print -- "zeshy: Passed invalid or unknown options." 1>&2
    exit 1
}

# ....................{ MAIN                              }....................
# If passed either "-l" or "-i", replace the current process with a new process
# running zsh under such options. Since changing such options changes zsh's
# startup behavior, such options cannot be changed at runtime but must be
# explicitly passed to the "zsh" command. Since login shells are implicitly
# interactive, "-l" subsumes "-i". Hence, test the latter before the former.
if (( ${#arg_options} )) {
#   print "[${0}] sourcing interactively ${ZY_MAIN_SCRIPT} ${*}"

    # Globally export the following variables for subsequent expansion by
    # zeshy's ".zshrc" dotfile:
    #
    # * ${ZY_ARGS}, the list of all arguments passed to this script
    #   losslessly flattened into a string for subsequent conversion back into
    #   a list. See :convert_list_to_string() for further details.
    # * ${ZDOTDIR}, the absolute path of the directory containing zeshy's
    #   dotfiles -- in this case, only ".zshrc". Since "zsh" cannot be passed
    #   both option "-i" enabling interactivity *AND* a non-interactive script
    #   to be run on zsh startup, zeshy slyly subverts such constraints by
    #   running such non-interactive script on zsh startup from within a zeshy-
    #   specific dotfile run only on such startup.
    typeset -gx ZY_ARGS="${(qq)@}" ZDOTDIR="${ZY_HOME}"

    # Replace the current non-interactive zsh process with an
    # interactive zsh process sourcing zeshy's ".zshrc" dotfile, itself
    # sourcing zeshy's "main" entry script. Such replacement ensures the
    # following order of sourced scripts on running the current script:
    #
    # 1. "bin/zeshy", zeshy's wrapper script.
    # 2. "src/.zshrc", zeshy's startup dotfile.
    # 3. "src/main", zeshy's entry script.
    #
    # Dismantled, this is:
    #
    # * "-o no_global_rcs", preventing such process from sourcing system-wide
    #   zsh dotfiles (e.g., "/etc/zsh/zshrc"). To ensure such process sources
    #   zeshy's startup dotfile, disable option "global_rcs" rather than "rcs".
    # * "(@k)", expanding to all passed options (e.g., "-l", "-i").
    exec zsh -o no_global_rcs "${(@k)arg_options}"
# Else, source the main zeshy script with the passed arguments under the current
# zsh process.
} else {
#   print "[${0}] sourcing non-interactively ${ZY_MAIN_SCRIPT} ${*}"
    source -- "${ZY_MAIN_SCRIPT}" "${@}"
}
}
/---

# Replace the current Bourne shell process with a zsh shell process running the
# zsh shell script passed on standard input (e.g., as a here-document). To
# preserve standard input, this replacement is performed outside of the prior
# function call. Unfortunately, doing so replaces the path the current script
# was run as (i.e., "${0}") with "zsh", preventing this script from locating
# either itself or the zeshy codebase. To circumvent this, both that path and
# the current working directory of the current process are passed as
# zeshy-specific string globals.
#
# While this script could theoretically be implemented in pure Bourne shell,
# doing so in a reliable, cross-platform portable manner is complicated by the
# non-trivial logic this script performs (e.g., path canonicalization and
# quote-protected list-to-string conversion).
#
# For robustness, prevent zsh from sourcing either system- or user-specific zsh
# dotfiles on startup by enabling shell option "NO_RCS". While zeshy is both
# implemented in and runs on zsh, the family resemblance ends there. Zsh
# dotfiles typically contain code either breaking subsequent zeshy code or
# which subsequent zeshy code will break. In either case, code is breaking.
#
# System administrators and/or users attempting to incorporate existing zsh
# dotfile functionality into zeshy must thus manually port such functionality
# into system- and/or user-specific zeshy overlays (e.g., "~/.zeshy/overlay").
ZY_BOURNE_WRAPPER_FILENAME="${0}" \
ZY_BOURNE_PWD="${PWD}" \
    exec zsh -o no_rcs -c "${ZY_ZSH_WRAPPER}"
