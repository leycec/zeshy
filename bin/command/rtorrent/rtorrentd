#!/usr/bin/env zeshy
# vim: set filetype=zsh
#
# ====================[ rtorrentd                          ]====================
#                     [ Time-stamp: "2008-12-01 15:36:24 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Daemonize "rtorrent" to the background.
#
# --------------------( DESCRIPTION                        )--------------------
# rtorrent is "...a BitTorrent client for ncurses, using the libtorrent library.
# The client and library is written in C++ with emphasis on speed and
# efficiency, while delivering equivalent features to those found in GUI-based
# clients in an ncurses client."
#
# rtorrent has, unfortunately, no formal support for daemonization; that is,
# rtorrent cannot be backgrounded or foregrounded to and fro the command-line.
# Once you start it, it's always there: consuming one virtual terminal
# (console) with its murky glimmerings.
#
# rtorrent, therefore, cannot be run as a background daemon on system startup. 
# Unless we apply some external trickery! The external applications "screen" and
# "dtach" are two such external trickeries. Both allow applications to be
# detached from the terminal from which they were run and then later
# reattached to any terminal elsewhere. "dtach" is significantly smaller and
# simpler than "screen"; however, "screen" is significantly more commonplace
# and tends to come installed (and pre-configured) on more machines. In the
# pragmatic interest of minimizing script prerequisites, therefore, this script
# leverages "screen".
#
# --------------------( IMPORTS                       )--------------------
# This script requires:
#
# * rtorrent.
# * screen.
# 
# This script does not require any particular init system (e.g., baselayout,
# systemd), though it does provide partial support for several.
#
# --------------------( INSTALLATION                       )--------------------
#   # Download and move this script to "/etc/init.d/".
#   sudo mv rtorrent-screen /etc/init.d/
#   chmod ugo+rx /etc/init.d/rtorrent-screen
#
#   # Make this script executable.
#   sudo chmod ugo+rx /etc/init.d/rtorrent-screen
#
#   # !!!! IMPORTANT !!!!
#   # Edit this script, changing the CONFIGURATION variables in this script to
#   # suite the account-specific needs of your local system. In particular, you
#   # will want to change the "RTORRENT_USER" variable to that of the non-root user under
#   # which you intend to run the rtorrent daemon.
#   sudo emacs /etc/init.d/rtorrent-screen   # or,
#   sudo nano  /etc/init.d/rtorrent-screen   # or,
#   sudo vi    /etc/init.d/rtorrent-screen
#   # !!!! IMPORTANT !!!! end
#
#   # Optionally make the phrase "rtorrent" a shell alias for foregrounding
#   # the currently backgrounded "rtorrent" process. This permits you to open
#   # and view your current rtorrent by typing "rtorrent" at the command line
#   # when logged in as the user specified by the "RTORRENT_USER" variable, below.
#   echo 'alias rtorrent="screen -r rtorrent"' >> ~/.bashrc  # for Bash; or,
#   echo 'alias rtorrent="screen -r rtorrent"' >> ~/.zshrc   # for ZSH
#
#   # Optionally add this script to the default Gentoo runlevel. This starts
#   # rtorrent on system startup, automatically.
#   sudo rc-update add rtorrent-screen default
#
#   # Optionally add this script to the system crontab. This starts and stops
#   # rtorrent on a time-based schedule, which could be helpful for users
#   # having limited (or expensive!) bandwidth during certain hours of the day.
#   #
#   # In this example, we schedule rtorrent to run from 2:00AM to 8:00AM daily.
#   sudo emacs /etc/crontab   # or,
#   sudo nano  /etc/crontab   # or,
#   sudo vi    /etc/crontab
#
#   # Now add or edit the following lines to the above file. (Naturally,
#   # remove the prefixing comment character '#' from each line!)
#   minute (0-59, where "*/n" means every n minutes),
#    | hour (0-23, where 0 is midnight and 13 is 1:00PM),
#    |  | day of the month (1-31, where "*" means every day),
#    |  |  | month of the year (1-12, where "*" means every month),
#    |  |  |  | day of the week (0-6, where 0 is Sunday and "*" means every day).
#    |  |  |  |  | user 
#    |  |  |  |  |  |    command
#    |  |  |  |  |  |     |
#    0  2  *  *  *  root  /etc/init.d/rtorrent-screen restart 1>> /var/log/rtorrent/current 2>&1
#    0  8  *  *  *  root  /etc/init.d/rtorrent-screen stop 1>> /var/log/rtorrent/current 2>&1
#
#   # Now close the file. Great! Lastly, ensure the above logging directory
#   # exists, and restart cron.
#   sudo mkdir -p /var/log/rtorrent/
#   sudo /etc/init.d/vixie-cron restart
#
# --------------------( USAGE                              )--------------------
# This script accepts one of three possible commands:
#
# * "start", starting a new rtorrent session.
# * "stop", stopping the current rtorrent session.
# * "restart", restarting the current rtorrent session.
#
# Let's examine a few examples.
# 
#   # Start rtorrent as a backgrounded "daemon." Note we call "restart" rather
#   # than "start," since the former implicitly stops any running rtorrent
#   # before it starts.
#   # 
#   # This is especially helpful when attempting to restart rtorrent after
#   # having manually stopping rtorrent from within rtorrent. In this case, the
#   # services subsystem in Gentoo (i.e., the "start-stop-daemon" command) will
#   # be oddly unaware that rtorrent has actually been stopped and will thus
#   # probably issue an error when calling "start" rather than "restart."
#   #
#   # (Trust us on this one.)
#   sudo /etc/init.d/rtorrent-screen restart
#
#   # Foreground rtorrent. This must be done as the user specified by the "RTORRENT_USER"
#   # variable in the CONFIGURATION section of this script, below. If you type
#   # this often (and you probably will), you might want to make a shell alias.
#   # (See "INSTALLATION," above.)
#   screen -r rtorrent
#
#   # Re-background rtorrent after foreground-ing it by typing <Ctrl-a d> in the
#   # foreground-ed rtorrent window where "<Ctrl-a" is the screen-specific
#   # control prefix for entering screen commands and "d>" is the specific
#   # command for detaching (backgrounding) the current screen session
#   # (rtorrent). Simple, no? (No - not really. We know.)
#   <Ctrl-a d>
# 
#   # Stop rtorrent. (Alternatively, type <Ctrl-q> or <Ctrl-a q> in the
#   # foreground-ed rtorrent window.)
#   sudo /etc/init.d/rtorrent-screen stop
#
# --------------------( HISTORY                            )--------------------
# This script is nominally inspired by several others that, for one
# justification or another, were found severely wanting; these are:
#
#     http://cowpowered.wordpress.com/2007/09/17/etcinitdrtorrent/
#     http://libtorrent.rakshasa.no/attachment/wiki/RTorrentCommonTasks/rtorrentInit.sh
#     http://libtorrent.rakshasa.no/attachment/wiki/RTorrentCommonTasks/rtorrentInit.bash
#
# This script depends on "screen". If, on the other hand, you'd like a similar
# script that depends on "dtach", you might like:
#
#     http://forums.gentoo.org/viewtopic-p-4544759.html?sid=2b7c29fe6fa3ab163ccf824b69956d7b
#
# --------------------( TODO                               )--------------------
# * Provide dynamic support for both screen and dtach, according to whichever
#   is installed at runtime. This in turn suggests this file should be renamed
#   "rtorrent-daemon" or perhaps simply "rtorrentd".
# * Extract the "CONFIGURATION" setting into a proper
#   "/etc/conf.d/rtorrentd" file.
# * Conditionally enable "einfo" logging only when some configuration variable
#   (say, "VERBOSE") is also enabled.
# * Perform automatic logging to a file when operating as a cronjob. (See
#   "hg-cohere" for assistance, eh?)
# * Consider enabling the "multiuser" screen option rather than using
#   RTORRENT_USER-style sudoing. That has several benefits, of which one is the
#   ability to allow other users to open the deattached rtorrent session.

# ....................{ IMPORTS                       }....................
zimport zeshy/process
zimport zeshy/time

# ....................{ CONFIGURATION ~ defaults           }....................
#FIXME: Fix this. Needs a proper config file, I'm afraid.
# User under which screen is to be run. Ideally, this is the user intending to
# foreground and actually use rtorrent.
RTORRENT_USER=leycec
#RTORRENT_USER=$(whoami)

# Absolute path to the rtorrent binary.
RTORRENT=$(which_binary rtorrent)

# Absolute path to the screen binary.
SCREEN=$(which_binary screen)

# Screen session under which rtorrent is to be run.
SCREEN_SESSION=rtorrent

# Absolute path to the file persisting the process ID (PID) of the run rtorrent.
if [[ "${RTORRENT_USER}" == root ]]
then RTORRENT_PIDFILE="/var/run/rtorrent-${RTORRENT_USER}.pid"
else RTORRENT_PIDFILE="/home/${RTORRENT_USER}/.rtorrent.pid"
fi

# ....................{ IMPLEMENTATION                     }....................
start() {
    # Wipe all outstanding "dead screens" for the above user. Ignore the return
    # code.
    quietly_as "${RTORRENT_USER}" "${SCREEN}" -wipe

    # Stop any currently running rtorrent under the above user.
    is_rtorrent_running && stop
    utter "starting rtorrent..."

    # If there are other rtorrent screen sessions running, warn and press on.
    local rtorrent_process_count=$(get_rtorrent_process_count)
    [[ "${rtorrent_process_count}" -eq 0 ]] ||
        curse "${rtorrent_process_count} rtorrent screen session(s) already started"

    # Start rtorrent as a screen session. Note that screen's argument passing
    # engine is fragile... Order is important in its list of arguments.
    run_as "${RTORRENT_USER}"\
        "'${SCREEN}' -d -m -fa -U -S '${SCREEN_SESSION}' '${RTORRENT}'"

    # If rtorrent fails to start, emit the cause thereof and fail.
    local RTORRENT_RETURN_CODE="${?}"
    [[ "${RTORRENT_RETURN_CODE}" -ne "${ZESHY_SUCCESS_CODE}" ]] &&\
        curse_rtorrent_start_error

    # Grep the PID of the screen process corresponding to the now-detached
    # rtorrent session by asking screen itself.
    local screen_pid=$(run_as "${RTORRENT_USER}" "${SCREEN} -list" |\
        grep --max-count=1 "\.${SCREEN_SESSION}[[:space:]]" |\
        sed "s/^[[:space:]]*\([0-9][0-9]*\)\.${SCREEN_SESSION}[[:space:]].*$/\1/" -)
    
    # If "screen" lists no such rtorrent session for this user, fail.
    if echo "${screen_pid}" | grep --quiet "^[[:space:]]*$"; then
        curse "\"screen\" lists no rtorrent sessions"
        curse_rtorrent_start_error
    fi
    
    #FIXME: This is generally useful. Shift into the Zeshy Process component.
    # Unfortunately, "$screen_pid" gives the process ID of the screen process
    # hosting this rtorrent process rather than that rtorrent process itself. As
    # halting this rtorrent process requires we have its ID rather than screen's
    # ID, we now grep for that.
    #
    # Note, however, that this rtorrent process may not yet have actually started
    # up. Therefore, we wait a reasonable (!) number of seconds for it to start
    # up; if it fails to do so, fail.
    local rtorrent_pid=
    local start_time=$(get_current_time_in_seconds_since_epoch)
    local close_time=$(( start_time + 8 ))  # current time plus eight seconds
    while [[ $(get_current_time_in_seconds_since_epoch) -le ${close_time} ]]; do
        rtorrent_pid=$(pgrep -P "${screen_pid}" -fx "${RTORRENT}" 2>/dev/null)
        
        # If rtorrent is now running, break; otherwise, sleep and try again.
        is_ok && break
        sleep 1
    done
    
    # If rtorrent is still not running, fail.
    [[ -n "${rtorrent_pid}" ]] ||
        die "no rtorrent process running under \"screen\" PID ${screen_pid}"
    
    # Store its PID into an external file for later use in shutting it down.
    make_parent_directory_if_not_found "${RTORRENT_PIDFILE}"
    try "echo ${rtorrent_pid} > '${RTORRENT_PIDFILE}'"

    utter "detached rtorrent PID ${rtorrent_pid} to screen PID ${screen_pid}"
}

stop() {
    utter "stopping rtorrent..."
  
    # If not currently running, curse and return.
#   if ! is_running_as "${RTORRENT_USER}" "${RTORRENT}"; then
    is_rtorrent_running || die "rtorrent not running"
    
    # Signal numbers corresponding to soft and hard process termination.
    local sigint=2 sigkill=9

    # Number of seconds to wait after softly killing rtorrent before attempting
    # to hardly kill it. (Woboy; puns galore.)
    wait_seconds=8
    
    # Is the rtorrent PID file still exists, kill the corresponding process.
    if [[ -f "${RTORRENT_PIDFILE}" ]]; then
        # All rtorrent PIDs under this user.
        local rtorrent_pids=$(try get_pids_for_running_as "${RTORRENT_USER}" "${RTORRENT}")
        
        # rtorrent PID as persisted in this file.
        local rtorrent_pid=$(try cat "${RTORRENT_PIDFILE}")
        
        # If the latter no longer corresponds to the former, curse and return.
        if ! match_multiline "^${rtorrent_pid}$" "${rtorrent_pids}"; then
            curse "user ${RTORRENT_USER} no longer running rtorrent PID ${rtorrent_pid}"
            return
        fi
       
        #FIXME: This is generally useful. Shift into the Zeshy Process component.
        # Send the rtorrent session started above signal 2 (i.e., INT: interrupt) to
        # persuade rtorrent to shutdown cleanly. Calling this same command without
        # passing "--signal 2" causes rtorrent to shutdown non-cleanly, which
        # customarily causes the next rtorrent session to hash-check the integrity of
        # all incomplete torrents. That, in turn, can be a very time consuming
        # process: one hour for each torrent gigabyte is a very long time indeed!
        #
        # Lastly note that this waits 10 seconds (e.g., "--retry 10") for the rtorrent
        # session to shutdown cleanly before sending a definitive KILL signal. Since
        # rtorrent documentation insists that rtorrent always shuts down cleanly
        # within 5 seconds of an initial request, this should be more than long enough.
        try kill -${sigint} "${rtorrent_pid}"
        if is_running_pid "${rtorrent_pid}"; then
            sleep ${wait_seconds}

            if is_running_pid "${rtorrent_pid}"; then
                utter "stopping rtorrent forcefully..."
                try kill -${sigkill} "${rtorrent_pid}"
            fi
        fi
        
        # Remove the rtorrent PID file.
        try rm "${RTORRENT_PIDFILE}"
    # Otherwise, the file has since been deleted, renamed, or otherwise moved. In
    # that case, kill all rtorrents under this user.
    else
        utter "stopping all rtorrent processes under user ${RTORRENT_USER}..."
        quietly pkill -${sigint} -u "${RTORRENT_USER}" -fx "${RTORRENT}"

        if is_running_as "${RTORRENT_USER}" "${RTORRENT}"; then
            sleep ${wait_seconds}
             
            if is_running_as "${RTORRENT_USER}" "${RTORRENT}"; then
                utter "stopping all rtorrent processes under user ${RTORRENT_USER} forcefully..."
                quietly pkill -${sigkill} -u "${RTORRENT_USER}" -fx "${RTORRENT}"
            fi
        fi
    fi
}

# ....................{ UTILITIES                          }....................
#FIXME: Generalize this into a general-purpose "command/screen" function.
# bool is_rtorrent_running(void)
#
# Return success if at least rtorrent process is screened under the above user.
is_rtorrent_running() {
    [[ $(get_rtorrent_process_count) -ne 0 ]]
}

#FIXME: Generalize this into a general-purpose "command/screen" function.
# int get_rtorrent_process_count(void)
#
# Get the number of rtorrent processes currently screened under the above user.
get_rtorrent_process_count() {
    # If there are other rtorrent screen sessions running, warn and press on.
    run_as "${RTORRENT_USER}" "${SCREEN} -list" |\
        grep --count "\.${SCREEN_SESSION}[[:space:]]"
}

# void curse_rtorrent_start_error()
#
# If rtorrent failed to run for any reason other than it is already running
# under an existing "screen" session, then print this reason by re-running
# rtorrent as the target user.
curse_rtorrent_start_error() {
    # If no rtorrent process has been screened, run rtorrent to emit an error.
    if is_rtorrent_running; then
        if [[ -n "${screen_pid}" ]]
        then curse "rtorrent startup error for user ${RTORRENT_USER} under screen PID ${screen_pid}"
        else curse "rtorrent startup error for user ${RTORRENT_USER}"
        fi

        run "${RTORRENT}"
    fi

    exit "${ZESHY_FAILURE_CODE}"
}

# ....................{ MAIN                               }....................
[[ "${#}" -le 1 ]] ||
    die "expected exactly one of \"start\" or \"stop\"" 

# Action requested by the user. Defaults to "start".
ACTION="${1:-start}"

# Ensure sanity.
case "${ACTION}" in
    start)   start ;;
    stop)    stop ;;
    *) die "\"${ACTION}\" not one of \"start\" or \"stop\"" ;;
esac

#FIXME: Obsolete.
# If non-empty, use the start-stop-daemon binary to automate process management
# rather than manually managing processes.
#IS_USING_START_STOP_DAEMON=$(one_if is_installed start-stop-daemon)

#   start-stop-daemon --start --user "$RTORRENT_USER" --chuid "$RTORRENT_USER" --pidfile "$RTORRENT_PIDFILE" \
#       --env HOME="/home/$RTORRENT_USER" \
#       --exec "$SCREEN" -- -d -m -fa -U -S "$SCREEN_SESSION" "$RTORRENT"

    # "start-stop-daemon" makes a PID file having the (blatantly) wrong screen PID,
    # when passing the "--make-pidfile" option. So we (cleverly) grep for the
    # right screen PID and make a PID file having that PID, instead.

    # "start-stop-daemon" returns success when rtorrent is currently running
    # but "$RTORRENT_PIDFILE" does not exist; it should return failure, since it will
    # have been unable to shutdown rtorrent in this case.
    #
    # We force failure in this case so as to gracefully recover later.
#   if [ $rtorrent_pidfile_found -ne 0 ]; then RETURN_CODE=1; fi

#   # If "start-stop-daemon" returned failure, attempt to gracefully recover.
#   if [ $RETURN_CODE -ne 0 ]; then
#     # Print an appropriate error message.
#     if [ $rtorrent_pidfile_found -ne 0 ]; then
#       eend $RETURN_CODE "rtorrent could not be stopped, since "\
#         "PID file '$RTORRENT_PIDFILE' not found!"
#     else
#       eend $RETURN_CODE "rtorrent (PID $rtorrent_pid) could not be stopped!"
#     fi

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This file is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#   
# You should have received a copy of the GNU General Public License
# along with this file; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
