#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle canonical shell globals, typically but not necessarily POSIX-mandated
(e.g., ${EDITOR}, ${PAGER}).
/---

#FIXME: Yeah... getters are terrible. Good thing we implemented this entire
#parcel as getters. *sigh* That said, the implementation below *IS* fairly
#clever. Retain the cleverness; just convert everything to equivalent setters.

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
string get_pager_path()

Get the absolute path of the pager preferred by the current user. Specifically,
get global ${PAGER}, which if unset set to the first command in the following
list installed in the current user's ${PATH}: `most`, `less`, `more`.
/---
function get_pager_path() {
    die_if_args
    :str.return "${PAGER:=$(get_pathable_path_first most less more)}"
}

:func.doc <<'/---'
string get_list_colors()

Get the colon-delimited string with which `ls` colors output. Specifically,
get global ${LS_COLORS}, which if unset set to the output of `dircolors`.
/---
function get_list_colors() {
    # Validate sanity.
    die_if_args

    # If global ${LS_COLORS} has not yet been set and "dircolors" is available,
    # set such global by evaluating the output of such command as a Bourne shell
    # script. While odd, this remains the canonical method for doing so.
    not :Var.is LS_COLORS and :pathable.is dircolors and
        run_code_under_shell "$(dircolors --sh)" 'sh'

    # Get such colors.
    :str.return "${LS_COLORS}"
}

# ....................{ GETTERS ~ editor                   }....................
:func.doc <<'/---'
string get_editor_path()

Get the absolute path of the editor command preferred by the current user.
Specifically, get global ${EDITOR}, which if unset set to the first command in
the following list installed in the current user's ${PATH}:
`emacs`, `vim`, `vi`, `nano`, `pico`, `ed`.
/---
function get_editor_path() {
    # Emacs precedes Vi[M] not due to any personal preference on the part of
    # Zeshy developers (to the contrary, I largely prefer Vi[M]) but due to the
    # likelihood of only Emacs users installing Emacs. Since most *nix distros
    # package Vi[M] by default, the same cannot be said of Vi[M].
    die_if_args
    :str.return "${EDITOR:=$(get_pathable_path_first\
        emacs vim vi nano pico ed)}"
}

:func.doc <<'/---'
string get_editor_path_visual()

Get the absolute path of the visual editor command preferred by the current
user. Specifically, get global ${VISUAL}, which if unset set to the return value
of get_editor_path().
/---
function get_editor_path_visual() {
    die_if_args
    :str.return "${VISUAL:=$(get_editor_path)}"
}

# ....................{ PRECOMPILERS                       }....................
:run_hook_on_zeshy_precompile precompile_zeshy_zsh_globals

:func.doc <<'/---'
void precompile_zeshy_zsh_globals()

Define canonical shell globals, typically but not necessarily POSIX-mandated:

* ${LS_COLORS}, the `ls` color theme. See get_list_colors().
* ${PAGER}, the absolute path of the preferred pager. See get_pager_path().
* ${EDITOR}, the absolute path of the preferred editor. See get_editor_path().
* ${VISUAL}, mostly synonymous with ${EDITOR}. See get_editor_path_visual().
/---
function precompile_zeshy_zsh_globals() {
    # Validate sanity.
    die_if_args

    # Set such globals as beneficial side effects of calling such functions,
    # discarding function output.
    run_code_silent get_editor_path
    run_code_silent get_editor_path_visual
    run_code_silent get_list_colors
    run_code_silent get_pager_path

    # The string global get_list_colors() defines above transitively depends on
    # system-wide and user-specific "ls" color theme files. Add such files to
    # the list of paths zeshy's user digest file depends on.
    add_zeshy_digest_dependency_path '/etc/DIR_COLORS' "${HOME}/.dir_colors"
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Probably Linux specific. I vaguely wonder what the BSD variant is...

    # System-wide and user-specific "ls" color theme files. On digest
    # compilation, Zeshy parses such files to define string global
    # ${LS_COLORS}. See precompile_zeshy_zsh_globals() for further details.
    #FUXME: Great. The fewer files we parse on *EVERY* startup the better. To
    #get this to work reliably, however, we'll need to add two new digest
    #dependencies:

# ....................{ STARTUP                            }....................
#FUXME: Actually, this can be shifted to precompilation time, yes? Hmm; except
#for "run_code_silent get_list_command_colors", which probably depends on
#underlying configuration file content. Look into it. Ideally, we could shift
#everything to precompilation time.
#run_hook_on_zeshy_startup_if_interactive\
#    startup_zeshy_globals_if_shell_interactive

#declare_function '
#void startup_zeshy_globals_if_shell_interactive()

#Define interactive shell-specific globals. This includes:
#'
#function startup_zeshy_globals_if_shell_interactive() {
    # Validate sanity.
#   die_if_args
#   die_unless_shell_interactive
#}

# ${LS_COLORS} This function
#returns string global ${LS_COLORS} if set or , this function
#caches such string into string global ${LS_COLORS} as a side-effect.
#As a (hopefully) beneficial side effect, running "ls" in color terminals after
#calling this function implicitly colors all list output.

    # Absolute paths of the preferred command-line editor. Emacs precedes Vi[M]
    # not due to any personal preference on the part of Zeshy developers (to the
    # contrary, Sess strongly prefers Vi[M]) but due to the likelihood of only
    # Emacs users installing Emacs. Since most *nix distros bundle Vi[M] but not
    # Emacs by default, the same cannot be said for Vi[M].
#   string_global EDITOR
#   set_if_empty_to_evaluation EDITOR\
#       '$(get_pathable_path_first emacs vim vi nano ed)'
#   string_global_export VISUAL="${VISUAL:-${EDITOR}}"

#FUXME: This is no way needs to be here. What were we thinking? Right. Arguably,
#all getters wrapping canonical shell globals should be centralized into a new
#component -- say, "zsh/global". While possibly not the ideal long-term resting
#place for such component, it appears to beat most alternatives.

# Define generally applicable global variables specific to no other component.
# Many components define component-specific
# globals, this component defines globals specific
    # Call getter functions internally caching globals quietly. Since we just
    # want to cache such globals here, discard function output.
#   run_code_silent get_pager_command

    #FUXME: This now strikes me as overly heavyweight. Given the manner with
    #which we set ${EDITOR} and ${VISUAL} below, it's senseless to set
    #${PAGER} differently. That said, functions are nice. They guard against
    #silliness. But isn't that a bit overkill, here?

#FUXME: Not appropriate for this file. Perhaps create a new "01-global"
#directory with two files:
#
#* "constant", with the definitions above.
#* "global", wtih the definitions below.
