#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Terminal colors.

== See Also ==

* http://ciembor.github.com/4bit[4bit], arguably the best and (probably only)
  terminal color scheme designer.
/---

#FIXME: Accessing ${terminfo} appears to be inherently unsafe. Such module is
#conditionally compiled *ONLY* on distributions actually providing a terminfo
#database, which may not be the case under space-constrained minimal
#environments and embedded devices. Hence, before accessing such parameter in
#*ANY* function, we'll need to first a new safety exception handler
#:die_unless_terminfo(), throwing an exception unless the current system
#provides a "terminfo" database and hence zsh module.

#FIXME: *UGH*. Happily, the current digest file now depends on the number of
#colors supported by the current terminal. But this means that *ALL* of the
#conditional support for terminals supporting a variety of color counts in this
#and all other adjacent parcels has been rendered nonsensical. Which is *REALLY*
#good, because such conditionality was rapidly becoming unmaintainable *AND*
#overly inefficient. We'll need to excise all color count-specific globals
#(e.g., ${ZY_STYLE_TO_COLOR_2}). Since zeshy now conditionally selects digest
#files before startup on the basis of terminal color counts, this is safe,
#reasonable, and indeed essential.

#FIXME: Add support for fish-like syntax highlighting. Happily, someone's
#already gone to the work of zshifying this; we'll just want to zeshify it a
#bit: https://github.com/zsh-users/zsh-syntax-highlighting

#FIXME: Add support for 256 color-enabled terminals (e.g., xterm-(256)color,
#urxvt-unicode-256color). Oooooooh, man. I'm pretty sure I crawled across
#some zsh code the other day simplifying such support... Hmmmmmmmm.
#FIXME: It looks like KDE's Konsole even supports 24-bit colors! Wild. See:
#https://github.com/robertknight/konsole/blob/master/user-doc/README.moreColors
#FIXME: O.K.; I've heavily looked into the issue. It's certainly more than
#feasible, but we'll need to liberally borrow from a few different sources.
#
#First, note function wmiintf() at
#https://github.com/zOrg1331/zsh-configs/blob/master/.zsh/rc/S58_wmii. This
#function retrieves the RGB color values given a passed X11 color name. We
#actually want to do something like the reserve: for each such name, we want to
#define a corresponding "color."-prefixed pseudo-style in ${ZY_STYLE_TO_COLOR}
#expanding to the ANSI sequence best approximating such color on the current
#terminal. Err. Actually, don't do that. It sounds rather expensive! Certainly,
#most users would never use most such colors. O.K.; well, we could at least
#define a converter convert_color_name_to_ansi() converting the passed X11 color
#name to the ANSI sequence best approximating such color on the current
#terminal. How do you do that, exactly? Read onward!
#
#Next, note Perl script "~/tmp/xterm-*/vttests/256colors.pl". Pretty awesome.
#It's by the "xterm" authors and hence the canonical definition for calculating
#indices and color values for both the 6x6x6 color cube and greyscale ramp. It's
#also *VERY* readable, which is great. But this alone isn't quite enough...
#
#We also need "CSApprox.vim" at "~/tmp/csapprox/", an utterly awesome ViM
#plugin that does pretty much everything we need. (If he can do it in ViM, we
#can certainly do it in zeshy!) The core components to look at are:
#
#* "autoload/csapprox/per_component.vim", whose function
#  csapprox#per_component#Approximate() maps the passed RGB value to the closest
#  256-color index. Pretty sweet stuff. This function in turn leverages...
#* "autoload/csapprox/common.vim", which defines the "ramp" (i.e., distance
#  between) for each of the 6 possible "steps" of each of the 3 dimensions (red,
#  green, and blue) in such color cube -- as well as for the greyscale line.
#  Ignore everything but the "xterm" values, here -- the industry has very well
#  standardized on such pallette for most intents and purposes.
#* "autoload/csapprox.vim", which basically converts "/usr/share/X11/rgb.txt"
#  into ViM format. This is nice -- but, arguably, we should be using the
#  "rgb.txt" bundled with the current system... Err, or should we? Hmmmmm. No,
#  perhaps not. X11 is going away, so "rgb.txt" is probably going away as well.
#  But X11 also isn't applicable to non-UNIX systems. Right. So, just bundle our
#  own copy in "zsh" map format. Sweet!
#* "plugin/CSApprox.vim". The helpful part here is the part where it leverages
#  "showrgb" if available and otherwise manually parses apart "rgb.txt". That
#  said, it only does any of this if an option is set (...defaulting to "false"?)
#  Right. We can probably rely on a bundled "rgb.txt" in map format, for now.
#  The remainder of this file appears ViM-specific and hence functionally
#  useless for our vagabond purposes.
#
#Last, note the variants on the zsh-specific code snippet "spectrum":
#
#* https://github.com/sykora/etc/blob/master/zsh/functions/spectrum
#  The official "spectrum". Since this uses ANSI rather than prompt escapes,
#  this is somewhat more useful for our purposes.
#* https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/spectrum.zsh
#  The unofficial "oh-my-zsh" variant. While less useful, this does provide a
#  helpful function spetrum_ls() for printing all such colors. Note this version
#  prints foreground rather than background colors, however, and hence could be
#  demonstrably improved.
#
#That's it. It's all basically in the "autoload/" subdirectory. Get thee hence!
#FIXME: O.K.; I've started mucking around with the math. Efficiently mapping
#arbitrary RGB values to 6x6x6 RGB color cube values is an interesting topic.
#Thankfully, it's clearly doable. The steps are as follows:
#
#    list steps; steps=(0, 95, 135, 175, 215, 255)
#
#While the first step is 95 units apart, the remainder are all only 40 units
#apart. Hence, each R, G, and B component can be mapped as follows:
#
#    # Original R, G, or B component (i.e., in [0, 255]).
#    integer color_value
#
#    # Such component mapped to a color cube index (i.e., in [0, 5]). For
#    # math simplicity, such indices are 0- rather than 1-based!
#    integer color_index
#
#    # Map the former to latter, implicitly rounding down to the largest integer
#    # less than or equal to the result.
#    color_index=$(( (color_value - 95)/160*4 + 1 ))
#
#    # If such index is negative, coerce such index to 0. The prior mapping
#    # erroneously maps color values in [0, 55] to -1. While this is
#    # unavoidable, the correction is quite efficient.
#    if (( color_index < 0 )) {
#       color_index=0
#    }
#
#This isn't *QUITE* right, of course, but it's close. We want to map values
#according to their proximity to the mid-point of each step. Contemplate.
#
#Let's see. The mid-points are integers (excluding the first mid-point, a float)
#as follows:
#
#    list mpoints; mpoints=(47.5, 115, 155, 195, 235)
#
#The distances between each such mid-points are:
#
#    list mpoint_dists; mpoint_dists=(47.5, 67.5, 40, 40, 40, 20)
#
#That doesn't look terribly good. Let's try a different tact. We want to bin as
#follows:
#
#* Color values in [  0,  48] (rounding up, as the eye perceives darker
#  intensities with less granularity) to color index 0.
#* Color values in [ 49, 115] to color index 1.
#* Color values in [116, 155] to color index 2.
#* Color values in [156, 195] to color index 3.
#* Color values in [196, 235] to color index 4.
#* Color values in [235, 255] to color index 5.
#
#Woops. That clearly short-changes index 5 and overly apportions into index 1.
#Contemplate a new mapping that gives equal apportionment to such values. How
#about:
#
#* Color values in [  0,  48] to color index 0.
#* Color values in [ 49,  95] to color index 1.
#* Color values in [ 95, 135] to color index 2.
#* Color values in [135, 175] to color index 3.
#* Color values in [175, 215] to color index 4.
#* Color values in [215, 255] to color index 5.
#
#Ugh. Mathematically, that *IS* more pristine -- but think about. Colors with R,
#G, and B values all in [215, 255] will be mapped to pure white! Under the above
#transformation, this only happens with R, G, and B values all in [235, 255],
#which is quite a bit more tolerable. Given the rather arbitrary choice of color
#pallette ("Curse you, xterm! We love you, but... really."), we may not have
#terribly much choice. For a similar reason, we should (however) probably
#tighten the lower bounds. We really don't want to map to pure black unless we
#can help it. How about the following mid-points with distances:
#
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=(  65, 105, 145, 185, 225)
#    list mpoint_dists; mpoint_dists=(65, 40, 40, 40, 40, 30)
#
#Or, perhaps:
#
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=(  70, 110, 150, 190, 230)
#    list distans; distans=( 70, 40, 40,  40, 40,  25)
#
#The latter are centered somewhat more cleanly around the bilinear midpoints
#(i.e., (47.5, 115, 155, 195, 235)), apportioning slightly more values to the
#first and last indices and substantially fewer to the second index. Though,
#perhaps we want something even *MORE* graduated: e.g.,
#
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=(  65, 115, 155, 195, 230)
#    list distans; distans=( 65, 50, 40,  40, 35,  25)
#    list distan2; distan2=(   15, 10, 10,   5, 10)
#
#    # Still not quite right, clearly. How about:
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=(  60, 110, 150, 190, 220)
#    list distans; distans=( 60, 50, 40,  40, 30,  30)
#    list distan2; distan2=(   10, 10,  0,   10, 0)
#
#    # That looks pretty sweet. But we can do better:
#    list mpoints; mpoints=(  48, 115, 155, 195, 235)    # original
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=(  60, 110, 155, 195, 230)
#    list distans; distans=( 60, 50, 45,  40,  35, 25)
#    list distan2; distan2=(  -10, -5, -5,  -5, -10)
#
#    # What's nice about that is that the upper ends are twice as compressed as
#    # everything else in the "middle". This is probably what we want, to avoid
#    # mapping to much to either pure white. That said, we do still map quite a
#    # bit to pure black. Perhaps we can do better:
#    list mpoints; mpoints=(  48, 115, 155, 195, 235)    # original
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=( 55,  110, 155, 195, 230)
#    list distans; distans=(55, 55,  45,  40,  35, 25)
#    list distan2; distan2=(  0,  -10, -5,  -5,  -10)
#
#    # Perhaps we can do better:
#    list mpoints; mpoints=(  48, 115, 155, 195, 235)    # original
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=( 50, 100, 145, 185, 220)
#    list distans; distans=(50, 50, 45,  40,  35, 35)
#    list distan2; distan2=(  0,  -5, -5,  -5,  0)
#
#    # Perhaps we can do better:
#    list mpoints; mpoints=(  48, 115, 155, 195, 235)    # original
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#
#                             0    1    2    3    4
#    list mpoints; mpoints=( 50,  98, 143, 184, 220)     # new!
#
#    list distans; distans=(50, 48, 45,  41,  36, 30)
#    list distan2; distan2=(  -2, -3, -4,  -5,  -6)
#
#    # Wow! Perfect. The midpoints telescope into the upper end, with the
#    # distance between each midpoint decreasing as one approaches 255,
#    # coinciding with the human perception of intensity. The midpoints are
#    # also reasonably close to the average. Much better! This results in:
#
#* Color values in [  0,  50] to color index 0. (size: 50)
#* Color values in [ 51,  98] to color index 1. (size: 48)
#* Color values in [ 99, 143] to color index 2. (size: 45)
#* Color values in [144, 184] to color index 3. (size: 41)
#* Color values in [185, 220] to color index 4. (size: 36)
#* Color values in [221, 255] to color index 5. (size: 30)
#
#    # Given the uniformity, I wonder if in fact an equation doesn't exist...
#    # Whatever it is, it's clearly non-linear, requiring polynomial regression.
#    # To solve, note that the color indices are what we want and hence the
#    # dependent variable (typically "y") and the color midpoints are what we
#    # are given and hence the indepedent variable (typically "x").
#
#    # Via http://www.xuru.org/rt/PR.asp with data:
#50 0.666666666666666
#98 1.333333333333333
#143 2
#184 2.66666666666666
#220 3.33333333333333
#255 4
#    # ..., I obtain the following quadratic equation with error less than 0.001:
#    color_index =\
#        1.463463115*(10**-5)*(color_value**2) +\
#        1.184779466*(10**-2)* color_value     +\
#        1.611297386*(10**-2) ))
#
#    # Not terribly beautiful, but let's see if it works! This results in:
#
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=( 50,  98, 143, 184, 220)
#* Color values in [  0,  38] to color index 0. (size: 38)
#* Color values in [ 39, 110] to color index 1. (size: 71)
#* Color values in [111, 173] to color index 2. (size: 62)
#* Color values in [174, 229] to color index 3. (size: 38)
#* Color values in [230, 255] to color index 4. (size: 38)
#
#    # Not the best. The key issue is that the best curve fit is likely to
#    # either be a fractional polynomial (e.g., square root) or logarithm, which
#    # even reasonably strong solvers tend not to support. I've opted instead to
#    # use Eureqa, which is a pretty awesome application (despite its abject
#    # non-freeness). I had two realizations while doing so:
#    #
#    # 1. The key to efficiently mapping a smooth line to stepwise bins (as we
#    #    want to do) is to map one greater than the maximum value for each bin
#    #    (e.g., 51 for the first bin) to one greater than the desired index for
#    #    all values in that bin.
#    # 2. What does this accomplish? It ensures that simply rounding down the
#    #    resulting fractional bin indices gives the desired integer bin
#    #    indices, guaranteed to be an efficient operation.
#    #
#    # Given such observations, we concocted the following data:
#
#x	y
#0	0
#51	1
#99	2
#144	3
#185	4
#221	5
#256	6
#
#    # Note, for example, that 255 will map to something like 5.9876 and hence
#    # to 5 after rounding, as desired. Likewise, pretty much everything between
#    # 221 to 255 will be binned to index 5 -- exactly as desired.
#FIXME: Hmm. My original supposition appears to be incorrect, as could probably
#be surmised by merely contemplating the survival fitness of adequate perception
#in the dark. As culled from a random (but informative!) blog, "...humans
#perceive brightness changes non-linearly. We have better sensitivity at low
#luminance than high luminance. For example, when we control LED brightness using
#Arduino PWM, we see a large brightness change between analogWrite(9,1) and
#analogWrite(9,2) but only a small brightness change between analogWrite(9,244)
#and analogWrite(9,255)." This means that xterm pretty much got it backwards.
#Their color cube should have allotted *MORE*, not *LESS*, space to darker
#colors. In any case, however, we have to work with what we have -- and the
#xterm color cube is most certainly what we have. Given that, we should probably
#revisit our remapping above. How about...  Wait. The old one works quite well:
#
#                             0    1    2    3    4
#    list oldmidp; oldmidp=(  48, 115, 155, 195, 235)
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list newmidp; newmidp=( 50,  98,  143, 184, 220)
#    list distans; distans=(50, 48, 45,  41,  36, 30)
#    list distan2; distan2=(  -2, -3, -4,  -5,  -6)
#
#Perhaps we already accidentally hit on an adequate solution.
#Consider. By binning everything in [51, 98] to index 1 rather than everything
#in [48, 115], we're binning substantially less than in the default approach at
#the darker end. Similarly, by binning everything in [221, 255] to index 5 rather
#than everything in [236, 255], we're binning substantially more than in the
#default approach at the brighter end. What do you say, hey? Lookin' good...
#
#O.K.; Eureqa got us to:
#
#    color_index=$((\
#        0.0196327201550869*color_value + 5.8056465992094*(10**-8)*(color_value**3) ))
#
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=( 50,  98, 143, 184, 220)
#* Color values in [  0,  50] to color index 0. (size: 50)
#* Color values in [ 51, 100] to color index 1. (size: 49)
#* Color values in [101, 143] to color index 2. (size: 42)
#* Color values in [144, 185] to color index 3. (size: 41)
#* Color values in [186, 222] to color index 4. (size: 36)
#* Color values in [223, 255] to color index 5. (size: 32)
#
#Right. It's not *QUITE* perfect. But it's *VERY* close. It certainly captures
#the large-order issues. I substantially doubt anyone would be able to discern
#the difference between this and something slightly tighter. (After all, the
#residual error is down to 0.003 already.)
#FIXME: Right. So I gave an alternative with exponents in the "-22" range a try.
#It utterly failed, probably due to rounding errors at such small exponents.
#It's nice to know, at least, that we can ignore such solutions.
#Instead, I gave the next iteration down a try:
#
#    color_index=$((\
#       0.0193126795857809*color_value +\
#       3.43371646960515*(color_value**2)*(10**-6) +\
#       4.95268905499403*(color_value**3)*(10**-8) ))
#
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list mpoints; mpoints=( 50,  98, 143, 184, 220)
#* Color values in [  0,  50] to color index 0. (size: 50)
#* Color values in [ 51, 100] to color index 1. (size: 49)
#* Color values in [101, 143] to color index 2. (size: 42)
#* Color values in [144, 184] to color index 3. (size: 40)
#* Color values in [185, 222] to color index 4. (size: 37)
#* Color values in [223, 255] to color index 5. (size: 32)
#
#Right. The difference between the two is exceedingly small. Let's just go with:
#
#    color_index=$((\
#        0.0196327201550869*color_value + 5.8056465992094*(10**-8)*(color_value**3) ))
#
#Aaand... we're done!
#FIXME: Woops. The last midpoint of 220 is really *TOO* low. 235 is a much
#better midpoint for real-world use. Think about it, which we really should have
#done sooner: since zeshy will principally be used on terminals and hence
#light-on-dark color schemes, we need to preserve as much granularity at the top
#end as possible. Pretty much every color used will be a bright color at the top
#end! So, we pretty much want the reverse of what we concocted above -- despite
#its mathematical elegance. Indeed, given our constraints, it's unlikely a
#satisfactory set of mathematical elegant midpoints exists -- meaning that we
#should simply optimize for what intuitively seems best, regardless of elegance.
#How about:
#
#                             0    1    2    3    4
#    list premidp; premidp=(  50,  98, 143, 184, 220)
#    list oldmidp; oldmidp=(  48, 115, 155, 195, 235)
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list newmidp; newmidp=( 65,  119, 166, 205, 235)
#    list distans; distans=(65, 54, 47,   39,  30, 20)
#    list distan2; distan2=(  -9, -7, -8,   -9,  -10)
#
#Closer, but the lower end's a bit odd. How about:
#
#                             0    1    2    3    4
#    list oldmidp; oldmidp=(  48, 115, 155, 195, 235)
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list newmidp; newmidp=( 55,  113, 163, 204, 235)
#    list distans; distans=(55, 58,  50,  41,  31, 20)
#    list distan2; distan2=(  +3, -8, -9,  -10, -11)
#
#Close, but not quite. How about:
#
#                             0    1    2    3    4
#    list oldmidp; oldmidp=( 48,  115, 155, 195, 235)
#    list steps;   steps  =(0,  95, 135, 175, 215, 255)
#    list newmidp; newmidp=( 45,  107, 160, 203, 235)
#    list distans; distans=(45, 62,  53,  43,  32, 20)
#    list distan2; distan2=( +17, -9, -10,  -11, -12)
#
#Right. So we'll pretty much be adopting one of the above three. Consider. O.K.;
#I rather like the latter, as it apportions the most space at the higher end. We
#want to capture as much as we can in the higher end, and that accomplishes that
#nicely.
#FIXME: A question also remains of how we map to the 16 initial system colors.
#Are these colors simply duplicates of color cube colors or do they provide
#genuinely new values? If the latter, then we also need to consider mapping to
#such colors. In any case, given the greyscale line, we'll probably want to try
#mapping to both the color cube *AND* greyscale line for each color value and
#"taking" the mapped value with minimum distance (...or error?) to the actual
#value. We can render this slightly more efficient by checking after obtaining
#the first mapped value whether such distance is sufficiently minimum (e.g., <=
#0.1), in which case we don't need to bother obtaining the second mapped value.

#FIXME: We probably need to handle the "bold" attribute differently. O.K.;
#let's be honest, we need to *STOP* using such attribute altogether on anything
#other than pure 8-color terminals. On all other terminals, including 16-color
#terminals, the "bold" ANSI sequence behaves erratically if at all. Why? Because
#"bold" was basically just a hack to allow 8-color terminals to effectively
#support 8 additional colors -- at least, we think. Most non-8-color terminals
#(e.g., "urxvt" and pretty much anything coded after 1972) now interpret the
#"bold" attribute to mean that the software wants a bold font -- *NOT* that the
#software wants a bright color, which is usually the intended effect. To quoth
#the online raven:
#
# "So, when you do:
#
#  $ printf '\e[1;34mabc'
#
#  tmux sets colour 4 using setaf which with xterm-256color ends up as:
#
#  ^[[1m^[[38;5;4mabc
#
#  This means you get bold + colour 4. In the 256 colour palette, 4 is hardcoded
#  to ANSI blue. You've told xterm not to use a bold font, so it doesn't change
#  that, and there are no bold colours in the 256 colour palette, so you just get
#  colour 4, normal ANSI blue."
#
#Note, in particular, the "...there are no bold colours in the 256 colour
#palette." So what's the best course forward? Pretty simple, really:
#
#* We rename all colors suffixed by ":bold" (e.g., "red:bold") in both
#  configuration files and here to be prefixed by "bright" instead (e.g.,
#  "brightred"). This appears to be the canonical solution under open-source,
#  and also coincides with X11 color name nomenclature without conflicting with
#  such nomenclature. Which, of course, is probably why it's become the standard.
#  I admit that I'm not terribly fond of it -- but, really, this ":bold"
#  nonsense...
#
#Hmm. I should also note, however, that ":bold" is the canonical X.org
#fontconfig syntax for such concept (e.g., "fc-match monospace:bold" shows the
#current font to be used for displaying bold colors under 256-color terminals).
#Hence, we could beneficially retain the ":"-delimited color attribute syntax,
#while still replacing most current uses of such syntax with the prior
#"brightred" or "bright_red" idea.

#FIXME: It's not terribly urgent, but there appear to be terminals supporting
#only 16 colors, as well:
#
#"Unfortunately, interpretation of colors 0 through 7 often depends on whether
# the emulator supports eight colors or sixteen colors. Emulators that only
# support eight colors (such as the Linux console) will display colors 0 through
# 7 with normal brightness and ignore colors 8 through 15, treating them the
# same as white. Emulators that support 16 colors, such as gnome-terminal,
# normally display colors 0 through 7 as dim or darker versions and colors 8
# through 15 as normal brightness. On such emulators, the "normal" white (color
# 7) usually is shown as pale grey, requiring bright white (15) to be used to
# get a real white color. Bright black usually is a dark grey color, although
# some terminals display it as pure black. Some sixteen-color terminal emulators
# also treat normal yellow (color 3) as orange or brown, and bright yellow
# (color 11) as yellow."
#
#Other terminals only support 88 colors (i.e., "urxvt" by default -- but doesn't
#everyone enable 256 colors these days?). Honestly, given 256-color support,
#this is clearly low priority. But it would be nice to eventually transparently
#support all such terminals. Supporting 88 colors shouldn't be terribly
#difficult: just recompile "urxvt" without 256-color support. Supporting 16
#colors, however, will probably prove a bit more troublesome. What terminals
#still in existance only support 16 colors? A topic for another day, clearly.
#FIXME: On the topic of 88 colors, "urxvt" documentation reads as follows:
#
#"In addition to the colours defined above, urxvt offers an additional 72
# colours. The first 64 of those (with indices 16 to 79) consist of a 4*4*4 RGB
# colour cube (i.e. index = r * 16 + g * 4 + b + 16), followed by 8 additional
# shades of gray (with indices 80 to 87)."
#
#Since this is exactly a truncated form of the 256-color `xterm' color space,
#supporting 88 colors should be effortless. A Python script entitled
#"terminal_color" provides the following helpful steps:
#
#       # Color cube steps.
#       cincr = [0, 0x8b, 0xcd, 0xff]
#
#       # Greyscale steps.
#       greys = [rgb % ((n,)*3)
#               for n in [0x2e, 0x5c, 0x73, 0x8b, 0xa2, 0xb9, 0xd0, 0xe7]]
#
#I've confirmed via the same script that "urxvt" interestingly leverages the
#*EXACT* same ANSI CSI SGR sequence for displaying 88-color colors as "xterm"
#does for displaying 256-color colors. Which really begs the question: why
#didn't they just support 256 colors from the get-go?

# ....................{ GLOBALS                            }....................
# Defer initialization of most globals to precompile_zeshy_terminal_colors() and
# startup_zeshy_terminal_colors(), below.

:int.global ZY_TERMINAL_COLOR_COUNT_QUANTIZED <<'/---'
Number of colors supported by the current terminal, quantized to common color
thresholds. See get_terminal_color_count_quantized() for further details.
/---

# ....................{ GLOBALS ~ list                     }....................
#FIXME: Such list should be in the same order as the corresponding bits of such
#ANSI sequences.
:listset.global ZY_COLOR_NAMES_8 <<'/---'
List of the canonical eight color names supported by most \*nix terminals:
white, black, red, green, blue, yellow, magenta, and cyan.
/---
# List of such names, excluding pseudo-color "grey".
ZY_COLOR_NAMES_8=( white black red green blue yellow magenta cyan )

# ....................{ GLOBALS ~ map                      }....................
#FIXME: Consider renaming to ${ZY_STYLE_TO_COLOR_ANSI} and similarly below.
#FIXME: Documentation outdated. Honestly, we should probably just reduce such
#documentation to simply:
#
#    "See ${ZY_STYLE_TO_COLOR_NAMES_8} for further details."

:map.global ZY_STYLE_TO_COLOR <<'/---'
Map from style name to the ANSI escape sequence coloring such style on the
current terminal.

Color styles improve readability, genericity, and configurability by
substituting hard-coded color names with user-configurable style names (e.g.,
substituting `${ZY_COLOR[grey]}` with
`${ZY_STYLE_TO_COLOR[print_usage.punctuation]}`). See
${ZY_STYLE_TO_COLOR_NAMES} for the map from which this map is initialized.
/---


:map.global ZY_STYLE_TO_COLOR_2 <<'/---'
Map from style name to the ANSI escape sequence coloring such style on
*monochrome terminals* (i.e., terminals without color support). See
${ZY_STYLE_TO_COLOR} for further details.
/---


:map.global ZY_STYLE_TO_COLOR_8 <<'/---'
Map from style name to the ANSI escape sequence coloring such style on
*8-color terminals* (i.e., terminals supporting at most the canonical eight
colors standardized by the VT100). See ${ZY_STYLE_TO_COLOR} for further
details.
/---


:map.global ZY_STYLE_TO_COLOR_88 <<'/---'
Map from style name to the ANSI escape sequence coloring such style on
*88-color terminals* (i.e., terminals supporting at most the canonical 88
colors standardized by `rxvt`). See ${ZY_STYLE_TO_COLOR} for further
details.
/---


:map.global ZY_STYLE_TO_COLOR_256 <<'/---'
Map from style name to the ANSI escape sequence coloring such style on
*256-color terminals* (i.e., terminals supporting at most the canonical 256
colors standardized by `xterm`). See ${ZY_STYLE_TO_COLOR} for further
details.
/---


#FIXME: What went wrong with the documentation here? *sigh*
:map.global ZY_STYLE_TO_COLOR_PROMPT <<'/---'
Map style to the prompt-specific ANSI escape code coloring such style on the current terminal.
Color styles improve readability, genericity, and configurability by
substituting hard-coded color names with user-configurable style names (e.g.,
substituting `${ZY_COLOR[grey]}` with
`${ZY_STYLE_TO_COLOR[print_usage.punctuation]}`). See
${ZY_STYLE_TO_COLOR_NAMES} for the map from which this map is initialized.

Map style to the ANSI escape code enabling
such color on the current terminal. See
${ZY_STYLE_TO_COLOR_NAMES_PROMPT} for default color style names.
/---


:map.global ZY_STYLE_TO_COLOR_PROMPT_2 <<'/---'
Map from style name to the prompt-specific ANSI escape sequence coloring such
style on monochrome terminals. See ${ZY_STYLE_TO_COLOR_PROMPT} for further
details.
/---


:map.global ZY_STYLE_TO_COLOR_PROMPT_8 <<'/---'
Map from style name to the prompt-specific ANSI escape sequence coloring such
style on 8-color terminals. See ${ZY_STYLE_TO_COLOR_PROMPT} for further
details.
/---


:map.global ZY_STYLE_TO_COLOR_PROMPT_88 <<'/---'
Map from style name to the prompt-specific ANSI escape sequence coloring such
style on 88-color terminals. See ${ZY_STYLE_TO_COLOR_PROMPT} for further
details.
/---


:map.global ZY_STYLE_TO_COLOR_PROMPT_256 <<'/---'
Map from style name to the prompt-specific ANSI escape sequence coloring such
style on 256-color terminals. See ${ZY_STYLE_TO_COLOR_PROMPT} for further
details.
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_terminal_color()

Report success if shell output is attached to a *polychrome terminal device*
(i.e., a terminal supporting at least the canonical eight ANSI/VT100 colors).
/---
function is_terminal_color() {
    die_if_args
    (( $(get_terminal_color_count) >= 8 ))
}

# ....................{ GETTERS                            }....................
#FIXME: Horrific. Excise entirely in favor of set_int_to_terminal_color_count().
:func.doc <<'/---'
:int get_terminal_color_count()

Get the number of colors supported by the current terminal.
/---
function get_terminal_color_count() {
    # Get such colors. Note that "echotc Co" also suffices, if less efficiently.
    die_if_args
    :stdout.echo "${terminfo[colors]}"
}

:func.doc <<'/---'
:int get_terminal_color_count_quantized()

Get the number of colors supported by the current terminal, quantized to
standard terminal color thresholds for safety. If the exact number of colors
supported by the current terminal is:

* Greater than or equal to 256, this function returns 256 -- corresponding to
  the 256-color pallette standardized by `xterm`.
* In the range [88, 255], this function returns 88 -- corresponding to the 88-
  color pallette standardized by `rxvt`.
* In the range [8, 87], this function returns 8 -- corresponding to the 8-color
  pallette standardized by the VT100.
* In the range [0, 7], this function returns 2 -- corresponding to the 2-color
  pallettes of monochrome terminals.
/---
function get_terminal_color_count_quantized() {
    # Validate sanity.
    die_if_args

    # Get such count. For efficiency, inline such expansion. See
    # get_terminal_color_count() for further details.
    :int terminal_color_count="${terminfo[colors]}"

    #FIXME: This is tremendously wrong, of course. But leave it until we have
    #256-color support fully "up" and running.
    if (( terminal_color_count >= 8 )) {
        :str.return 8
    } else {
        :str.return 2
    }

    # If such count is already quantized, return such count as is.
    if :is "${terminal_color_count}" == (8|88|256) :si {
        :str.return "${terminal_color_count}"
    # Else, quantize such count.
    } elif (( terminal_color_count >= 256 )) {
        :str.return 256
    } elif (( terminal_color_count >= 88 )) {
        :str.return 88
    } elif (( terminal_color_count >= 8 )) {
        :str.return 8
    } else {
        :str.return 2
    }
}

# ....................{ RESETTERS                          }....................
:func.doc <<'/---'
:void reset_terminal_color()

Reset color attributes for the current terminal to such terminal's defaults
(e.g., regular typeface on white foreground and black background).
/---
function reset_terminal_color() {
    die_if_args
    :stdout.echo_sans_newline "${ZY_STYLE_TO_COLOR[color.reset]-}"
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void set_terminal_color_globals()

Set all globals whose values depend on the number of colors supported by the
current terminal, including:

* ${ZY_TERMINAL_COLOR_COUNT_QUANTIZED}.
* ${ZY_STYLE_TO_COLOR}.
* ${ZY_STYLE_TO_COLOR_PROMPT}.
/---
function set_terminal_color_globals() {
    # Validate sanity.
    die_if_args

    # Set the quantized number of colors supported by the current terminal.
    ZY_TERMINAL_COLOR_COUNT_QUANTIZED="$(get_terminal_color_count_quantized)"

    # Set map globals dependent on such number. For startup efficiency, avoid
    # calling set_map_to_map().
    :str map_name_target map_name_source
    for  map_name_target (ZY_STYLE_TO_COLOR ZY_STYLE_TO_COLOR_PROMPT) {
        map_name_source="${map_name_target}_${ZY_TERMINAL_COLOR_COUNT_QUANTIZED}"
        :Map.die_unless "${map_name_source}"
        eval ${map_name_target}'=( "${(kv@)'${map_name_source}'}" )'
    }
}
