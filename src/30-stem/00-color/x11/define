#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *terminal color definers* (i.e., functions defining infrequently expanded
terminal color-specific globals). Most `zeshy` globals are either sufficiently
small or broadly applicable to warrant their implicit definition at `zeshy`
startup. Numerous terminal color-specific globals, however, tend to be both
large and broadly inapplicable and hence must be explicitly defined by calling
functions defining such globals.
/---

# ....................{ GLOBALS                            }....................
:map.global ZY_X11_COLOR_NAME_TO_COLOR_ANSI_8 <<'/---'
Map from X11 color name to the ANSI escape sequence best approximating such
color on *8-color terminals* (i.e., terminals supporting at most the canonical
eight colors standardized by the VT100 terminals). Since such approximation
necessarily *quantizes* (i.e., algorithmically reduces) 24-bit X11 colors into
4-bit VT100 colors and hence is absurdly lossy, the results are unsurprisingly
deplorable. See define_global_x11_color_name_to_color_ansi_8() for further
details.
/---

:map.global ZY_X11_COLOR_NAME_TO_COLOR_ANSI_256 <<'/---'
Map from X11 color name to the ANSI escape sequence best approximating such
color on *256-color terminals* (i.e., terminals supporting at most the canonical
256 colors standardized by `xterm`). While such approximation necessarily
*quantizes* (i.e., algorithmically reduces) 24-bit X11 colors into 8-bit `xterm`
colors and hence is _quite_ lossy, the results are surprisingly tolerable. See
define_global_x11_color_name_to_color_ansi_256() for further details.
/---

# ....................{ DEFINERS                           }....................
#FIXME: Define define_global_x11_color_name_to_color_ansi_88() as well. I expect
#the definition to be *VERY* similar. In fact, the latter half of the definition
#should remain the same, suggesting a generalization may be in order.
#FIXME: Oh... No, too much actually differs. No worries; just get the 256-color
#version working smoothly, then duplicate to an 88-color version.

#FIXME: Incidentally, how do we gracefully degrade such mappings to 8-color
#systems? This or another related function should define such mappings as well.
#Without programmatic access to such system-specific colors, I say we simply
#assume the `xterm` pallette for such colors, as listed at:
#
#    https://upload.wikimedia.org/wikipedia/commons/9/95/Xterm_color_chart.png
#
#Such mappings can't really share the exact same code as this code, for a number
#of obvious reasons. I'm at the point where I'd be happy to accept a brute-force
#implementation as follows:
#
#* For each input X11 color, iteratively find which of the 16 canonical colors
#  has the minimum Euclidean distance between the former and latter RGB values.
#
#Look. It's clearly inefficient -- and probably quite slow. But we only do it
#once, obtain the resulting map, and hard-code the result in perpetuity. The
#reason there probably exists no simple efficient alternative is the RGB values
#of the 16 canonical colors -- there's really no strict rhyme or reason to such
#values and hence no readily identifiable mapping or equation.

#FIXME: Ideally, we should also consider mapping to colors 0 through 15 -- the
#so-called "system" colors. As the name implies, such colors are *NOT*
#standardized but instead terminal- and user-specific. In some cases, however,
#it should be feasible to programmatically query the system for which system
#colors are in current user. In particular, terminals using the "Xresources"
#system (e.g., "urxvt") *SHOULD* declare such colors in machine-readable format
#(e.g., "URxvt.color1"). Isn't there a programmatic interface to query the
#current Xresources database? Check into it! That said, we have little idea
#what to do for other terminals. GNOME, for example, has an archaic binary-only
#configuration format -- if we (probably incorrectly) recall. Querying that
#*REALLY* will not be trivial. But it would be interesting to see if it's even
#feasible... Right. None of this is a priority, but it is nice to contemplate.

#FIXME: So, we need to *ALWAYS* map the canonical 16 colors under canonical
#lowercase names (e.g., "red", "brightred") to the hardcoded ANSI sequences for
#such colors. *NEVER* attempt to map such colors to their closest approximation
#in the color cube. Rather, such colors should always be subject to user and
#system configuration and hence should be printed via the so-called "system
#color" indices (i.e., 0 through 15). Simple -- just don't forget!
#FIXME: While the above is substantially correct, we should probably preserve
#the canonical X11 definitions for such colors to different names (e.g., from
#"red" to "pure_red") *BEFORE* overwriting the original names with mappings to
#system colors. I quite like the "pure_" approach, an adjective commonly applied
#in spoken language to primary and secondary colors (e.g., "pure black"). Since
#users should be encouraged to use the system colors over the X11 colors,
#defaulting, say, "red" to the red system color and "pure_red" to the red X11
#color seems a broadly helpful default. What say you, Red Wizard?

# See below for function documentation, segregated from function definitions to
# simplify file navigation.

function define_global_x11_color_name_to_color_ansi_256() {
    # Validate sanity.
    die_if_args
    string ansi_sgr_indexed_color
    integer\
        color_value\
        source_r target_r target_r_index\
        source_g target_g target_g_index\
        source_b target_b target_b_index\
        source_grey target_grey target_grey_index\
        target_index
    map color_value_to_color_index color_value_to_grey_index

    # Precompute all mappings from 24-bit RGB color values in [0, 255] to the
    # corresponding 8-bit RGB color cube indices in [0, 5] and greyscale indices
    # in [0, 23]. Note this is only an optimization. Technically, we could
    # compute such mappings in-place below, though doing so would inefficiently
    # recompute frequently used mappings. See documentation above for
    # derivations for such mappings.
    for (( color_value=0; color_value < 255; color_value++ )) {
        # Map such color to the closest index in any dimension of the 6x6x6
        # color cube.
        color_value_to_color_index[${color_value}]=$(( int(\
            0.0138277203097732*color_value +\
            0.526481099033412*color_value/(262.744085473558 - color_value) +\
            1) ))

        # Map such color to the closest index in the greyscale ramp.
        color_value_to_grey_index[${color_value}]=$(( (color_value - 4)/10 ))
        if (( color_value_to_grey_index[${color_value}] > 23 )) {
              color_value_to_grey_index[${color_value}]=23
        }
    }

    # ANSI escape sequence prefixes displaying the color with the following
    # index when suffixed by ${ZY_ANSI_SUFFIX_LAST} in both the
    # foreground and background.
    ansi_prefix_foreground="${ZY_ANSI_CSI}${ZY_ANSI_SGR_NAME_TO_VALUE[indexed]}${ZY_ANSI_SUFFIX_NEXT}${ZY_ANSI_SGR_INDEXED_COLOR}${ZY_ANSI_SUFFIX_NEXT}"
    ansi_prefix_background="${ZY_ANSI_CSI}${ZY_ANSI_SGR_NAME_TO_VALUE[background=indexed]}${ZY_ANSI_SUFFIX_NEXT}${ZY_ANSI_SGR_INDEXED_COLOR}${ZY_ANSI_SUFFIX_NEXT}"

    # Define ${ZY_X11_COLOR_NAME_TO_RGB_HEXADECIMAL}.
    define_global_x11_color_name_to_rgb_hexadecimal

    # Map each X11 color name to the 256-color index "best" approximating the
    # RGB value of such color. For efficiency, inline such implementation. See
    # for_map_key_value_pairs() for further details.
    string color_name source_hex
    for    color_name source_hex (
        "${(kv@)ZY_X11_COLOR_NAME_TO_RGB_HEXADECIMAL}") {
        # If such color value is *NOT* in concatenated hexadecimal format,
        # throw an exception.
        is "${source_hex}" == [[:xdigit:]](#c6) si or
            :die "RGB value \"${source_hex}\" invalid (i.e., not six hexadecimal digits)."

        # Split the exact RGB value for such color in concatenated hexadecimal
        # format into the corresponding RGB components as integers in [0, 255].
        # See convert_hexadecimal_to_decimal() for further details.
        source_r=$(( [#10] 0x${source_hex[1,2]} ))
        source_g=$(( [#10] 0x${source_hex[3,4]} ))
        source_b=$(( [#10] 0x${source_hex[5,6]} ))
#       print "${color_name}: ${color_value_r}, ${color_value_g}, ${color_value_b}"

        # If any such component is not in [0, 255], throw an exception.
        (( source_r >= 0 && source_r <= 255 )) or
            :die "Red component ${source_r} invalid (i.e., not in [0, 255])."
        (( source_g >= 0 && source_g <= 255 )) or
            :die "Green component ${source_g} invalid (i.e., not in [0, 255])."
        (( source_b >= 0 && source_b <= 255 )) or
            :die "Blue component ${source_b} invalid (i.e., not in [0, 255])."

        # Map such components to the closest indices in the 6x6x6 color cube.
        target_r_index="${color_value_to_color_index[${source_r}]}"
        target_g_index="${color_value_to_color_index[${source_g}]}"
        target_b_index="${color_value_to_color_index[${source_b}]}"

        # If such components are sufficiently close to each other, such color is
        # sufficiently grey to attempt a mapping to the closest index in the
        # greyscale ramp as well.
        if (( abs(source_r - source_g) + abs(source_g - source_b) <= 32 )) {
            # Map the single greyscale value best approximating such components
            # (i.e., by the average of such components) to such index.
            target_grey_index="${color_value_to_grey_index[$((\
                (source_r + source_g + source_b) / 3 ))]}"

            # Reverse map such indices to the corresponding RGB colors in
            # preparation for comparing the "closeness" of such colors below.
            target_r=$(( target_r_index*40 + 55 ))
            target_g=$(( target_g_index*40 + 55 ))
            target_b=$(( target_b_index*40 + 55 ))
            target_grey=$(( target_grey_index*10 + 8 ))

            # If the color cube mapping better approximates such color than the
            # greyscale mapping (i.e., the distance between the color cube
            # mapping and such color is less than that between the greyscale
            # mapping and such color), adopt the former.
            if ((\
                (source_r - target_r)**2 +\
                (source_g - target_g)**2 +\
                (source_b - target_b)**2 <=
                (source_r - target_grey)**2 +\
                (source_g - target_grey)**2 +\
                (source_b - target_grey)**2 )) {
                target_index=$(( 16 +\
                    36*target_r_index + 6*target_g_index + target_b_index ))
            # Else, adopt the latter.
            } else {
                target_index=$(( 232 + target_grey_index ))
            }
        # Else, such components are sufficiently far from each other. Since the
        # greyscale ramp cannot apply, the color cube mapping remains our best
        # approximation of such color.
        } else {
            target_index=$((\
                16 + 36*target_r_index + 6*target_g_index + target_b_index ))
        }

        # Map such color to the ANSI escape sequences displaying such color in
        # both the foreground and background.
        ZY_X11_COLOR_NAME_TO_COLOR_ANSI_256[${color_name}]="${ansi_prefix_foreground}${target_index}${ZY_ANSI_SUFFIX_LAST}"
        ZY_X11_COLOR_NAME_TO_COLOR_ANSI_256[background=${color_name}]="${ansi_prefix_background}${target_index}${ZY_ANSI_SUFFIX_LAST}"
    }
}

# ....................{ DEFINERS ~ help                    }....................
:func.doc <<'/---'
void define_global_x11_color_name_to_color_ansi_256()

== Motivation ==

This function is inspired by somewhat similar functionality in
http://www.vim.org/scripts/script.php?script_id=2390[CSApprox], a ViM script
quantizing `gvim`-specific GUI color schemes intended for at least *true color*
(i.e., the 24-bit RGB color space supporting 16,777,216 colors) to `vim`-
specific CLI color schemes intended for only *256 colors* (i.e., the 8-bit RGB
color space pioneered by `xterm`). While inevitably lossy, such quantization
often produces a tolerable facsimile of the ``true'' color scheme.

== 240-color Pallette ==

The core of such algorithm maps 24-bit RGB colors to their closest approximation
in the system-agnostic subset of the 8-bit RGB color space pioneered by `xterm`.
Such space consists of the following 3 subspaces, altogether describing 256
colors:

=== System Colors ===

Colors 1 through 8 comprise *dim system colors*. As the name suggests, such
colors are system- (and actually user-) specific. Since there exists no
trivial means of programmatically finding the values of such colors, such
colors cannot be relied upon for portable use. The algorithm ignores such
colors.

Colors 9 through 16 comprise *bright system colors*. Again, the algorithm
ignores such colors.

[[define_globals_color_cube.color_cube]]
=== Color Cube ===

Colors 17 through 231 comprise a *6x6x6 color cube* (i.e., an RGB color space of
three dimensions of six integer indices each) containing 216 colors including
pure white, pure black, and four intermediate greyscale colors. Specifically:

* The first dimension provides six possible red values for each such color.
* The second dimension provides six possible green values for each such color.
* The third dimension provides six possible blue values for each such color.

For each dimension, the set of six possible values remains the same. In decimal,
these are:

[source]
------------------------------------------
>>> list color_values; color_values=(0, 95, 135, 175, 215, 255)
------------------------------------------

The distance between the first and second values is 95; the distance between all
other values is 40.

[[define_globals_color_cube.grey_scale]]
=== Greyscale Ramp ===

Colors 232 through 255 comprise a *greyscale ramp* (i.e., an RGB color space of
one dimension of 24 integer indices) containing 24 greyscale colors _not_
including pure white or pure black. Each successive color in such ramp
increments the prior color by 10, beginning at `#080808` (i.e., the RGB color
with component values 8) and stopping short at `#eeeeee` (i.e., the RGB color
with component values 238). In decimal, these are:

[source]
------------------------------------------
>>> list grey_values; grey_values=(
...       8,  18,  28,  38,  48,  58,  68,  78,  88,  98,
...     108, 118, 128, 138, 148, 158, 168, 178, 188, 198,
...     208, 218, 228, 238)
------------------------------------------

Note the premature absence of `#f8f8f8` (i.e., the RGB color with component
values 248) in such ramp. See <<define_globals_color_cube.waste,below>> for
further details.

=== Deficiencies ===

Such space, while usefully standardized, remains subject to numerous flaws. "Let
loose the useless complaints of pedantic Hell," in other words.

==== Non-physiological ====

Physiologically, the human eye is more sensitive to variations in low luminosity
(or brightness) than variations in high luminosity. Correspondingly, a quantized
color space might be expected to apportion slightly more color values to low
than high luminosity colors. Unfortunately, the `xterm` space behaves the exact
opposite, apportioning substantially more color values to high than low
luminosity colors.

Of course, the counter observation could be made that most `xterm` color schemes
are light-on-dark and hence demand more granularity for high rather than low
luminosity colors. In such case, regardless of human perception, a terminal-
specific quantized color space might be expected to apportion substantially more
color values to the highest luminosity colors (e.g., in [175, 255]). However,
the `xterm` space apportions the same number of color values to all luminosities
excluding the lowest.

Moreover, the human eye is more sensitive to green than red than blue (in that
order). While a quantized color space might be expected to apportion slightly
more color values to green than red than blue colors, the `xterm` space
apportions the same number to each -- which in the case of green colors is
probably insufficient and in the case of blue colors is certainly overkill.

In short, such space fails to comply with perceptual or terminal-specific
dictates.

[[define_globals_color_cube.waste]]
==== Wasteful ====

Such space contains the following 4 largely indistinguishable and hence
redundant greyscale colors:

* Colors 59 (`#5f5f5f`) and 241 (`#626262`).
* Colors 102 (`#878787`) and 245 (`#8a8a8a`).
* Colors 145 (`#afafaf`) and 249 (`#b2b2b2`).
* Colors 188 (`#d7d7d7`) and 253 (`#dadada`).

Such space also contains 16 nonportable system colors and hence 20 useless
colors for general use, squandering 8% of such space in total. Due in part to
such misallocation, the greyscale ramp remains woefully incomplete. For
completeness, such ramp _should_ stop at `#f8f8f8`. However, since all available
256 indices have been exhausted by that point, such ramp prematurely stops at
the previous grey value `#eeeeee`.

In short, better things could have been done. While hardly the termination of
the terminal world, the paucity of useful colors in such space is somewhat...
well, specious.

== Algorithm ==

To quantize from a 16 million-color pallette to a 240-color pallette, CSApprox
performs a brute-force search for the ``closest'' value in each dimension of the
color cube for each RGB component of the color to be quantized _and_ in the
single dimension of the greyscale ramp for the RGB value of such color. In this
case, ``closest'' means less than or equal to the *average* (i.e., midpoint) of
such value and the next largest value in such dimension _and_ greater than the
prior such midpoint (or 0 in the case of the first value).

Arbitrarily rounding up, such midpoints are (in decimal):

[source]
------------------------------------------
>>> list color_value_midpoints; color_value_midpoints=(48, 115, 155, 195, 235)
------------------------------------------

Such algorithm thus maps each RGB component of such color in the range (assuming
0-based indices for orthogonality with ANSI escape sequences):

. [0, 48] to color index 0 in the dimension for such component.
. [49, 115] to color index 1 in the dimension for such component.
. [116, 155] to color index 2 in the dimension for such component.
. [156, 195] to color index 3 in the dimension for such component.
. [196, 235] to color index 4 in the dimension for such component.
. [236, 255] to color index 5 in the dimension for such component.

=== Example ===

For example, consider X11 color `DarkSeaGreen4` with RGB components (in decimal)
105, 139, and 105. Since 105 resides strictly between midpoints 48 and 115
corresponding to color index 1, the red and blue components of such color both
map to index 1 in their respective dimensions. Likewise, since 139 resides
between midpoints 115 and 155 corresponding to color index 2, the green
component maps to index 1 in its dimension.

After attempting a similar mapping of such color to the greyscale ramp and
determining that the prior mapping better applies, such algorithm quantizes
`DarkSeaGreen4`\'s 24-bit color of 105, 139, and 105 to 8-bit color indices of
1, 2, and 1.

=== Deficiencies ===

Such algorithm suffers two comparatively minor flaws:

. It performs a brute-force search and hence is comparatively inefficient.
. It is _most_ likely to bin any component of any arbitrary color in index 2 and
  _least_ likely to bin any component of any arbitrary color in index 5, both of
  which seem rather ad-hoc (and again fail to comport with human physiology).

The latter issue is of particular interest. Given the prior midpoints, note that
the size of each color bin is as follows:

. 49 possible colors map to color index 0.
. 67 possible colors map to color index 1.
. 40 possible colors map to each of color indices 2, 3, and 4.
. 20 possible colors map to color index 5.

=== Resolution ===

`zeshy` resolves both issues by obtaining an (admittedly obtuse) equation
implementing such mapping in a single `zsh` statement.

[[define_globals_color_cube.midpoints]]
==== Preferable Midpoints ====

To do so, we first devise a set of preferable midpoints:

[source]
------------------------------------------
>>> list color_value_midpoints; color_value_midpoints=(45, 107, 160, 203, 235)
------------------------------------------

Given such midpoints, the size of each color bin then becomes:

. 45 possible colors map to color index 0.
. 62 possible colors map to color index 1.
. 53 possible colors map to color index 2.
. 43 possible colors map to color index 3.
. 32 possible colors map to color index 4.
. 20 possible colors map to color index 5.

While this fails to perfectly align with human physiology _or_ correct the
issue of predominantly binning random colors to index 1, neither do the hard-
coded constraints of the `xterm` space. (In other words, it's probably not too
far from the best we can do.)

==== Nonlinear Regression ====

Given such midpoints, we next perform nonlinear regression analysis to obtain a
function mapping integer RGB components in the range [0, 255] to floating point
RGB color indices in the range [0, 6). Rounding the latter down (e.g., with an
efficient cast to integer) then yields the desired integer indices.

As the <<define_globals_color_cube.midpoints,prior subsection>> demonstrates,
every color bin starting at index 2 contains incrementally fewer colors than the
prior color bin -- guaranteeing a concave curve and hence better fit when
performing regression analysis on the subset of such bins. However, the bin with
index 1 disrupts such curve and hence fit by containing _more_ colors than the
prior bin.

To ameliorate this, exclude the bin with index 0 from such analysis by manually
subtracting 46 from the midpoints defining such bins. Such bins then reduce to:

[source]
------------------------------------------
>>> list color_value_midpoints; color_value_midpoints=(61, 114, 157, 189)
------------------------------------------

While such exclusion will necessitate subsequent handling, the cost of such
handling is negligible by compare to the cost of a poor fit.

===== Eureqa =====

Since traditional nonlinear regression analysis failed to find a solution with
sufficiently low error _and_ computational complexity, we leveraged
http://creativemachines.cornell.edu/eureqa[Eureqa] to iteratively ``breed'' a
set of suitable solutions via genetic programming. To do so, we input the
following dataset:

------------------------------------------
x	y
0	0
62	1
115	2
158	3
190	4
210	5
------------------------------------------

Dependent variable `x` signifies integer RGB components and independent variable
`y` the resulting floating point indices. For each color bin, we assign one
greater than the desired midpoint for that bin to ensure that rounding down
always gives the desired index for that bin. For example, all components of value
less than or equal to 45 map to floating point indices less than 1 (e.g., 0.9876)
and hence to index 0 after rounding down.

Such analysis yielded several solutions with low error and complexity, of which
the following proved to be the best fit (for our pedestrian purposes):

[source]
------------------------------------------
>>> integer color_value color_index
>>> color_value=$(( color_value - 46 ))
>>> color_index_float=$((\
        0.0138277203097732*color_value +\
        0.526481099033412*color_value/(262.744085473558 - color_value) + 1 ))
------------------------------------------

Such equation enjoys remarkably low error (R^2 = 0.99995166) and complexity
(size = 12 in Eureqa parlance). Note the implicit rounding down, subtraction by
46 to account for such equation's exclusion of the bin with index 0, and
addition by 1 to restore such bin. This results in mapping each RGB component in
the range:

. [0, 45] to color index 0, containing 46 colors.
. [46, 106] to color index 1, containing 61 colors.
. [107, 160] to color index 2, containing 54 colors.
. [161, 204] to color index 3, containing 44 colors.
. [205, 235] to color index 4, containing 31 colors.
. [236, 255] to color index 5, containing 20 colors.

Quantizing terminal colors will always be somewhat ad-hoc _and_ inessential.
Negligible errors in rounding and regression analysis remain just that:
negligible.

==== Greyscale Mapping ====

Since the color cube describes both greyscale and non-greyscale colors, all 24-
bit colors are always mapped to the closest 8-bit indices in such cube. However,
since the greyscale ramp describes only greyscale colors, only sufficiently grey
24-bit colors are mapped to the closest 8-bit indices in such ramp.

Strictly speaking, a *greyscale color* is any color such that the red, green,
and blue components of such color share the same value (e.g., X11 color
`dim gray`, having RGB components 105, 105, and 105). Since such definition
excludes colors commonly associated with greyscale whose red, green, and blue
components are merely sufficiently close to each other (e.g., X11 color
`slate gray`, having RGB components 112, 128, and 144), we generalize such
definition to any RGB color satisfying the following inequality:

[source]
------------------------------------------
>>> integer minimum_grey_distance=32
>>> (( abs(color_value_red   - color_value_green) +\
...    abs(color_value_green - color_value_blue) <= minimum_grey_distance ))
------------------------------------------

Namely, the sum of the distance between the red and green components and
distance between the green and blue components of such color must be
sufficiently small. Such minimum distance should be selected so as to capture
all RGB colors containing the word `grey` in the X11 color database, including:

* `dark slate grey`, having RGB components 47, 79, and 79.
* `slate grey`, having RGB components 112, 128, and 144.

For each color satisfying such inequality, we aggregate the red, green, and blue
components of such color into a single greyscale value to be subsequently mapped
onto an index of the greyscale ramp. For simplicity, the average suffices:

[source]
------------------------------------------
>>> integer target_grey_value
>>> target_grey_value=$((\
...     (color_value_red + color_value_green + color_value_blue) / 3 ))
------------------------------------------

==== Greyscale Linearization ====

We then devise a set of preferable midpoints for the
<<define_globals_color_cube.grey_scale,greyscale>>. Given the relative
uniformity and granularity of such ramp, we adopt the literal midpoint between
each pair of adjacent ramp values:

[source]
------------------------------------------
>>> list grey_value_midpoints; grey_value_midpoints=(
...     13, 23, 33, ..., 213, 223, 233)
------------------------------------------

Such midpoints result in mapping each RGB component in the range:

. [0, 13] to grey index 0, containing 14 greys.
. [14, 23] to grey index 1, containing 10 greys.
. [24, 33] to grey index 2, containing 10 greys.
. ...
. [214, 223] to grey index 21, containing 10 greys.
. [224, 233] to grey index 22, containing 10 greys.
. [234, 255] to grey index 23, containing 22 greys.

Note the uniformity of all bins _except_ the first and latter, containing
slightly and substantially more greys than the others. While regrettable,
colors sufficiently close to pure black or pure white should already have been
successfully mapped to the corresponding indices of the 6x6x6 color cube. Since
such mapping should better approximate such colors than the above greyscale
mapping, the latter should be silently discarded after comparison with the
former. Such disparities in bin sizes should thus have negligible negative
impact, when all is said and done. And yes, that sentence contained more
instances of ``should'' than we feel comfortable with.

While we could apply the former technique of regression analysis to deriving a
similar equation for mapping to greyscale, a simplistic algebraic approach
appears to suite such ramp just as well:

[source]
------------------------------------------
>>> integer grey_value grey_index
>>> grey_index=$(( (grey_value - 4)/10 ))
>>> if (( grey_index > 23 )) { grey_index=23 }
------------------------------------------

As <<define_globals_color_cube.waste,previously discussed>>, such ramp is
artificially constrained to 24 indices. Color values mapping to nonexistent
0-based index 24 (i.e., 1-based index 25) must thus be clamped to the final
0-based index 23 (i.e., 1-based index 24) with an `if` conditional. Sadly, this
includes all color values in [244, 255]. In any case, the above logic generates
the following mapping:

.Equation-based Greyscale Mapping
[cols=">strong,^,^strong,<emphasis",options="header"]
|===============================================================================
| grey value | grey index (float) | grey index (integer) | notes
|   0        | -0.4               |  0 | after rounding down
|   3        | -0.1               |  0 | after rounding down
|   4        |  0.0               |  0 | after rounding down
|  13        |  0.9               |  0 | after rounding down
|  14        |  1.0               |  1 | after rounding down
|  23        |  1.9               |  1 | after rounding down
|  ...       |  ...               | ...| ...
| 224        | 22.0               | 22 | after rounding down
| 233        | 22.9               | 22 | after rounding down
| 234        | 23.0               | 23 | after rounding down
| 243        | 23.9               | 23 | after rounding down
| 244        | 24.0               | 23 | after clamping down
| 255        | 25.1               | 23 | after clamping down

==== Reverse Mapping ====

If the red, green, and blue components of the desired RGB color are sufficiently
different (i.e., _not_ greyscale) to preclude mapping to an index of the
greyscale ramp, simply map such color to the indices best approximating such
color in the 6x6x6 color cube. These indices represent the definitive
quantization of such color into `xterm`\'s 8-bit color space.

Else, the red, green, and blue components of the desired RGB color are
sufficiently similar as to effectively be grey. However, the color cube also
contains greyscale colors as well as pure black and white. To ascertain which
better approximates such color, necessarily map such color to the indices best
approximating such color in the color cube and greyscale ramp. Since each
approximation resides in a different color space, comparing the two requires
converting them _back_ into a common color space: RGB.

Equations for such conversions readily follow from previously defined sets of
<<define_globals_color_cube.color_cube,color cube>> and
<<define_globals_color_cube.grey_scale,greyscale>> values:

[source]
------------------------------------------
>>> color_value_red=$((   color_index_red  *40 + 55 ))
>>> color_value_green=$(( color_index_green*40 + 55 ))
>>> color_value_blue=$((  color_index_blue *40 + 55 ))
>>> color_value_grey=$((  color_index_grey *10 + 8 ))
------------------------------------------

==== Euclidean Distance ====

After converting such 8-bit RGB indices back to 24-bit RGB colors, measure the
distance between each of the two newly converted colors and the original 24-bit
RGB color -- accepting whichever of the two such colors is *closest* (i.e., has
the minimum distance according to such measure) to the original as the best
color quantizing the original.

The canonical distance measure in the RGB color space is *Euclidean distance*
(i.e., the magnitude of the three-dimensional color vector in terms of its
orthogonal red, blue, and green components):

[source]
------------------------------------------
>>> integer color_distance; color_distance=$(( sqrt(
...     (original_red   - mapped_red)**2 +\
...     (original_green - mapped_green)**2 +\
...     (original_blue  - mapped_blue)**2) ))
------------------------------------------

While `zsh` module `mathfunc` exports `C` math function `hypot()` for safely and
efficiently calculating such distance on two-dimensional vectors, there exists
no corresponding generalization to three dimensions. Hence, we implement such
measure in pure `zsh`. Fortunately, since such measure is only used for
comparison purposes, the prior call to sqrt() conveys no meaningful information
and may be profitably dropped. (Hey, we're desperate: we'll take whatever minor
efficiency gains we can glean.)

==== Final Index ====

Regardless of whether the color cube or greyscale indices were found to best
approximate the input RGB color, such indices must be mapped into an index in
[0, 255] of the 256-color `xterm` pallette.

If color cube indices were adopted, the mapping is as follows:

[source]
------------------------------------------
>>> integer final_index; final_index=$((\
...     16 + 36*color_index_red + 6*color_index_green + color_index_blue ))
------------------------------------------

Likewise, if a greyscale index was adopted, the mapping is as follows:

[source]
------------------------------------------
>>> integer final_index; final_index=$(( 232 + grey_index ))
------------------------------------------

[[define_globals_color_cube.caveats]]
==== Caveats ====

It should be noted that the RGB color space does _not_ preserve *perceptual
uniformity* (i.e., the property of a color space that any change of the same
amount to any component of any color value in such space produces a
corresponding change in the color as perceived by the human eye). In particular,
the human eye perceives changes to the green component of RGB colors to be more
visually important than changes to the red component of such colors and changes
to the latter to be more visually important than changes to the blue component
of such colors. Hence, Euclidean distance between RGB colors is a poor measure
of the similarity between such colors as perceived.

While this could be rectified by converting such colors to a color space
preserving perceptual uniformity (e.g., CIE L*a*b*) before measuring the
distance between such colors in such space (e.g., with the CIEDE2000 distance
metric), doing so smacks of overkill. Given the underlying lossiness of
quantizing 24- to 8-bit colors, measuring the Euclidean RGB distance between
such colors is unlikely to introduce _any_ additionally perceptible error.
/---

# --------------------( WASTELANDS                         )--------------------
#`zeshy` 
#Such
#globals are resource-consumptive and _not_ broadly applicable and hence _not_
#implicitly defined at `zeshy` startup as most
#`zeshy` globals are
#
#rather large (and hence ) and _not_ broadly
#applicable, such globals are _not_ implicitly defined at `zeshy` startup as most
#`zeshy` globals are.
#
#must be explicitly defined by calling 
#useful and 
# and 
#
#While
#`zeshy` defines _most_ globals
