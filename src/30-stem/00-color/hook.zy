#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Terminal color hooks* (i.e., functions run on `zeshy` precompilation and
startup establishing terminal attributes and color globals).
/---

#FIXME: O.K.; so, the contents of this parcel should be shifted back to @{color}
#after the latter parcel is simplified. Then, retain all functions defined below
#but stop registering them as precompilation hooks; instead, simply call them as
#is at the end of such parcel.

# ....................{ PRECOMPILERS                       }....................
# Initialize all remaining color globals before compiling zeshy's user digest
# file, ensuring such globals to be compiled into such file and hence *ALWAYS*
# accessible on zeshy startup. Such hook function expands configuration-specific
# globals inaccessible until precompilation (e.g., ${ZY_STYLE_TO_COLOR_NAMES})
# and hence cannot be reduced to an anonymous function run immediately here.
:run_hook_on_zeshy_precompile precompile_zeshy_terminal_color

:func.doc <<'/---'
:void precompile_zeshy_terminal_color()

Initialize color-specific globals to be compiled into `zeshy`\'s user digest
file. If the number of colors supported by the current terminal differs from
such number on subsequent `zeshy` startup, startup_zeshy_terminal_color() will
necessarily reinitialize globals whose values depend on such colors.
/---
function precompile_zeshy_terminal_color() {
    # Validate sanity.
    die_if_args

    # Convert human-readable, user-configured color maps into machine-readable,
    # zeshy-compiled color maps.
    precompile_zeshy_terminal_color_map\
        ZY_STYLE_TO_COLOR        ZY_STYLE_TO_COLOR_NAMES
    precompile_zeshy_terminal_color_map\
        ZY_STYLE_TO_COLOR_PROMPT ZY_STYLE_TO_COLOR_NAMES_PROMPT

    # Delimit prompt-specific color values by "%{" and "%}" to prevent prompt
    # colors from erroneously contributing to prompt string length.
    :str style color
    for  style color ("${(kv@)ZY_STYLE_TO_COLOR_PROMPT_8}") {
        ZY_STYLE_TO_COLOR_PROMPT_8[${style}]="%{${color}%}"
    }

    # Initialize color globals *AFTER* initializing the prior maps.
    set_terminal_color_globals
}

:func.doc <<'/---'
:void precompile_zeshy_terminal_color_map(
    :str target_map_name_prefix :str source_map_name)

Set maps `${target_map_name_prefix}_2` and `${target_map_name_prefix}_8` from
the passed source map. Specifically, for each key-value pair of such source map:

* Set the value for the same key of `${target_map_name_prefix}_2` to the
  empty string.
* Set the value for the same key of `${target_map_name_prefix}_8` to the
  color-specific ANSI escape sequence specified by such source value, where the
  latter is a `:`-delimited list of keys of map ${ZY_ANSI_SGR_NAME_TO_VALUE}.
  See ${ZY_STYLE_TO_COLOR_NAMES} for further details.
/---
function precompile_zeshy_terminal_color_map() {
    # Validate sanity.
    die_unless_args_2\
        'Expected one target map name prefix and one source map name.'
    :str\
        map_name_target_prefix="${1}"\
        map_name_source="${2}"\
        map_name_target_2\
        map_name_target_8\
        ansi_csi\
        color_name\
        color_value
    :int color_name_index

    # Target map names, constructed from such prefix.
    map_name_target_2="${map_name_target_prefix}_2"
    map_name_target_8="${map_name_target_prefix}_8"
    :Map.die_unless\
        "${map_name_target_2}"\
        "${map_name_target_8}"\
        "${map_name_source}"

    # List of color names split from the concatenated string of such names
    # corresponding to the current value of the map iterated below.
    :list color_names

    # Magic string prefixing all ANSI SGR escape sequences, consisting of the
    # magic string ANSI CSI prefixing all ANSI escape sequences in general
    # followed by the ANSI SGR value resetting color attributes to defaults.
    ansi_csi="${ZY_ANSI_CSI}${ZY_ANSI_SGR_NAME_TO_VALUE[reset]}${ZY_ANSI_SUFFIX_NEXT}"

    #FIXME: *WAY* too much overoptimized inlining here. Actually call zeshy
    #functions rather than merely inlining them below.

    # Assign each color style its corresponding ANSI color. See
    # for_map_key_value_pairs() for further details.
    :str style color_names_string color_name
    for  style color_names_string ("${(kv@P)map_name_source}") {
        # If such style is empty, throw an exception. Since empty color names
        # are acceptable (e.g., to suggest the defaults for such style), do
        # *NOT* throw an exception if such color names string is empty.
        die_unless_string_nonempty "${style}"\
            '${ZY_STYLE_TO_COLOR_NAMES} contains an empty style with color "'${color_names_string}"'."

        # Lowercase such color names.
        :lowercase_string color_names_string

        #FIXME: I'm pretty sure everything else in this applies generally to
        #256 color terminals. But this is *CLEARLY* specific to 8- and 16-color
        #terminals and hence should be shifted to whatever new place that we
        #handle their mapping. 256 color terminals support *MUCH* saner
        #greyscale colors than this ad-hoc nonsense.

        # Foreground greyscale colors are notoriously off, assigning the color
        # white a greyish rather than white color value and defining no color
        # grey. To correct this, test whether the current color names contain
        # such colors and modify such names *BEFORE* splitting such names below.
        #
        # If such color names contain a white color in regular typeface (i.e.,
        # neither bold or weak), replace such color with intense white.
        if :is "${color_names_string}" == *"white"* :and
               "${color_names_string}" != *("bold"|"weak")* :si {
            color_names_string="${color_names_string//white/intense_white}"
        # Since "grey" is a zeshy-specific pseudo-color, such color values must
        # be aggregated together from genuine white and black color values.
        } elif :is "${color_names_string}" == *"grey"* :si {
            case   "${color_names_string}" {
            # If such color is bold, replace such color with non-bold white.
            (*"bold"*) color_names_string="${${color_names_string//grey/white}//bold}";;
            # If such color is weak, replace such color with non-weak black.
            (*"weak"*) color_names_string="${${color_names_string//grey/black}//weak}";;
            # Else, replace such color with bold black.
            (*)        color_names_string="${color_names_string//grey/black:bold}";;
            }
        }

        # Split such color names on colons. See
        # :list.set_to_string_split_on_string() for further details.
        color_names=( ${(s~:~)color_names_string} )

        # Initialize the mapping from such style to color value to the ANSI CSI,
        # a magic string prefixing all ANSI escape sequences.
        color_value="${ansi_csi}"

        # For each color name split from such string of names...
        for color_name_index ({1..${#color_names}}) {
            color_name="${color_names[${color_name_index}]}"

            # If such color name is empty (e.g., due to programmatically
            # deleting such name above), continue to the next.
            (( ${#color_name} )) :or continue

            # If such color name is unrecognized, throw an exception.
            (( ${+ZY_ANSI_SGR_NAME_TO_VALUE[${color_name}]} )) or
                die_unless_map_key ZY_ANSI_SGR_NAME_TO_VALUE "${color_name}"

            # Else, append the ANSI SGR value of such color.
            color_value+="${ZY_ANSI_SGR_NAME_TO_VALUE[${color_name}]}"

            # If this is the last such value, terminate such sequence.
            if (( color_name_index == ${#color_names} )) {
                color_value+="${ZY_ANSI_SUFFIX_LAST}"
            # Else, delimit such value from subsequent values.
            } else {
                color_value+="${ZY_ANSI_SUFFIX_NEXT}"
            }
#           print "${map_name_target_8}[${style}]+=${color_name}"
        }

        # Map the polychrome and monochrome colors for such style to such value
        # and the empty string respectively.
        eval ${map_name_target_8}'[${style}]="${color_value}"
            '${map_name_target_2}'[${style}]='
#       eval 'print "'${map_name_target_8}'[${style}]: ${'${map_name_target_8}'[${style}]}color"'
    }
}
