#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Exception printers* (i.e., functions printing exceptions typically consisting
of error messages, exit statuses, and call stacks specific to such exceptions).
/---

#FIXME: Shift all other related parcels here (e.g.,
#@{00-core/runnable/call_stack/output}). This will probably necessitate
#prefixing parcels here with appropriate ordering indices as under @{00-core},
#which (of course!) is no great trouble.

#FIXME: Provide support for
#${ZY_IS_PRINTING_EXCEPTION_UNCAUGHT_CALL_SOURCE}. We couldn't genuinely do
#so before, due to zsh eccentricities: namely, zsh internally stores function
#definations as post- rather than pre-compilation strings *BUT* paradoxically
#only provides pre-compilation line numbers in both exception stack traces and
#elsewhere (e.g., canonical integer global ${LINENO}). So how do we bridge the
#gap? With obscene cleverness is my clarion call!
#
#Dynamically redefine *ALL* functions to be compiled into the current digest file
#immediately before compiling such file in @{compile}. Specifically, reduce all
#such function definitions to the current expansion of
#"${functions[${function_name}]}", guaranteeing ${LINENO} to always correspond
#to such expansion.
#FIXME: Fantastic! Function reduction is as simple as performing the identity
#mapping on ${functions}: e.g.,
#
#    # This actually works. Yay! Absurd efficiency for the win.
#    functions[lam]="${functions[lam]}"
#
#This implies *ALL* functions may be reduced with the following single
#function:
#
#    # This actually works, too. It's noticably slow (say, a full second), but
#    # the payoff is absolutely worth it. It's also worth noting that this is
#    # pretty much guaranteed to be the most efficient means of doing so,
#    # implying that individually reducing functions could be even slower.
#    functions=( "${functions[@]}" )
#FIXME: In summary:
#
#* Add a single line 'functions=( "${functions[@]}" )' to
#  @{zz-end/zz-precompile}.
#* Add support for boolean global
#  ${ZY_IS_PRINTING_EXCEPTION_UNCAUGHT_CALL_SOURCE} here.
#FIXME: Note the following excellent documentation we've already written on the
#same (well, *MOSTLY*) subject:
    # Declare such function identified by the previously registered function
    # prototype and defined by the previously registered function body.
    #
    # Technically, doing so redefines such function at least twice:
    #
    # 1. As placeholder function ::func(). This is the pre-compiled definition
    #    of such function (i.e., the original definition of such function prior
    #    to internal compilation stripping all ignorable lexical constructs,
    #    including comments and negligible whitespace). Hence, such function
    #    retains all original comments and whitespace.
    # 2. As the one or more function names declared by such prototype. Since
    #    "${functions[::func]}" expands to the post-compiled definition of such
    #    function (i.e., the final definition of such function subsequent to
    #    internal compilation stripping all ignorable lexical constructs,
    #    including comments and negligible whitespace)), all such functions
    #    omit all original comments and whitespace.
    #
    # Hence, functions defined by this function fundamentally differ to
    # those defined by builtin function(). The former omits all ignorable
    # lexical constructs internally preserved by the latter. This has a number
    # of interesting side effects that may not be immediately apparent:
    #
    # * While the pre- and post-compiled definitions for functions defined by
    #   builtin function() almost always differ, the pre- and post-compiled
    #   definitions for functions defined by this function are guaranteed to
    #   *NEVER* differ.
    # * Canonical integer global ${LINENO} corresponds to the current line
    #   number of the current function or script's pre-compiled definition.
    # * Similarly, line numbers suffixing canonical list global ${functrace}
    #   correspond to the line number of the listed function or script's
    #   pre-compiled definition on which the "next" function or script in the
    #   call stack was called.
    # * There currently exists no generally reliably means of accessing the
    #   pre-compiled definition of *ANY* function or script -- particularly if
    #   such function derives from a digest file, as all zeshy functions do.
    # * The prior observations directly imply that the definitions of functions
    #   defined by this function (but *NOT* by builtin function()) may be
    #   correlated with line numbers: both the current line number and the line
    #   numbers recorded on the call stack (e.g., due to thrown exceptions).
    # * The prior implication itself implies that functions defined by this
    #   function (but *NOT* by builtin function()) may support otherwise
    #   unsupportable functionality, including:
    #   * On detecting an uncaught exception, printing the lines of the
    #     function responsible for initially throwing such exception.
#FIXME: Actually, :func_() now necessarily performs such redefinition
#as a beneficial side effect of implementing prototype validation. That said,
#that still leaves the subset of all functions defined *BEFORE* the definition
#of :func_() -- which, of course, will *NOT* have been redefined. The
#question then arises: how do we determine which functions were defined (and
#hence redefined) via :func_() and which were not? Fortunately, there's
#a comparatively efficient and reasonable means of doing so:
#
#* In @{*-start/*-declare/*-func}, implement in an anonymous function --
#  *BEFORE* defining :func_() and related functionality -- the
#  following simple functionality:
#
#    () {
#        typeset -ga ZY_FUNC_UNREDEFINED_NAMES
#        ZY_FUNC_UNREDEFINED_NAMES=( "${(M)${(k@)functions}:#:*}" )
#    }
#
#Such logic sets such list global to the set of all function names prefixed
#by a colon and hence (more or less) guaranteed to be previously defined zeshy
#functions, which (uncoincidentally) have yet to be redefined. Done!

#FIXME: In lieu of unit tests, demonstrating the above reduction...
# function lam() {
#     # Hello.
#     print -P "${LINENO} %i %I"
#     lino
# 
#     # Yumyum.
#     print -P "${LINENO} %i %I"
#     lino
# }
# function lino() {
#     print "functrace: ${functrace[1]}"
#     print "funcfiletrace: ${funcfiletrace[1]}"
# }
# functions[lam]="${functions[lam]}"

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:int get_exception_message_width()

Get the maximum number of characters on each line of exception messages
available for textual content (i.e., excluding non-textual border characters),
specific to the current terminal and user-configurable styles for such messages.
See get_string_titled_width_body_in_style() for further details.
/---
function get_exception_message_width() {
    get_string_titled_content_width_in_style 'print_exception.'
}

# ....................{ PRINTERS                           }....................
#FIXME: Correct documentation.
:func.doc <<'/---'
[stderr=:str] print_exception()

Print the passed strings (defaulting to the empty string) as an error entitled
under the basename of the runnable at the call stack root (i.e., as returned by
output_call_stack_root_in_style()). See print_message() for further details.

Print a description of the passed non-zero exit status to standard error. This
function is intended to be called only by ::exception.print_uncaught(), whose
implementation guarantees state assumed by this function (e.g., a call stack
containing at least three callers).

Print a trace of the call stack for the currently thrown exception to standard
output. See output_call_stack_with_lists() for further details.
/---
function print_exception() {
    # Validate sanity.
    die_if_args
    :str\
        failure_name\
        failure_text\
        failure_status\
        failure_status_suffix\
        exception_message\
        exception_title\
        style_prefix_status="${0}.failure."
    :int failure_index

    # If any global previously set by ::exception.store() has since
    # been unset or changed to an unexpected type, throw an exception. See
    # is_string(), :int.is(), and :List.is() for further details.
    :is "${(t)EXCEPTION-}" == 'scalar'* :si :or :die\
         "\${EXCEPTION} undefined or not a scalar variable."
    :is "${(t)ZY__EXCEPTION_STATUS-}" == 'integer'* :si :or :die\
         "\${ZY__EXCEPTION_STATUS} undefined or not an integer variable."
    :is "${(t)ZY__EXCEPTION_FUNCSTACK-}" == 'array'* :si :or :die\
         "\${ZY__EXCEPTION_FUNCSTACK} undefined or not a list."
    :is "${(t)ZY__EXCEPTION_FUNCFILETRACE-}" == 'array'* :si :or :die\
         "\${ZY__EXCEPTION_FUNCFILETRACE} undefined or not a list."
    :is "${(t)ZY__EXCEPTION_FUNCSOURCETRACE-}" == 'array'* :si :or :die\
         "\${ZY__EXCEPTION_FUNCSOURCETRACE} undefined or not a list."

    # If such exception's call stack is empty, throw an exception.
    (( ${#ZY__EXCEPTION_FUNCSTACK} )) :or :die\
        "Exception call stack \${ZY__EXCEPTION_FUNCSTACK} empty."

    # Find the index of the runnable directly responsible for such exception
    # (i.e., either running the command returning unhandled nonzero exit status
    # or calling the :die*() or throw_exception*() function throwing such
    # exception). See output_call_stack_lists_in_style() for further
    # details and related logic.
    failure_index=1
    while (( failure_index <= ${#ZY__EXCEPTION_FUNCSTACK} )) :and
        :is "${ZY__EXCEPTION_FUNCSTACK[${failure_index}]}" ==\
            ('TRAPZERR'|'die'(|'_'*)|'throw_exception') :si {
        failure_index+=1
    }

    # If such index exceeds the last valid index, arbitrarily revert such index
    # to the first valid index.
    if (( failure_index > ${#ZY__EXCEPTION_FUNCSTACK} )) {
          failure_index=1
    }

    # Substrings to be printed below.
    set_string_to_call_stack_lists_index_in_style\
        failure_name\
        ZY__EXCEPTION_FUNCSTACK\
        ZY__EXCEPTION_FUNCSOURCETRACE\
        ${failure_index}\
        "${style_prefix_status}runnable."
    failure_text="${ZY_STYLE_TO_COLOR[${style_prefix_status}text]-} failed with exit status "
    failure_status="${ZY_STYLE_TO_COLOR[${style_prefix_status}status]-}${ZY__EXCEPTION_STATUS}"
    failure_status_suffix="${ZY_STYLE_TO_COLOR[${style_prefix_status}status_suffix]-}${ZY_STYLE_TO_TEXT[${style_prefix_status}status_suffix]-.}"

    # Exception message, prefixed by a synopsis of such exception's exit status.
    exception_message="${failure_name}${failure_text}${failure_status}${failure_status_suffix}"

    # If this exception was thrown with a nonempty error message, suffix such
    # synopsis with such a line spanning the width available for exception
    # content succeeded by such error message.
    if (( ${#EXCEPTION} )) {
        # Strip this message of delimiting whitespace.
        EXCEPTION="${${EXCEPTION##[[:space:]]##}%%[[:space:]]##}"

        # Suffix this message to this synopsis.
        exception_message+="
$(output_line_of_length_in_style\
    "$(get_exception_message_width)" "${style_prefix_status}footing.")${ZY_STYLE_TO_COLOR[print_exception.content.text]-}${EXCEPTION}"
    }

    # Exception title.
    exception_title="$(output_call_stack_lists_title_in_style_caller\
        ZY__EXCEPTION_FUNCSTACK\
        ZY__EXCEPTION_FUNCSOURCETRACE) Exception"

    # Redirect all following output to standard error.
    {
        #FIXME: Call start_stderr() and stop_stderr() instead! Which, of course,
        #have yet to be defined. *sigh*

        # Prepare standard output for printing.
        :print_stdout_separated_start

        # Print such exception's message with such title.
        :output_string_titled_in_style_caller\
            "${exception_message}" "${exception_title}"

        # If the current zeshy configuration instructs stack traces to be
        # printed with exceptions *OR* zeshy is currently being debugged, print
        # such trace. See ::exception.print_uncaught() for related logic.
        if (( ${ZY_ERROR_HANDLER_IS_PRINTING_CALL_STACK-0} )) :or\
            { is_alias :debug.is :and :debug.is } {
            output_call_stack_lists_in_style_caller\
                ZY__EXCEPTION_FUNCSTACK\
                ZY__EXCEPTION_FUNCFILETRACE\
                ZY__EXCEPTION_FUNCSOURCETRACE
        }

        # Prepare standard output for subsequent printing.
        :print_stdout_separated_stop
    } :=stderr
}

#FIXME: In lieu of unit tests...
#function yolm() {
#    function yolmyolmyolmyolmyolmyolm() {
#        :die '"I put in 35 years..."
#"It ain''t right..."
#"I don''t know what to do..."
#They never pay the slaves enough so they can get free, just enough so they can stay alive and come back to work.'
#    }
#    yolmyolmyolmyolmyolmyolm
#}
