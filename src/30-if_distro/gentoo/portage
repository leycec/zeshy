#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle Portage, the Gentoo package repository.
/---

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_portage_outdated(void)

Return success if the Portage tree is outdated and hence requires an update.
This function treats Portage trees older than half a day to be outdated, which
may not necessarily coincide with caller expectations of ``outdated.''
/---
function is_portage_outdated() {
    die_if_args
    (( $(get_path_mtime "$(get_portage_home)") <\
       $(get_time_unix_offset_by_hours -12) ))
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_portage_home(void)

Get the absolute path of the top-level Portage directory (e.g.,
`/usr/portage`).
/---
function get_portage_home() {
    die_if_args
    command portageq portdir
}

#FIXME: Rename to get_portage_download_binary_dir().
declare_function_with_stdin <<'/---'
string get_portage_binary_packages_dir(void)

Get the absolute path of the Portage directory storing binary packages (e.g.,
`/usr/portage/packages`).
/---
function get_portage_binary_packages_dir() {
    die_if_args
    command portageq pkgdir
}

#FIXME: Rename to get_portage_download_source_dir().
declare_function_with_stdin <<'/---'
string get_portage_source_archives_dir(void)

Get the absolute path of the Portage directory storing source archives (e.g.,
`/usr/portage/distfiles`).
/---
function get_portage_source_archives_dir() {
    die_if_args
    command portageq distdir
}

# ....................{ CHECKERS                           }....................
#FIXME: Rename to check_gentoo_repository_dir() and shift to a more appropriate
#parcel.
declare_function_with_stdin <<'/---'
string check_portage(string repository_dirname = "$(get_dir)")

Check the passed Portage repository (defaulting to the repository containing
the current directory), for quality assurance.
/---
function check_portage() {
    # Validate sanity.
    die_unless_args_0_to_1 'Expected optional dirname.'

    if { is_args_0 } {
        command repoman
    } else {
        run_code_under_dir repoman "${(q)1}"
    }
}

# ....................{ EMERGERS                           }....................
declare_function_with_stdin <<'/---'
[status: boolean] emerge_world(void)

Update:

* The main Portage tree and all added overlays with new ebuilds, if such tree
  is sufficiently outdated. See is_portage_outdated().
* All currently installed packages in the package set `world` (i.e., set of
  all packages explicitly installed by a human at the command line).
* All transitive dependencies of currently installed packages (i.e., set of
  all packages on which currently installed packages directly or indirectly
  depend).
/---
function emerge_world() {
    # Validate sanity.
    die_if_args

    # Update the Portage tree, if needed.
    if { is_portage_outdated } {
        update_portage
    }

    #FIXME: If "portage" itself has been updated, we need to update such ebuild
    #alone before attempting to update world below. This suggests a new tester
    #is_ebuild_outdated(). (How to implement such function efficiently, I dully
    #wonder...)

    # Update packages with updated ebuilds, ignoring non-zero exit status.
    # Ideally, of course, non-zero exit status should never be ignored; in this
    # case and below, however, "emerge" fails if at least one package fails to
    # install. Since this occurs surprisingly often, continue onward!
    print_message_item 'Updating world...'
    command emerge --update --deep --newuse world or ignore_failure

    # Since there exists no reliable means of determining whether such
    # installation nominally succeeded, confirm this with the current user.
    is_query_character_yes\
        'Run post-installation commands (e.g., "env-update", "dispatch-conf")?' or
        report_failure

    # Update packages with reverse dependencies broken by the prior update
    # (i.e., packages dynamically linked to versioned shared libraries updated
    # and hence since removed by prior updates), ignoring non-zero exit status.
    #
    # While Portage feature "preserve-libs" has been enabled by default, such
    # feature cannnot be implicitly relied upon to perfectly correct all reverse
    # dependency issues. Moreover, such feature may be manually disabled.
    # "revdep-rebuild" thus provides a fallback in the event of bad things.
    print_message_item 'Updating broken reverse dependencies...'
    command emerge @preserved-rebuild or ignore_failure
    command revdep-rebuild --ignore --pretend or ignore_failure

    # Uninstall unused dependencies, ignoring non-zero exit status.
    print_message_item 'Uninstalling unused dependencies...'
    command emerge --depclean or ignore_failure

    # Update shell variables. Since "/etc/profile" always contains only variable
    # declarations, sourcing such script without emulation *SHOULD* be safe.
    print_message_item 'Updating shell environment...'
    command env-update
    source /etc/profile

    # Update configuration files.
    print_message_item 'Updating configuration files...'
    command dispatch-conf
}

declare_function_with_stdin <<'/---'
void update_portage(void)

Update the main Portage tree and all added overlays with new ebuilds. Unlike
update_gentoo, this only updates rather than installing such ebuilds.
/---
function update_portage() {
    # Validate sanity.
    die_if_args

    # Prefer "eix-sync" to "emerge". If installed, the former subsumes the
    # latter and updates the more efficient (and hence preferable) "eix" cache.
    if { is_pathable eix } {
        update_portage_with_eix
    # Otherwise, update only the main Portage tree and possibly added overlays.
    } else {
        print_message_item 'Updating Portage...'
        command emerge --sync

        if { :is_gentoo_overlay_command_pathable } {
            print_message_item 'Updating Portage overlays...'
            update_overlays_gentoo
        }
    }
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: "revdep-rebuild" appears to be largely obsolete under the new
    #Portage. Contemplate.

        #FUXME: If this becomes a common idiom, it'd be nice to add a new
        #run_code_under_dir() function: e.g., "run_code_under_dir "${1}" repoman".
        #FUXME: We've added such function; use here!
#       store_dir "${1}"
#       {
#           repoman
#       } always {
#           restore_dir
#       }

    #FUXME: This appears to take an effectively infinite amount of time with no
    #appreciable output. I can't be bothered to debug it, at the moment. So...
    # Update the metadata cache with the contents of updated overlays.
#   interactively say_next_section 'updating portage metadata...'
#   egencache --update
#FUXME: Rename print_use_flag_match().
    #FUXME: It'd be nice to check the mtime of "$(get_portage_home)" and if
    #older than, say, 6 hours (seems reasonable, a quarter of a day), then
    #implicitly force a Portage update. That's pretty much what one always wants
    #to happen, anyway, so... **YES** ~ make this happen, please!
#   interactively say\
#       'consider first synchronizing Portage with "update_portage"'
# boolean is_portage_outdated(void)
#
# Return true if the Portage tree is outdated and hence requires an update. This
# function treats Portage trees older than six hours to be outdated, which may
# not necessarily coincide with caller expectations of "outdated."
#unction is_portage_outdated() {
#   die_if_args
#   (( $(get_path_mtime "$(get_portage_home)") <\
#      $(get_time_unix_offset_by_hours -6) ))
#
#   interactively say_first_section 'updating portage...'
    # Update ebuilds.
#   update_portage
