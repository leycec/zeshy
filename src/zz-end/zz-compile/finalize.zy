#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Digest finalization* (i.e., finalizing which operables are to be compiled into
the digest file).

This parcel should be sourced _after_ all other parcels. While the former could
technically be sourced _before_ the latter, the current approach permits this
parcel to leverage operables defined by the zeshy codebase -- thus simplifying
otherwise contumely logic.
/---

#FIXME: Eliminate all precompilation hooks. (Terrible idea, in hindsight.) See
#@{if_compile/compile} for details on how and why. Everything below *OTHER* than
#precompilation hooks is still germain, of course, and must be retained.
#FIXME: Shift documentation from @{*-main/help/compile} here.

# ....................{ PRECOMPILERS                       }....................
:func_ ':void ::zeshy.compile_finalize()' :func{
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #ORDER IS SUBTLY IMPORTANT HERE. Cranky graemlins slumber nigh.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Define placeholder functions to be redefined by
    # ::zeshy.finalize_startup() *BEFORE* ::zeshy.finalize_names() sets
    # the set of zeshy-specific functions.
    :func.define startup_zeshy ''
    :func.define ::startup.load_aliases ''
    :func.define ::startup.load_globals ''
    :func.define startup_zeshy_if_shell_interactive ''
    :func.define startup_zeshy_if_shell_login ''

    #FIXME: Terrible. Excise. See above.

    # Run all precompilation hooks.
    :str precompilation_hook
    for  precompilation_hook ("${ZY__HOOKS_RUN_ON_ZY_PRECOMPILE[@]}") {
#       print "running precompilation hook \"${precompilation_hook}\""
        run_code "${precompilation_hook}"
    }

    # Set the lists of zeshy-specific aliases, functions, and globals *AFTER*
    # defining the above functions *AND* running all precompilation hooks
    # possibly defining such objects.
    ::zeshy.finalize_names

    # Define top-level zeshy startup functions (e.g., startup_zeshy()) *AFTER*
    # setting these lists, which these functions reference to compile all
    # zeshy-specific aliases and globals into themselves.
    ::zeshy.finalize_startup

    # Cache temporary files and directories *AFTER*:
    #
    # * Calling all precompilation hooks above, many of which append to list
    #   ${ZY_USER_DIGEST_DEPENDENCY_PATHNAMES} serialized by this function.
    #   For the same reason, this function must be explicitly called here rather
    #   than added as a precompilation hook in the main codebase.
    # * Setting the lists of zeshy-specific aliases, suffix aliases, functions,
    #   and globals above, which this function serializes.
    #
    # While this function does *NOT* depend on ::zeshy.finalize_startup(), someone
    # needs to be the last in line.
    ::zeshy.finalize_cache
#   print -r -- "ZY__HOOKS_STARTUP: ${ZY__HOOKS_STARTUP[@]}"

    # Subtle dragons lie.
}:func <<'/---'
Finalize the current shell environment in preparation for subsequently compiling
a subset of this environment into the main digest file.

This function performs a variety of last-minute preparatory tasks, including (in
no particular order):

* Finalizing all `zeshy`-specific aliases, functions, and globals to be compiled.
/---


:func_ ':void ::zeshy.finalize_names()' :func{
    # Record the names of all currently defined aliases, functions, and
    # globals. (See ::zeshy.compile_start() for details.)
    ZY__ALIAS_NAMES_NEW=(        "${(@f)"$(alias +)"}" )
    ZY__ALIAS_SUFFIX_NAMES_NEW=( "${(@f)"$(alias +s)"}" )
    ZY__FUNCTION_NAMES_NEW=(     "${(@f)"$(typeset +f)"}" )
    ZY__GLOBAL_NAMES_NEW=(   ${${"${(@f)"$(typeset +g +)"}":#* local *}##* } )

    # Filter all non-zeshy-specific globals from such list (i.e., globals *NOT*
    # prefixed by "ZY_"). While such negative filtering is somewhat
    # overzealous, positively filtering the set of all non-zeshy-specific
    # globals remains both tedious and fragile. We would need to match the set
    # of all:
    #
    # * Locals defined by functions calling this function, which are
    #   effectively indistinguishable from globals.
    # * Core zsh globals (e.g., ${MATCH}, ${match}).
    # * Module-specific zsh globals (e.g., ${errnos}, ${sysparams}).
    #
    # Note that such filtering dramatically reduces the size of such set but
    # does *NOT* eliminate the need to difference such set against the set of
    # all globals defined prior to sourcing the zeshy codebase. Why?  The
    # current environment could conceivably define globals prefixed by "ZY_"
    # *NOT* defined by the zeshy codebase, in which case such globals must be
    # ignored rather than compiled into the current digest file.
    #
    # See :List.items.remove_not_^=() for further details. (Since there exists
    # no guarantee such function was successfully declared by this time, avoid
    # calling such function.)
    ZY__GLOBAL_NAMES_NEW=( "${(M)ZY__GLOBAL_NAMES_NEW[@]:#ZY_*}" )

    # The lists of zeshy-specific aliases, functions, and globals are the
    # asymmetric differences of the old from new lists of zsh aliases,
    # functions, and globals. See :List.Difference() for further
    # details. (Again, avoid calling such function.)
    ZY__ALIAS_NAMES=(
        "${ZY__ALIAS_NAMES_NEW[@]:|ZY__ALIAS_NAMES_OLD}" )
    ZY__ALIAS_SUFFIX_NAMES=(
        "${ZY__ALIAS_SUFFIX_NAMES_NEW[@]:|ZY__ALIAS_SUFFIX_NAMES_OLD}" )
    ZY__FUNCTION_NAMES=(
        "${ZY__FUNCTION_NAMES_NEW[@]:|ZY__FUNCTION_NAMES_OLD}" )
    ZY__GLOBAL_NAMES=(
        "${ZY__GLOBAL_NAMES_NEW[@]:|ZY__GLOBAL_NAMES_OLD}" )
#   print -lr "===ZY__GLOBAL_NAMES_OLD===" "${ZY__GLOBAL_NAMES_OLD[@]}"
#   print -lr "===ZY__GLOBAL_NAMES_NEW===" "${ZY__GLOBAL_NAMES_NEW[@]}"
  # print -lr "===ZY__GLOBAL_NAMES==="     "${ZY__GLOBAL_NAMES[@]}"
#   print -lr "===ZY__FUNCTION_NAMES===" "${ZY__FUNCTION_NAMES[@]}"
#   print -lr "===ZY_STARTUP_RUNNABLES===" "${ZY_STARTUP_RUNNABLES[@]}"
#   print -rl -- "globals to be compiled:" "${ZY__GLOBAL_NAMES[@]}" | less
#   print "aliases: ${aliases}\nsuffix_aliases: ${suffix_aliases}"

    # If no zeshy-specific aliases, functions, or globals were defined, throw
    # an exception. Logic below and elsewhere implicitly assumes at least one
    # such alias, function, and global to exist. Indeed, if this is *NOT* the
    # case, something has gone *HORRIBLY* awry.
    #
    # Since the definition of zeshy-specific suffix aliases depends on the
    # existence of optional external files (e.g., "/etc/mailcap"), the
    # non-existence of these aliases does *NOT* imply a fatal error. Moreover,
    # Since no core zeshy functionality depends on these aliases, their
    # non-existence does *NOT* constitute grounds for even non-fatal warnings.
    die_unless_list_nonempty ZY__ALIAS_NAMES
    die_unless_list_nonempty ZY__FUNCTION_NAMES
    die_unless_list_nonempty ZY__GLOBAL_NAMES
}:func <<'/---'
Record the names of all existing aliases, functions, and globals (including both
those defined internally by the main `zeshy` codebase and those defined
externally by the parent shell environment) _and_ difference these names with
those previously recorded by ::zeshy.compile_start().

This difference is exactly the set of the names of all aliases, functions, and
globals defined internally by the main `zeshy` codebase and hence to be compiled
into the main digest file.
/---


#FIXME: Overly long function. Split into discrete functions.
:func_ 'void ::zeshy.finalize_startup()' :func{
    die_if_args
    :str globals_binding aliases_nonsuffix_binding aliases_suffix_binding
    :list aliases_global

    #FIXME: We should probably throw exceptions or print warnings if *ANY*
    #zeshy globals to be compiled into the digest are exported. I suspect we'll
    #probably catch a few errant strays. This is important, as exporting globals
    #prevents their recompilation into zeshy's user digest file.

    # String concatenating all zeshy-specific global bindings.
    :Var.Binding "${ZY__GLOBAL_NAMES[@]}" globals_binding
  # print -r -- "globals: ${globals_binding}"|less

    # String concatenating all zeshy-specific alias bindings.
    :set_string_to_alias_nonsuffix_binding\
        aliases_nonsuffix_binding "${ZY__ALIAS_NAMES[@]}"

    # If at least one zeshy-specific suffix alias was defined, list all such
    # alias bindings. Avoid calling alias() on an empty list, which uselessly
    # returns *ALL* alias bindings -- zeshy-specific or not.
    if { :List.is_nonempty ZY__ALIAS_SUFFIX_NAMES } {
        # Prefix such bindings with a newline to delimit such bindings from the
        # preceding alias suffixes in the function containing both below.
        :set_string_to_alias_suffix_binding\
            aliases_suffix_binding "${ZY__ALIAS_SUFFIX_NAMES[@]}"
    }

    # If compiling a debug-specific digest file, call startup_zeshy_sanity()
    # immediately *AFTER* startup hooks defining zeshy globals and aliases.
    # Since :hook.startup.add_first() prepends the list of hooks with
    # the passed hook, register such hooks in the *REVERSE* order. Polish
    # notation for the disputable win!
    :line.run_if_debug :hook.startup.add_first startup_zeshy_sanity

    # Ensure the first and second functions to be called on zeshy startup are
    # ::startup.load_globals() and ::startup.load_aliases(), respectively.
    :hook.startup.add_first ::startup.load_aliases
    :hook.startup.add_first ::startup.load_globals

    #FIXME: Eliminate subshells by converting getters to setters.
    #FIXME: Ugh. This suggests we want a new setter
    #:set_string_to_list_joined_on_newline(). Call such setter below in place
    #of such subshells calling "print -lr --".

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #Avoid expanding zeshy-specific aliases in function definitions below; such
    #aliases are unavailable in such definitions and hence will not be expanded.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #
    # Define startup_zeshy() and cohorts. Since ::zeshy.finalize_names() previously
    # defined placeholder implementations for such functions, redefine rather
    # than define such functions.
    #
    # Convert the list of hooks to run to a string by delimiting such hooks by
    # newline. See :stdout.echo_newlined() for further details.
    :func.redefine startup_zeshy "
    $(print -rl -- "${ZY__HOOKS_STARTUP[@]}")
    :shell.is_interactive && startup_zeshy_if_shell_interactive
    is_shell_login       && startup_zeshy_if_shell_login"

    :func.redefine startup_zeshy_if_shell_interactive\
        "$(print -rl -- "${ZY__HOOKS_SHELL_INTERACTIVE_STARTUP[@]}")"
    :func.redefine startup_zeshy_if_shell_login\
        "$(print -rl -- "${ZY__HOOKS_SHELL_LOGIN_STARTUP[@]}")"
#   print_function ::startup.load_globals
#   :func.die_unless startup_zeshy

    :func.redefine ::startup.load_aliases\
        "${aliases_nonsuffix_binding}${ZY_ASCII_NEWLINE}${aliases_suffix_binding}"

    # List of all global alias names.
    :set_list_to_aliases_global aliases_global

    # Temporarily disable all global aliases *BEFORE* defining
    # ::startup.load_globals().
    #
    # Unsurprisingly, the reasons why are fairly subtle. Such function's
    # implementation may attempt to declare nonscalar globals containing
    # unquoted items of the same name as zeshy-specific global alias names
    # (e.g., "is", "or"), in which case attempting to define such function
    # below will typically fail with one or more fatal parse errors.
    #
    # Disable *ALL* global aliases rather than merely zeshy-specific global
    # aliases. If non-zeshy-specific global aliases are currently defined, such
    # aliases could prove as problematic as zeshy-specific global aliases.
    #
    # Technically, disabling all currently defined non-suffix aliases (i.e.,
    # normal and global aliases) rather than merely all global aliases would
    # suffice to undefine the latter as well. However, doing so would also
    # introduce another unhelpful subtlety: namely, inducing fatal errors in
    # subsequently called zeshy functions expanding such aliases in subshells
    # (e.g., "$(:caller.get)", "$(:stdin)"). Since zsh expands aliases in
    # function bodies at function definition definition rather than call time,
    # *ONLY* zeshy functions expanding such aliases directly in their function
    # bodies remain unaffected. Unfortunately, the print_exception() exception
    # handler transitively calls functions expanding such aliases in subshells.
    # To avoid breaking exception handling (at least in the interim until
    # ::startup.load_aliases() redefines such aliases), undefine the minimum
    # number of problematic aliases (i.e., all global aliases) rather than all
    # non-suffix aliases.
    # undefine_alias_nonsuffix "${aliases_global[@]}"
    :disable_alias_nonsuffix "${aliases_global[@]}"
    :func.redefine ::startup.load_globals "${globals_binding}"
     :enable_alias_nonsuffix "${aliases_global[@]}"
}:func <<'/---'
Dynamically define startup_zeshy() and related functions.

This includes:

* startup_zeshy(), run on `zeshy` startup and calling all other functions below.
* startup_zeshy_if_shell_interactive(), run on `zeshy` startup if the current
  shell is interactive.
* startup_zeshy_if_shell_login(), run on `zeshy` startup if the current shell
  is a login shell.
* ::startup.load_aliases(), run on `zeshy` startup to declare and define all
  `zeshy`-specific aliases.
* ::startup.load_globals(), run on `zeshy` startup to declare and define all
  `zeshy`-specific globals.
/---


#FIXME: Let's be honest: this is exceedingly silly. Rather than serialize all
#lists of names to an external file, simply dynamically define a new function
#:define_zeshy_name_globals() as above, which when called sets the four name
#list globals (e.g., ${ZY__GLOBAL_NAMES}, ${ZY__FUNCTION_NAMES}) to the
#current contents of these lists. *WOW*. Embarrassingly simple.

:func.doc <<'/---'
:void ::zeshy.finalize_cache()

Store metadata describing the current digest file to temporary files in the
cache subdirectory of the current user's `zeshy` dot directory.

This includes:

* ${ZY_USER_DIGEST_DEPENDENCIES_FILENAME}, caching the list of paths on which
  `zeshy`\''s user digest file depends. Since `zeshy` requires this list
  before autoloading such file, this list must be cached to an external file.
* ${ZY_USER_NAMES_FILE}, caching lists of names of `zeshy`-specific aliases,
  suffix aliases, functions, and globals. Such lists are both too resource
  consumptive and too infrequently accessed to warrant compilation into
  ::startup.load_globals() with the customary `zeshy` globals.
/---
function ::zeshy.finalize_cache() {
    die_if_args

    # Serialize these lists.
    :write_script_with_var_binding\
        "${ZY_USER_DIGEST_DEPENDENCIES_FILENAME}"\
        ZY_USER_DIGEST_DEPENDENCY_PATHNAMES
    :write_script_with_var_binding\
        "${ZY_USER_NAMES_FILE}"\
        ZY__ALIAS_NAMES\
        ZY__ALIAS_SUFFIX_NAMES\
        ZY__FUNCTION_NAMES\
        ZY__GLOBAL_NAMES\
}

# ....................{ STARTUP                            }....................
:func.doc <<'/---'
:void startup_zeshy()

Run all `zeshy` startup hooks.

This includes (in order):

. ::startup.load_globals(), declaring and defining all `zeshy`-specific globals.
. ::startup.load_aliases(), declaring and defining all `zeshy`-specific aliases.
. startup_zeshy_if_shell_interactive(), if the current shell is interactive.
. startup_zeshy_if_shell_login(), if the current shell is a login shell.
/---


:func.doc <<'/---'
:void ::startup.load_globals()

Declare and define all `zeshy`-specific globals on `zeshy` startup.

Since this function is called before all other startup logic, all startup
functions may reliably expand these globals.
/---


:func.doc <<'/---'
:void ::startup.load_aliases()

Declare and define all `zeshy`-specific aliases on `zeshy` startup.

Since this function is called before all other startup logic, all startup
functions may reliably expand these aliases.
/---


:func.doc <<'/---'
:void startup_zeshy_if_shell_interactive()

Runs all `zeshy` startup hooks specific to interactive shells _after_ running
all other startup logic (but _before_ running hooks specific to login shells).
/---


:func.doc <<'/---'
:void startup_zeshy_if_shell_login()

Runs all `zeshy` startup hooks specific to login shells _after_ running all
other startup logic (including running hooks specific to interactive shells).
/---
