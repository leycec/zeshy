#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle unit tests and suites of such tests.
/---

#FIXME: Note that "zsh" internally uses a unit test syntax called "ztst". We
#should probably google a bit about this before unrolling our own. Perhaps we
#can simply reuse "ztst"? I doubt it, of course. But knowledge gleaned...
#FIXME: See "src/main" for extensive documentation on The Way Forward.

#FIXME: zeshy's complexity and hence fragility is beginning to enter the caustic
#zone. We *REEEALLY* need to add unit tests, post-haste. This will entail a
#massive effort, but be well worthwhile. It's nigh impossible to keep up with
#the current pace of new regressions without installing at least:
#
#* One unit test per function intended to execute successfully.
#* One unit test per function intended to execute unsuccessfully.
#
#Thanks to our dependency on exception handling, it *SHOULD* be exceedingly
#simple to doctor up a small unit test framework. When we expect unsuccessful
#execution and hence a thrown exception, such framework will need a function
#accepting the name of the expected thrown exception; on catching an
#exception, such function must dynamically inspect the call stack for such
#function. Alternatively, it'd be great if the exception thrown by both :die()
#and our TRAPZERR() function itself performed such inspection and *SET THE
#NAME OF THE FUNCTION TO BE THE RESPONSIBLE die_*() FUNCTION NAME*. Pretty
#sweet! We currently use a useless exception name (e.g., "ZeshyException");
#so, this would be quite a welcome change.
#FIXME: Actually, zeshy now attaches the current stack to each exception. See
#${ZESHY_EXCEPTION_FUNCSTACK} and ${ZESHY_EXCEPTION_FUNCFILETRACE}.

#FIXME: Possible desirable unit testing scaffold output:
#
#  unit testing :func.is()... FAIL
#  unit testing :func.is()... pass
#  unit testing unit_test_zeshy_is_alias()... FAIL
#  unit testing unit_test_zeshy_is_function()... ok
#  calling unit_test_zeshy_is_function()... ok
#  calling unit_test_zeshy_set_list_to_string_split_on()... OK
#  running unit_test_zeshy_set_strings_to_split_string_on()... OK
#FIXME: On reflection, I prefer lowercase "pass" and "fail" indicators. Coloring
#the two differently should suffice to visually differentiate successful from
#unsuccessful tests.
#FIXME: Observations:
#
#* If we know the number of unit tests to be run beforehand, prefix each test
#  with its current 1-based index. This provides the current user a visual
#  indication of test suite progress.
#* Horizontally align "pass" and "fail" indicators to the right, as under
#  Gentoo's OpenRC system.

#FIXME: Don't bother documenting unit tests. The zeshy help system should be
#able to dynamically "synthesize" help if anyone asks for it: e.g., for a
#test_zeshy_split_string_lines_to_list() function, "Unit tests the
#split_string_lines_to_list() function." Simple!

#FIXME: The test harness should print everything to stdout, even in the event of
#test failure. As the "zst" framework notes:
#"Report failure.  Note that all output regarding the tests goes to stdout.
# That saves an unpleasant mixture of stdout and stderr to sort out."

#FIXME: We should be able to test unit tests on interactive input by invoking
#pseudo-tty functionality in zsh (zpty() or some such, isn't the module?). For
#another day!

#FIXME: Unit tests should confine file write operations to a sandbox. (Perhaps
#we want to chroot to enforce this? That would probably be highly non-trivial to
#implement if generically feasible at all, so save that one for a *VERY* rainy
#day.) The "ztst" framework implements this with an unenforcable contract that
#*ALL* temporary directories and files created during each test's preparation
#stage should be suffixed by ".tmp", which each test's cleanup stage then
#forcefully removes as follows:
#
#    rm -rf $ZTST_testdir/*.tmp
#
#...where $ZTST_testdir in our case would be a directory under ${TMPPREFIX}.
#Given the intelligent usage of ".tmp", here, such operation *SHOULD* be fairly
#safe. For safety, avoid calling remove_dir_recursively() here. After all, such
#function could be broken in a horrible way!
#
#For additional safety, we should avoid following symbolic links during such
#removal.
#FIXME: Ideally, we should confine tests to a *GENUINE* sandbox driven by a
#"chroot" jail. Basically, it layers a copy-on-write view of the current
#filesystem onto such jail, providing a temporary mirror of the current
#filesystem that is then deleted after testing. To quote a post on the subject:
#
#"This script, now a small C program, is a proof of concept of desktop
# application container/sandbox using the same kernel features as LXC (a set of
# tools to manage containers on Linux) uses. It basically does the following:
#
# * Mount your / in a copy-on-write directory using aufs.
# * Mount-bind your /home inside the copy-on-write environment.
# * Switch to another UTS, PID, IPC and NS context (keeping current network namespace)
# * Mount a new /proc in the copy-on-write environment
# * Chroot to the copy-on-write environment and switch user to your current user
#
# At this point, the user will be in what looks like their home directory,
# though “ps” will only show a single process making it impossible to list or
# trace any process running outside this environment. Any change happening on
# the file system (outside of /home) will be recorded in a “cow” directory and
# be lost whenever the user exists the chroot.
#
# This can be used to install an untrusted application in the chroot, test it,
# see exactly what it’s modifying on the filesystem without much risk for your
# actual system."
#
#There exist a few caveats, however. "/usr/bin/chroot" is executable only by
#root on most systems, due to security reasons (namely, permitting execution by
#non-root users permits a user to run "chroot" within a chroot jail and thereby
#break out of chroot jails). This is circumventable by running:
#
#    sudo setcap cap_sys_chroot+ep /usr/bin/zeshy
#
#But then "zeshy" becomes a security risk. So, bad idea. Given the security
#implications, alternatives are essential. Right. So, there's Debian's "schroot"
#-- a "chroot"-style command executable by any users and available under Gentoo.
#I'm unclear, however, whether or not "schroot" jails can be *CONFIGURED* by
#non-root users. Documentation suggests *NOT*, rendering "schroot" equally (?)
#useless for our purposes.
#
#That brings up the second caveat: Linux dependency. That's not particularly
#good... O.K.; too many worms in this can. Let's put this aside for now.
#FIXME: Right. So, this is a known unit testing problem. One of the better
#solutions appears to be that of Python fixture "fakechroot", leveraging
#external commands "fakeroot", "fakechroot", and "cowdancer" to provide a
#userland simulacra of a genuine copy-on-write chroot of the current filesystem.
#Exceptionally sweet. Replicating such fixture in "zeshy" would, however, be an
#extraordinary expenditure of time. (Contemplate for the future.) For the
#moment, we'll probably pass.

#FIXME: Both to enable comparison of unit test output with expected output *AND*
#to prevent such output from being printed to the current terminal (unless an
#unexpected error or test failure occurs), the "ztst" framework *ALWAYS*
#redirects unit test output -- roughly as follows:
#
#   # Run once at test suite setup time.
#   #
#   # Temporary files for redirection inside tests.
#   ZTST_in=${TMPPREFIX}.ztst.in.$$
#   # hold the expected output
#   ZTST_out=${TMPPREFIX}.ztst.out.$$
#   ZTST_err=${TMPPREFIX}.ztst.err.$$
#   # hold the actual output from the test
#   ZTST_tout=${TMPPREFIX}.ztst.tout.$$
#   ZTST_terr=${TMPPREFIX}.ztst.terr.$$
#
#   # Run at the beginning of *EACH* unit test.
#   rm -f $ZTST_in $ZTST_out $ZTST_err
#   touch $ZTST_in $ZTST_out $ZTST_err
#
#   # This runs the actual unit test with a standard eval(). Note this forces
#   # unit tests to read # standard input from an empty file, which is usually
#   # desirable.
#   ZTST_execchunk <$ZTST_in >$ZTST_tout 2>$ZTST_terr
#
#   # And... that's mostly it. We simply compare the output then and respond in
#   # a hopefully rational manner.
#
#Sadly, we can't use coprocesses here, as they would conflict with internal
#coprocess use by functions.
#FIXME: For passers and failers accepting a literal string of stdout or stderr
#to test, efficient string comparison with such string is feasible by passing
#such string to "diff": e.g.,
#
#   >>> :str.output "${ZTST_err_expected}" | command diff -c "${ZTST_terr}" -
#
#This should probably be codified in a new general tester function -- say,
#is_file_text_equals:().

#FIXME: So... How do we structure unit tests? I posit we should probably
#replicate the declare_*() experience by defining one (ideally) or more (...only
#if we absolutely must) high-level function resembling:
#
#void declare_test_provided_stdin_expecting_stdout_stderr_status(
#    string test_category,
#    string test_synopsis,
#    string test_code,
#    string provided_stdin,
#    string expected_stdout,
#    string expected_stderr,
#    string expected_status)
#
#Internally, such function will (probably) add the passed metadata to
#appropriate map globals and/or synthesize a new function from and for such
#metadata.
#
#Externally, since most callers won't necessarily need to pass *ALL* such
#metadata for most unit tests, we will want higher-level convenience functions
#resembling:
#
#void declare_test_expecting_stdout(
#    string test_category,
#    string test_synopsis,
#    string test_code,
#    string expected_stdout)
#FIXME: Hmm; or, perhaps not. I'll note that since there *ALWAYS* exist 6
#fragments of metadata collectively defining each unit test, we *COULD* compact
#them all together into a single list. This would rather their definition
#exquisitely efficient and concise: e.g.,
#
#list ZESHY_TESTS; ZESHY_TESTS=(
#    # set_list_to_string_characters:().
#    'set_list_to_string_characters:'
#)
#
#Ugh. O.K.; so, for each zeshy runnable, we need to associate such runnable with
#one or more unit tests. The prior single list concept isn't terribly useful,
#here, as it compacts all tests together and thereby destroys the association of
#such tests with a specific runnable. We *MUST* maintain such association.
#Consider running all tests for all runnables in a specific parcel, for example.
#This will (probably) become a common enough request, but we can't reasonably do
#it without such association.
#
#With that in mind, how about maintaining one list global *PER* zeshy runnable
#defined by a function *AT RUNTIME* (to avoid polluting the global namespace
#with absolute craziness) resembling:
#
#function declare_test_globals:() {
#    # Declare such globals.
#    list\
#        ...\
#        ZESHY_TESTS_FOR_FUNCTION__set_list_to_string_characters\
#        ...
#    ...
#
#    # Define such globals.
#    ZESHY_TESTS_FOR_FUNCTION__set_list_to_string_characters=(
#        'Receiving an empty string'
#        'list characters
#         set_list_to_string_characters: characters ""
#         testify_list_to_string: characters'
#        ''
#        'stdout' '[list] name: characters; size: 0' '' 0
#    )
#    ...
#}
#FIXME: Wait! Map globals might be both more readable and writable: e.g.,
#
#    # Define such globals.
#    integer i
#    ZESHY_TESTS_FOR_FUNCTION__set_list_to_string_characters=(
#        "$((i=0)).synopsis" 'Receiving an empty string'
#        "${i}.code"
#            'list characters
#             set_list_to_string_characters: characters ""
#             testify_list_to_string: characters'
#        "${i}.stdout" "[list] name: characters; size: 0"
#    )
#FIXME: Wait! This doesn't quite work, as arbitrary function names cannot be
#embedded in global names. How about:
#
#function declare_test_setters:() {
#   ...
#   function "::set_maps_3_to_test:function:set_list_to_string_characters:"() {
#       integer test_number=0
#       set_map_to_evaluation_stdin: "${$(( ++test_number ))}" <<'/---'
#           'synopsis' 'Receiving the empty string'
#           'code'
#               'list characters
#                set_list_to_string_characters: characters ""
#                testify_list_to_string: characters'
#           'stdout' '[list] name: characters; size: 0'
#       /---
#   }
#   ...
#}
#FIXME: Ugh. That works, but it's uncommonly heavyweight. While there's no
#perfect solution here by any means, the prior approach appeared much simpler:
#
#function declare_test_setters:() {
#   ...
#   function ::set_map_to_test:function:set_list_to_string_characters:() {
#       die_unless_arg 'Expected one map name.'
#       integer test_number
#       set_map_to_evaluation_stdin: "${1}" <<'/---'
#           "$((++test_number)).synopsis" 'Receiving a nonempty string'
#           "${test_number}.code"
#               'list characters
#                set_list_to_string_characters: characters "Ixtlan"
#                testify_list_to_string: characters'
#           "${test_number}.stdout"
#               '[list] name: characters; size: 6; items: I; x; t; l; a; n'
#
#           "$((++test_number)).synopsis" 'Receiving the empty string'
#           "${test_number}.code"
#               'list characters
#                set_list_to_string_characters: characters ""
#                testify_list_to_string: characters'
#           "${test_number}.stdout" '[list] name: characters; size: 0'
#       /---
#   }
#   ...
#}
#FIXME: Ugh! That works. But, again, a map approach seems inordinantly clumsy.
#After all, there aren't *THAT* many possible map keys. The alternative list
#approach resembles:
#
#function declare_test_setters:() {
#   ...
#   function ::set_list_to_test:function:set_list_to_string_characters:() {
#       die_unless_arg 'Expected one list name.'
#       set_list_to_evaluation_stdin: "${1}" <<'/---'
#           'Receiving a nonempty string'
#           'list characters
#            set_list_to_string_characters: characters "Ixtlan"
#            testify_list_to_string: characters'
#           "${test_stdin_empty}"
#           '[list] name: characters; size: 6; items: I; x; t; l; a; n'
#           "${test_stderr_empty}"
#           "${test_status_success}"
#
#           'Receiving an empty string'
#           'list characters
#            set_list_to_string_characters: characters ""
#            testify_list_to_string: characters'
#           "${test_stdin_empty}"
#           '[list] name: characters; size: 0'
#           "${test_stderr_empty}"
#           "${test_status_success}"
#       /---
#   }
#   ...
#}
#
#Local variables ${test_stdin_empty}, ${test_stdout_empty}, and ${test_stderr_empty}
#all expand to the empty string; ${test_status_success} and ${test_status_failure}
#to 0 and 1 respectively. All such variables are guaranteed to be created by the
#test harness for expansion by such functions, and serve no purpose whatsoever
#other than to improve unit test readability.
#FIXME: Wait. Since we're already going that far, we'd might as well go one
#farther and have such functions both set *AND* get local variables instantiated
#by the calling function: e.g.,
#
#function declare_tests:() {
#   ...
#   function ::test:function:set_list_to_string_characters:() {
#       ZESHY_TESTS=(
#           'Receiving a nonempty string'
#           'list characters
#            set_list_to_string_characters: characters "Ixtlan"
#            output_variable: characters'
#           ''                                                 # expected stdin
#           'list characters; characters=( I x t l a n)'       # expected stdout
#           ''                                                 # expected stderr
#           "${ZESHY_STATUS_SUCCESS}"                          # expected status
#
#           'Receiving an empty string'
#           'list characters
#            set_list_to_string_characters: characters ""
#            output_variable: characters'
#           ''                                                 # expected stdin
#           'list characters'                                  # expected stdout
#           ''                                                 # expected stderr
#           "${ZESHY_STATUS_SUCCESS}"                          # expected status
#       )
#   }
#   ...
#}
#
#Significantly simpler, eh? Right. I think that does it for core unit testing
#functionality, then. Oh, and forget that ${test_stdin_empty},
#${test_stdout_empty}, and ${test_stderr_empty} business. Inline comments serve
#quite a bit better, you see.

#FIXME: Wait! The prior declarative approach is clearly inadvisable, due to its
#non-extensibility. Consider adding support for exception checking, for example.
#Revert to the original procedural concept; namely:
#
#* A directory tree "src/if_test" replicating the "src/always" directory
#  structure. Naturally, the former should contain unit tests corresponding to
#  the latter, where unit tests are run procedurally from the top level of each
#  script and hence run immediately on sourcing such script.
#* A function run_tests:() running all zeshy tests in "src/if_test" by passing
#  such directory to...
#* A function run_tests_in_dir_recursive:() recursively running all unit tests
#  in the passed directory by sourcing all zeshy scripts under such directory.
#  Such function should:
#  * 
#* A function "void for_test_pathables:(string command_name1, ..., string code)"
#  intended for use in testing pathable-optimized functions. Such function
#  iteratively checks if each such pathable is currently installed. If not, a
#  warning is printed and iteration continues to the next pathable; if so, such
#  iteration executes the passed code. Hmm; actually, that's fairly simple logic
#  that could probably better be reimplemented directly in each unit test: e.g.,
#
#string command_name
#for    command_name (dig host nslookup) {
#   set_test_function_pathable:\
#       'set_list_to_string_characters:'\
#       "${command_name}"
#   ...
#   pass_test_if_code_stdout_equals:\
#       'Receiving an empty string'\
#       'list characters
#        set_list_to_string_characters: characters ""
#        output_variable: characters'\
#       'list characters'
#   ...
#}
#
#reset_test_state:
#
#set_test_functions_pathable:() should cache the passed command to a string local
#previously declared by run_tests_in_dir_recursive:(). More importantly, if such
#command is pathable, the parcel containing the passed function should be
#resourced in a clever way. Basically, such function should check whether it has
#already been passed another pathable with the same function name; to do so, it
#must test and modify a map local previously declared by
#run_tests_in_dir_recursive:() from function name to the prior pathable passed
#to set_test_functions_pathable:(). This is fairly clever; honest! If such map
#contains a key-value pair for the passed function name, then the corresponding
#pathable in such map must be temporarily removed from global map ${command}.
#Then, the the parcel containing such function must be resourced, forcing the
#alternative definition of such function to be declared.
#
#Naturally, this implies we should run rehash() after running unit tests. Err;
#or perhaps we simply locally shadow ${command} with a copy of such array in
#run_tests_in_dir_recursive:()? Right; the latter, I should think. Such copy
#should be copied over after sourcing each unit test file, locally restoring
#${command} to its global state in preparation for the next unit test file.
#
#Wait; no. We need to restore ${command} *IMMEDIATELY* after such loop
#concludes to ensure subsequent unit tests can still succeed. O.K.; that's what
#the call to reset_test_state:() above now accomplishes. Sweet!
#
#This should actually be fairly simple. Oh, and we'll need a new map global
#${ZESHY_FUNCTION_TO_SCRIPT} mapping from function name to absolute path of the
#zeshy script declaring such function. Naturally, declare_function:() must
#maintain such mappings.

#FIXME: As the prior example demonstrates, a new series of functions
#testify_list_to_string:() or some such would be of extreme use for comparing the
#expected and actual contents of non-scalar maps and strings. Note that while
#testify_list_to_string:() has a trivial implementation,
#testify_map_to_string:() does *NOT* due to the need to sort and print map keys
#in a lexically deterministic manner. The following snippet from "ztst" can
#probably help us here (again):
#
#"# Ensure the locale does not screw up sorting.  Don't supply a locale
# # unless there's one set, to minimise problems.
# [[ -n $LC_ALL ]] && LC_ALL=C
# [[ -n $LC_COLLATE ]] && LC_COLLATE=C
# [[ -n $LC_NUMERIC ]] && LC_NUMERIC=C
# [[ -n $LC_MESSAGES ]] && LC_MESSAGES=C
# [[ -n $LANG ]] && LANG=C"
#FIXME: Hmmmm. Given that JSON, Python, and JavaScript syntax for defining lists
#and maps (dicts) is effectively synonymous, testify_*() functions should
#(arguably) format output to such syntax: e.g.,
#
#   >>> testify_list_to_string: characters
#   'list characters=( I x t l a n )'
#
#*sigh*. Right. That's obviously just "typeset -p" output. Well, there's our
#implementation, then. It's even more trivial than I assumed... Given this, we
#probably want a more generalized nomenclature than testify_*(). How about, say,
#output_variable:()? Coincides well with :Var.print:(), its user-friendly
#elder brother.

# ....................{ UNIT TESTERS                       }....................
:func.doc <<'/---'
string test_zeshy:()

Comprehensively test `zeshy`. Specifically, run the test suite of all predefined
unit tests applicable to the current system.
/---
function test_zeshy:() {
    # Validate sanity.
    die_if_args

    #FIXME: O.K.; now this is cool. We want this framework to define a function:
    test_functions_matching_glob: 'test_zeshy_*'

    #FIXME: Then, each Zeshy unit test should begin with test_zeshy_*(). While
    #it would be "cool" to interleave unit tests with regular functions, we
    #should probably consider segregating them. The only comment online I see
    #regarding interleaving is (wait for it) by Bruce Eckel. No surprise,
    #really. I like it, actually. Let's do it. It'll bloat the codebase up,
    #but... *shrug* Also, 
    #Since we're not including documentation, such unit tests should be concise
    #enough to make the endeavor not horrifically unreadable. Go-go-go!
    #FIXME: Actually, we *CAN'T* interleave tests with code in zeshy, due to
    #the existence of code with multiple possible implementations (typically
    #dependent on pathables). Separating the two permits tests to resource code
    #as many times as required.
}

:func.doc <<'/---'
string test_functions_matching_glob:(string glob)

Run all functions with names matching the passed glob as a unit test suite.
/---
function test_functions_matching_glob:() {
    # Validate sanity, capitalizing the local variable receiving the
    # passed glob to denote such glob readable by child functions.
    die_unless_arg 'Expected one glob.'
    :str\
        ZESHY_UNIT_TEST_FUNCTIONS_MATCHING_GLOB="${1}"\
        tested_function_name_prefix\
        tested_function_name
    :list test_function_names

    # List of all function names matching the passed glob.
    set_list_to_function_matches\
        test_function_names "${ZESHY_UNIT_TEST_FUNCTIONS_MATCHING_GLOB}"

    # Name of the function being tested by the current unit test.
    :str tested_function_name

    #FIXME: Replace with call to glob function returning match group, if found.
    # If the passed glob is prefixed by a substring of alphanumeric characters
    # (e.g., substring "test_zeshy_" of glob "test_zeshy_*"), store such prefix
    # for use below.
    if { :is_string_matches_glob\
        "${ZESHY_UNIT_TEST_FUNCTIONS_MATCHING_GLOB}" ([[:alnum:]]##)* } {
        tested_function_name_prefix="${match[1]}"
    }

    # Iteratively run each such function as a unit test.
    :str test_function_name
    for     test_function_name ("${test_function_name[@]}") {
        if { is_string_nonempty "${tested_function_name_prefix}" } {
            :str.set_sans_prefix\
                tested_function_name\
                "${test_function_name}"\
                "${tested_function_name_prefix}"
            :func.is "${tested_function_name}" or
                tested_function_name=
        }

        #FIXME: Abstract test :str.output out to a set of new "terminal/theme/output"
        #functions: say,
        #
        #    string say_test(string message)
        #    string say_test_passed()
        #    string say_test_failed()
        #
        #Note that say_test() will need to set a global boolean noting Zeshy to
        #now be in a testing state and say_test_passed() and say_test_failed() to
        #unset such boolean. Ah! Nice. That may not be strictly necessary. What
        #will be necessary, however, is to have say_test() temporarily redirect
        #stdout to a file, named pipe, or (ideally) coprocessed variable (e.g.,
        #">(ZESHY_STANDARD_OUTPUT)") and then to have say_test_passed() and
        #say_test_failed() restore stdout *AND* print the contents of
        #"${ZESHY_STANDARD_OUTPUT}" after printing either "ok" or "FAIL". Oh, and
        #we'll want to redirect stderr as well, of course. Sweet; research.
        if { is_string_nonempty "${tested_function_name}" } {
            print_message_test: "Unit testing ${tested_function_name}()... "
        } else {
            print_message_test: "Calling ${function_name}()... "
        }
    }
}

function print_message_test:() {
    # Validate sanity.
    die_unless_arg 'Expected one string.'
    print_message "${1}"
#   print_message "${1}()... "
}

# ....................{ GETTERS                            }....................
function get_caller_test:() {
    :Str.die_unless ZESHY_UNIT_TEST_FUNCTIONS_MATCHING_GLOB
}

# --------------------( WASTELANDS                         )--------------------
#pass_test_if_code_stdout_equals_for_pathable:() should be implemented so as to
#be fairly intelligent. Namely, it should:
#
#* Test if the passed command is pathable. If not, such test must be marked and
#  printed as a failure and such code *NOT* executed; else:
#  * run_tests_in_dir_recursive:() should declare a map local from test synopsis
#    (basically guaranteed to be unique within each test script) to 
#    After sourcing each unit test file, such map should be emptied out.
#leverage global variables to e

#   if { is_pathable "${command_name}" } {
#   } else {
#       fail_test_pathable_not_found "${command_name}"
#   }
#}

    #FUXME: Rename "ZESHY_STDOUT_FILE_DESCRIPTOR" to "ZESHY_STDOUT_FILE_DESCRIPTOR"
    #or perhaps "ZESHY_FILE_DESCRIPTOR_FOR_STANDARD_OUTPUT"
    #or perhaps "ZESHY_FD_STANDARD_OUTPUT"? Hmm. I do like the longest one...
#   integer ZESHY_FILE_DESCRIPTOR_FOR_STANDARD_OUTPUT_OF_TEST
#   ${ZESHY_STDOUT_FILE_DESCRIPTOR}

#       tested_function_name="$(remove_prefix "${test_function_name}")"
    #FUXME: Replace with call to glob function returning match group, if found.
    # If the passed glob is prefixed by a substring of alphanumeric characters
    # (e.g., substring "test_zeshy_" of glob "test_zeshy_*"), store such prefix
    # for use below.
#   string test_function_name_prefix
#   is "${ZESHY_UNIT_TEST_FUNCTIONS_MATCHING_GLOB}" == ([[:alnum:]]##)* si and {
#       test_function_name_prefix="${match[1]}"
#   }

#FUXME: Add a new "zeshy/test" file defining Zeshy unit tests leveraging
#functions defined below, with top-level test_zeshy() function calling all such
#unit tests. Each such unit test should itself be encapsulated by a single...
#actually, that strikes me as horribly heavy-weight. Let's go with the
#following:

    #FUXME: Prints all function names matching such glob, newline-delimited. Use
    #this to collect the set of all functions to be run into a list. Perhaps use
    #the split_string_lines_to_list() function. Also, this one-liner is
    #exceedingly useful; split into a new function:
    #set_list_to_function_matches()
#   typeset -fm '+' "${glob}"
