#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *unit test passers* (i.e., functions passing unit tests satisfying
caller-defined conditions).
/---

# ....................{ PASSERS ~ status                   }....................
#FIXME: Insufficient. After close examination of zsh's "ztst" framework, *EVERY*
#low-level passer and failer function *MUST* require the caller pass an integer
#status, stdout string, and stderr string to be matched. That said, higher-level
#passer and failer functions may default either of the latter to to the empty
#string, in which case such test succeeds only if the underlying function to be
#tested printed no output to such file descriptor. Given this, functions testing
#*ONLY* status (as below) should be slightly renamed: e.g., from
#pass_test_if_code_succeeds:() to pass_test_if_code_succeeds_silent:().

declare_function_with_stdin <<'/---'
void pass_test_if_code_succeeds:(string code1, ...)

Successfully pass the current unit test if the passed code *succeeds* (i.e.,
reports zero exit status).
/---
function pass_test_if_code_succeeds:() {
    # Validate sanity.
    die_unless_args 'Expected one or more shell words.'

    #FIXME: First, we need some means of acquiring the unit test function name.
    #How 'bout a simple walk up the call stack from this function to the nearest
    #parent function matching "(unit_)#test_*". Ah! No; I get it. The
    #unit_test_functions_matching() function should store the passed glob to a
    #temporary global (destroyed at the end of such function) -- say,
    #${ZESHY_UNIT_TEST_FUNCTIONS_MATCHING_GLOB}. Actually, to make life safe and
    #simple, destroy **ALL** globals matching "ZESHY_UNIT_TEST_*" at the end of
    #such function. Then, this function should test each function name up the
    #call stack against such glob. Incredibly simple, actually.

    # Run such command.
    if { run_code "${@}" } {
    } else {
    }
}

declare_function_with_stdin <<'/---'
void pass_test_if_code_fails:(string code1, ...)

Successfully pass the current unit test if the passed code fails with the
conventional failure exit status ${ZESHY_STATUS_FAILURE}.
/---
function pass_test_if_code_fails:() {
}

declare_function_with_stdin <<'/---'
void pass_test_if_code_fails_with_status:(string code1, ..., integer exit_status)

Successfully pass the current unit test if the passed code fails with the passed
nonzero exit status.
/---
function pass_test_if_code_fails_with_status:() {
}

# ....................{ PASSERS ~ status, stdout           }....................
# ....................{ PASSERS ~ status, stderr           }....................
# ....................{ FAILERS                            }....................

# --------------------( WASTELANDS                         )--------------------
