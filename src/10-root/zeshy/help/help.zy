#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`zeshy` help documentation.
/---

#FIXME: Naturally, AsciiDoc will be an only optional dependency for users
#attempting to build the documentation. If not installed, we'll just display
#function documentation as is when a user runs "help function". If installed,
#we'll probably want to pipe function documentation dynamically through either
#the ASCII or man page exporters. (Sweeeeeet, no?)
#FIXME: Source code highlighting is simple. Just write:
#
#    [source,bash]
#    ----
#    INSERT CODE HERE
#    ----
#
#Sadly, neither Pygments or other less popular alternatives support zsh yet.
#Hence, "bash" suffices. Then, we want to selectively prefer "pygments" where
#available. To do so, we'll need to output the following at the very top of each
#AsciiDoc document we send to "asciidoc":
#
#    8<---------------
#    = Title
#    :source-highlighter: pygments
#
#This is an AsciiDoc header instructing "asciidoc" to prefer the "pygments"
#backend for the [source] filter. For further details, see:
#    https://groups.google.com/forum/?fromgroups=#!topic/asciidoc/ReIM4z-zi9I
#FIXME: Avoid repetition. In particular, replace "[source,bash]" with simply
#"[source]" everywhere by setting the default "language" in the AsciiDoc
#document header, like so:
#
#    :language: bash
#
#The same style can be extended to set default table attributes as follows:
#
#    :grid:  none
#    :frame: topbot

#FIXME: See related comment containing the sentence
#"How does segregating such setters to such digest help us?" in
#@{00-declare/10-function}, providing an additional important optimization to
#the excellent technique documented above. (Basically, define *ALL* such
#functions as setters segregated to a documentation-specific digest file. Cool!
#Such digest then in effect becomes an on-disk, read-only map for documentation.)

#FIXME: O.K.; help strings should be documented in zsh's built-in run-help
#format, printed by typing <Esc-h>. This appears to involve "perl", but I can't
#quite be sure yet. See the preamble for "man zshcontrib." O.K.; there's a perl
#script at "/usr/share/zsh/5.0.0/Util/helpfiles" run like so:
#      man zshbuiltins | colcrt - | helpfiles
#That (somehow) splits apart the manpage subsection specific to each zsh builtin
#into a help file for such builtin subsequently accessed when typing <Esc-h>.
#Interestingly, <Esc-h> is bound by default in the ZLE to run a function
#run-help(). So, replacing such function with a Zeshy-specific function suffices
#to implement such help. The perl script above provides a helpful default
#implementation for such function. It'd be nice to redefine this script as
#pure-Zeshy, honestly. It's not terribly heavy-weight: only about 100 lines of
#genuine line parsing code, all readily Zeshifiable. Since speed is not an issue
#(we only need to slurp "man zshbuiltins" once on every zsh update -- right; so,
#we'll need a bit of caching, I suppose), it's !very doable.
#FIXME: Hmm; scratch that. For the moment, just rely on "helpfiles". We'll still
#need to implement caching ourselves, but that's no worry.
#FIXME: Woops! Obviously, <Esc-h> doesn't work under Vi[M] emulation. We can
#still test it as root, but... Hmm. We'll need to selectively redefine such
#binding under such emulation. *sigh*
#FIXME: O.K.; I'd love to implement this, but it's all a bit heavy for the
#moment. Just push on ahead with the current implementation, keeping in mind
#that it would be helpful to eventually support run-help().
#FIXME: However, I'll note that this is all a bit overkill, for the moment. We'd
#need to rewrite documentation in the "man" nroff format... hmm; wait. No; no
#documentation-rewriting required. The sample run-help() function above simply
#invokes "more" on individual files. Frankly, both "man" and "info" suck, so I'm
#disinclined to want to format documentation in their formats.  Fortunately, it
#looks like we won't need to!

# ....................{ PRINTERS                           }....................
#FIXME: Define print_alias_documentation() and print_global_documentation().
:func.doc <<'/---'
string print_function_documentation(string function_name)

Print documentation for the passed function . If no previous call to
declare_function() defined such documentation, throw an exception.
/---
#FIXME: Actually implement me!
function print_function_documentation() {
    # O.K.; this works. I have no idea how fast it is, of course... but then, we
    # shouldn't really *NEED* this to be obscenely fast, because we only need this
    # when converting documentation to some human-readable format, which really
    # shouldn't happen terribly often.
    #
    # Note that the PCRE contains a placeholder empty match "()". This efficiently
    # works around a subtle PCRE or zsh bug: all optional capture groups except the
    # last are assigned an array value. The last such group if not matched, however,
    # is assigned no array value. Adding a placeholder match forces such group to
    # always be assigned an array value as well. *sigh*
    #
    # Note this is *OVERKILL* for every other list. For every other list, after
    # matching the entire list as a string simply compact delimiters down via
    #      string_list="${string_list//[[:space:]]#,[[:space:]]#/,}"
    # and then simply split such string on commas with
    #      list values; list=( "${(s:,:)string_list}" )
    # Very efficient. No need for manual iteration, unlike here. The above approach
    # doesn't work here, of course, due to the possibility of quote-embedded commas.
    #
    # Note also that we *MUST* segregate the parsing of documentation from the
    # handling of parsed data structures. We've accomplished this nicely here via
    # data structures; just make sure we do so elsewhere. The idea is to handle such
    # data structures after parsing in a manner corresponding to output requirements
    # (e.g., ANSI, PDF, HTML). Note that newlines must somehow be preserved when
    # outputting to terminals; this probably isn't *TOO* hard. Or...maybe it is. *sigh*
    # Hmm. We want to preserve *ALL* whitespace when outputting to terminals, actually.
    # That, or we need to handle wrapping manually (which might be a better idea, really).
    # The wrapping rules should be pretty deterministic, so, heck, why not? The alternative
    # (preserving whitespace) is a wicked problem, and I really can't be bothered.

    #local argstring='(integer siphon, character funnel, boolean testm)'
    #local argstring='(integer siphon="y,m", character funnel, boolean testm="ugh,)")'
    :str regex_arg='([-_[:alnum:]]++)\s++([-_[:alnum:]]++)(?:\s*+=\s*+"([^"]*+)")?'
    :str regex_comma='\s*+,\s*+'
    :str regex_args='^\(((?:'${regex_arg}${regex_comma}')*)'${regex_arg}'(?:'${regex_comma}')?\)()$'

    # List of parsed arguments, each argument comprising three elements of such
    # list: the argument's type, name, and default value (or empty string if no
    # such value).
    :list args

    # List of the last parsed argument.
    :list args_last

    # Parse the last argument and capture the string of all arguments preceding
    # such argument, to be parsed iteratively below.
    if :is "${argstring}" =~ ${~regex_args} :si {
        for ((match_index=1; match_index <= ${#match}; ++match_index)) {
            print "match ${match_index}: ${match[${match_index}]}"
        }

        # Record the last parsed argument before overwriting ${match} below.
        args_last=( "${match[-4]}" "${match[-3]}" "${match[-2]}" )

    #   print "match: ${match[1]}"

        # Regex parsing a single argument followed by a similar placeholder group.
        pcre_compile "${regex_arg}${regex_comma}()"
        pcre_study

        # Iteratively parse all arguments preceding the last.
        :str args_sans_last="${match[1]}"
        :int match_set_index=0
        :str ZPCRE_OP='0 0'
        while { pcre_match -b -n ${ZPCRE_OP[(w)2]} -- "${args_sans_last}" } {
            print "match set ${match_set_index}:"
            for ((match_index=1; match_index <= ${#match}; ++match_index)) {
                print "match ${match_index}: ${match[${match_index}]}"
            }
            ((++match_set_index))

            # Record the current parsed argument before overwriting ${match} above.
            args+=( "${match[1]}" "${match[2]}" "${match[3]}" )
        }

        # At this point, ${args} and ${args_last} contain the desired strings.
        # Great!
        print "args: ${args[@]}"
        print "args (last): ${args_last[@]}"
        print "proof:"
        for ((match_index=1; match_index <= ${#args}; ++match_index)) {
            print "arg ${match_index}: ${args[${match_index}]}"
        }
    }
}

#FIXME: Actually, it'd be great to accept general object names: which is to say,
#*ALSO* accept global variable names. We document such variables and hence
#should expose such documentation via the same interface here. While runnables
#and variables occupy different zsh namespaces and hence could theoretically
#collide, no Zeshy runnables share the same name as a Zeshy variable; hence,
#searching for both is unambiguous here. That said, third-party Zeshy plugins
#could theoretically define poorly named runnables or variables contravening
#such standardization; so, conceivably we should search for and page both, much
#as we currently do for ebuild names and description.

:func.doc <<'/---'
string print_zeshy_help(string runnable_name)

Print help documentation for the passed Zeshy-specific runnable (i.e., Zeshy
alias or function).
/---
function print_zeshy_help() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one runnable name'
    :str\
        runnable_name="${1}" script_filename script_text\
        newline line_glob help_text
    die_unless_zeshy_runnable "${runnable_name}"

    # Get the absolute path of the Zeshy component defining such runnable.
    script_filename="$(get_zeshy_script_defining_runnable "${runnable_name}")"

    # Get the text contents of such component.
    script_text="$(get_file_text "${script_filename}")"

    # Newline character, abbreviated for ease of use.
    newline="${ZY_ASCII_NEWLINE}"

    # Glob matching any number of non-newline characters followed by a newline,
    # thus matching the rest of a line.
    line_glob="[^${newline}]#${newline}"

    # If such runnable is a function, collect such function's documentation.
    if { :func.is "${runnable_name}" } {
        if :is "${script_text}" ==\
            *${newline}${newline}('#'${~line_glob})#(#b)('# '[a-z_]##" ${runnable_name}("${~line_glob})(('#'${~line_glob})#)"function ${runnable_name}() {"* :si {
        #FIXME: It'd be *EXCEPTIONALLY* nice to colorize output.
            help_text="${match[1]}${match[2]}"
        } else {
            :die "${runnable_name}() undocumented, unfortunately"
        }
    # Else such runnable is an alias; collect such alias' documentation.
    } else {
        #FIXME: Don't bother implementing me, yet; get function help working
        #first, please.
        :noop
    }

    #FIXME: Strip off substrings matching "^# " and "^#$" from each line. It'd
    #be great to define a new remove_string_line_prefix_matches() function, probably
    #leveraging a new remove_list_prefix_matches() function. Though, wouldn't a
    #slightly simpler remove_string_line_matches() function suffice?

    #FIXME: We should actually page such documentation normalized to the current
    #terminal width. "nroff" should help, no? Be nice to define a utility
    #function implementing repagination: perhaps called "paginate_string", yes?
    # Page such help documentation.
    page_string "${help_text}"
}
