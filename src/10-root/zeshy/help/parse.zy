#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Documentation parsers* (i.e., functions parsing `zeshy`-specific help
strings).
/---

# ....................{ MAIN                               }....................
#FIXME: Nice PCRE, but we don't currently do anything with it. Perhaps
#globalize string local ${pcre_asciidoc} -- say, to ${ZY_ASCIIDOC_PCRE}.

() {
    # Function description. Ignore cross-references embedded in the following
    # AsciiDoc-specific passthrough syntactic constructs, which AsciiDoc and hence
    # zeshy ignores for parsing purposes:
    #
    # * "`"-delimited passthrough quotes.
    # * "pass:["- and "]"-delimited passthrough macros.
    # * "+++"-delimited passthrough macros.
    # * "$$"-delimited passthrough macros.
    # * "\n----"-delimited listing blocks.
    # * "\n...."-delimited literal blocks.
    # * "\n////"-delimited comment blocks.
    # * "\n++++"-delimited passthrough blocks.
    # * "\n[literal]"-prefixed literal paragraphs.
    # * "\n "- and "\n\t"-prefixed literal lines.
    #
    # Ignore cross-references embedded in the following AsciiDoc-specific anchored
    # syntactic constructs, which AsciiDoc anchors for subsequent cross-referencing
    # and hence should not themselves contain cross-references:
    #
    # * "\n."-prefixed block titles.
    :str pcre_asciidoc_quote_backtick='\b`\N*?`\b'
    :str pcre_asciidoc_macro_pass='pass:\[(?:\\\]|\N)*?\]'
    :str pcre_asciidoc_macro_plus='\+\+\+\N*?\+\+\+'
    :str pcre_asciidoc_macro_dollar='\$\$\N*?\$\$'
    :str pcre_asciidoc_block_listing='-{4,}+\n.*?\n-{4,}+'
    :str pcre_asciidoc_block_literal='\.{4,}+\n.*?\n\.{4,}+'
    :str pcre_asciidoc_block_comment='/{4,}+\n.*?\n/{4,}+'
    :str pcre_asciidoc_block_pass='\+{4,}+\n.*?\n\+{4,}+'
    :str pcre_asciidoc_block_title_or_line_literal='(?:\.|[ \t]++)\N+'
    :str pcre_asciidoc_paragraph_literal='^\[literal\]\n.*?(?:\n\n|\Z)'

    #FIXME: Duplicated from "00-declare/00-match/pcre.zy", which is bad.
    :str pcre_operable_name='[a-zA-Z0-9-_]++'

    :str pcre_asciidoc_cross_reference='((?:'${pcre_asciidoc_quote_backtick}'|\b(?:'${pcre_asciidoc_macro_pass}'|'${pcre_asciidoc_macro_plus}'|'${pcre_asciidoc_macro_dollar}')\b|^(?:'${pcre_asciidoc_block_listing}'|'${pcre_asciidoc_block_literal}'|'${pcre_asciidoc_block_comment}'|'${pcre_asciidoc_block_pass}'|'${pcre_asciidoc_block_title_or_line_literal}')$|'${pcre_asciidoc_paragraph_literal}'|.)*?)([$@]\{'${pcre_operable_name}'\}|(?:(alias|func):)?'${pcre_operable_name}'\(\))'
    :str pcre_asciidoc_suffix='(.*)'
    :str pcre_asciidoc='\s*+(.*)'
}

# ....................{ MAKERS                             }....................
:run_hook_on_zeshy_precompile precompile_zeshy_documentation

:func.doc <<'/---'
:void precompile_zeshy_documentation()

Compile help documentation before compiling `zeshy`\'s user digest file but
after sourcing the `zeshy` codebase and hence calling all relevant documentation
functions (e.g., declare_function()). For efficiency, serialize documentation
onto an on-disk key value store mapping alias, global, and function names to
previously declared documentation strings.
/---
function precompile_zeshy_documentation() {
    # Validate sanity.
    die_if_args

    # Make one key-value store for each type namespace.
#   make_key_value_store_dir "${ZY_USER_HELP_FUNCTION_DIR}"

    # Function attributes in both string and list format.
    :str attr attrs_string
    :list attrs

    # For each function documentation string, ...
    :str documentation
    for  documentation ("${ZY_CORE_HELP_FUNCTIONS[@]}") {
#       print "function_name: ${function_name}"
        # Strip prefixing and suffixing whitespace from such documentation.
        # Dismantled, this is:
        #
        # * "//", greedily removing all matched substrings.
        # * "(#s)", matching the start of such string.
        # * "(#e)", matching the end of such string.
        # * "[[:space:]]##", matching one or more whitespace characters.
        documentation="${documentation//((#s)[[:space:]]##|[[:space:]]##(#e))}"

        # If such documentation is prefixed by a function prototype, match the
        # relevant function name from such prototype. zsh permissively allows
        # function name declarations to be quoted and hence contain arbitrary
        # characters, necessitating a more lenient glob expression than liked.
        # Dismantled, this is:
        #
        # * "(#b)", capturing match groups into global list ${match}.
        # * "[[:space:]]#", matching optional whitespace.
        # * "([^'(']##)", matching function attributes into ${match[1]}.
        if :is "${documentation}" == (#b)'{'[[:space:]]#([^'}']#)'}'* :si {
#        (#b)[[:space:]]#[^[:space:]]##[[:space:]]##([^'(']##)'('* ]]; then
#        # Attempt to split such function name on " [or] " delimiters.
#        local    function_name__df="${match[1]}"
#        local -a function_names__df
#        function_names__df=( "${(s: [or] :)function_name__df}" )

            # Eliminate:
            #
            # * Optional whitespace surrounding commas (e.g., from " , " to ",").
            # * Optional trailing whitespace.
            attrs_string="${${match[1]//[[:space:]]#,[[:space:]]#/,}%%[[:space:]]##}"

            # Split the string of function attributes on commas.
            attrs=( "${(s:,:)attrs_string}" )

            # Apply each attribute to such function.
            for attr ("${attrs[@]}") {
                case "${attr}" {
                #FIXME: To set this, we clearly need to parse the list of function
                #names first. Do so above. This implies we really want one giant regular
                #expression *GLOBAL* matching everything in one go. Hopefully, we'll be
                #able to re-use such expression elsewhere (e.g., when producing output
                #documentation).

                # If "globbable", disable filename globbing for all arguments of
                # such function by defining an alias of the same name prefixing
                # such function by "noglob".
                globbable) ;;
#                   alias ${function_name}="noglob ${function_name}"
                *) print "function attribute \"${attr}\" unrecognized" 1>&2
                }
            }
        }
    }
}
