#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `zeshy` debug functionality.
/---

# ....................{ STARTERS                           }....................
# To ensure this function is called at the earliest available time, parcel
# "compile" itself registers this function as a startup hook, relieving us of
# the dubious duty.

:func.doc <<'/---'
void startup_zeshy_sanity()

Perform debug-specific sanity checks early in `zeshy` startup. Such checks throw
exceptions on aberrant insanity (e.g., the absence of core `zeshy` aliases,
functions, or globals), ensuring a sane working environment for subsequent
`zeshy` startup hooks and functionality.
/---
function startup_zeshy_sanity() {
    # Validate argument sanity.
    die_if_args

    # Test one prominent zeshy global for each of the five core types. For
    # coarseness, such globals should ideally derive from a variety of sources
    # (e.g., user configuration files).
    :Str.die_unless  ZESHY_STATE_STDOUT_PATH
    :Int.die_unless ZESHY_BOOLEAN_TRUE
    :Str.die_unless  ZESHY_ASCII_NEWLINE
    :List.die_unless    ZESHY_OPTIONS_LS
    :Map.die_unless     ZESHY_STYLE_TO_COLOR

    # Test one prominent normal alias and one prominent global alias. Quote such
    # aliases to prevent their expansion here.
    :die_unless_alias_command 'is_arg'
    die_unless_alias_general 'and'
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Immediately after startup_zeshy() calls startup_zeshy_aliases(), we
    #should call a new function startup_zeshy_sanity() *IF* currently debugging.
    #Such function should throw exceptions if:
    #
    #* A prominent global map is unitialized (e.g., ${ZESHY_STYLE_TO_COLORS}).
    #* A prominent global list is unitialized. (Which to use?)
    #* A prominent global string is unitialized (e.g., ${ZESHY_ASCII_TAB}).
    #* A prominent global alias is unitialized (e.g., and()).
    #* A prominent normal alias is unitialized (e.g., report_status()).
    #
    #This is *VERY* critical to effectively and easily catching regressions.
