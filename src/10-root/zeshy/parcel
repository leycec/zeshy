#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle all parcel functionality not already handled by core parcel @{05-parcel}.
/---

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
string get_parcel()

Get the (possibly nonextant) absolute path uniquely identifying the current
parcel. See :parcel.declare() for further details.
/---
function get_parcel() {
    # Validate passed arguments.
    die_if_args
    return_string "${ZY_PARCEL_NAME}"
}

# --------------------( WASTELANDS                         )--------------------
#Set the current parcel to the previously declared parcel with the passed path
#referring to an existing `zeshy` script. Unless such path refers to an existing
#`zeshy` script associated with a previously declared parcel, an exception is
#thrown. For simplicity, such path may be absolute or relative and contain
#symbolic link components. See :parcel.set() for further details.
#
#== Overlay Replacement ==
#
#All `zeshy` scripts reside in one of two overlays:
#
#* ${ZY_OVERLAY_DIR}, the system-wide directory containing officially bundled
#  `zeshy` scripts.
#* ${ZY_USER_OVERLAY_DIR}, the user-specific directory containing third-party
#  `zeshy` scripts.
#
#In either case, such paths are system-specific. For portability, this function
#replaces system-specific paths in parcel names with the following system-
#agnostic labels (in URI scheme format):
#
#* `zeshy://`, for scripts residing in ${ZY_OVERLAY_DIR}.
#* `zeshy.user://`, for scripts residing in ${ZY_USER_OVERLAY_DIR}.
#
#For example:
#
#.:parcel.set_to_path()
#==========================================
#[source]
#------------------------------------------
#>>> :parcel.set_to_path "${ZY_OVERLAY_DIR}/is_pathable/mutt"
#>>> get_parcel
#zeshy://is_pathable/mutt
#>>> :parcel.set_to_path "${ZY_USER_OVERLAY_DIR}/is_pathable/awesome"
#>>> get_parcel
#user://is_pathable/awesome
#------------------------------------------
#==========================================
#/---
#function :parcel.set_to_path() {
#    # Validate passed arguments.
#    (( # == 1 )) || :die 'expected one script name'
#    local script_name="${1}" parcel_name
#    [[ -f "${script_name}" ]] || :die "\"${script_name}\" not a zeshy script"
#
#    # Set the current parcel to such the absolute path of such script,
#    # canonicalized to avoid ambiguity when cross-referencing parcels. See
#    # :path.canonicalize() for further details.
#    parcel_name="$(print -r -- "${script_name}"(:A))"
#
#    # Replace system-specific overlay prefixes with system-agnostic labels.
#    # Note the lack of an "else" branch in the logic below. If such parcel is a
#    # symbolic link to a script physically residing outside of a zeshy overlay,
#    # both of the branches below fail. This is hardly ideal (due to portability
#    # issues) but currently ignorable. Since most parcels reside in the system-
#    # wide overlay, attempt to match such overlay first. Dismantled, this is:
#    #
#    # * "(#b)(*)", matching the fragment of such path following the unmatched
#    #   directory of the overlay containing such path into ${match[1]}.
#        if [[ parcel_name == "${ZY_OVERLAY_DIR}"(#b)(*) ]] {
#        parcel_name="zeshy://${match[1]}"
#    } elif [[ parcel_name == "${ZY_USER_OVERLAY_DIR}"(#b)(*) ]] {
#        parcel_name="zeshy.user://${match[1]}"
#    }
#
#    # If such parcel does not exist, throw an exception.
#    die_unless_parcel "${parcel_name}"
#
#    # Else, set the current parcel to such parcel.
#    ZY_PARCEL_NAME="${parcel_name}"
#}

#If such path is _not_ that of a previously declared parcel, an
#exception is thrown. 
#All subsequently declared aliases,
#globals, and functions will be assigned to such parcel. 
#Such parcel abstractly contains all subsequently declared aliases, globals, and functions.
#See :path.canonicalize() for further
    # details. For efficiency, avoid calling :parcel.set().
#   ZY_PARCEL_NAME="$(:str.output "${script_name}"(:A))"
