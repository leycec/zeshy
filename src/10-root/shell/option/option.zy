#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *shell options* (i.e., shell properties set and unset by calling such
builtins as set(), setopt(), and unseptopt()).

== See Also ==

* `man zshoptions`, listing all available shell options.
/---

#FIXME: Rename _shell to _zsh everywhere below. (Yes; I've given it quite a
#ponderous weight of consideration...and, well, it only makes sense.)
#FIXME: Actually, the far better solution is to simply drop "_shell" from *ALL*
#function names. I know, it initially sounds drastic. But consider the
#nomenclature. :is_shell_option() suggests a function accepting two arguments, a
#shell name (e.g., "bash") and an option name (e.g., "login"), returning success
#if such shell supports such option and failure otherwise. That's a pretty
#intense function, and we certainly don't support anything quite so generalized.
#(Nor would we reasonably ever, really.) Moreover, in the case of this parcel,
#"option" is the fundamental noun -- not "shell". Indeed, we don't prefix
#"function" or "alias" with "shell". So why do it here? It's highly
#nonorthogonal, overly verbose, and plainly redundant. So drop it *EVERYWHERE*.
#No function referring to the current shell need ever explicitly specify that
#with the word "_shell" -- else, nearly every function would have such
#specification. (Which would serve very little purpose, really.)

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_option(
    string option_name,
    string error_message = "Shell option \"${option_name}\" unrecognized.")

Throw an exception with the passed message unless the passed `zsh` option is
supported under the current shell. See :is_shell_option() for further details.
/---
function :die_unless_option() {
    die_unless_args_1_to_2\
        'Expected one option name and optional error message.'
    :str option_name="${1}"
    :is_shell_option "${option_name}" or
        :die "${2-Shell option \"${option_name}\" unrecognized.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_shell_option(string option_name1, ...)

Report success if all passed `zsh` options are supported under the current
shell: e.g.,

.:is_shell_option()
==========================================
[source]
------------------------------------------
>>> :str on_good_nature=\
...    "Good nature is, of all moral qualities, the one that the world needs
...     most, and good nature is the result of ease and security, not of a life
...     of arduous struggle. Modern methods of production have given us the
...     possibility of ease and security for all; we have chosen, instead, to
...     have overwork for some and starvation for the others. Hitherto we have
...     continued to be as energetic as we were before there were machines; in
...     this we have been foolish, but there is no reason to go on being foolish
...     for ever."
>>> :is_shell_option privileged :and get_string_line "${on_good_nature}" 1
Good nature is, of all moral qualities, the one that the world needs
------------------------------------------
==========================================
/---
function :is_shell_option() {
    # Test such option. Technically, this is also testable with the following
    # cumbersome block:
    #
    #     string output
    #     if { output="$(is -o "${option_name}" si 2>&1)" } {
    #         :success.report
    #     } else {
    #         :str.is_empty "${output}" and :status.report_last
    #     }
    #
    # The previous implementation for this function resembled:
    #
    #     run_code_silent set +o local_options "${option_name}"
    #
    # While a clever solution, such implementation subtly fails when passed
    # options "privileged" or "restricted". As "man zshoptions" documents, the
    # option "local_options" localizes all options *EXCEPT* "privileged" or
    # "restricted", which remain unexpectedly globally set. Instead, note
    # "is -o ${option_name} si" always returns in one of three possible ways:
    #
    # * When passed a valid option name currently enabled, such command prints
    #   nothing and returns zero exit status.
    # * When passed a valid option name currently disabled, such command prints
    #   nothing and returns non-zero exit status.
    # * When passed an invalid option name, such command prints
    #   ":is_shell_option:2: no such option: ${option_name}" to standard error
    #   and returns non-zero exit status.
    #
    # Consequently, a shell option exists when such command either returns zero
    # exit status or prints nothing.
    die_unless_args 'Expected one or more option names.'
    :map.is_key options "${@}"
}

:func.doc <<'/---'
[status: bool] :is_shell_option_enabled(string option_name)

Report success if the passed `zsh` option is enabled in the current shell: e.g.,

.:is_shell_option_enabled()
==========================================
[source]
------------------------------------------
>>> :str on_uncertified_lunacy=\
...    "Men who allow their love of power to give them a distorted view of the
...     world are to be found in every asylum: one man will think he is Governor
...     of the Bank of England, another will think he is the King, and yet
...     another will think he is God. Highly similar delusions, if expressed by
...     educated men in obscure language, lead to professorships in philosophy;
...     and if expressed by emotional men in eloquent language, lead to
...     dictatorships. Certified lunatics are shut up because of the proneness
...     to violence when their pretensions are questioned; the uncertified
...     variety are given control of powerful armies, and can inflict death and
...     disaster upon all sane men within their reach."
>>> :is_shell_option_enabled alias and
...     get_string_line "${on_uncertified_lunacy}" 1
Men who allow their love of power to give them a distorted view of the
------------------------------------------
==========================================
/---
function :is_shell_option_enabled() {
    die_unless_arg 'Expected one option name.'
    :str option_name=${1}
    :die_unless_option "${option_name}"

    # Test such option. Note this to also be implementable with slightly less
    # efficient map lookup: e.g.,
    #
    #     is "${options[${option_name}]" == 'on' si
    :is -o "${option_name}" :si
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :option.States_as_chars(:Str states_name)

Set the string variable with the passed name to the subset of all currently
enabled shell options assigned a unique character (e.g., `m`, assigned the state
of the `monitor` shell option) as an undelimited string of such characters.

== Examples ==

.:option.States_as_chars()
==========================================
[source]
------------------------------------------
>>> :str states
>>> :option.States_as_chars states
>>> :stdout.echo ${states}
4679CEGHJNRXZgikmsu
>>> disable_shell_option monitor
>>> :option.States_as_chars states
>>> :stdout.echo ${states}
4679CEGHJNRXZgiksu
------------------------------------------
==========================================
/---
function :option.States_as_chars() {
    (( # == 1 )) || :die 'Expected one string name.'
    :Str.set "${1}" "${-}"
}

# ....................{ INVERTERS                          }....................
# Note :option.enable() and :option.disable() are implemented as aliases rather
# than functions. See the "Caveats" below for the reason why.

#FIXME: This function should also be implemented as an alias. However, we can't
#reliably do so until we implement multi-argument alias support.

:func.doc <<'/---'
void :invert_option(string option_name1, ...)

Globally invert all passed `zsh` options in the current shell. For each such
option, if such option is:

* Currently enabled, disable such option.
* Currently disabled, enable such option.

== Caveats ==

*This runnable is implemented as a function rather than alias and hence _cannot_
invert `zsh` options specific to the current context (e.g., `local_options`,
`local_patterns`, `local_traps`).
/---
function :invert_option() {
    die_unless_args 'Expected one or more option names.'

    # Invert such arguments.
    :str option_name
    for  option_name ("${@}") {
        :die_unless_option "${option_name}"

        if :is ${options[${option_name}]} == 'on' :si {
            options[${option_name}]='off'
        } else {
            options[${option_name}]='on'
        }
    }
}
