#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *option-based shell states* (i.e., boolean states globally applicable to
the current shell, exposed by `zsh` as read-only shell options).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_shell_interactive(
    string error_message = "Current shell non-interactive.")

Throw an exception with the passed message unless the current shell is
interactive. See :shell.is_interactive() for more details.
/---
function die_unless_shell_interactive() {
    die_unless_args_0_to_1 'Expected optional error message.'
    :shell.is_interactive or :die "${1:-Current shell non-interactive.}"
}

:func.doc <<'/---'
void die_unless_shell_login(
    string error_message = "Current shell not a login shell.")

Throw an exception with the passed message unless the current shell is a login
shell. See is_shell_login() for more details.
/---
function die_unless_shell_login() {
    die_unless_args_0_to_1 'Expected optional error message.'
    is_shell_login or :die "${1:-Current shell not a login shell.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :shell.is_interactive()

Report success if standard input to the current shell _was_ attached to a
terminal device on initial execution of such shell. When testing whether
standard input to the current shell is _currently_ attached to a terminal
device, consider calling :is_stdin_terminal() instead. Standard input to the
current shell could have been initially attached to a terminal device but since
closed, in which case relying on this function's exit status would be erroneous.
/---
function :shell.is_interactive() {
    # Avoid running "is_shell_option_enabled interactive". While correct, such
    # command is somewhat slower than merely testing this option directly. While
    # zeshy typically ignores such efficiency concerns, this function is called
    # frequently enough to warrant minor optimizations.
    die_if_args
    is -o interactive si
}

:func.doc <<'/---'
[status: bool] is_shell_login()

Report success if the first argument passed to the current shell was `-'. The
startup process running the `login` command typically passes such argument to
startup shells on successful login.
/---
function is_shell_login() {
    die_if_args
    is -o login si
}

# --------------------( WASTELANDS                         )--------------------
