#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`zsh` parameter expansion.
/---

# ....................{ GLOBALS                            }....................
:listset.global ZY_EXPANSION_TOKENS <<'/---'
List of all possible parameter expansion tokens.

== See Also ==

* :set_char_to_string_expansion_token_if_found().
/---
ZY_EXPANSION_TOKENS=(
    ',' '.' ';' ':' '~' '`' "'" '"' '=' '+' '@'
    '#' '$' '%' '^' '&' '*' '-' '_' '\' '|' '/' '?'
)

# ....................{ SETTERS                            }....................
#FIXME: Add examples.

:func.doc <<'/---'
:void :set_char_to_string_expansion_token(:Char char_name +:str texts)

Set the character variable with the passed name to an arbitrary parameter
expansion token suitable for use with the passed string(s) if this token exists
or throw an exception otherwise.

== See Also ==

* :set_char_to_string_expansion_token_if_found().
/---
function :set_char_to_string_expansion_token() {
    :set_char_to_string_expansion_token_if_found "${@}" :or :die\
        "String \"${*[2,-1]}\" contains all possible parameter expansion tokens."
}


:func.doc <<'/---'
[status=:bool] :set_char_to_string_expansion_token_if_found(
    :Char char_name +:str texts)

Set the passed character variable to an arbitrary parameter expansion token
suitable for use with the passed string(s) if this token exists (i.e., if these
string(s) do _not_ contain all possible tokens) _or_ report failure otherwise.

This token is guaranteed to be a punctuation character in
${ZY_EXPANSION_TOKENS}, which `zsh` permits to delimit parameter
expansion flag arguments (e.g., the `:` in `${(j:canticle:)for_leibowitz}`).
These tokens are typically expanded in eval() statements.

== Examples ==

.:set_char_to_string_expansion_token_if_found()
==========================================
[source]
------------------------------------------
>>> :str token on_salvation="
... The hostilities between Christianity and contemporary atheism, like
... those between Christianity and Islam, are thus expressions of something
... like sibling rivalry. Salvation from the natural world and the human
... condition remains the core premise (and thus also the most important
... promise) of all these faiths, whether that salvation takes the
... supernatural form of resurrection followed by eternal life in heaven, on
... the one hand, or the allegedly more natural form of limitless progress,
... the conquest of poverty, illness, and death, and the great leap outwards
... to an endless future among the stars."
>>> :set_char_to_string_expansion_token_if_found\
...     "${on_salvation} ,:.;~\`'\"=+@#\$%^&*-_\\|/?" :or :stdout.echo\
...     "Civil religions are derivative, even parasitic, on theist religions."
Civil religions are derivative, even parasitic, on theist religions.
------------------------------------------
==========================================
/---
function :set_char_to_string_expansion_token_if_found() {
    die_unless_args_2_or_more\
        'Expected one character name and one or more strings.'
    :str char_name__sctspetif="${1}" text__sctspetif="${*[2,-1]}"

    # List sets guarantee uniqueness, as required by the algorithm below.
    :listset text_chars__sctspetif tokens_free__sctspetif

    # To efficiently find the first such token not already in such string:
    #
    # * Split such string on characters into a list set, thus containing each
    #   unique character of such delimiter in arbitrary order.
    # * Difference ${ZY_EXPANSION_TOKENS}, a list set containing
    #   each possible such token as a list element, from the prior list set into
    #   a third list set, containing each possible token not in such string.
    # * Arbitrarily return the first element of such set.
    #
    # Such algorithm is considerably more efficient than iteratively finding
    # such token. In any case, the prior optimization *SHOULD* catch most cases.

    # List set of all unique characters in this string.
    :str.Chars "${text__sctspetif}" text_chars__sctspetif 

    # List set of all parameter expansion tokens *NOT* in this string.
    :List.Difference\
        tokens_free__sctspetif\
        ZY_EXPANSION_TOKENS\
        text_chars__sctspetif

    # If this string does *NOT* contain at least one such token, set this
    # character to the first such token; else, report failure.
    :List.is_nonempty tokens_free__sctspetif :and :set_char_to_char\
        "${char_name__sctspetif}" "${tokens_free__sctspetif[1]}"
}

#FIXME: In lieu of unit tests...
#function bobo() {
#    character token
#    :set_char_to_string_expansion_token token\
#        ",:.;~\`'\"=+@#\$%^&*-_\\|/"
#    :stdout.echo "token: ${token}"
#    :set_char_to_string_expansion_token token\
#        ",:.;~\`'\"=+@#\$%^&*-_\\|/?"
#    :stdout.echo "token: ${token}"
#}
