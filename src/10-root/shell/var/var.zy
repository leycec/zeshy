#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`zsh` variable syntax.

== See Also ==

* http://stackoverflow.com/questions/2821043/allowed-characters-in-linux-environment-variable-names[Variable syntax, complete with citations].
/---

# ....................{ GLOBALS                            }....................
:str.global ZY_ZSH_GLOBAL_NAMES_GLOB='(REPLY|MATCH|MBEGIN|MEND|match|mbegin|mend|(chpwd|preexec)_functions)' <<'/---'
Glob matching the names of all *canonical `zsh`-specific globals* (i.e.,
globals declared and hence effectively owned by `zsh` itself).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :die_unless_var_name(
    :str variable_name
    ?:str error_message='Variable name "${variable_name}" invalid.')

Throw an exception with the passed message unless the passed `zsh` variable name
is syntactically valid.

== See Also ==

* :is_var_name().
/---
function :die_unless_var_name() {
    die_unless_args_1_to_2\
        'Expected one variable name and optional error message.'
    :str variable_name="${1}"
    :is_var_name "${variable_name}" :or
        :die "${2-Variable name \"${variable_name}\" invalid.}"
}


:func.doc <<'/---'
:void :die_unless_var_names(+:str variable_names)

Throw an exception with a stock message unless all passed `zsh` variable names
are syntactically valid.

== See Also ==

* :is_var_name().
/---
function :die_unless_var_names() {
    die_unless_args 'Expected one or more variable names.'

    # Test these names. For efficiency, inline these tests.
    :str variable_name
    for  variable_name ("${@}") {
        :is_var_name "${variable_name}" :or
            :die_unless_var_name "${variable_name}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_var_name(:str name)

Report success if the passed string is a syntactically valid `zsh` variable
name.

== Examples ==

.:is_var_name()
==========================================
[source]
------------------------------------------
>>> :str on_maladjustment="
... There are certain things in our nation and in the world [to] which I am
... proud to be maladjusted... I say very honestly that I never intend to
... become adjusted to segregation and discrimination. I never intend to
... become adjusted to religious bigotry. I never intend to adjust myself to
... economic conditions that will take necessities from the many to give
... luxuries to the few [and] leave millions of God's children smothering
... in an airtight cage of poverty in the midst of an affluent society. I
... never intend to adjust myself to the madness of militarism, to self-
... defeating effects of physical violence. But in a day when sputniks and
... explorers are dashing through outer space and guided ballistic missiles
... are carving highways of death through the stratosphere, no nation can
... win a war. It is no longer the choice between violence and nonviolence.
... It is either nonviolence or nonexistence."
>>> :is_var_name "MKULTRA!?" :and :stdout.echo "${on_maladjustment}"
>>> :is_var_name "COINTELPRO" :or :stdout.echo "${on_maladjustment}"
------------------------------------------
==========================================
/---
function :is_var_name() {
    die_unless_arg 'Expected one string.'
    :is ${1} =~ ${ZY_VAR_NAME_PCRE} :si 
}


:func.doc <<'/---'
[status=:bool] :is_var_definition(:str definition)

Report success if the passed string is a syntactically valid `zsh` variable
definition.

== Examples ==

.:is_var_definition()
==========================================
[source]
------------------------------------------
>>> :str on_endurance="
... To our most bitter opponents we say: \"We shall match your capacity to
... inflict suffering by our capacity to endure suffering. We shall meet
... your physical force with soul force. Do to us what you will, and we
... shall continue to love you. We cannot in all good conscience obey your
... unjust laws because noncooperation with evil is as much a moral
... obligation as is cooperation with good. Throw us in jail and we shall
... still love you. Bomb our homes and threaten our children, and we shall
... still love you. Send your hooded perpetrators of violence into our
... community at the midnight hour and beat us and leave us half-dead, and
... we shall still love you. But be ye assured that we will wear you down by
... our capacity to suffer. One day we shall win freedom but not only for
... ourselves. We shall so appeal to your heart and conscience that we shall
... win you in the process and our victory will be a double victory.\""
>>> :is_var_definition "FALSE=flag " :or :stdout.echo "${on_endurance}"
>>> :is_var_definition "BLACK!flag" :and :stdout.echo "${on_endurance}"
------------------------------------------
==========================================
/---
function :is_var_definition() {
    die_unless_arg 'Expected one string.'
    :is ${1} =~ ${ZY_VAR_NAME_PCRE}'=.*+' :si
}
