#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`zsh` variable syntax.

== See Also ==

* http://stackoverflow.com/questions/2821043/allowed-characters-in-linux-environment-variable-names[Variable syntax, complete with citations].
/---

# ....................{ GLOBALS                            }....................
:str.global ZY_ZSH_GLOBAL_NAMES_GLOB='(REPLY|MATCH|MBEGIN|MEND|match|mbegin|mend|(chpwd|preexec)_functions)' <<'/---'
Glob matching the names of all *canonical `zsh`-specific globals* (i.e.,
globals declared and hence effectively owned by `zsh` itself).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :die_unless_var_name(
    :str variable_name
    ?:str error_message='Variable name "${variable_name}" invalid.')

Throw an exception with the passed message unless the passed `zsh` variable name
is syntactically valid.

== See Also ==

* :var_name.is().
/---
function :die_unless_var_name() {
    die_unless_args_1_to_2\
        'Expected one variable name and optional error message.'
    :str variable_name="${1}"
    :var_name.is "${variable_name}" :or
        :die "${2-Variable name \"${variable_name}\" invalid.}"
}


:func.doc <<'/---'
:void :die_unless_var_names(+:str variable_names)

Throw an exception with a stock message unless all passed `zsh` variable names
are syntactically valid.

== See Also ==

* :var_name.is().
/---
function :die_unless_var_names() {
    die_unless_args 'Expected one or more variable names.'

    # Test these names.
    :str variable_name
    for  variable_name ("${@}") {
        :var_name.is "${variable_name}" :or
            :die_unless_var_name "${variable_name}"
    }
}

# ....................{ TESTERS                            }....................
#FIXME: Extremely inefficient. This implementation currently leverages regular
#expressions, which is extreme overkill for something so simplistic; leverage
#glob expressions instead.
#FIXME: Generalize to accept two or more variable names. When passed two or more
#arguments, this function should be optimized to perform a single non-iterative
#glob expression test on the string produced by concatenating all arguments.
    
:func.doc <<'/---'
[status=:bool] :var_name.is(:str name)

Report success only if the passed string is a syntactically valid `zsh` variable
name.

== Examples ==

.:var_name.is()
==========================================
[source]
------------------------------------------
>>> :str on_maladjustment="
... There are certain things in our nation and in the world [to] which I am
... proud to be maladjusted... I say very honestly that I never intend to
... become adjusted to segregation and discrimination. I never intend to
... become adjusted to religious bigotry. I never intend to adjust myself to
... economic conditions that will take necessities from the many to give
... luxuries to the few [and] leave millions of God's children smothering
... in an airtight cage of poverty in the midst of an affluent society. I
... never intend to adjust myself to the madness of militarism, to self-
... defeating effects of physical violence. But in a day when sputniks and
... explorers are dashing through outer space and guided ballistic missiles
... are carving highways of death through the stratosphere, no nation can
... win a war. It is no longer the choice between violence and nonviolence.
... It is either nonviolence or nonexistence."
>>> :var_name.is "MKULTRA!?" :and :stdout.echo "${on_maladjustment}"
>>> :var_name.is "COINTELPRO" :or :stdout.echo "${on_maladjustment}"
------------------------------------------
==========================================
/---
function :var_name.is() {
    die_unless_arg 'Expected one string.'

    #FIXME: Fundamentally broken. The core issue appears to be that
    #${ZY__VAR_NAME_PCRE} is only defined by
    #zy://..-soil/if_compile/30-macro/00-pcre/20-global.zy and hence accessible
    #*ONLY* during initial digest compilation. Makes sense. To correct this:
    #
    #* Shift the entire zy://..-soil/if_compile/30-macro parcel into the
    #  top-level "tmp/" directory. This parcel is blatantly broken and, frankly,
    #  depressingly shameful. (May its death come swiftly.)
    #* Resurrect the ${ZY_VAR_NAME_GLOB} glob from our archives, privatized to
    #  ${ZY__VAR_NAME_GLOB} for sanity. This glob should probably live at
    #  zy://00-seed/00-declare/00-match/glob.zy. Indeed, that parcel already
    #  appears to define the required glob -- albeit as a purely local variable
    #  named "global_name". So, just globalize that as ${ZY__VAR_NAME_GLOB} and
    #  we should be good to go.
    #* Refactor all references in the codebase to ${ZY__VAR_NAME_PCRE} to
    #  ${ZY__VAR_NAME_GLOB} instead, including here. In theory, this should be
    #  trivially accomplished as follows:
    #
    #    :is ${1} == ${~ZY__VAR_NAME_GLOB} :si 
    :is ${1} =~ ${ZY__VAR_NAME_PCRE} :si 
}

#FIXME: In lieu of unit tests...
function vnis() {
    :var_name.is ouUou :and :stdout.echo 'single ok!'
    :var_name.is ouUou UqkvmoeuU qkBuB :and :stdout.echo 'multiple ok!'
}
