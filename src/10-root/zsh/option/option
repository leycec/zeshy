#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *`zsh` options* (i.e., user-configurable settings specific to the current
shell).

== See Also ==

* `man zshoptions`, listing all available `zsh` options.
/---

#FIXME: Rename _shell to _zsh everywhere below. (Yes; I've given it quite a
#ponderous weight of consideration...and, well, it only makes sense.)
#FIXME: Actually, the far better solution is to simply drop "_shell" from *ALL*
#function names. I know, it initially sounds drastic. But consider the
#nomenclature. :is_shell_option() suggests a function accepting two arguments, a
#shell name (e.g., "bash") and an option name (e.g., "login"), returning success
#if such shell supports such option and failure otherwise. That's a pretty
#intense function, and we certainly don't support anything quite so generalized.
#(Nor would we reasonably ever, really.) Moreover, in the case of this parcel,
#"option" is the fundamental noun -- not "shell". Indeed, we don't prefix
#"function" or "alias" with "shell". So why do it here? It's highly
#nonorthogonal, overly verbose, and plainly redundant. So drop it *EVERYWHERE*.
#No function referring to the current shell need ever explicitly specify that
#with the word "_shell" -- else, nearly every function would have such
#specification. (Which would serve very little purpose, really.)

# ....................{ EXCEPTIONS                         }....................
:func.document <<'/---'
void :die_unless_option(
    string option_name,
    string error_message = "Shell option \"${option_name}\" unrecognized.")

Throw an exception with the passed message unless the passed `zsh` option is
supported under the current shell. See :is_shell_option() for further details.
/---
function :die_unless_option() {
    die_unless_args_1_to_2\
        'Expected one option name and optional error message.'
    :string option_name="${1}"
    :is_shell_option "${option_name}" or
        :die "${2-Shell option \"${option_name}\" unrecognized.}"
}

# ....................{ TESTERS                            }....................
:func.document <<'/---'
[status: bool] :is_shell_option(string option_name1, ...)

Report success if all passed `zsh` options are supported under the current
shell: e.g.,

.:is_shell_option()
==========================================
[source]
------------------------------------------
>>> :string on_good_nature=\
...    "Good nature is, of all moral qualities, the one that the world needs
...     most, and good nature is the result of ease and security, not of a life
...     of arduous struggle. Modern methods of production have given us the
...     possibility of ease and security for all; we have chosen, instead, to
...     have overwork for some and starvation for the others. Hitherto we have
...     continued to be as energetic as we were before there were machines; in
...     this we have been foolish, but there is no reason to go on being foolish
...     for ever."
>>> :is_shell_option privileged and get_string_line "${on_good_nature}" 1
Good nature is, of all moral qualities, the one that the world needs
------------------------------------------
==========================================
/---
function :is_shell_option() {
    # Test such option. Technically, this is also testable with the following
    # cumbersome block:
    #
    #     string output
    #     if { output="$(is -o "${option_name}" si 2>&1)" } {
    #         report_success
    #     } else {
    #         is_string_empty "${output}" and report_status
    #     }
    #
    # The previous implementation for this function resembled:
    #
    #     run_code_silent set +o local_options "${option_name}"
    #
    # While a clever solution, such implementation subtly fails when passed
    # options "privileged" or "restricted". As "man zshoptions" documents, the
    # option "local_options" localizes all options *EXCEPT* "privileged" or
    # "restricted", which remain unexpectedly globally set. Instead, note
    # "is -o ${option_name} si" always returns in one of three possible ways:
    #
    # * When passed a valid option name currently enabled, such command prints
    #   nothing and returns zero exit status.
    # * When passed a valid option name currently disabled, such command prints
    #   nothing and returns non-zero exit status.
    # * When passed an invalid option name, such command prints
    #   ":is_shell_option:2: no such option: ${option_name}" to standard error
    #   and returns non-zero exit status.
    #
    # Consequently, a shell option exists when such command either returns zero
    # exit status or prints nothing.
    die_unless_args 'Expected one or more option names.'
    :map.is_key options "${@}"
}

:func.document <<'/---'
[status: bool] :is_shell_option_enabled(string option_name)

Report success if the passed `zsh` option is enabled in the current shell: e.g.,

.:is_shell_option_enabled()
==========================================
[source]
------------------------------------------
>>> :string on_uncertified_lunacy=\
...    "Men who allow their love of power to give them a distorted view of the
...     world are to be found in every asylum: one man will think he is Governor
...     of the Bank of England, another will think he is the King, and yet
...     another will think he is God. Highly similar delusions, if expressed by
...     educated men in obscure language, lead to professorships in philosophy;
...     and if expressed by emotional men in eloquent language, lead to
...     dictatorships. Certified lunatics are shut up because of the proneness
...     to violence when their pretensions are questioned; the uncertified
...     variety are given control of powerful armies, and can inflict death and
...     disaster upon all sane men within their reach."
>>> :is_shell_option_enabled alias and
...     get_string_line "${on_uncertified_lunacy}" 1
Men who allow their love of power to give them a distorted view of the
------------------------------------------
==========================================
/---
function :is_shell_option_enabled() {
    # Validate sanity.
    die_unless_arg 'Expected one option name.'
    :string option_name="${1}"
    :die_unless_option "${option_name}"

    # Test such option. Note this to also be implementable with slightly less
    # efficient map lookup: e.g.,
    #
    #     is "${options[${option_name}]" == 'on' si
    is -o "${option_name}" si
}

# ....................{ INVERTERS                          }....................
# Note :enable_option() and :disable_option() are implemented as aliases rather
# than functions. See the "Caveats" below for the reason why.

#FIXME: This function should also be implemented as an alias. However, we can't
#reliably do so until we implement multi-argument alias support.

:func.document <<'/---'
void :invert_option(string option_name1, ...)

Globally invert all passed `zsh` options in the current shell. For each such
option, if such option is:

* Currently enabled, disable such option.
* Currently disabled, enable such option.

== Caveats ==

*This runnable is implemented as a function rather than alias and hence _cannot_
invert `zsh` options specific to the current context (e.g., `local_options`,
`local_patterns`, `local_traps`).
/---
function :invert_option() {
    # Validate sanity.
    die_unless_args 'Expected one or more option names.'

    # Invert such arguments.
    :string option_name
    for     option_name ("${@}") {
        :die_unless_option "${option_name}"

        if is ${options[${option_name}]} == 'on' si {
            options[${option_name}]='off'
        } else {
            options[${option_name}]='on'
        }
    }
}

# --------------------( WASTELANDS                         )--------------------
# :func.document <<'/---'
# void enable_shell_options(string option_name1, ...)
# 
# Globally enable all passed options in the current shell.
# /---
# function enable_shell_option() {
#     #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#     # Synchronize changes to disable_shell_option().
#     #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 
#     # Validate sanity.
#     die_unless_args 'Expected one or more option names.'
# 
#     # Enable such options. Technically, this is also implementable as:
#     #
#     #     set -o "${option_name}"
#     #
#     # Since there exists no corresponding command for disabling such options,
#     # however, we adopt the current approach for orthogonality with
#     # disable_shell_option().
#     :string option_name
#     for     option_name ("${@}") {
#         :die_unless_option "${option_name}"
#         options[${option_name}]='on'
#     }
# }
# 
# :func.document <<'/---'
# void disable_shell_option(string option_name1, ...)
# 
# Globally disable all passed options in the current shell. See
# enable_shell_option() for further details.
# /---
# function disable_shell_option() {
#     # See enable_shell_option() for further details.
#     die_unless_args 'Expected one or more option names.'
#     :string option_name
#     for     option_name ("${@}") {
#         :die_unless_option "${option_name}"
#         options[${option_name}]='off'
#     }
# }

    # The current implementation appears more clarid and efficient, however.

# ....................{ GETTERS                            }....................
#FUXME: This is a fairly awkward *AND* intensely complex function. Do we
#earnestly still require it? We should think that map global ${options} suffices
#for most use cases calling this function.
# :func.document <<'/---'
# string get_shell_option_disabled(string option_name)
# 
# Convert the passed `zsh` shell option to disabled form. Specifically, if such
# option is:
# 
# * Enabled (i.e., _not_ prefixed by `no_`), prefix such option by `no_`.
# * Disabled (i.e., prefixed by `no_`), remove such prefix from such option.
# 
# As edge cases, note that options `nomatch` and `notify` are considered enabled
# despite their `no` prefixes: e.g.,
# 
# .get_shell_option_disabled
# ==========================================
# [source]
# ------------------------------------------
# >>> get_shell_option_disabled privelaged
# no_privelaged
# >>> get_shell_option_disabled nomatch
# no_nomatch
# >>> get_shell_option_disabled no_notify
# notify
# ------------------------------------------
# ==========================================
# /---
# function get_shell_option_disabled() {
#     # Validate sanity.
#     die_unless_arg 'Expected one option name.'
#     :string option_name="${1}" is_option_disabled
#     :die_unless_option "${option_name}"
# 
#     # For comparability, lowercase such option and strip out underscores.
#     option_name="$(lowercase_string\
#         $(remove_string_text "${option_name}" '_'))"
# 
#     # If such option is either "nomatch", "notify", "nonomatch", or "nonotify",
#     # perform edge case handling.
#     if { :is_string_matches_glob_grouped\
#         "${option_name}" '(no|)(nomatch|notify)' } {
#         # If such option is disabled, enable such option.
#         if { is_string_nonempty "${match[1]}" } {
#             return_string "${match[2]}"
#         # Else, disable such option.
#         } else {
#             return_string "no_${match[2]}"
#         }
#     # Else, perform default handling.
#     } else {
#         # If such option is disabled, enable such option.
#         string option_name_negated
#         if {   option_name_negated="$(\
#                 get_string_text_matching_glob_group_if_found "${option_name}" 'no(*)')" } {
#             return_string "${option_name_negated}"
#         # Else, disable such option.
#         } else {
#             return_string "no_${option_name}"
#         }
#     }
# }

# ....................{ TESTERS ~ option                   }....................
#FUXME: Reduce to simply aliases.
# :func.document <<'/---'
# [status: bool] is_shell_interactive()
# 
# Report success if standard input to the current shell _was_ attached to a
# terminal device on initial execution of such shell. When testing whether
# standard input to the current shell is _currently_ attached to a terminal
# device, consider calling :is_stdin_terminal() instead. Standard input
# to the current shell could have been initially attached to a terminal device
# but since closed, in which case relying on the return value from this function
# would be problematic.
# /---
# function is_shell_interactive() {
#     # Avoid running ":is_shell_option_enabled interactive". While correct, such
#     # command is somewhat slower than merely testing this option directly. While
#     # Zeshy typically ignores such efficiency concerns, this function is called
#     # frequently enough to warrant minor optimizations.
#     die_if_args
#     is -o interactive si
# }
# 
# :func.document <<'/---'
# [status: bool] is_shell_login()
# 
# Report success if the first argument passed to the current shell was `-'. The
# startup process running the `login` command typically passes such argument to
# startup shells on successful login.
# /---
# function is_shell_login() {
#     die_if_args
#     :is_shell_option_enabled login
# }

#FUXME: Rename _shell to _zsh everywhere below. (Yes; I've given it quite a
#ponderous weight of consideration...and, well, it only makes sense.)

# ....................{ TESTERS ~ option                   }....................
#FUXME: Reduce to simply aliases.
#:func.document <<'/---'
#[status: bool] is_shell_interactive()
#
#Report success if standard input to the current shell _was_ attached to a
#terminal device on initial execution of such shell. When testing whether
#standard input to the current shell is _currently_ attached to a terminal
#device, consider calling :is_stdin_terminal() instead. Standard input
#to the current shell could have been initially attached to a terminal device
#but since closed, in which case relying on the return value from this function
#would be problematic.
#/---
#function is_shell_interactive() {
#    # Avoid running ":is_shell_option_enabled interactive". While correct, such
#    # command is somewhat slower than merely testing this option directly. While
#    # Zeshy typically ignores such efficiency concerns, this function is called
#    # frequently enough to warrant minor optimizations.
#    die_if_args
#    is -o interactive si
#}
#
#:func.document <<'/---'
#[status: bool] is_shell_login()
#
#Report success if the first argument passed to the current shell was `-'. The
#startup process running the `login` command typically passes such argument to
#startup shells on successful login.
#/---
#function is_shell_login() {
#    die_if_args
#    :is_shell_option_enabled login
#}

#FUXME: *sigh* We implemented this prior to discovering the canonical
#${options} map global, which permits negation as follows:
#
#    if is ${options[${option_name}]} == 'on' si {
#       options[${option_name}]='off'
#    } else {
#       options[${option_name}]='on'
#    }
#
#No kidding. It's *THAT* simple. Excise the current implementation, with mute
#shame. ("Remove the stone of shame... and attach the stone of triumph!")
#FUXME: Oh, wait. That implements inversion, which also seems useful.
#(Implement!) We want *NEGATION* of the actual option name here. This strikes
#me as ludicrous, given the ${options} map. Grep the codebase for wherever we
#call this and, ideally, excise completely.
#FUXME: Accept multiple option names, for orthogonality.

#       set -o "$(negate_shell_option "${option_name}")"
    # The previous implementation for this function resembled:
    #
    #     run_code_silent set +o local_options "${option_name}"
    #
    # While a clever solution, such implementation subtly fails when passed
    # options "privileged" or "restricted". As "man zshoptions" documents, the
    # option "local_options" localizes all options *EXCEPT* "privileged" or
    # "restricted", which remain unexpectedly globally set. Instead, employ an
    # even more insidiously smart solution by noting "[[ -o ${option_name} ]]"
    # always returns in one of three possible ways:
    #
    # * When passed a valid option name currently enabled, such command prints
    #   nothing and returns zero exit status.
    # * When passed a valid option name currently disabled, such command prints
    #   nothing and returns non-zero exit status.
    # * When passed an invalid option name, such command prints
    #   ":is_shell_option:2: no such option: ${option_name}" to standard error
    #   and returns non-zero exit status.
    #
    # Consequently, a shell option exists when such command either returns zero
    # exit status or prints nothing.
#   if { output="$(is -o "${option_name}" si 2>&1)" } {
#       report_success
#   } else {
#       is_string_empty "${output}" and report_status
#   }

# ....................{ ALIASES                            }....................
#:alias_command\
#    'void :enable_option_local(string option_name1, string option_name2, ...)'\
#    'setopt -- local_options' <<'/---'
#Locally enable the passed `zsh` options in the current context (e.g., block,
#conditional, function, script). Options enabled in this manner revert to their
#global setting on leaving such context: e.g.,
#
#.:enable_option_local()
#==========================================
#[source]
#------------------------------------------
#>>> function risky_non_business() {
#...     :enable_option_local no_warn_create_global
#...     a_new_hopelessness="None shall pass."
#... }
#>>> risky_non_business                      # this does not print a warning!
#>>> an_old_cheerfulness="Some shall pass."  # this does
#------------------------------------------
#==========================================
#/---

#FUXME: Note that this has knock-on effects elsewhere in the codebase: namely,
#for orthogonality, we should also rename all "if_shell_interactive" directories
#to... heck, why not just "if_interactive"? There's only one thing that can be
#interactive, so it's hard to see the point of specifying a noun here.
#Similarly, mass rename all "_OPTIONS_IF_SHELL_INTERACTIVE" to
#"_OPTIONS_IF_INTERACTIVE" and such. Much more concise. I heartily approve.
#FUXME: Rename _shell_option to _zsh_option everywhere.
#       print "output: ${output}"
#   output="$(is -o "${option_name}" si 2>&1)" or
#       is_string_empty "${output}"
#FUXME: This is called often enough, we should probably just cache the result as
#a *NON-EXPORTED* global variable of the current shell. The *NON-EXPORTED* is key.
#   string_global ZESHY_IS_SHELL_INTERACTIVE="${ZESHY_IS_SHELL_INTERACTIVE-$(run_code_silent_and_get_status_boolean :is_shell_option_enabled interactive)}"
#   is_boolean_true "${ZESHY_IS_SHELL_INTERACTIVE}"
#   die_unless_arg 'expected one option name'
#   string option_name="${1}"
#   :die_unless_option "${option_name}"
#   set -o "${option_name}"
#       ${ZESHY_STDERR_FILE_DESCRIPTOR}>&${ZESHY_STDOUT_FILE_DESCRIPTOR})" or
#function isot() {
#    string option_name="${1}" output
#      not is_string_suffix "${output}" "no such option: ${option_name}"
#   if not output="$(is -o "${option_name}" si 2>&1)" and
#      is_string_suffix "${output}" "no such option: ${option_name}"
#   then report_failure
#   elif print "output: ${output}"
#   else report_success
#   fi
#}

# See "man zshoptions" for a list
# of such options# and interactively reading commands from standard input.
# Technically, this could be
    # avoided by calling "set +o" only if the passed option is *NOT*
    # "privileged" or "restricted".
    #FUXME: Doesn't work. Best way appears to be capturing the :string.output of a test
    #resembling "$(is -o "${option_name}" si)" for an error message resembling:
    #   zsh: no such option: oeuoeuo
    # Dismantled, this is:
    #
    # * "set +o", printing the passed option name if such option exists or
    #   returning false.
    # * "run_code_silent", hiding such :string.output while retaining such return status.
