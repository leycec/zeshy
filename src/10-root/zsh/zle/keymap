#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'---'
Handle *ZLE keymaps* (i.e., key bindings recognized by `zsh` at the interactive
command line).
---

#FIXME: Be great to support vim-style history searching with <Up> and <Down>.
#In the shell community, this may be referred to as "tcsh"-style history
#searching, as emulated by the following zsh snippet:
#
#    bindkey "^[[A" history-beginning-search-backward
#    bindkey "^[[B" history-beginning-search-forward
#
#Give her a go!

#FIXME: Be great to support copy and paste to and from the current command line
#and X.org clipboard. Happily, one enterprising user on stackexchange came up
#with the following Vi[M]-centric snippet (see
#http://unix.stackexchange.com/questions/25765/pasting-from-clipboard-to-vi-enabled-zsh-or-bash-shell):
#
#function vi-append-x-selection () { RBUFFER=$(xsel -o -p </dev/null)$RBUFFER; }
#function vi-yank-x-selection ()   { print -rn -- $CUTBUFFER | xsel -i -p; }
#zle -N vi-append-x-selection
#zle -N vi-yank-x-selection
#bindkey -a 'C-X' vi-append-x-selection
#bindkey -a 'C-Y' vi-yank-x-selection
#
#Note this uses "xsel". Consider also leveraging "xclip", if installed. Which is
#preferable?

# ....................{ GETTERS                            }....................
#FIXME: "bindkey" supports an *ENORMOUS* list of options (e.g., for deleting,
#creating, and copying keymaps). It'd be great to eventually support them all.

:func.doc <<'/---'
string get_keymaps()

List all `zsh` line editor (ZLE) keymaps, delimited by newlines.
/---
function get_keymaps() {
    die_if_args
    bindkey -l
}

:func.doc <<'/---'
string get_key_bindings()

List all `zsh` line editor (ZLE) key bindings, delimited by newlines.
/---
function get_key_bindings() {
    die_if_args
    bindkey
}

# ....................{ STARTUP                            }....................
run_hook_on_zeshy_startup_if_interactive startup_zeshy_key_bindings

#FIXME: It's a pretty bad first stab, but it'll have to do. Key bindings clearly
#warrant a new configuration file -- say, "if_config/keys". I'm thinking a
#simple list global resembling:
#
#ZESHY_KEY_BINDINGS=(
#   'C-R' history-incremental-search-backward
#   ...
#)
#
#Then, on startup, we just iterate such list and apply each such binding. Simple.
#Naturally, this extends to vi- and emacs-specifics key bindings, which should
#also be tested at applied at startup: e.g.,
#
#ZESHY_KEY_BINDINGS_IF_EMULATING_VI=(
#   'C-X' vi-append-x-selection
#   ...
#)

:func.doc <<'/---'
void startup_zeshy_key_bindings()

Set currently configured `zsh` line editor (ZLE) key bindings.
/---
function startup_zeshy_key_bindings() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    # Bind <Enter> (i.e., <Ctrl-j>) to enter a soft rather than hard return when
    # in multiline editing mode.
    bindkey 'C-j' self-insert

    # Bind:
    #
    # * <Ctrl-r> to search backward in shell history.
    # * <Ctrl-s> to search forward in shell history.
    bindkey 'C-r' history-incremental-search-backward
    bindkey 'C-s' history-incremental-search-forward
}

# --------------------( WASTELANDS                         )--------------------
