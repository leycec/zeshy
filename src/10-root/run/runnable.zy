#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Runnables* (i.e., executable objects), including the following:

* `zsh` aliases (e.g., `:status.report_last`).
* `zsh` functions (e.g., `get_zeshy_version`).
* `zsh` builtins (e.g., `print`).
* `zsh` operators (e.g., `[[`).
* External commands in the current user's ${PATH} (e.g., `ls`), elsewhere
  referred to as *pathables*.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_if_runnable(:str runnable_name)

Throw an exception if the passed runnable already exists.

== See Also ==

* is_runnable().
/---
function die_if_runnable() {
    die_unless_arg 'Expected one runnable name.'
    :str runnable_name=${1} runnable_type

    # If this runnable already exists, get the type of this runnable.
    if { :runnable.Type_if_found "${runnable_name}" runnable_type } {
        # Throw a message describing this runnable. Since print_runnable()
        # prints headings dependent on the current terminal width *AND* since
        # :die() typically embeds this message in a visual box reducing this
        # width by the width of box borders, :die() sadly does *NOT* suffice to
        # print this runnable.
        die_evaluated '\"${runnable_name}\" already a defined ${runnable_type}:${ZY_ASCII_NEWLINE}${ZY_ASCII_NEWLINE}$(print_runnable "${runnable_name}")'
    }
}


:func.doc <<'/---'
:void die_unless_runnable(:str runnable_name)

Throw an exception unless the passed runnable exists.

== See Also ==

* is_runnable().
/---
function die_unless_runnable() {
    die_unless_args_1_to_2\
        'Expected one runnable name and optional error message.'
    :str runnable_name="${1}"
    is_runnable "${runnable_name}" :or
        :die '"'${runnable_name}'" not runnable (i.e., not an alias, builtin, command, or function).'
}

#FIXME: In lieu of unit tests...
#FIXME: O.K.; I've tracked down the issue to an error in the wrapping code.
#Basically, wrapping really isn't working at all. There appear to be an
#extraordinary number of off-by-one issues there. The issue is *NOT* with
#die_evaluated() or related terminal width code, which is working as expected.
#But at least nothing is segmentation faulting, eh? *sigh*
# function difo() {
#     die_if_runnable info
# }

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_runnable(:str runnable_name)

Report success only if the passed *runnable* (i.e., external command or `zsh`
alias, builtin, function, or operator) exists.
/---
function is_runnable() {
    die_unless_arg 'Expected one runnable name.'
    whence -- "${1}" &>/dev/null
}

# ....................{ TESTERS ~ type                     }....................
#FIXME: Improve examples.
#FIXME: Rename to :runnable.type.==().
:func.doc <<'/---'
[status=:bool] is_runnable_type_equals(:str runnable_name :str runnable_type)

Report success only if the passed runnable is of the passed type.

== Examples ==

.is_runnable_type_equals()
==========================================
[source]
------------------------------------------
>>> alias thomas_migley_jr='he who destroys ozone'
>>> is_runnable_type_equals thomas_migley_jr alias :and :stdout.echo 'yet lives'
yet lives
------------------------------------------
==========================================
/---
function is_runnable_type_equals() {
    die_unless_args_2 'Expected one runnable name and one type.'
    :str runnable_name=${1} runnable_type=${2} runnable_type_actual

    # Type of this runnable if found *OR* throw an exception otherwise.
    :runnable.Type "${runnable_name}" runnable_type_actual

    # Report success only if this type is the passed string.
    is_string_equals "${runnable_type_actual}" "${runnable_type}"
}


#FIXME: Rename to :runnable.type.glob().
:func.doc <<'/---'
[status=:bool] is_runnable_type_match(
    :str runnable_name :str runnable_type_glob)

Report success if the passed runnable's type matches the passed glob.

== Examples ==

.is_runnable_type_equals()
==========================================
[source]
------------------------------------------
>>> function bergtatt() { output into the mountain chambers; }
>>> is_runnable_type_match bergtatt '[^a]*' :and print 'Graablick watches'
Graablick watches
------------------------------------------
==========================================
/---
function is_runnable_type_match() {
    die_unless_args_2 'Expected one runnable name and one type glob.'
    :str runnable_name=${1} runnable_type_glob=${2} runnable_type_actual

    # Type of this runnable if found *OR* throw an exception otherwise.
    :runnable.Type "${runnable_name}" runnable_type_actual

    # Report success only if this type matches the passed string.
    :str.is_globbed "${runnable_type_actual}" "${runnable_type_glob}"
}

# ....................{ TESTERS ~ builtin                  }....................
:func.doc <<'/---'
[status=:bool] is_builtin(:str builtin_name)

Report success if the passed `zsh` builtin operator exists.
/---
function is_builtin() {
    die_unless_arg 'Expected one builtin name.'
    is_runnable "${1}" :and is_runnable_type_equals "${1}" 'builtin'
}


:func.doc <<'/---'
[status=:bool] is_reserved(:str reserved_name)

Report success if the passed `zsh` reserved operator exists.
/---
function is_reserved() {
    die_unless_arg 'Expected one reserved operator name.'
    is_runnable "${1}" :and is_runnable_type_equals "${1}" 'reserved'
}

# --------------------( SETTERS                            )--------------------
:func.doc <<'/---'
:void :runnable.Type(:str runnable_name :Str str_name)

Set the string variable with the passed name to the `zsh`-specific lowercase
type of the passed runnable if this runnable exists _or_ throw an exception
otherwise.

== See Also ==

* :runnable.Type_if_found().
/---
function :runnable.Type() {
    :runnable.Type_if_found "${@}" :or die_unless_runnable "${1}"
}


:func.doc <<'/---'
[status=:bool] :runnable.Type_if_found(:str runnable_name :Str str_name)

Set the string variable with the passed name to the `zsh`-specific lowercase
type of the passed runnable if this runnable exists _or_ report failure
otherwise.

If this runnable is:

* A `zsh` alias, this string is `alias`.
* A `zsh` builtin (e.g., `print`), this string is `builtin`.
* A `zsh` function, this string is `function`.
* A `zsh` operator (e.g., `[[`), this string is `reserved`.
* An external command in the current user's ${PATH}, this string is `command`.
* An external command _not_ in the current user's ${PATH} but hashed with
  builtin hash(), this string is `hashed`.

== Examples ==

.:runnable.Type_if_found()
==========================================
[source]
------------------------------------------
>>> alias on_commerce=':stdout.echo "
... Laborers ought never to look on themselves as independent of their
... superiors. It is extremely dangerous to encourage such infatuations in a
... commercial state like ours, where perhaps seven-eighths of the population
... have little or no property. The cure will not be complete until our
... industrial laborers are contented to work six days for the same sum which
... they now earn in four."
>>> :runnable.Type_if_found on_commerce on_commerce_type
>>> :stdout.echo "${on_commerce_type}"
alias
------------------------------------------
==========================================
/---
function :runnable.Type_if_found() {
    die_unless_args_2 'Expected one runnable name and one string name.'
    :str runnable_name__rTif=${1} str_name__rTif=${2} runnable_type__rTif

    # If this runnable exists, capture this runnable's type specifier.
    #
    # This is a string of the form "${runnable_name}: ${runnable_type}" (e.g.,
    # "stonesoup: command"), where "${runnable_type}" is either this runnable's
    # type if this runnable exists *OR* "none" otherwise. In the latter case,
    # this command also returns non-zero exit status.
    runnable_type__rTif="$(whence -w -- "${runnable_name__rTif}")" :and {
        # Remove the runnable name from this type specifier.
        :Str.set "${str_name__rTif}" "${runnable_type__rTif##*: }"
    }
    # Else, implicitly report failure.
}

# --------------------( PRINTERS                           )--------------------
#FIXME: Actually implement print_builtin().
#FIXME: This function is *MOSTLY* a sane substitution for "which". To make it a
#reliable solution, we'll want a new function frontend -- say,
#which_runnable_with_options(). Such function should *ONLY* call
#print_runnable() with its passed arguments if such arguments contain no options
#(i.e., if all such arguments are non-option arguments); if, however, such
#arguments contain at least one option, such function should call "which"
#instead with such arguments. (Nice, eh?)

:func.doc <<'/---'
:str print_runnable(+:str runnable_names)

Print a human-readable synopsis of all passed *runnables* (e.g., aliases,
builtins, commands, functions, operators).

Specifically, if this runnable is:

* A `zsh` alias, print this alias name and expansion with syntax highlighting.
* A `zsh` function, print this function name and body with syntax highlighting.
* An external command in the current user's ${PATH}, print the absolute path of
  this command.
/---
function print_runnable() {
    die_unless_args 'Expected one or more runnable names.'
    :str runnable_name runnable_type
#   print "terminal width: $(get_terminal_width) (${COLUMNS})"

    # Print these runnables.
    for runnable_name ("${@}") {
        # Type of this runnable if found *OR* throw an exception otherwise.
        :runnable.Type "${runnable_name}" runnable_type
        # :stdout.echo 'printing '${runnable_type}' "'${runnable_name}'"...'

        # Print a type-specific definition for this runnable.
        case "${runnable_type}" {
        'function')             print_function "${runnable_name}";;
        'alias')                print_alias    "${runnable_name}";;
        ('command'|'hashed'))   print_pathable "${runnable_name}";;
        ('builtin'|'reserved')) print_builtin  "${runnable_name}";;
        *) :die 'Runnable "'${runnable_name}'" type '${runnable_type}' unrecognized.';;
        }

        # If the dominant definition of this runnable is not a command
        # *AND* a command with the same name as this runnable exists, also
        # print this runnable as a command.
        if { :is "${runnable_type}" != *' '('command'|'hashed') :si :and
             :pathable.is "${runnable_name}" } {
            print_pathable "${runnable_name}"
        }
    } | :stdin.page
}
