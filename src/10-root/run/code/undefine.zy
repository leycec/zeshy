#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'---'
*Undefining runners* (i.e., functions dynamically evaluating the passed strings
as commands and then undefining all new runnables such commands define).

These runners thus restore the runtime shell environment to its prior state.
---

# ....................{ RUNNERS                            }....................
:func.doc <<'/---'
:full run_code_and_undefine_runnables_defined(+:str code)

Run the passed code and undefine all new aliases and functions such code
defines.

In most cases, this effectively ``undoes'' all changes to the alias and function
namespaces made by this code. However, this function cannot revert existing
aliases or functions redefined by such command and thus cannot completely undo
all possible changes.
/---
function run_code_and_undefine_runnables_defined() {
    die_unless_args 'Expected one or more shell words.'

    # List of alias and function names defined before running this command.
    list alias_names_old__rcaurd function_names_old__rcaurd
    set_list_to_aliases alias_names_old__rcaurd
    set_list_to_functions function_names_old__rcaurd

    # Run this code.
    :code.run "${@}"

    # List of alias and function names defined after running this command.
    list alias_names_new__rcaurd function_names_new__rcaurd
    set_list_to_aliases alias_names_new__rcaurd
    set_list_to_functions function_names_new__rcaurd

    # List of alias and function names defined by running this command.
    list alias_names__rcaurd function_names__rcaurd
    :List.Difference\
        alias_names__rcaurd\
        alias_names_new__rcaurd\
        alias_names_old__rcaurd
    :List.Difference\
        function_names__rcaurd\
        function_names_new__rcaurd\
        function_names_old__rcaurd

    # Undefine newly defined aliases and functions.
    undefine_alias "${alias_names__rcaurd[@]}"
    :undefine_func "${function_names__rcaurd[@]}"
}


:func.doc <<'/---'
:full run_code_and_undefine_runnables_defined_except_alias_suffixes(+:str code)

Run the passed code and undefine all new non-suffix aliases and functions this
command defines (i.e., preserving only newly defined suffix aliases).

== See Also ==

* run_code_and_undefine_runnables_defined().
/---
function run_code_and_undefine_runnables_defined_except_alias_suffixes() {
    die_unless_args 'Expected one or more shell words.'

    # List of non-suffix alias and function names defined before running such
    # command.
    :list alias_names_old__rcaurdesa function_names_old__rcaurdesa
    set_list_to_aliases_nonsuffix alias_names_old__rcaurdesa
    set_list_to_functions function_names_old__rcaurdesa

    # Run such code.
    :code.run "${@}"

    # List of non-suffix alias and function names defined after running such
    # command.
    :list alias_names_new__rcaurdesa function_names_new__rcaurdesa
    set_list_to_aliases_nonsuffix alias_names_new__rcaurdesa
    set_list_to_functions function_names_new__rcaurdesa

    # List of non-suffix alias and function names defined by running such
    # command.
    :list alias_names__rcaurdesa function_names__rcaurdesa
    :List.Difference\
        alias_names__rcaurdesa\
        alias_names_new__rcaurdesa\
        alias_names_old__rcaurdesa
    :List.Difference\
        function_names__rcaurdesa\
        function_names_new__rcaurdesa\
        function_names_old__rcaurdesa
#   :List.print function_names__rcaurdesa
#   :List.print function_names_new__rcaurdesa

    # If new aliases and functions were defined, undefine such runnables.
    if { :List.is_nonempty alias_names__rcaurdesa } {
        undefine_alias_nonsuffix "${alias_names__rcaurdesa[@]}"
    }
    if { :List.is_nonempty function_names__rcaurdesa } {
        :undefine_func "${function_names__rcaurdesa[@]}"
    }
#   print "undefined aliases: ${alias_names__rcaurdesa[@]}\nundefined functions: ${function_names__rcaurdesa[@]}" 1>&2
}
