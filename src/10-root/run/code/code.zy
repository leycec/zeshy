#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Code evaluators* (i.e., functions dynamically executing strings containing any
number of `zeshy` commands and options and arguments to such commands).
/---

#FIXME: The core issue here is that, given dynamic block aliases, we really no
#longer require this approach for *MOST* (but probably not all) current calls
#to such functions. See the ":with_mapfile{...}:with_mapfile" pair of block
#aliases for a first attempt at transitioning to this ideal approach.

#FIXME: I've just about had enough of trying to remember to explicitly quote
#user-sanity with "(q)". Inevitably, I forget and things quickly go
#subtly south. So what can we do to automate such nonsense? My current thoughts:
#
#* Efficiently search the sanity for any argument matching glob:
#  (*[[:space:]]#|)'--'... (Wait; see below.)
#  Such glob matches "--" as both an independent argument *AND* as a substring
#  of a larger string. We explicitly match single- and double-quoted substrings
#  as well as command substitutions to avoid matching embedded "--" substrings.
#* Use index flag "(i)" to find the list index of the first such argument.
#* If such argument exists, explicitly quote all arguments following such
#  argument with flag "(q)".
#
#I don't possibly see how the above could fail. /s But, honestly, it's worth a
#try. The current approach is beyond error-prone, to the point that the above
#seems increasingly advisable.
#FIXME: O.K.; we can certainly create such glob. But is it a good idea? For
#one, it would be tremendously inefficient to search a command *NOT* containing
#an unquoted "--" and passed a novel-length string argument for such "--". For
#another, it seems quite arduous to create a glob avoiding matching spurious
#"--". I mean, we really don't want to fashion a zsh parser for this. (Overkill
#rears its diabolic fangs.) Instead, how about this:
#
#* If at least two arguments were passed, efficiently search the passed
#  arguments for any argument matching glob with index flag "(i)":
#  (*[[:space:]]|)'--'
#  Drastically simpler and more than sufficient for pretty much every current
#  zeshy use case. Should be quite safe as well, given that it only matches at
#  the end of arguments when prefixed by whitespace. Sweet.
#* If such argument exists, explicitly quote all arguments following such
#  argument with flag "(q)".
#
#Dead simple.
#FIXME: Immediately after implementing such change, we'll need to grep through
#the codebase and eliminate every use of "(q)" in a run_code() call when
#preceded by "--". Yes, this will be a bit of a laborious process. But, well...
#It's absolutely worth it, if we can minimize bugs induced by this nonsense.

# ....................{ RUNNERS                            }....................
:func.doc <<'/---'
[stdout=:str status=:int] run_code(+:str codes)

Run the passed code, printing this command's standard output and error and
returning this code's exit status.

== Argument Forms ==

If passing a single argument, *never interpolate `${@}` into this argument*.
If passing multiple arguments, *always quote-protect sanity with
paramater expansion modifier `(q)`*.

Hence, this function accepts arguments in two forms:

=== Single Argument Form ===

When passed a single argument, this function evaluates this argument as the
entire command to be run. This requires the caller explicitly construct this
command, including quote protection of all arguments containing shell-reserved
characters: e.g.,

.run_code() Single Argument
==========================================
[source]
------------------------------------------
# Run the entropic random number generator until generating a string
# containing shell-reserved characters.
>>> string command
>>> command='grep_path_with_options -E "\{\(Eschaton\ Entombed\)\}" /dev/random'
>>> run_code "${command_line}"
{(Eschaton Entombed)}          # It could happen...
------------------------------------------
==========================================

This form preserves escapes and hence is generally safer than the following
form, which silently strips and hence requires one level of quote protection.

This form is subject to a subtle caveat, however: when passing a single
argument interpolating one or more lists, *expand list elements with `${*}`
rather than `${@}`*. The former expands list elements in place; the latter
appends list elements following the first as function arguments, thus implicitly
calling the <<run_code.form_multiple,multiple argument form>> of this
function imposing non-trivial constraints on sanity instead: e.g.,

.run_code() Single Argument Interpolation
==========================================
[source]
------------------------------------------
# Doubleplusungood. This is equivalent to:
#     run "dd | pv -t" "if=/dev/null" "of=/dev/sda"
>>> :args.set dd if=/dev/null of=/dev/sda
>>> run_code "${@} | pv -t"       # you probably don't want to run this

# Ohsonice. This never does the wrong thing. (But you'll wish it did...)
>>> :args.set dd if=/dev/null of=/dev/sda
>>> run_code "${*} | pv -t"       # you *REALLY* don't want to run this
------------------------------------------
==========================================

[[run_code.form_multiple]]
=== Multiple Argument Form ===

If passed multiple arguments, this function evaluates the concatenation of
such arguments as the command to be run. This implicitly constructs the
command line on behalf of the caller (which is nice), but requires the
caller explicitly quote protect command arguments containing shell-reserved
characters (which is horrible): e.g.,

.run_code() Multiple Arguments
==========================================
[source]
------------------------------------------
# Run the same command. Unhappily, this crashes and burns piquantly. Why?
# Because run() internally calls "eval" which silently strips one level
# of quote protection from the argument to "grep".
>>> list command
>>> command=( grep -E '\{\(Eschaton\ Entombed\)\}' /dev/random )
>>> run_code "${command[@]}"
grep: Entombed)}: No such file or directory

# Run the same command, explicitly quote protecting the argument to "grep".
# Happily, it works. Unhappily, it's user friendliness is.... questionable.
>>> list command
>>> command=( grep -E ${(q):-\{\(Eschaton\ Entombed\)\}} /dev/random )
>>> run_code "${command_line[@]}"
{(Eschaton Entombed)}          # It could happen... but will it?
------------------------------------------
==========================================

Since each call to eval() and hence this function strips one level of quote
protection, this function avoids accidentally stripping such protection when
passed a command calling either eval(), this function, or a function prefixed by
`run_code_` (e.g., `run_code_silent`). The latter transitively call this
function, thus stripping one level of quote protection.

== Motivation ==

`zsh` already runs strings _not_ containing shell-reserved characters as
commands when in command position (i.e., the first shell word of a line): e.g.,

.Strings without Shell-reserved Characters in Command Position
==========================================
[source]
------------------------------------------
>>> list command; command=( cat /dev/issue )
>>> "${command_line[@]}"
Caution, feeble entity. You are entering \n.\O (\s \m \r) \t.
------------------------------------------
==========================================

Sadly, such execution fails for strings containing shell-reserved characters
(e.g., `|`, `<`, `>`): e.g.,

.Strings with Shell-reserved Characters in Command Position
==========================================
[source]
------------------------------------------
>>> list command; command=( cat /etc/issue \| cut -c 1,16 )
>>> "${command[@]}"
cat: |: No such file or directory
cat: cut: No such file or directory
------------------------------------------
==========================================

This function amends such behavior by correctly running all strings as
commands regardless of shell-reserved characters: e.g.,

.run_code() versus Command Position
==========================================
[source]
------------------------------------------
# Print the first 16 characters of the login message. Aaaaaand we have worky.
>>> list command; command=( cat /etc/issue \| cut -c 1,16 )
>>> run_code "${command[@]}"
Caution, feeble
------------------------------------------
==========================================
/---
function run_code() {
    die_unless_args 'Expected one or more shell words.'
    :str command_name__rc

    #FIXME: We use "run_code_" as a magic string in numerous contexts,
    #probably all of them globs matching "run_code_"*. If the latter is the
    #case, define a new string global ${ZY_FUNCTION_NAME_RUN_COMMAND_GLOB}
    #(probably in parcel "runnable/command/command"): e.g.,
    #
    #    ZY_FUNCTION_NAME_RUN_COMMAND_GLOB='run_code_*'

    # If the argument in command position is either this function name or a
    # "run_code_"-prefixed function name, assume such argument to be a call to a
    # zeshy-specific function recursively calling this function. In such case,
    # do *NOT* eval() such command as the recursive call to this function will
    # do so already. Since each eval() strips one level of quotes from such
    # command, running such command as is avoids stripping quote protection.
    # See get_string_word() for further details.
    command_name__rc=${1[(w)1]}
    if :is ${command_name__rc} == ('eval'|'run_code'(|'_'?*)) :si {
#       :stdout.echo "run (direct): ${@}... (last arg: ${@[-1]})"
        # If passed a composite command line as a single argument, split such
        # command line into shell words prior to execution by zsh.
        if { is_arg } {
            { "${(z)@}" } =status.report
        # Else, assume the sanity already correspond to valid
        # shell words whose concatenation produces the desired command line.
        } else {
            { "${@}" } =status.report
        }
    }

    # If passed one argument, evaluation of such argument as a composite command
    # line is generally safe. If passed multiple arguments, evaluation of the
    # concatenation of such arguments into a composite command line is generally
    # unsafe unless the caller read, understood, and adhered to the prior
    # documentation; in particular, such command line *HOPEFULLY* runs no
    # command internally calling either this function or the "eval" builtin.
    #
    # To improve safety, this function previously conditionally quote protected
    # unescaped shell-reserved characters in such arguments, thus handling
    # arguments the caller neglected to explicitly quote protect with "(q)".
    # Unfortunately, such cleverness uncleverly munged valid zsh statements:
    # e.g.,
    #
    #       # Quote protecting the " " in "ls /tmp" produces unexpected results.
    #       run "print $(ls /tmp)"
    #
    # Hence, this function now elects to do nothing whatsoever, requiring the
    # caller quote protect user-sanity with "(q)".
    #
    # You have now entered the Clusterfuck Zone.
#   :stdout.echo "run: ${*}" 1>&2
    if { :stdin.is_pipe } {
        { :stdin | eval "${@}" } =status.report
    } else {
        { eval "${@}" } =status.report
    }
}


:func.doc <<'/---'
:full run_code_if_pathable(+:str codes)

Run the passed command if the first shell word of this command is *pathable*
(e.g., in the current user's ${PATH}), printing this command's standard output
and error and reporting this command's exit status.

If this command is _not_ pathable, return failure.
/---
function run_code_if_pathable() {
    die_unless_args 'Expected one or more shell words.'
    :pathable.is "$(get_string_word "${1}" 1)" :and run_code "${@}"
}

# ....................{ RUNNERS ~ path                     }....................
:func.doc <<'/---'
:full run_code_under_dir(+:str codes :str dirname)

Run the passed code under the passed directory.

This function guarantees the current working directory to be:

* **Preserved** (i.e., restored to the prior working directory before returning
  from this function), even in the event of internal errors or exceptions.
* Temporarily changed to the passed directory before running such code.
/---
function run_code_under_dir() {
    die_unless_args_2_or_more\
        'Expected one or more shell words and one dirname.'
    :str dirname__rcud=${@[-1]}
    :args.pop 1

    # Temporarily change to the passed directory, run the passed command, and
    # change back to the prior directory. Call the latter function in an
    # "always" block to ensure such restoration in the event of an exception.
    store_dir "${dirname__rcud}"
    {
        # :stdout.echo "running under \"${dirname}\": ${@}"
        { run_code "${@}" } =status.report
    } always {
        restore_dir
    }
}
