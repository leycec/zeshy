#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *job-specific runners* (i.e., functions dynamically evaluating the passed
strings as commands in a manner modifying the job status of such commands).
/---

#FIXME: Add examples.

# ....................{ RUNNERS                            }....................
:func.doc <<'/---'
[stdout: string, stderr: string, status: integer] run_code_in_background(
   string code1, ...)

Run the passed code in the background of the current shell.
/---
function run_code_in_background() {
    die_unless_args 'Expected one or more shell words.'
    run_code "${@}" &
}

# ....................{ RUNNERS ~ disown                   }....................
:func.doc <<'/---'
[stdout: string, stderr: string, status: integer] run_code_disowned(
    string code1, ...)

Run the passed code disowned from the current shell. Disownment guarantees such
code's process to:

* _Not_ be listed in the jobs table for the current shell.
* _Not_ receive the HUP signal and hence _not_ be terminated on termination of
  the current shell.

While GUI applications divorced from the CLI make good candidates for shell
disownment, most CLI applications do _not_. Exceptions include headless CLI
daemons and servers.
/---
function run_code_disowned() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with run_command_disowned().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # For safety, run disowned commands in new subshells. While negligibly
    # expensive, this avoids subtle termination issues associated with process
    # substitution of temporary files: e.g.,
    #
    #     # Hideous. This captures 64 random strings into a temporary file and
    #     # prints such file as a disowned job. What now? Let me tell you what
    #     # now. No shell owns such job and hence deletes such file after job
    #     # completion, resulting in gradual file accumulation.
    #     run cat =(head -64 /dev/urandom) &!
    #
    #     # Beautiful. This performs the same task in a new subshell as a
    #     # disowned job. While disowned, some subshell owns such job and hence
    #     # deletes such file after job completion.
    #     (run cat =(head -64 /dev/urandom)) &!
    die_unless_args 'Expected one or more shell words.'
#   :str.output "running disowned: ${@}"
    ( run_code "${@}" ) &!
}

:func.doc <<'/---'
[stdout: string, stderr: string, status: integer] run_command_disowned(
    string command_name, string command_arg1?, ...)

Run the passed command name and optionally passed command arguments as a job
disowned from the current shell.

Unlike run_code_disowned(), this function expands such command statically rather
than evaluating such code dynamically and hence does _not_ require command
arguments to be manually quote-protected (e.g., with parameter expansion flag
`(q)`). Since arguments interactively entered by the current user should _not_
need to be explicitly quote-protected, this function is more appropriate than
run_code_disowned() for interactive use -- particularly, CLI alias use. See
run_code_disowned() for further details.
/---
function run_command_disowned() {
    # See run_code_disowned() for further details.
    die_unless_args 'Expected one or more shell words.'
    ( "${@}" ) &!
}

# --------------------( WASTELANDS                         )--------------------
#, printing such code's
#standard output and error and returning such code's exit status

#. While limiting, such expansion has the
#advantage of _not_ requiring command arguments to be quote-protected from
#dequoting performed by eval(). Since arguments interactively entered by the
#current user should _not_ need to be explicitly quote-protected, this function
#is more appropriate than run_code_disowned() for .
#. See run_code_disowned() for further details.
#
#While limited to running only a single
#command, 
