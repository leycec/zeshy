#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle commands passed user-configured and/or caller-passed options.
/---

#FIXME: Rename "_configured" to "_found" everywhere below. While there exist
#numerous alternatives (e.g., "_listed"), "_found" perhaps best complies with
#existing nomenclature *AND* is most readily memorable.

#FIXME: This parcel is currently quite a bit of a mess. Function
#set_list_to_options_listed_and_passed() *SHOULD* be called by all runners
#below, which contextually sets the passed list to all appropriate options. They
#don't, currently, suggesting we never quite completed that refactoring. Do so.
#FIXME: Once we've done so, improve set_list_to_options_listed_and_passed() to
#also contextually consider the current OS. Specifically:
#
#* If :is_os_trait_gnu() reports success, implicitly append "_FROM_LINUX" to all passed
#  list names that do not already exist (e.g., if list name "ZY_OPTIONS_LS"
#  is passed and such list does not exist, assume list name
#  "ZY_OPTIONS_LS_FROM_LINUX" instead).
#* Else if :is_os_trait_bsd() reports success, implicitly append "_IF_OS_BSD" to all
#  passed list names that do not already exist.
#
#This is *INCREDIBLY* critical. It's the core to our cross-platform support and
#specifically to getting zeshy runnable under OS X (due to its unique BSD
#toolchain heritage).

#FIXME: "Compressing" list option names into a single string is inherently
#silly, particularly when we could have simply required the caller suffix the
#last such name with "--". Since variable names *CANNOT* contain "--", such
#delimiter adequately generalizes. Consider the following example:
#
#    # This is comparatively bad.
#    run_code_with_options_configured\
#        'command grep'
#        'ZY_GREP_OPTIONS ZY_GREP_OPTIONS_IF_RECURSIVE'\
#        "${(q)@}"
#
#    # This is comparatively good.
#    run_code_with_options_configured\
#        ZY_GREP_OPTIONS ZY_GREP_OPTIONS_IF_RECURSIVE --\
#        'command grep' "${(q)@}"
#
#The latter is both intuitively and decidably better for any number of obvious
#reasons, including: no need to either compact or explode list option names from
#a string; adjacency of command names to command arguments in the list of passed
#arguments. When inevitably adopting the latter approach, note that list names
#*MUST* be passed first; attempting to pass such names last fails, for the
#simple reason that delimiter "--" would then be indistinguishable from a
#genuine argument "--" to be passed to such command. Fantastic, eh!
#FIXME: Nevermind. It's obviously trivial to find the index of the last passed
#"--", suggesting the argument order should resemble:
#
#    # This is objectively best.
#    run_code_with_options_configured\
#        'command grep' "${(q)@}" --\
#        ZY_GREP_OPTIONS ZY_GREP_OPTIONS_IF_RECURSIVE
#
#Simple. Done!
#FIXME: Substantially improve examples.

# ....................{ SETTERS                            }....................
#FIXME: Rename to :set_list_to_lists_and_options().
#FIXME: Actually call such function below and elsewhere (e.g., remove_file()).
#FIXME: Actually, we now need new middleware functions
#set_list_to_options_listed_contextual_and_passed() and
#set_list_to_options_listed_silent_and_passed() calling this low-level
#set_list_to_options_listed_and_passed() function.
#FIXME: Complete documentation...

:func.doc <<'/---'
:void set_list_to_options_listed_and_passed(
    :List target_list_name :str source_list_names *:str arg)

Set the passed target list to the concatenation of all items in the passed
source lists (in the passed order) followed by all *options* in the passed arguments.

Set the passed list to the  union of all currently configured and passed *options* (i.e.,
arguments prefixed by `-`, up to but not including an argument `--` denoting the
end of such options) as list keys whose values are the empty string.

== Algorithm ==

This function aggregates such options from the passed arguments as follows:

//FIXME: Not the best approach. More straightforwardly, just document that we
add all elements of such lists as keys of the passed list.

* The passed string of whitespace-delimited options list names is split on
  whitespace into a local list of the names of all lists containing such options
  (e.g., splitting string `ZY_OPTIONS_GREP ZY_OPTIONS_GREP_IF_RECURSIVE`
  into a list with strings `ZY_OPTIONS_GREP` and
  `ZY_OPTIONS_GREP_IF_RECURSIVE`).
* For every list name in such list:
** If such list exists, append all elements of that list to such command.
** Else, throw an exception.

== Alternatives ==

While this function could alternatively set a passed map (e.g., for efficient
option lookup and modification), doing so would fail to preserve option order
and repetition. While many commands ignore option order and/or repetition, many
do _not_ (e.g., ImageMagick's `convert`). Hence, only a list-based
implementation provides a general-purpose solution.
/---
function set_list_to_options_listed_and_passed() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one list name, one options list names string, and optional command arguments.'
    :str list_name__sltocap="${1}" options_list_names_string__sltocap="${2}"
    :list options_list_names__sltocap
    :int arg_option_index_last__sltocap
    :List.die_unless "${list_name__sltocap}"
    :args.shift 2

    # Split the whitespace-delimited string of option list names into a list of
    # such names, to be interpolated below.
    set_list_to_string_words options_list_names__sltocap\
        "${options_list_names_string__sltocap}"

    # Append all options in such options lists to such list. Since appending to
    # an arbitrary list already requires an eval(), iterate with an eval()-based
    # iterator rather than implement such iteration manually.
    for_string_words options_list_names__sltocap options_list_name__sltocap\
        ':List.die_unless "${options_list_name__sltocap}"
        '${list_name__sltocap}'+=( "${(@P)options_list_name__sltocap}" )'

    # Append all passed options to such list. To differentiate passed options
    # from non-options, find the index of the last option and if nonzero append
    # all prior arguments.
    :args.Option_last_index arg_option_index_last__sltocap
    if (( arg_option_index_last__sltocap )) {
        append_list "${list_name__sltocap}"\
            "${@[1,${arg_option_index_last__sltocap}]}"
    }
}

# ....................{ RUNNERS                            }....................
#FIXME: Is this function ever called directly? The existing nomenclature is
#*EXCEEDINGLY* awkward. After all, there's no requirement that such options be
#"configured" -- only that they exist in the passed list. O.K.; we have a better
#FIXME related to that, so see that below.
#FIXME: Reduce documentation. set_list_to_options_configured_and_passed() now
#documents quite a bit of this.

:func_ ':full run_code_with_options(
    :str command_prefix
    :str options_list_names
    *:str command_args
) [var_name_suffix="__rcwo"]' :func{
    # If passed piped input, propagate such input to the command to be run.
    if { :stdin.is_pipe } {
        command__rcwo+=( :stdin '|' )
    }

    #FIXME: Is this really necessary? I strongly suspect the eventual "eval"
    #performed by run_code() to render this vestigial. If this *ISN'T*
    #vestigial, we should be appending to such list with a new function
    #append_list_with_string_words(): e.g.,
    #
    #    append_list_with_string_words command__rcwo "${command_prefix__rcwo}"

    # Append this prefix split into shell words to this line.
    command__rcwo+=( "${(z)command_prefix__rcwo}" )

    # Split the whitespace-delimited string of option list names into a list of
    # these names, to be interpolated below.
    set_list_to_string_words\
        options_list_names_list__rcwo "${options_list_names__rcwo}"

    # For each options list name, append the contents of such list to such
    # command or throw a warning if no such list exists.
    :str options_list_name__rcwo
    for  options_list_name__rcwo ("${options_list_names_list__rcwo[@]}") {
        :List.die_unless     "${options_list_name__rcwo}"
        command__rcwo+=( "${(@P)options_list_name__rcwo}" )
    }

    # Append all remaining passed arguments to such command.
    command__rcwo+=( "${command_args__rcwo[@]}" )

    # Run such command.
    # :stderr.echo "run_code_with_options: \"${command__rcwo[*]}\"..."
    run_code "${command__rcwo[@]}"
}:func <<'/---'
Run a command dynamically constructed from the passed arguments as follows:

* Split the passed options list names on whitespace into a list of the names of
  all lists with options to be passed to such command (e.g., split
  `ZY_OPTIONS_GREP ZY_OPTIONS_GREP_IF_RECURSIVE` into a list containing
  `ZY_OPTIONS_GREP` and `ZY_OPTIONS_GREP_IF_RECURSIVE`).
* Set the command to be run to pipe standard input if this function was piped
  such input or to the empty string otherwise (e.g., `cat /dev/stdin |`).
* Append the passed prefix to such command (e.g., `run_code_paged grep -R`).
* For every list name in such list:
** If such list exists, append all elements of that list to such command.
** Else, throw an exception.
* Append the passed arguments to such command (e.g., `${(q)@}`).
* Run such command (e.g., assuming the caller passed a single argument `Weeds`
  and piped no input and the above options lists contain default elements,
  `run_code_paged grep --extended-regexp --no-messages --recursive 'Weeds'`).

For example:

.run_code_with_options()
==========================================
[source]
------------------------------------------
# Run grep recursively with the passed list of options and user arguments,
# paging standard output if required.
>>> run_code_with_options "run_code_paged command grep"\
...     "ZY_OPTIONS_GREP ZY_OPTIONS_GREP_IF_RECURSIVE" -- "${(q)@}"
------------------------------------------
==========================================
/---

#FIXME: Rename to run_code_with_options_assembled:(). Numerous applicable verbs
#here (synonyms of "composed" seem best applicable), but "assembled" reads the
#best. Really! (The use of "configured" here was always inane, as
#run_code_with_options() itself operated on configured options lists.)
#FIXME: Perhaps:
#
#* run_code_with_options_arranged().
#* run_code_with_options_contextualized().
#
#O.K.; O.K. I must admit "assembled" to be the best choice, at present.
#FIXME: Actually, as mentioned above, :run_code_with_options_found() is *BY FAR*
#the better nomenclature. Make it so.

:func.doc <<'/---'
string run_code_with_options_configured(
    string command_prefix,
    string options_list_names,
    string command_arg1?, ...)

Run a command dynamically constructed from the passed arguments as under
run_code_with_options() and also appending
` ${list_name_first}_IF_INTERACTIVE` if the current shell is interactive and
` ${list_name_first}_IF_NONINTERACTIVE` otherwise to `${options_list_names}`,
where `${list_name_first}` is the first word in `${options_list_names}`.
/---
function run_code_with_options_configured() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one command prefix, one options list names string, and optional command arguments.'
    :str options_list_name__rcwoc options_list_name_first__rcwoc

    # The first shell word from the list of options list names, comprising the
    # name of the options list to be suffixed below.
    options_list_name_first__rcwoc="${2[(w)1]}"

    # If an options list with name corresponding to whether the current shell is
    # interactive or not exists, prepend such name to the passed list of such
    # names if such list exists.
    #
    # Do *NOT* append such name. Why? The issue is subtle but somewhat critical:
    # options contained in such implicitly added list should be overridable by
    # options contained in explicitly passed lists. After all, the latter were
    # explicitly passed for caller-specific reasons and hence take precedence.
    if { :shell.is_interactive } {
        options_list_name__rcwoc="${options_list_name_first__rcwoc}_IF_INTERACTIVE"
    } else {
        options_list_name__rcwoc="${options_list_name_first__rcwoc}_IF_NONINTERACTIVE"
    }
    if { :List.is "${options_list_name__rcwoc}" } {
        2="${options_list_name__rcwoc} ${2}"
    }

    # Run such command.
    run_code_with_options "${@}"
}

# ....................{ RUNNERS ~ silent                   }....................
#FIXME: Ideally, the entirety of this function's logic should be shifted into
#run_code_with_options_assembled(). After all, detecting whether or not
#"/dev/fd/1" is redirected to "/dev/null" or not *SHOULD* be a trivial task, at
#which point such function can implicitly decide to add silent-specific options.
#If this is the case, excise this function away!
#FIXME: O.K.; this is indeed trivially discernable with code resembling:
#
#    >>> string pae
#    >>> :set_string_to_path_canonical pae /dev/stdout >/dev/null
#    >>> print "${pae}"
#    /dev/null
#FIXME: It'd be great to encapsulate this in a new function is_stdout_silent().

:func.doc <<'/---'
string run_code_silent_with_options(
    string command_prefix,
    string options_list_names,
    string command_arg1?, ...)

Silently run a command dynamically constructed from the passed arguments as
under run_code_with_options() and also appending
` ${list_name_first}_IF_SILENT` and ` ${list_name_first}_IF_NONINTERACTIVE` to
`${options_list_names}`, where `${list_name_first}` is the first shell word in
`${options_list_names}`.
/---
function run_code_silent_with_options() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one command prefix, one options list names string, and optional command arguments.'
    :str options_list_name_first__rcswo

    # The first shell word from the list of options list names, having the name
    # of the options list to be suffixed below.
    options_list_name_first__rcswo="$(get_string_word "${2}" 1)"

    # For each options list name given below, append such name to the passed
    # list of such names if such list exists.
    :str options_list_name_suffix__rcswo options_list_name__rcswo
    for  options_list_name_suffix__rcswo ('_IF_SILENT' '_IF_NONINTERACTIVE') {
        options_list_name__rcswo="${options_list_name_first__rcswo}${options_list_name_suffix__rcswo}"
        if { :List.is "${options_list_name__rcswo}" } {
            2+=" ${options_list_name__rcswo}"
        }
    }

    # Run such command. Avoid prepending such command with a call to
    # run_code_silent(), which inadvertently silences error output from
    # run_code_with_options(). Specifically, don't do this:
    #     run_code_silent run_code_with_options "${@}"
    run_code_with_options "${@}" '&>/dev/null'
#   run_code_with_options "${@}"
}
