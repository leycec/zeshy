#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*User-specific runners* (i.e., functions dynamically evaluating passed strings
as commands in a manner modifying the job status of such commands).
/---

# ....................{ RUNNERS                            }....................
#FIXME: Add examples.

:func.doc <<'/---'
:full run_code_as_superuser(+:str codes)

Run the passed code as the *superuser* (i.e., `root`).
/---
function run_code_as_superuser() {
    run_code_as_user "${@}" root
}


#FIXME: Rename all current instances of this function to run_command_as_user().
#Implementing a new run_code_as_user() would also be highly desirable, if a bit
#nontrivial. Consider the following "sudo" documentation:
#
#    -s [command]
#        The -s (shell) option runs the shell specified by the SHELL environment
#        variable if it is set or the shell as specified in the password database.
#        If a command is specified, it is passed to the shell for execution via the
#        shell's -c option.  If no command is specified, an interactive shell is
#        executed.
#
#Hence, if we set "SHELL=$(get_pathable_path)" *BEFORE* passing option "-s" to
#"sudo", I believe we can force such command to be interpreted under such shell
#-- achieving the desired generalization. Moderately awesome, no?
#
#Old thoughts on this issue:
#FIXME: zsh builtins and functions should be executable as
#other users, though it's probably non-trivial to do so. Perhaps prefix the
#command line with "zeshy" and augment "bin/zeshy" to handle passed commands?
#Yes, yes... something like this be close to it:
#
#   :pathable.is "${command_name}" or sudo -E "zeshy --command '${*}'"
#
#Of course, that's not *QUITE* right. If ${*} contains either '"' or "'"
#characters, we need to quote protect such characters (and *ONLY* such
#characters, yes?). Not terribly difficult, but contemplate.

:func.doc <<'/---'
:full run_code_as_user(+:str codes :str username)

Run the passed code as the passed user.
/---
# Since "sudo" performs password caching (and typically stronger security),
# prefer "sudo" if available.
if { :pathable.is sudo } {
    #FIXME: It'd be nice to support a custom password prompt. See option "-p":
    #"The -p (prompt) option allows you to override the default password prompt
    #and use a custom one. The following percent (‘%’) escapes are supported..."
    function run_code_as_user() {
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Synchronize changes below.
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        die_unless_args_2_or_more\
            'Expected one or more shell words, optional arguments, and one username.'
        :str username__rcau=${@[-1]} command_name__rcau
        :args.pop 1

        # If the user under which to run the passed command is the current user,
        # defer to the run() command and immediately return.
        if :is ${username__rcau} == $(get_user) :si {
            { :code.run "${@}" } :=status.report
        }

        #FIXME: This is awful. Eliminate this after refactoring this function
        #into a macro, at which point the caller will be passing code blocks
        #rather than raw strings. Arguments should *NEVER* be silently subjected
        #to shell word splitting, as is performed below.

        # If the first non-option argument passed to "sudo" is *NOT* a pathable,
        # "sudo" fails with an error resembling:
        #
        #    >>> sudo "/etc/init.d/mpd restart"
        #    sudo: /etc/init.d/mpd restart: command not found
        #
        # To avoid this, if this option is *NOT* a pathable, split all passed
        # arguments into shell words. This accounts for situations in which the
        # caller concatenated the command to be run into a single (or perhaps
        # only several) arguments to this function.
        if { :not :pathable.is "${1}" } {
            :args.set "${(z)@}"
        }

        # If the command to be run is the zsh-specific command() builtin, ignore
        # this builtin by removing the first shell word from the argument list.
        # The command() builtin is *NOT* an actual command and hence cannot be
        # run by the sudo() command; attempting to do so fails with an obscure
        # error message resembling:
        #     sudo: command: command not found
        if :is ${1} == 'command' :si {
            :args.shift 1
        }

        # Run this command under this user. Dismantled, this is:
        #
        # * "-E", preserving all environment variables in the current shell when
        #   running such command.
        #
        # Prefer "${@}" to "${*}", as "sudo" expects a list of command name and
        # arguments rather than a single command string.
        if :is ${username__rcau} == 'root' :si {
            { command sudo -E "${@}" } :=status.report
        } else {
            { command sudo -E -u "${username__rcau}" "${@}" } :=status.report
        }
    }
# Else, defer to "su".
} else {
    function run_code_as_user() {
        # See above.
        die_unless_args_2_or_more\
            'Expected one or more shell words, optional arguments, and one username.'
        :str username__rcau=${@[-1]} command_name__rcau
        :args.pop 1
        if :is ${username__rcau} == $(get_user) :si {
            { :code.run "${@}" } :=status.report
        }
        if :is ${1} == 'command' :si {
            :args.shift 1
        }

        # Prefer "${*}" to "${@}", as "su" expects only a single command string
        # rather than a list of command name and arguments.
        { command su -p -c "${*}" "${username__rcau}" } :=status.report
    }
}
