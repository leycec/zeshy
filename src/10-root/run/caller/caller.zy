#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Callers* (i.e., the runnable calling the current runnable).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :die_unless_caller_caller(
    ?:str error_message='No runnable called the current runnable (e.g., due to being called directly from the command line).')

Throw an exception with the passed message unless this function was called by a
runnable that itself was called by a runnable.

== See Also ==

* :is_caller_caller().
/---
function :die_unless_caller_caller() {
    # For obvious reasons, inline the implementation of :is_caller_caller()
    # rather than call such function here.
    die_unless_args_0_to_1 'Expected optional error message.'
    (( ${#funcstack} >= 3 )) :or :die\
        "${2-No runnable called the current runnable (e.g., due to being called directly from the command line).}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_caller_caller()

Report success if this function was called by a *runnable* (i.e., function or
script), which itself was called by a runnable. Equivalently, report success if:

* A *caller's caller* (i.e., runnable that called the runnable that called this
  function) exists.
* The call stack contains at least three runnables (in the context of this
  function).
/---
function :is_caller_caller() {
    die_if_args
    (( ${#funcstack} >= 3 ))
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :Caller.set(:Str str_name)

Set the passed string variable to the name of the *caller's caller* (i.e.,
runnable that called the runnable that called this function). If no such caller
exists (e.g., this function was either called directly from the command line or
by a runnable called directly from the command line), an exception is thrown.

== Caller Names ==

If such caller was:

* A `zeshy` function, this is that function's name.
* A `zeshy` script, this is the absolute _or_ relative path this script was
  originally run as.
* An evaluation, this is `(eval)`.
/---
function :Caller.set() {
    die_unless_arg 'Expected one string name.'
    :die_unless_caller_caller
    :Str.set "${1}" "${funcstack[3]}"
}
