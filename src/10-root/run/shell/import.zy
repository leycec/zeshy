#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*One-time-only shell script importation* (i.e., avoiding sourcing scripts
already sourced under the current shell).

== Motivation ==

For both efficiency and simplicity, `zeshy` prefers implicitly autoloading
functions from `zsh` digest files to explicitly importing scripts defining such
functions. Third-party scripts lacking builtin support for digest recompilation,
however, typically prefer the latter, more traditional approach -- resembling
package importation in higher-level languages (e.g., `import()` under Python,
`require()` under Ruby).
/---

# ....................{ GLOBALS                            }....................
:map.global ZY_IMPORTED_PATHNAME_TO_MTIME <<'/---'
Map from each pathname imported by import_shell_script() to the modification
time for that path at the time of that call.
/---

# ....................{ IMPORTERS                          }....................
:func.doc <<'/---'
:str import_shell_script(:str filename *:str args)

Source the passed `zeshy` shell script and pass the sanity if this
script has either not been previously sourced by this function _or_ has been
externally modified since the last such sourcing; else, return silently.
/---
function import_shell_script() {
    die_unless_args 'Expected one filename and optional script arguments.'
    :str pathname="${1}"
    :int mtime
    :args.shift 1

    # Canonicalize the path so as to ensure the dictionary lookup below
    # successfully compares it against a previously canonicalized path. Since
    # importable shell scripts are never shell-specific, calling
    # :path.canonicalize() is safe here.
    :path.canonicalize "${pathname}"
    die_unless_file "${pathname}"

    #FIXME: Subshells are horrible!

    # Modification time of this script.
    mtime="$(:path.mtime "${pathname}")"

    # If this script has not yet been imported or has been but has changed since
    # being imported, (re)import this script.
    if { :not :Map.is_key ZY_IMPORTED_PATHNAME_TO_MTIME "${pathname}" :or
        (( mtime != ${ZY_IMPORTED_PATHNAME_TO_MTIME[${pathname}]} )) } {
        # Record this script as being imported prior to doing so, thus
        # preventing infinitely recursive reimportation should this or another
        # script imported by this script attempt to import this script again.
        ZY_IMPORTED_PATHNAME_TO_MTIME[${pathname}]="${mtime}"

        #FIXME: Print such message *ONLY* if zeshy debugging is enabled.
        #Perhaps we want a new function print_message_item_if_debug()?

        # Source such script.
        print_message_item "Sourcing \"${pathname}\"."
        :source_script "${pathname}" "${@}" :and :status.report_last
    }
}


:func.doc <<'/---'
:str import_shell_scripts(+:str filenames)

For each passed `zeshy` shell script that has _not_ been previously sourced by
this function _or_ has been externally modified since the last such sourcing,
source this script with no sanity.

== See Also ==

* import_shell_script().
/---
function import_shell_scripts() {
    die_unless_args 'Expected one or more filenames.'
    :str script_name
    for  script_name ("${@}") {
        import_shell_script "${script_name}" :or :status.report_last
    }
}
