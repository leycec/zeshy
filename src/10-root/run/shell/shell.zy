#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Shells* (i.e., command line interpreters for shell scripting languages,
implementing the command line interface (CLI) on Unix-like operating systems).
/---

# ....................{ GLOBALS ~ emulatable               }....................
:str.global ZY_SHELL_EMULATABLE_DIRECTLY_GLOB='(zsh|sh|ksh|csh)' <<'/---'
Glob matching all shells directly emulatable by `zsh`.
/---

:str.global\
    ZY_SHELL_EMULATABLE_INDIRECTLY_GLOB='(zeshy|(|a|ba|c|da|k|mk|pdk|re|tc|z)sh)'\
    <<'/---'
Glob matching all shells implicitly emulatable by `zsh` and hence sourceable by
:source_script().
/---

:map.global ZY_SHELL_NAME_TO_EMULATABLE_NAME <<'/---'
Map from shell name to the name of the `zsh`-emulatable shell closest in
ancestry and hence operation to the former shell if a sufficiently close shell
exists. `zsh`-emulatable shells are those explicitly accepted by the emulate()
builtin -- at present, only `sh`, `csh`, `ksh`, and `zsh` itself.
/---
ZY_SHELL_NAME_TO_EMULATABLE_NAME=(
    # Bourne shell variants.
    'ash'  'sh'
    'bash' 'sh'
    'dash' 'sh'
    'resh' 'sh'
    'sh'   'sh'

    # csh variants.
    'csh'  'csh'
    'tcsh' 'csh'

    # ksh variants.
    'ksh'   'ksh'
    'mksh'  'ksh'
    'pdksh' 'ksh'

    # zsh variants.
    'zsh'   'zsh'
    'zeshy' 'zeshy'
)

# ....................{ GLOBALS ~ all                      }....................
:str.global\
    ZY_SHELL_GLOB=${ZY_SHELL_EMULATABLE_INDIRECTLY_GLOB[1,-2]}'|fish)'\
    <<'/---'
Glob matching all known Unix-like shells, whether emulatable by `zsh` or not.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_shell_emulatable(
    string shell_name,
    string error_message = "Shell \"${shell_name}\" not emulatable.")

Throw an exception with the passed message unless the passed shell is
emulatable by `zsh`. See is_shell_emulatable() for further details.
/---
function :die_unless_shell_emulatable() {
    die_unless_args_1_to_2\
        'Expected one shell name and optional error message.'
    :is_shell_emulatable "${1}" :or {
        :str shell_name="${1}"
        :die "${2-Shell \"${shell_name}\" not emulatable.}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_shell_emulatable(string shell_name)

Report success if the passed shell is emulatable by `zsh`. Specifically, report
success if such shell satisfies the following equivalent conditions:

* Matches glob ${ZY_SHELL_EMULATABLE_INDIRECTLY_GLOB}.
* Is a key of map ${ZY_SHELL_NAME_TO_EMULATABLE_NAME}.
/---
function :is_shell_emulatable() {
    die_unless_arg 'Expected one shell name.'
    :str.^=.is "${1}" "${ZY_SHELL_EMULATABLE_INDIRECTLY_GLOB}"
}
