#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`zsh` shell scripts.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
string die_unless_zsh_script_valid(
    string pathname,
    string error_message = "\"${pathname}\" not a valid zsh script")

Throw an exception with the passed message unless the passed path is a valid
`zsh` script. See is_zsh_script_valid() for further details.
/---
function die_unless_zsh_script_valid() {
    die_unless_args_1_to_2\
        'expected one filename and optional error message'
    string filename="${1}"
    is_zsh_script_valid "${filename}" or
        :die "${2:-\"${filename}\" not a valid zsh script}"
}

# ....................{ TESTERS                            }....................
#FIXME: This probably returns false positives for Zeshy scripts due to our use
#of global aliases: namely, both "[[ ]]" and "is si" are invalid under Zeshy
#but this function (probably!) only reports the former to be invalid, thus
#returning false positives for edge case errors. There probably isn't much we
#can do about this; though, I wonder if manually passing "-c 'alias -g is=[['"
#and such would induce zsh to define such global aliases prior to testing the
#passed script. No idea, but conceivably worth a shot.

:func.doc <<'/---'
[status: boolean] is_zsh_script_valid(string filename)

Return success if the passed `zsh` script is syntactically valid.
/---
function is_zsh_script_valid() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"
    :file.text.die_unless "${filename}"

    # Test such script.
    command zsh -o no_exec -- "${filename}"
}

# ....................{ COMPACTERS                         }....................
:func.doc <<'/---'
void compact_zsh_script_to_script(string source_script, string target_script)

Compact the passed source to target `zsh` script without modifying such source.
Such target will be an exact duplicate of such source, excluding all extraneous
comments and whitespace. If such target already exists, throw an exception. See
compact_zsh_script() for further details.
/---
function compact_zsh_script_to_file() {
    # Validate passed arguments.
    die_unless_args_2 'expected one source filename and one target filename'
    string script_source="${1}" script_target="${2}"
    print_message_item\
        "compacting \"${script_source}\" to \"${script_target}\"..."

    # Compact such script.
    get_zsh_script_contents_compacted "${script_source}" >"${script_target}"
}

:func.doc <<'/---'
string get_zsh_script_contents_compacted(string filename)

Get the contents of the passed `zsh` script in *compacted form* (i.e., excluding
all extraneous comments and whitespace but otherwise identical to such script),
suitable for serialization back to disk as a compacted script. Such scripts
typically run marginally faster than their uncompacted equivalents. It should be
noted, however, that even compacted scripts run significantly slower than the
equivalent functions autoloaded into a `zsh` digest file.
/---
function get_zsh_script_contents_compacted() {
    # Validate passed arguments. Ideally, call die_unless_zsh_script_valid()
    # rather than :file.text.die_unless() to do so; sadly, the former fails to
    # validate working zeshy scripts (e.g., topmost component "main").
    die_unless_arg 'expected one filename'
    string script="${1}" script_text
    list script_words
    :file.text.die_unless "${script}"

    # Compact such script. For efficiency:
    #
    # * Get script contents with zsh module "mapfile", as in get_file_text().
    # * Avoid copying script contents with function calls (e.g., :stdout.echo(),
    #   write_file_with_string()).
    #
    # *PRAISE BE TO ZELDA*, this actually works!
    :load_module_mapfile
    {
        # For safety, prefix such script with the canonical zsh shebang line.
        get_zsh_shebang_line

        #FIXME: For efficiency, combine the following two operations to:
        #
        #    :stdout.echo "${(Z:Cn:)mapfile[${script}]}"
        #
        #zsh *SHOULD* implicitly handle all required conversions internally.

        # Split comments and whitespace from such script into all remaining
        # shell words. Dismantled, this is:
        #
        # * "(Z:C:)", splitting into shell words, discarding comments and non-
        #   newline whitespace, and converting newlines to semicolons.
        script_words=( ${(Z:Cn:)mapfile[${script}]} )

        # Return such list concatenated to a string.
        :stdout.echo "${script_words[*]}"
    } always {
        :unload_module_mapfile
    }
}

#FIXME: Great testbed, until we implement proper unit testing.
#function cpow() {
#    remove_file_if_found "${HOME}/tmp/meow"
#    compact_zsh_script_to_file "${HOME}/tmp/main" "${HOME}/tmp/meow"
#    print_file_text "${HOME}/tmp/meow"
#}
