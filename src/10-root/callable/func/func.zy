#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core function functionality.
/---

#FIXME: Rename "_function" to "_func" everywhere below.

# ....................{ GETTERS                            }....................
#FIXME: Horrid! Refactor into setters.

:func_ ':str get_function_binding(+:str/:func argv)' :func{
    typeset -f -- "${@}"

#FIXME: Excessive examples. Split elsewhere.
}:func <<'/---'
Get *bindings* (i.e., declarations with definitions) for all passed functiones,
in the passed order.

== Examples ==

==========================================
[source]
------------------------------------------
>>> function on_technical_fixes() {
...     :stdout.echo\
...    "Ever since the Industrial Revolution, Western society has benefited from
...     science, logic, and reductionism over intuition and holism.
...     Psychologically and politically we would much rather assume that the
...     cause of a problem is \"out there,\" rather than \"in here.\" It's
...     almost irresistible to blame something or someone else, to shift
...     responsibility away from ourselves, and to look for the control knob,
...     the product, the pill, the technical fix that will make a problem go
...     away."
... }
>>> function on_complex_systems() {
...     :stdout.echo\
...    "Serious problems have been solved by focusing on external agents —
...     preventing smallpox, increasing food production, moving large weights
...     and many people rapidly over long distances. Because they are embedded
...     in larger systems, however, some of our \"solutions\" have created
...     further problems. And some problems, those most rooted in the internal
...     structure of complex systems, the real messes, have refused to go away.
...     Hunger, poverty, environmental degradation, economic instability,
...     unemployment, chronic disease, drug addiction, and war, for example,
...     persist in spite of the analytical ability and technical brilliance that
...     have been directed toward eradicating them. No one deliberately creates
...     those problems, no one wants them to persist, but they persist
...     nonetheless."
... }
>>> function on_systems_problems() {
...     :stdout.echo\
...    "That is because they are intrinsically systems problems — undesirable
...     behaviors characteristic of the system structures that produce them.
...     They will yield only as we reclaim our intuition, stop casting blame,
...     see the system as the source of its own problems, and find the courage
...     and wisdom to restructure it."
... }
>>> get_string_lines_matching_glob "$(get_function_binding\
...     on_technical_fixes on_complex_systems on_systems_problems)"\
...     ('function'|[[:space:]]#':stdout.echo'|'}')*
function on_technical_fixes() {
    :stdout.echo\
}
function on_complex_systems() {
    :stdout.echo\
}
function on_systems_systems() {
    :stdout.echo\
}
------------------------------------------
==========================================
/---

:func_ ':str get_function_body(:str/:func func_name)' :func{
    :str func_binding
    :list func_binding_lines

    # zsh provides direct means of getting function bindings but *NOT* bodies.
    # The former are formatted as follows, with lines nested by incremental
    # tabbing rather than spacing:
    #
    #     function on_ideology() {
    #         :stdout.echo\
    #             "Growth for the sake of growth is the ideology of the cancer cell."
    #     }
    #
    # Given such a binding, the corresponding body is obtainable by stripping
    # the first and last lines as well as the first tab from all other lines.

    # This function's binding.
    func_binding="$(get_function_binding "${func_name}")"

    # List of all lines split on newline from this binding.
    :str.Lines "${func_binding}" func_binding_lines

    # Such function's body converted from such list as documented above.
    # Dismantled, this is:
    #
    # * "[2,-2]", excluding the first and last lines.
    # * "#$'\t'", stripping the first tab from each remaining line.
    #
    # Do *NOT* quote the outermost expansion.
    :stdout.echo_newlined ${${func_binding_lines[2,-2]}#$'\t'}
}:func <<'/---'
Get the *body* (i.e., implementation) of the function with the passed name.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_mechanistic_belief=\
...    "An answer might lie in the fact that economics is no more than a
...     mechanistic belief (though defended with fanatical vigour) that by
...     exchanging goods for money, countries can make themselves better off.
...     It is true that by buying from another country we can avoid resource
...     depletion and environmental degradation here, but that degradation is
...     transferred to the supplying country. If the country that sells us those
...     goods buys its materials from us, it avoids its own resource depletion
...     and environmental destruction and transfers the impact back to us. So
...     while we are all at it (and use each other's best economic advantage),
...     we cannot avoid environmental damage by trading with each other and thus
...     get perpetual environmental benefits like perpetual motion. Indeed, if
...     that worked, we could achieve absolute environmental integrity by just
...     selling our products to another country and then buying them back. That
...     proposition is clearly absurd. We shall see that globally no
...     environmental advantage can be gained from international trade and much
...     environmental capital is lost while amenity assets are destroyed in the
...     process."
>>> function on_fanatical_vigour() {
...     die_if_args
...     :stdout.echo "${on_mechanistic_belief}"
... }
>>> get_function_body on_fanatical_vigour
die_if_args
:stdout.echo "${on_mechanistic_belief}"
------------------------------------------
==========================================
/---

# ....................{ GETTERS ~ name                     }....................
#FIXME: Horrible for a number of obvious reasons -- particularly, as function
#names containing newlines break everything. Excise this function entirely,
#replaced with a setter aggregating together the keys of map globals
#${functions} and ${dis_functions}.

:func_ ':str get_functions()' :func{
    die_if_args
    typeset +f
}:func <<'/---'
Newline-delimited string listing the names of all functions.
/---

:func_ ':str get_functions_math()' :func{
    functions -M
}:func <<'/---'
Newline-delimited string listing all *user-defined math function* (i.e.,
functions declared by `functions -M`).
/---

# ....................{ SETTERS                            }....................
:func_ ':void set_list_to_functions(:List list_name) [
    var_name_suffix="__sltf"]' :func{
    :str.Lines "$(get_functions)" "${list_name__sltf}"
}:func <<'/---'
Set the list variable with the passed name to the set of all function names (in
arbitrary order).
/---

#FIXME: In lieu of unit tests...
#function payy() {
#    list function_names
#    set_list_to_functions function_names
#    :List.print function_names
#}

# ....................{ PRINTERS                           }....................
:func_ ':str print_function(+:str/:func func_names)' :func{
    #FIXME: Syntax highlight this output, ideally via Pygments.

    # Print these functions.
    {
        typeset -f -- "${@}"
    } | page_stdin
}:func <<'/---'
Print a human-readable synopsis of the passed functions, typically including
syntax-highlighted declarations and definitions of such functions.
/---

# ....................{ PRINTERS ~ line                    }....................
:func_ ':str print_function_line_contextually(
    :str/:func function_name :int@positive line_number)' :func{
    #FIXME: Sadly, this isn't quite right. The line number appears to be
    #relative to the original function definition in the source file. Here's a
    #simple test:
    #
    #    command dirs -p | number_lines_highlighting_line 0
    #
    #zsh reports the failing command on a line number that could only be the
    #original file including comments and blank lines. Sadly, that means we
    #can't reliably highlight line numbers for any functions except those defined
    #in the Zeshy digest. It also means we have to manually map the function
    #name to the exact block of code in the exact Zeshy file defining such
    #function, taking into account things like conditional themes. (Commands
    #needn't be considered. But themes must.) It's all highly annoying, and
    #frankly somewhat out of bounds at the moment.
    #
    #How about this: for the moment, drop the line number highlighting. It's
    #erroneous and unhelpful. When time permits re-implement this conditional to:
    #
    #* If this function is a Zeshy function (i.e., is compiled into the Zeshy
    #  digest), perform the above behavior with line number highlighting using
    #  "awk" and a similar script to below.
    #* Otherwise, print a code listing with no such highlighting using "nl".
    #
    #Because this probably relies on advanced Zeshy functionality not readily
    #implementable without access to the Zeshy codebase, we should segregate
    #this into an autoload function (say, print_function_highlighting_line()).
    #Then test here for the existence of such function. If available, call it;
    #otherwise, do nothing. (No error, if it doesn't exist yet.)
    #FIXME: Actually, this *IS* readily doable. See @{call_stack} FIXME
    #commentary for further details.

    # If the most recent stack frame signifies an existing function, print that
    # function's definition to standard error as line-numbered code. Since line
    # numbers in stack frames start from the first line of such definition while
    # the default printer for such definitions starts from the prior line
    # declaring the function name, do *NOT* number the first printed line.
    :stdout.echo_newline
    :stdout.echo "${funcname_first}() failed on line ${fileline_first}."

    whence -f -- "${funcname_first}" | command awk -vNRBAD=${fileline_first} '
# If the function name, print a hyphen in place of the current line number
# followed by the name.
NR == 1 {
    printf("%6s   %s\n", "-", $0)
}
# If any line other than the erroneous line, print the current line number
# followed by the line. (Due to the prefixing function name declaration, the
# current line number is one larger than expected. Subtract one for comparison.)
NR > 1 && NR-1 != NRBAD {
    # If this line is "}" and hence the end of this function definition, print
    # hyphens in place of the current line number followed by the "}".
    if ($0 == "}") {
        NREND=NR
        gsub(/./, "-", NREND)
        printf("%6s   }\n", NREND)
    }
    else {
        printf("%6d   %s\n", NR-1, $0)
    }
}
# If the erroneous line, print the current line number prefixed and suffixed by
# pleasing ASCII arrows. (What? YOU CAN DO BETTER!?)
NR-1 == NRBAD {
    # Number of digits in the current line number.
    NRLEN = length(NR-1);
         if (NRLEN==1) {NRNOW = " <-~ " NR-1}
    else if (NRLEN==2) {NRNOW = "<-~ " NR-1}
    else if (NRLEN==3) {NRNOW = "<- " NR-1}
    else               {NRNOW = NR-1}       # if true, your function is horrid.
    printf("%s ~->   %s\n", NRNOW, $0)
}' 2>&1
}:func <<'/---'
Print the passed line of the function with the passed name contextually.

If this function is sufficiently small (e.g., less than six lines), the complete
function definition is printed; otherwise, only the passed line and some number
of lines preceding and succeeding this line of this function definition is
contextually printed.
/---

# ....................{ UNDEFINERS                         }....................
:func_ ':void :undefine_func(+:str/:func argv)' :func{
    unfunction -- "${@}"
}:func <<'/---'
*Undefine* (i.e., murder, death, kill) all functions with the passed names.

If any such function does _not_ exist, an exception is thrown.
/---

# ....................{ DEFINERS ~ enable                  }....................
:func_ ':void disable_function(+:str/:func argv)' :func{
    disable -f -- "${@}"
}:func <<'/---'
Disable all functions with the passed names.

Disabled functions remain defined but uncallable until reenabled by
enable_function().
/---

:func_ ':void enable_function(+:str/:func argv)' :func{
    enable -f -- "${@}"
}:func <<'/---'
Enable all functions with the passed names.

Since all functions are enabled by default, this is useful for only undoing
prior calls to disable_function().
/---
