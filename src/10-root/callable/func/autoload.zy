#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Autoloadable functions* (i.e., functions defined in a just-in-time (JIT) manner
on the first call to such functions).

== See Also ==

* Section ``AUTOLOADING FUNCTIONS'' of `man zshmisc`, reference documentation
  for function autoloading.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_function_autoloadable(
    :str function_name
    ?:str error_message='Function ${function_name}() already defined or not found in the current \$\{FPATH\}.'
)

Throw an exception with the passed message unless the passed function is
autoloadable.

== See Also ==

* :is_func_autoloadable().
/---
function die_unless_function_autoloadable() {
    die_unless_args_1_to_2\
        'Expected one function name and optional error message.'
    :str function_name="${1}"
    :is_func_autoloadable "${function_name}" :or :die\
        "${2-Function ${function_name}() already defined or not found in the current \$\{FPATH\}.}"
}


:func.doc <<'/---'
:void :die_unless_functions_autoloadable(+:str func_names)

Throw an exception with a stock message unless all passed functions are
autoloadable.

== See Also ==

* :is_func_autoloadable().
/---
function :die_unless_functions_autoloadable() {
    die_unless_args_1_to_2\
        'Expected one function name and optional error message.'
    :is_func_autoloadable "${@}" :or {
        :str function_name
        for  function_name ("${@}") {
            :die_unless_function_autoloadable "${function_name}"
        }
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_func_autoloadable(+:str func_names)

Report success only if all passed functions are *autoloadable* (i.e., are
currently undefined _and_ found in the current function path ${FPATH}, typically
in a file of the same name in a directory in this list).

== See Also ==

* Section ``AUTOLOADING FUNCTIONS'' of `man zshmisc`.
/---
function :is_func_autoloadable() {
    die_unless_args 'Expected one or more function names.'

    # While zsh provides no explicit means of testing autoloadability
    # idempotently (i.e., without side effects), it *DOES* provide a means of
    # doing so non-idempotently (i.e., with side effects). Since such side
    # effects are undetectably reversible, we fake an idempotent test by first
    # performing a non-idempotent test and then undoing the side effects of such
    # test. This is rather obtuse, but the best we can currently do.
    #
    # To simplify such logic, note that if any such function is already defined
    # such function is *NOT* autoloadable. In such case, report failure.
    if { :func.is "${@}" } {
        :status.report_failure
    # Else, all such functions are undefined, implying such functions may be
    # safely undefined if autoload() defines such functions.
    } else {
        # Attempt to define all such functions via ${PATH}, reporting:
        #
        # * Success if all such functions were both undefined and autoloadable.
        # * Failure otherwise, in which case autoload() prints an ignorable
        #   error to standard error.
        #
        # Since such code is guaranteed to throw no exception, undo such
        # definitions with a low-level zsh rather than high-level zeshy
        # exception handler (e.g., ":try{...}").
        {
            { { autoload +X -- "${@}" } :=silent } :=status.report
        # In either case, undefine all functions defined by autoload() above.
        } always {
            :undefine_func "${@}"
        }
    }
}

# ....................{ AUTOLOADERS                        }....................
:func.doc <<'/---'
:void autoload_function(+:str func_names)

Autoload the passed previously undefined functions.

This function defines each such function to load its true definition from the
current function path on the first call to this function. If these functions are
non-`zeshy` `zsh` functions, consider calling :autoload_function_zsh() instead
to ensure expected behaviour.

== See Also ==

* :is_func_autoloadable().
/---
function autoload_function() {
    # Since autoload() fails to report failure when some such function is not
    # autoloadable, do so before such call.
    die_unless_args 'Expected one or more function names.'
    :die_unless_functions_autoloadable "${@}"

    # Autoload these functions. Since these functions s assumed to conform to
    # zeshy rather than zsh standards, avoid passing option "-U" suppressing
    # alias expansion. Dismantled, this is:
    #
    # * "-z", forcing zsh- rather than ksh-style autoloads and hence ignoring
    #   shell option "ksh_autoload".
    #
    # See :autoload_function_zsh() for further details.
    autoload -z -- "${@}"
}

# ....................{ AUTOLOADERS ~ zsh                  }....................
#FIXME: Add example demonstrating the need to call functions autoloaded in this
#manner with :code.run_under_zsh().

:func.doc <<'/---'
:void :autoload_function_zsh(+:str func_names)

Autoload all passed previously undefined non-`zeshy` `zsh` functions.

Since these functions will be both loaded and called under *`zsh` emulation*
(i.e., default `zsh` options and traps), only pass non-`zeshy` `zsh` functions
to this function (typically, autoloadable functions bundled with `zsh` itself).

== Caveats ==

*Non-`zeshy` functions are only safely callable when passed to
:code.run_under_zsh().* Nearly all such functions assume standard `zsh`
options and traps (particularly the lack of a ZERR trap throwing exceptions on
nonzero exit status) and hence _cannot_ be safely called in the same manner as
conventional `zeshy` functions.

== See Also ==

* :autoload_function().
/---
function :autoload_function_zsh() {
    die_unless_args 'Expected one or more function names.'
    :die_unless_functions_autoloadable "${@}"

    # Autoload these functions.
    ::autoload_function_zsh_unsafe "${@}"
}


:func.doc <<'/---'
:void ::autoload_function_zsh_unsafe(+:str func_names)

Autoload all passed previously undefined non-`zeshy` `zsh` functions _without_
checking whether such functions are autoloadable.

This function circumvents inefficiencies in the current implementation of
:die_unless_functions_autoloadable(), but should _only_ be passed functions
guaranteed to be autoloadable.

== See Also ==

* :autoload_function_zsh().
/---
function ::autoload_function_zsh_unsafe() {
    die_unless_args 'Expected one or more function names.'

    # Autoload such non-zeshy functions. Dismantled, this is:
    #
    # * "-U", suppressing alias expansion. For safety, this prevents expansion
    #   of zeshy aliases when declaring core zsh functions implemented with no
    #   such aliases in mind.
    # * "z", forcing zsh- rather than ksh-style autoloads and hence ignoring
    #   shell option "ksh_autoload".
    #
    # Ideally, such functions would be autoloaded under "sticky" zsh emulation,
    # ensuring such functions would be both loaded and called as zsh functions
    # (e.g., with default zsh options and traps). Unfortunately, doing so is
    # only partially feasible. The following command ensures such functions
    # would be both loaded and called with default zsh options but *NOT* traps:
    #
    #     emulate -R zsh -c "autoload -Uz -- ${(q)*}"
    #
    # Attempting to pass option -L to localize traps as well fails with error
    # "emulate: option -L incompatible with -c". Until such issues are resolved,
    # there remains no benefit to only partially emulating a zsh environment --
    # particularly as there exist other significant issues with doing so:
    #
    # * Functions autoloaded under emulation are specific to the current
    #   function and hence undefined on such function returning. Ensuring such
    #   functions remain callable thus requires converting this function into an
    #   alias accepting multiple arguments -- a nontrivial zeshy feature.
    # * Even converting this function into such an alias would probably *NOT*
    #   suffice to allow autoloaded zsh functions to be called globally (e.g.,
    #   from the CLI, other functions, or other scripts), thus rendering such
    #   autoloading largely useless. (After all, the principal benefit of
    #   autoloading functions is to obviate the need to explicitly load the
    #   script defining such function prior to calling such function).
    #
    # In short, this function will probably *NEVER* autoload zsh functions under
    # "sticky" emulation.
    autoload -Uz -- ${@}
    # print "autoloading: ${(q)@}"
}

# ....................{ STARTUP                            }....................
# Autoload zsh module-defined functions at the beginning rather than end of
# zeshy startup, thus avoiding errors when subsequent zeshy startup functions
# call such functions.
#
# Unlike zsh modules, do *NOT* autoload stock zsh functions before sourcing the
# zeshy codebase. For both efficiency and robustness, top-level zeshy functions
# should *NEVER* call autoloadable zsh functions requiring zsh emulation.
:hook.startup.add_first ::startup.autoload_funcs_zsh


:func.doc <<'/---'
:void ::startup.autoload_funcs_zsh()

Autoload all *autoloadable non-`zeshy` `zsh` functions* (i.e., all non-dotfile
files in directories in the current function path).

This typically includes only functions bundled with `zsh` itself.
/---
function ::startup.autoload_funcs_zsh() {
    die_if_args
    :list function_names

    #FIXME: Be nice to generalize this into a new list setter -- say,
    #:set_list_to_dir_file_basenames_sans_dotfiles(). Call it here like so:
    #
    #:set_list_to_dir_file_basenames_sans_dotfiles function_names "${fpath[@]}"
    #
    #Nice, eh?

    # Do *NOT* attempt to autoload extraneous dotfiles as zsh functions (e.g.,
    # ".keep_app-shells_zsh-0" under Gentoo). While we could also effect this
    # with an exclusion in the glob expression below (e.g.,
    # "${^fpath}/*~*/.[^/]#(.:t)"), this is presumably more efficient.
    :option.enable_local no_glob_dots

    # List of the names of all autoloadable functions in all directories in the
    # current function path. Happily, the set of all basenames of all non-
    # dotfile simple files in all directories in such list is exactly the set of
    # desired names. Dismantled, this is:
    #
    # * "${^fpath}", iteratively expanding to each directory containing
    #   autoloadable function files.
    # * "/*", non-recursively globbing all files and subdirectories of such
    #   directory.
    # * ".", excluding non-simple files (e.g., device files, directories).
    # * ":t", expanding to the basename of each such file.
    #
    # Ideally, zeshy would perform such autoloading at recompilation time.
    # Unfortunately, zsh cannot compile autoload stubs into digest files.
    function_names=( ${^fpath}/*(.:t) )

    # Autoload all such functions. Since such functions are guaranteed to be
    # autoloadable by the prior glob, avoid testing whether such functions are
    # autoloadable before doing so by calling a low-level autoloader.
    ::autoload_function_zsh_unsafe "${function_names[@]}"
}
