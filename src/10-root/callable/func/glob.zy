#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Function name globbers* (i.e., functions matching a subset of the set of all
function names via extended glob expressions).
/---

# ....................{ GETTERS                            }....................
# string get_functions_matching(string glob)
#
# Get all function names matching the passed glob, delimited by newlines: e.g.,
#
#     >>> get_functions_matching 'get_z*s*h*_version'
#     get_zeshy_version
#     get_zsh_version
function get_functions_matching() {
    # Validate passed arguments.
    die_unless_arg 'expected one glob'

    # Match such glob. Dismantled, this is:
    #
    # * "-fm", matching only function names (rather than all "object" names).
    # * "+", printing only function names (rather than function definitions).
    typeset -fm '+' -- "${1}"
}

# ....................{ SETTERS                            }....................
:func_ ':void set_list_to_function_matches(:List list_name :str/:glob glob) [
    var_name_suffix="__sltfm"]' :func{
    # Newline-delimited string of all function names matching this glob.
    :str function_names__sltfm
    function_names__sltfm=$(get_functions_matching "${glob__sltfm}")

    # List of all function names matching this glob.
    :str.Lines "${list_name__sltfm}" "${function_names__sltfm}"
}:func <<'/---'
Set the list variable with the passed name to the set of all function names
matching the passed glob (in arbitrary order).

== Examples ==

$$$ :list function_names
$$$ set_list_to_function_matches function_names '*test_z[aeou]shy'
$$$ :stdout.echo ${function_names[1]}
unit_test_zeshy
/---
