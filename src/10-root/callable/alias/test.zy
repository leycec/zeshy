#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *alias testers* (i.e., functions testing alias metadata).
/---

# ....................{ EXCEPTIONS                         }....................
#FIXME: Nonsense. Globally rename to :alias.die_unless() and then remove this
#function entirely. (See below.) Custom exception messages are awful.
:func.doc <<'/---'
:void die_unless_alias(
    string alias_name,
    string error_message = "Alias ${alias_name}() not found.")

Throw an exception with the passed message unless the passed alias exists. See
is_alias() for further details.
/---
function die_unless_alias() {
    die_unless_args_1_to_2 'Expected one alias name and optional error message.'
    :str alias_name="${1}"
    is_alias "${alias_name}" or :die "${2-Alias ${alias_name}() not found.}"
}

# ....................{ EXCEPTIONS ~ plural                }....................
#FIXME: Rename to :alias.die_unless().
:func.doc <<'/---'
void die_unless_aliases(string alias_name1, ...)

Throw an exception with a stock message unless all passed aliases exist. See
is_alias() for further details.
/---
function die_unless_aliases() {
    die_unless_args 'Expected one or more alias names.'
    :str alias_name
    for     alias_name ("${@}") { die_unless_alias "${alias_name}" }
}

#FIXME: Rename to :alias_command_or_word.die_unless().
:func.doc <<'/---'
void :die_unless_aliases_nonsuffix(string alias_name1, ...)

Throw an exception with a stock message unless all passed non-suffix aliases
exist. See is_alias_nonsuffix() for further details.
/---
function :die_unless_aliases_nonsuffix() {
    die_unless_args 'Expected one or more alias names.'
    :str alias_name
    for     alias_name ("${@}") { :die_unless_alias_nonsuffix "${alias_name}" }
}

# ....................{ EXCEPTIONS ~ single                }....................
#FIXME: Nonsense. Globally rename to :alias_command_or_word.die_unless() and
#then remove this function entirely. (See above.) Custom exception messages are
#awful.
:func.doc <<'/---'
void :die_unless_alias_nonsuffix(
    string alias_name,
    string error_message = "Simple or global alias ${alias_name}() not found.")

Throw an exception with the passed message unless the passed non-suffix alias
exists. See is_alias_nonsuffix() for further details.
/---
function :die_unless_alias_nonsuffix() {
    die_unless_args_1_to_2\
        'Expected one non-suffix alias name and optional error message.'
    is_alias_nonsuffix "${1}" :or {
        :str alias_name="${1}"
        :die "${2-Simple or global alias ${alias_name}() not found.}"
    }
}

#FIXME: Rename to :alias_command.die_unless().
:func.doc <<'/---'
void :die_unless_alias_command(
    string alias_name,
    string error_message = "Simple alias ${alias_name}() not found.")

Throw an exception with the passed message unless the passed simple alias
exists. See :alias_command.is() for further details.
/---
function :die_unless_alias_command() {
    die_unless_args_1_to_2\
        'Expected one simple alias name and optional error message.'
    :alias_command.is "${1}" or {
        :str alias_name="${1}"
        :die "${2-Simple alias ${alias_name}() not found.}"
    }
}

#FIXME: Rename to :alias_word.die_unless().
:func.doc <<'/---'
void die_unless_alias_general(
    string alias_name,
    string error_message = "Global alias ${alias_name}() not found.")

Throw an exception with the passed message unless the passed global alias
exists. See is_alias_general() for further details.
/---
function die_unless_alias_general() {
    die_unless_args_1_to_2\
        'Expected one global alias name and optional error message.'
    is_alias_general "${1}" or {
        :str alias_name="${1}"
        :die "${2-Global alias ${alias_name}() not found.}"
    }
}

# ....................{ TESTERS                            }....................
#FIXME: Rename to :alias.is().
:func.doc <<'/---'
[status: bool] is_alias(string alias_name1, ...)

Report success if all passed *aliases* (i.e., simple, global, or suffix
aliases) exist.
/---
function is_alias() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with testers below.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate sanity.
    die_unless_args 'Expected one or more alias names.'

    # Test such aliases. Technically, such tests are also implementable by
    # calling builtin alias(). However, doing so requires explicitly escaping
    # all alias-reserved characters in such names as well as squelching such
    # builtin's standard output, rendering the current implementation more
    # straightforward (if not necessarily more efficient): e.g.,
    #
    #    :list alias_names
    #    :set_list_to_alias_name_escaped alias_names "${@}"
    #    :str alias_name
    #    for     alias_name ("${alias_names[@]}") {
    #        alias -- "${alias_name}" or alias -s -- "${alias_name}" or
    #            :failure.report
    #    } :=stdout.silent
    :str alias_name
    for     alias_name ("${@}") {
        # If such alias does *NOT* exist (i.e., is neither a simple, global, or
        # suffix alias), report failure.
        (( ${+aliases[${alias_name}]} +\
           ${+dis_aliases[${alias_name}]} +\
           ${+galiases[${alias_name}]} +\
           ${+dis_galiases[${alias_name}]} +\
           ${+saliases[${alias_name}]} +\
           ${+dis_saliases[${alias_name}]} )) :or
            :failure.report
    }

    # Else, all such aliases exist. Report jubilation.
    :success.report
}

# ....................{ TESTERS ~ nonsuffix                }....................
:func.doc <<'/---'
[status: bool] :alias_command.is(string alias_name1, ...)

Report success if all passed *simple aliases* (i.e., aliases conditionally
expanded only when in command position) exist.
/---
function :alias_command.is() {
    die_unless_args 'Expected one or more alias names.'

    # Ideally, such test should be implementable as:
    #
    #    { alias -- "${@}" } :=stderr.silent
    #
    # Unfortunately, such implementation fails for alias names containing
    # characters reserved for use in alias definition syntax (e.g., "="). In
    # particular, alias() *ALWAYS* reports success if the passed alias name
    # contains the literal substring "\=": e.g.,
    #
    #    # Note such alias to remain undefined, despite alias() succeeding.
    #    >>> alias 'utter\=fail' and :stdout.echo "This should not be."
    #    This should not be.
    #    >>> 'utter=fail'
    #    zsh: command not found: utter=fail
    #
    # The only alternative is to report success if such alias is either a
    # disabled or enabled simple or global alias, requiring four map lookups
    # during manual iteration. See :alias_command.is() for further details.
    :str alias_name
    for     alias_name ("${@}") {
        (( ${+aliases[${alias_name}]} + ${+dis_aliases[${alias_name}]} )) or
            :failure.report
    }
    :success.report
}

#FIXME: Rename to :alias_command_or_word.is().
:func.doc <<'/---'
[status: bool] is_alias_nonsuffix(string alias_name1, ...)

Report success if all passed *non-suffix aliases* (i.e., simple or global
aliases) exist. See :alias_command.is() and is_alias_general() for further
details.
/---
function is_alias_nonsuffix() {
    die_unless_args 'Expected one or more alias names.'
    :str alias_name
    for     alias_name ("${@}") {
        (( ${+aliases[${alias_name}]} +\
           ${+galiases[${alias_name}]} +\
           ${+dis_aliases[${alias_name}]} +\
           ${+dis_galiases[${alias_name}]} )) or
            :failure.report
    }
    :success.report
}

#FIXME: Rename to :alias_word.is().
:func.doc <<'/---'
[status: bool] is_alias_general(string alias_name1, ...)

Report success if all passed *global aliases* (i.e., aliases unconditionally
expanded, regardless of their positions in surrounding commands) exist.
/---
function is_alias_general() {
    # See :alias_command.is() for further details.
    die_unless_args 'Expected one or more alias names.'
    :str alias_name
    for     alias_name ("${@}") {
        (( ${+galiases[${alias_name}]} + ${+dis_galiases[${alias_name}]} )) or
            :failure.report
    }
    :success.report
}

# --------------------( WASTELANDS                         )--------------------
    # If at least one such alias is undefined, manually iterate such aliases
    # until discovering the first undefined such alias and throw an exception
    # given such alias. Such theatrics are necessitated by inadequacies in
    # builtin alias(), which always succeeds if piped to another command (e.g.,
    # page_stdin()).
    # is_alias "${@}" or {
