#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Alias setters* (i.e., functions setting passed variables to alias metadata).
/---

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :set_string_to_alias_nonsuffix_binding(:List list_name +:str alias_names)

Set the passed string variable to the concatenation of all bindings for the
passed *non-suffix aliases* (i.e., simple and global aliases) in the passed
order.

For each such alias, the corresponding binding is exactly one evaluable
command declaring _and_ defining this alias.

== Examples ==

.:set_string_to_alias_nonsuffix_binding()
==========================================
[source]
------------------------------------------
>>> :str alias_bindings
>>> :alias_word on_hard_landings=':stdout.echo\
...    "Energy has always been the basis of cultural complexity and it always
...     will be. The past clarifies potential paths to the future. One often-
...     discussed path is cultural and economic simplicity and lower energy
...     costs. This could come about through the \"crash\" that many fear - a
...     genuine collapse over a period of one or two generations, with much
...     violence, starvation, and loss of population."'
>>> :alias on_soft_landings=':stdout.echo\
...    "The alternative is the \"soft landing\" that many people hope for - a
...     voluntary change to solar energy and green fuels, energy-conserving
...     technologies and less overall consumption. This is a utopian alternative
...     that, as suggested above, will come about only if severe, prolonged
...     hardship in industrial nations makes it attractive, and if economic
...     growth and consumerism can be removed from the realm of ideology."'
>>> :set_string_to_alias_nonsuffix_binding alias_bindings\
...     on_hard_landings on_soft_landings
>>> get_string_lines_matching_glob "${alias_bindings}" 'alias '*
alias -g on_hard_landings=':stdout.echo\
alias on_soft_landings=':stdout.echo\
------------------------------------------
==========================================
/---
function :set_string_to_alias_nonsuffix_binding() {
    die_unless_args_2_or_more\
        'Expected one string name and one or more alias names.'
    :str string_name__sstanb="${1}"
    :list alias_names__sstanb
    :args.shift 1
    # :die_unless_aliases_nonsuffix "${@}"

    # Escape all alias-reserved characters in such names.
    :set_list_to_alias_name_escaped alias_names__sstanb "${@}"

    #FIXME: alias() appears to fail to tolerate alias names containing
    #alias-reserved characters, even when escaped above. This is easily tested
    #by defining an alias "}:catch" as follows:
    #
    #    :str alias_name='}:catch' alias_binding
    #    aliases[${alias_name}]=
    #
    #    # This fails. (Ugh.)
    #    :set_string_to_alias_nonsuffix_binding alias_binding "${alias_name}"
    #
    #So. What can we do here? The answer is fairly simple: test the argument
    #list of all passed alias names for a name containing an alias-reserved
    #character. If no such alias exists, just capture the output of
    #"$(alias -L ...)" as below. (Or perhaps not, given the expense of
    #subshells?) Else, manually iterate through such names and for each, append
    #whichever of ${aliases[${alias_name}]} or ${galiases[${alias_name}]}
    #exists to the passed string variable. *sigh*

    # Set such string.
    # :stdout.echo "aliases: ${alias_names__sstanb[*]}"
    :Str.set\
        "${string_name__sstanb}"\
        "$(alias -L -- "${alias_names__sstanb[@]}")"
}

# ....................{ SETTERS ~ list                     }....................
#FIXME: Add example.
:func.doc <<'/---'
:void :set_list_to_alias_name_escaped(:List list_name +:str alias_names)

Set the passed list to all passed alias names, escaping all *alias-reserved
characters* (i.e., characters reserved for use in alias() syntax, including
`=`, `"`).

== Motivation ==

While double-quoting function names containing *function-reserved characters*
(i.e., characters reserved for use in function() suffices to escape these
characters, double quoting alias names containing alias-reserved characters
does _not_ suffice to escape these characters. Instead, these characters _must_
be explicitly prefixed by `\`, which this function guarantees.
/---
function :set_list_to_alias_name_escaped() {
    die_unless_args_2_or_more\
        'Expected one list name and one or more alias names.'
    :str list_name__sltane="${1}"
    :args.shift 1

    # Set this list to these names.
    :List.items "${list_name__sltane}" "${@}"

    # Escape these characters in these names.
    :List.items.replace_^=.with_expansion\
        "${list_name__sltane}" [\"=[:space:]] '\\${MATCH}'
}

# ....................{ SETTERS ~ list : all               }....................
:func.doc <<'/---'
:void set_list_to_aliases(:List list_name)

Set the passed list to the names of all currently defined *aliases* (i.e.,
simple, global, and suffix aliases).
/---
function set_list_to_aliases() {
    die_unless_arg 'Expected one list name.'
    set_list_to_map_keys "${1}"\
        aliases  dis_aliases\
        galiases dis_galiases\
        saliases dis_saliases
}

# ....................{ SETTERS ~ nonsuffix                }....................
:func.doc <<'/---'
:void :set_list_to_aliases_global(:List list_name)

Set the passed list to the names of all currently defined *global aliases*.

== See Also ==

* is_alias_general().
/---
function :set_list_to_aliases_global() {
    die_unless_arg 'Expected one list name.'
    set_list_to_map_keys "${1}" galiases dis_galiases
}


:func.doc <<'/---'
:void set_list_to_aliases_nonsuffix(:List list_name)

Set the passed list to the names of all currently defined *non-suffix aliases*
(i.e., simple and global aliases).
/---
function set_list_to_aliases_nonsuffix() {
    die_unless_arg 'Expected one list name.'
    set_list_to_map_keys "${1}" aliases galiases dis_aliases dis_galiases
}
