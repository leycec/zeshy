#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Define `zeshy`-specific *CLI aliases* (i.e., aliases active only when expanded
directly by a user at the command line of an interactive shell). When expanded
from any other context (e.g., shell functions or scripts), CLI aliases either:

* If the name of such alias is an existing pathable, expand to such name.
* Else, throw an exception.

== Motivation ==

Startup shell scripts and scripting frameworks often install the canonical
alias `ll`, listing paths in long format by expanding to `ls -l`: e.g.,

.Conventional Alias
==========================================
[source]
------------------------------------------
# Alias producing greppable and hence shell script-friendly output.
alias ll="ls -l"
------------------------------------------
==========================================

While convenient, such alias suffers more than a few drawbacks:

* Shell scripts calling `ll` behave as expected only if such alias retains a
  shell script-friendly expansion. But such alias is readily editable into a
  shell script-unfriendly expansion, suggesting no such guarantees: e.g.,
+
.Conventional Alias Non-greppability
==========================================
[source]
------------------------------------------
# Alias producing non-greppable and hence shell script-unfriendly output.
alias ll="ls -l --color=always --human-readable"
------------------------------------------
==========================================
* Shell scripts calling `ll` rather than `ls` behave as expected only under
  the current shell environment and hence are inherently non-portable.
  Different users and systems install different startup shell scripts and
  scripting frameworks, suggesting no such guarantees: e.g.,
+
.Conventional Alias Non-portability
==========================================
[source]
------------------------------------------
# Alias expanding to a non-"ls" command, producing unexpected output.
alias ll="long_long_integer"
------------------------------------------
==========================================
* Shell scripts defining a function ll() behave as expected only _not_ under
  the current shell environment. Since `zsh` assigns aliases higher precedence
  than functions, an externally defined alias `ll` supercedes any internally
  defined function ll(): e.g.,
+
.Conventional Alias Unreliability
==========================================
[source]
------------------------------------------
# Function overriden by the defined alias "ll".
function ll() {
    print 'If the caller defined an alias "ll", you'll never see this.'
}
------------------------------------------
==========================================

== Solution ==

CLI aliases solve such issues. Like the customary `zsh` aliases they supplant,
CLI aliases are declared and defined with `=`-delimited syntax
`${alias_type} ${alias_name}=${alias_expansion}`, where
`${alias_name}` and `${alias_expansion}` are such alias' name and expansion and
`${alias_type}` is either:

* `alias_cli_substitution`, signifying such alias to shadow an existing `zsh`
  builtin or external *pathable* (i.e., command in the current user's ${PATH}):
  e.g.,
+
.CLI Substitution Alias
==========================================
[source]
------------------------------------------
# Shadow "ls" with an alias passing such command useful default options. All
# subsequent attempts to run "ls" at the command line run such command, instead.
alias_cli_substitution ls="ls --all --color=auto --sort=version"
------------------------------------------
==========================================
* `alias_cli_abbreviation`, signifying such alias to abbreviate an existing
  *runnable* (i.e., `zsh` alias, builtin, or function or external pathable):
  e.g.,
+
.CLI Abbreviation Alias
==========================================
[source]
------------------------------------------
# Abbreviate "ls" to "l", passing such command useful default options. This does
# not effect "ls" itself. Only running "l" passes the desired options.
alias_cli_abbreviation l="ls --author --classify --escape --ignore-backups"
------------------------------------------
==========================================
* `alias_cli`, signifying such alias to neither substitute or abbreviate an
  existing runnable. Note that most CLI aliases substitute or abbreviate such a
  runnable, however. Consider using the high-level types
  `alias_cli_substitution` and `alias_cli_abbreviation` rather than this low-
  level (and rather unsafe) type: e.g.,
+
.CLI Alias
==========================================
[source]
------------------------------------------
# Alias "ls" to "lsl", passing such command useful default options. Again, this
# does not effect "ls" itself. Only running "lsl" passes the desired options.
alias_cli lsl="ls --full-time --group-directories-first --human-readable"
------------------------------------------
==========================================

== Constraints ==

CLI substitution and abbreviation aliases impose additional runtime constraints,
for safety. In general, _all_ CLI aliases should be declared as either
substitutions or abbreviations.

If the caller attempts to declare a CLI substitution alias whose name is _not_
an existing `zsh` builtin or pathable, an exception is thrown. Such aliases only
shadow existing commands of the same name, preventing aliases inapplicable to
the current system or user from being declared.

If the caller attempts to declare a CLI abbreviation alias whose name _is_ an
existing pathable, an exception is thrown. Such aliases never shadow existing
commands, thus preventing core system and user commands from being ``occluded''
by unrelated (and usually incidental) aliases.

If the caller attempts to call a CLI substitution alias from any context other
than the command line (e.g., from an alias, function, or script), the existing
command of the same name is run instead. Such aliases only shadow existing
commands when called from the command line.

If the caller attempts to call a CLI abbreviation alias from any context other
than the command line, an exception is thrown.

== Abbreviation Embeddings ==

CLI substitution and abbreviation aliases (but not low-level aliases declared by
directly calling alias_cli()) additionally support *abbreviation embeddings* in
alias names themselves. The concatenation of all `{`- and `}`-delimited
substrings (excluding such delimiters) in an alias name provides the *preferred
abbreviation name* of such alias (e.g., `l` for
`alias_cli_substitution {l}s="ls --dereference --inode --si`, `lp` for
`alias_cli_abbreviation {l}ist{p}ath="ls --dereference --inode --si`).

Since such name may already be claimed by an existing runnable (e.g., a command
`l` in the current user's ${PATH}), such name only signifies a preference. To
accommodate real-world complexities, the name assigned to such abbreviation is
algorithmically determined in a system- and user-specific manner. Specifically:

* If the preferred abbreviation name is not already that of an existing
  runnable, such abbrevation is assigned such name.
* Else if the leftmost `}` in such name is not the last character of such name,
  such `}` is shifted right by one character and control is returned to the
  prior conditional repeated.
* Else, all available abbreviation names are already existing runnables, in
  which case _no_ CLI abbreviation alias can be declared. If such name was
  embedded in the name of a:
** CLI substitution alias, a nonfatal warning is printed and such substitution
   otherwise declared as is.
** CLI abbreviation alias, a fatal exception is thrown.

Abbreviation embeddings dramatically improve the portability of CLI aliases.
Ideally, all CLI aliases should be either substitutions or abbreviations
embedding at least one `{`- and `}`-delimited substring.

=== CLI Substitution Alias Substitution ===

The concatenation of all `{`- and `}`-delimited substrings excluding such
delimiters in a CLI substitution alias name specifies the *preferred name* for
a corresponding CLI abbreviation alias, defined to expand to the same expansion
as such substitution. If such name is claimed by an existing runnable,
alias_cli_substitution() iteratively lengthens such name until finding a name
_not_ already claimed by an existing runnable: e.g.,

.CLI Substitution Alias Substitution
==========================================
[source]
------------------------------------------
# A CLI substitution alias whose name embeds "{"- and "}"-delimited substrings.
# alias_cli_substitution() iteratively finds the first name in the following
# list *NOT* already an existing runnable: "md", "mkd", and "mkdi".
alias_cli_substitution {m}k{d}ir="mkdir --parents --verbose --"

# If no existing runnable is named "md", the prior statement expands to:
alias_cli_substitution mkdir="mkdir --parents --verbose --"
alias_cli_abbreviation md="mkdir"

# Else if no existing runnable is named "mkd", such statement is equivalent to
# alias_cli_substitution {mkd}ir="mkdir --parents --verbose --", expanding to:
alias_cli_substitution mkdir="mkdir --parents --verbose --"
alias_cli_abbreviation mkd="mkdir"

# Else if no existing runnable is named "mkdi", such statement is equivalent to
# alias_cli_substitution {mkdi}r="mkdir --parents --verbose --", expanding to:
alias_cli_substitution mkdir="mkdir --parents --verbose --"
alias_cli_abbreviation mkdi="mkdir"

# Else, "md", "mkd", and "mkdi" are all existing runnables, in which case a
# warning is printed and no CLI abbreviation alias is implicitly defined. Such
# statement then reduces to the following by simply discarding all "{" and "}":
alias_cli_substitution mkdir="mkdir --parents --verbose --"
------------------------------------------
==========================================

=== CLI Abbreviation Alias Abbreviation ===

The concatenation of all `{`- and `}`-delimited substrings excluding such
delimiters in a CLI abbreviation alias name specifies the *preferred name* for
such alias. If such name is claimed by an existing runnable,
alias_cli_abbreviation() iteratively lengthens such name until finding a name
_not_ already claimed by an existing runnable: e.g.,

.CLI Abbreviation Alias Abbreviation
==========================================
[source]
------------------------------------------
# A CLI abbreviation alias whose name embeds "{"- and "}"-delimited substrings.
# alias_cli_abbreviation() iteratively finds the first name in the following
# list *NOT* claimed by an existing runnable: "rd", "rmd", and "rmdi".
alias_cli_abbreviation {r}m{d}i="rmdir --parents --verbose --"

# If no existing runnable is named "rd", the prior statement reduces to:
alias_cli_abbreviation rd="rmdir --parents --verbose --"

# Else if no existing runnable is named "rmd", such statement is equivalent to
# alias_cli_abbreviation {rmd}i="rmdir --parents --verbose --", reducing to:
alias_cli_abbreviation rmd="rmdir --parents --verbose --"

# Else if no existing runnable is named "rmdi", such statement is equivalent to:
# alias_cli_abbreviation {rmdi}="rmdir --parents --verbose --", reducing to:
alias_cli_abbreviation rmdi="rmdir --parents --verbose --"

# Else, "rd", "rmd", and "rmdi" are all existing runnables, in which case an
# exception is thrown.
------------------------------------------
==========================================
/---

# ....................{ GLOBALS                            }....................
:map.global ZY_ALIAS_CLI_NAME_TO_EXPANSION_PASSED <<'/---'
Map from CLI alias name to the expansion originally specified for such alias.
Since CLI aliases are high-level `zeshy` abstractions implemented as low-level
`zsh` aliases, the expansions of the former and latter substantially differ.
In particular, the actual `zsh` alias expansion wraps the passed CLI alias
expansion in `zsh` code conditionally testing whether such alias is being
expanded directly from the command-line or not and responding appropriately.
/---


:map.global ZY_ALIAS_CLI_NAME_TO_NAME_PASSED <<'/---'
Map from CLI alias name to the name originally specified for such alias. While
the latter may contain `{` and `}` delimiters signifying the preferred CLI
abbreviation alias name for such alias, the latter never contains such
delimiters.
/---


:map.global ZY_ALIAS_CLI_NAME_TO_TYPE <<'/---'
Map from CLI alias name to type. Recognized types include:

* `abbreviation`, set by alias_cli_abbreviation().
* `substitution`, set by alias_cli_substitution().
* `untyped`, set by alias_cli() when such function is _not_ called by either
  alias_cli_abbreviation() or alias_cli_substitution().
/---

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_aliases_cli()

Print a human-readable list of all CLI aliases and corresponding expansions.
/---
function print_aliases_cli() {
    die_if_args
    :str quotes alias_declarator
    :list alias_names

    # List of all CLI alias names sans "{" and "}" delimiters for lexical
    # sorting purposes. While the keys of
    # ${ZY_ALIAS_CLI_NAME_TO_EXPANSION_PASSED} also list all CLI alias names,
    # such names include "{" and "}" delimiters conflicting with sane sorting.
    set_list_to_map_keys alias_names ZY_ALIAS_CLI_NAME_TO_TYPE

    # Colorized double-quotes to be expanded below.
    quotes="${ZY_STYLE_TO_COLOR[print_aliases_cli.quotes]-}\""

    {
        # Prefix this list with a header.
        print_message_heading 'CLI Aliases'

        # Print all CLI aliases in lexicographic order.
        for_list_items_sorted_lexically_ascending alias_names alias_name '
            # Convert such CLI alias type to a human-readable label.
            case "${ZY_ALIAS_CLI_NAME_TO_TYPE}" {
            abbreviation) alias_declarator="${ZY_STYLE_TO_COLOR[print_aliases_cli.type_abbreviation]-}alias_cli_abbreviation";;
            substitution) alias_declarator="${ZY_STYLE_TO_COLOR[print_aliases_cli.type_substitution]-}alias_cli_substitution";;
            *) alias_declarator="${ZY_STYLE_TO_COLOR[print_aliases_cli.type_untyped]-}alias_cli";;
            }

            # Print such alias.
            :stdout.echo "${alias_type} ${ZY_STYLE_TO_COLOR[print_aliases_cli.name]-}${alias_name}${ZY_STYLE_TO_COLOR[print_aliases_cli.equals]-}=${quotes}${ZY_STYLE_TO_COLOR[print_aliases_cli.expansion]-}${ZY_ALIAS_CLI_NAME_TO_EXPANSION_PASSED[${alias_name}]-}${quotes}"
        '
    } | :stdin.page
}

# ....................{ PRECOMPILERS                       }....................
# Define interactive aliases at digest recompilation rather than zeshy startup
# time, for both efficiency and sanity.
:run_hook_on_zeshy_precompile precompile_zeshy_aliases_cli


:func.doc <<'/---'
:void precompile_zeshy_aliases_cli()

Define interactive aliases specified by `zeshy`\'s user configuration files.
/---
function precompile_zeshy_aliases_cli() {
    die_if_args

    #FIXME: Shift to calling the higher-level declarers
    #declare_alias_cli_abbreviation() and declare_alias_cli_substitution()
    #rather than the lower-level declarers called below. Note this declares all
    #CLI aliases under the current parcel -- which seems quite sensible, really.
    #We'll need to supply sensible documentation for each type of such alias,
    #which certainly seems "doable."

    # Prevent exceptions thrown in "{...}" blocks embedded in iteration below
    # from being treated as unhandled exceptions (and hence immediately printed
    # to standard error) by embedding all such blocks in an external ":try{...}"
    # block. Such block sets a global whose existence is subsequently tested and
    # acknowledged by :die(), avoiding such unhandled exception-specific logic.
    #
    # While the same ends could also be accomplished more simply by converting
    # all "{...}" blocks embedded in iteration below to ":try{...}" blocks,
    # doing so incurs a noticeable performance penalty. Though vital, this is
    # thus only an optimization.
    :try{
        # Define listed abbreviations. To avoid disrupting digest compilation,
        # reduce fatal exceptions to nonfatal warnings (both here and below).
        #
        # For efficiency, prefer the traditional "{...} always {...}" approach to
        # the zeshy-specific ":try{...}:catch{...}:catch" approach here.
        # Since such logic is guaranteed to catch any thrown exception, the
        # former approach gains us nothing despite imposing a significant
        # computational burden.
        for_map_key_value_pairs ZY_ALIAS_CLI_ABBREVIATIONS\
            alias_name alias_expansion\
            '{
                alias_cli_abbreviation "${alias_name}" "${alias_expansion}"
            } always {
                if { catch_exception_if_found } {
                    :warning.print "$(get_exception_caught_message)"
                }
            }'
    #       print "alias_cli_abbreviation ${alias_name}=${alias_expansion}"

        # Define configured substitutions.
        for_map_key_value_pairs ZY_ALIAS_CLI_SUBSTITUTIONS\
            alias_name alias_expansion\
            '{
                alias_cli_substitution "${alias_name}" "${alias_expansion}"
            } always {
                if { catch_exception_if_found } {
                    :warning.print "$(get_exception_caught_message)"
                }
            }'

        # Define configured substitutions dependent on existing runnables.
        # Since alias_cli_substitution_if_found() returns failure if this runnable
        # does *NOT* exist, ignore this failure.
        for_map_key_value_pairs ZY_ALIAS_CLI_SUBSTITUTIONS_IF_RUNNABLE\
            alias_name alias_expansion\
            '{
                {
                    alias_cli_substitution_if_found\
                        "${alias_name}" "${alias_expansion}"
                } :=status.ignore_failure
            } always {
                if { catch_exception_if_found } {
                    :warning.print "$(get_exception_caught_message)"
                }
            }'

        # Define configured substitutions dependent on existing runnables and run
        # disowned from their parent shells.
        :str alias_name command_name
        for  alias_name (
            "${ZY_CLI_SUBSTITUTION_NAMES_IF_RUNNABLE_RUN_DISOWNED[@]}") {
            {
    #           :stdout.echo "run disowned: ${alias_name}"
                command_name="${alias_name//[\{\}]}"
                if { is_runnable "${command_name}" } {
                    alias_cli_substitution\
                        "${alias_name}" 'run_command_disowned "'${command_name}'"'
                }
            } always {
                if { catch_exception_if_found } {
                    :warning.print "$(get_exception_caught_message)"
                }
            }
        }
    }:catch{
    }:catch
}
