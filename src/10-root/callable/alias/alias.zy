#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core alias functionality.
/---

# ....................{ GETTERS                            }....................
#FIXME: Convert to setters, as below.

:func.doc <<'/---'
string get_alias_expansion(string alias_name)

Get the expansion to which the passed alias expands: e.g.,

.get_alias_expansion()
==========================================
[source]
------------------------------------------
>>> alias on_idleness=':stdout.echo\
...    "Suppose that, at a given moment, a certain number of people are engaged
...     in the manufacture of pins. They make as many pins as the world needs,
...     working (say) eight hours a day. Someone makes an invention by which the
...     same number of men can make twice as many pins: pins are already so
...     cheap that hardly any more will be bought at a lower price. In a
...     sensible world, everybody concerned in the manufacturing of pins would
...     take to working four hours instead of eight, and everything else would
...     go on as before. But in the actual world this would be thought
...     demoralizing. The men still work eight hours, there are too many pins,
...     some employers go bankrupt, and half the men previously concerned in
...     making pins are thrown out of work. There is, in the end, just as much
...     leisure as on the other plan, but half the men are totally idle while
...     half are still overworked. In this way, it is insured that the
...     unavoidable leisure shall cause misery all round instead of being a
...     universal source of happiness. Can anything more insane be imagined?"'
>>> get_string_line "$(get_alias_expansion on_idleness)" -1
universal source of happiness. Can anything more insane be imagined?
------------------------------------------
==========================================
/---
function get_alias_expansion() {
    # Validate sanity.
    die_unless_arg 'Expected one alias name.'
    :str alias_name="${1}"
    die_unless_alias "${alias_name}"

    #FIXME: Given the name of this function, this should transparently work for
    #suffix aliases, too. I'm fairly certain it doesn't, however. Amend!

    # Get such expansion. Happily, this is remarkably straight-forward.
    whence -- "${alias_name}"
}

# ....................{ PRINTERS                           }....................
#FIXME: This is blatantly insufficient. Suffix aliases can only be printed
#by passing option "-s". But note that there's a subtle gotcha: since
#normal, global, and suffix aliases all reside in separate namespaces, it's
#technically possible to have three distinct normal, global, and suffix
#aliases all sharing the same name. In such cases, this function *MUST*
#print all three. Ensure we handle that!
#FIXME: Syntax highlight such output, ideally via Pygments.

:func.doc <<'/---'
string print_alias(string alias_name1, ...)

Print a human-readable synopsis of the passed aliases, typically including
syntax-highlighted declarations and definitions of such aliases.
/---
function print_alias() {
    # Validate sanity.
    die_unless_args 'Expected one or more alias names.'

    {
        print_message_heading 'Alias Bindings'

        # Print such aliases.
        :str alias_name
        for     alias_name ("${@}") {
            # Since alias() always succeeds if piped to another command (a probable
            # bug in core zsh), ensure the existence of such alias beforehand.
            die_unless_alias "${alias_name}"

            # Print such alias.
            alias -- "${alias_name}"
        }
    } | page_stdin
}

#FIXME: In lieu of unit tests...
#function pali() {
#    print_alias :context.is_cli_func
#}

# ....................{ UNDEFINERS                         }....................
:func.doc <<'/---'
void undefine_alias(string alias_name1, ...)

Undefine all passed aliases.
/---
function undefine_alias() {
    # Validate sanity.
    die_unless_args 'Expected one or more alias names.'
    :list alias_names

    # Escape all alias-reserved characters in such names. Although unalias()
    # clearly provides no syntax reserving such characters, zsh appears to
    # internally escape all such characters in alias names d. Referencing such
    # names here thus requires 
    :set_list_to_alias_name_escaped alias_names "${@}"

    # Sadly, unhash() and hence unalias() explicitly require option "-s" for
    # removing suffix aliases and no such option for removing normal and global
    # aliases. Hence, iterate such aliases and manually apply such options.
    # For efficiency, avoid calling zeshy functions.
    :str alias_name
    for     alias_name ("${alias_names[@]}") {
        # If this is a non-suffix alias, undefine such alias as such.
        if { is_alias_nonsuffix "${alias_name}" } {
            unalias -- "${alias_name}"
        # Else, this is a suffix alias. Undefine such alias as such.
        } else {
            unalias -s -- "${alias_name}"
        }
    }
}

# ....................{ UNDEFINERS ~ simple                }....................
:func.doc <<'/---'
void :undefine_alias_command(string alias_name1, ...)

Undefine all passed simple aliases. See undefine_alias_nonsuffix() for further
details.
/---
function :undefine_alias_command() {
    # By definition, all simple aliases are non-suffix aliases.
    undefine_alias_nonsuffix "${@}"
}

:func.doc <<'/---'
void :undefine_alias_general(string alias_name1, ...)

Undefine all passed global aliases. See undefine_alias_nonsuffix() for further
details.
/---
function :undefine_alias_general() {
    # By definition, all global aliases are non-suffix aliases.
    undefine_alias_nonsuffix "${@}"
}

:func.doc <<'/---'
void undefine_alias_nonsuffix(string alias_name1, ...)

Undefine all passed *non-suffix aliases* (i.e., simple or global aliases).
While calling undefine_alias() also suffices to undefine such aliases, this
function needs no iteration and is hence considerably more efficient than that
function when all such aliases are non-suffix aliases.
/---
function undefine_alias_nonsuffix() {
    # Validate sanity.
    die_unless_args 'Expected one or more non-suffix alias names.'
    :list alias_names

    # Escape all alias-reserved characters in such names. Although unalias()
    # clearly provides no syntax reserving such characters, zsh appears to
    # internally escape all such characters in alias names. Ensuring zsh
    # recognizes the passed names thus requires escaping such characters.
    :set_list_to_alias_name_escaped alias_names "${@}"

    # Undefine such aliases.
    unalias -- "${alias_names[@]}"
}

# ....................{ [DIS|EN]ABLERS                     }....................
:func.doc <<'/---'
void :disable_alias_nonsuffix(string alias_name1, ...)

Disable all passed *non-suffix aliases* (i.e., normal or global aliases). Such
aliases will behave as if undefined until subsequently reenabled by a call to
:enable_alias_nonsuffix().
/---
function :disable_alias_nonsuffix() {
    die_unless_args 'Expected one or more non-suffix alias names.'
    disable -a -- "${@}"
}

:func.doc <<'/---'
void :enable_alias_nonsuffix(string alias_name1, ...)

Reenable all passed *non-suffix aliases* (i.e., normal or global aliases).
After this call, such aliases will behave as if defined and hence be expanded
where referenced. Since aliases are enabled by default, this function is
typically only called after a prior call to :disable_alias_nonsuffix().
/---
function :enable_alias_nonsuffix() {
    die_unless_args 'Expected one or more non-suffix alias names.'
    enable -a -- "${@}"
}

# --------------------( WASTELANDS                         )--------------------
# ....................{ GETTERS ~ list                     }....................
# :func.doc <<'/---'
# string get_aliases()
# 
# List all alias names, delimited by newline.
# /---
# function get_aliases() {
#     die_if_args
#     get_aliases_nonsuffix
#     get_aliases_suffix
# }
# 
# :func.doc <<'/---'
# string get_aliases_nonsuffix()
# 
# List the names of all currently defined *non-suffix aliases* (i.e., non-suffix alias names),
# delimited by newline.
# /---
# function get_aliases_nonsuffix() {
#     die_if_args
#     alias +
# }

#FUXME: Rename to :alias_command.is(), for conformance with nomenclature
#elsewhere (e.g., :is_file_simple()). As adjectives, "simple" is more specific
#than and hence preferable to "normal" (which is rather ambiguous). "Simple"
#genuinely means something; "normal" really doesn't. Everything's "normal" from
#some vantage point.

    # Sadly, alias() explicitly requires option "-s" for testing suffix aliases
    # and no such option for testing normal and global aliases. Hence, iterate
    # such aliases and manually apply such options.
    #
    # Technically, this loop body is also implementable by testing for the
    # existence of corresponding map keys. However, six map keys would need to
    # be tested for each passed alias, rendering the current implementation
    # significantly more efficient and readable: e.g.,
    #
    #       $(( ${+aliases[${alias_name}] +\
    #           ${+dis_aliases[${alias_name}] +\
    #           ${+galiases[${alias_name}] +\
    #           ${+dis_galiases[${alias_name}] +\
    #           ${+saliases[${alias_name}] +\
    #           ${+dis_saliases[${alias_name}] ))
    # :str alias_name
    # for     alias_name ("${@}") {
    #     (( ${+aliases[${alias_name}] +\
    #        ${+dis_aliases[${alias_name}] +\
    #        ${+galiases[${alias_name}] +\
    #        ${+dis_galiases[${alias_name}] +\
    #        ${+saliases[${alias_name}] +\
    #        ${+dis_saliases[${alias_name}] ))
    #     # Since normal and global aliases are considerably more common than
    #     # suffix aliases, test the former first. For efficiency, inline such
    #     # implementation. See is_alias_nonsuffix() and is_alias_suffix() for
    #     # further details.
    #     alias -- "${alias_name}" or alias -s -- "${alias_name}" or
    #         :failure.report
    # # Since alias() prints the expansions of such aliases and provides no option
    # # for disabling such printing, do so manually by silencing all such output.
    # } :silent_stdout

#  the function() builtin allows function names containing
# characters reserved for use in function() syntax (e.g., `(`, `{`) to be double
# quoted
    #FUXME: Horrible! Avoid subshells at all costs.
    # Set such list.
    # set_list_to_string_lines "${list_name__sltanag}" "$(get_aliases_nonsuffix)"

    # print_message_heading "Alias ${alias_name}()"
    # Set such list.
    # set_list_to_string_lines "${list_name__sltanag}" "$(get_aliases_nonsuffix)"

        # While less efficient, such test is also implementable as:
        #    alias -- "${alias_name}" or alias -s -- "${alias_name}" or
        #        :failure.report
        # (( ${+aliases[${alias_name}]} +\
        #    ${+galiases[${alias_name}]} +\
        #    ${+saliases[${alias_name}]} )) or :failure.report

        # Since normal and global aliases are considerably more common than
        # suffix aliases, test the former first. For efficiency, inline such
        # implementation. See is_alias_nonsuffix() and is_alias_suffix() for
        # further details.
        # (( ${+aliases[${alias_name}]} +\
        #    ${+galiases[${alias_name}]} +\
        #    ${+saliases[${alias_name}]} )) 
        # alias -- "${alias_name}" or alias -s -- "${alias_name}" or :failure.report
    # Since alias() prints the expansions of such aliases and provides no option
    # for disabling such printing, do so manually by silencing all such output.
    # } 1>/dev/null

    # Validate sanity. Since alias() always succeeds if piped to another
    # command (a probable bug in the zsh core), ensure the existence of all such
    # aliases beforehand.
#   die_unless_args 'Expected one or more alias names.'
#   die_unless_aliases "${@}"

#   string output; output="$(alias -- "${@}")"
#   :stdout.echo "${output}" # | page_stdin
#FUXME: Truncate "nonsuffix" to simply "nonsuffix" everywhere.

#       is_alias_nonsuffix "${alias_name}" or
#       is_alias_suffix "${alias_name}" or
#           :failure.report
    #FUXME: Replace with a call to a new is_map_keys() function, which can be
    #efficiently implemented by embedding the entire loop in an "eval".
    # Test such aliases.
#   for alias_name ("${@}") {
#       (( ${+aliases[${alias_name}]} )) or :failure.report
#   }
#   :success.report
    #FUXME: Generalize to accept multiple alias names. To do so, we'll want to
    #implement a new function is_map_keys() returning success only if all passed
    #keys exist in the passed map. This should be considerably faster than
    #performing an explicit loop. Such function may be implemented by noting
    #that "(( ${map[(i)(${(q)1}|...|${(q)@[-1]})]} <= ${#map} ))"
    #implements such test. I'm not quite sure about the "(q)"; however, we'll
    #certainly need some form of escaping. Right. "(q)" should do it, I think.
    #For efficiency, we certainly wouldn't want to call escape_string()
    #repeatedly. Unsure how to efficiently construct the list of keys, however.
    #Shouldn't be terribly hard; just contemplate it.
