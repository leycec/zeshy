#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *suffix aliases* (i.e., aliases expanded on filetype for files in command
position).
/---

#FIXME: Merge all such functionality back into the appropriate alias parcel
#(e.g., @{test}, @{set}).

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_file_alias_suffixed(
    string filename,
    string error_message =
        "Suffix alias for file \"${filename}\" filetype not found.")

Throw an exception with the passed message unless a suffix alias exists for the
filetype of the passed file. See is_file_runnable_by_alias_suffix:() for further details.
/---
function :die_unless_file_alias_suffixed() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    is_file_runnable_by_alias_suffix: "${1}" or {
        :str filename="${1}"
        :die "${2-Suffix alias for file \"${filename}\" filetype not found..}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status = :bool] is_alias_suffix(:str... alias_names)

Report success if all passed suffix aliases exist.
/---
function is_alias_suffix() {
    die_unless_args 'Expected one or more alias names.'
    { alias -s -- "${@}" } =silent
}

#FIXME: Rename to :is_file_alias_suffixed().
:func.doc <<'/---'
[status = :bool] is_file_runnable_by_alias_suffix:(:str filename)

Report success if the passed file is suffixed by a nonempty filetype _and_ a
suffix alias whose name is such filetype has been declared.
/---
function is_file_runnable_by_alias_suffix:() {
    # Validate sanity.
    die_unless_arg 'Expected one filename.'
    :str filetype

    # Report success only if 
    filetype="$(get_file_type_if_found "${1}")" :and
        is_alias_suffix "${filetype}"
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_aliases_suffix()

List all suffix alias names delimited by newline.
/---
function get_aliases_suffix() {
    die_if_args
    alias +s
}

#FIXME: Add example.
:func.doc <<'/---'
:str get_alias_suffix_binding(:str... filetypes)

Get *suffix alias bindings* (i.e., declarations with definitions) for all passed
filetypes, in the passed order: e.g.,

.get_alias_suffix_binding()
==========================================
[source]
------------------------------------------
------------------------------------------
==========================================
/---
function get_alias_suffix_binding() {
    die_unless_args 'Expected one or more filetypes.'
    alias -Ls -- "${@}"
}

# ....................{ SETTERS                            }....................
#FIXME: The example is beyond the pale. I mean, hedonistic excess is one thing,
#but this is simply a bit too confrontational. Shift most of these quotes to
#other examples, please.

:func.doc <<'/---'
void :set_string_to_alias_suffix_binding(
    string list_name,
    string alias_name1, ...)

Set the passed string variable to the concatenation of all bindings for the
passed *non-suffix aliases* (i.e., simple and global aliases) in the passed
order. For each such alias, the corresponding binding is exactly one evaluable
command declaring _and_ defining such alias: e.g.,

.:set_string_to_alias_suffix_binding()
==========================================
[source]
------------------------------------------
>>> :str alias_bindings
>>> :alias_command_filetype on_freedom_of_choice=':str.output\
...    "Forget the politicians. They are irrelevant. The politicians are put
...     there to give you the idea that you have freedom of choice. You don''t.
...     You have no choice. You have owners. They own you. They own everything.
...     They own all the important land. They own and control the corporations.
...     They''ve long since bought — and paid for — the Senate, the Congress,
...     the state houses, the city halls. They got the judges in their back
...     pockets and they own all the big media companies, so they control just
...     about all of the news and information you get to hear. They got you by
...     the balls."'
>>> :alias_command_filetype on_what_they_want=':str.output\
...    "They spend billions of dollars every year lobbying, lobbying, to get
...     what they want. Well, we know what they want. They want more for
...     themselves and less for everybody else, but I''ll tell you what they
...     don''t want:"'
>>> :alias_command_filetype on_what_they_dont_want_1=':str.output\
...    "They don''t want a population of citizens capable of critical thinking.
...     They don''t want well-informed, well-educated people capable of critical
...     thinking. They''re not interested in that. That doesn''t help them.
...     That''s against their interests."'
>>> :alias_command_filetype on_what_they_dont_want_2=':str.output\
...    "That''s right. They don''t want people who are smart enough to sit
...     around a kitchen table and think about how badly they''re getting fucked
...     by a system that threw them overboard 30 fucking years ago. They don''t
...     want that."'
>>> :alias_command_filetype on_obedient_workers=':str.output\
...    "You know what they want? They want obedient workers. Obedient workers:
...     people who are just smart enough to run the machines and do the
...     paperwork, and just dumb enough to passively accept all these
...     increasingly shitty jobs with the lower pay, the longer hours, the
...     reduced benefits, the end of overtime and vanishing pension that
...     disappears the minute you go to collect it, and now they''re coming for
...     your Social Security money. They want your retirement money. They want
...     it back so they can give it to their criminal friends on Wall Street —
...     and you know something? They''ll get it. They''ll get it all from you
...     sooner or later, ''cause they own this fucking place. It''s a big club,
...     and you ain''t in it! You, and I, are not in the big club."'
>>> :alias_command_filetype on_the_big_club=':str.output\
...    "By the way, it''s the same big club they use to beat you over the head
...     with all day long when they tell you what to believe. All day long
...     beating you over the head with their media telling you what to believe,
...     what to think, and what to buy. The table has tilted, folks. The game is
...     rigged and nobody seems to notice. Nobody seems to care. Good honest
...     hard-working people; white collar, blue collar it doesn''t matter what
...     color shirt you have on. Good honest hard-working people continue —
...     these are people of modest means — continue to elect these rich cock
...     suckers who don''t give a fuck about you. They don''t give a fuck about
...     you."'
>>> :alias_command_filetype on_willful_ignorance=':str.output\
...    "They don’t care about you at all, and nobody seems to notice. Nobody
...     seems to care. That''s what the owners count on. The fact that Americans
...     will probably remain willfully ignorant of the big red, white and blue
...     dick that''s being jammed up their assholes everyday, because the owners
...     of this country know the truth."'
>>> :alias_command_filetype on_the_american_dream=':str.output\
...    "It''s called the American Dream — because you have to be asleep to
...     believe it."'
>>> :set_string_to_alias_suffix_binding alias_bindings\
...     on_freedom_of_choice on_what_they_want on_what_they_dont_want_{1,2}\
...     on_obedient_workers on_the_big_club\
...     on_willful_ignorance on_the_american_dream
>>> get_string_line_matches_glob "${alias_bindings}" 'alias -s'*
alias -s on_freedom_of_choice=':str.output
alias -s on_what_they_want=':str.output
alias -s on_what_they_dont_want_1=':str.output
alias -s on_what_they_dont_want_2=':str.output
alias -s on_obedient_workers=':str.output
alias -s on_the_big_club=':str.output
alias -s on_willful_ignorance=':str.output
alias -s on_the_american_dream=':str.output
------------------------------------------
==========================================
/---
function :set_string_to_alias_suffix_binding() {
    # Validate sanity.
    die_unless_args 'Expected one string name and one or more alias names.'
    :str string_name__sstasb="${1}"
    :list alias_names__sstasb
    shift_arg

    # Escape all alias-reserved characters in such names.
    :set_list_to_alias_name_escaped alias_names__sstasb "${@}"

    # Set such string.
    :Str.set\
        "${string_name__sstasb}"\
        "$(alias -Ls -- "${alias_names__sstasb[@]}")"
}

# ....................{ SETTERS ~ list                     }....................
:func.doc <<'/---'
void set_list_to_aliases_suffix(string list_name)

Set the passed list to the names of all currently defined suffix aliases.
/---
function set_list_to_aliases_suffix() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :str list_name__sltas="${1}"
    :List.die_unless "${list_name__sltas}"

    # Set such list. Sadly, this is the most efficacious means of doing so.
    set_list_to_string_lines "${list_name__sltas}" "$(get_aliases_suffix)"
}

# ....................{ DEFINERS                           }....................
:func.doc <<'/---'
void undefine_alias_suffix(string alias_name1, ...)

Undefine the passed suffix aliases.
/---
function undefine_alias_suffix() {
    die_unless_args 'Expected one or more alias names.'
    unalias -s -- "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Shift to @{path/file/type}.
#is_string_nonempty "${filetype}" and 
