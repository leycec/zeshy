#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'-/-'
Handle *silent commands* (i.e., commands whose standard output and/or error is
redirected to the bit bucket and hence ``squelched'').
-/-

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'/---'
[status: integer] run_code_silent(string code1, ...)

Run the passed code *silently* (i.e., silencing all standard output and error
printed by such code).
/---
function run_code_silent() {
    die_unless_args 'Expected one or more shell words.'
    run_code "${@}" &>/dev/null
}

declare_function_with_stdin <<'/---'
[stderr: string, status: integer] run_code_silent_stdout(string code1, ...)

Run the passed code, silencing all standard output printed by such code. This
function preserves standard error and hence warnings and errors.
/---
function run_code_silent_stdout() {
    die_unless_args 'Expected one or more shell words.'
    run_code "${@}" 1>/dev/null
}

declare_function_with_stdin <<'/---'
[stdout: string, status: integer] run_code_silent_stderr(string code1, ...)

Run the passed code, silencing all standard error printed by such code. This
function preserves standard output and hence non-errors and -warnings.
/---
function run_code_silent_stderr() {
    die_unless_args 'Expected one or more shell words.'
    run_code "${@}" 2>/dev/null
}

# ....................{ GETTERS                            }....................
#FIXME: Improve examples.
declare_function_with_stdin <<'/---'
integer run_code_silent_and_get_status(string code1, ...)

Run the passed code silently and get the exit status of such code as a 1-byte
integer in [0, 255]. See run_code_silent() for further details: e.g.,

.run_code_silent_and_get_status()
==========================================
[source]
------------------------------------------
>>> run_code_silent_and_get_status 'grep "*" /no/such/path/exists'
2
------------------------------------------
==========================================
/---
function run_code_silent_and_get_status() {
    die_unless_args 'Expected one or more shell words.'
    run_code_silent "${@}" and get_status
}

declare_function_with_stdin <<'/---'
boolean run_code_silent_and_get_status_boolean(string code1, ...)

Run the passed code silently and get the exit status of such command converted
to a boolean value. Specifically, if such code:

* Succeeds (i.e., returns zero exit status), return ${ZESHY_BOOLEAN_TRUE}.
* fails (i.e., returns nonzero exit status), return ${ZESHY_BOOLEAN_FALSE}.

See run_code_silent() for further details: e.g.,

.run_code_silent_and_get_status_boolean()
==========================================
[source]
------------------------------------------
>>> boolean IS_MUTT_PATHABLE=$(\
...     run_code_silent_and_get_status_boolean is_pathable mutt)
>>> (( IS_MUTT_PATHABLE )) and :string.output '"mutt" installed'
"mutt" installed
------------------------------------------
==========================================
/---
function run_code_silent_and_get_status_boolean() {
    # Validate sanity.
    die_unless_args 'Expected one or more shell words.'

    # Run such code.
    if { run_code_silent "${@}" } {
        return_string "${ZESHY_BOOLEAN_TRUE}"
    } else {
        return_string "${ZESHY_BOOLEAN_FALSE}"
    }
}

# ....................{ WRITERS                            }....................
declare_function_with_stdin <<'/---'
[status: integer] run_code_silent_and_write_file_with_output(
    string code1, ...,
    string filename)

Run the passed code silently, overwriting the passed text file with all standard
output and error printed by such code. See run_code_silent() for further
details.
/---
function run_code_silent_and_write_file_with_output() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more shell words and one filename.'
    string filename__rcsawfwo="${@[-1]}"
    :die_unless_file_simple_or_not_found "${filename__rcsawfwo}"
    pop_arg

    # Run such command.
    run_code "${@}" >&!"${filename__rcsawfwo}"
}

declare_function_with_stdin <<'/---'
[stderr: string, status: integer]
    run_code_silent_stdout_and_write_file_with_stdout(
        string code1, ...,
        string filename)

Run the passed code, silencing all standard output printed by such code and
overwriting the passed text file with such output. See run_code_silent_stdout()
for further details.
/---
function run_code_silent_stdout_and_write_file_with_stdout() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more shell words and one filename.'
    string filename__rcssawfws="${@[-1]}"
    :die_unless_file_simple_or_not_found "${filename__rcssawfws}"
    pop_arg

    # Run such command.
    run_code "${@}" >!"${filename__rcssawfws}"
}

# --------------------( WASTELANDS                         )--------------------
# (i.e., `0` if such code fails with nonzero exit status and
#`1` otherwise)
#Run the passed command, silencing standard error but _not_ output. Preserving
#standard output silences only warnings and errors.
    # Validate sanity.
#   die_unless_args_2_or_more 'Expected one command and one string name.'
#   string string_name__rcassto="${@[-1]}"
#   pop_arg

    # Run such command and set such string.
#   run_code "${@}" 2>/dev/null |
#       :string.set_to_stdin "${string_name__rcassto}"

#       print -pr $'\C-D'
#       print -r "ughugh" >&p
#       print -r $'\C-D' >&p
#       print -r '-----' >&p
#       print -r "ohhohh" >&p
#       eval ${string_name__rcasste}'="$(< /dev/stdin)" <&p'

#Since coprocesses
    # typically loop on standard input until receiving EOF and since there
    # exists no sane 
#See the above discussion.
    # Absolute path of a temporary file to which standard error is to be
    # redirected below.
#   stderr_filename__rcasste="$(make_file_temporary)"

#   {
        # Run such command and set such string.
#       :string.output "variable: ${string_name__rcasste}; command: ${@}"
#       run_code "${@}" 1>/dev/null 2>"${stderr_filename__rcasste}"
#   } always {
#       remove_file "${stderr_filename__rcasste}"
#   }

    #FUXME: This runs such command in a subshell and hence fails in the general
    #case. To fix this, we'll probably have to redirect stderr (and stdout in the
    #prior function) to a temporary file and then "cat" such file. Craziness, I
    #know; but it's literally the only way. *shrug*

    # Run such command and set such string. This is surprisingly difficult. In
    # particular, note the internal delimiters "{" and "}" *ARE* requisite;
    # oddly, removing them induces zsh to ignore the redirection "1>/dev/null".
#   :string.output "variable: ${string_name__rcasste}; command: ${@}"
#   { run_code "${@}" 1>/dev/null } |&
#       :string.set_to_stdin "${string_name__rcasste}"

    # Nonetheless, there exist 
    #
    # While typically beneficial, the inability
    # to export modifications *UP* the shell hierarchy from
    #
    # Since *NO* shell including zsh provides a builtin mechanism
    # for exporting 

#; removing them
    # effectively reduces this function to run_code_silent()
#   { eval "yim=( /*(#qZ) )" 1>/dev/null } |& set_string_to_stdin_pipe lil
#   :string.set "${string_name__rcasste}" "$({
#       run_code "${@}" 1>/dev/null
#   } 2>&1)"

#, redirecting both standard output and error to the passed
#file by overwriting such file with such output.

#Run the passed command partially silently, squelching standard error but _not_
#output. Preserving standard output silences only warnings and errors.

#partially silently, squelching standard output but _not_
#error. Preserving standard error preserves warnings and errors.

    # Obscenely clever, if we may say so. (We may!) See
    # report_status() for similar logic.
# Preserving standard error preventsdd warnings, errors, and exceptions.
