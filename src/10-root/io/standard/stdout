#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core standard input functionality. See @{stdin} for further details.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_stdout_terminal(
    string error_message = "Standard output not a terminal.")

Throw an exception with the passed message unless standard output from the
current context is a terminal. See is_stdout_terminal() for further details.
/---
function die_unless_stdout_terminal() {
    die_unless_args_0_to_1 'Expected optional error message.'
    is_stdout_terminal or :die "${1-Standard output not a terminal.}"
}

# ....................{ TESTERS                            }....................
#FIXME: This function is tangentially related to
#:is_stdin_pipe_or_file_simple() -- if for inverse purposes (i.e., testing for
#an interactive output terminal rather than for non-interactive input).
#Nonetheless, given that that function has considerably better documentation,
#consider improving the documentation for this function in a similar manner.

:func.doc <<'/---'
[status: bool] is_stdout_terminal_or_pipe()

Report success if standard output from the current context is either a terminal
or pipe. While this function cannot test whether such pipe writes to a command
whose standard output is a terminal (e.g., to page_stdin()), this is the best
`zsh` currently permits.
/---
function is_stdout_terminal_or_pipe() {
    die_if_args
    is_stdout_terminal or is_stdout_pipe
}

:func.doc <<'/---'
[status: bool] is_stdout_pipe()

Report success if standard output from the current context is a *pipe* (i.e.,
if such context is any subcommand of a pipeline -- excluding the last such
subcommand, which transmits no piped output).
/---
function is_stdout_pipe() {
    die_if_args
#   :str.output "call stack: ${funcstack[*]}"
    is -p "${ZESHY_STDOUT_PATH-/dev/stdout}" si
}

:func.doc <<'/---'
[status: bool] is_stdout_terminal()

Report success if standard output from the current context is an *interactive
terminal* .
/---
function is_stdout_terminal() {
    die_if_args
    is -t ${ZESHY_STDOUT_FILE_DESCRIPTOR-1} si
}

# --------------------( WASTELANDS                         )--------------------
#-p "${ZESHY_STDOUT_PATH-/dev/stdin}" si
