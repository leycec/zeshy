#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *standard input setters* (i.e., functions setting the values of passed
variables to standard input).
/---

#FIXME: Not terribly many setters defined here anymore; perhaps merge this
#parcel back with ={stdin}?

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_float_to_stdin[args: string float_name, stdin: float input]

Set the passed float variable to all standard input to the current context. See
:set_var_to_stdin() for further details: e.g.,

.set_float_to_stdin()
==========================================
[source]
------------------------------------------
>>> :float conways_constant
>>> set_float_to_stdin conways_constant <<<1.30357
>>> :string.output "${conways_constant}"
1.30357
------------------------------------------
==========================================
/---
function set_float_to_stdin() {
    die_unless_arg 'Expected one float name.'
    :string float_name__sfts="${1}"
    :var.die_unless_type_float  "${float_name__sfts}"
    :set_var_to_stdin "${float_name__sfts}"
}

#FIXME: This function only ever appears to be called by set_float_to_stdin().
#Arguably, such logic should simply be inlined directly into such function.
#See :string.set_to_stdin() for the ideal implementation.

declare_function_with_stdin <<'/---'
void :set_var_to_stdin[args: string variable_name, stdin: string input]

Set the passed scalar variable to all standard input to the current context. See :string.set_to_stdin() for further details.

Since this function blocks until receiving *EOF* (end of file) from such input,
avoid this function unless such input is known to succinctly terminate.

.:set_var_to_stdin()
==========================================
[source]
------------------------------------------
>>> :string on_fact on_fiction=\
...    "In science it often happens that scientists say, \"You know that's a
...     really good argument; my position is mistaken,\" and then they would
...     actually change their minds and you never hear that old view from them
...     again. They really do it. It doesn't happen as often as it should,
...     because scientists are human and change is sometimes painful. But it
...     happens every day. I cannot recall the last time something like that
...     happened in politics or religion."
>>> :set_var_to_stdin on_fact <<<"${on_fiction}"
>>> get_string_line "${on_fact}" -1
happened in politics or religion.
------------------------------------------
==========================================
/---
function :set_var_to_stdin() {
    # Validate sanity. For generality, this function performs no
    # validation on the state of standard input (e.g., by calling
    # die_unless_stdin_readable_sans_blocking()). Since zsh renders standard
    # input generally available to all functions, there exists no reasonable
    # validation that can be performed above and beyond what zsh itself already
    # performs. For example, calling die_unless_stdin_readable_sans_blocking()
    # would render this function considerably more fragile, as such function
    # fails if the standard input to this function fails to initialize and write
    # at least one line within a slim window of time (e.g., 0.05s). Since this
    # could occur under heavy load, the best we can do is dolefully curse the
    # shell-laden skies and hope the caller knows what they're doing.
    die_unless_arg 'Expected one variable name.'
    :string var_name__svts="${1}"
    :var.die_unless_scalar "${var_name__svts}"
#   print 'reading stdin...' 2>&1

    # Set such string.
    #
    # Avoid expanding alias :stdin.get() here. This function is transitively
    # called by printer functions themselves transitively called by exception
    # handlers. Since zeshy defines aliases in a startup_zeshy() hook *AND*
    # since exceptions may be thrown prior to such hook, this function *CANNOT*
    # safely expand any aliases in command substitutions -- including
    # :stdin.get().
    #
    # The double quotes surrounding such command substitution are *ESSENTIAL*.
    # Their omission results in newlines in such input being silently converted
    # to spaces, which is both awful and awfully difficult to debug.
    #
    # To avoid extraneous string copies, inline such implementation.
    noop ${(P)var_name__svts::="$(< "${ZESHY_STDIN_PATH-/dev/stdin}")"}
#   print 'reading stdin... ok' 2>&1

    # Close such input, ensuring :stdin.is_nonempty() subsequently
    # returns false. Since expanding alias close_stdin() directly in the body of
    # this function ensures its expansion at function definition rather than
    # call time, expanding such alias here is inherently safe -- unlike above.
    close_stdin
}

# --------------------( WASTELANDS                         )--------------------
# Most functions defined by this parcel are called by printer functions (e.g.,
# print_error()) possibly called by the exception handler and hence must be
# defined before such functions.

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :set_var_to_stdin().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    #FUXME: If such variable is nonscalar (e.g., list, map), throw an exception.

# ....................{ SETTERS ~ pipe                     }....................
#FUXME: Woops. Actually, there's no need for these functions. All they do is
#test whether stdin is a pipe or not -- trivial at best, useless at most. The
#prior functions more than suffice for all cases, and are considerably more
#readable. *EXCISE* everything below. Make it so, Captain Morgan!
#FUXME: Add examples.
#declare_function_with_stdin <<'/---'
#void set_string_to_stdin_pipe[args: string string_name, stdin: string input]
#
#Set the passed string variable to all piped standard input to the current
#context. If standard input is _not_ a pipe, an exception is thrown. See
#:set_var_to_stdin_pipe() for further details.
#/---
#function set_string_to_stdin_pipe() {
#    die_unless_arg 'Expected one string name.'
#    string string_name__ssts="${1}"
#    :var.die_unless_type_string "${string_name__ssts}"
#    :set_var_to_stdin_pipe "${string_name__ssts}"
#}

#FUXME: Add examples.
#declare_function_with_stdin <<'/---'
#void set_float_to_stdin_pipe[args: string float_name, stdin: float input]
#
#Set the passed float variable to all piped standard input to the current
#context. If standard input is _not_ a pipe, an exception is thrown. See
#:set_var_to_stdin_pipe() for further details.
#/---
#function set_float_to_stdin_pipe() {
#    die_unless_arg 'Expected one float name.'
#    string float_name__sfts="${1}"
#    :var.die_unless_type_float  "${float_name__sfts}"
#    :set_var_to_stdin_pipe "${float_name__sfts}"
#}

#FUXME: Add examples.
#declare_function_with_stdin <<'/---'
#void :set_var_to_stdin_pipe[args: string variable_name, stdin: string input]
#
#Set the passed scalar variable to all piped standard input to the current
#context. If standard input is _not_ a pipe, an exception is thrown. Since this
#function blocks until receiving *EOF* (end of file) from such pipe, avoid this
#function unless such pipe is known to succinctly terminate.
#
#== Comparison to :set_var_to_stdin_pipe() ==
#
#While :set_var_to_stdin() is callable in all cases in which this function is
#callable, this function is inherently safer than that function when receiving
#standard input from a pipe. In particular, if initializing and writing input to
#such pipe consumes more than the time that
#die_unless_stdin_readable_sans_blocking() internally waits for such input to
#become readable, :set_var_to_stdin() throws an exception. While acceptable
#in the general case, such behavior is certainly unacceptable here. Consider a
#system under heavy load, for example; since this function is _always_ piped
#input, initializing and writing such pipe could consume more than the time that
#die_unless_stdin_readable_sans_blocking() waits, though such write will usually
#eventually succeed. Hence, this function is strongly preferable to
#:set_var_to_stdin() whenever receiving piped standard input.
#/---
#function :set_var_to_stdin_pipe() {
#    # See :set_var_to_stdin_pipe() for further details.
#    die_unless_arg 'Expected one variable name.'
#    string var_name__svts="${1}"
#    :var.die_unless "${var_name__svts}"
#    die_unless_stdin_pipe
#    noop ${(P)var_name__svts::="$(< "${ZESHY_STDIN_PATH-/dev/stdin}")"}
#    close_stdin
#}
#
#   die_unless_stdin_readable_sans_blocking

    # The prior instance of this function was named :set_var_to_stdin()
    # and, as such nomenclature suggests, called
    # die_unless_stdin_readable_sans_blocking() rather than merely
    # die_unless_stdin_pipe(). While this beneficially permitted such function
    # to be called under a wider array of contexts than the current instance of
    # this function, it also invited subtle issues. In particular, if
    # initializing and writing input to the pipe to such function consumed more
    # than the time that die_unless_stdin_readable_sans_blocking() internally
    # halts for such input to become readable, such function threw an exception.
    # While acceptable in the general case, such behavior is certainly
    # unacceptable here. Consider a system under heavy load, for example; since
    # this function is *ALWAYS* piped input, initializing and writing input to
    # such pipe could take considerably longer than the expected wait time,
    # though such write will eventually succeed.
    #
    # To correct this, the current instance of this function explicitly requires
    # piped input and implicitly, indefinitely, silently blocks on such input.
