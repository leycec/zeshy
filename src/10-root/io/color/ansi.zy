#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Color-specific ANSI escape sequences.

== See Also ==

* https://en.wikipedia.org/wiki/ANSI_escape_code[ANSI escape code] reference.
/---

# ....................{ GLOBALS                            }....................
# Effectively, "<Esc>[".
:str.global ZY_ANSI_CSI=$'\E\[' <<'/---'
2-byte Control Sequence Introducer (CSI) prefixing all *standard ANSI escape
sequences* (i.e., sequences supported by all ANSI-conformant terminals),
including sequences for displaying both 3- and 8-bit colors.
/---

# Effectively, "<Esc>]".
:str.global ZY_ANSI_OSC=$'\E\]' <<'/---'
2-byte Operating System Command (OSC) prefixing all *nonstandard ANSI escape
sequences* (i.e., sequences supported by only a subset of ANSI-conformant
terminals), including sequences for associating color indices with arbitrary
RGB values.
/---

:str.global ZY_ANSI_SUFFIX_NEXT=';' <<'/---'
1-byte Select Graphics Rendition (SGR) delimiter for delimiting subsequences in
both standard and nonstandard ANSI escape sequences (i.e., CSI and OSC).
/---

:str.global ZY_ANSI_SUFFIX_LAST='m' <<'/---'
1-byte Select Graphics Rendition (SGR) suffix for both standard and nonstandard
ANSI escape sequences (i.e., sequences prefixed by either the ANSI CSI or OSC).
/---

# ....................{ GLOBALS ~ pattern                  }....................
# Define such globals after prior globals. Dismantled, this is:
#
# * $'...''[...], matching the CSI or OSC prefixing such sequences. Since
#   ${ZY_ANSI_CSI} and ${ZY_ANSI_OSC} do not escape the corresponding
#   glob-reserved characters, such globals cannot be expanded into this glob.
# * (...)m", matching zero or more Select Graphic Rendition (SGR)
#   parameters also referred to as color indices:
#   * "|", matching the empty string and hence the ANSI escape code
#     "CSI m" identical to "<Esc>[0m" resetting all SGR parameters.
#   * "[0-9](#c1,3)", matching an 8-bit integer expressed as one to three
#     digits as the first SGR parameter.
#   * "(;[0-9](#c1,3))#", matching zero or more sequences of a semicolon
#     followed by an 8-bit integer as all following SGR parameters.
:str.global\
    ZY_ANSI_GLOB=$'\E''[\[\]](|[0-9](#c1,3)('${ZY_ANSI_SUFFIX_NEXT}'[0-9](#c1,3))#)'${ZY_ANSI_SUFFIX_LAST} <<'/---'
Glob matching a single ANSI escape sequence, including both standard CSI- and
nonstandard OSC-prefixed ANSI sequences.
/---

:str.global\
    ZY_ANSI_PCRE=$'\E''[\[\]](?:[0-9]{1,3}(?:'${ZY_ANSI_SUFFIX_NEXT}'[0-9]{1,3})*)?'${ZY_ANSI_SUFFIX_LAST} <<'/---'
PCRE matching a single ANSI escape sequence, including both standard CSI- and
nonstandard OSC-prefixed ANSI sequences.
/---

# ....................{ GLOBALS ~ sgr                      }....................
#FIXME: Rename to ${ZY_ANSI_SGR_COLOR_INDEXED}.
:str.global ZY_ANSI_SGR_INDEXED_COLOR='5' <<'/---'
1-byte Select Graphics Rendition (SGR) attribute, when preceded by the extended
SGR foreground or background attribute and followed by a color index, for
displaying the color with such index in the color pallette for such terminal.
Such index must be an integer in either:

* [0, 255] on 256-color terminals (e.g., `xterm`, `rxvt-256color`).
* [0, 87] on 88-color terminals (e.g., `rxvt`).

See define_global_x11_color_name_to_color_ansi_256() for further details.
/---

:map.global ZY_ANSI_SGR_NAME_TO_VALUE <<'/---'
Map from lowercase color attribute name to the Select Graphics Rendition (SGR)
integer configuring such attribute when preceded by ${ZY_ANSI_CSI}.
/---
ZY_ANSI_SGR_NAME_TO_VALUE=(
    # Attribute resetters.
    reset 0

    # Attribute enablers.
    bold      1
    weak      2
    italic    3
    underline 4
    blink     5
    reverse   7
    conceal   8
    normal   22

    # Attribute disablers.
    bold_off      22
    italic_off    23
    underline_off 24
    blink_off     25
    reverse_off   27
    conceal_off   28

    # Foreground colors.
    black   30
    red     31
    green   32
    yellow  33
    blue    34
    magenta 35
    cyan    36
    white   37
    indexed 38
    default 39

    # Background colors.
    background=black   40
    background=red     41
    background=green   42
    background=yellow  43
    background=blue    44
    background=magenta 45
    background=cyan    46
    background=white   47
    background=indexed 48
    background=default 49

    #FIXME: Rename to "black_intense" and such.
    # Foreground high-intensity colors.
    intense_black   90
    intense_red     91
    intense_green   92
    intense_yellow  93
    intense_blue    94
    intense_magenta 95
    intense_cyan    96
    intense_white   97
    intense_default 99

    #FIXME: Rename to "background=black_intense" and such.
    # Background high-intensity colors.
    background=intense_black   100
    background=intense_red     101
    background=intense_green   102
    background=intense_yellow  103
    background=intense_blue    104
    background=intense_magenta 105
    background=intense_cyan    106
    background=intense_white   107
    background=intense_default 109
)

# ....................{ REMOVERS                           }....................
#FIXME: Right. This *SHOULD* be called elsewhere. We currently simply inline its
#implementation elsewhere, which is patently wrong. Grep the codebase for use of
#${~ZY_ANSI_GLOB}.

:func_ ':void :Str.ansi.remove(:Str str_name) [var_name_suffix="__Sra"]' :func{
    :Str.^=.remove "${str_name__Sra}" "${ZY_ANSI_GLOB}"

#FIXME: Add example.
}:func <<'/---'
Remove all ANSI escape sequences from the string variable with the passed name.
/---
