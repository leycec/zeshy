#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *terminfo capabilities* (i.e., a map from human-readable terminal
operation names to the corresponding escape sequences under the current
terminal).
/---

#FIXME: Provide additional terminfo-based capabilities. See "man terminfo".

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void :die_unless_stdout_terminal_terminfo(
    string error_message =
        "Standard output not a terminal, terminal \"${TERM-}\" terminfo entry not found, or terminfo database not found.")

Throw an exception unless standard output supports ``terminfo''-specific
terminal capabilities. See :is_stdout_terminal_terminfo() for further details.
/---
function :die_unless_stdout_terminal_terminfo() {
    die_unless_args_0_to_1 'Expected optional error message.'
    :is_stdout_terminal_terminfo or :die\
        ${1-Standard output not a terminal, terminal \"${TERM-}\" terminfo entry not found, or terminfo database not found.}
}

declare_function_with_stdin <<'/---'
void :die_unless_terminal_terminfo(
    string error_message =
        "Terminal \"${TERM-none}\" terminfo entry not found or terminfo database unavailable.")

Throw an exception unless the local ``terminfo'' database describes the current
terminal. See :is_terminal_terminfo() for further details.
/---
function :die_unless_terminal_terminfo() {
    die_unless_args_0_to_1 'Expected optional error message.'
    :is_terminal_terminfo or :die\
        ${1-Terminal \"${TERM-none}\" terminfo entry not found or terminfo database unavailable.}
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_stdout_terminal_terminfo()

Report success if standard output supports *``terminfo''-specific terminal
capabilities* (e.g., `clear`, clearing the current terminal). Specifically,
report success if:

* Standard output from the current context is a terminal. See
  :is_stdout_terminal() for further details.
* `zsh` module `terminfo` is available, the current process is running under a
  terminal, _and_ the current ``terminfo'' database contains a description of
  such terminal. See :is_terminal_terminfo() for further details.
/---
function :is_stdout_terminal_terminfo() {
    die_if_args
    is_stdout_terminal and :is_terminal_terminfo
}

declare_function_with_stdin <<'/---'
[status: bool] :is_terminal_terminfo()

Report success if the local ``terminfo'' database describes the current
terminal. Specifically, report success if:

* `zsh` module `terminfo` is available, in which case the current `zsh`
  interpreter was compiled with support for the ``terminfo'' library and
  database. While this does _not_ necessarily imply such library or database to
  still be available, such critical operating system components are unlikely to
  have since been uninstalled or removed.
* The current process is running under a terminal, as implied by string global
  ${TERM} expanding to a nonempty string uniquely identifying such terminal.
* The current ``terminfo'' database contains a description of such terminal.
/---
function :is_terminal_terminfo() {
    # Report success if map global ${terminfo} defines key "colors". If such
    # database does not contain a description for the current terminal *OR* the
    # current process is headless, module "terminfo" internally undefines all
    # key-value pairs of such module. Curiously, such module neither undefines
    # such map or changes the number of keys such map insists it contains;
    # hence, neither of the following tests suffice to test such condition:
    #
    #    (( ${+terminfo} ))
    #    (( ${#terminfo} ))
    die_if_args
    is_module zsh/terminfo and (( ${+terminfo[colors]} ))
}

# ....................{ WRITERS                            }....................
declare_function_with_stdin <<'/---'
void clear_terminal()

Clear the current terminal of all prior output. This function implements a
pure-zsh analogue of the `clear` command.
/---
function clear_terminal() {
    # Validate sanity.
    die_if_args
    :die_unless_stdout_terminal_terminfo

    # Clear such terminal.
    echoti clear

    # Oddly, the terminfo capability "clear" moves the cursor to the second
    # rather than first line after clearing the screen. (Rectify this.)
    :move_terminal_cursor_to_row_column 1 1
}

#FIXME: Add support for negative index offsets.
declare_function_with_stdin <<'/---'
void :move_terminal_cursor_to_row_column(int row, int column)

Move the current terminal cursor to the passed 1-based row and column.
/---
function :move_terminal_cursor_to_row_column() {
    # Validate sanity.
    die_unless_args_2 'Expected one row index and one column index.'
    :string row="${1}" column="${2}"
    :die_unless_stdout_terminal_terminfo
    :die_unless_terminal_column "${column}"
    :die_unless_terminal_row "${row}"

    # Convert zsh-style 1-based indices to "terminfo"-style 0-based indices.
    echoti cup $(( row - 1 )) $(( column - 1 ))
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to ::move_terminal_cursor_to_row_column_column_and_row().
    #FUXME: Excise inefficient subshells! Horrid. *shudder*
    # :int.die_unless_nonnegative "${column}"
    # :int.die_unless_nonnegative "${row}"
    # (( column <= $(get_terminal_width) )) or :die\
    #     "Column ${column} exceeds terminal width $(get_terminal_width)."
    # (( row <= $(get_terminal_height) )) or :die\
    #     "Row ${row} exceeds terminal height $(get_terminal_height)."

# If the current
# process is *headless* and hence _not_ running under a terminal (e.g., a
# cronjob), failure is reported.

#FUXME: Woops! The "terminfo" database and hence zsh module is only
#conditionally available. See @{io/color/color} for lengthy discussion.
    #We've confirmed the latter test to reliably test whether or not the current
    #${TERM} is recognized. Note it is *NOT* sufficient to test whether such map is
    #empty (e.g., via "(( ${#terminfo} ))"). Curiously, although the size of such
    #map never changes, zsh appears to internally undefine *ALL* its key-value pairs
    #for unrecognized terminals. Hence, we have to test the existence of the most
    #common such key: "colors". (Done!)
