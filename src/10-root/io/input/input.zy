#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Interactive input.
/---

# ....................{ INPUTTERS                          }....................
# Due to newline-related subtleties, there intentionally exists no corresponding
# input_character(). Ideally, such function would simply run "read -rk".
# Unfortunately, "read -ek" returns a character *UNLESS* a newline was read, in
# which case it returns the empty string. Since this violates user expectations,
# set_string_to_input_character() must be called instead. Unfortunately, when
# capturing subprocess output (e.g., with "string c=$(input_character)"), zsh
# appears to silently consume not merely the last newline of output but *ALL*
# newlines suffixing such output. Hence, output captured by calling this
# function returns a character *UNLESS* a newline was read. Sounds familiar,
# doesn't it? In short, there exists no reasonable means of returning a single
# newline. While cumbersome, consider calling set_string_to_input_character()
# instead.

:func.doc <<'/---'
:str input_line()

Get a *single line* (i.e., a newline-delimited string otherwise containing no
newlines) interactively entered by the current user.

This function blocks until the first newline is entered.
/---
function input_line() {
    die_if_args
    die_unless_stdin_terminal

    # Block on and return such string.
    read -e
}


#FIXME: Refactor to support is_query_character_yes()-style output. The current
#implementation is overtly atrocious.
#FIXME: Such question requires localization.

:func.doc <<'/---'
:str query_character_ignored(?:str query='Press any key to continue.')

Print the passed question and block until the current user interactively enters
_any_ character, but neither return nor output such character.
/---
function query_character_ignored() {
    die_unless_args_0_to_1 'Expected optional question.'
    die_unless_stdin_terminal
    :str\
        question="${1:-${ZY_COLOR[cyan_bold]}Press any key to continue${ZY_COLOR[grey]}. }"\
        response

    # Print this question.
    print_message_sans_newline "${question}"

    # Block on and set this character.
    set_string_to_input_character response

    # Print a trailing newline unless this character is a newline.
    if { :not is_string_equals "${response}" "${ZY_ASCII_NEWLINE}" } {
        :stdout.echo_newline
    }
}
