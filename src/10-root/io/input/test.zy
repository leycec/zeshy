#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *interactive input testers* (i.e., functions testing such input).
/---

# ....................{ TESTERS ~ character                }....................
:func.doc <<'/---'
[status=:bool] is_input_character_yes()

Report success if a single character interactively entered by the current user
is the default affirmative answer for the current locale (e.g., `y` or `Y`,
assuming English) or failure otherwise, blocking until a character is entered.
/---
function is_input_character_yes() {
    # Validate sanity.
    die_if_args
    die_unless_stdin_terminal

    # Test such answer. Since such answer has (usually) been output to the
    # current terminal as "y" or "Y", avoid outputting such answer again.
    run_code_silent read -eq
}


#FIXME: Rename to is_queried_character_yes:() and similarly elsewhere. While a
#minor nomenclature change, it does wonders for improving readability.
:func.doc <<'/---'
[stdout=:str status=:bool] is_query_character_yes(:str query)

Report success if the next character interactively input by the current user is
the default positive response to yes/no questions for the current locale (e.g.,
`y` or `Y`, assuming English) or failure otherwise.

Print the passed query before requesting this input. Block until a character is
input.
/---
function is_query_character_yes() {
    # Validate sanity.
    die_unless_arg 'Expected one query.'
    :str query="${1}" response
    :list characters_yes characters_no

    # Lists of positive and negative responses to such query.
    set_list_to_locale_characters_yes characters_yes
    set_list_to_locale_characters_no  characters_no

    # Print such query and set such string to the current user's response.
    set_string_to_query_character_for_choices_default_and_nondefault\
        response "${query}" characters_no characters_yes

    # Test such answer.
    is_string_matches_pcre "${response}" "$(get_locale_pcre_yes)"
}

# ....................{ TESTERS ~ line                     }....................
#FIXME: Rename to is_query_line_YES() and create a new is_query_line_yes()
#function merely requiring "yes" rather than "YES". For safety, all existing
#calls to is_query_line_yes() should be shifted to is_query_line_YES().
#FIXME: This clearly requires use of an approach as above. The line:
#    set_string_to_query_line answer "${question}${answers}"
#...is the problem below. The list of possible answers needs to be passed as a
#list of string arguments rather than coerced into the query string.
#FIXME: "[YES/no]" is locale-specific and hence requires localization.

:func.doc <<'/---'
[status=:boolean] is_query_line_yes(
    :str query
    ?:str answers=" [YES/no] "
    ?:str answer_yes="YES"
)

Report success if a *single line* (i.e., newline-delimited string otherwise
containing no newlines) interactively entered by the current user is the default
affirmative answer for the current locale (e.g., `YES`, assuming English) or
failure otherwise, printing the passed question before receiving such input and
blocking until the first newline is entered.

This stronger alternative to is_query_character_yes() is
intended for questions whose confirmation carries permanent potentially harmful
consequences (e.g., data loss).
/---
function is_query_line_yes() {
    # Validate sanity.
    die_unless_args_1_to_3\
        'Expected one query, optional answers, and optional yes answer.'
    die_unless_stdin_terminal
    :str\
        question="${1}"\
        answers\
        answer_yes="${3:-YES}"\
        answer

    #FIXME: Hack! Shift such functionality to set_string_to_query_line().
    :list list_choice_default__sstqc list_choice_nondefault__sstqc
    list_choice_default__sstqc=( 'no' )
    list_choice_nondefault__sstqc=( 'YES' )
    :str\
        list_name_choice_default__sstqc='list_choice_default__sstqc'\
        list_name_choice_nondefault__sstqc='list_choice_nondefault__sstqc'\
        style_prefix__sstqc='set_string_to_query_line.prompt.'\
        border_left__sstqc\
        parens_left__sstqc\
        parens_right__sstqc\
        choice_default__sstqc\
        choice_nondefault__sstqc\
        choice_delimiter__sstqc\
        input__sstqc

    # Prompt substrings to be printed.
    border_left__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}border_left]-}${ZY_STYLE_TO_TEXT[${style_prefix__sstqc}border_left]-}"
    parens_left__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}parens_left]-}${ZY_STYLE_TO_TEXT[${style_prefix__sstqc}parens_left]-[}"
    parens_right__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}parens_right]-}${ZY_STYLE_TO_TEXT[${style_prefix__sstqc}parens_right]-] }"
    choice_default__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}choice_default]-}$(join_list "${list_name_choice_default__sstqc}")"
    choice_nondefault__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}choice_nondefault]-}$(join_list "${list_name_choice_nondefault__sstqc}")"
    choice_delimiter__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}choice_delimiter]-}${ZY_STYLE_TO_TEXT[${style_prefix__sstqc}choice_delimiter]-/}"
    input__sstqc="${ZY_STYLE_TO_COLOR[${style_prefix__sstqc}input]-}"

    if { is_args_2 } {
        answers="${2}"
    } else {
        answers="${border_left__sstqc}${parens_left__sstqc}${choice_default__sstqc}${choice_delimiter__sstqc}${choice_nondefault__sstqc}${parens_right__sstqc}${input__sstqc}"
#       answers=' '${ZY_COLOR[color.grey]-}'['${ZY_COLOR[color.blue]-}'YES'${ZY_COLOR[color.grey]-}'/'${ZY_COLOR[color.blue]-}'no'${ZY_COLOR[color.grey]-}'] '
    }

    # Print such question and get such answer.
    set_string_to_query_line answer "${question} ${answers}"

    # Test such answer.
    is_string_equals "${answer}" "${answer_yes}"
}

#FIXME: In lieu of unit tests...
#function queo() {
#    is_query_character_yes 'Really, whombolo?'
#   is_query_line_yes 'Really, whombolo?'
#}
