#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Langinfo getters* (i.e., functions obtaining string constants returned by the
canonical POSIX C function `nl_langinfo`). While map ${langinfo} also provides
access to such constants, such map's keys are _not_ terribly human- readable or
-rememberable (e.g., `CRNCYSTR`, the currency symbol for the current locale).
/---

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_locale_format_currency()

Format string for currency signs in the current locale (e.g., `-$`).

The first character of this string signifies how to print this sign; all
characters following this character signify this sign. Specifically, if the
first character of this string character is:

* `-`, this sign should be printed _before_ currency values.
* `+`, this sign should be printed _after_ currency values.
* `.`, this sign should be printed _in place of_ the radix point returned by
  get_locale_delimiter_radix() rather than before or after currency values.
/---
function get_locale_format_currency() {
    die_if_args
    :str.return "${langinfo[CRNCYSTR]}"
}

# ....................{ GETTERS ~ delimiter                }....................
:func.doc <<'/---'
:str get_locale_delimiter_radix()

Radix point for the current locale (e.g., `.`), also referred to as the decimal
mark when applying the conventional base 10 notation.

This string separates the integer from fractional portion of floating point
numbers under this locale.
/---
function get_locale_delimiter_radix() {
    die_if_args
    :stdout.echo "${langinfo[RADIX]}"
}


:func.doc <<'/---'
:str get_locale_delimiter_thousands()

Thousands separator for the current locale (e.g., `,`).

For readability, this character optionally separates:

* Each group of three consecutive digits of integers.
* The integer portion of floating point numbers.
/---
function get_locale_delimiter_thousands() {
    die_if_args
    :stdout.echo "${langinfo[THOUSEP]}"
}

# ....................{ GETTERS ~ pcre                     }....................
# Sadly, the arguably more informative string constants "YESSTR" and "NOSTR"
# have been withdrawn from recent versions of the locale specification.

:func.doc <<'/---'
:str get_locale_pcre_yes()

Perl-compatible regular expression (PCRE) matching positive single-character
responses to yes/no questions for the current locale (e.g., `^[yYoO].*`).
/---
function get_locale_pcre_yes() {
    die_if_args
    :stdout.echo "${langinfo[YESEXPR]}"
}

:func.doc <<'/---'
:str get_locale_pcre_no()

Perl-compatible regular expression (PCRE) matching negative single-character
responses to yes/no questions for the current locale (e.g., `^[nN].*`).
/---
function get_locale_pcre_no() {
    die_if_args
    :stdout.echo "${langinfo[NOEXPR]}"
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :locale.Chars_yes(:List list_name)

Set the list (ideally, list set) with the passed variable name to the set of all
characters signifying positive responses to yes/no questions under the current
locale, in the same order as returned by get_locale_pcre_yes().

== Examples ==

.:locale.Chars_yes()
==========================================
[source]
------------------------------------------
>>> set_locale en_CA.utf8
>>> get_locale_pcre_yes
^[yYoO].*
>>> listset canadian_yes
>>> :locale.Chars_yes canadian_yes
>>> :stdout.echo "${canadian_yes[@]}"
y Y o O
------------------------------------------
==========================================
/---
function :locale.Chars_yes() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize changes with :locale.Chars_no().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    die_unless_arg 'Expected one list name.'
    :str list_name__sltlcy="${1}" pcre__sltlcy
    :List.die_unless "${list_name__sltlcy}"

    # If the PCRE returned by get_locale_pcre_yes() is prefixed by a character
    # class, get the contents of such class. Since all such PCREs should be of
    # the form "^[${class}].*" and hence prefixed by a character class, this is
    # (largely) a formality.
    #
    # According to the set of all such PCREs harvested by Perl 5 package
    # http://cpansearch.perl.org/src/TOBYINK/Lingua-Boolean-Tiny-0.006/lib/Lingua/Boolean/Tiny/More.pm,
    # a small subset of such PCREs are *NOT* of the above form: e.g.,
    #
    # * Central Khmer, having YESEXPR "^[yY]([eE][sS])?".
    # * Konkani, having YESEXPR "^(\x{939}\x{92f}|[yY])".
    # * Ukranian, having YESEXPR
    #   "^([Yy+]|[\x{422}\x{442}][\x{410}\x{430}][\x{41a}\x{43a}]?)\$".
    #
    # Even in such nonconformant cases, however, such PCRE always contains a
    # character class. Since nonconformant PCREs arguably constitute bugs in the
    # corresponding locale definitions, ignoring such issues by only matching a
    # character class seems the simplest general-purpose approach.

    pcre__sltlcy="$(get_locale_pcre_yes)"
    if { :str.is_globbed_grouped "${pcre__sltlcy}" *'\['([^'\]']#)'\]'* } {
#       print "yes characters: ${match[1]}"
#       :List.print match
        # Decode encoded characters in this class (e.g., from "\x{43a}" to "ะบ").
        # Split this class on individual characters into the passed list.
        :str.Chars "$(unescape_pcre "${match[1]}")" "${list_name__sltlcy}"
    # Else, throw an exception.
    } else {
        :die "nl_langinfo() YESEXPR \"${pcre__sltlcy}\" contains no \"[\"- and \"]\"-delimited character class."
    }
}


:func.doc <<'/---'
:void :locale.Chars_no(:List list_name)

Set the list (ideally, list set) with the passed variable name to the set of all
characters signifying negative responses to yes/no questions under the current
locale, in the same order as returned by get_locale_pcre_no().

== See Also ==

* :locale.Chars_yes().
/---
function :locale.Chars_no() {
    # See :locale.Chars_yes() for further details.
    die_unless_arg 'Expected one list name.'
    :str list_name__sltlcy="${1}" pcre__sltlcy
    :List.die_unless "${list_name__sltlcy}"
    pcre__sltlcy="$(get_locale_pcre_no)"
    if { :str.is_globbed_grouped "${pcre__sltlcy}" *'\['([^'\]']#)'\]'* } {
        :str.Chars "$(unescape_pcre "${match[1]}")" "${list_name__sltlcy}"
    } else {
        :die "nl_langinfo() NOEXPR \"${pcre__sltlcy}\" contains no \"[\"- and \"]\"-delimited character class."
    }
}
