#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *coprocesses* (i.e., subshells of the current shell with standard input
and output attached to temporary anonymous FIFOs readable and writable only by
the current shell).
/---

# ....................{ SETTERS                            }....................
:func.document <<'/---'
void set_string_to_coprocess_output(string string_name)

Set the passed string variable to all standard output of the coprocess for the
current shell. If no such coprocess exists, throw an exception.
/---
function set_string_to_coprocess_output() {
    # Validate sanity.
    die_unless_arg 'Expected one string name.'

    #FIXME: Hmm; actually, wouldn't the following work in a non-blocking
    #manner?
    #
    #    IFS= read -rp -t 0 -d '' "${1}"

    # Set such string. Ideally, the following (slightly more efficient)
    # assignment should also work:
    #
    #     IFS= read -rp -d "" "${1}"
    #
    # Instead, such assignment silently blocks.
    :string.set_to_stdin "${1}" <&p
}

# --------------------( WASTELANDS                         )--------------------
    # Note that the "{" and "}"
    # delimiters are essential, ensuring the expansion of :stdin.get() receives
    # standard input from such coprocess rather than from the current context.
#   { :string.set "${1}" "$(:stdin.get)" } <&p
#   eval ${string_name__sstco}'="$(< /dev/stdin)" <&p'
