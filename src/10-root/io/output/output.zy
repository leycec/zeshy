#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *printer functions* (i.e., high-level functions printing strings).
Namely, maintain globals tracking the current state of standard output and
error, including modification times of the device files associated with such
file descriptors after the most recent call to a printer function writing such
file descriptors (e.g., :stdout.echo()).

== Nomenclature ==

In conventional languages, standard output and error serve only as streams to
which only human-readable strings intended for end users are printed. However,
in shell languages and hence `zeshy`, standard output and error serve as that
_and_ as sinks to which machine-readable strings intended for command
substitution are printed.

To manage such complexities, `zeshy` supports three broad classes of functions
for writing to standard output and error -- each with a corresponding
nomenclature for easier identification. In increasing order of abstraction and
functionality, these are:

* *Getters*, low-level functions returning strings to callers by writing to a
  subshell's standard output from command substitution (e.g.,
  `float time; time="$(get_time)"`). Most such functions are prefixed by `get_`;
  some, however, are prefixed by a verb specific to their function (e.g.,
  :path.canonicalize()).
* *Outputters*, mid-level functions printing strings by writing to the current
  shell's standard output and/or error. Such functions _may_ embellish such
  strings with terminal-specific colors (e.g., 8-color ANSI) and locale-specific
  encodings (e.g., UTF-8) configured by the current user, but otherwise behave
  straightforwardly. All such functions are prefixed by `output_`, and most by
  `:output_string_`.
* *Printers*, high-level functions printing strings by writing to the current
  shell's standard output and/or error. Like outputters, printers embellish such
  strings with settings configured by the current user. Unlike outputters,
  printers additionally behave in a context-aware manner, including:
  * If such output is preceded by prior output, printing vertical whitespace
    delimiting all prior and subsequent output.
  * If such output is attached to a terminal device _and_ exceeds the height of
    such terminal, paging such output with the current user's preferred pager
    (e.g., `less`, `more`).
  +
  All such functions are prefixed by `print_`.

Hence, while printer functions handle repetitive and often error-prone
contextual tasks on behalf of the caller, getter and outputter functions do
_not_. Likewise, while printer and outputter functions are rarely called from
command substitutions, getter functions are _always_.
/---

#FIXME: It'd be great to provide support for display server-specific display of
#dialog boxes for zeshy-based GUI scripts. See the line beginning
#"# First, try zenity." in shell script "start-tor-browser" bundled with the
#TorBrowser Bundle. Such script attempts to leverage the following external
#commands, in order: zenity (probably X-specific?), kdialog (KDE- and probably
#X-specific), xmessage (X-specific), and gxmessage (GNOME X-specific).

#FIXME: O.K.; extensive testing conclusively demonstrates the case. Just run
#the following command repeatedly:
#
#    >>> sync; :path.mtime /dev/pts/9
#
#The output clearly shows standard output's mtime to be updated exactly 8
#seconds to the nanosecond, which is clearly the reason for the nanoseconds
#never changing for standard output's mtime. So, no bug: just an unfortunate
#implementation detail.
#
#I'm afraid this means that standard output's mtime is useless for real-world
#use, suggesting we'll need to revert to the prior implementation. (Sucks; I
#know.)
#
#We'll still want to test whether or not standard output's path has changed, as
#that's reliably informative. ${ZY_STDOUT_PRIOR_MTIME}, however, should be
#ripped out in favor of the name of the most recent printer function to have
#been called. Searching up the callstack for that name was quite involved, as I
#recall. (Ye unbidden Gods, but why did I strip this out without properly
#checking whether or not it would work? Bad assumptions, I'm afraid.)
#FIXME: O.K.; apparently, TTY mtime *USED* to be updated in effectively real-
#time. This changed as of May 2013, at which time the working code below
#depending on real-time mtime updates silently broke. Specifically, Linux
#kernel file "drivers/tty/tty_io.c" now states:
#"/* We limit tty time update visibility to every 8 seconds or so. */". This is
#referred to as the '8 second rule.'" While a sound change in general, this is
#mildly unfortunate from our (admittedly) provincial userland perspective.
#While this could be hacked around this as follows, I'm unconvinced it's worth
#it:
#
#* If the mtime of the corresponding PTY device is less than 8 seconds ago,
#  tacitly assume such device has been written to. (This is the only sane
#  response, I'm afraid.)
#* Else, the mtime of such device is reliable. In such case, if such mtime has
#  *NOT* changed, then we definitively know such device has *NOT* been written
#  to and may react accordingly.
#FIXME: As further confirmation, consider this intriguing mailing list thread:
#
#"On http://vladz.devzero.fr/013_ptmx-timing.php, we can see how to find
# out length of a password using timestamps of /dev/ptmx. It is
# documented in "Timing Analysis of Keystrokes and Timing Attacks on
# SSH". To avoid that problem, do not update time when reading
# from/writing to a TTY.
#
# I am afraid of regressions as this is a behavior we have since 0.97
# and apps may expect the time to be current, e.g. for monitoring
# whether there was a change on the TTY. Now, there is no change. So
# this would better have a lot of testing before it goes upstream."
#
#For further thread tidbits, see:
#http://www.serverphorums.com/read.php?12,697887

# ....................{ GLOBALS                            }....................
:str.global ZY_STATE_STDOUT_PATH <<'/---'
Canonicalized absolute path of the device file associated with standard output
for the current shell at the time of the most recent call to
:update_stdout_state() or the empty string if such function has yet to be called.
/---


:str.global ZY_STATE_STDERR_PATH <<'/---'
Canonicalized absolute path of the device file associated with standard error
for the current shell at the time of the most recent call to
:update_stderr_state() or the empty string if such function has yet to be called.
/---

# ....................{ UPDATERS                           }....................
#FIXME: Update documentation. We no longer store stdout mtime, due to the
#kernel-level issues detailed above.
:func.doc <<'/---'
:void :update_stdout_state()

Update globals recording the state of standard output after the most recent call
to a printer function (e.g., :stdout.echo()), where ``state'' implies the
modification time of the device file associated with standard output at the time
of this call.

This state assists subsequent calls to :print_stdout_separated_start() in
deciding whether prior and subsequent output should be delimited by a newline.
/---
# Since standard output and error are typically both muxed to the same terminal,
# testing the modification time of the device file associated with standard
# output implicitly tests the same for standard error. Hence, testing only the
# latter suffices to ensure that prior and subsequent output are properly
# delimited -- even if such output was to standard error rather than output.
function :update_stdout_state() {
    die_if_args
    :stdout.Path ZY_STATE_STDOUT_PATH
}


:func.doc <<'/---'
:void :update_stderr_state()

Update globals recording the state of standard error after the most recent call
to a printer function (e.g., :stdout.echo()).

== See Also ==

* :update_stdout_state().
/---
function :update_stderr_state() {
    die_if_args
    :stderr.Path ZY_STATE_STDERR_PATH
}

# ....................{ RESETTERS                          }....................
:func.doc <<'/---'
:void :reset_stdout_state()

Reset tracking for standard output to its default state.

Specifically, this function resets color attributes for the current terminal to
such terminal's defaults _and_ nullifies tracking globals for standard output.
See :print_stdout_separated_stop() for further details.
/---
function :reset_stdout_state() {
    # Validate sanity.
    die_if_args

    # Reset terminal attributes.
    reset_terminal_color

    # Reset tracking globals.
    ZY_STATE_STDOUT_PATH=''
}

# ....................{ OUTPUTTERS ~ start                 }....................
:func.doc <<'/---'
:str :output_stdout_start()

Prepare for outputting to standard output.

Specifically, this function (in order):

* Resets color attributes for the terminal attached to standard output to such
  terminal's defaults. See reset_terminal_color() for further details.
/---
function :output_stdout_start() {
    die_if_args
    reset_terminal_color
}


:func.doc <<'/---'
:str :output_stderr_start()

Prepare for outputting to standard error.

See :output_stdout_start() for further details.
/---
function :output_stderr_start() {
    #FIXME: This suggests the need for separate :reset_stdout_color() and
    #:reset_stderr_color(). I say we excise reset_terminal_color(), yes?
    die_if_args
    { reset_terminal_color } :=stderr
}

# ....................{ OUTPUTTERS ~ stop                  }....................
:func.doc <<'/---'
:str :output_stdout_stop()

Conclude prior outputting to standard output.

Specifically, this function performs similar operations as
:output_stdout_start() in the reverse order.
/---
function :output_stdout_stop() {
    die_if_args
    reset_terminal_color
}


:func.doc <<'/---'
:str :output_stderr_stop()

Conclude prior outputting to standard output.

See :output_stderr_stop() for further details.
/---
function :output_stderr_stop() {
    die_if_args
    { reset_terminal_color } :=stderr
}

# ....................{ PRINTERS ~ start                   }....................
:func.doc <<'/---'
:str :print_stdout_start()

Prepare for printing to standard output.

Specifically, this function (in order):

* Updates globals tracking standard output state. See :update_stdout_state() for
  further details.
* Resets color attributes for the terminal attached to standard output to such
  terminal's defaults. See reset_terminal_color() for further details.
/---
function :print_stdout_start() {
    # Validate sanity.
    die_if_args

    # Update output state tested by subsequent zeshy printers *BEFORE* resetting
    # terminal attributes, as the latter touches device files examined by the
    # former.
    :update_stdout_state
    :output_stdout_start
}

:func.doc <<'/---'
str :print_stderr_start()

Prepare for printing to standard error.

See :print_stdout_start() for further details.
/---
function :print_stderr_start() {
    die_if_args
    :update_stderr_state
    :output_stderr_start
}

# ....................{ PRINTERS ~ stop                    }....................
:func.doc <<'/---'
:str :print_stdout_stop()

Conclude prior printing to standard output.

Specifically, this function performs similar operations as :print_stdout_start()
in the reverse order.
/---
function :print_stdout_stop() {
    # Validate sanity.
    die_if_args

    # Reset terminal attributes *BEFORE* updating output state tested by
    # subsequent zeshy printers, as the former touches device files examined by
    # the latter.
    :output_stdout_stop
    :update_stdout_state
}


:func.doc <<'/---'
:str :print_stderr_stop()

Conclude prior printing to standard output.

See :print_stderr_stop() for further details.
/---
function :print_stderr_stop() {
    die_if_args
    :output_stderr_stop
    :update_stderr_state
}

# ....................{ PRINTERS ~ separated               }....................
#FIXME: Update documentation.

:func.doc <<'/---'
:str :print_stdout_separated_start()

Prepare for subsequent printing to standard output.

Specifically, this function resets color attributes for the current terminal to
such terminal's defaults _and_ prints whitespace separating subsequent from
prior shell output to standard output if all of the following conditions hold:

** The current shell previously called at least one `zeshy`-specific printer
   function (e.g., :stdout.echo(), print_message_heading()), a prerequisite of the
   condition below.
** The current function was _not_ called directly from the command line (i.e.,
   was called by another function), a prerequisite of the condition below.
** The function calling the current function differs from the most recently
   called printer function. If such functions are the same, their output should
   usually be conjoined rather than separated by whitespace; if such functions
   differ, however, separating their output with whitespace usually improves
   readability and aesthetics.
* _Or_:
** The current modification time of standard output (in seconds since the Unix
   epoch) differs from the previous such time recorded by the most recently
   called printer function, implying that another runnable run at least one
   second before the current call but after the most recently called printer
   function has printed to standard output without calling
   update_stdout_tracking() to update such time. In theory, all runnables
   should update such time after printing to standard output; in practice, the
   ``regulatory burden'' imposed by such a rule guarantees its unlikelihood.
   While this condition fails to detect runnables run in the same second as the
   current call which printed to standard output without updating such time, it
   does reliably detect older such runnables. This condition is a convenience
   fallback and should _not_ be counted upon.
/---
function :print_stdout_separated_start() {
    # Validate sanity.
    die_if_args
    :str stdout_path_old="${ZY_STATE_STDOUT_PATH-}"

    # Prepare for printing to standard output.
    :print_stdout_start

    # If the global that tracks standard output is sane (i.e., is set, nonzero,
    # and more recent than the time at which the current shell was started), get
    # and test the time at which such shell last printed to standard output
    # against such global. If the two differ *AND* the canonicalized absolute
    # path of standard output has not changed, print a delimiting newline.
    if :is "${stdout_path_old}" == "${ZY_STATE_STDOUT_PATH}" :si {
#       :stderr.echo "stdout_path_old: ${stdout_path_old}; ZY_STATE_STDOUT_PATH: ${ZY_STATE_STDOUT_PATH}"
        :stdout.echo_newline
    }
}

# ....................{ STOPPERS                           }....................
:func.doc <<'/---'
:void :print_stdout_separated_stop()

Cleanup after prior printing to standard output.

Specifically, this function resets global tracking state for `zeshy` printer
functions _and_ color attributes for the current terminal to this terminal's
defaults. See reset_terminal_color() and :update_stdout_state() for further
details.
/---
function :print_stdout_separated_stop() {
    die_if_args
    :print_stdout_stop
}

#FIXME: In lieu of unit tests...
# function olii() {
#     print_message_heading 'yummy'
#     :stdout.echo 'here we are'
#     print_message_heading 'tummy'
#     :stdout.echo 'there we go'
# 
#     print_message_item 'yum'
#     print_message_item 'ows'
# }
