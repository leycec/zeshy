#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Output pagers* (i.e., functions paging text through an external paging command
such as `more` or `less`).
/---

#FIXME: Nice! It looks like we can coerce "less" (if and only if less is the
#current ${PAGER}, of course) into displaying color, which is of particular
#interest for paging man pages. To do so, simply export string globals
#resembling:
#
#    export LESS_TERMCAP_mb=$(tput bold; tput setaf 2) # green
#    export LESS_TERMCAP_md=$(tput bold; tput setaf 6) # cyan
#    export LESS_TERMCAP_me=$(tput sgr0)
#    export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) # yellow on blue
#    export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
#    export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) # white
#    export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
#    export LESS_TERMCAP_mr=$(tput rev)
#    export LESS_TERMCAP_mh=$(tput dim)
#    export LESS_TERMCAP_ZN=$(tput ssubm)
#    export LESS_TERMCAP_ZV=$(tput rsubm)
#    export LESS_TERMCAP_ZO=$(tput ssupm)
#    export LESS_TERMCAP_ZW=$(tput rsupm)
#
#This is fairly dark voodoo leveraging "termcap", the predecessor to "terminfo".
#"less" uses the former rather than the latter. For further details, see:
#
#    http://unix.stackexchange.com/questions/119/colors-in-man-pages/147#147
#
#While substantially better than the default monochrome, the above colors could
#arguably be better. Unsure as yet. In any case, here's an alternative (smaller)
#scheme; interestingly, the screenshot for this one looks *QUITE* a bit better:
#
#    export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
#    export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
#    export LESS_TERMCAP_me=$'\E[0m'           # end mode
#    export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
#    export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
#    export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline
#    export LESS_TERMCAP_ue=$'\E[0m'           # end underline
#
#For further details on this one, see:
#
#    http://linuxtidbits.wordpress.com/2009/03/23/less-colors-for-man-pages/
#FIXME: We currently set string global ${PAGER} in @{zsh/variable/global}. Given
#the above improvements, however, both ${PAGER} and the above globals should be
#set in a new @{io/output/pager/global} parcel, and the current parcel shifted
#to @{io/output/pager/pager}.
#FIXME: Since there's really *NO* downside to unconditionally declaring the
#above "less"-specific globals even if the current pager is *NOT* "less", do the
#following:
#
#* If "less" is pathable (but regardless of whether "${PAGER}" is "less"),
#  declare the above ${LESS_TERMCAP_*} globals. Note such globals require
#  "color" globals to already have been declared, possibly necessitating we
#  shift @{io/color} to @{io/00-color} or even to @{*-core/io/color}. (The
#  latter is arguably a better choice).
#FIXME: Great. However, we'd like the choice of pager to be user-configurable.
#Since we already have a reasonable nomenclature for configuring command
#alternatives, let's reuse that to good effect by declaring a new list global
#${ZY_ALTERNATIVES_PAGER} in @{*-if_config/*-core/alternatives}. Then, we
#should define a new precompilation hook ::precompile_pager_globals() doing
#the following:
#
#* If ${PAGER} is undefined or empty, set such global to the first pathable in
#  ${ZY_ALTERNATIVES_PAGER} if any.
#* If "less" is pathable, define the above "less"-specific globals.
#
#Done!
#FIXME: O.K.; so, the above solution is certainly great. That said, if
#"lesspipe" is available, "lesspipe" should *ALWAYS* be preferred to "less".
#"lesspipe" is a "less" wrapper simplifying colorization. For details, run 
#"lesspipe -h".

#FIXME: *ALL* high-level functions wrapping external commands with options
#calling run_code_paged() should instead prefix such command with "{" and suffix
#such command with "} | page_stdin". The latter approach is quite a bit more
#responsive under interactive use.

#FIXME: When *NOT* paging, visually demarcate wrapped lines (ideally with color
#or perhaps simply with a simple prefix). So, rather than printing:
#
#udev                 /dev                      devtmpfs     rw nosuid relatime size=10240k nr_in
#odes=497142 mode=755
#
#  Instead, printing:
#
#udev                 /dev                      devtmpfs     rw nosuid relatime size=10240k nr_in
# ^-> odes=497142 mode=755
#
#  Or perhaps simply:
#
#udev                 /dev                      devtmpfs     rw nosuid relatime size=10240k nr_in
# ...odes=497142 mode=755
#
#  Or the slightly cleverer:
#
#udev                 /dev                      devtmpfs     rw nosuid relatime size=10240k nr...
# ..._inodes=497142 mode=755
#
#Actually, no. That reads awkwardly. One "..." is sufficient, I should think.
#Happily, "yppy" already has appropriate Unicode for the former arrows. In
#either case, I prefer a prefixing space on the wrapped line.

# ....................{ PAGERS                             }....................
:func.doc <<'/---'
:str page_string(+:str texts)

Page all passed strings with the current user's preferred pager (e.g., `less`)
if these strings cumulatively exceed the current terminal height _or_ print
these string without paging otherwise.

This function dynamically pages on an as-needed basis, thus implementing a
pseudo-intelligent context-sensitive pager.
/---
function page_string() {
    :str.page_if_needed "${@}" :or :stdout.echo "${*}"
}


#FIXME: As a slight improvement, make paging a bit "fuzzy." I've noticed that
#my eye, at least, would prefer paging not merely on text that's strictly too
#high but on text that's *SUFFICIENTLY* high. Sufficiently, is subjective, of
#course, so this should probably be user-configurable. I'm contemplating a
#default of 75% for such user-configurable global -- say:
#
#    ZY_PAGE_IF_TEXT_TO_TERMINAL_HEIGHT_PERCENT=75
#
#Then, page if the text height is greater than or equal to
#(( $(get_terminal_height) * ZY_PAGE_IF_TEXT_TO_TERMINAL_HEIGHT_PERCENT / 100 )).
#Should work great, yes?
#FIXME: Actually, it'd be better to just *CLEAR* the screen prior to printing
#such sufficiently tall text. The issue with tall text that still fits on the
#screen is not that such text isn't paged; it's that such text starts at a
#line number other than 1, which my eye (at least) expects for tall text.

:func.doc <<'/---'
[stdout: :str status=:boolean] :str.page_if_needed(+:str texts)

Conditionally *page* (i.e., pipe to the current user's preferred pager) the
passed string.

Specifically, this function:

* If standard output for the current shell is _not_ attached to a terminal
  device, reports failure.
* Else if this string exceeds the dimensions of this terminal, pages this
  string and reports success.
* Else, reports failure.
/---
function :str.page_if_needed() {
    die_unless_args 'Expected one or more strings.'
    :str\
        text="${*}"\
        pager_path\
        pager_name_uppercased\
        pager_options_list_name
    :int terminal_height terminal_width text_height

    # If standard output is *NOT* a terminal, return failure.
    :stdout.is_terminal :or :failure.report

    # List of all lines split from this string.
    :list lines
    :str.Lines "${text}" lines

    # Determine whether such output's logical line length (i.e., accounting for
    # implicit wrapping of long lines) exceeds the terminal height or physical
    # line width the terminal width. The algorithm resembles
    # get_displayed_line_length(), but differs by immediately stopping iteration
    # on exceeding terminal height or width rather than continuing to accumulate
    # total line length. This reduces an otherwise O(N) algorithm to effectively
    # O(1), assuming non-ludicrous terminal height and width.
    :List.Size lines text_height
#   :List.print lines

    # Width and height of the current terminal.
    :set_int_to_terminal_height terminal_height
    :set_int_to_terminal_width_if_found_or_default terminal_width

    # Increment such width to avoid treating maximally long lines as wrapped.
    terminal_width+=1
#   print "text_height: ${text_height}\nterminal_height: ${terminal_height}"

    # ${text_height} gives only the number of lines in such string without
    # considering line wrapping. Even if such number does not exceed the
    # terminal height, such number incremented by the number of additional
    # wrapped lines in such string *COULD* still exceed the terminal height. In
    # the latter case, such string requires paging.
    if (( text_height <= terminal_height )) {
        :int line_length
        :str line
        for  line ("${lines[@]}") {
            # Length of the current line excluding ANSI escape sequences.
            :set_int_to_string_length_printable line_length "${line}"
#           print "line width (sans ANSI): ${line_length}"

            # Increment the number of lines required to display such text by the
            # number of wrapped lines by which the current line exceeds the terminal
            # width (i.e., by the number of additional wrapped lines in this line).
            text_height+=$(( line_length / terminal_width ))

            # If such number exceeds the terminal height, we have definitively
            # determined such string to require paging -- and may thus stop.
            if (( text_height > terminal_height )) { break }
        }
    }
#   print "text_height: ${text_height}\nterminal_height: ${terminal_height}\nline_width: ${line_width}\nterminal_width_plus_one: ${terminal_width_plus_one}"

    # If the terminal suffices to display output without paging, return failure.
    if (( text_height <= terminal_height )) {
        :failure.report
    }
#   print "line length: ${text_height}\nterminal height: ${terminal_height}"

    #FIXME: Horrible! Use setters, please.

    # Absolute path of the pager command preferred by the current user.
    pager_path=$(get_pager_path)

    # Command to be run.
    :list pager_command
    pager_command=( "${pager_path}" )

    # Pager name in all capitals for use below.
    :set_string_to_path_basename pager_name_uppercased "${pager_path}"
    :uppercase_string pager_name_uppercased

    # List of pager-specific options.
    pager_options_list_name="ZY_OPTIONS_${pager_name_uppercased}"
    if { :List.is "${pager_options_list_name}" } {
        pager_command+=( "${(@P)pager_options_list_name}" )
    }

    # Page such text.
    :stdout.echo "${text}" | "${pager_command[@]}"
}

# ....................{ PAGERS ~ stdin                     }....................
:func.doc <<'/---'
:str page_stdin[stdin=(:str text)]

Page standard input with the current user's preferred pager (e.g., `less`) if
this input exceeds the current terminal height _or_ print this input unpaged
otherwise.

For typical use, consider piping this function standard output from a block of
related commands to be paged together.

== See Also ==

* page_string().

== Examples ==

.page_stdin()
==========================================
[source]
------------------------------------------
>>> :str on_forgotten_language="
... Once I spoke the language of the flowers,
... Once I understood each word the caterpillar said,
... Once I smiled in secret at the gossip of the starlings,
... And shared a conversation with the housefly
... in my bed.
... Once I heard and answered all the questions
... of the crickets,
... And joined the crying of each falling dying
... flake of snow,
... Once I spoke the language of the flowers....
... How did it go?
... How did it go?"
>>> {
...     get_string_line "${on_forgotten_language}" 1
...     get_string_line "${on_forgotten_language}" 2
... } | page_stdin
Once I spoke the language of the flowers,
How did it go?
------------------------------------------
==========================================
/---
function page_stdin() {
    # Validate sanity. Avoid throwing an exception if standard output
    # is *NOT* attached to a terminal, as :str.page_if_needed() already
    # handles this condition appropriately.
    die_if_args

    # All prior read lines of standard input.
    :str stdin

    # Currently read line of standard input.
    :str stdin_line

    # Incrementally read each line of standard input and for each such line,
    # print such line to standard output and append such line to the string
    # accumulating such input. While slightly more complex than the conventional
    # blocking implementation capturing all standard input at once (e.g.,
    # "$(< /dev/stdin)"), this non-blocking implementation is preferable for
    # paging output from non-trivial commands not expected to end immediately.
    # Dismantled, this is:
    #
    # * "IFS=", preventing read() from splitting read input on field separators.
    # * "-r", preserving input characters (e.g., backslashes are not escapes).
    # * "-E", copying read input to standard output.
#   while { IFS= read -rE stdin_line } {
    while { IFS= read -r stdin_line } {
        # Copy such line to standard output. In theory, this should also be
        # achievable by passing option "-E" to read() above, instructing such
        # call to perform such copy itself. In practice, read() suffixes such
        # copy with an an erroneous blank line. To avoid such nonsense, do it
        # ourselves instead.
        :stdout.echo "${stdin_line}"

        #FIXME: This is *EXCESSIVELY* inefficient. Which is to say, it's dumb.
        #Instead, just do this inside the loop:
        #
        #   stdin+="${stdin_line}${ZY_ASCII_NEWLINE}"
        #
        #Then, after looping, if we *REALLY* don't want the suffixing newline:
        #
        #   stdin="${stdin[1,-2]}"
        #
        #That's it. *facepalm*

        # If this is any line *EXCEPT* the first, prefix this line by a newline.
        # Since this is the common case, test for this first. For efficiency,
        # inline this test.
        if :is -n ${stdin} :si {
            stdin+=${ZY_ASCII_NEWLINE}${stdin_line}
        # Else, this is the first line. Append such line as is.
        } else {
            stdin+=${stdin_line}
        }
#       print "stdin line read: ${stdin_line}"
    }
#   print "stdin read: ${stdin}"

    # If required, page such input. Since the prior iterator already printed
    # such input to standard output, avoid doing so again here.
    { :str.page_if_needed "${stdin}" } :=failure.ignore
}

#FIXME: In lieu of unit tests...
#function pins() {
#    print 'ok' | page_stdin
#    print '================'
#    print 'ok\nko' | page_stdin
#    print '================'
#    print 'ok\nko\nokko' | page_stdin
#    print '================'
#    string yoko; yoko="$(print 'ok\nko\nokko' | page_stdin)"
#    print "yoko: ${yoko}"
#}

# ....................{ RUNNERS                            }....................
:func.doc <<'/---'
:str run_code_paged(+:str codes)

Run the passed code with standard output and error piped to the current pager if
such output exceeds either the current terminal height or width or as is (i.e.,
without paging) otherwise.

Hence, this function implements an intelligent pager. Customary pager commands
block on standard input, thus delaying output until after the input command
completes operation. Resource-intensive commands not completing immediately
(e.g., `ls -R *`) thus block paging with no intermediate output until such
commands eventually complete. To rectify such interface woes, this function
immediately prints all output as received from the passed command to standard
error prior to paging such output, as needed.
/---
function run_code_paged() {
    # If not called from a terminal, run this command without paging.
    if { :not :stdout.is_terminal } {
        run_code "${@}"
    # Else, run the passed command with redirection.
    } else {
        die_unless_args 'Expected one or more commands.'
        :str output
#       :stdout.echo "run_code_paged: ${@}..."

        # Run this command and capture standard output from this command.
        :run_code_and_set_string_to_stdout_by_subshell "${@}" output

        # Page this output, ignoring failure if this output requires no paging.
        { :str.page_if_needed "${output}" } :=failure.ignore
    }
}

#FIXME: In lieu of unit tests...
# function fata() {
#     # This command induces an eventual infinite loop in get_stdin_until_eot()
#     # if we've mucked that function up. Nice way to reliably test it, anyway.
#     run_code_paged command ls -l --color /usr/portage/distfiles
#     # list_path_verbosely /usr/portage/distfiles
#     # grep_path /usr/portage Gentoo
# }
