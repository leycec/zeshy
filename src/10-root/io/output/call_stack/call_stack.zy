#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Call stack outputters* (i.e., functions printing the current call stack,
typically called when printing exception stack traces).
/---

#FIXME: We *REALLY* want a new function die_unless_style_prefix() throwing an
#exception unless the passed style prefix "exists" in the loosest sense of that
#verb (i.e., unless such string prefixes at least one key of either
#${ZY_STYLE_TO_COLOR} or ${ZY_STYLE_TO_TEXT} -- or perhaps simply the
#former, which should invariably be the case for *ANY* defined style).
#FIXME: Hmm; or perhaps merely a function warn_unless_style_prefix(). Throwing
#an exception seems fairly heavy- handed, but a warning would be welcome.
#FIXME: Actually, this is complete nonsense. If the codebase is sufficiently
#robust, this is a non-issue. And it should be. Hence, a non-issue. This
#directly implies *ALL* such functionality should be refactored to actually
#call existing zeshy functionality. *sigh*

# For fault tolerance in exception handlers, avoid calling other functions in
# such functions unless explicitly preceding such calls with tests of whether
# such functions are still defined or not.

# ....................{ PRINTERS                           }....................
#FIXME: Shift elsewhere. *shrug*
:func.doc <<'/---'
string print_call_stack()

Print a trace of the current call stack to standard output. See
output_call_stack_lists_in_style() for further details.
/---
function print_call_stack() {
    # Validate sanity.
    die_if_args

    # Print such stack.
    :print_stdout_separated_start
    output_call_stack_lists_in_style\
        funcstack funcfiletrace funcsourcetrace "${0}."
    :print_stdout_separated_stop
}

# ....................{ OUTPUTTERS                         }....................
#FIXME: There appears to be a very curious oddity in zsh; sourcing a zsh script
#containing the line "return 1" produces the expected call stack, resembling:
#
#./tmpy.zsh: failed with exit status 1
#    \_ curse_call_stack() { /home/leycec/zsh/zeshy/src/main: 418 }
#     \_ handle_exception() { /home/leycec/zsh/zeshy/src/main: 8458093679346917924 }
#      \_ TRAPZERR() { ./tmpy.zsh: 2 }
#       \_ ./tmpy.zsh { zsh: 32 }
#
#Running a zsh script containing the line "exit 1" as a command, however,
#produces call stacks resembling:
#
#TRAPZERR: failed with exit status 20
#    \_ curse_call_stack() { /home/leycec/zsh/zeshy/src/main: 418 }
#     \_ handle_exception() { /home/leycec/zsh/zeshy/src/main: 7955925549229362501 }
#      \_ TRAPZERR() { /bin/zsh: 31 }
#
#In the latter case, zsh reports the call stack to contain no such command. But
#it gets worse! zsh fails to include commands in *ALL* call stacks; try
#"command ls zzmmmm", for example. This tends to produce inherently senseless
#error output. I suggest one of two solutions:
#
#* If "TRAPZERR" is the top of the call stack, print no call stack. (It's
#  meaningless, so don't even bother.) This is most certainly the simplest
#  solution. (Actually, I tried this. It blatantly sucks.)
#* Forcefully add the expected command to the top of the call stack. This is
#  much better, since the prior solution still crudely reports
#  "TRAPZERR: failed with exit status 20" when in fact we expect
#  "./tmpy.zsh: failed with exit status 1". Just not sure how to *GET* the
#  expected command name or exit status.

#FIXME: Documentation requires slight revision. This function actually omits all
#leading stack frames matching glob
#('output_call_stack'|'print_exception')(|'_'*). (Actually, even this glob is
#now outdated. Probably best just to qualitatively describe such glob.)
#FIXME: Document styles.

:func.doc <<'/---'
string output_call_stack_lists_in_style_caller(
    string funcstack_list_name,
    string funcfiletrace_list_name,
    string funcsourcetrace_list_name)

Output a trace of the call stack encapsulated by the passed instances of
canonical list globals ${funcstack}, ${funcfiletrace}, and ${funcsourcetrace} to
standard output, using user-configurable styles prefixed by the dot-suffixed
caller's name followed by `.stack` (i.e., `$(:caller.get).stack.`). See
output_call_stack_lists() for further details.
/---
function output_call_stack_lists_in_style_caller() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one ${funcstack} list name, one ${funcfiletrace} list name, and one ${funcsourcetrace} list name.'
    :str caller

    # Caller name.
    :set_string_to_caller caller

    # Output such title.
    output_call_stack_lists_in_style\
        "${@}" "${caller}.stack."
}

#FIXME: While the output is significantly more aesthetic than previously, it
#still suffers a critical defect: line wrapping. Due to our horizontal
#alignment of caller metadata, we now output long lines resembling:
#
#┖┰┈┈┈┈┈• :die() ≪⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯· “/home/leycec/.zeshy/cache/digest/debug.zwc/die_unless_symlink” • 5
# ┖┰┈┈┈┈• die_unless_symlink() ≪⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯· “/home/leycec/.zeshy/cache/digest/debug.zwc/:is_symlink_broken” • 4
#
#This isn't terribly readable or aesthetic. Such lines should be wrapped: e.g.,
#
#┖┰┈┈┈┈┈• :die() •┈┒
# ┋ “/home/leycec/.zeshy/cache/digest/debug.zwc/die_unless_symlink” • 5
# ┖┰┈┈┈┈• die_unless_symlink() •┈┒
#  ┋ “/home/leycec/.zeshy/cache/digest/debug.zwc/:is_symlink_broken” • 4
#
#Considerably better, wouldn't you say? Revising such output *WILL* be a bit of
#an effort, but (hopefully) nowhere near as painful as the prior revision.
#FIXME: Incidentally, there's little to no reason to output the *ENTIRE*
#absolute path of the current digest file for each function call of such stack.
#Instead, simply output such digest file's basename -- or perhaps just the
#absolute path of a *THEORETICAL* symbolic link to such file with the current ${HOME}
#prefixing such path replaced by "~/" (e.g., "~/.zeshy/cache/digest/current").
#(Obviously, we can't actually create such link, but... hey. Why not just print
#it as if such link existed?)

:func.doc <<'/---'
string output_call_stack_lists_in_style(
    string funcstack_list_name,
    string funcfiletrace_list_name,
    string funcsourcetrace_list_name,
    string style_prefix)

Output a trace of the call stack encapsulated by the passed instances of
canonical list globals ${funcstack}, ${funcfiletrace}, and ${funcsourcetrace} to
standard output, using user-configurable styles prefixed by the passed prefix.
Such trace consists of all previously called functions, sourced scripts, and
eval() statements in the current call path, excluding only the stack frame of
the caller's call to this function.

If ::exception.print_uncaught() called this function (the typical case), both
the call to this function by ::exception.print_uncaught() _and_ the call to
::exception.print_uncaught() will be omitted from the output. As implementation
details of `zeshy`-specific exception handling, such calls convey no meaningful
context to end consumers of exception stack traces.

== Call Stack Globals ==

Module `zsh/parameter` exports four call stack-centric list globals:
${funcfiletrace}, ${funcsourcetrace}, ${funcstack}, and ${functrace}.

=== ${funcfiletrace} and ${funcsourcetrace} ===

Each element of ${funcfiletrace} and ${funcsourcetrace} provides the `:`-
delimited line number and filename of the corresponding runnable in the call
stack. In the case of ${funcfiletrace}, such line numbers and filenames specify
the *point of call* of such runnables (i.e., the line at which such runnable was
called in such file); in the case of ${funcsourcetrace}, such line numbers and
filenames specify the *point of definition* of such runnables (i.e., the line at
which such runnable was defined in such file).

For most purposes (including outputting call stacks), points of call are more
helpful than points of definition. However, the latter do provide unique
metadata _not_ provided by any other such list: namely, the capacity to
distinguish whether a runnable was a called function or sourced file. Since
function names may contain arbitrary characters and filenames arbitrary
characters excluding `/` and `\0`, there exists no general-purpose means of
distinguishing between the two merely on the basis of name alone.

Happily, ${funcsourcetrace} circuitously corrects this issue. If a runnable was
a sourced file, the corresponding element of ${funcsourcetrace} is suffixed by
`:0`; else, such element is suffixed by `:${line_number}`, where
`${line_number}` is a strictly positive integer.

Hence, this function requires both lists.

=== ${funcstack} ===

Each element of ${funcstack} provides the name of the corresponding runnable in
the call stack. Since neither ${funcfiletrace} or ${funcsourcetrace} provide
such metadata, this function also requires the ${funcstack} for such call stack.

=== ${functrace} ===

Each element of ${functrace} provides the `:`-delimited line number and filename
of the point of call for the corresponding runnable in the call stack. Since
such line number is relative to the start of the runnable rather than file
containing such call _and_ since ${funcfiletrace} already provides such line
number and filename in *absolute form* (i.e., relative to the file rather than
runnable containing such call), this function does _not_ require such list.

== Caveats ==

*Consider redirecting such output to standard error*, especially when
accompanying such stack with error or warning messages. Doing so ensures that
calling this function from process substitutions (e.g., `$(get_zsh_version)`)
implicitly outputs to the terminal device attached to the current shell rather
than into a string captured by such shell.
/---
function output_call_stack_lists_in_style() {
    # Validate sanity. For safety, avoid calling other functions both here and
    # below that might conceivably throw exceptions or no longer exist. On the
    # other hand, since zsh expands aliases at function definition time,
    # expanding aliases is quite safe.
    die_unless_args_4\
        'Expected one ${funcstack} list name, one ${funcfiletrace} list name, one ${funcsourcetrace} list name, and one style prefix.'
    string\
        funcstack_name__ocsl="${1}"\
        funcfiletrace_name__ocsl="${2}"\
        funcsourcetrace_name__ocsl="${3}"\
        style_prefix="${4}"\
        frame_first_style_prefix\
        frame_midst_style_prefix\
        frame_last_style_prefix\
        callee_style_prefix\
        caller_style_prefix\
        indentation__ocsl\
        first_frame_corner_left__ocsl\
        first_frame_forker_left__ocsl\
        first_frame_border_left__ocsl\
        first_frame_joiner_left__ocsl\
        midst_frame_corner_left__ocsl\
        midst_frame_forker_left__ocsl\
        midst_frame_border_left__ocsl\
        midst_frame_joiner_left__ocsl\
        last_frame_corner_left__ocsl\
        last_frame_forker_left__ocsl\
        last_frame_border_left__ocsl\
        last_frame_joiner_left__ocsl\
        callee_name__ocsl\
        caller_corner_left__ocsl\
        caller_border_left__ocsl\
        caller_border_left_repeated__ocsl\
        caller_joiner_left__ocsl\
        caller_filename_prefix__ocsl\
        caller_filename__ocsl\
        caller_filename_suffix__ocsl\
        caller_line_prefix__ocsl\
        caller_line_suffix__ocsl
    integer\
        count__ocsl\
        index__ocsl\
        first_frame_forker_left_length__ocsl\
        callee_name_length__ocsl\
        callee_name_length_max__ocsl\
        caller_line__ocsl
    list callee_names__ocsl callee_name_lengths__ocsl
#   print "style prefix: ${style_prefix}"

    # Styles for the first, last, and all intervening stack frames.
    frame_first_style_prefix="${style_prefix}frame_first."
    frame_midst_style_prefix="${style_prefix}frame_midst."
    frame_last_style_prefix="${style_prefix}frame_last."
    callee_style_prefix="${style_prefix}callee."
    caller_style_prefix="${style_prefix}caller."

    # If any such list is undefined or not a list, fail. See :List.is() for
    # further details.
    is "${(tP)funcstack_name__ocsl-}~~~${(tP)funcfiletrace_name__ocsl-}~~~${(tP)funcsourcetrace_name__ocsl-}" ==\
       'array'*'~~~array'*'~~~array'* si or :die\
        "\${${funcstack_name__ocsl}}, \${${funcfiletrace_name__ocsl}}, and/or \${${funcsourcetrace_name__ocsl}} undefined or not lists."

    # Size of the first such list computed *BEFORE* possibly truncating such
    # list below. See get_list_size() for further details.
    count__ocsl="${#${(@P)funcstack_name__ocsl}}"

    # If such lists are of unequal size, throw an exception.
    (( count__ocsl == ${#${(@P)funcfiletrace_name__ocsl}} &&\
       count__ocsl == ${#${(@P)funcsourcetrace_name__ocsl}} )) or :die\
       "List \${${funcstack_name__ocsl}\} size ${count__ocsl} unequal to list \${${funcfiletrace_name__ocsl}\} size ${#${(@P)funcfiletrace_name__ocsl}} and/or list \${${funcfiletrace_name__ocsl}\} size ${#${(@P)funcfiletrace_name__ocsl}}."

    # If the desired call stack is the current call stack, ignore the current
    # function and all directly preceding such call stack functions *BEFORE*
    # performing further validation. See
    # output_call_stack_index_lists_and_style_prefix() for further details.
    if is "${funcstack_name__ocsl}" == 'funcstack' si {
        # For obvious reasons, skip the first such index. Since this guarantees
        # such index to exceed 1, a list copy is *ALWAYS* required.
        integer  index_first__ocsl=2
        while (( index_first__ocsl <= count__ocsl )) and
            is "${${(@P)funcstack_name__ocsl}[${index_first__ocsl}]}" ==\
                ('output'|'print')'_call_stack'(|'_'*) si {
#           print "funcstack_name__ocsl[${index_first__ocsl}]: ${${(@P)funcstack_name__ocsl}[${index_first__ocsl}]}; indices: ${index_first__ocsl} / ${count__ocsl}"
            index_first__ocsl+=1
        }

        # Do *NOT* quote list slices, as that merely concatenates elements.
        #
        # If such index exceeds the last valid index, zsh will clear all
        # lists below without error, resulting in a zero count and this function
        # silently reporting success below. Since this is exactly as expected,
        # such index need *NOT* be validated here.
        list funcstack__ocsl funcfiletrace__ocsl funcsourcetrace__ocsl
        funcstack__ocsl=(       ${funcstack[${index_first__ocsl},-1]} )
        funcfiletrace__ocsl=(   ${funcfiletrace[${index_first__ocsl},-1]} )
        funcsourcetrace__ocsl=( ${funcsourcetrace[${index_first__ocsl},-1]} )
        funcstack_name__ocsl='funcstack__ocsl'
        funcfiletrace_name__ocsl='funcfiletrace__ocsl'
        funcsourcetrace_name__ocsl='funcsourcetrace__ocsl'

        # Recompute such list size *AFTER* truncating such list above.
        count__ocsl="${#${(@P)funcstack_name__ocsl}}"
    }

    # If there are no stack frames to be printed, silently report success.
    (( count__ocsl )) or :success.report

    # Substrings to be measured (but not repeated) below and hence *NOT* yet
    # injected with color.
    first_frame_forker_left__ocsl="${ZY_STYLE_TO_TEXT[${frame_first_style_prefix}forker_left]-\\}"

    # Lengths of such substrings computed *BEFORE* injecting colors into such
    # substrings below. See get_string_ansiless_length_printable() for further
    # details.
    first_frame_forker_left_length__ocsl="${(m)#first_frame_forker_left__ocsl}"

    # Substrings to be repeated below and hence never injected with color. Since
    # :Str.repeat_str_ansiless_to_len() requires strings *NOT*
    # containing colors, shift these colors to preceding substrings.
    first_frame_border_left__ocsl="${ZY_STYLE_TO_TEXT[${frame_first_style_prefix}border_left]-_}"
    midst_frame_border_left__ocsl="${ZY_STYLE_TO_TEXT[${frame_midst_style_prefix}border_left]-_}"
    last_frame_border_left__ocsl="${ZY_STYLE_TO_TEXT[${frame_last_style_prefix}border_left]-_}"
    caller_border_left__ocsl="${ZY_STYLE_TO_TEXT[${caller_style_prefix}border_left]--}"

    # Substrings prefixing each line printed below.
    first_frame_corner_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_first_style_prefix}corner_left]-}${ZY_STYLE_TO_TEXT[${frame_first_style_prefix}corner_left]-}"
    first_frame_forker_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_first_style_prefix}forker_left]-}${first_frame_forker_left__ocsl}${ZY_STYLE_TO_COLOR[${frame_first_style_prefix}border_left]-}"
    first_frame_joiner_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_first_style_prefix}joiner_left]-}${ZY_STYLE_TO_TEXT[${frame_first_style_prefix}joiner_left]- }"
    midst_frame_corner_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_midst_style_prefix}corner_left]-}${ZY_STYLE_TO_TEXT[${frame_midst_style_prefix}corner_left]-}"
    midst_frame_forker_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_midst_style_prefix}forker_left]-}${ZY_STYLE_TO_TEXT[${frame_midst_style_prefix}forker_left]-\\}${ZY_STYLE_TO_COLOR[${frame_midst_style_prefix}border_left]-}"
    midst_frame_joiner_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_midst_style_prefix}joiner_left]-}${ZY_STYLE_TO_TEXT[${frame_midst_style_prefix}joiner_left]- }"
    last_frame_corner_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_last_style_prefix}corner_left]-}${ZY_STYLE_TO_TEXT[${frame_last_style_prefix}corner_left]-}"
    last_frame_forker_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_last_style_prefix}forker_left]-}${ZY_STYLE_TO_TEXT[${frame_last_style_prefix}forker_left]-\\}${ZY_STYLE_TO_COLOR[${frame_last_style_prefix}border_left]-}"
    last_frame_joiner_left__ocsl="${ZY_STYLE_TO_COLOR[${frame_last_style_prefix}joiner_left]-}${ZY_STYLE_TO_TEXT[${frame_last_style_prefix}joiner_left]- }"
#   print "corner left first: ${first_frame_corner_left__ocsl}"

    # All other substrings printed below.
    caller_corner_left__ocsl="${ZY_STYLE_TO_COLOR[${caller_style_prefix}corner_left]-}${ZY_STYLE_TO_TEXT[${caller_style_prefix}corner_left]-< }${ZY_STYLE_TO_COLOR[${caller_style_prefix}border_left]-}"
    caller_joiner_left__ocsl="${ZY_STYLE_TO_COLOR[${caller_style_prefix}joiner_left]-}${ZY_STYLE_TO_TEXT[${caller_style_prefix}joiner_left]-- }"
    caller_filename_prefix__ocsl="${ZY_STYLE_TO_COLOR[${caller_style_prefix}filename_prefix]-}${ZY_STYLE_TO_TEXT[${caller_style_prefix}filename_prefix]-\"}${ZY_STYLE_TO_COLOR[${caller_style_prefix}filename]-}"
    caller_filename_suffix__ocsl="${ZY_STYLE_TO_COLOR[${caller_style_prefix}filename_suffix]-}${ZY_STYLE_TO_TEXT[${caller_style_prefix}filename_suffix]-\"}"
    caller_line_prefix__ocsl="${ZY_STYLE_TO_COLOR[${caller_style_prefix}line_prefix]-}${ZY_STYLE_TO_TEXT[${caller_style_prefix}line_prefix]-: }${ZY_STYLE_TO_COLOR[${caller_style_prefix}line]-}"
    caller_line_suffix__ocsl="${ZY_STYLE_TO_COLOR[${caller_style_prefix}line_suffix]-}${ZY_STYLE_TO_TEXT[${caller_style_prefix}line_suffix]-}"

    # Repeat each border substring sufficiently many times to ensure vertical
    # alignment of the callee name following such border. For generality,
    # implement the fallback rather than optimized logic of :Str.repeat_str().
    # See that function for further details.
    #
    # Under default zeshy styles, two common alignment schemes are as follows:
    #
    #    ┎┈┈┈•
    #    ┖┰┈┈•
    #     ┖┰┈•
    #      ┖┈•
    #
    #    ┖┰┈┈•
    #     ┖┰┈•
    #      ┖┈•
    #
    # As prior examples demonstrates, the first frame requires one substring
    # less than the frame count of such border, the last frame exactly one
    # such substring, and every other frame one less such substring than the
    # prior frame. Since the last frame requires only one substring, such
    # substring need not be repeated here.
    :Str.repeat_str_ansiless_to_len\
        first_frame_border_left__ocsl\
        "${first_frame_border_left__ocsl}"\
        $(( count__ocsl - 1 ))
    :Str.repeat_str_ansiless_to_len\
        midst_frame_border_left__ocsl\
        "${midst_frame_border_left__ocsl}"\
        $(( count__ocsl - 1 ))

    #FIXME: Sufficiently long caller runnable names *AND* callee filenames
    #should be truncated to avoid exceeding line length. To best preserve
    #information despite truncation, replace the middle rather than beginning or
    #end of such names with a single Unicode ellipsis. While a bit non-trivial,
    #it would be particularly nice to define a new utility function -- say,
    #"string :output_string_truncated_to_length(string text, integer length)"
    #doing so. Note: finding the "middle" of the string to be replace should
    #prove interesting!

    # Find the length of the longest callee runnable, used by iteration below to
    # add sufficient padding between callee and caller metadata to horizontally
    # align the latter into a proper column. In other words, purely aesthetic.
    #
    # To reduce the cost of such iteration, cache the callee names and lengths
    # of such names produced by such iteration to the corresponding elements of
    # local lists. Subsequent iteration reuses such caches rather than
    # reproducing such values.
    callee_name_length_max__ocsl=0
    for (( index__ocsl  = 1;
           index__ocsl <= count__ocsl;
           index__ocsl++ )) {
        # Callee name for the current stack frame.
        set_string_to_call_stack_lists_index_in_style\
            callee_name__ocsl\
            "${funcstack_name__ocsl}"\
            "${funcsourcetrace_name__ocsl}"\
            "${index__ocsl}"\
            "${style_prefix}callee."

        # Length of such name excluding ANSI escape sequences.
        :set_int_to_string_length_printable\
            callee_name_length__ocsl "${callee_name__ocsl}"

        # Cache such values for reuse in subsequent iteration.
        callee_names__ocsl[${index__ocsl}]="${callee_name__ocsl}"
        callee_name_lengths__ocsl[${index__ocsl}]="${callee_name_length__ocsl}"

        # If such length exceeds the current maximum, replace such maximum.
        if (( callee_name_length__ocsl > callee_name_length_max__ocsl )) {
              callee_name_length_max__ocsl="${callee_name_length__ocsl}"
        }
    }
#   print "callee name length max: ${callee_name_length_max__ocsl}"

    # Print such stack, excluding the call to this function.
    for (( index__ocsl  = 1;
           index__ocsl <= count__ocsl;
           index__ocsl++ )) {
        # If this is the last stack frame to be printed, prefix such frame with
        # adornment specific to such frame.
        #
        # However, an edge case question arises: should traces consisting of
        # only one frame prefix such frame as though it were the first or last
        # such frame? Since the latter choice provides marginally better output
        # under default styles, this function privelages such output.
        # Specifically, test whether this frame is the last *BEFORE* testing
        # whether this frame is the first.
        if (( index__ocsl == count__ocsl )) {
            :stdout.echo_sans_newline\
                "${indentation__ocsl}${last_frame_corner_left__ocsl}${last_frame_forker_left__ocsl}${last_frame_border_left__ocsl}${last_frame_joiner_left__ocsl}"
        # If this is the first stack frame to be printed, prefix such frame with
        # adornment specific to such frame.
        } elif (( index__ocsl == 1 )) {
            :stdout.echo_sans_newline\
                "${first_frame_corner_left__ocsl}${first_frame_forker_left__ocsl}${first_frame_border_left__ocsl}${first_frame_joiner_left__ocsl}"

            # If the forker for such prefix is nonempty, indent the next frame
            # to the right, ensuring the first but *NOT* second of the following
            # two example styles to be indented (as expected):
            if (( first_frame_forker_left_length__ocsl )) {
                indentation__ocsl+=' '
            }
        # Else, prefix such frame with customary adornment.
        } else {
            # Truncate such border by one arbitrary character. For simplicity,
            # snip off the rightmost character.
            midst_frame_border_left__ocsl="${midst_frame_border_left__ocsl[1,-2]}"

            # Output such prefix.
            :stdout.echo_sans_newline\
                "${indentation__ocsl}${midst_frame_corner_left__ocsl}${midst_frame_forker_left__ocsl}${midst_frame_border_left__ocsl}${midst_frame_joiner_left__ocsl}"

            # Indent the next frame to the right *AFTER* printing the prefix for
            # the current frame. See prior output examples.
            indentation__ocsl+=' '
        }

        # Repeat the intra-border substring sufficiently many times to
        # vertically align the caller filename following such border: e.g.,
        #
        #    01234567890
        #    anaximander() ≪⋯·
        #    diogenes() ≪⋯⋯⋯⋯·
        #    hegel() ≪⋯⋯⋯⋯⋯⋯⋯·
        #    marx() ≪⋯⋯⋯⋯⋯⋯⋯⋯·
        #            76543210
        #
        # Given the prior example, the following computation crudely follows.
        :Str.repeat_str_ansiless_to_len\
            caller_border_left_repeated__ocsl\
            "${caller_border_left__ocsl}"\
            $(( callee_name_length_max__ocsl -\
                callee_name_lengths__ocsl[${index__ocsl}] + 1 ))

        # File line and filename at which the caller of the prior stack frame
        # called the current stack frame. Split such ${funcfiletrace} element on
        # the last colon into such file line and filename, thus accounting for
        # possible colons in filenames (e.g., from "colon:blow:7" to filename
        # "colon:blow" and line number 7).
        caller_line__ocsl="${${(@P)funcfiletrace_name__ocsl}[${index__ocsl}]##*:}"
        caller_filename__ocsl="${${(@P)funcfiletrace_name__ocsl}[${index__ocsl}]%:*}"

        # Output such frame.
        :stdout.echo\
            "${callee_names__ocsl[${index__ocsl}]}${caller_corner_left__ocsl}${caller_border_left_repeated__ocsl}${caller_joiner_left__ocsl}${caller_filename_prefix__ocsl}${caller_filename__ocsl}${caller_filename_suffix__ocsl}${caller_line_prefix__ocsl}${caller_line__ocsl}${caller_line_suffix__ocsl}"
    }
}

#FIXME: In lieu of unit tests...
#function yaso() {
#    print 'calling output_call_stack_title_in_style_caller()...'
#    output_call_stack_title_in_style_caller
#
#    print
#    print 'calling output_call_stack_lists_title_in_style()...'
#    print "$(\
#        output_call_stack_lists_title_in_style\
#        funcstack\
#        funcsourcetrace\
#        'print_exception.heading.') Huzzah!"
#
#    print
#    print 'calling print_call_stack()...'
#    function yasoyaso() { yasoyasoyaso }
#    function yasoyasoyaso() { yasoyasoyasoyaso }
#    function yasoyasoyasoyaso() {
#        print_call_stack
#    }
#    yasoyaso
#}
