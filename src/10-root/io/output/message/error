#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *error printers* (i.e., functions printing error messages commonly
associated with fatal exceptions).
/---

# ....................{ PRINTERS                           }....................
#FIXME: A bit outdated. Revise in line with present-day :warning.print().
#Currently uncalled, so it's a moot point.

#:func.doc <<'/---'
#[stderr: string] print_error(string message1 = "", ...)
#
#Print the passed strings (defaulting to the empty string) as an error entitled
#under the basename of the runnable at the call stack root (i.e., as returned by
#output_call_stack_root_in_style()). See print_message() for further details.
#/---
#function print_error() {
#    #FIXME: Only suffix "()" if such root is a function.
#    print_string_titled_in_style_caller "${*}" "$(output_call_stack_root_in_style)()" 1>&2
#}

#FIXME: In lieu of unit tests...
#function erro() {
#    print_error "I'm in control of the infinite mind, and I control infinite power. When? Every black minute. And self-control is something I've learned."
#}

# --------------------( WASTELANDS                         )--------------------
# ....................{ GETTERS                            }....................
#:func.doc <<'/---'
#integer get_terminal_width_for_errors()
#
#Get the maximum number of characters available to each line of error and
#exception messages on the current terminal under the user-configurable styles
#specific to such messages. See get_string_titled_width_body_in_style()
#for further details.
#/---
#function get_terminal_width_for_errors() {
#    get_string_titled_width_body_in_style 'print_error.'
#}

#Get the maximum number of characters in the body of each line of output (i.e.,
#excluding width of visual borders on such lines) wrapped to the current terminal
#under the user-configurable styles prefixed by the passed prefix.

#Since such messages are often
#embedded within a visual box, this number is often slightly less than that
#returned by get_terminal_width().
#Print the passed strings (defaulting to the empty string) suffixed by a newline
#and decorated by user-configured colors to standard error as an error message.
#See print_message() for further details.

#   :stdout.echo "${ZY_STYLE_TO_COLOR[print_error.caller]-}$(output_call_stack_root_in_style)${ZY_STYLE_TO_COLOR[print_error.colon]-}: ${ZY_STYLE_TO_COLOR[print_error.message]-}${*}" 1>&2

#FUXME: The current overly simplistic get_print_message_prefix()-based approach
#should be jettisoned in favor of a Unicode box-drawing based approach: e.g.,
#
#/------------------------------[ zsh_gone_bad() ]-----------------------------\
#| An error has been thrown. It is a horrible error, but others are probably   |
#| worse.                                                                      |
#\-----------------------------------------------------------------------------/
#
#What's particularly nice about such an approach is that it inherently delimits
#prior from subsequent output. Indeed, we needn't even prefix such output with
#delimiting whitespace anymore, which is particularly nice.

    # Size of the current call stack, including the call to this function.
    # Avoid calling :call_stack.get_size(), which tends to behave erratically
    # when called from within an exception handler.
#   integer call_stack_size=${#funcstack}

#   if (( call_stack_size >= 4 )) {
#       if is "${funcstack[3]}" == ('TRAPZERR'|'die') si {
#           caller_caller_name="${funcstack[4]}"
#       } else {
#           #FUXME: Doesn't this also constitute an error condition?
#           print "caller caller name: ${funcstack[3]}\ncaller caller caller name: ${funcstack[4]}"
#           caller_caller_name="${funcstack[3]}"
#       }
#   #FUXME: Doesn't this also constitute an error condition?
#   } elif (( call_stack_size == 3 )) {
#       caller_caller_name="${funcstack[3]}"
#   } elif (( call_stack_size == 2 )) {
#       :die "print_error_status() called by ${funcstack[2]}() rather than ::exception.print_uncaught()"
#   } else {  # elif (( call_stack_size == 1 )) {
#       print "call stack size: ${#funcstack}; ${call_stack_size}\nfuncstack[2]: ${funcstack[2]}"
#       :die "print_error_status() not callable directly from the CLI"
#   }

#; call_stack_size="$(:call_stack.get_size)"
#:func.doc <<'/---'
#string print_warning_sans_newline_suffix(
#    string message1 = "", string message2, ...)
#
#Print the passed strings (defaulting to the empty string) suffixed by no newline
#and decorated by user-configured colors to standard error as a warning message.
#See :warning.print() for further details.
#/---
#function print_warning_sans_newline_suffix() {
#    print_string_sans_newline_suffix "$(:warning.print "${@}" 2>&1)" 1>&2
#}

