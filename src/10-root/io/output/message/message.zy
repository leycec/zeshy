#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Message printers* (i.e., functions printing informative messages).
/---

#FIXME: Rename "message" to "info" everywhere, including the name of this
#parcel. "Message" is overly verbose and, more importantly, ambiguous: error and
#warning messages are also messages.

#FIXME: Consider prefixing each wrapped message line under non-interactive
#cronjobs with an appropriate timestamp (e.g., "["$(date +'%F %T')"]") rather
#than embedding such lines in an ANSI-flavored box.

# ....................{ PRINTERS                           }....................
#FIXME: Correct example output.
:func.doc <<'/---'
:str print_message(*:str messages)

Print the passed strings (defaulting to the empty string) as a message entitled
under the name of the runnable originating the current call stack.

For aesthetics, this title will be centered to the width of the current terminal
and such message wrapped to such width. Assuming default user-configurable
`zeshy` styles, both will be formatted with box drawing characters appropriate
to the current character locale encoding (e.g., UTF-8).

== See Also ==

* print_string_titled_in_style_caller().

== Examples ==

.print_message()
==========================================
[source]
------------------------------------------
>>> :str on_falsehood="
... An error does not become truth by reason of multiplied propagation, nor
... does truth become error because nobody sees it. Truth stands, even if
... there be no public support. It is self sustained."
>>> print_message "${on_falsehood}"
┎──────────────────────────────────╼ zeshy ╾───────────────────────────────────┒
┃ An error does not become truth by reason of multiplied propagation, nor does ┃
┃ truth become error because nobody sees it. Truth stands, even if there be no ┃
┃ public support. It is self sustained.                                        ┃
┖──────────────────────────────────────────────────────────────────────────────┚
------------------------------------------
==========================================
/---
function print_message() {
    print_string_titled_in_style_caller "${*}"\
        "$(output_call_stack_title_in_style_caller) Message"
}


:func.doc <<'/---'
:str print_message_interactively(*:str messages)

Print the passed strings (defaulting to the empty string) as a message if the
current shell is interactive _or_ reduce to a noop otherwise.

== See Also ==

* print_message().
/---
function print_message_interactively() {
    # Implement such conditional with an "if"- rather than "and"-based
    # statement, as the latter returns non-zero exit status when noninteractive.
    if { :shell.is_interactive } {
        print_message "${*}"
    }
}


:func_ ':str print_message_unboxed(*:str messages)' :func{
    # String concatenating these messages in unboxed form.
    :str messages_unboxed
    IFS= :str.Str.reduce_boxing "${messages[*]}" messages_unboxed

    # Print this string.
    print_message "${messages_unboxed}"
}:func <<'/---'
Print the passed strings (defaulting to the empty string) as a message,
replacing all *boxing* (i.e., substrings consisting of a newline followed by
zero or more horizontal whitespace characters) in these strings with single
spaces before wrapping the result to the width of the current terminal.

== See Also ==

* print_message().
* :str.Str.reduce_boxing().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_representation="
... The oppressed are allowed once every few years to decide which
... particular representatives of the oppressing class shall represent and
... repress them in parliament."
>>> print_message_unboxed "${on_representation}"
┎──────────────────────────────────╼ zeshy ╾───────────────────────────────────┒
┃ The oppressed are allowed once every few years to decide which particular    ┃
┃ representatives of the oppressing class shall represent and repress them in  ┃
┃ parliament.                                                                  ┃
┖──────────────────────────────────────────────────────────────────────────────┚
>>> print_message "${on_representation}"
┎──────────────────────────────────╼ zeshy ╾───────────────────────────────────┒
┃ The oppressed are allowed once every few years to decide which               ┃
┃ particular representatives of the oppressing class shall represent and       ┃
┃ repress them in parliament.                                                  ┃
┖──────────────────────────────────────────────────────────────────────────────┚
------------------------------------------
==========================================
/---

# ....................{ PRINTERS ~ heading                 }....................
:func.doc <<'/---'
:str print_message_heading(+:str message_headings)

Print the passed string(s) as a heading centered to the width of the current
terminal, styled under the user-configurable styles prefixed by
`print_message_heading.`.

== See Also ==

* center_string_in_style(), replacing `${style_prefix}` with this prefix (e.g.,
  `print_message_heading.border_right`, styling the right border).
/---
function print_message_heading() {
    die_unless_args 'Expected one or more strings.'

    #FIXME: Interesting. Terrible, but interesting. If you uncomment the print
    #statements below and call this function like so:
    #
    #    >>> COLUMNS=20 print_message_heading yum  
    #    ... terminal width: 20 (20)
    #    ... terminal width: 102 (102)
    #    ... ┃┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• yum •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┃
    #
    #Clearly, the call to :print_stdout_separated_start() resets the setting of ${COLUMNS}. Why?
    #But it gets stranger. If you indirectly call this function like so (noting
    #that die_if_runnable() calls die_evaluated() internally setting ${COLUMNS}
    #as above):
    #
    #    >>> die_if_runnable info
    #    ... terminal width: 98 (98)
    #    ... terminal width: 98 (98)
    #
    #That works as expected. But the first case doesn't. What in the three Hells
    #of Man and Machine is going on here? *sigh*
#   print "terminal width: $(get_terminal_width) (${COLUMNS})"

    # Print such heading.
    :print_stdout_separated_start
#   print "terminal width: $(get_terminal_width) (${COLUMNS})"
    center_string_in_style_caller "${*}"
    :print_stdout_separated_stop
}

# ....................{ PRINTERS ~ item                    }....................
:func.doc <<'/---'
:str print_message_item(+:str message_items)

Print the passed string(s) as an itemized message, wrapped to the width of the
current terminal but neither prefixed by a heading or suffixed by a footer.

Assuming default user-configurable `zeshy` styles, such message will be
formatted with line drawing characters appropriate to the current character
locale encoding (e.g., UTF-8).

== Examples ==

.print_message_item()
==========================================
[source]
------------------------------------------
>>> :str on_liberty=\
... "I'm a lover of my own liberty, and so I would do nothing to restrict
... yours. I simply want to please my own conscience, which is God."
>>> :str on_forgiveness=\
... "The weak can never forgive. Forgiveness is the attribute of the strong."
>>> print_message_item "${on_liberty}"; print_message_item "${on_forgiveness}"
┇ I'm a lover of my own liberty, and so I would do nothing to restrict yours. ┇
╏ I simply want to please my own conscience, which is God. •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╏
┇ The weak can never forgive. Forgiveness is the attribute of the strong. •┈┈┈┇
------------------------------------------
==========================================
/---
function print_message_item() {
    # To avoid prefixing such items with spurious newlines, avoid delimiting
    # such output with calls to :print_stdout_separated_start() and :print_stdout_separated_stop(). The Linux
    # kernel imposes a delay on TTY mtime updates, ensuring :print_stdout_separated_start()
    # cannot reliably determine whether or not prior output exists and hence
    # almost always simply outputs a prefixing newline.
    die_unless_args 'Expected one or more strings.'
    :print_stdout_start
    wrap_string_in_style_caller "${*}"
    :print_stdout_stop
}


:func.doc <<'/---'
:str print_message_item_interactively(*:str messages)

Print the passed strings (defaulting to the empty string) as an itemized
message if the current shell is interactive or return silently otherwise.

== See Also ==

* print_message_item().
* :context.is_cli().

== Examples ==

.print_message_item_interactively()
==========================================
[source]
------------------------------------------
>>> :str on_dogs=\
... "To his dog, every man is Napoleon; hence the constant popularity of dogs."
>>> :str on_death=\
... "Death is the only thing we haven't succeeded in completely vulgarizing."
>>> :str on_propaganda=\
... "The propagandist's purpose is to make one set of people forget that
... certain other sets of people are human."
>>> {
...     print_message_item_interactively "${on_dogs}"
...     print_message_item_interactively "${on_death}"
...     print_message_item_interactively "${on_propaganda}"
... }
┇ To his dog, every man is Napoleon; hence the constant popularity of dogs. •┈┇
┇ Death is the only thing we haven't succeeded in completely vulgarizing. •┈┈┈┇
┇ The propagandist's purpose is to make one set of people forget that •┈┈┈┈┈┈┈┇
╏ certain other sets of people are human. •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╏
------------------------------------------
==========================================
/---
function print_message_item_interactively() {
    if { :shell.is_interactive } {
        print_message_item "${@}"
    }
}

#FIXME: In lieu of unit tests...
# function pumo() {
#     print_message_heading 'Zetsubou Billy'
#     print 'okok'
#     print_message_heading 'Louisiana Bob'
#
#     print_message_item\
#         'To his dog, every man is Napoleon; hence the constant popularity of dogs.'
#     print_message_item\
#         'Death is the only thing we haven''t succeeded in completely vulgarizing.'
#     print_message_item\
#         'The propagandist''s purpose is to make one set of people forget that certain other sets of people are human.'
#
#     print_message_item\
#         'To his dog, every man is Napoleon; hence the constant popularity of dogs.'
#     print 'humhum'
#     print_message_item\
#         'Death is the only thing we haven''t succeeded in completely vulgarizing.'
#     print "humhum${ZY_ASCII_NEWLINE}"
#     print_message_item\
#         'The propagandist''s purpose is to make one set of people forget that certain other sets of people are human.'
# }
