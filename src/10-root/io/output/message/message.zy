#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Message printers* (i.e., functions printing informative messages).
/---

#FIXME: Rename "message" to "info" everywhere, including the name of this
#parcel. "Message" is overly verbose and, more importantly, ambiguous: error and
#warning messages are also messages.

#FIXME: Consider prefixing each wrapped message line under non-interactive
#cronjobs with an appropriate timestamp (e.g., "["$(date +'%F %T')"]") rather
#than embedding such lines in an ANSI-flavored box.

# ....................{ PRINTERS                           }....................
#FIXME: Correct example output.
:func.doc <<'/---'
string print_message(string message1 = "", ...)

Print the passed strings (defaulting to the empty string) as a message entitled
under the name of the runnable originating the current call stack. For
aesthetics, such title will be centered to the width of the current terminal and
such message wrapped to such width. Assuming default user-configurable `zeshy`
styles, both will be formatted with box drawing characters appropriate to the
current character locale encoding (e.g., UTF-8). See print_string_titled_in_style_caller() for
further details: e.g.,

.print_message()
==========================================
[source]
------------------------------------------
>>> string on_falsehood=\
...    "An error does not become truth by reason of multiplied propagation, nor
...     does truth become error because nobody sees it. Truth stands, even if
...     there be no public support. It is self sustained."
>>> print_message "${on_falsehood}"
┎──────────────────────────────────╼ zeshy ╾───────────────────────────────────┒
┃ An error does not become truth by reason of multiplied propagation, nor does ┃
┃ truth become error because nobody sees it. Truth stands, even if there be no ┃
┃ public support. It is self sustained.                                        ┃
┖──────────────────────────────────────────────────────────────────────────────┚
------------------------------------------
==========================================
/---
function print_message() {
    print_string_titled_in_style_caller "${*}"\
        "$(output_call_stack_title_in_style_caller) Message"
}

:func.doc <<'/---'
string print_message_interactively(string message1 = "", ...)

Print the passed strings (defaulting to the empty string) as a message if the
current shell is interactive or return silently otherwise. See print_message()
for further details.
/---
function print_message_interactively() {
    # Implement such conditional with an "if"- rather than "and"-based
    # statement, as the latter returns non-zero exit status when noninteractive.
    if { :shell.is_interactive } {
        print_message "${*}"
    }
}

:func_ ':str print_message_unboxed(*:str messages)' :func{
    # String concatenating these messages in unboxed form.
    :str messages_unboxed
    IFS= :str.Str.reduce_boxing "${messages[*]}" messages_unboxed

    # Print this string.
    print_message "${messages_unboxed}"
}:func <<'/---'
Print the passed strings (defaulting to the empty string) as a message,
replacing all *boxing* (i.e., substrings consisting of a newline followed by
zero or more horizontal whitespace characters) in such strings with single
spaces before wrapping the result to the width of the current terminal.

== See Also ==

* print_message().
* :str.Str.reduce_boxing().

== Examples ==

==========================================
[source]
------------------------------------------
$$$ :str on_representation="
^^^     The oppressed are allowed once every few years to decide which
^^^     particular representatives of the oppressing class shall represent and
^^^     repress them in parliament."
$$$ print_message_unboxed "${on_representation}"
┎──────────────────────────────────╼ zeshy ╾───────────────────────────────────┒
┃ The oppressed are allowed once every few years to decide which particular    ┃
┃ representatives of the oppressing class shall represent and repress them in  ┃
┃ parliament.                                                                  ┃
┖──────────────────────────────────────────────────────────────────────────────┚
>>> print_message "${on_representation}"
┎──────────────────────────────────╼ zeshy ╾───────────────────────────────────┒
┃ The oppressed are allowed once every few years to decide which               ┃
┃ particular representatives of the oppressing class shall represent and       ┃
┃ repress them in parliament.                                                  ┃
┖──────────────────────────────────────────────────────────────────────────────┚
------------------------------------------
==========================================
/---

# ....................{ PRINTERS ~ heading                 }....................
:func.doc <<'/---'
string print_message_heading(string heading1, ...)

Print the passed string(s) as a heading centered to the width of the current
terminal, styled under the user-configurable styles prefixed by
`print_message_heading.`. See center_string_in_style() for further details,
replacing `${style_prefix}` with such prefix (e.g.,
`print_message_heading.border_right`, styling the right border).
/---
function print_message_heading() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'

    #FIXME: Interesting. Terrible, but interesting. If you uncomment the print
    #statements below and call this function like so:
    #
    #    >>> COLUMNS=20 print_message_heading yum  
    #    ... terminal width: 20 (20)
    #    ... terminal width: 102 (102)
    #    ... ┃┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• yum •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┃
    #
    #Clearly, the call to :print_stdout_separated_start() resets the setting of ${COLUMNS}. Why?
    #But it gets stranger. If you indirectly call this function like so (noting
    #that die_if_runnable() calls die_evaluated() internally setting ${COLUMNS}
    #as above):
    #
    #    >>> die_if_runnable info
    #    ... terminal width: 98 (98)
    #    ... terminal width: 98 (98)
    #
    #That works as expected. But the first case doesn't. What in the three Hells
    #of Man and Machine is going on here? *sigh*
#   print "terminal width: $(get_terminal_width) (${COLUMNS})"

    # Print such heading.
    :print_stdout_separated_start
#   print "terminal width: $(get_terminal_width) (${COLUMNS})"
    center_string_in_style_caller "${*}"
    :print_stdout_separated_stop
}

# ....................{ PRINTERS ~ item                    }....................
:func.doc <<'/---'
str print_message_item(str item1, ...)

Print the passed string(s) as an itemized message, wrapped to the width of the
current terminal but neither prefixed by a heading or suffixed by a footer.
Assuming default user-configurable `zeshy` styles, such message will be
formatted with line drawing characters appropriate to the current character
locale encoding (e.g., UTF-8): e.g.,

.print_message_item()
==========================================
[source]
------------------------------------------
>>> string on_liberty=\
...    "I'm a lover of my own liberty, and so I would do nothing to restrict
...     yours. I simply want to please my own conscience, which is God."
>>> string on_forgiveness=\
...    "The weak can never forgive. Forgiveness is the attribute of the strong."
>>> print_message_item "${on_liberty}"; print_message_item "${on_forgiveness}"
┇ I'm a lover of my own liberty, and so I would do nothing to restrict yours. ┇
╏ I simply want to please my own conscience, which is God. •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╏
┇ The weak can never forgive. Forgiveness is the attribute of the strong. •┈┈┈┇
------------------------------------------
==========================================
/---
function print_message_item() {
    # To avoid prefixing such items with spurious newlines, avoid delimiting
    # such output with calls to :print_stdout_separated_start() and :print_stdout_separated_stop(). The Linux
    # kernel imposes a delay on TTY mtime updates, ensuring :print_stdout_separated_start()
    # cannot reliably determine whether or not prior output exists and hence
    # almost always simply outputs a prefixing newline.
    die_unless_args 'Expected one or more strings.'
    :print_stdout_start
    wrap_string_in_style_caller "${*}"
    :print_stdout_stop
}

:func.doc <<'/---'
string print_message_item_interactively(string message1 = "", ...)

Print the passed strings (defaulting to the empty string) as an itemized
message if the current shell is interactive or return silently otherwise. See
print_message_item() and :context.is_cli() for further details: e.g.,

.print_message_item_interactively()
==========================================
[source]
------------------------------------------
>>> string on_dogs=\
...    "To his dog, every man is Napoleon; hence the constant popularity of dogs."
>>> string on_death=\
...    "Death is the only thing we haven't succeeded in completely vulgarizing."
>>> string on_propaganda=\
...    "The propagandist's purpose is to make one set of people forget that
...     certain other sets of people are human."
>>> {
...     print_message_item_interactively "${on_dogs}"
...     print_message_item_interactively "${on_death}"
...     print_message_item_interactively "${on_propaganda}"
... }
┇ To his dog, every man is Napoleon; hence the constant popularity of dogs. •┈┇
┇ Death is the only thing we haven't succeeded in completely vulgarizing. •┈┈┈┇
┇ The propagandist's purpose is to make one set of people forget that •┈┈┈┈┈┈┈┇
╏ certain other sets of people are human. •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╏
------------------------------------------
==========================================
/---
function print_message_item_interactively() {
    if { :shell.is_interactive } {
        print_message_item "${@}"
    }
}

#FIXME: In lieu of unit tests...
function pumo() {
    print_message_heading 'Zetsubou Billy'
    print 'okok'
    print_message_heading 'Louisiana Bob'

    print_message_item\
        'To his dog, every man is Napoleon; hence the constant popularity of dogs.'
    print_message_item\
        'Death is the only thing we haven''t succeeded in completely vulgarizing.'
    print_message_item\
        'The propagandist''s purpose is to make one set of people forget that certain other sets of people are human.'

    print_message_item\
        'To his dog, every man is Napoleon; hence the constant popularity of dogs.'
    print 'humhum'
    print_message_item\
        'Death is the only thing we haven''t succeeded in completely vulgarizing.'
    print "humhum${ZY_ASCII_NEWLINE}"
    print_message_item\
        'The propagandist''s purpose is to make one set of people forget that certain other sets of people are human.'
}

# ....................{ EXCEPTIONS                         }....................
#FIXME: Interestingly, we don't actually want all exceptions to be handled. We
#always want *UNEXPECTED* exceptions to be handled. Expected exceptions,
#however, should only be handled if the current user's zeshy configuration
#requests such handling, which should be disabled by default. The canonical
#example of an expected exception is an external command wrapped by a Zeshy
#function returning non-zero exit status on failing to find a match (e.g.,
#"command grep" wrapped by grep_path()). Note that even in this case, of course,
#not all errors emitted by "command grep" are expected: only on failing to find
#a match, which must be explicitly tested for. This suggests a new helper
#function die_unhandled(), which (as expected) does everything :die() does but
#excludes only the call to handle_exception(). Since this reduplicates a great
#deal of intricate code, perhaps :die() and die_unhandled() can simply delegate
#to an internal utility function with prototype:
#
# string die_handled_if(
#   string error_message = '', boolean is_handling_exception)
#
#Obviously, such functions should be shifted to a new component in the proper
#Zeshy codebase: say, "shell/exception".
#FIXME: While such functionality is essential for oddball corner-cases (e.g.,
#"grep"), what we generally want is a simple way of squelching exceptions when
#the current shell is interactive *AND* the current call stack ends with a
#particular function that was called by some other particular function earlier
#in such stack. This could possibly be implemented as a global map from the
#former to latter, which function :die() and associates would need to respect.
#Consider the following definition:
#
#map_global_export\
#    ZY__EXCEPTION_HIDE_IF_INTERACTIVELY_THROWN_BY_FUNCTION_NAMES
#
#Ah; wait. The "_INTERACTIVELY" is redundant, since such code paths can only
#come about as interactive alias expansions. Also, it's not specifically
#function names -- it's runnable names. Reduce to:
#
#map_global_export\
#    ZY__EXCEPTION_HIDE_IF_THROWN_BY_RUNNABLE_NAMES
#
#Define such global as follows:
#
#ZY__EXCEPTION_HIDE_IF_THROWN_BY_RUNNABLE_NAMES=(
#    'ls' 'l'
#    'ls' 'ls'
#    'grep' 'g'
#    'grep' 'grep'
#    'grep' 'gr'
#    ...
#)
#
#Now, that's in a great format for consumption by die_*() functions. But it's
#not really the greatest for definition; given the tenuous nature of interactive
#aliases, we really want to automate definition of such global. This should,
#naturally, be done by the alias_cli_abbreviation() and
#alias_cli_substitution() functions. (O.K.; I suppose alias_cli()
#applies as well.) Under alias_cli_substitution(), it's easy to set two such
#entries: for both, the key is the command name being substituted; for the
#first, the value is the same name; for the second, the value is such
#substitution's abbreviation (if any!). Under alias_cli_abbreviation(),
#thing's are a bit less automated: we'll need to improve
#alias_cli_abbreviation() to accept an optional second argument specifying the
#name of the core underlying external command that such abbreviation eventually
#runs. Hence, this:
#
#    alias_cli_abbreviation {cal}endar{q}uarter='print_calendar_quarter'
#
#...would need to be expanded to this:
#
#    alias_cli_abbreviation {cal}endar{q}uarter='print_calendar_quarter' cal
#
#This then adds a single entry to the above global resembling this:
#
#    ZY__EXCEPTION_HIDE_IF_THROWN_BY_RUNNABLE_NAMES+='cal' 'calq'
#
#There's really no other sensible way to handle abbreviations. This works, it's
#only a minor nuisance; let's go-goggogogogo-go!
#
#The first steps, clearly, will be automating alias_cli_substitution() to
#perform such definition and :die() to respect such definition (possibly subject
#to a user-configurable boolean enabling or disabling such functionality). After
#getting that to work, then contemplate the extension of such logic to
#alias_cli_abbreviation(). Such global could (possibly) be called:
#
#    boolean_global_export ZY_IS_HANDLING_ERROR_IF_THROWN_BY_NONHANDLING_RUNNABLES
#
#Hmm; what about:
#
#    boolean_global_export ZY_IS_ERROR_HANDLED_IF_HIDDEN
#    ZY_IS_ERROR_HANDLED_IF_HIDDEN=${ZY_BOOLEAN_FALSE}
#
#Much better. >)

# string die_unhandled(string error_message = '')
#function die_unhandled() {
#    #FUXME: Implement such function. Unsure this is the best name, to be honest.
#    die_handled_if "${@}" ${ZY_BOOLEAN_FALSE}
#}
