#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *warning printers* (i.e., functions printing nonfatal warning messages).
/---

# ....................{ PRINTERS                           }....................
#FIXME: Consider renaming to merely :warning().
#FIXME: Add example. See print_message().
:func.doc <<'/---'
[stderr=:str] :warning.print(*:str messages)

Print the passed strings (defaulting to the empty string) as a warning entitled
under the name of the runnable originating the current call stack to standard
error.

== See Also ==

* print_message().
/---
function :warning.print() {
    {
        print_string_titled_in_style_caller "${*}"\
            "$(output_call_stack_title_in_style_caller) Warning"
    } =stderr
}

:func.doc <<'/---'
string :print_warning_item(string item1, ...)

Print the passed string(s) as an itemized warning, wrapped to the width of the
current terminal but neither prefixed by a heading or suffixed by a footer. See
print_message_item() for further details.
/---
function :print_warning_item() {
    die_unless_args 'Expected one or more strings.'
    :print_stderr_start
    { wrap_string_in_style_caller "${*}" } =stderr
    :print_stderr_stop
}

#FIXME: In lieu of unit tests...
#function waro() {
#    :warning.print 'Writing down my infinity. Writing for all eternity. Eliminate inner parenthesis. Now combine like terms remembering to watch negative signs.'
#}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Still not quite right. We want the "Warning" printed in the
    #":warning.print.heading.text" style. This *REALLY* suggests a shift to a
    #refactored function resembling:
    #
    #   "$(output_call_stack_title_with_suffix ' Warning')" } to_stderr
    #
    #This then allows us to provide a generalized function for use in
    #print_exception() resembling:
    #
    #   "$(output_call_stack_lists_title_with_suffix\
    #       ZY__EXCEPTION_FUNCSTACK\
    #       ZY__EXCEPTION_FUNCSOURCETRACE\
    #       ' Exception')"
    #
    #O.K.; make it so. This *REALLY* doesn't work otherwise.
#    { print_string_titled_in_style_caller "${*}"\
#        "$(output_call_stack_root_basename_in_style\
#            ':warning.print.heading.runnable.') Warning" } to_stderr

# (i.e., as
#output by output_call_stack_root_runnable())

#   print_string_titled_in_style_caller "${*}" "$(output_call_stack_root_in_style)" 1>&2
    # To ensure Avoid calling run_code_to_stderr()
#Print the passed strings (defaulting to the empty string) suffixed by a newline
#and decorated by user-configured colors to standard error as a warning message.
    # Avoid calling "print -u2 -- "${message}". While such a command appears
    # superficially identical to the following command, passing the desired file
    # descriptor as an argument fails to preserve interleaving with prior
    # commands printing to file descriptor 1 (i.e., standard out).
#   :stdout.echo "${ZY_STYLE_TO_COLOR[:warning.print.caller]-}$(output_call_stack_root_in_style)${ZY_STYLE_TO_COLOR[:warning.print.colon]-}: ${ZY_STYLE_TO_COLOR[:warning.print.message]-}${*}" 1>&2
