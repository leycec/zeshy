#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Line wrapping* (i.e., soft wrapping strings to the width of the current
terminal by inserting newlines into such strings at appropriate break points).
/---

# ....................{ GLOBALS                            }....................
:int.global ZY_STRING_WRAP_PCRE_INDEX_SPLIT=1 <<'/---'
1-based index in list ${match} of the next text substring to be wrapped by a
PCRE returned by set_string_to_pcre_wrapping_to_width(), guaranteed to have been
properly split on an inter-word delimiter (e.g., space, tab, newline) or
intra-word delimiter (e.g., hyphen). In either case, such substring is
guaranteed to be no longer than the maximum line length passed to such function
_and_ requires no suffixing hyphenation.
/---


:int.global ZY_STRING_WRAP_PCRE_INDEX_UNSPLIT=2 <<'/---'
1-based index in list ${match} of the next text substring to be wrapped by a
PCRE returned by set_string_to_pcre_wrapping_to_width(), guaranteed to _not_ have
been properly split on an inter-word delimiter (e.g., space, tab, newline) or
intra-word delimiter (e.g., hyphen). Such substring is guaranteed to be no
longer than the maximum line length passed to such function _but_ requires
suffixing hyphenation.

Ideally, most substrings to be wrapped are properly split and hence matched into
index ${ZY_STRING_WRAP_PCRE_INDEX_SPLIT} instead. However, when the shortest
splittable substring exceeds the width in characters of the current terminal,
such substring must be itself be broken into substrings smaller than such width.
This index captures such substrings.
/---

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:int get_string_wrapped_width_in_style(:str style_prefix)

Maximum number of characters in the body of each line of output (i.e., excluding
width of visual borders on such lines) wrapped to the current terminal under the
user-configurable styles prefixed by the passed prefix.

Since this output is often prefixed and/or suffixed by visual borders, this
number is often slightly less than that returned by get_terminal_width().
/---
function get_string_wrapped_width_in_style() {
    die_unless_arg 'Expected one style prefix.'
    :str style_prefix="${1}"

    # Get such width. To avoid negative widths, cap such width to a minimum 1.
    # See wrap_string_in_style() for further details.
    get_integer_maximum 1 $(( COLUMNS -\
        ${(m)#ZY_STYLE_TO_TEXT[${style_prefix}border_left]-} -\
        ${(m)#ZY_STYLE_TO_TEXT[${style_prefix}border_right]-} ))
}

# ....................{ SETTERS                            }....................
#FIXME: This function employs the naive greedy algorithm minimizing the
#resulting number of lines. Since this is no better than modern word processors
#do, this is hardly a calamity. That said, an alternative algorithm minimizing
#the "raggedness" of the end of each line is *CLEARLY* a better approach, as
#LaTeX demonstrates. To that end, it would be helpful to implement a modern
#variant on Knuth's now-infamous "minimization of the square of the space at the
#end of all paragraph lines" algorithm. While the most common solutions are
#O(n^2), a number of novel linear-time soutions appear to exist. Furthermore,
#note this interesting addendum, http://search.cpan.org/perldoc?Text::Reflow --
#"The reflow algorithm tries to keep the lines the same length but also tries to
# break at punctuation, and avoid breaking within a proper name or after certain
# connectives ("a", "the", etc.). The result is a file with a more "ragged" right
# margin than is produced by fmt or Text::Wrap but it is easier to read since
# fewer phrases are broken across line breaks."
#
#In any case, there's no want of great alternatives. Here are a few other
#continuations to the core Knuth algorithm:
#
#* http://www.leverkruid.eu/GKPLinebreaking/elements.html
#* http://wiki.apache.org/xmlgraphics-fop/PageLayout/
#
#The best resource on linear time and near-linear time implementations is
#probably "Comment 8" by (clearly academic) poster "callcc" at:
#
#* https://bugzilla.mozilla.org/show_bug.cgi?id=630181
#
#He (?) gives an excellent synopsis of the current state of the art. Great stuff!

:func.doc <<'/---'
:str set_string_to_pcre_wrapping_to_width(:Str string_name :int line_width)

Set the passed string variable to a PCRE matching at most the passed number of
characters suffixed by either a hyphen, whitespace, or the string end.

By design, this PCRE is suitable for iteratively wrapping lines to such length
in a multiline-aware manner by calling for_string_text_matching_pcre:(), as
implemented by for_string_wrapped_to_width().

== Algorithmic Alternatives ==

This PCRE efficiently implements the ``naive'' greedy algorithm for wrapping
lines in a word-aware manner, wrapping maximally many words per line and hence
minimizing the resulting number of lines. While efficient, this algorithm
commonly fails to produce a uniform ragged right edge and hence aesthetical
and/or legible output. Since this is no worse than modern word processors do,
these failings hardly constitute a calamity. Yet we can do better. (Indeed, the
prior example exhibits an extremely ragged right edge.)

Ideally, lines should be wrapped so as to minimize *right raggedness* (i.e., the
difference between the length of each line in a contiguous paragraph). The
canonical algorithm for doing so remains Donald Knuth's implementation of line
wrapping in [La]TeX, minimizing the square of the space at the end of all
paragraph lines. This algorithm requires numerical computation and hence cannot
be implemented as a PCRE. For further details, see the corresponding
https://en.wikipedia.org/wiki/Word_wrap[Wikipedia article].
/---
function set_string_to_pcre_wrapping_to_width() {
    die_unless_args_2 'Expected one string name and one integer.'
    :str\
        string_name__sstpwtw="${1}"\
        line_length__sstpwtw="${2}"
    :int.die_unless_positive "${line_length__sstpwtw}"

    # If such line length is 1, such PCRE should not attempt to break lines at
    # hyphens preceded by at least one character. Instead, only break lines at
    # each character. While this remains an unlikely edge case, handling such
    # case is critical to avoid spurious exceptions and behavior.
    #
    # To ensure the expected match groups, capture each character to the match
    # group typically matching words *NOT* exceeding line length and the empty
    # string to all other match groups. Since "libpcre" sadly lacks a means of
    # explicitly specifying the number to assign to a match group, ensure this
    # implicitly with empty match groups. (Lame? This is my uncaring face.)
    if (( line_length__sstpwtw == 1 )) {
        :Str.set "${string_name__sstpwtw}" '()(.)()()'
    # Else, return a general-purpose PCRE. Dismantled, this is:
    #
    # * "\G", anchoring such match immediately after the end of the prior match.
    # * "(?|...)", matching any of the following alternatives under duplicate
    #   subpattern numbers (i.e., resetting capturing group numbers in each
    #   alternative to ensure such groups capture to the same number regardless
    #   of which alternative matches):
    #   * "\n", matching but *NOT* capturing a blank line (i.e., line containing
    #     only a newline). Since this alternative captures no groups, all groups
    #     will be the empty string on matching a blank line.  While this
    #     probably sounds unhelpful, the simple implementation of
    #     for_string_wrapped_to_width() proves otherwise.
    #   * "(...)(?:...)", capturing a maximally long substring not exceeding the
    #     passed length to ${match[1]}, suffixed by an uncaptured and hence
    #     ignored delimiter consisting of either:
    #     * "\h+\n?", a maximally long run of horizontal whitespace followed by
    #       an ignorable newline.
    #     * "\n", a newline.
    #     * "\Z", either the string end or a newline followed by the string end.
    #   * "(...-)", capturing a maximally long hyphenated substring not
    #     exceeding the passed length minus one to ${match[1]}.
    #   * "()(...)", capturing a maximally long unhyphenated substring not
    #     exceeding the passed length minus one to ${match[2]}, suffixed by none
    #     of the above delimiters. This fallback condition handles such edge
    #     cases as contiguous runs of characters exceeding the length of a
    #     single line but containing no spaces, tabs, newlines, or hyphens,
    #     without which such characters would be silently ignored during PCRE
    #     iteration. Since the caller typically breaks such runs at the passed
    #     line length into substrings suffixed by a hyphen and newline, such
    #     group matches one less character than the line length.
    #
    # All alternatives except those already matching a suffixing newline match
    # an ignorable newline. Since the caller typically suffixes such substring
    # by a newline already, such newline should simply be ignored if present.
    } else {
        # This length minus one, typically to account for suffixing hyphens.
        :int line_length_minus_one__sstpwtw=$(( line_length__sstpwtw - 1 ))

        # PCRE matching any character preceded by zero or more ignorable ANSI
        # escape sequences. Such sequences should typically be ignored when
        # wrapping text, implying this PCRE should always be used in place of
        # simpler "." expressions in the PCRE below.
        :str char__sstpwtw='(?:(?:'${ZY_ANSI_PCRE}')*.)'

        # Set this string to this PCRE.
        :Str.set "${string_name__sstpwtw}"\
            '\G(?|\n()()|('${char__sstpwtw}'{1,'${line_length__sstpwtw}'})(?:\n|\h+\n?|\Z)()|('${char__sstpwtw}'{1,'${line_length_minus_one__sstpwtw}'}-)\n?()|()('${char__sstpwtw}'{1,'${line_length_minus_one__sstpwtw}'})\n?)'
#       :stdout.echo "pcre wrapping at line length ${line_length}/$(get_terminal_width):${ZY_ASCII_NEWLINE}${pcre_wrapping}" 1>&2
    }
}

# ....................{ SETTERS                            }....................
#FIXME: Document us up.
function :set_string_to_string_wrapped() {
    die_unless_args_2_or_more\
        'Expected one string name and one or more strings.'
    :int terminal_width

    # Width of the current terminal.
    :set_int_to_terminal_width_if_found_or_default terminal_width

    # Set this string.
    :set_string_to_string_wrapped_to_width "${@}" "${terminal_width}"
}


#FIXME: Document us up.
function :set_string_to_string_wrapped_to_width() {
    die_unless_args_3_or_more\
        'Expected one string name, one or more strings, and one integer width.'
    :str string_name__sstswtw="${1}" text__sstswtw width__sstswtw="${@[-1]}"
    :args.shift 1
    :args.pop 1

    # Join these strings into a single string before passing the latter below.
    :Str.set text__sstswtw "${@}"

    # Initialize such variable to the empty string.
    :Str.clear "${string_name__sstswtw}"

    # Iteratively append this variable by each line wrapped from these strings.
    for_string_wrapped_to_width\
        "${text__sstswtw}"\
        "${width__sstswtw}"\
        line__sstswtw\
        ${string_name__sstswtw}'+="${line__sstswtw}'${ZY_ASCII_NEWLINE}'"'
}

# ....................{ WRAPPERS                           }....................
#FIXME: Exceedingly poor nomenclature. Rename *ALL* such functions into getters
#(e.g., from wrap_string() to :get_string_wrapped()). Why? Because such
#nomanclature is now used elsewhere to imply such functions modify a passed
#string variable in-place -- which is, of course, *NOT* the case here.
#FIXME: Overly long example. Shift a portion of it elsewhere, please.

:func.doc <<'/---'
:str wrap_string(+:str texts)

Wrap the passed strings to the width of the current terminal.

== See Also ==

* wrap_string_to_width() for further details.

== Examples ==

.wrap_string()
==========================================
[source]
------------------------------------------
>>> :str on_divinorum=\
... "An extremely rare cultigen, found only at a few locations in Oaxaca. "\
... "There are specimens in botanical gardens, and in a few private"\
... "collections, but lack of genetic diversity is a concern."
>>> :str on_ska_maria_pastora=\
... "The plant is endangered by the forces of imperialistic religion, and "\
... "has been for four hundred years, possibly longer."
>>> :str on_yerba_de_maria=\
... 'Her real name must not be told—'\
... 'Her real name is closer to Medusa than to Mary.'\
... '  "They came with crosses—'\
... '    they came to drag us'\
... 'from our huts, from our beds,'\
... '    the soldiers that serve the priests."'
>>> wrap_string\
...     "${on_divinorum}" "${on_ska_maria_pastora}" "${on_yerba_de_maria}"
An extremely rare cultigen, found only at a few locations in Oaxaca. There are
specimens in botanical gardens, and in a few private collections, but lack of
genetic diversity is a concern. The plant is endangered by the forces of
imperialistic religion, and has been for four hundred years, possibly longer.
Her real name must not be told—
Her real name is closer to Medusa than to Mary.
"They came with crosses—
they came to drag us
from our huts, from our beds,
the soldiers that serve the priests."
------------------------------------------
==========================================
/---
function wrap_string() {
    die_unless_args 'Expected one or more strings.'
    :str string_wrapped

    # Return these strings wrapped.
    :set_string_to_string_wrapped string_wrapped "${@}"
    :stdout.echo "${string_wrapped}"
}


#FIXME: Refactor to call :set_string_to_string_wrapped_to_width().
:func.doc <<'/---'
:str wrap_string_to_width(:str text :int line_length)

Passed string wrapped to the passed line length in a word-aware manner.

== See Also ==

* set_string_to_pcre_wrapping_to_width().

== Examples ==

.wrap_string_to_width()
==========================================
[source]
------------------------------------------
>>> :str on_rebellion=\
... "Peasant rebellions were not exceptional events. They erupted so"\
... "frequently in the course of these four centuries that they may be said"\
... "to have been as common in this agrarian society as factory strikes"\
... "would be in the industrial world. In southwestern France alone, some"\
... "450 rebellions occurred between 1590 and 1715. No region of Western"\
... "Europe was exempted from this pattern of chronic violence. The fear of"\
... "sedition was always present in the minds of those who ruled. It was a"\
... "corrective, a salutary fear — since only the threat of insurrection"\
... "could act as a check against unlimited exactions."
>>> wrap_string_to_width "$(get_string_lines "${on_rebellion}" 1 4)" 66
Peasant rebellions were not exceptional events. They erupted so
frequently in the course of these four centuries that they may be
said to have been as common in this agrarian society as factory
strikes would be in the industrial world. In southwestern France
alone, some
------------------------------------------
==========================================
/---
function wrap_string_to_width() {
    die_unless_args 'Expected one or more strings.'
    :str string_wrapped

    # Return such strings wrapped.
    :set_string_to_string_wrapped_to_width string_wrapped "${@}"
    :stdout.echo "${string_wrapped}"
}

# ....................{ WRAPPERS ~ style                   }....................
:func.doc <<'/---'
:str wrap_string_in_style_caller(+:str texts)

Wrap the passed string(s) to the width of the current terminal, using
user-configurable styles prefixed by the dot-suffixed caller's name (i.e.,
`$(:caller.get).`)

== See Also ==

* wrap_string_in_style().
/---
function wrap_string_in_style_caller() {
    die_unless_args 'Expected one or more strings.'
    :str caller
    :Caller.set caller
    wrap_string_in_style "${*}" "${caller}."
}


:func.doc <<'/---'
:str wrap_string_in_style(:str text :str style_prefix)

Wrap the passed string to the width of the current terminal, using
user-configurable styles prefixed by the passed prefix.

== Examples ==

* wrap_string_to_width_in_style().
/---
function wrap_string_in_style() {
    die_unless_args_2 'Expected one string and one style prefix.'
    :int terminal_width

    # Width of the current terminal.
    :set_int_to_terminal_width_if_found_or_default terminal_width

    # Wrap these strings.
    wrap_string_to_width_in_style\
        "${1}" "${terminal_width}" "${2}"
}


:func.doc <<'/---'
:str wrap_string_to_width_in_style(
    :str text :int line_width :str style_prefix)

Wrap the passed string to the passed line width, using user-configurable styles
prefixed by the passed prefix.

== Styles ==

Such styles are keys of both the user-configurable map ${ZY_STYLE_TO_COLOR}
(specifying colors to be output) and ${ZY_STYLE_TO_TEXT} (specifying string
literals to be output), including:

* `${style_prefix}text`, styling the passed string itself.
* `${style_prefix}border_left` and `${style_prefix}border_right`, styling the
  the left and right *borders* (i.e., the first and last substrings to be
  printed) of the first line wrapped from such string, each defaulting to the
  empty string.
* `${style_prefix}border_left_midst` and
  `${style_prefix}border_right_midst`, styling the left and right borders of
  all lines after the first wrapped from such string, defaulting to the value of
  `${style_prefix}border_left` and `${style_prefix}border_right`.
* `${style_prefix}joiner_right`, styling the substring non-repeatedly situated
  between the text and right padder for each wrapped line, defaulting to a space.
* `${style_prefix}padder_right`, styling the substring repeatedly filling the
  space between the text and right border for each wrapped line, defaulting to a
  space.

== See Also ==

* set_string_to_pcre_wrapping_to_width().
/---
function wrap_string_to_width_in_style() {
    die_unless_args_3\
        'Expected one string, one line width, and one style prefix.'
    :str\
        text="${1}"\
        line_width="${2}"\
        style_prefix="${3}"\
        line_first_style_prefix\
        line_midst_style_prefix\
        line_first_border_left\
        line_first_border_right\
        line_first_suffix_right\
        line_first_joiner_right\
        line_first_padder_right\
        line_midst_border_left\
        line_midst_border_right\
        line_midst_suffix_right\
        line_midst_joiner_right\
        line_midst_padder_right\
        line\
        line_joiner_padder
    :int\
        line_first_width\
        line_midst_width\
        line_width_minimum\
        line_first_border_left_length\
        line_first_border_right_length\
        line_first_suffix_right_length\
        line_first_joiner_right_length\
        line_first_padder_right_length\
        line_midst_border_left_length\
        line_midst_border_right_length\
        line_midst_suffix_right_length\
        line_midst_joiner_right_length\
        line_midst_padder_right_length\
        line_length\
        line_joiner_padder_length
    :die_unless_terminal_column "${line_width}"

    # Preferred styles for the first and all subsequent lines of this text.
    line_first_style_prefix="${style_prefix}line_first."
    line_midst_style_prefix="${style_prefix}line_midst."

    # Substrings to be measured (but not repeated) below and hence *NOT* yet
    # injected with color. Such substrings are optional and hence default to the
    # empty string. Preferred styles take precedence over fallback styles.
    line_first_border_left="${ZY_STYLE_TO_TEXT[${line_first_style_prefix}border_left]-${ZY_STYLE_TO_TEXT[${style_prefix}border_left]-}}"
    line_first_border_right="${ZY_STYLE_TO_TEXT[${line_first_style_prefix}border_right]-${ZY_STYLE_TO_TEXT[${style_prefix}border_right]-}}"
    line_first_suffix_right="${ZY_STYLE_TO_TEXT[${line_first_style_prefix}suffix_right]-${ZY_STYLE_TO_TEXT[${style_prefix}suffix_right]-}}"
    line_first_joiner_right="${ZY_STYLE_TO_TEXT[${line_first_style_prefix}joiner_right]-${ZY_STYLE_TO_TEXT[${style_prefix}joiner_right]-}}"
    line_midst_border_left="${ZY_STYLE_TO_TEXT[${line_midst_style_prefix}border_left]-${line_first_border_left}}"
    line_midst_border_right="${ZY_STYLE_TO_TEXT[${line_midst_style_prefix}border_right]-${line_first_border_right}}"
    line_midst_suffix_right="${ZY_STYLE_TO_TEXT[${line_midst_style_prefix}suffix_right]-${ZY_STYLE_TO_TEXT[${style_prefix}suffix_right]-}}"
    line_midst_joiner_right="${ZY_STYLE_TO_TEXT[${line_midst_style_prefix}joiner_right]-${line_first_joiner_right}}"

    # Substrings to be repeated below and hence never injected with color. Since
    # :Str.repeat_str_ansiless_to_len() requires strings *NOT*
    # containing colors, shift such colors to preceding substrings. Such
    # substrings are mandatory and hence default to a single space.
    line_first_padder_right="${ZY_STYLE_TO_TEXT[${line_first_style_prefix}padder_right]-${ZY_STYLE_TO_TEXT[${style_prefix}padder_right]- }}"
    line_midst_padder_right="${ZY_STYLE_TO_TEXT[${line_midst_style_prefix}padder_right]-${line_first_padder_right}}"

    # Lengths of such substrings. For efficiency, inline such implementations.
    # See get_string_ansiless_length_printable() for further details.
    line_first_border_left_length="${(m)#line_first_border_left}"
    line_first_border_right_length="${(m)#line_first_border_right}"
    line_first_suffix_right_length="${(m)#line_first_suffix_right}"
    line_first_joiner_right_length="${(m)#line_first_joiner_right}"
    line_first_padder_right_length="${(m)#line_first_padder_right}"
    line_midst_border_left_length="${(m)#line_midst_border_left}"
    line_midst_border_right_length="${(m)#line_midst_border_right}"
    line_midst_suffix_right_length="${(m)#line_midst_suffix_right}"
    line_midst_joiner_right_length="${(m)#line_midst_joiner_right}"
    line_midst_padder_right_length="${(m)#line_midst_padder_right}"

    # If such padding is empty, throw an exception. Subsequent wrapping expects
    # such substrings to be strictly nonempty.
    :int.die_unless_positive "${line_first_padder_right_length}"\
        'Expected nonempty padding.'
    :int.die_unless_positive "${line_midst_padder_right_length}"\
        'Expected nonempty padding.'

    # Number of characters allocated for the first line and all subsequent lines
    # to wrapping text and thus excluding the length of padding substrings.
    line_first_width=$((\
        line_width -\
        line_first_border_left_length -\
        line_first_border_right_length -\
        line_first_suffix_right_length -\
        line_first_joiner_right_length ))
    line_midst_width=$((\
        line_width -\
        line_midst_border_left_length -\
        line_midst_border_right_length -\
        line_midst_suffix_right_length -\
        line_midst_joiner_right_length ))
#   print "line_first_width: ${line_first_width}\nline_midst_width: ${line_midst_width}"

    # Minimum of the two prior lengths.
    line_width_minimum="$(get_integer_minimum\
        ${line_first_width} ${line_midst_width})"

    # If either such length is non-positive, assume the passed width to be an
    # anomolous condition to be corrected by the current user (e.g., by
    # increasing the width of the current terminal). Since such width is
    # probably inappropriate for displaying human-readable content, this is
    # probably a safe assumption. For simplicity, assume such width will be
    # corrected back to a default 80 columns.
    if (( line_width_minimum < 1 )) {
          line_width_minimum=80
    }

    # Inject colors into all prior substrings *EXCEPT* substrings to be
    # subsequently repeated, as previously discussed.
    line_first_border_left="${ZY_STYLE_TO_COLOR[${line_first_style_prefix}border_left]-${ZY_STYLE_TO_COLOR[${style_prefix}border_left]-}}${line_first_border_left}${ZY_STYLE_TO_COLOR[${line_first_style_prefix}text]-${ZY_STYLE_TO_COLOR[${style_prefix}text]-}}"
    line_first_border_right="${ZY_STYLE_TO_COLOR[${line_first_style_prefix}border_right]-${ZY_STYLE_TO_COLOR[${style_prefix}border_right]-}}${line_first_border_right}"
    line_first_suffix_right="${ZY_STYLE_TO_COLOR[${line_first_style_prefix}suffix_right]-${ZY_STYLE_TO_COLOR[${style_prefix}suffix_right]-}}${line_first_suffix_right}"
    line_first_joiner_right="${ZY_STYLE_TO_COLOR[${line_first_style_prefix}joiner_right]-${ZY_STYLE_TO_COLOR[${style_prefix}joiner_right]-}}${line_first_joiner_right}${ZY_STYLE_TO_COLOR[${line_first_style_prefix}padder_right]-${ZY_STYLE_TO_COLOR[${style_prefix}padder_right]-}}"
    line_midst_border_left="${ZY_STYLE_TO_COLOR[${line_midst_style_prefix}border_left]-${ZY_STYLE_TO_COLOR[${style_prefix}border_left]-}}${line_midst_border_left}${ZY_STYLE_TO_COLOR[${line_midst_style_prefix}text]-${ZY_STYLE_TO_COLOR[${style_prefix}text]-}}"
    line_midst_border_right="${ZY_STYLE_TO_COLOR[${line_midst_style_prefix}border_right]-${ZY_STYLE_TO_COLOR[${style_prefix}border_right]-}}${line_midst_border_right}"
    line_midst_suffix_right="${ZY_STYLE_TO_COLOR[${line_midst_style_prefix}suffix_right]-${ZY_STYLE_TO_COLOR[${style_prefix}suffix_right]-}}${line_midst_suffix_right}"
    line_midst_joiner_right="${ZY_STYLE_TO_COLOR[${line_midst_style_prefix}joiner_right]-${ZY_STYLE_TO_COLOR[${style_prefix}joiner_right]-}}${line_midst_joiner_right}${ZY_STYLE_TO_COLOR[${line_midst_style_prefix}padder_right]-${ZY_STYLE_TO_COLOR[${style_prefix}padder_right]-}}"
#   print "border_left_first: ${border_left_first}\nborder_left_midst: ${border_left_midst}"

    # If true, this is the first line to be printed. (Defaults to true.)
    :bool is_line_first=${ZY_BOOLEAN_TRUE}

    # For each text substring to be printed as each line, print:
    #
    # * This left border.
    # * This substring.
    # * Sufficient spaces to render the subsequently printed right border
    #   flush with the right edge of the current terminal. For efficiency,
    #   inline such implementation. See :Str.repeat_str() for further details.
    # * This right border.
    # * A newline.
    for_string_wrapped_to_width\
        "${text}" "${line_width_minimum}" line '\
        # Length of the current line excluding ANSI escape sequences.
        :set_int_to_string_length_printable line_length "${line}"

        if (( is_line_first )) {
            is_line_first='${ZY_BOOLEAN_FALSE}'

            #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            # Synchronize changes with conditional below.
            #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

            # Number of characters on the current line allocated to padding.
            line_joiner_padder_length=$(( line_first_width - line_length ))

            # If such number is positive, repeat such padding accordingly.
            if (( line_joiner_padder_length > 0 )) {
                :Str.repeat_str_ansiless_to_len\
                    line_joiner_padder\
                    "${line_first_padder_right}"\
                    "${line_joiner_padder_length}"

                # Prefix such padding with the corresponding joiner.
                line_joiner_padder="${line_first_joiner_right}${line_joiner_padder}"
            # Else, revert this padding to the empty string.
            } else {
                line_joiner_padder=""
            }

            # Output this line.
            :stdout.echo\
                "${line_first_border_left}${line}${line_first_suffix_right}${line_joiner_padder}${line_first_border_right}"
        } else {
            line_joiner_padder_length=$(( line_midst_width - line_length ))

            if (( line_joiner_padder_length > 0 )) {
                :Str.repeat_str_ansiless_to_len\
                    line_joiner_padder\
                    "${line_midst_padder_right}"\
                    "${line_joiner_padder_length}"

                # Prefix such padding with the corresponding joiner.
                line_joiner_padder="${line_midst_joiner_right}${line_joiner_padder}"
            } else {
                line_joiner_padder=""
            }

            :stdout.echo\
                "${line_midst_border_left}${line}${line_midst_suffix_right}${line_joiner_padder}${line_midst_border_right}"
        }'
}

# ....................{ ITERATORS                          }....................
#FIXME: Optional arguments are horrible. Require the caller *ALWAYS* pass a
#variable name for such lines.

:func.doc <<'/---'
:full for_string_wrapped_to_width(
    :str text
    :int line_length
    ?:str line_name="LINE"
    :str command
)

Run the passed command for each line of the passed string wrapped to the passed
line length in a word-aware manner, setting the passed local string variable
(defaulting to `${LINE}`) to each this line.

== See Also ==

* set_string_to_pcre_wrapping_to_width().

== Examples ==

.for_string_wrapped_to_width()
==========================================
[source]
------------------------------------------
>>> :str on_boxes=\
... "The box is full of salmon, and a man sits atop the box. Long ago this"\
... "man hired armed guards to keep anyone from eating his fish. The many"\
... "people who sit next to the empty river starve to death. But they do"\
... "not die of starvation. They die of a belief. Everyone believes that"\
... "the man atop the box owns the fish. The soldiers believe it, and they"\
... "will kill to protect the illusion. The others believe it enough that"\
... "they are willing to starve. But the truth is that there is a box,"\
... "there is an emptied river, there is a man sitting atop the box, there"\
... "are guns, and there are starving people."
>>> for_string_wrapped_to_width "${on_boxes}" 75 on_parables\
...    ':str.is_globbed "${on_parables}" [Tt]he* and
...         :stdout.echo "${on_parables}"'
The box is full of salmon, and a man sits atop the box. Long ago this man
the illusion. The others believe it enough that they are willing to starve.
------------------------------------------
==========================================
/---
function for_string_wrapped_to_width() {
    die_unless_args_3_to_4\
        'Expected one string, one integer, optional line name, and one command.'
    :str\
        text__fswall="${1}"\
        line_length__fswall="${2}"\
        line_name__fswall='LINE'\
        command__fswall="${@[-1]}"\
        pcre__fswall
    if { is_args_4 } { line_name__fswall="${3}" }
    :die_unless_var_name "${line_name__fswall}"
    :str.die_if_empty "${command__fswall}" 'Expected nonempty command.'

    # Get a PCRE wrapping lines to such width.
    set_string_to_pcre_wrapping_to_width pcre__fswall "${line_length__fswall}"

    # For each line's worth of text, print this line suffixed by a newline.
    :str "${line_name__fswall}"
    for_string_text_matching_pcre: "${text__fswall}" "${pcre__fswall}" '
        # If this PCRE failed to match a substring, throw an exception.
        (( ${#match} )) :or
            :die "PCRE \"${pcre__fswall}\" failed to wrap current line."

        # If this substring was *NOT* properly split (e.g., by a hyphen), this
        # substring exceeded the passed line length and hence must be manually
        # hyphenated. While this is not the common case, matching this case
        # explicitly ensures desired behavior below.
        if :is -n "${match['${ZY_STRING_WRAP_PCRE_INDEX_UNSPLIT}']}" :si {
            '${line_name__fswall}'="${match['${ZY_STRING_WRAP_PCRE_INDEX_UNSPLIT}']}-"
        # Else, this substring was properly split. If this substring is:
        #
        # * A nonempty string, this is a non-blank line suffixed by either a
        #   space, tab, newline, or the string end. This is the common case.
        # * The empty string, this is a blank line. Assuming the caller appends
        #   a newline to such substring, such line will be preserved as is
        #   without further intervention on our part.
        } else {
            '${line_name__fswall}'="${match['${ZY_STRING_WRAP_PCRE_INDEX_SPLIT}']}"
        }

        # Run this command.
        '${command__fswall}
}
