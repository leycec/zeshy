#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*String centering* (i.e., printing strings centered to the width of the current
terminal).
/---

#FIXME: Under 256-color terminals, it'd be great to incrementally subdivide the
#colors of box border characters into a gradient. Don't change the characters;
#change the colors. This is both simpler and more aesthetically pleasing.

# ....................{ SETTERS                            }....................
#FIXME: Something not quite right. Function currently appears to subtly fail
#when passed the empty string as a first parameter. This *SHOULD* work, but the
#output is off-by-one. *sigh*
:func.doc <<'/---'
string :set_string_to_string_centered_to_width_in_style(
    string string_name,
    string text,
    int line_width,
    string style_prefix)

Set the passed string variable to the passed string centered to the passed *line
width* (i.e., integer in `[1, $(get_terminal_width)]`), using user-configurable
styles prefixed by the passed prefix.

== Styles ==

Such styles are keys of both the user-configurable map ${ZY_STYLE_TO_COLOR}
(specifying colors to be output) and ${ZY_STYLE_TO_TEXT} (specifying string
literals to be output), including:

* `${style_prefix}text`, styling the passed string itself.
* `${style_prefix}corner_left` and `${style_prefix}corner_right`, styling the
  left and right *corners* (i.e., first and last substrings to be printed on the
  line), each defaulting to the empty string.
* `${style_prefix}border_left` and `${style_prefix}border_right`, styling the
  left and right *borders* (i.e., substrings repeatedly printed until filling
  all space between the corresponding corner and joiner substrings), each
  defaulting to a space.
* `${style_prefix}joiner_left` and `${style_prefix}joiner_right`, styling the
  left and right *joiners* (i.e., substrings immediately prefixing and suffixing
  the passed string), each defaulting to the empty string.
/---
function :set_string_to_string_centered_to_width_in_style() {
    # Validate sanity.
    die_unless_args_4\
        'Expected one string name, one string, one line width, and one style prefix.'
    string\
        string_name__sstsctwwsp="${1}"\
        text__sstsctwwsp="${2}"\
        line_width__sstsctwwsp="${3}"\
        style_prefix__sstsctwwsp="${4}"\
        corner_left__sstsctwwsp\
        corner_right__sstsctwwsp\
        border_left__sstsctwwsp\
        border_right__sstsctwwsp\
        joiner_left__sstsctwwsp\
        joiner_right__sstsctwwsp
    integer\
        text_length__sstsctwwsp\
        cipher_left_length__sstsctwwsp\
        cipher_right_length__sstsctwwsp\
        corner_left_length__sstsctwwsp\
        corner_right_length__sstsctwwsp\
        border_left_length__sstsctwwsp\
        border_left_repeated_length__sstsctwwsp\
        border_right_length__sstsctwwsp\
        border_right_repeated_length__sstsctwwsp\
        joiner_left_length__sstsctwwsp\
        joiner_right_length__sstsctwwsp
    :die_unless_terminal_column "${line_width__sstsctwwsp}"

    # Length of such text excluding non-printable characters and sequences.
    :set_int_to_string_length_printable\
        text_length__sstsctwwsp "${text__sstsctwwsp}"
#   print "text: ${text__sstsctwwsp}; text_length__sstsctwwsp: ${text_length__sstsctwwsp}"

    # Number of characters preceding such text, when centering such text in the
    # middle of an output terminal line. By design, assigning a floating point
    # value to an integer variable implicitly rounds such value down to the
    # nearest whole integer. In this case, such rounding ensures that, when the
    # terminal width and text length are of differing parity (i.e., one is even
    # and the other odd), the text will be offset to the left by one character
    # of "the true center": e.g.,
    #
    #     # Centering a 4-character string on a 9-character wide terminal.
    #     123456789   # terminal width indices; note "5" to be the center
    #       test      # string offset to the left 1 character from center
    cipher_left_length__sstsctwwsp=$((\
        (line_width__sstsctwwsp - text_length__sstsctwwsp) / 2 ))

    # Number of characters following such text, defined to be the number of
    # characters on a terminal line neither preceding or containing such text.
    cipher_right_length__sstsctwwsp=$((\
        line_width__sstsctwwsp -\
        text_length__sstsctwwsp -\
        cipher_left_length__sstsctwwsp ))

    # Substrings to be measured (but not repeated) below and hence *NOT* yet
    # injected with color. Such substrings are optional and hence default to the
    # empty string.
    corner_left__sstsctwwsp="${ZY_STYLE_TO_TEXT[${style_prefix__sstsctwwsp}corner_left]-}"
    corner_right__sstsctwwsp="${ZY_STYLE_TO_TEXT[${style_prefix__sstsctwwsp}corner_right]-}"
    joiner_left__sstsctwwsp="${ZY_STYLE_TO_TEXT[${style_prefix__sstsctwwsp}joiner_left]-}"
    joiner_right__sstsctwwsp="${ZY_STYLE_TO_TEXT[${style_prefix__sstsctwwsp}joiner_right]-}"
#   print "border left: ${border_left}"

    # Substrings to be repeated below and hence never injected with color. Since
    # :Str.repeat_str_ansiless_to_len() requires strings *NOT*
    # containing colors, shift such colors to preceding substrings. Such
    # substrings are mandatory and hence default to a single space.
    border_left__sstsctwwsp="${ZY_STYLE_TO_TEXT[${style_prefix__sstsctwwsp}border_left]- }"
    border_right__sstsctwwsp="${ZY_STYLE_TO_TEXT[${style_prefix__sstsctwwsp}border_right]- }"

    # Lengths of such substrings. For efficiency, inline such implementations.
    # See get_string_ansiless_length_printable() for further details.
    corner_left_length__sstsctwwsp="${(m)#corner_left__sstsctwwsp}"
    corner_right_length__sstsctwwsp="${(m)#corner_right__sstsctwwsp}"
    border_left_length__sstsctwwsp="${(m)#border_left__sstsctwwsp}"
    border_right_length__sstsctwwsp="${(m)#border_right__sstsctwwsp}"
    joiner_left_length__sstsctwwsp="${(m)#joiner_left__sstsctwwsp}"
    joiner_right_length__sstsctwwsp="${(m)#joiner_right__sstsctwwsp}"
#   print "right_length: ${right_length}\ncorner_right_length: ${corner_right_length}\njoiner_right_length: ${joiner_right_length}\nborder_right_length: ${border_right_length}"

    # If either border substring is empty, throw an exception. Subsequent
    # centering expects such substrings to be strictly nonempty.
    :int.die_unless_positive "${border_left_length__sstsctwwsp}"\
        'Expected nonempty left border.'
    :int.die_unless_positive "${border_right_length__sstsctwwsp}"\
        'Expected nonempty right border.'

    # Inject colors into all prior substrings *EXCEPT* substrings to be
    # subsequently repeated, as previously discussed.
    corner_left__sstsctwwsp="${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}corner_left]-}${corner_left__sstsctwwsp}${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}border_left]-}"
    joiner_left__sstsctwwsp="${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}joiner_left]-}${joiner_left__sstsctwwsp}${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}text]-}"
    joiner_right__sstsctwwsp="${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}joiner_right]-}${joiner_right__sstsctwwsp}${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}border_right]-}"
    corner_right__sstsctwwsp="${ZY_STYLE_TO_COLOR[${style_prefix__sstsctwwsp}corner_right]-}${corner_right__sstsctwwsp}"

    # Number of "free" characters to the left and right of such string (i.e.,
    # number of characters *NOT* already allotted to corner and joiner
    # substrings), to be allotted to the left and border substrings.
    border_left_repeated_length__sstsctwwsp=$((\
        cipher_left_length__sstsctwwsp -\
        corner_left_length__sstsctwwsp -\
        joiner_left_length__sstsctwwsp ))
    border_right_repeated_length__sstsctwwsp=$((\
        cipher_right_length__sstsctwwsp -\
        corner_right_length__sstsctwwsp -\
        joiner_right_length__sstsctwwsp ))

    # If the length of either such border is non-positive, increase such length
    # to the minimum (namely, the length of a single border substring). Such
    # error condition implies the passed line width to be insufficient to
    # properly display such string. While any number of responses would suffice,
    # this is both the most expedient and (arguably) aesthetically pleasing.
    if (( border_left_repeated_length__sstsctwwsp < 1 )) {
          border_left_repeated_length__sstsctwwsp="${border_left_length__sstsctwwsp}"
    }
    if (( border_right_repeated_length__sstsctwwsp < 1 )) {
          border_right_repeated_length__sstsctwwsp="${border_right_length__sstsctwwsp}"
    }

    # Repeat border substrings as needed to fill all available space.
    :Str.repeat_str_ansiless_to_len\
        border_left__sstsctwwsp\
        "${border_left__sstsctwwsp}"\
        "${border_left_repeated_length__sstsctwwsp}"
    :Str.repeat_str_ansiless_to_len\
        border_right__sstsctwwsp\
        "${border_right__sstsctwwsp}"\
        "${border_right_repeated_length__sstsctwwsp}"

    # Set such variable to such centered string.
    :Str.set "${string_name__sstsctwwsp}"\
        "${corner_left__sstsctwwsp}${border_left__sstsctwwsp}${joiner_left__sstsctwwsp}${text__sstsctwwsp}${joiner_right__sstsctwwsp}${border_right__sstsctwwsp}${corner_right__sstsctwwsp}"
}

# ....................{ CENTERERS                          }....................
:func.doc <<'/---'
string center_string(string text1, ...)

Center the passed string(s) to the width of the current terminal, using user-
configurable styles prefixed by the dot-suffixed name of this function (i.e.,
`center_string.`). Assuming default `zeshy` settings, such styles are undefined,
implying such string(s) to be centered with spaces as expected. See
center_string_in_style_caller() for further details: e.g.,

.center_string()
==========================================
[source]
------------------------------------------
>>> string on_preventative_care=\
...    "\"So you think our medicine's pretty primitive?\"
...     \"That's the wrong word. It isn't primitive. It's fifty percent terrific
...     and fifty percent non-existent. Marvellous antibiotics — but absolutely
...     no methods for increasing resistance, so that antibiotics won't be
...     necessary. Fantastic operations — but when it comes to teaching people
...     the way of going through life without having to be chopped up,
...     absolutely nothing. And it's the same all along the line. Alpha Plus for
...     patching you up when you've started to fall apart; but Delta Minus for
...     keeping you healthy. Apart from sewerage systems and synthetic vitamins,
...     you don't seem to do anything at all about prevention. And yet you've
...     got a proverb: prevention is better than cure.\""
>>> center_string "$(get_string_word "${on_preventative_care}" -1)"
                                    cure."
------------------------------------------
==========================================
/---
function center_string() {
    # While deceptively trivial, this function should *NOT* be reduced to a
    # simple synonym of center_string_in_style_caller(). This function is
    # discretely separate from the latter to ensure that the style prefix used
    # expands to "center_string.". Assuming default zeshy styles, such prefix
    # prefixes no existing style, ensuring this function reliably centers such
    # string with spaces. (Phew!)
    die_unless_args 'Expected one or more strings.'
    center_string_in_style_caller "${*}"
}

# ....................{ CENTERERS ~ style                  }....................
:func.doc <<'/---'
string center_string_in_style_caller(string text1, ...)

Center the passed string(s) to the width of the current terminal, using user-
configurable styles prefixed by the dot-suffixed caller's name (i.e.,
`$(:caller.get).`) See center_string_in_style() for further details.
/---
function center_string_in_style_caller() {
    die_unless_args 'Expected one or more strings.'
    center_string_in_style "${*}" "$(:caller.get)."
}

:func.doc <<'/---'
string center_string_in_style(string text, string style_prefix)

Center the passed string to the width of the current terminal, using user-
configurable styles prefixed by the passed prefix. See
center_string_to_width_in_style() for further details.
/---
function center_string_in_style() {
    die_unless_args_2 'Expected one string and one style prefix.'
    :int terminal_width

    # Width of the current terminal.
    :set_int_to_terminal_width_if_found_or_default terminal_width

    # Center such strings.
    center_string_to_width_in_style "${1}" "${terminal_width}" "${2}"
}

:func.doc <<'/---'
string center_string_to_width_in_style(
    string text,
    integer line_width,
    string style_prefix)

Center the passed string to the passed *line width* (i.e., an integer in
`[1, $(get_terminal_width)]`), using user-configurable styles prefixed by the
passed prefix. See :set_string_to_string_centered_to_width_in_style()
for further details.
/---
function center_string_to_width_in_style() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one string, one line width, and one style prefix.'
    string output

    # Set and output such centered string.
    :set_string_to_string_centered_to_width_in_style output "${@}"
    :stdout.echo "${output}"
}

#FIXME: In lieu of unit tests...
#function sayh() {
##   output_call_stack
#    print 'upended'  # should be two newlines after this!
#    print_message_heading 'dancing to'
#    print 'life'
#
#    function sayhsayh() {
#        print_message_heading 'beyond'
#        print 'genesis'
#        print_message_heading 'ein'
#        print 'lichtschein'
#
#        print
#        print 'line:'
#        output_line
#    }
#    sayhsayh
#    print_message_heading 'road to'
#    print 'ubar'
#}
