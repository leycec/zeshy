#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: "Boxing"? What do "boxes" have to do with titles? Is this perhaps an
#accidentally copy-and-pasted holdover from elsewhere in the codebase?
:parcel <<'/---'
*String boxing* (i.e., embedding strings into visual boxes, typically printed
with familiar box-drawing characters).
/---

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:int get_string_titled_content_width_in_style(:str style_prefix)

Maximum number of characters in the content of each line of output (i.e.,
excluding width of visual borders on such lines) wrapped to the current terminal
under the user-configurable styles prefixed by the passed prefix.

== See Also ==

* get_string_wrapped_width_in_style().
/---
function get_string_titled_content_width_in_style() {
    die_unless_arg 'Expected one style prefix.'
    get_string_wrapped_width_in_style "${1}content."
}

# ....................{ OUTPUTTERS                         }....................
:func.doc <<'/---'
:str :output_string_titled_in_style_caller(:str text :str title)

Title the passed text, using user-configurable styles prefixed by the
dot-suffixed caller's name (i.e., `$(:caller.get).`).

== See Also ==

* See :output_string_titled_in_style() for further details.
/---
function :output_string_titled_in_style_caller() {
    die_unless_args_2 'Expected one string and one title.'

    # Caller name.
    :str caller
    :Caller.set caller

    # Title this string.
    :output_string_titled_in_style "${@}" "${caller}."
    # :print_stdout_separated_stop
}


:func.doc <<'/---'
:str :output_string_titled_in_style(:str text :str title :str style_prefix)

Print the passed text with the passed title, using user-configurable styles
prefixed by the passed prefix.

Specifically, this function prints a ``box'' consisting of:

* Such title as a line horizontally centered in the current terminal, using
  user-configurable styles prefixed by `${style_prefix}heading.`. See
  center_string_in_style() for further details.
* Such text as one or more lines horizontally wrapped to the current terminal,
  using user-configurable styles prefixed by `${style_prefix}content.`. See
  wrap_string_in_style() for further details.
* The bottom edge of such box, using user-configurable styles prefixed by
  `${style_prefix}footing.`. Again, see
  center_string_in_style() for further details.
/---
function :output_string_titled_in_style() {
    die_unless_args_3 'Expected one string, one title, and one style prefix.'
    :str text=${1} title=${2} style_prefix=${3}

    # Print such title, content. and the bottom edge of the implied box.
    center_string_in_style "${title}" "${style_prefix}heading."
    wrap_string_in_style   "${text}"  "${style_prefix}content."
    output_line_in_style              "${style_prefix}footing."
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_string_titled_in_style_caller(:str text :str title)

Title the passed text, using user-configurable styles prefixed by the
dot-suffixed caller's name (i.e., `$(:caller.get).`).

See :output_string_titled_in_style() for further details.
/---
function print_string_titled_in_style_caller() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one title.'
    :str caller

    # Caller name.
    :Caller.set caller

    # Prepare standard output for printing.
    :print_stdout_separated_start

    # Title such string.
    :output_string_titled_in_style "${@}" "${caller}."

    # Prepare standard output for subsequent printing.
    :print_stdout_separated_stop
}

#FIXME: In lieu of unit tests...
#function boxy() {
#    :output_string_titled_in_style 'Parable of the Box'\
#        'The box is full of salmon, and a man sits atop the box. Long ago this man hired armed guards to keep anyone from eating his fish. The many people who sit next to the empty river starve to death. But they do not :die of starvation. They :die of a belief. Everyone believes that the man atop the box owns the fish. The soldiers believe it, and they will kill to protect the illusion. The others believe it enough that they are willing to starve. But the truth is that there is a box, there is an emptied river, there is a man sitting atop the box, there are guns, and there are starving people.'\
#        'print_message.'
#     :output_string_titled_in_style 'Parable of the Box (2)'\
#        'The box is full of salmon, and a man sits atop the box. Long ago this
#man hired armed guards to keep anyone from eating his fish. The many
#people who sit next to the empty river starve to death. But they do
#not :die of starvation. They :die of a belief. Everyone believes that
#the man atop the box owns the fish. The soldiers believe it, and they
#will kill to protect the illusion. The others believe it enough that
#they are willing to starve. But the truth is that there is a box,
#there is an emptied river, there is a man sitting atop the box, there
#are guns, and there are starving people.'\
#        'print_message.'
#}
