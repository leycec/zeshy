#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Horizontal lines* (i.e., singe-line strings constructed from user- configurable
styles, typically spanning the width of the current terminal).
/---

#FIXME: To avoid nomenclature conflict with top-level line functions (e.g.,
#:line.run_if_debug), replace *ALL* uses of line "_line" below with
#"_line_horizontal".
#FIXME: Add examples, as ever.

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
void set_string_to_line_of_length_in_style(
    string string_name,
    integer length,
    string style_prefix)

Set the passed string variable to a horizontal line of the passed length, using
user-configurable styles prefixed by the passed prefix. See
:set_string_to_string_centered_to_width_in_style() for further details.
/---
function set_string_to_line_of_length_in_style() {
    die_unless_args_3\
        'Expected one string name, one length, and one style prefix.'
    :set_string_to_string_centered_to_width_in_style\
        "${1}" '' "${@[2,3]}"
}

# ....................{ OUTPUTTERS                         }....................
:func.doc <<'/---'
string output_line()

Output a horizontal line spanning the width of the current terminal, using user-
configurable styles prefixed by `output_line.`. See
output_line_of_length_in_style() for further details.
/---
function output_line() {
    die_if_args
    output_line_in_style "${0}."
}

# ....................{ OUTPUTTERS ~ style                 }....................
:func.doc <<'/---'
string output_line_in_style(string style_prefix)

Output a horizontal line spanning the width of the current terminal, using user-
configurable styles prefixed by the passed prefix. See
output_line_of_length_in_style() for further details.
/---
function output_line_in_style() {
    # Validate sanity.
    die_unless_arg 'Expected one style prefix.'
    :int terminal_width

    # Width of the current terminal.
    :set_int_to_terminal_width_if_found_or_default terminal_width

    # Output such line.
    output_line_of_length_in_style "${terminal_width}" "${1}"
}

:func.doc <<'/---'
string output_line_of_length_in_style(integer length, string style_prefix)

Output a horizontal line of the passed length, using user-configurable styles
prefixed by the passed prefix. See center_string_to_width_in_style() for further
details.
/---
function output_line_of_length_in_style() {
    die_unless_args_2 'Expected one length and one style prefix.'
    :output_stdout_start
    center_string_to_width_in_style '' "${@}"
    :output_stdout_stop
}

#FIXME: In lieu of unit tests...
#function leol() {
#    output_line
#}
