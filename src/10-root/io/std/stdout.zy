#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core standard output functionality.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_stdout_terminal(
    :str error_message='Standard output not a terminal.')

Throw an exception with the passed message unless standard output from the
current context is a terminal.

== See Also ==

* :stdout.is_terminal().
/---
function die_unless_stdout_terminal() {
    die_unless_args_0_to_1 'Expected optional error message.'
    :stdout.is_terminal :or :die "${1-Standard output not a terminal.}"
}

# ....................{ TESTERS                            }....................
#FIXME: This function is tangentially related to
#:is_stdin_pipe_or_file_simple() -- if for inverse purposes (i.e., testing for
#an interactive output terminal rather than for non-interactive input).
#Nonetheless, given that that function has considerably better documentation,
#consider improving the documentation for this function in a similar manner.

:func.doc <<'/---'
[status=:bool] is_stdout_terminal_or_pipe()

Report success only if standard output from the current context is either a
terminal _or_ pipe.

While this function cannot test whether this pipe writes to a command whose
standard output is a terminal (e.g., to page_stdin()), this is the best `zsh`
currently permits.
/---
function is_stdout_terminal_or_pipe() {
    die_if_args
    :stdout.is_terminal :or is_stdout_pipe
}


:func.doc <<'/---'
[status=:bool] is_stdout_pipe()

Report success only if standard output from the current context is a *pipe*
(i.e., if this context is any subcommand of a pipeline -- excluding the last
such subcommand, which transmits no piped output).
/---
function is_stdout_pipe() {
    die_if_args
#   :stdout.echo "call stack: ${funcstack[*]}"
    :is -p "${ZY_STDOUT_PATH-/dev/stdout}" :si
}


:func.doc <<'/---'
[status=:bool] :stdout.is_terminal()

Report success only if standard output from the current context is an
*interactive terminal*.
/---
function :stdout.is_terminal() {
    die_if_args
    :is -t ${ZY_STDOUT_FILE_DESCRIPTOR-1} :si
}
