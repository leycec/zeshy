#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core standard input functionality.

== Caveats ==

Standard file descriptors are shell-specific. Hence, avoid calling functions or
expanding functions operating on such descriptors from subshells. Attempting to
do so fails to both operate on and close such descriptors in the current shell.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_stdin_pipe()

Throw an exception with the passed message unless standard input to the current
context is a pipe.

See :stdin.is_pipe() for further details.
/---
function die_unless_stdin_pipe() {
    die_if_args
    :stdin.is_pipe :or :die 'Standard input unpiped.'
}

:func.doc <<'/---'
:void die_unless_stdin_terminal()

Throw an exception with the passed message unless standard input to the current
context is a terminal.

See :stdin.is_terminal() for further details.
/---
function die_unless_stdin_terminal() {
    die_if_args
    :stdin.is_terminal :or :die 'Standard input not a terminal.'
}

# ....................{ TESTERS                            }....................
#FIXME: Rename to :stdin.is_here_doc_or_str().
:func.doc <<'/---'
[status=:bool] :is_stdin_here_doc_or_string()

Report success if standard input to the current context is either a
*here-document or -string* (i.e., if such input is received non-interactively
from either a `<<`-enabled here-document or `<<<`-enabled here-string mediated
through a `zsh`-specific temporary file).

== Caveats ==

*Success only strongly implies (rather than strictly guaranteeing) such input
to be either a here-document or -string.* If such input is in fact a here-
document or -string, `zsh` mediates such input through a temporary file deleted
immediately after use prefixed by the standard `zsh`-specific prefix for such
files (e.g., `/tmp/zsh`). Technically, the current user and/or system _could_
symbolically link such input to such a file outside of a here-document or
-string, in which case this function erroneously reports success.

The unlikelihood of such a meaninglessly malicious scenario strongly implies
the exit status reported by this function to signify its specified condition.
/---
function :is_stdin_here_doc_or_string() {
    # Validate sanity.
    die_if_args
    :str stdin_target

    # Target file to which the symbolic link for standard input points.
    :set_string_to_symlink_target_last\
        stdin_target "${ZY_STDIN_PATH-/dev/stdin}"

    # Report success if such file does not exist *AND* is prefixed by the
    # zsh-specific temporary path prefix.
    :not is_file "${stdin_target}" :and {
        # Prefix prefixing all zsh-specific temporary paths.
        :str zsh_temp_prefix
        :set_string_to_zsh_temp_prefix zsh_temp_prefix

        # Test such target.
        :is_string_prefix "${stdin_target}" "${zsh_temp_prefix}"
    }
}


#FIXME: Rename to :stdin.is_file_nonspecial().
:func.doc <<'/---'
[status=:bool] :is_stdin_file_simple()

Report success if standard input to the current context is a *non-special file*
(i.e., if this input is received non-interactively from a typical file rather
than interactively from a device file).

== Implications ==

This function reports failure if this input is either:

* A *pipe*, either named (e.g., `/tmp/fifo`) or unnamed (i.e., a typical pipe).
* A *pseudo-terminal device file* (e.g., `/dev/pts/0`). This is usually the case
  if the current process is running unredirected under a graphical terminal
  emulator (e.g., `xterm`).
* The *bit bucket device file* (e.g., `/dev/null`). This is usually the case if
  the current process is a cronjob.
/---
function :is_stdin_file_simple() {
    # Validate sanity.
    die_if_args

    # If standard input is attached to either a terminal or pipe, such input
    # cannot be a simple file. In either case, report failure.
    #
    # Technically, in either case (under Linux, at least), the canonical
    # symbolic link for standard input is guaranteed to transitively point to a
    # non-simple file. Assuming such guarantee holds across all other supported
    # platforms, the logic below would implicitly report failure in either
    # case, implying this conditional to be unnecessary (but improve efficiency
    # in the common case).
    #
    # We now instructively show why this must be the case (again -- under
    # Linux, at least). If standard input is attached to a:
    #
    # * Terminal, such link points to such terminal's device file. Since device
    #   files are *NOT* simple files, the logic below would implicitly report
    #   failure in such case.
    # * Pipe, such link points to a non-existent file in the same directory
    #   with basename resembling "pipe:[35692595]". Since non-existent files
    #   are also *NOT* simple files, the logic below would implicitly report
    #   failure in such case. If such file were creatable, such guarantee could
    #   be circumvented by merely creating an empty simple file in such
    #   directory with such basename. However, since such directory resides in
    #   the "/proc" pseudo-filesystem under Linux and hence is read-only, such
    #   file cannot be created -- even when attempting to do so as root.
    #
    # While this test is merely an optimization under Linux, there exists no
    # guarantee of it not being required under other platforms. In short, it's
    # best not to leave such delicate matters to chance.
    :not { :stdin.is_terminal :or :stdin.is_pipe } :and {
        # Target file to which such link points.
        :str stdin_target
        :set_string_to_symlink_target_last\
            stdin_target "${ZY_STDIN_PATH-/dev/stdin}"

        # Report success only if such file exists *AND* is simple.
        is_file "${stdin_target}" :and :is_file_simple "${stdin_target}"
    }
}

#FIXME: In lieu of unit tests...
#function empo() {
#    print ok | { :stdin.is_pipe     and print 'ok' or print 'ko' }
#    print ok | { :stdin.is_nonempty and print 'ok' or print 'ko' }
#    {   print "stdin: $(:stdin)"
#        :stdin.is_nonempty and print 'ok' or print 'ko' } <<< yumo
#   string yimo; :Str.from_stdin yimo <<< hamo; print "yimo: ${yimo}"
#}

# ....................{ TESTERS ~ caution!                 }....................
:func.doc <<'/---'
[status = :bool] :stdin.is_nonempty()

Report success if standard input to the current context is *non-empty* (i.e.,
provides at least one readable byte) and hence readable without blocking (i.e.,
without silently, indefinitely waiting for such input to become available).

Since reading from standard input via conventional techniques (e.g., `<
/dev/stdin`, read() builtin, :stdin() alias) typically blocks or behaves
erratically if no such input has been written, consider polling this function
before attempting to read from standard input.

== Caveats ==

*This function is inherently unreliable without iterative polling.* Only call
this function as the test of an indefinite wait or for loop: e.g.,

.:stdin.is_nonempty() Called Properly
==========================================
[source]
------------------------------------------
>>> :str on_perfect_security=\
...     "There is a contradiction in wanting to be perfectly secure in a
...      universe whose very nature is momentariness and fluidity."
>>> :stdout.echo "${on_perfect_security}" | {
...     :stdout.echo "Waiting for input."
...     while { not :stdin.is_nonempty } {
...         :stdout.echo_sans_newline "."
...     }
...     :stdout.echo "Received input: $(:stdin)"
... }
Waiting for input.....
Received input: There is a contradiction in wanting to be perfectly secure in a
universe whose very nature is momentariness and fluidity.
------------------------------------------
==========================================

*Never call this function as a non-iterative test* (e.g., modifying the line
reading `while { not :stdin.is_nonempty } {` in the prior example
to `if { not :stdin.is_nonempty } {`). Preparing to write and then
writing to standard input requires a non-deterministic and hence non-computable
amount of wall clock time regardless of the underlying mechanism used to do so
(e.g., pipe, process substitution, here-string, here-document). Indeed,
establishing pipes requires forking one asynchronous subshell for each pipe
subcommand excluding the last -- an extremely computationally expensive task.
Given such expense, there exists no guarantee that the source of standard input
will have provided such input by the time of a non-iterative call to this
function. Moreover, given such non-determinism, whether such call succeeds or
not depends principally on current system load! To demonstrate this, consider
the following output from calling this function non-iteratively:

.:stdin.is_nonempty() Called Improperly
==========================================
[source]
------------------------------------------
>>> :int count
>>> for  count ({0..7}) {
...     :stdout.echo_newline | {
...         :stdin.is_nonempty and
...             :stdout.echo "Input available." or
...             :stdout.echo "No input available."
...     }
... }
No input available.
Input available.
No input available.
No input available.
Input available.
No input available.
Input available.
------------------------------------------
==========================================

For the same reason, there intentionally exists _no_ corresponding
:stdin.die_unless_nonempty() function, as no finite number of iterations is
sufficient to decide non-emptiness in the general case.

In cases where iterative polling is inappropriate, consider calling
:stdin.is_noninteractive() instead. That function typically only reports success
when standard input is readable without blocking, and does so without requiring
iterative polling.
/---
function :stdin.is_nonempty() {
    (( # == 0 )) || :die 'Expected no arguments.'

    # Given the criticality and commonality of this test, one would assume there
    # to exist builtins or commands for accomplishing it. One would be wrong.
    # Testing whether this file descriptor and hence input is readable without
    # blocking requires calling the commonly available kernel function select().
    # Ideally, this test would elegantly reduce to the following:
    #
    #     read -t 0 -k 0
    #
    # Dismantled, this is:
    #
    # * "-t 0", testing whether standard input is readable without blocking and
    #   returning immediately if not.
    # * "-k 0", reading 0 bytes from standard input if this input is readable.
    #
    # Unfortunately, "read -t 0 -k 0" always returns failure. This differs from
    # bash, in which "read -t 0 -N 0" conditionally returns success when one
    # expects it to. Hence, this test defers to select() instead.
    #
    # Since zselect() (the zsh select() wrapper) returns failure with exit
    # status 2 when the underlying OS fails to provide a select() function,
    # capture and test this status rather than implicitly returning this status
    # as this function's exit status.
    #
    # Dismantled, this is:
    #
    # * "-r ...", testing standard input's canonical file descriptor for
    #   nonempty readability.
    # * "-t 0", reporting whether input bytes exist in a non-blacking manner
    #   (where "0" signifies 0 hundredths of a second wait time).
    # * "-a ...", setting this list to contain a string resembling either
    #   "-r 0" if standard input is nonempty or "" if standard input is empty.
    #   Since zselect() defaults this list to ${reply} if unpassed *AND* since
    #   this list is commonly used by callers and should *NOT* be overwritten by
    #   such a low-level function as this, explicitly specify this list. Since
    #   this function never references this list, our specifying it here is
    #   simply to avoid overwriting ${reply}. (Frankly, this "unique" choice of
    #   API design is one of the more eclectic that we've ever seen. And we were
    #   proficient in ML... once.)
    #
    # Thus doth another feeble mind break. (O^o)
    :list zselect_status
    zselect -r 0 -t 0 -a zselect_status :or {
        # Preserve the exit status reported by this builtin.
        :int exit_status=${status}

        # If this status indicates the current OS kernel to *NOT* provide this
        # function, throw an exception.
        (( exit_status != 2 )) :or :die 'Kernel function select() undefined.'

        # Else, report this status. Technically, zselect() reports 0 if *ANY*
        # passed file descriptor is non-blockably readable and 1 otherwise.
        # Since this function tests only standard input, this status exactly
        # coincides with what the caller expects. (Scoooooore!)
        return ${exit_status}
    }
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_stdin_until_eot[stdin=(:str input)]

Get all standard input to the current context until receiving a line of such
input containing only the end-of-transmission (EOT) character.

If no such line is received, all input will be returned.

This function is intended to be called as a coprocess in low-level functions
capturing output (e.g., run_silent_and_set_string_to_stderr()). Since
coprocesses typically loop on standard input until receiving end-of-file _and_
since there exists no builtin means of piping end-of-file to standard input,
this function leverages the EOT character for such purposes.
/---
function get_stdin_until_eot() {
    # Technically, there exist two means of caching standard input:
    #
    # 1. Appending each line of such input delimited by newline to a string and
    #    returning such string as is.
    # 2. Appending each line of such input undelimited to a list and returning
    #    such list joined on newline.
    #
    # Having implemented both, the former informally appears to behave much more
    # efficiently in time (and presumably in space) than the latter. Hence, we
    # adopt such approach.
    #
    # Incidentally, do *NOT* attempt to trap signals (either locally or
    # globally) within this function. Doing so irrevocably terminates the entire
    # process group of shells owning this shell -- a probable zsh bug. See
    # run_code_and_set_string_to_coprocess_output_from_redirection().

    # Validate sanity.
    die_if_args
    :str stdin stdin_line

    # Temporarily buffer each line of standard input to string local ${stdin},
    # which will be output "all at once" after input subsequently terminates.
    #
    # Do *NOT* incrementally output such lines (e.g., with :stdout.echo()) in
    # the loop body. Doing so behaves as expected on sufficiently small input
    # but deadlocks on sufficiently large input when invoked from a pipeline or
    # coprocess subshell whose parent shell only reads such input back from such
    # subshell "all at once." In this case, "small" and "large" are defined by
    # the size of the kernel-specific socket buffer. If the current system
    # supports configuring such size, run "limit sockbufsize" to get such size;
    # else, the current kernel internally hardcodes such size.
    #
    # Since the socket buffer has finite size, attempting to write a string of
    # output larger than such size to such buffer blocks the process attempting
    # such write -- in the example above, the pipeline or coprocess subshell
    # executing this function.  If the process on the read end of such buffer --
    # in the example above, the parent shell of such subshell -- is *NOT*
    # concurrently reading such buffer but waiting for another command to
    # terminate, the inevitable result is deadlock. How bad is it? Bad:
    # indefinite, pseudo-random, and always silent.
    #
    # See :stdin.page() for related logic.
    :str IFS=
    while { read -r stdin_line :and :is ${stdin_line} != ${ZY_ASCII_EOT} :si } {
        stdin+="${stdin_line}${ZY_ASCII_NEWLINE}"
    }

    # Return such input to the caller via a *SINGLE* output statement. Avoid
    # suffixing such input with a newline; the prior loop already did.
    #
    # If such input is sufficiently large, attempting to output the entirety
    # of such input from a pipeline or coprocess subshell will block such
    # subshell unless the parent shell concurrently reads such output.
    # Fortunately, this is the common case under the 
#   :stderr.echo 'Coprocess terminating.'
    :stdout.echo_sans_newline "${stdin[1,-2]}"
}
