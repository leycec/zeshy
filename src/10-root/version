#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle version specifiers, including both `zsh`- and `zeshy`-specific version
specifiers and conventional `.`-delimited version specifiers.
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_version_at_least(string version, string minimum_version)

Report success if the first passed version specifier is at least as recent as
the second passed version specifier: e.g.,

.:is_version_at_least()
==========================================
[source]
------------------------------------------
>>> :str on_family_values=\
...     "A true revolution of values will soon cause us to question the fairness
...      and justice of many of our past and present policies. On the one hand
...      we are called to play the good Samaritan on life's roadside; but that
...      will be only an initial act. One day we must come to see that the whole
...      Jericho road must be transformed so that men and women will not be
...      constantly beaten and robbed as they make their journey on life's
...      highway. True compassion is more than flinging a coin to a beggar; it
...      is not haphazard and superficial. It comes to see that an edifice which
...      produces beggars needs restructuring."
>>> :is_version_at_least 6.1.6 6.6.6-hexakosioihexekontahexaphobia1318 or
...     get_string_line "${on_family_values}" -3
highway. True compassion is more than flinging a coin to a beggar; it
------------------------------------------
==========================================

== Version Specifiers ==

Both of the passed version specifiers _must_ consist only of (in left-to-right
order):

* One or more digits (e.g., `808`).
* Zero or more `.`-prefixed strings of one or more digits (e.g., `.404.202`).
* An optional suffix consisting only of (e.g., `-alpha101`):
** One `-` prefix.
** Zero or more non-digits (e.g., `alpha`).
** One or more digits (e.g., `101`).

In the same order, this function then numerically compares each group of `.`-
and `-`-prefixed digits for such specifiers until either:

* Some such groups differ (e.g., differing groups `18` and `36` in specifiers
  `27.54.18` and `27.54.36`), in which case this function reports:
** Success if such group for the first passed specifier is greater than the same
   group for the second passed specifier.
** Failure otherwise.
* No such groups differ, in which case this function reports success (since the
  first passed specifier is comparatively equal to and hence at least the
  second passed specifier).

=== Missing Digits ===

Both of the passed specifiers should but do _not_ need to contain the same
number of `.` characters. If they do not, this function internally appends `.0`
substrings to the specifier containing fewer `.` characters until the two
specifiers contain the same number of `.` characters. Hence, the following three
specifiers are equivalent for comparison purposes: `108`, `108.0`, `108.0.0`.

=== Optional Suffix ===

Only the optional `-`-prefixed suffix may contain alphabetic characters. Since
this function always ignores such characters, the following three specifiers are
equivalent for comparison purposes: `304.805-Lamedvavnik18`, `304.805-chai18`,
and `304.805-18`.
/---
function :is_version_at_least() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # To permit this function to be shifted to a top-level parcel should the
    # need arise (e.g., to validate zsh versions), this function should be
    # implemented as a low-level zsh rather than high-level zeshy function.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate sanity.
    (( # == 2 )) || :die 'Expected two version specifiers.'
    local\
        version_current="${1}"\
        version_minimum="${2}"\
        version_current_dots\
        version_minimum_dots\
        version_current_suffix\
        version_minimum_suffix\
        versions_current_item\
        versions_minimum_item
    integer\
        versions_current_count\
        versions_minimum_count\
        versions_current_size
    local -a versions_current versions_minimum

    # Clear canonical list global ${match} in preparation for use below.
    match=()

    # Strip "-"-prefixed suffixes from such version specifiers (e.g., the "-rc1"
    # in "8.4.2-rc1"), which typically contain non-numeric characters and a
    # different delimiter (i.e., "-" rather than "."). Retaining such suffixes
    # would complicate logic below iterating on lists split from such version
    # specifiers on delimiting ".". Dismantled, this is:
    #
    # * "//", removing all substrings matching:
    #   * "-[^0-9]#", a "-" followed by zero or more non-digits.
    #   * "(#b)(<->##)", capturing one or more digits into ${match[1]}.
    #   * "(#e)", anchoring such match to the end of the string.
    # * "${match[1]-}", expanding to such suffixing digits or the empty string
    #   if such version specifier has no such suffix.
    version_current="${version_current//-[^0-9]#(#b)(<->##)(#e)}"
    version_current_suffix="${match[1]-}"
    version_minimum="${version_minimum//-[^0-9]#(#b)(<->##)(#e)}"
    version_minimum_suffix="${match[1]-}"

    #FIXME: This is actually a reasonably clever, efficient means for counting
    #the number of instances of some character in a string. Generalize into a
    #new setter :set_int_to_string_chars_equaling_count().

    # Version specifiers stripped of all characters *EXCEPT* delimiting ".". To
    # avoid special case errors when such specifiers contain no ".", this *MUST*
    # be performed in a separate operation from the string counting performed
    # below. See :set_int_to_string_length_printable() for further details.
    version_current_dots="${version_current//[^.]}"
    version_minimum_dots="${version_minimum//[^.]}"

    # Number of items in each "."-delimited version specifier. See
    # :set_int_to_string_chars_equaling_count() for further details.
    versions_current_count=${#version_current_dots}
    versions_minimum_count=${#version_minimum_dots}

    # If such numbers differ, append the smaller version specifier with
    # sufficiently many ".0" until the two contain the same number of items. See
    # ::Str.repeat_str() for further details.
    if (( versions_current_count != versions_minimum_count )) {
        # Length of the appended substring containing sufficiently many ".0"'s.
        # Dismantled, this is:
        #
        # * "abs(...)", the number of ".0" to be appended.
        # * "2", the string length of ".0".
        integer suffix_length; suffix_length="$((\
            abs(versions_minimum_count - versions_current_count) * 2 ))"

        # If the current version is smaller, append to such string.
        if (( versions_current_count < versions_minimum_count )) {
            version_current+="${(r~${suffix_length}~~.0~):-}"
        # Else, the minimum version is smaller. Append to such string.
        } else {
            version_minimum+="${(r~${suffix_length}~~.0~):-}"
        }
    }

    # Split such version on the canonical version specifier delimiter ".".  See
    # :set_list_to_string_split_on_char() for further details.
    local IFS='.'
    versions_current=( "${=version_current}" )
    versions_minimum=( "${=version_minimum}" )

    # Sizes of the former list.
    versions_current_size=${#versions_current}

    #FIXME: Only perform such check under debug releases.
    # If such lists have different sizes, throw an exception. Since the prior
    # conditional should have guaranteed their equity, this is only a debug-
    # specific sanity check.
    (( versions_current_size == ${#versions_minimum} )) || :die\
        'Versions "'${versions_current}'" and "'${versions_minimum}'" differ in "." character counts.'

    # Such current version is typically expanded from either a variable value or
    # command output. In either case, such version is canonical and hence
    # complete (i.e., is a syntactically valid version specifier for such
    # command containing all expected fields). That being the case, iterate by
    # the current rather than minimum version.
    integer versions_current_index=0
    for ((; versions_current_index <= versions_current_size;
            versions_current_index++ )) {
        # Currently iterated items in such version specifiers.
        versions_current_item="${versions_current[versions_current_index]}"
        versions_minimum_item="${versions_minimum[versions_minimum_index]}"

        # If either the current or minimum item contains non-digits, throw an
        # exception. For sanity, this function requires strictly formatted
        # version specifiers.
        [[ "${versions_current_item}${versions_minimum_item}" == <->## ]] || :die\
            'Versions "'${versions_current}'" and/or "'${versions_minimum}'" invalid (i.e., contain non-digits or empty major or minor version numbers).'

        # If such items differ, such version specifiers are immediately
        # comparable without needing to compare subsequent items.
        if (( versions_current_item != versions_minimum_item )) {
            # If the current version is newer, report success; else, failure.
            (( versions_current_item > versions_minimum_item )) &&
                return 0 ||
                return 1
        }
    }

    # Such iteration completed without reporting, implying such version
    # specifiers to be equal *EXCLUDING* "-"-prefixed suffixes. However, such
    # suffixes could still differ.
    #
    # If both such suffixes exist, report their comparison. Unlike above,
    # equality implies such version specifiers to be equal and hence the current
    # version at least the minimum version.
    if [[ -n "${version_current_suffix}" &&
          -n "${version_minimum_suffix}" ]] {
        (( version_current_suffix >= version_minimum_suffix )) &&
            return 0 ||
            return 1
    # Else if only the current version is suffixed, report success (e.g.,
    # "5.0.0-r2" >= "5.0.0").
    } elif [[ -n "${version_current_suffix}" ]] {
        return 0
    # Else if only the minimum version is suffixed, report failure (e.g.,
    # "5.0.0" < "5.0.0-r2").
    } elif [[ -n "${version_minimum_suffix}" ]] {
        return 1
    }

    # Else, neither version is suffixed. This implies such version specifiers to
    # be equivalent and hence the current version at least the minimum version.
    # Report success.
    return 0
}

#FIXME: Implement a similar tester :is_zeshy_version_at_least().

:func.doc <<'/---'
[status: bool] is_zsh_version_at_least(string zsh_version)

Report success if the current `zsh` interpreter version is at least as recent as
the passed version. Such string is _always_ non-numeric (e.g., `4.8.17-dev0`)
and hence incomparable via standard numeric testers: e.g.,

.is_zsh_version_at_least()
==========================================
[source]
------------------------------------------
>>> is_zsh_version_at_least 999.666.333 or :stdout.echo "Not quite there yet."
Not quite there yet.
------------------------------------------
==========================================
/---
function is_zsh_version_at_least() {
    die_unless_arg 'Expected one version string.'
    :is_version_at_least "${1}" "${ZSH_VERSION}"
}

# ....................{ PRINTERS                           }....................
#FIXME: This is rather... trivial. Do we *REALLY* want such function?
:func.doc <<'/---'
string print_zeshy_version()

Print a human-readable synopsis of the current version of Zeshy.
/---
function print_zeshy_version() {
    die_if_args
    :stdout.echo "zeshy ${ZY_VERSION}"
}

# --------------------( WASTELANDS                         )--------------------
    # is-at-least "${1}"
# ....................{ GETTERS                            }....................
#FUXME: Excise both this and below. We've already shifted get_zsh_version()'s
#documentation above, so no loss there. (Yippee.)

# :func.doc <<'/---'
# float get_zeshy_version()
# 
# Get the current version of Zeshy as a comparable floating point number.
# /---
# function get_zeshy_version() {
#     die_if_args
#     :str.return 0.01
# }
# 
# :func.doc <<'/---'
# string get_zsh_version()
# 
# Get the current version of `zsh` as an uncomparable string (e.g.,
# `4.8.17-dev0`). Since this string is _not_ numeric, always call
# is_zsh_version_at_least() rather than compare such string numerically. Hence,
# such string is really only useful for logging or printing: e.g.,
# 
# .get_zsh_version()
# ==========================================
# [source]
# ------------------------------------------
# >>> :stdout.echo "zsh: version $(get_zsh_version)"
# zsh: version 5.0.0
# ------------------------------------------
# ==========================================
# /---
# function get_zsh_version() {
#     die_if_args
#     :str.return "${ZSH_VERSION}"
# }
