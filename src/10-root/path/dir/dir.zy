#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core directory functionality.
/---

#FIXME: Add support for directory diffing: e.g.,
#    # Under Linux, this displays all changes between the two passed
#    # directories.
#    >>> command diff --brief --recursive dir1/ dir2/
#
#    # Alternately, if "git" is installed, the following command should be
#    # preferred to the above. Why? Because it supports color, and that is
#    # simply awesome.
#    >>> command git diff dir1/ dir2/
#
#    # Actually, the ideal approach is probably to use "colordiff", a Perl
#    # script wrapping "diff" in the obvious way.
#    >>> command colordiff --brief --recursive dir1/ dir2/
#FIXME: "colordiff" is sufficiently useful that we should *DEFINITELY* make an
#interactive alias shadowing "diff" with "colordiff" under strictly interactive
#terminals.

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_dir(
    :str dirname ?:str error_message='"${dirname}" not a directory.')

Throw an exception with the passed message unless the passed directory exists
and is visible to the current user.
/---
function die_unless_dir() {
    die_unless_args_1_to_2 'Expected one dirname and optional error message.'
    :str dirname="${1}"
    is_dir "${dirname}" :or :die "${2-\"${dirname}\" not a directory.}"
}


:func.doc <<'/---'
:void die_unless_dir_writable(
    :str dirname ?:str error_message='"${dirname}" not a writable directory.')

Throw an exception with the passed message unless the passed directory exists
and is writable by the current user.
/---
function die_unless_dir_writable() {
    die_unless_args_1_to_2 'Expected one dirname and optional error message.'
    :str dirname="${1}"
    is_dir_writable "${dirname}" :or
        :die "${2-\"${dirname}\" not a writable directory.}"
}

# ....................{ EXCEPTIONS ~ if                    }....................
:func.doc <<'/---'
:void die_if_dir(
    :str dirname ?:str error_message='"${dirname}" already a directory.')

Throw an exception with the passed message if the passed directory exists and is
visible to the current user.

== See Also ==

* die_if_files() for potential pitfalls (e.g., race conditions).
/---
function die_if_dir() {
    die_unless_args_1_to_2 'Expected one dirname and optional error message.'
    :str dirname="${1}"
    is_dir "${dirname}" :and :die "${2-\"${dirname}\" already a directory.}"
}


:func.doc <<'/---'
:void die_if_dir_nonempty(
    :str dirname
    ?:str error_message='"${dirname}" already a non-empty directory.')

Throw an exception with the passed message if the passed directory exists and is
non-empty (i.e., unless the passed directory does _not_ exist or exists but is
empty).

== See Also ==

* is_dir_nonempty() for further details.
* die_if_files() for potential pitfalls (e.g., race conditions).
/---
function die_if_dir_nonempty() {
    die_unless_args_1_to_2 'Expected one dirname and optional error message.'
    string dirname="${1}"
    is_dir_nonempty "${dirname}" :and
        :die "${2-\"${dirname}\" already a non-empty directory.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_dir(:str pathname)

Report success only if the passed path is an existing directory.
/---
function is_dir() {
    die_unless_arg 'Expected one pathname.'
    :is -d "${1}" :si
}


:func.doc <<'/---'
[status=:bool] is_dir_writable(:str dirname)

Report success only if the passed directory is writable by the current user.
/---
function is_dir_writable() {
    die_unless_arg 'Expected one dirname.'
    :str dirname="${1}"
    die_unless_dir "${dirname}"

    # Test this directory.
    :is -w "${1}" :si
}

# ....................{ TESTERS ~ emptiness                }....................
:func.doc <<'/---'
[status=:bool] is_dir_empty(:str dirname)

Report success only if the passed directory is empty (i.e., contains no nested
files or subdirectories).
/---
function is_dir_empty() {
    die_unless_arg 'Expected one dirname.'
    :str dirname="${1}"
    die_unless_dir "${dirname}"

    # Dismantled, this is:
    #
    # * "/^F", matching existing directories ("/") containing no files ("^F").
    #
    # Directory emptiness is also efficiently checkable by testing the number of
    # directory links for equality with two, since only empty directories have
    # two such links (i.e., "." and ".."): e.g.,
    #
    #   string dirname="${1}"
    #   is_dir "${dirname}" and (( $(get_dir_subdir_count "${dirname}") == 0 ))
    #
    # While it remains unclear which method is the more efficient, the current
    # method is certainly more straightforward.
    :path.is_^= "${dirname}" '/^F'
}


:func.doc <<'/---'
[status=:bool] is_dir_nonempty(:str dirname)

Report success only if the passed directory is non-empty (i.e., contains at
least one file or subdirectory).
/---
function is_dir_nonempty() {
    # See is_dir_empty() for further discussion.
    die_unless_arg 'Expected one dirname.'
    string dirname="${1}"
    die_unless_dir "${dirname}"
    :path.is_^= "${dirname}" '/F'
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_dir()

Absolute path of the current working directory.
/---
function get_dir() {
    die_if_args
    :stdout.echo "${PWD}"
}


:func.doc <<'/---'
:int get_dir_subdir_count(:str dirname)

Number of subdirectories directly under the passed directory, excluding the
canonical hard links `.` and `..`.
/---
function get_dir_subdir_count() {
    die_unless_arg 'Expected one dirname.'
    :str dirname="${1}"
    die_unless_dir "${dirname}"

    #FIXME: Avoid highly inefficient command substitutions! We have a new
    #set_list_to_path_stats() function encapsulating such functionality
    #*WITHOUT* such substitutions. (Refactor to call such function.)

    # For non-directories, "nlink" counts the number of hard links to such file;
    # for directories, "nlink" counts the number of subdirectories of such
    # directory including omnipresent "." and ".." hard links. Hence,
    # subtracting two from "nlink" counts the number of actual subdirectories.
    # While obscure, such functionality certainly is efficient!
    :stdout.echo $(( $(zstat +nlink -- "${dirname}") - 2 ))
}

# ....................{ GETTERS ~ first                    }....................
:func.doc <<'/---'
:str get_dir_first(+:str dirnames)

First passed directory visible to the current user after resolving symbolic
links if such a directory exists _or_ throw an exception otherwise.
/---
function get_dir_first() {
    die_unless_args 'Expected one or more dirnames.'
    get_dir_first_if_found "${@}" :or :die\
        "$(join_strings_readable: "${@}") not found or not directories."
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_dir_first_if_found(+:str dirnames)

First passed directory visible to the current user exists after resolving
symbolic links if such a directory exists _or_ report failure otherwise.
/---
function get_dir_first_if_found() {
    die_unless_args 'Expected one or more dirnames.'
    get_path_matching_qualifier_first_if_found "${@}" '-/'
}

# ....................{ GETTERS ~ first : writable         }....................
:func.doc <<'/---'
:str get_dir_writable_first(+:str dirnames)

First passed directory writable by the current user after resolving symbolic
links if such a directory exists _or_ throw an exception otherwise.
/---
function get_dir_writable_first() {
    die_unless_args 'Expected one or more dirnames.'
    get_dir_writable_first_if_found "${@}" :or :die\
        "$(join_strings_readable: "${@}") not found or not writable directories."
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_dir_writable_first_if_found(+:str dirnames)

First passed directory writable by the current user after resolving
symbolic links if such a directory exists _or_ report failure otherwise.
/---
function get_dir_writable_first_if_found() {
    die_unless_args 'Expected one or more dirnames.'
    get_path_matching_qualifier_first_if_found\
        "${@}" '-e{[[ -d $REPLY && -w $REPLY ]]}'
}

# ....................{ SETTERS                            }....................
#FIXME: Great function. Now let's generalize this into a lower-level
#:set_list_to_dir_paths_matching_glob_qualifier() function, which this function
#then calls like to so as its implementation:
#
#    :set_list_to_dir_paths_matching_glob_qualifier()\
#        "${list_name__sltddr}" "${dirname__sltddr}" **/* /
#
#Such function should accept an empty dirname without error, in which it
#internally globs "**/*(#q/)" rather than "${dirname__sltddr}/**/*(#q/)". This
#is moderately important, as the former produces shorter and hence more readable
#dirnames when listing paths.
#
#See @{*-core/glob/path/qualifier} for related functionality.

:func.doc <<'/---'
:void :set_list_to_dir_dirs_recursive(:List list_name :str dirname)

Set the passed list (ideally, list set) to the set of all directories
recursively found under the passed directory.

== Current Directory ==

If the passed directory is the empty string (i.e., `""`), this function
interprets such string to mean the current directory. While functionally
equivalent to passing the absolute path of such directory (e.g., ${PWD},
`$(get_dir)`), passing the empty string aesthetically reduces the resulting list
items from absolute paths to only the unique suffixes of such paths relative to
this directory (as exemplified by the above example).

== Examples ==

.:set_list_to_dir_dirs_recursive()
==========================================
[source]
------------------------------------------
>>> :list on_capital
>>> :make_dir_if_not_found /das/kapital/volume/{i,ii,iii}
>>> change_dir /das/kapital
>>> :set_list_to_dir_dirs_recursive on_capital ''
>>> :stdout.echo_newlined "${on_capital[@]}"
volume/i
volume/ii
volume/iii
------------------------------------------
==========================================
/---
function :set_list_to_dir_dirs_recursive() {
    die_unless_args_2 'Expected one list name and one dirname.'
    :str list_name__sltddr="${1}" dirname__sltddr="${2}"
    :List.die_unless "${list_name__sltddr}"

    # If such dirname is the empty string, set such list relative to the current
    # directory. Dismantled, this is:
    #
    # * "**/*", recursively expanding to all paths under such directory.
    # * "(/)", filtering non-directories from such paths.
    if { :str.is_empty "${dirname__sltddr}" } {
        :List.eval "${list_name__sltddr}" '**/*(/)'
    # Else, set such list relative to such directory.
    } else {
        die_unless_dir "${dirname__sltddr}"
        :List.eval "${list_name__sltddr}" '"${dirname__sltddr}"/**/*(/)'
    }
}

# ....................{ CHANGERS                           }....................
#FIXME: Shift to @{path/command/change/dir}.
:func.doc <<'/---'
:void change_dir(:str dirname)

Set the current working directory to the passed directory with the currently
configured `cd`-specific options (e.g., ${ZY_OPTIONS_CD}).

Also:

* If the current shell is interactive, implicitly call builtin chpwd() and all
  functions registered with run_hook_after_dir_set_interactively().
* If the current shell is non-interactive and:
** If list global ${ZY_OPTIONS_CD_IF_NONINTERACTIVE} retains default option
   `-q`, do _not_ implicitly call builtin chpwd() or any functions registered
   with run_hook_after_dir_set_interactively().
** Else, do.

If the current shell is non-interactive, this function thus behaves idempotently
(i.e., without implicit side effects) by default.
/---
function change_dir() {
    die_unless_arg 'Expected one dirname.'
    run_code_with_options_configured 'builtin cd' ZY_OPTIONS_CD -- "${(q)1}"
}


:func.doc <<'/---'
:void change_dir_with_options(*:str cd_options ?:str dirname='-')

Set the current working directory to the passed directory (defaulting to `-`
and hence the prior directory on the directory stack, if called directly from
the command line) with both the currently configured and passed `cd`-specific
options (e.g., ${ZY_OPTIONS_CD}).

== See Also ==

* change_dir().
/---
function change_dir_with_options() {
    if { :context.is_cli_func } {
        is_args or :args.set '-'
    } else {
        die_unless_args_1_or_more\
            'Expected optional options and one dirname'
    }

    # Set such directory.
    run_code_with_options_configured 'builtin cd' ZY_OPTIONS_CD "${(q)@}"
}
