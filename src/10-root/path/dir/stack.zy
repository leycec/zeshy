#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle the *directory stack* (i.e., shell-specific stack of dirnames previously
visited by such shell).
/---

#FIXME: This "vi"-key aware path switcher looks quite nice:
#   http://www.reddit.com/r/linux/comments/yxfwz/introducing_cdd_a_simply_directory_navigation
#FIXME: Turns out zsh already includes a hidden dir stack navigator: hitting
#<Tab> after typing either "cd +" or "cd -" displays an exceptionally readable
#indexed dir stack, without disrupting the current "cd". Man, just brilliant...
#We should probably alias these... *UGH*. We can certainly alias both, but that
#fails to induce the same completions as the original commands. *sigh*
#FIXME: Actually, zsh already includes a user-contributed *REAL* dir stack
#navigator called "cdr". Looks exceedingly impressive. See "man zshcontrib" for
#further details. That's the one we should probably interface with here.
#FIXME: *ACTUALLY*, zsh already provides an even simpler mechanism: new builtin
#syntax for navigating the directory stack. A shell word prefixed by either
#"~+" or "~-" followed by either <Tab> or a non-negative integer provides
#efficient access to the directory stack. Pretty slick.

# ....................{ STORERS                            }....................
#FIXME: Rename to :push_dir(), as that's what it does.
:func.doc <<'/---'
void store_dir(string dirname)

Change the current directory to the passed directory and push such directory to
the top of the directory stack for the current shell without calling chpwd() or
hooks registered by run_hook_after_dir_set_interactively(). This function is
typically called only by noninteractive functions and scripts.

== Comparisons ==

While change_dir() has a similar effect under default `zeshy` settings, there
exist two compelling differences:

. Such settings are configurable and hence unreliable for general-purpose use,
  while this function guarantees the stated behavior.
. change_dir() calls chpwd() and hooks registered by
  run_hook_after_dir_set_interactively(), while this function calls neither.
/---
function store_dir() {
    # Validate sanity.
    die_unless_arg 'Expected one dirname.'
    :str dirname="${1}"

    # Store such directory. However, there exists an edge case. If such
    # directory is the current directory, calling pushd() with such
    # directory is a noop! Such behavior has arguable benefits for interactive
    # use but basically fails for non-interactive use (e.g., functions
    # subsequently calling restore_dir()). Detect such case and force such
    # directory to be prepended to the directory stack.
    if :is "${dirname}" == "${PWD}" :si {
        :List.items.prepend dirstack "${PWD}"
    # Else, such directory is *NOT* the current directory, suggesting pushd()
    # will behave as expected. Dismantled, this is:
    #
    # * "-q", guaranteeing chwpd() and hook functions to *NOT* be called.
    } else {
        pushd -q -- "${dirname}"
    }
}

#FIXME: Add example!
:func.doc <<'/---'
void :store_dir_if_dir_or_dir_parent(string pathname)

Change the current directory to the passed path if such path is a directory or
to the parent directory containing such path otherwise. Push such directory to
the top of the directory stack. See :store_dir() for further details.
/---
function :store_dir_if_dir_or_dir_parent() {
    # Validate sanity.
    die_unless_arg 'Expected one dirname.'
    :str dirname="${1}"

    # If such path is a file, reduce such path to its parent directory.
    if { :is_file "${dirname}" } {
        :remove_path_basename dirname
    }

    # Store such directory.
    store_dir "${dirname}"
}

# ....................{ RESTORERS                          }....................
#FIXME: Rename to :pop_dir(), as that's what it does.
:func.doc <<'/---'
void restore_dir()

Set the current working directory to the directory at the top of the directory
stack for the current shell and pop such directory from such stack, without
calling chpwd() or hooks registered by run_hook_after_dir_set_interactively().
This function is typically called only by noninteractive functions and scripts.
See store_dir() for further details.
/---
function restore_dir() {
    # Validate sanity.
    die_if_args
    die_unless_list_nonempty dirstack 'Directory stack empty.'

    # Restore the previous working directory. Dismantled, this is:
    #
    # * "-q", guaranteeing chwpd() and hook functions to *NOT* be called.
    popd -q
}

# ....................{ ROTATERS                           }....................
#FIXME: Add examples.
:func.doc <<'/---'
void rotate_dir_stack_backward(int dir_stack_offset = 1)

Rotate the directory stack for the current shell to the directory indexed by the
passed offset from the top of such stack (defaulting to 1 and hence the prior
directory, if called directly from the command line). Such offset must be an
integer in `[1, $(get_list_size dirstack))` (i.e., between 1 and 1 less than the
number of directories on such stack, thus excluding the current directory).
/---
function rotate_dir_stack_backward() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize changes with rotate_dir_stack_foreward().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate sanity.
    if { :context.is_cli_func } {
        die_unless_args_0_to_1 'Expected optional positive offset.'
        is_arg :or :args.set 1
    } else {
        die_unless_arg 'Expected one positive offset.'
    }
    :str pushd_offset="${1}"
    die_unless_list_nonempty dirstack 'Directory stack empty.'
    die_unless_list_index    dirstack $(( pushd_offset + 1 ))\
        "Offset ${pushd_offset} not an integer in [1, $(get_list_size dirstack)]."

    # Rotate backward by such offset.
    pushd -q +${pushd_offset}
}

#FIXME: Add example!
:func.doc <<'/---'
void rotate_dir_stack_forward(int dir_stack_offset = 1)

Rotate the directory stack for the current shell to the directory indexed by the
passed offset from the bottom of such stack (defaulting to 1 and hence the last
directory, if called directly from the command line). Such offset must be an
integer in `[1, $(get_list_size dirstack))` (i.e., between 1 and 1 less than the
number of directories on such stack, thus excluding the current directory).

If the previous directory change was effected by a call to
rotate_current_dir_backward(), calling this function with the same offset undoes
such directory change.
/---
function rotate_dir_stack_forward() {
    # Validate sanity.
    if { :context.is_cli_func } {
        die_unless_args_0_to_1 'Expected optional positive offset.'
        is_arg :or :args.set 1
    } else {
        die_unless_arg 'Expected one positive offset.'
    }
    :str pushd_offset="${1}"
    die_unless_list_nonempty dirstack 'Directory stack empty.'
    die_unless_list_index    dirstack $(( pushd_offset + 1 ))\
        "Offset ${pushd_offset} not an integer in [1, $(get_list_size dirstack)]."

    # Rotate foreward by such offset.
    pushd -q -$(( ${pushd_offset} - 1 ))
}

#FIXME: Document this:
#
#pushd() treats "+1" to be the previous directory and "-0" to
#be the next directory in such stack, as opposed to the actual underlying array,
#in which "2" is the index of the previous directory and "-1" the index of the
#next. The caller *MUST* pass an index in the latter format (i.e., array index),
#to maintain sanity. Hence, this function must convert from array indices to
#pushd() indices. Happily, this is mostly simple; if:
#
#* The passed array index is 0, throw an exception. (0 is not a valid index.)
#* The passed array index is 1, return immediately. (No rotation is required.)
#* The passed array index is positive, subtract such index by 1.
#* Else, the passed array index is negative; add such index by 1.

:func.doc <<'/---'
void rotate_dir_stack_to_index(int dir_stack_index)

Set the current directory to the directory 

of the passed offset from the top of the
directory stack (defaulting to 1 and hence the prior directory).
/---
function rotate_dir_stack_to_index() {
    # Validate sanity.
    if { :context.is_cli_func } {
        die_unless_args_0_to_1 'Expected optional directory stack index.'
        is_arg_1 :or :args.set 1
    } else {
        die_unless_arg 'Expected one directory stack index.'
    }
    :str dir_stack_index="${1}" pushd_offset
    die_unless_list_nonempty dirstack 'Directory stack empty.'
    die_unless_list_index    dirstack "${index}"

    # Convert such index to a pushd()-specific offset. Since prior validation
    # guarantees such index to *NOT* be 0, such offset necessarily exists.
    #
    # If such index is 1, return silently. Since the first element of the
    # directory stack is always the current directory, no rotation is required.
    if (( dir_stack_index == 1 )) {
        :success.report
    # Else, such index is neither 0 or 1. If such index is positive, subtract
    # such index by 1 and prefix the result by "+".
    } elif (( dir_stack_index > 1 )) {
        pushd_offset="+$(( dir_stack_index - 1 ))"
    # Else, such index is negative. If such index is -1, set such offset to
    # "-0". (Yes, the negative sign is requisite.)
    } elif (( dir_stack_index == -1 )) {
        pushd_offset='-0'
    # Else, such index is less than -1. Increment such index by 1. Since the
    # result is already guaranteed to be negative, do *NOT* prefix such result
    # by an additional "-".
    } else {
        pushd_offset=$(( dir_stack_index + 1 ))
    }
    print "dir_stack_index: ${dir_stack_index}; pushd_offset: ${pushd_offset}"

    # Rotate such stack.
    pushd -q ${pushd_offset}
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
string print_dir_stack()

Print a human-readable synopsis of the directory stack for the current shell.
/---
function print_dir_stack() {
    # Validate sanity.
    die_if_args
    :str dirs_output

    #FIXME: Horribly shoddy. We *REALLY* want to print a proper table. We have
    #such functionality planned, but as yet unimplemented we're afraid.

    # Page such output.
    {
        # Print a heading.
        :stdout.echo '   index     dir'
        output_line

        # Capture standard output from "dirs". Oddly, this output does not coincide
        # with the actual contents of the ${dirstack} list: specifically, "dirs"
        # prepends output with the current directory regardless of whether the
        # first directory in the directory stack is already this directory. To
        # amend this:
        #
        # * If the directory stack is empty, print nothing.
        # * Else, print all lines following the first.
        if { is_list_empty dirstack } { :success.report }

        # Print such stack, highlighting the first directory (i.e., the current
        # working directory).
        number_string_lines_highlighting\
            "$(get_string_lines "$(builtin dirs -p)" 2 -1)" 1
    } | page_stdin
}

# ....................{ CLEARERS                           }....................
:func.doc <<'/---'
:void clear_dir_stack()

Clear the directory stack.
/---
function clear_dir_stack() {
    die_if_args
    builtin dirs -c
}

# ....................{ SERIALIZERS                        }....................
# On zeshy startup, initialize the directory stack from the corresponding file.
# After changing the current working directory and hence invoking shell option
# "auto_pushd", write the now-edited directory stack back to such file.
:hook.startup.add                    :dir_stack.file.read
run_hook_after_dir_set_interactively :dir_stack.file.write

:func_ ':void :dir_stack.file.read()' :func{
    # If this script exists, source this script hopefully defining ${dirstack}.
    if {    :is_script "${ZY_USER_DIR_STACK_FILE}" } {
        :source_script "${ZY_USER_DIR_STACK_FILE}"
    }
}:func <<'/---'
Replace the directory stack with the contents of the directory stack file if
such file exists or return silently otherwise.

See :dir_stack.file.write() for further details.
/---

:func_ ':void :dir_stack.file.write()' :func{
    :write_script_with_var_binding "${ZY_USER_DIR_STACK_FILE}" dirstack
}:func <<'/---'
Overwrite the contents of the directory stack file with the directory stack.

This file will be a shell script sourceable by calling either the high-level
:dir_stack.file.read() or lower-level :source_script() function.
/---
