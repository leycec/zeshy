#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Symbolic link setters* (i.e., functions setting passed variables to symbolic
link-related metadata).
/---

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :set_string_to_symlink_target_first(:str str_name :str symlink_filename)

Set the passed string variable to the passed symbolic link's *immediate target*
(i.e., absolute or relative path to which this link directly links).

This function does _not_ resolve intermediate symbolic links or guarantee this
target to exist, be an absolute path, or _not_ be a symbolic link. For such
functionality, consider calling :set_string_to_path_canonical() instead.
/---
function :set_string_to_symlink_target_first() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and filename.'
    :str\
        str_name__sststf="${1}"\
        filename_src__sststf="${2}"\
        filename_trg__sststf
    :list filename_stats__sststf
    die_unless_symlink "${filename_src__sststf}"

    # List of canonical statistics for this link. This logic is somewhat
    # circuitous but remains both the most efficient and reliable. A common
    # alternative is to run external command "readlink" if installed as follows:
    #
    #     :Str.set "${str_name__sststf}"\
    #         "$(command readlink -- "${filename__sststf}")"
    :set_list_to_path_stats filename_stats__sststf "${filename_src__sststf}"
    # Immediate target of this link.
    filename_trg__sststf="${filename_stats__sststf[${ZY_STAT_INDEX_SYMLINK_TARGET}]}"

    # If this target no longer exists (e.g., as is the common case when
    # resolving the canonical path for standard input received from a here-
    # document or -string), this target is suffixed by the human-readable label
    # " (deleted)". Convert this target to the corresponding path by removing
    # this label.
    remove_string_suffix filename_trg__sststf ' (deleted)'

    # Set this string to this symbolic link.
    :Str.set "${str_name__sststf}" "${filename_trg__sststf}"
}


#FIXME: The current implementation is extreme overkill in the common case that
#the transitive target exists. Why? Because in that case, calling 
#:set_string_to_path_canonical() would suffice. That said, the current
#implementation is still essential as a fallback in the event that the
#transitive target does *NOT* exist. Ergo, the following optimizations to this
#function's implementation should be made:
#
#    # This is only pseudo-code. Nonetheless, it should be fairly close.
#    function :set_string_to_symlink_target_last() {
#        :str\
#            str_name__sststl="${1}"\
#            filename_src__sststl="${2}"
#        if { :path.is "${filename_src__sststl}" } {
#            :set_string_to_path_canonical\
#                "${str_name__sststl}" "${filename_src__sststl}"
#        } else {
#            # Perform the existing iterative logic for this function here. 
#        }
#    }

:func.doc <<'/---'
:void :set_string_to_symlink_target_last(:str str_name :str symlink_filename)

Set the passed string variable to the passed symbolic link's *transitive
target* (i.e., absolute or relative path of a non-symbolic link to which this
link transitively links after iteratively resolving all intermediate symbolic
links to which this link links).

If this link's immediate target is _not_ a symbolic link, this link's transitive
and immediate targets are necessarily identical; else, these targets differ.
This function does _not_ guarantee this transitive target to exist, be an
absolute path, or _not_ be a symbolic link.  For such functionality, consider
calling :set_string_to_path_canonical() instead.
/---
function :set_string_to_symlink_target_last() {
    die_unless_args_2 'Expected one string name and filename.'
    :str\
        str_name__sststl="${1}"\
        filename_src__sststl="${2}"\
        filename_trg__sststl
    die_unless_symlink "${filename_src__sststl}"

    # Technically, this function is trivially implementable when the GNU
    # coreutils-specific version of "readlink" is pathable:
    #
    #    :Str.set\
    #        "${str_name__sststl}"\
    #        "$(readlink -f -- "${filename__sststl}")"
    #
    # Since such implementation is lamentably inefficient (due to unavoidable
    # use of subshell capturing) *AND* conditionally dependent on the
    # pathability of such command (implying the following manual algorithm
    # would still need to be implemented as a fallback), we unconditionally
    # implement this function via a pure-zsh algorithm iteratively resolving
    # all intermediate symbolic links in the chain of such links originating
    # from such source symbolic link until either obtaining a non-symbolic link
    # (in which case the passed link is unbroken) *OR* a previously resolved
    # symbolic link (in which case the passed link is broken).

    # Map from all symbolic links resolved during such iteration to the empty
    # string. Such map enables such iteration to detect and halt on cycles in
    # the implied link graph (i.e., symbolic links transitively linking to
    # themselves), preventing an otherwise noxious infinite loop.
    :map filenames_resolved__sststl

    # Continue resolving links until acquiring the desired transitive target.
    while { true } {
        # Resolve the current source link to its target.
        :set_string_to_symlink_target_first\
            filename_trg__sststl "${filename_src__sststl}"

        # If this target either is *NOT* a link or is but has already been
        # resolved, cease iteration. In either case, this target is the
        # requested transitive target.
        if {
            :not is_symlink "${filename_trg__sststl}" :or
                (( ${+filenames_resolved__sststl[${filename_trg__sststl}]} ))
        } {
            break
        }

        # Else, this target is an unresolved symbolic link. In preparation for
        # the next iteration:
        #
        # * Record this source link as having been resolved.
        # * Set the current source link to this target.
        filenames_resolved__sststl[${filename_src__sststl}]=
        filename_src__sststl="${filename_trg__sststl}"
    }

    # Set this string to this transitive target.
    :Str.set "${str_name__sststl}" "${filename_trg__sststl}"
}

#FIXME: In lieu of unit tests...
# function taro() {
#     :str pathname='/dev/stdin' pathname_first pathname_last
#     {
#         :set_string_to_symlink_target_first pathname_first "${pathname}"
#         :set_string_to_symlink_target_last  pathname_last  "${pathname}"
#         :stdout.echo "target (first): ${pathname_first}${ZY_ASCII_NEWLINE}target (last): ${pathname_last}"
#     } <<<yum
# }
