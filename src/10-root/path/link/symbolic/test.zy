#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Symbolic link testers* (i.e., functions testing symbolic links).
/---

# For brevity, prefer "symlink" to "link_symbolic" nomenclature. Define function
# synonyms with the latter nomenclature for those functions overlapping with
# existing hard link functions (e.g., die_unless_link_hard(), :is_link_hard()).

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void {die_unless_symlink,die_unless_link_symbolic}(
    string pathname,
    string error_message = "Path \"${pathname}\" not a symbolic link.")

Throw an exception with the passed message unless the passed symbolic link
exists. See :is_link_symbolic() for further details.
/---
function die_unless_symlink die_unless_link_symbolic() {
    die_unless_args_1_to_2\
        'Expected one pathname and optional error message.'
    :str pathname="${1}"
    is_symlink "${pathname}" :or
        :die "${2-Path \"${pathname}\" not a symbolic link.}"
}

:func.doc <<'/---'
void :die_unless_path_unbroken(
    string pathname,
    string error_message =
        "Path \"${pathname}\" not found or is a broken symbolic link.")

Throw an exception with the passed message unless the passed path is unbroken.
See :is_path_unbroken() for further details.
/---
function :die_unless_path_unbroken() {
    die_unless_args_1_to_2\
        'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :is_path_unbroken "${pathname}" :or
        :die "${2-Path \"${pathname}\" not found or is a broken symbolic link.}"
}


# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] {is_symlink,:is_link_symbolic}(string pathname)

Report success if the passed path is an existing symbolic link.
/---
function is_symlink :is_link_symbolic() {
    die_unless_arg 'Expected one pathname.'
    :is -L "${1}" :si
}

:func.doc <<'/---'
[status: bool] :is_symlink_broken(string symlink_filename)

Report success if the passed symbolic link is *broken* (i.e., if such link's
final target after resolving all intermediate symbolic links either no longer
exists or induces a cycle in the implied link graph). If such path is _not_ an
existing symbolic link, an exception is thrown.
/---
function :is_symlink_broken() {
    # Validate sanity.
    die_unless_arg 'Expected one symbolic link.'
    :str filename="${1}"
    die_unless_symlink "${filename}"

    # Test such path. Dismantled, this is:
    #
    # * "-", transitively resolving the passed symbolic link to its final
    #   destination. If this is merely another symbolic link, the passed
    #   symbolic link is broken; else, this is a non-symbolic link (i.e.,
    #   physical file) and the passed symbolic link is unbroken.
    # * "@", excluding non-symbolic links. When combined with the prior
    #   "-", this filters unbroken symbolic links to the empty string. (zsh
    #   first resolves the passed symbolic link to its destination and then
    #   tests whether such destination is itself a symbolic link.)
    #
    # See http://www.zsh.org/mla/users/2005/msg00394.html for Peter Stephenson's
    # clever inspiration.
    :path.is_^= "${filename}" '-@'
}

:func.doc <<'/---'
[status: bool] :is_symlink_cyclic(string symlink_filename)

Report success if the passed symbolic link is *cyclic* (i.e., if such link's
transitive target after resolving all intermediate symbolic links induces a
cycle in the implied link graph) and hence broken. If such path is _not_ an
existing symbolic link, an exception is thrown.

== Link Graph ==

For any given symbolic link, the corresponding *link graph* is a directed
connected graph abstractly representing the chain of symbolic links originating
from such source symbolic link. The nodes of such graph correspond to unique
pathnames in such chain; the directed edges of such graph correspond to unique
symbolic link connections between such paths.

If such symbolic link is acyclic, such graph contains a *leaf node* (i.e., node
with no outgoing edges) signifying such link's transitive target. All other
nodes signify symbolic links.

If such symbolic link is cyclic, however, such graph contains no leaf node. All
nodes signify symbolic links and hence have outgoing edges, in which case such
graph contains a cycle.
/---
function :is_symlink_cyclic() {
    # Validate sanity.
    die_unless_arg 'Expected one symbolic link.'
    :str filename="${1}"

    # While there doubtless exist numerous means of detecting link cyclicity,
    # the most efficient in a zsh context is to recall that
    # :is_symlink_broken() reports success either if such symbolic link's
    # transitive target does not exist or does but induces a cycle. In such
    # case, if such target does not exist, then by process of elimination such
    # link must necessarily be cyclic.
    :is_symlink_broken "${filename_src}" :and {
        :str filename_trg
        :set_string_to_symlink_target_last filename_trg "${filename_src}"
        :is_file "${filename_trg}"
    }
}

# ....................{ TESTERS ~ path                     }....................
:func.doc <<'/---'
[status: bool] :is_path_unbroken(string pathname)

Report success if the passed path is *unbroken* (i.e., exists and is _not_ a
broken symbolic link). See ::is_symlink_broken() for further details.
/---
function :is_path_unbroken() {
    # Validate sanity.
    die_unless_arg 'Expected one pathname.'
    :str pathname="${1}"

    # Test such path.
    :path.is "${pathname}" :and {
        is_symlink "${pathname}" :and
            :not :is_symlink_broken "${pathname}" :or
            :success.report
    }
}
