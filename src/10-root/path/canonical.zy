#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Path canonicalizers* (i.e., functions converting paths from non-canonical to
canonical form).
/---

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :set_string_to_path_canonical(:Str str_name :str pathname)

Set the passed string variable to the canonical form of the passed path.

See :path.canonicalize() for further details.
/---
function :set_string_to_path_canonical() {
    die_unless_args_2 'Expected one string name and one pathname.'
    :str str_name__sstpc="${1}" pathname__sstpc="${2}"

    # History expansion modifier "(:A)" (applied below to canonicalize this
    # path) silently fails to report failure and hence erroneously expands to
    # the same path when this path either:
    #
    # * Does *NOT* exist.
    # * Does exist but is a broken symbolic link.
    #
    # To avoid this erroneous behavior, throw an exception in either case.
    :die_unless_path_unbroken "${pathname__sstpc}"

    # Set this string to this path in canonical form.
    :Str.set "${str_name__sstpc}" "${pathname__sstpc}"(:A)
}

# ....................{ CANONICALIZERS                     }....................
:func.doc <<'/---'
:void :path.canonicalize(:Str str_name)

Convert the value (an existing path) of the passed string variable to
*canonical form* (i.e., absolute path, no component of which is a pseudo-
directory or symbolic link).

If this value is _not_ an existing path, an exception is thrown: e.g.,

.:path.canonicalize()
==========================================
[source]
------------------------------------------
>>> get_pid
5993
>>> :str pathname='/proc/mounts'
>>> :path.canonicalize pathname
>>> :stdout.echo "${pathname}"
/proc/5993/mounts
>>> change_dir /proc/self/cwd/root
>>> pathname='./.././.././../'
>>> :path.canonicalize "${pathname}"
>>> :stdout.echo "${pathname}"
/
------------------------------------------
==========================================

== Implementation ==

This canonicalization effectively implements the following algorithm:

* If this path is *relative* (i.e., not prefixed by `/`), this path is
  converted to an *absolute path* (i.e., prefixed by `/`).
* All symbolic links in this path are recursively expanded to their targets
  until all components of this path are *physical* (i.e., non-symbolic links).
* All *pseudo-directories* (i.e., `./`, `../`) in this path are non-recursively
  expanded to their corresponding directory names until all components of this
  path are unique pathnames.

== Equality ==

Two canonicalized paths are equal _if and only if_ these paths refer to the same
file or directory (e.g., canonical paths `/etc/passwd` and `/etc/passwd`, equal
and hence referring to the same file), a constraint inapplicable to
non-canonicalized paths (e.g., non-canonical paths `/etc/./` and
`/etc/../etc/./`, unequal but still referring to the same directory).
/---
function :path.canonicalize() {
    die_unless_arg 'Expected one string name.'
    :str string_name__cp="${1}"
    :Str.die_unless "${string_name__cp}"

    # Canonicalize such path.
    :set_string_to_path_canonical "${string_name__cp}" "${(P)string_name__cp}"
}
