#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *path canonicalizers* (i.e., functions converting paths from non-
canonical to canonical form).
/---

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void :set_string_to_path_canonical(string string_name, string pathname)

Set the passed string variable to the canonical form of the passed path. See
:canonicalize_path() for further details.
/---
function :set_string_to_path_canonical() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one pathname.'
    :string string_name__sstpc="${1}" pathname__sstpc="${2}"

    # History expansion modifier "(:A)" (applied below to canonicalize such
    # path) silently fails to report failure and hence erroneously expands to
    # the same path when such path either:
    #
    # * Does *NOT* exist.
    # * Does exist but is a broken symbolic link.
    #
    # To avoid such erroneous behavior, throw an exception in either case.
    :die_unless_path_unbroken "${pathname__sstpc}"

    # Set such string to such path in canonical form.
    :string.set "${string_name__sstpc}" "${pathname__sstpc}"(:A)
}

# ....................{ CANONICALIZERS                     }....................
declare_function_with_stdin <<'/---'
void :canonicalize_path(string string_name)

Convert the value (an existing path) of the passed string variable to
*canonical form* (i.e., absolute path, no component of which is a pseudo-
directory or symbolic link). If such value is _not_ an existing path, an
exception is thrown: e.g.,

.:canonicalize_path()
==========================================
[source]
------------------------------------------
>>> get_pid
5993
>>> :string pathname='/proc/mounts'
>>> :canonicalize_path pathname
>>> :string.output "${pathname}"
/proc/5993/mounts
>>> change_dir /proc/self/cwd/root
>>> pathname='./.././.././../'
>>> :canonicalize_path "${pathname}"
>>> :string.output "${pathname}"
/
------------------------------------------
==========================================

== Implementation ==

Such canonicalization effectively implements the following algorithm:

* If such path is *relative* (i.e., not prefixed by `/`), such path is
  converted to an *absolute path* (i.e., prefixed by `/`).
* All symbolic links in such path are recursively expanded to their targets
  until all components of such path are *physical* (i.e., non-symbolic links).
* All *pseudo-directories* (i.e., `./`, `../`) in such path are non-recursively
  expanded to their corresponding directory names until all components of such
  path are unique pathnames.

== Equality ==

Two canonicalized paths are equal _if and only if_ such paths refer to the same
file or directory (e.g., canonical paths `/etc/passwd` and `/etc/passwd`, equal
and hence referring to the same file), a constraint inapplicable to non-
canonicalized paths (e.g., non-canonical paths `/etc/./` and `/etc/../etc/./`,
unequal but still referring to the same directory).
/---
function :canonicalize_path() {
    # Validate sanity.
    die_unless_arg 'Expected one string name.'
    :string string_name__cp="${1}"
    :var.die_unless_type_string "${string_name__cp}"

    # Canonicalize such path.
    :set_string_to_path_canonical "${string_name__cp}" "${(P)string_name__cp}"
}

# --------------------( WASTELANDS                         )--------------------
    # If the canonical symbolic link for standard input is broken, 

    #FUXME: Insufficient. If such path is a broken symbolic link, "(:A)"
    #bizarrely returns the *EXACT SAME PATH* without reporting failure. This
    #means we need to explicitly call :is_symlink_broken() before attempting
    #canonicalization and, if so, throw an exception. Perhaps we want a new
    #exception handler :die_unless_path_unbroken() reporting success if such
    #path exists and is *NOT* a broken symbolic link.


    # guarantee such path exists prior to applying such modifier.
    # Since such modifier also fails to report failure when such path is a
    # broken symbolic link, 

    # :string string_name__cp="${1}" pathname__cp
    # :var.die_unless_type_string "${string_name__cp}"

    # # Path to be canonicalized. Since the history expansion modifier "(:A)"
    # # used below to perform such canonicalization fails to report failure when
    # # such path is *NOT* found, guarantee such path exists prior to applying
    # # such modifier.
    # pathname__cp="${(P)string_name__cp}"
    # die_unless_path "${pathname__cp}"

    # # Canonicalize such path with such modifier.
    # :string.set "${string_name__cp}" "${pathname__cp}"(:A)

    # Set such string to such path in canonical form. While we could instead
    # set such string to such path and then canonicalize such string with
    # :canonicalize_path(), doing so is both more cumbersome and inefficient
    # than the current approach. See such function for further details.

#FUXME: Whoops! Turns out :canonicalize_path() is subtly dangerous. Here's why:
#if the passed path is a shell-specific path (e.g., "/proc/mounts"), then
#calling :canonicalize_path() from a command substitution success *BUT* basically
#fails since the returned path ceases to exist when such substitution completes.
#Hence, we basically need to replace every call to :canonicalize_path() to
#:set_string_to_path_canonicalized() *AND* document why in this documentation.
#It's important, to avoid bugs both here and elsewhere.
#FUXME: Indeed, given the subtle bugs inherent to :canonicalize_path(), excise
#such function completely and document why such function no longer exists.

    # die_unless_path "${pathname__sstpc}"

    # # Set such string.
    # :string.set "${string_name__sstpc}" "${pathname__sstpc}"(:A)

    # Canonicalize such path. Call :string.output() rather than return_string().
    # While the two are typically synonymous when called as the final statement
    # of a function body, return_string() is implemented to accept herestring-
    # style standard input. Since zsh fails to perform history expansion on such
    # input and since "(:A)" is a history expansion modifier, only
    # :string.output() suffices. Yes, this is laboriously inscrutable and
    # insufferably laborious.
    # :string.output "${pathname}"(:A)

    # Canonicalize such path. Call :string.output() rather than return_string().
    # While the two are typically synonymous when called as the final statement
    # of a function body, return_string() is implemented to accept herestring-
    # style standard input. Since zsh fails to perform history expansion on such
    # input and since "(:A)" is a history expansion modifier, only
    # :string.output() suffices. Yes, this is laboriously inscrutable and
    # insufferably laborious.

# == Caveats ==
# 
# This function is typically called as a getter function from command substitution
# and hence subshell of the current shell. While typically safe, such substitution
# is _inherently_ unsafe in the general case. Specifically, if the passed path is
# a symbolic link managed by the underlying operating system in a shell-specific
# manner (i.e., created on shell forks and deleted on shell termination), then the
# canonical form of such path returned by calling this function from a command
# substitution will _not_ exist in the caller's shell -- even though such symbolic
# link _does_ exist in the caller's shell. In such case, consider calling
# :set_string_to_path_canonical() instead.
# 
# Consider `/proc/mounts`, a shell-specific path in the `/proc` pseudo-filesystem
# managed by the Linux kernel. Such path symbolically links to
# `/proc/self/mounts`, itself linking to `/proc/$(get_pid)/mounts`. While
# `/proc/mounts` exists in all shells and subshells, its temporary target
# `/proc/$(get_pid)/mounts` exists only in the current shell. Hence, call
# :set_string_to_path_canonical() rather than this function to canonicalize
# `/proc/mounts`: e.g.,
# 
# .:canonicalize_path() vs :set_string_to_path_canonical()
# ==========================================
# [source]
# ------------------------------------------
# >>> string filename
# 
# >>> get_pid
# 6797
# >>> :set_string_to_path_canonical filename /proc/mounts
# >>> :string.output "${filename}"
# /proc/6797/mounts
# >>> :is_file "${filename}" or :string.output "\"${filename}\" not found"
# 
# >>> filename="$(:canonicalize_path /proc/mounts; run_code_to_stderr get_pid)"
# 59117
# >>> :string.output "${filename}"
# /proc/59117/mounts
# >>> :is_file "${filename}" or :string.output "\"${filename}\" not found"
# "/proc/59117/mounts" not found
# ------------------------------------------
# ==========================================

#See :canonicalize_path() for further details.

#FUXME: Whoops! Turns out :canonicalize_path() is subtly dangerous. Here's why:
#if the passed path is a shell-specific path (e.g., "/proc/mounts"), then
#calling :canonicalize_path() from a command substitution success *BUT* basically
#fails since the returned path ceases to exist when such substitution completes.
#Hence, we basically need to replace every call to :canonicalize_path() to
#:set_string_to_path_canonicalized() *AND* document why in this documentation.
#It's important, to avoid bugs both here and elsewhere.

#Consider calling :set_string_to_path_canonical() rather than this function when
#canonicalizing general-purpose paths possibly referring to shell-specific
#symbolic links.
#
#The passed path may symbolically
#refer to a temporary shell-specific path deleted after this function returns and
#such subshell terminates.
#
#and hence no longer exist after this function returns  subshell terminates
#
#Since paths may 
#
#is _inherently_ unsafe in the general case, in which 
#
#. Specifically, paths specific 
#
#*shell-specific
#symbolic links* (i.e., symbolic links  
#
#consider a symbolic
#link 
#silently fails (by successfully returning a nonextant path) if : e.g.,

# Under most Linux systems, "/proc/mounts" is a symbolic link to
# "/proc/self/mounts" is a symbolic link to "/proc/$(get_pid)/mounts". Hence,
# attempting to resolve 
