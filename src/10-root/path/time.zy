#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Path time functionality* (i.e., functions reading and writing access, change,
and modification path times).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_path_time_format(
    char format,
    string error_message =
        "stat() time format \"${format}\" invalid (i.e., neither \"x\", \"y\", or \"z\").")

Throw an exception with the passed message unless the passed character is a
valid path time format. See is_path_time_format() for further details.
/---
function die_unless_path_time_format() {
    die_unless_args_1_to_2 'Expected one format and optional error message.'
    :str format="${1}"
    is_path_time_format "${format}" :or
        :die "${2-stat() time format \"${format}\" invalid (i.e., neither \"x\", \"y\", or \"z\").}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] is_path_time_format(char format)

Report success if the passed character is either `x`, `y`, or `z`, corresponding
to the three `stat`-specific character formats accepted by
get_path_time_for_format().
/---
function is_path_time_format() {
    die_unless_arg 'Expected one path time format.'
    :is "${1}" == [xyz] :si
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor into :set_int_to_path_time_in_format().
:func.doc <<'/---'
float get_path_time_for_format(string pathname, char format)

Get the time corresponding to the passed format character for the passed path.
Such time is in high-resolution fractional seconds since the Unix epoch,
typically accurate to the nanosecond. Such character must be one of the
following `stat`-specific format specifiers:

* `x`, getting such path's access time.
* `y`, getting such path's modification time.
* `z`, getting such path's change time.

See get_time() and `man stat` for further details: e.g.,

.get_path_time_for_format()
==========================================
[source]
------------------------------------------
>>> :change_path_mtime           /the/sound/of/perseverance 134664317.620900507
>>> get_path_time_for_format /the/sound/of/perseverance 'y'
134664317.620900507
------------------------------------------
==========================================
/---
#FIXME: The BSD version of "stat" actually implicitly supports floating point
#times, which is quite a bit better than the situation on Linux. (Nice reversal,
#BSD!) See
#https://developer.apple.com/library/mac/#documentation/Darwin/Reference/Manpages/man1/stat.1.html
#
#I really can't be bothered to implement support at the moment, but there it is.
#Hopefully, by the time this becomes a concern, zsh revises zstat() to support
#high resolution times. :)

# Sadly, zsh's zstat() fails to support retrieval of high-resolution file times,
# even under systems recording such times (e.g., post-2.6 Linux kernels). Until
# such support is added, retrieve such times by cobbling together the expected
# fractional Unix time from the output of the GNU-specific "stat"
# implementation: e.g.,
#
#     # Print the current modification time for standard output in both human-
#     # and machine-readable format, delimited by "~~~". Note that the former
#     # provides the desired fractional portion and the latter the desired
#     # integer portion. Grafting the two together yields the expected time:
#     # 1369265941.436503138.
#     >>> stat --dereference --printf '%y~~~%Y' /dev/fd/1
#     2013-05-22 19:39:01.436503138 -0400~~~1369265941
#
# If the current "stat" implementation is non-GNU, retrieve the typical low-
# resolution file times. (Technically, we could add support for the BSD-specific
# "stat" implementation, but it hardly seems worth it. zsh's zstat() *SHOULD*
# add support for higher resolution by the time this becomes a larger concern.)

#FIXME: This can be made quite a bit more efficient. Specifically, perform the
#test of whether or not "stat" outputs in the desired format *HERE* in the outer
#conditional. Test "/dev/stdout" if such path exists, which is pretty much
#guaranteed when "stat" is a GNU pathable.
if { is_pathable_gnu stat } {
    function get_path_time_for_format() {
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Synchronize changes with versions below.
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        # Validate sanity.
        die_unless_args_2 'Expected one pathname and one format.'
        :str pathname="${1}" format="${2}"
        die_unless_path "${pathname}"
        die_unless_path_time_format "${format}"

        # If "stat" formats such time in the customary English format
        # "AA:BB:CC.DD", capture the "."-prefixed substring of digits as the
        # desired number of nanoseconds. Dismantled, this is:
        #
        # * "%${format}", printing such time in locale-dependent format.
        # * "%${(U)format}", printing such time in seconds since the Unix epoch.
        # * "(#b)", capturing all subsequent match groups.
        # * "('.'[[:digit:]]##)", capturing nanoseconds to ${match[1]}.
        # * "([[:digit:]]##)", capturing seconds to ${match[2]}.
        if :is "$(command stat\
            --dereference\
            --printf "%${format}~~~%${(U)format}"\
            -- "${pathname}")" ==\
            *(<-><->':')(<-><->':')(<-><->)(#b)('.'<->##)*'~~~'(<->##) :si {
            :str.return "${match[2]}${match[1]}"
        # Else, "stat" formats such time in another locale-dependent format.
        # Devolve to returning only the desired number of seconds.
        } else {
            command stat --dereference --printf "%${(U)format}" -- "${pathname}"
        }
    }
} else {
    function get_path_time_for_format() {
        # Validate sanity.
        die_unless_args_2 'Expected one pathname and one format.'
        :str pathname="${1}" format="${2}"
        die_unless_path "${pathname}"
        die_unless_path_time_format "${format}"

        case "${format}" {
        x) zstat +atime -- "${pathname}";;
        y) zstat +mtime -- "${pathname}";;
        z) zstat +ctime -- "${pathname}";;
        # The prior call to die_unless_path_time_format() should handle this.
        *) :die
        }
    }
}

# ....................{ GETTERS ~ mtime                    }....................
#FIXME: Refactor into setters.
#FIXME: In compliance with @{path/stat}, adopt the following nomenclature for
#the following future functions:
#
#* {get_path_atime:, get_path_time_content_read:}
#* {get_path_ctime:, get_path_time_inode_changed:}
#FIXME: For examples, let's choose paths guaranteed to exist on all systems.
#Save the elegiac curiosity for string-based examples, eh?

:func.doc <<'/---'
float {:path.mtime, get_path_time_content_changed:}(string pathname)

Get the passed path's *modification time* (i.e., number of high-resolution
fractional seconds since the Unix epoch at which such path's content was last
modified). If such path is a directory, this is the time at which a file or
subdirectory was last created, deleted, or renamed in such directory.  See
get_time() for further details: e.g.,

.:path.mtime()
==========================================
[source]
------------------------------------------
>>> :change_path_mtime /scavenger/of/human/sorrow 1355695676.627450733
>>> :path.mtime /scavenger/of/human/sorrow
1355695676.627450733
------------------------------------------
==========================================
/---
function :path.mtime get_path_time_content_changed: {
    die_unless_arg 'Expected one pathname.'
    get_path_time_for_format "${1}" 'y'
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor into a setter.
#FIXME: Incidentally, this is a fairly odd function. Do we *ACTUALLY* call this
#anywhere? For one, the nomenclature is quite poor. The directory-conditional
#logic is completely orthogonal to the file-conditional logic, suggesting the
#two be split apart. Indeed, this function should probably simply be named
#:set_int_to_dir_recursive_newest_mtime() and the trivial file-conditional logic
#dropped completely.

:func.doc <<'/---'
float get_path_mtime_recursive(string pathname)

Get the *mtime* (i.e., modification time) of the passed path in Unix time,
recursively. If such path is a:

* File, this is the same time as returned by :path.mtime().
* Directory, this is the most recent modification time of such directory and
  all files and subdirectories of such directory, recursively.
/---
function get_path_mtime_recursive() {
    # Validate sanity.
    die_unless_arg 'Expected one pathname.'
    :str pathname="${1}"

    # Calculate such time. Dismantled, this is:
    #
    # * "${pathname}"/**/*, all files and subdirectories of this directory.
    # * "om", such files and subdirectories in ascending order by mtime.
    # * "[1]", the first and hence newest such file or subdirectory.
    if { is_dir "${pathname}" } {
        :path.mtime "${pathname}"/**/*(om[1])
    } else {
        :path.mtime "${pathname}"
    }
}
