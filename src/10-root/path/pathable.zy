#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*pathables* (i.e., external commands in the current shell's command hash table).

`zsh` implicitly adds all executable files in the current user's ${PATH} to this
table and hence registers these commands as pathables. Manually calling the
hash() builtin explicitly adds arbitrary files to this table and hence registers
these files as pathables at runtime without filesystem or ${PATH} modification.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_pathable(
    :str command_name,
    ?:str error_message='Command "${command_name}" not found (i.e., not in the current \${PATH\} or passed to hash()).')

Throw an exception with the passed message unless the passed command is
pathable.

== See Also ==

* :pathable.is().
/---
function die_unless_pathable() {
    die_unless_args_1_to_2\
        'Expected one command name and optional error message.'
    :str command_name="${1}"
    :pathable.is "${command_name}" :or
        :die "${2-Command \"${command_name}\" not found (i.e., not in the current \${PATH\} or passed to hash()).}"   #"} <-- yet another Vim hack exhibiting ultimate suckage."
}


:func.doc <<'/---'
:void die_unless_pathables(+:str command_names)

Throw an exception with a stock message unless all passed commands are pathable.

== See Also ==

* :pathable.is().
/---
function die_unless_pathables() {
    die_unless_args 'Expected one or more command names.'
    :str command_name
    for  command_name ("${@}") {
        die_unless_pathable "${command_name}"
    }
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_pathable_path(:str command_name)

Absolute path of the passed command if pathable _or_ throw an exception
otherwise.

== See Also ==

* :pathable.is().
/---
function get_pathable_path() {
    die_unless_arg 'Expected one command name.'
    :str command_name="${1}"
    get_pathable_path_if_found "${command_name}" :or
        die_unless_pathable "${command_name}"
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_pathable_path_if_found(:str command_name)

Absolute path of the passed command if pathable _or_ report failure otherwise.

== See Also ==

* :pathable.is().
/---
function get_pathable_path_if_found() {
    die_unless_arg 'Expected one command name.'
    :str command_name="${1}"
    (( ${+commands[${command_name}]} )) :and
        :stdout.echo "${commands[${command_name}]}"
}

# ....................{ GETTERS ~ first                    }....................
:func.doc <<'/---'
:str get_pathable_path_first(+:str command_names)

Absolute path of the first pathable command in the passed list if at least one
such command is pathable _or_ throw an exception otherwise.

== See Also ==

* :pathable.is().
/---
function get_pathable_path_first() {
    die_unless_args 'Expected one or more command names.'
    get_pathable_path_if_found_first "${@}" :or die_unless_pathables "${@}"
}


:func.doc <<'/---'
[stdout=::str status=:boolean] get_pathable_path_if_found_first(
    +:str command_names)

Absolute path of the first pathable command in the passed list if at least one such command is pathable _or_ report failure otherwise.

== See Also ==

* :pathable.is().
/---
function get_pathable_path_if_found_first() {
    die_unless_args 'Expected one or more command names.'
    :list pathnames

    # Unfortunately, glob qualifiers accept only extant pathnames; hence, the
    # following call always fails (unless the current working directory contains
    # at least one of the passed commands as a path, in which case it
    # erroneously succeeds):
    #
    #   get_path_matching_glob_qualifier_firsting_glob_qualifiers\
    #       'found in $PATH' 'found in $PATH'\
    #       'e{whence -cp $REPLY}' "${@}"
    #
    # Hence, we adopt a deep alternative. Dismantled, this is:
    #
    # * "${^@", expanding to each passed command name.
    # * ":t", excluding all but the basenames of such names.
    # * ":c", expanding to, for commands...
    #   * ...in the current user's $PATH, the absolute path of such commands.
    #   * ...otherwise, noop (i.e., the command name itself).
    # * ":#[^/]*", excluding all non-absolute paths and hence command names
    #   not in the current user's $PATH.
    #
    # See get_pathable_path() for further details.
    pathnames=( ${${^@:t:c}:#[^/]*} )
    :List.is_nonempty pathnames :and :stdout.echo "${pathnames[1]}"
}

# ....................{ PRINTERS                           }....................
#FIXME: Add color support. Yum!
:func.doc <<'/---'
:str print_pathable(+:str command_names)

Print a human-readable synopsis of the passed pathable commands, typically
including the absolute paths of these commands.

If any such command is _not_ pathable, an exception is thrown.

== See Also ==

* :pathable.is().
/---
function print_pathable() {
    die_unless_args 'Expected one or more command names.'
    die_unless_pathables "${@}"

    # Print these commands.
    :str command_name
    for  command_name ("${@}") {
        print_message_heading "Command \"${command_name}\""

        # If such command exists, print the absolute path of all instances of
        # such path in the command hash table.
        :stdout.echo "${commands[${command_name}]}"
    } | :stdin.page
}

# ....................{ UPDATERS                           }....................
#FIXME: It'd be great to do this implicitly every so often -- ideally, in the
#background with lowest possible nice and ionice priorities immediately after
#completing any command entered interactively at the prompt. But that's probably
#much too often, as zsh really has *NO* means of "updating" the command hash
#table without entirely rebuilding such table. This, in turns, implies that we
#really only want to do this occasionally. One possible plan:
#
#* Maintain the mtime of the newest directory of all directories explicitly
#  listed as elements of ${path} as a new integer global -- say,
#  ${ZY_PATH_DIR_NEWEST_MTIME}. This is efficient to calculate, happily.
#* Probably immediately *AFTER* displaying the prompt (to improve shell
#  responsiveness), recalculate such global. Again, this should be efficient.
#* If the value of such global has changed, then and only then rebuild the
#  command hash table (as well as recompile zeshy, of course!).
#
#Right. Looks preety sweet. Fairly simple and very efficient. I think I like it.

:func.doc <<'/---'
:void update_pathables()

Refresh the current shell's *command hash table* (i.e., internal map from each
command name to the absolute path of this command).

Specifically, this function replaces the current contents of this table with
mappings for all commands in the current user's ${PATH} and thus discards any
mappings previously added by calling the hash() builtin.
/---
function update_pathables() {
    die_if_args
    builtin rehash
}
