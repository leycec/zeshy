#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle path removal.
/---

#FIXME: O.K. Pretty clearly, the current bifurcation between the coercively
#silent family of path_operation() functions ignoring ${ZY_OPTIONS_*_IF_CLI}
#and ${ZY_OPTIONS_*_IF_NONCLI} _and_ the verbose family of
#path_operation_with_options() functions respecting such options lists is
#insufficient, and remove_path_recursive() demonstrates exactly why: it's
#excessively dangerous for such function to ignore such options, as we pretty
#much *ALWAYS* want to confirm recursive directory removal with the current user
#if under an interactive shell. Hence, we needed a new
#remove_path_recursive_silent() function dangerously, silently, and recursively
#removing paths and to refactor remove_path_recursive() to basically do the
#exact same thing as remove_path_recursive_with_options() *EXCEPT* that the
#former prefixes passed paths with "--". That's it. Such refactoring actually
#makes sense, unlike the current approach. It's sensible. There *SHOULD* be
#little difference between path_operation() and path_operation_with_options()
#save that the former prohibits options. There *SHOULD* also be a separate
#path_operation_silent() function guaranteeing silence. Excellent. Since
#implementing such changes elsewhere is not going to be altogether fun, approach
#the problem intermittently: refactor one parcel one day, another the next. Yum.

#FIXME: Right. We're currently using the external command "rm", but this isn't
#necessarily ideal. zsh provides an rm() builtin with a great option "-s":
#
#    "The -s option is a zsh extension to rm functionality.  It enables
#     paranoid behaviour, intended to avoid common security problems
#     involving a root-run rm being tricked into removing files other
#     than the ones intended.  It will refuse to follow symbolic links,
#     so that (for example) ``rm /tmp/foo/passwd'' can't accidentally
#     remove /etc/passwd if /tmp/foo happens to be a link to /etc.  It
#     will also check where it is after leaving directories, so that a
#     recursive removal of a deep directory tree can't end up
#     recursively removing /usr as a result of directories being moved
#     up the tree."
#
#At the least, we should prefer the rm() builtin to the "rm" command when
#running as the superuser. Depending on how decent the rm() builtin is, perhaps
#we should *ALWAYS* prefer such builtin -- right?
#
#zsh provides a means of preferring its rm() builtin -- but I'm afraid I can't
#quite recall what it is, at the moment.
#FIXME: Actually, the system-specific "rm" is preferable to zsh's rm(). The
#latter can be made to efficiently mimic functionality of the latter, but the
#reverse is not the case. Hence, "rm" subsumes rm(). To implement such mimicry,
#the remove_path_*() family of functions should perform the following:
#
#* If any such path is under a symbolic link to a directory (as in the above
#  example), confirm whether or not such path should be removed if interactive
#  or skip such path otherwise.
#
#I strongly suspect most system-specific "rm" commands don't suffer the latter
#issue above of "deep directory" removal. So, that should do it -- yes?

#FIXME: remove_path_recursive() should probably go one step farther when run
#interactively. Rather than simply prompt the user for confirmation, perform a
#dry run of such removal prior to such confirmation. Since printing *ALL* paths
#to be recursively removed is probably unhelpful, ... Hmmm; or perhaps it *IS*
#helpful? In any case, dry run. :)
#FIXME: remove_path_recursive() should probably go one step even farther,
#regardless of whether run interactively or not. Specifically, subsume "safe-rm"
#functionality. This is a Perl script implicitly skipping blacklisted
#directories when passed to such script (e.g., "/usr", "/var"), intended as a
#drop-in replacement for "rm". This is *INCREDIBLY* simple functionality to
#implement. Just define a new list global
#${ZY_RM_IF_RECURSIVE_IGNORE_DIRNAMES} (or some such) listing all directories
#to be blacklisted. Specifically:
#
#* If running interactively *AND* option "-i" is set in
#  ${ZY_OPTIONS_RM_IF_INTERACTIVE} *AND* at least one blacklisted directory
#  was passed, remove_path_recursive() and remove_path_recursive_with_options()
#  (but not remove_path_recursive_silent()) should interactively confirm whether
#  the current user really intended to remove such paths. After doing so,
#  regardless of the answer, such functions should then proceed with the above
#  dry run.
#* Else, *ALL* remove_path_recursive_*() functions should *ALWAYS* ignore
#  blacklisted directories. This can be efficiently implemented by differencing
#  the passed paths with ${ZY_RM_IF_RECURSIVE_IGNORE_DIRNAMES} (though such
#  solution may not necessarily be the safest).
#
#Note such script does *NOT* blacklist "/" by default, which strikes us a rather
#curious omission. After all, "/" is the directory you *MOST* want to protect.
#Hence, add such path to the Perl map %default_protected_dirs.
#
#For such script, see:
#https://bazaar.launchpad.net/~fmarier/safe-rm/trunk/view/head:/safe-rm
#FIXME: Wait. The above responses are decent but hardly ideal. See
#${ZY_REMOVE_PATH_RECURSIVE_BLACKLIST_DIRNAMES} documentation for something
#demonstrably better.
#FIXME: Hmmm. ${ZY_RM_IF_RECURSIVE_IGNORE_DIRNAMES} is *NICE* but could
#certainly be expanded to provide glob patterns that should be filtered from
#"rm -r" requests. In fact, I reckon we want a few sets of such filters and
#hence globals:
#
#* One set if operating as root. Indeed, when doing so, remove_dir() should only
#  *WARN* the superuser when the superuser is attempting to remove a top-level
#  directory rather than outright prohibit the superuser from doing so.
#* Another set if operating as a user. Hmm... or perhaps this is the same set?
#FIXME: Before performing interactive querying when option "-i" is enabled,
#ensure option "-f" also isn't enabled or passed. If option "-f" *IS* enabled or
#passed, that takes precedence over option "-i" (naturally). That said, as a
#precaution, when running interactively and both options "-i" and "-f" are
#passed, we should probably print a nonfatal, noninteractive warning: e.g.,
#
#    remove_path_recursive:
#    For safety, avoid option "-f" when removing files directly from the command line.
#FIXME: Is that *REALLY* the only "safety" that "safe-rm" provides? If so,
#that's fairly lame, we must admit.
#FIXME: zsh script "elicker" provides a useful utility function remove_dir() for
#*REASONABLY* safe directory removal. It should provide a useful starting point,
#in any case. Yeah. This function is pretty awesome, considering its simplicity.
#It provides a number of blacklisted dirname globs that could help us craft our
#own. In sum: "rm -rf --" is simply *TOO* dangerous in its original state to be
#widely usable.

#FIXME: It'd be nice to render remove_filename() an uber-powerful meta-remove
#command used in place of "rmdir", "rm -rf *", etc. The essential ideas are:
#
#* Add a config file option ${ZY_IS_RECYCLING}, disabled by default but, when
#  enabled, auto-moving all removed files to a new path
#  "${ZY_RECYCLE_BIN)/$(date +'%N')/', the former defaulting to
#  "${HOME}/tmp/zeshy.recycled". This effectively guarantees no
#  collision (still test such collision, and simply repeat until non-colliding).
#  I'll probably enable this locally, I imagine. Obviously, such auto-moving
#  such test for sufficient free disk space on the mounted disk to be moved to
#  prior to doing so and fail with error if insufficient disk space remains.
#  *ALSO*, note that no recycling must be done on paths in the recycler: an "rm"
#  within the recycler is always perma-death.
#* Add implicit support for "rmdir". Basically, if the passed path is an empty
#  directory, use "rmdir"; otherwise, either "rm -ri ${DIRNAME}" or
#  "rm -rI ${DIRNAME}", depending on how many files or subdirectories exist
#  in such directory.
#* O.K.; so, we should add a new trash_path(), implementing a trash bin-
#  style move to "~/tmp" (if such path exists) or "/tmp/$(get_user)" if such
#  path is creatable or already exists and is writable by the current user. This
#  suggests a new "file/trash" component with getter get_trash_home(). If
#  trash_path() is called from within get_trash_home(), it should:
#
#  * Die unless interactive.
#  * Manually confirm such removals as under remove_file().
#
#  Since such functionality will doubtless enrage a substantial subset of the zsh
#  populace (and fair enough), this should be subject to a global boolean
#  ${ZY_IS_RECYCLING}. Consider adding a new "ZY_OPTIONS_RM_IF_RECYCLING",
#  as well. (Though, perhaps we don't need that?) Hmm; but perhaps the existing
#  ${ZY_IS_REPLACING_CORE_COMMANDS} suffices.
#
#  Note the implementation needs to be partition-aware; specifically, if the
#  target partition the target path resides on has insufficient space, ask the
#  user whether they'd like to remove-in-place. This requires additional
#  functionality elsewhere; namely:
#
#  * A new get_disk_size() in "device/disk", passed a disk device.
#  * A new get_mount_point_from_path() in "device/disk", passed a pathname. The most
#    efficient implementation for this function is probably to get a list of all
#    mount points, dynamically OR such mount points together into a glob pattern
#    or PCRE, and match such pathname against such pattern. The resulting $match
#    is the desired mount point.
#  * A new get_disk_from_mount_dir_statically() in "device/disk", passed a mount point
#    pathname. The most efficient implementation for this function is probably just
#    to glob the desired column of "blkid -o list" or "mount" for such mount point.
#    No PCRE required. (Canonicalize the passed mount point first, yes? That
#    helpfully removes trailing "/", as well.) Then, just call the following pipeline:
#
#    integer disk_size
#    disk_size="$(get_disk_size "$(get_disk_from_mount_dir_statically "$(get_mount_point_from_path "${pathname}")")")"
#    alias_cli rm='trash_path'
#* Replace "trash" in the prior discussion with "compost", a verb and noun with
#  delectable connotations. Also, it would be quite nice if, much like compost,
#  the compost heap were confined to a user-configurable percentage of total
#  partition size -- defaulting to, say, 10%. Then configuring such percentage
#  to 100% gives default Recycle Bin-like behavior (i.e., unintelligently
#  filling up the entire partition with deleted refuse). The default, of
#  course, behaves much more intelligently. On reaching full capacity, sort the
#  immediate subpaths of the compost heap by ascending date and iteratively
#  delete such subpaths starting from the first in this order until the compost
#  heap subsides beneath the desired threshold. Behavior precisely resembles a
#  genuine compost heap, which rather titillates my obscure fancy.
#FIXME: Note that freedesktop.org-compliant window managers necessarily provide
#an abstract compost space already. Under such window managers, we should
#(possibly?) default to such space rather than a physical directory. For further
#details on command-line integration with such concept, see the two-stage delete
#CLI utility "trash-cli":
#
#    https://github.com/andreafrancia/trash-cli
#
#Since such space doesn't actually exist as a simple filesystem directory, I'm
#inclined to disable such integration by default. After all, what does such
#space provide that a directory doesn't?
#FIXME: Ah. Wait. The freedesktop.org compost space does appear to actually
#exist: apparently it's "/.Trash" -- which is admittedly rather un-Linux-like.
#User-specific compost spaces would probably be preferable. Presumably this is
#feasible, yes? I also wonder whether such directory is human-readable. It
#probably compacts deleted paths into hideous UUIDS and such... In any case,
#this isn't an immediate priority.

# ....................{ REMOVERS                           }....................
# By design, there exists no corresponding remove_path() function. Such function
# would only be called by non-interactive scripts, which necessarily know
# whether or not the path to be removed is a file or directory. Such function
# would only invite needless ambiguity.

:func.doc <<'/---'
[stdout: string, status: boolean] remove_path_with_options(
    string rm_option1?, ...,
    string pathname1, ...)

Remove the passed paths with both the passed and currently configured `rm`-
specific options (e.g., ${ZY_OPTIONS_RM}). If any such path does not exist,
failure is returned.
/---
function remove_path_with_options() {
    remove_file_with_options "${@}"
}

# ....................{ REMOVERS ~ recursive               }....................
:func.doc <<'/---'
[stdout: string, status: boolean] remove_path_recursive(string pathname1, ...)

Recursively remove the passed paths with the currently configured `rm`-specific
options (e.g., ${ZY_OPTIONS_RM}). If any such path does not exist, failure is
returned.
/---
function remove_path_recursive() {
    remove_path_recursive_with_options -- "${@}"
}

:func.doc <<'/---'
[status: boolean] remove_path_recursive_silent(string pathname1, ...)

Silently recursively remove the passed paths with the currently configured
`rm`-specific options (e.g., ${ZY_OPTIONS_RM}). If any such path does not
exist, failure is returned.

== Caveats ==

*Consider calling remove_path_recursive() instead.* Such function respects
options configured for interactive use, including default options `-i` and `-I`
interactively confirming such removal. This function _never_ confirms such
removal, despite the inherent risks in recursive path removal. Hence, only call
this function when guaranteed of the contents of such paths.
/---
function remove_path_recursive_silent() {
    die_unless_args 'Expected one or more pathnames.'
    run_code_silent_with_options\
        'command rm' 'ZY_OPTIONS_RM ZY_OPTIONS_RM_IF_RECURSIVE' --\
        "${(q)@}"
}

:func.doc <<'/---'
[stdout: string, status: boolean] remove_path_recursive_with_options(
    string rm_option1?, ...,
    string pathname1, ...)

Recursively remove the passed paths with both the passed and currently
configured `rm`-specific options (e.g., ${ZY_OPTIONS_RM}). If any such path
does not exist, failure is returned.
/---
function remove_path_recursive_with_options() {
    # Validate sanity.
    die_unless_args 'Expected one or more pathnames.'

    # If interactive, pass interactive-specific options.
    string option_list_names='ZY_OPTIONS_RM ZY_OPTIONS_RM_IF_RECURSIVE'
    if { :shell.is_interactive } {
        option_list_names+=' ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_4_OR_MORE'
    }

    # Remove such paths.
    run_code_with_options_configured\
        'command rm' "${option_list_names}" "${(q)@}"
}

# ....................{ REMOVERS ~ dir                     }....................
:func.doc <<'/---'
[stdout: string, status: boolean] remove_dir_empty(string dirname1, ...)

Remove the passed empty directories with the currently configured `rmdir`-specific
options (e.g., ${ZY_OPTIONS_RMDIR}). If any such directory does not exist or
is nonempty, failure is returned.
/---
function remove_dir_empty() {
    remove_dir_empty_with_options -- "${@}"
}

:func.doc <<'/---'
[stdout: string, status: boolean] remove_dir_empty_if_found(
    string dirname1, ...)

Remove all passed empty directories with the currently configured
`rmdir`-specific options (e.g., ${ZY_OPTIONS_RMDIR}), ignoring directories
that do not exist. If any such existing directory is nonempty, this function
reports failure.
/---
function remove_dir_empty_if_found() {
    # Validate sanity.
    die_unless_args 'Expected one or more dirnames.'

    #FIXME: This implementation is non-atomic, which is hardly ideal. Are there
    #any alternative atomic implementations?
    #FIXME: Call the helper in "file/path" we recently defined.

    # Filter out non-extant directories. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed directory.
    # * "(e:...:), excluding directories failing the test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant directories.
    :args.set "${^@}"(e:'[[ -e "${REPLY}" ]]':)

    # If any extant directories remain, remove such directories.
    if { is_args } {
        remove_dir_empty "${@}"
    }
}

:func.doc <<'/---'
[status: boolean] remove_dir_empty_silent(string dirname1, ...)

Silently remove the passed empty directories with the currently configured
`rmdir`-specific options. If any such directory does not exist or is nonempty,
failure is returned.
/---
function remove_dir_empty_silent() {
    die_unless_args 'Expected one or more dirnames.'
    run_code_silent_with_options\
        'command rmdir' ZY_OPTIONS_RMDIR -- "${(q)@}"
}

:func.doc <<'/---'
[stdout: string, status: boolean] remove_dir_empty_with_options(
    string rm_option1?, ...,
    string dirname1 = "$(get_dir)", ...)

Remove the passed empty directories (defaulting to the current directory, if
called directly from the command line) with both the passed and currently
configured `rmdir`-specific options (e.g., ${ZY_OPTIONS_RMDIR}). If any such
directory does not exist or is nonempty, failure is returned.
/---
function remove_dir_empty_with_options() {
    # Validate sanity. If passed no arguments, default to the current directory.
    # By design, avoid the more specific (and seemingly clever) test of whether
    # the caller passed no non-option arguments; callers passing any non-option
    # arguments intend to run "rmdir" traditionally and hence sans defaults.
    if { :context.is_cli_func } {
        is_args or :args.set "$(get_dir)"
    } else {
        die_unless_args 'Expected one or more dirnames.'
    }

    # Remove such directories.
    run_code_with_options_configured\
        'command rmdir' ZY_OPTIONS_RMDIR "${(q)@}"
}

# ....................{ REMOVERS ~ file                    }....................
:func.doc <<'/---'
[stdout: string, status: boolean] remove_file(string filename1, ...)

Remove the passed files with the currently configured `rm`-specific options
(e.g., ${ZY_OPTIONS_RM}). If any such file does not exist, failure is
returned.
/---
function remove_file() {
    remove_file_with_options -- "${@}"
}

:func.doc <<'/---'
[stdout: string, status: boolean] remove_file_if_found(string filename1, ...)

Remove all passed extant files with the currently configured
`rm`-specific options (e.g., ${ZY_OPTIONS_RM}), ignoring files
that do not exist.
/---
function remove_file_if_found() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    #FIXME: Call the helper in "file/path" we recently defined.

    # Filter out non-extant files. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed file.
    # * "(e:...:), excluding paths failing the test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant files.
    :args.set "${^@}"(e:'[[ -e "${REPLY}" ]]':)

    # If any extant files remain, remove such files.
    if { is_args } {
        remove_file "${@}"
    }
}

:func.doc <<'/---'
[status: boolean] remove_file_silent(string filename1, ...)

Silently remove the passed files with the currently configured `rm`-specific
options (e.g., ${ZY_OPTIONS_RM}). If any such file does not exist, failure is
returned.
/---
function remove_file_silent() {
    die_unless_args 'Expected one or more filenames.'
    run_code_silent_with_options 'command rm' ZY_OPTIONS_RM -- "${(q)@}"
}

#FIXME: Improve the remove_file_*() family of functions to omit enabled or
#passed directory-specific options, including: "-d" and "-r". Doing so forces
#errors and hence exceptions when passed directories, as expected. To do so,
#we'll need to split up run_code_with_options_configured() into at least two
#ancillary functions: set_list_to_options_configured() and... perhaps that's it?
#In any case, call set_list_to_options_configured() here to get the set of all
#options to be passed to "rm", then filter "-d" and "-r" from such list. Sweet!
:func.doc <<'/---'
[stdout: string, status: boolean] remove_file_with_options(
    string rm_option1?, ...,
    string filename1, ...)

Remove the passed files with both the passed and currently configured `rm`-
specific options (e.g., ${ZY_OPTIONS_RM}). If any such file does not exist,
failure is returned.
/---
function remove_file_with_options() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # Since removal options depend on the number of such arguments,
    # run_code_with_options() is insufficient. Implement such logic manually.
    string option_list_names='ZY_OPTIONS_RM'
    if { :shell.is_interactive } {
        if { :args.count.nonoptions.">=<" 1 3 } {
            option_list_names+=' ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_1_TO_3'
        } else {
            option_list_names+=' ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_4_OR_MORE'
        }
    }

    # Remove such files.
    run_code_with_options_configured\
        'command rm' "${option_list_names}" "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Point the "rm" CLI alias substitution at remove_path_with_options().
# Remove all passed extant files with the currently configured `rm`-
# specific options, ignoring *nonextant files* (i.e., files that do not exist).

#unless interactively confirmed by the current user.
#ignores blacklisted paths, printing a nonfatal warning for
# each.
# where the consequence for  ``blacklisted'' conditionally depends on the state of the current shell.
#FUXME: This is a fairly poor default path. After all, an "initramfs" tree
#structure principally consists of symbolic links to binary commands -- not
#"source." 
#specific to the remove_(path|dir|file)*() functions.
#FUXME: We probably want to use the builtin rm() instead, due to its support for
#the seemingly awesome option "-s". This does *NOT* extend to builtin mv(),
#however, which is deficient in numerous ways versus the command "mv".

# Unlike most path operations accepting passed
    # options, do not default to the current directory (for hopefully obvious
    # reasons).
#   die_unless_args 'Expected one or more pathnames.'
#   run_code_with_options_configured\
#       'command rm' 'ZY_OPTIONS_RM ZY_OPTIONS_RM_IF_RECURSIVE' --\
#       "${(q)@}"

#an (arguably) unsafe evasion given the risks inherent to such removal.
#While this function _never_
#interactively confirms such removal, . Since path removal remains inherently risky,
#remove_path_recursive() is preferrable to this function in most cases.
#carries inherent risk, which. Such function respects options configured
#for interactive use and hence options `-i` and `-I`. and Since  ;  

#FUXME: Split into two files "if_config/option/builtin" and
#"if_config/option/posix". Of course, the line is a bit blurry between the two;
#but this file's simply become too lengthy to retain as a conglomerate file.
    #FUXME: This should be "is_shell_cli", instead.

#declare_function '
#string remove_file_with_optionsconfigured(
#  string pathname1, string pathname2, ...)
#
#Remove the passed files with the currently configured "rm"-specific options,
#throwing an exception if any such file does not exist.
#'
#function remove_file_with_optionsconfigured() {
#    remove_file_with_options -- "${(q)@}"
#}

#FUXME: Implementation isn't quite right: we only want to ignore the path if not
#found; if the path is found but is *NOT* empty, we still want to throw an exception.

#(i.e., contains at least one subdirectory or file).
#   run_code_with_options 'command rmdir' ZY_OPTIONS_RMDIR "${(q)@}"

#Remove all passed directories if all such directories exist and
#are empty  or throw an exception if at
#least one such directory  See
#remove_dir_empty_if_found() for an alternative throwing no such exception.

#   run_code_silent run_code_with_options 'command rm'\
#       'ZY_OPTIONS_RM ZY_OPTIONS_RM_IF_SHELL_NONINTERACTIVE' -- "${(q)@}"

#       if :args.nonoptions.Count __nonoptions__ and
#           (( 1 <= __nonoptions__ && __nonoptions__ <= 3 ))
    # Validate sanity.
#   die_unless_args 'expected at least one filename'

    # Since removal options depend on the number of such arguments,
    # run_code_with_options() is insufficient. Implement such logic manually.
#   string option_list_names='ZY_OPTIONS_RM'
#   :shell.is_interactive && {
#       if is_args_1_to_3
#       then option_list_names+=' ZY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3'
#       else option_list_names+=' ZY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'
#       fi
#   }

    # Remove such files.
#   run_code_with_optionsconfigured\
#       'command rm' "${option_list_names}" -- "${(q)@}"

#FUXME: This function should *NOT* be called by copy_file() or move_file() --
#only by the subsidiary copy_file_with_optionsconfigured()-style functions.
