#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Path grepping* (i.e., recursive pattern matching on file content).
/---

#FIXME: Acquired from online grepping:
#
#"Years ago I switched from regular grep to ack for typical searches because it
# is faster, has saner defaults and doesnâ€™t search files and directories I am
# usually not interested in. Recently, ag aka The Silver Searcher by Geoff Greer
# made the rounds. It is much faster than ack but provides an ack-compatible
# interface."
#
#It sounds like we should investigate "ag", eh? I'd certainly be happier with
#saner defaults, wouldn't you?
#FIXME: Right. Since "grep" is the standard verb for such path operation, *ALL*
#grep_*() functions defined below should be implemented with the standard
#"if { :pathable.is ag } { ... } elif { :pathable.is ack } { ... } else { ... }"
#paradigm. ("grep" should *ALWAYS* be available on *EVERY* system without
#exception, so fallback to that.) Extensive research shows "ag" to be vastly
#superior to "ack" to be vastly superior to "grep". So, there you go!
#FIXME: Additionally, all grep functions below should be optimized with
#*RUNTIME* logic such that, when run from within a directory under revision
#control, the appropriate grep function is called (e.g., :grep_git()).

#FIXME: Add examples!

#FIXME: All ${path_command}_with_options() functions should be improved so as
#to defer to:
#
#    ${path_command}_recursive_with_options "${@}" and :status.report_last
#
#...when passed options "-r", "-R", and/or "--recursive" (depending on command).

#FIXME: It'd be nice to emit a progress bar for long `grep` operations. Investigate.
#Yes. It looks like this is halfway there:
#   find . -name "*.rb" | pv | xargs grep
#Note that we should use "zargs" instead, that we'll need to explicitly pass
#the total number of files to "pv" (...perhaps it has a mode or option for
#this already), and that...uhm. Well, it'll be a bit of work, anyway! But
#it's well doable.
#FIXME: The principle difficulty with a "grep" progress bar is that "grep" is
#concurrently printing matching lines to stdout. To circumvent this, one *COULD*
#silently capture such output into a variable while printing only a progress bar
#and then print such output after completion. While a tolerable improvement for
#small to medium jobs, such an approach is probably unhelpful for large jobs in
#which the user really just cares about the initial matches. What is *REALLY*
#needed is an external command (probably implemented in C) running the passed
#command and displaying dynamically updated terminal output -- probably with the
#first line of such output a progress bar and all subsequent lines the
#sequential output of such command.
#FIXME: Actually, we could probably implement this is a :stdin.page()-style zeshy
#function iterating over "grep" output (i.e., matching lines) and updating a
#progress bar. Which, now that I consider it, should probably be at the bottom
#of the terminal, yes? This is probably nice, assuming it preserves the shell
#scroll buffer *AND* allows us to cleanly erase the progress bar from such
#buffer after completion. (Which it should, whereas a progress bar at the top
#would probably complicate such issues.)
#FIXME: Actually, such logic should be performed by a new function in the
#:stdin.page*() family with a corresponding new function in the
#run_code_paged*() family that we call in lieu of the current call to
#run_code_paged() below. Wait. Scratch the latter. We want to pipe "grep" *INTO*
#such function rather than *FROM* such function (as in the case of "pv"),
#implying that a run_code_paged() function won't cut it. Hence, we'll just pipe
#grep_path() into a new function page_stdin_with_... Wait. How would such
#function receive the count of how many files "grep" had already processed?
#FIXME: Ugh. Forget all that. "pv" provides the ideal route for this. I've
#already tested it a bit, and the following behaves tolerably well:
#
#    command find . -type f -name '*' -print0 | command pv | command xargs --null grep "${pattern}"
#
#This does exactly what we could hope for, although (admittedly) without ANSI
#embellishment.
#FIXME: Replace the above "find" with pure-zeshy functions implementing the
#equivalent in both recursive and non-recursive variants -- say,
#get_paths_globbed() and get_paths_globbed_recursive(). Such nomenclature
#complies with existing nomenclature (e.g., ::Paths.glob(),
#:path.is_globbed()). Note that get_paths_globbed_recursive()
#could probably be implemented in terms of get_paths_globbed() by suffixing
#passed directory names with "/**/*". (Nice!) Naturally, such functions should
#delimited paths with null rather than newline characters (as paths may contain
#the latter but not former), possibly suggesting alternative names -- say,
#get_paths_globbed_on_null(). Err... maybe not. (Surprisingly difficult to
#concoct a function name that isn't terrible here. Probably just go with
#get_paths_globbed() -- at least initially.) In any case, get_paths_globbed()
#should itself defer to ::Paths.glob(). Oh, yes -- it all begins to
#come together.
#FIXME: Wait. We really need to just call ::Paths.glob() *BEFORE*
#calling "pv" to grab the number of matching paths and then do something
#resembling:
#
#    list pathnames; ::Paths.glob pathnames "${glob}"
#    joint_list_on_null pathnames |
#       command pv --size "$(get_string_length "${pathnames[*]}")" |
#       command xargs --null grep "${pattern}"
#
#While "pv" has a means of counting by newlines, it sadly lacks a means of
#counting by nulls. This means the only means of using "pv" in this context is
#having it count pathname bytes -- which, while quite strange, does actually
#work. Since this is quite strange, however, we should probably just disable the
#portion of "pv" output displaying how many bytes have been processed. *shrug*
#FIXME: "pv" output is pure ASCII, which isn't necessarily ideal. Unfortunately,
#uncountable *HOURS* of grepping about online yielded basically nothing. There's
#really no viable alternative to "pv", at the moment. Which is fine, because
#"pv" is more than sufficient as is. ANSI would have been nice, but... *shrug*
#FIXME: O.K.; the above appears all good, except for the
#::Paths.glob() part. What in bl00dy h3ck were we on there, eh?
#There's no need to glob anything. zsh does that for us and passes us a list of
#all matching pathnames as function arguments. *sigh*

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_file_line_matching_grep(+:str pathnames :str pattern)

Report success only if at least one line of at least one passed file matches the
passed pattern with the currently configured `grep`-specific options (e.g.,
${ZY_OPTIONS_GREP}).
/---
function is_file_line_matching_grep() {
    die_unless_args_2_or_more 'Expected one or more filenames and one pattern.'
    { get_file_lines_matching_grep_if_found "${@}" } :=silent
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
[stdout=:str status=:bool] get_file_lines_matching_grep_if_found(
    +:str pathnames :str pattern)

Newline-delimited list of all lines of the passed files matching the
passed pattern with the currently configured `grep`-specific options (e.g.,
${ZY_OPTIONS_GREP}).

This function reports success only if all such files exist _and_ at least one
such file matches.
/---
function get_file_lines_matching_grep_if_found() {
    die_unless_args_2_or_more 'Expected one or more filenames and one pattern.'
    :str pattern="${@[-1]}" option_list_names
    :args.pop 1

    #FIXME: Shift such logic into a new run_code_with_options_noninteractive()
    #function. We'll certainly want to leverage such functionality elsewhere.

    # Option lists to be applied to the grep below. If a non-interactive variant
    # of such list is defined, apply such list as well. However, do *NOT* apply
    # an interactive variant of such list even if defined. This function *MUST*
    # return raw lines rather than ANSI-embellished lines.
    option_list_names='ZY_OPTIONS_GREP'
    if { :List.is ZY_OPTIONS_GREP_IF_NONINTERACTIVE } {
        option_list_names+='ZY_OPTIONS_GREP_IF_NONINTERACTIVE'
    }

    # Grep these paths.
    run_code_with_options 'command grep'\
        "${option_list_names}" -- "${(q)pattern}" "${(q)@}"
}

# ....................{ GREPPERS                           }....................
# By design, both grep_path() and grep_path_with_options() and variants thereof
# accept the passed pattern *BEFORE* passed pathnames, behavior similar to that
# of "grep" itself.

#FIXME: Poor examples. Improve by explicitly writing temporary files with
#write_file_with_string() -- which incidentally should be renamed to simply
#write_file(). (Err, perhaps not!)

:func.doc <<'/---'
:full grep_path(:str pattern *:str pathnames)

Grep the passed paths for files with lines matching the passed pattern with
the currently configured `grep`-specific options (e.g., ${ZY_OPTIONS_GREP}).

== See Also ==

* grep_path_with_options().
/---
function grep_path() {
    die_unless_args_2_or_more 'Expected one pattern and one or more filenames.'
    grep_path_with_options -- "${@}"
}


:func.doc <<'/---'
:full grep_path_with_options(
    *:str grep_options :str pattern *:str pathnames)

Grep the passed paths (defaulting to all files in the current directory
after resolving symbolic links, if called directly from the command line) for
files with lines matching the passed pattern with both the passed and
currently configured `grep`-specific options (e.g., ${ZY_OPTIONS_GREP}).

This function reports success only if all such files exist _and_ at least one
such file matches.

== Examples ==

.grep_path_with_options()
==========================================
[source]
------------------------------------------
>>> grep_path_with_options -i /proc/* "Matthew@Sobol"
/proc/version: Linux version 3.6.11-gentoo (matthew@sobol) (gcc version 4.6.3)
------------------------------------------
==========================================
/---
function grep_path_with_options() {
    if { :context.is_cli_func } {
        die_unless_args\
            'Expected optional "grep" options, one pattern, and optional pathnames.'

        # Default pathnames to all text files in the current directory.
        is_args_2_or_more :or {
            :list filenames
            set_list_to_dir_files_text filenames "$(get_dir)"
            :arg.append "${filenames[@]}"
        }
    } else {
        die_unless_args_2_or_more\
            'Expected optional "grep" options, one pattern, and one or more pathnames.'
    }

    # Grep these paths.
    run_code_with_options_configured\
        'run_code_paged command grep' ZY_OPTIONS_GREP "${(q)@}"
}

# ....................{ GREPPERS ~ recursive               }....................
:func.doc <<'/---'
:full grep_path_recursive(:str pattern *:str pathnames)

Recursively grep the passed paths for files with lines matching the passed
pattern with the currently configured `grep`-specific options (e.g.,
${ZY_OPTIONS_GREP}).

== See Also ==

* grep_path_with_options().
/---
function grep_path_recursive() {
    die_unless_args_2_or_more 'Expected one pattern and one or more filenames.'
    grep_path_recursive_with_options -- "${@}"
}


:func.doc <<'/---'
:full grep_path_recursive_with_options(
    *:str grep_options :str pattern *:str pathnames)

Recursively grep the passed paths (defaulting to the current directory, if
called directly from the command line) for files with lines matching the
passed pattern with both the passed and the currently configured `grep`-specific
options (e.g., ${ZY_OPTIONS_GREP}).

== See Also ==

* grep_path_with_options().
/---
function grep_path_recursive_with_options() {
    # Validate sanity. If passed only a pattern, note that `grep` already
    # defaults to the current directory. (Hence, we needn't do so explicitly.)
    if { :context.is_cli_func } {
        die_unless_args_1_or_more\
            'Expected optional "grep" options, one pattern, and optional pathnames.'
    } else {
        die_unless_args_2_or_more\
            'Expected optional "grep" options, one pattern, and one or more pathnames.'
    }
    :list run_code_args

    # Arguments to be passed to calls to run_code() below excluding the
    # prefixing command name. To accommodate multiple executions of such
    # command, manually add such command name below.
    run_code_args=(
        'ZY_OPTIONS_GREP ZY_OPTIONS_GREP_IF_RECURSIVE'
        "${(q)@}"
    )

    #FIXME: Not the best interactive message. Rather, this should resemble:
    #
    #    print_message_item_interactively\
    #        "Grepping $(join_strings_readable: "${pathnames[@]}") for \"${pattern}\"..."
    #
    #Naturally, this requires ignoring any prefixing passed options. Certainly
    #feasible via set_list_to_dir_files_text() (as above); just have to do it!

    # The conditional below first runs `grep` silently. To (slightly) improve
    # the user experience, print a brief message first.
    print_message_item_interactively\
        "Grepping $(join_strings_readable: "${@}")..."

    #FIXME: Clever, but non-ideal. While this does work perfectly, it also
    #consumes twice as much time and presents the user with no output for the
    #first half of its execution time. This is terrible. Instead, here's what
    #I'd like to do. Now that we have a means of concurrently capturing the
    #stderr from a command run in the same shell, there's really no reason not
    #to do the following:
    #
    #* Define a new run_code_paged_and_set_string_to_stderr() function doing
    #  exactly that. (Should be trivial, but critically important, to define.)
    #* Call such function below.
    #* If such function fails, either:
    #  * Test the captured stderr for nonemptiness. We need to experentially
    #    confirm whether or not "grep" prints to stderr on failing to match
    #    anything. I don't believe it does. stderr should remain empty unless a
    #    nonfatal error occurs (e.g., broken symbolic link), in which case
    #    "grep" complains. Hence, a nonemptiness test *SHOULD* suffice. Verify.
    #  * Match the captured stderr, if a nonemptiness test does *NOT* suffice.
    #    But it should, so this probably doesn't apply.
    #  * Perform the silent dry-run attempt, below. But this is slow and lame;
    #    so, probably don't do this.

    # Silently dry-run this search before performing this search below. For
    # numerous common cases most users would not consider to constitute fatal
    # errors (e.g., broken symbolic links, subdirectories unreadable by the
    # current user), "grep" when run non-silently returns failure but when run
    # silently returns success. To avoid returning failure for non-fatal errors,
    # dry-run such search first by running "grep" silently and fail *ONLY* if
    # such dry-run fails. Assuming default ${ZY_GREP_IF_SILENT} options,
    # such dry-run enables options "-qs".
    #
    # Bang-up job, esteemable "grep" authors.
    run_code_silent_with_options 'command grep' "${run_code_args[@]}" :or
        :status.report_last

    # Perform this search. Since the prior search already guarantees non-zero
    # exit status on fatal error, force zero exit status and hence success here.
    {
        run_code_with_options_configured\
            'run_code_paged command grep' "${run_code_args[@]}"
    } :=status.ignore_failure
}

# ....................{ GREPPERS ~ caseless                }....................
:func.doc <<'/---'
:full grep_path_caseless(:str pattern *:str pathnames)

Case-insensitively grep the passed paths for files with lines matching the
passed pattern with the currently configured `grep`-specific options (e.g.,
${ZY_OPTIONS_GREP}).

== See Also ==

* grep_path_with_options().
/---
function grep_path_caseless() {
    die_unless_args_2_or_more 'Expected one pattern and one or more filenames.'
    grep_path_caseless_with_options -- "${@}"
}


:func.doc <<'/---'
:full grep_path_caseless_with_options(
    *:str grep_options :str pattern *:str pathnames)

Case-insensitively grep the passed paths (defaulting to the current directory,
if called directly from the command line) for files with lines matching the
passed pattern with both the passed and the currently configured `grep`-specific
options (e.g., ${ZY_OPTIONS_GREP}).

== See Also ==

* grep_path_with_options().
/---
function grep_path_caseless_with_options() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with grep_path_recursive_caseless_with_options().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Instruct grep_path_with_options() to ignore the call to this function for
    # purposes of testing zsh context and hence whether or not argument defaults
    # are applicable. See :context.is_cli_func() for further details.
    :context.ignore_func_current

    # Grep such path(s).
    :List.localize\
        'ZY_OPTIONS_GREP ZY_OPTIONS_GREP_IF_CASELESS'
    grep_path_with_options "${@}"
}


:func.doc <<'/---'
:full grep_path_recursive_caseless_with_options(
    *:str grep_options :str pattern *:str pathnames)

Recursively case-insensitively grep the passed paths (defaulting to the current
directory, if called directly from the command line) for files with lines
matching the passed pattern with both the passed and the currently configured
`grep`-specific options (e.g., ${ZY_OPTIONS_GREP}).

== See Also ==

* grep_path_with_options().
/---
function grep_path_recursive_caseless_with_options() {
    # See grep_path_caseless_with_options() for further details.
    :context.ignore_func_current
    :List.localize\
        'ZY_OPTIONS_GREP ZY_OPTIONS_GREP_IF_CASELESS'
    grep_path_recursive_with_options "${@}"
}

#FIXME: In lieu of unit tests...
#function gree() {
#    grep_path_recursive_caseless_with_options "$(get_home)/tmp" 'oeu'
#}
