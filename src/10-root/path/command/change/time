#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *path time changers* (i.e., functions changing access, change, and
modification path times).
/---

# ....................{ CHANGERS                           }....................
#FIXME: Unfortunately, the BSD version of "touch" is fairly incompetent,
#providing no explicit means of passing a Unix time:
#    http://www.freebsd.org/cgi/man.cgi?query=touch&sektion=1
#However, it *DOES* support human-readable date and time formats. This pretty
#much implies we'll need to perform an internal conversion from Unix time to
#either of the two supported formats, which sounds fairly... nontrivial. Having
#no clear idea how to implement this under BSD at the moment, this function
#remains undefined on such OSes.
#FIXME: Oh! Sweet. zsh provides strftime() in module "datetime", converting from
#Unix time to arbitrarily formatted date strings. So, there we go! Define a new
#:set_string_to_time_as_YYMMDDSS() function (or some such) calling strftime()
#with signature:
#    void :set_string_to_time_as_YYMMDDSS(string string_name, int time)
#Then just have the BSD implementation below call such function. Sweet. Done.

:declare_func_if_or_noop\
    ':void :change_path_mtime(
        :path pathname, :int_positive modification_time)'\
    ':string pathname="${1}" mtime="${2}"'\
    :is_os_trait_gnu\
        'command touch -m --date=@${mtime} -- "${pathname}"' <<'/---'
Set the *mtime* (i.e., modification time) of the passed path to the passed time
in high-resolution seconds since the Unix epoch. See get_time() for further
details.
/---

# --------------------( WASTELANDS                         )--------------------
   # ':is_os_trait_bsd' 'command touch -m --date=@${mtime} -- "${pathname}"'\
