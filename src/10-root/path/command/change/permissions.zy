#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Path permission changers* (i.e., functions changing path permissions).
/---

# ....................{ CHANGES                            }....................
#FIXME: Define the exact syntax of such permissions strings. "man chmod"
#provides a useful description, which we should distill to its terse essence.
:func.doc <<'/---'
:void change_path_permissions(+:str pathnames :str permissions)

Change the permissions of all passed paths to the passed symbolic or octal
permissions with the currently configured `chmod`-specific options (e.g.,
${ZY_OPTIONS_CHMOD}).

Supported permissions strings include:

* Human-readable symbolic strings (e.g., `ugo+rX`).
* Machine-readable octal integers (e.g., 0711).

== See Also ==

* `man chmod`.

== Examples ==

.change_path_permissions()
==========================================
[source]
------------------------------------------
# Change user, group, and other permissions with symbolic permissions.
>>> change_path_permissions "/ogallala/yucca" ugo-rwx
>>> cd /ogallala/yucca
cd: permission denied: /ogallala/yucca
# Change user, group, and other permissions with octal permissions.
>>> change_path_permissions "/ogallala/yucca" 0777
>>> cd /ogallala/yucca
>>> get_dir
/ogallala/yucca
------------------------------------------
==========================================

/---
function change_path_permissions() {
    die_unless_args_2 'Expected one path and one permissions string.'
    :str permissions="${@[-1]}"
    :args.pop 1

    # Change these permissions.
    change_path_permissions_with_options -- "${permissions}" "${@}"
}


:func.doc <<'/---'
:full change_path_permissions_with_options(
  *:str chmod_options :str permissions *:str pathnames)

Change the permissions of all passed paths (defaulting to the current directory
and all immediate paths in such directory, if called directly from the command
line) to the passed symbolic or octal permissions with both the passed and
currently configured `chmod`-specific options (e.g., ${ZY_OPTIONS_CHMOD}).

== See Also ==

* change_path_permissions().
/---
function change_path_permissions_with_options() {
    if { :context.is_cli_func } {
        die_unless_args_1_or_more\
            'Expected optional "chmod" options, one permissions string, and optional pathnames.'
        is_args_2_or_more :or :arg.append "$(get_dir)/"{.,*}
    } else {
        die_unless_args_2_or_more\
            'Expected optional "chmod" options, one permissions string, and one or more pathnames.'
    }

    # Change these permissions.
    run_code_with_options_configured 'command chmod' ZY_OPTIONS_CHMOD "${(q)@}"
}

# ....................{ CHANGES ~ recursive                }....................
:func.doc <<'/---'
:void change_path_permissions_recursive(+:str pathnames :str permissions)

Recursively change the permissions of all passed paths to the passed symbolic or
octal permissions with the currently configured `chmod`-specific options (e.g.,
${ZY_OPTIONS_CHMOD}).

== See Also ==

* change_path_permissions().
/---
function change_path_permissions_recursive() {
    die_unless_args_2_or_more\
        'Expected one or more paths and one permissions string.'
    :str permissions="${@[-1]}"
    :args.pop 1

    # Change these permissions.
    change_path_permissions_recursive_with_options -- "${permissions}" "${@}"
}


:func.doc <<'/---'
:full change_path_permissions_recursive_with_options(
  *:str chmod_options :str permissions *:str pathnames)

Recursively change the permissions of all passed paths (defaulting to the
current directory, if called directly from the command line) to the passed
symbolic or octal permissions with both the passed and currently configured
`chmod`-specific options (e.g., ${ZY_OPTIONS_CHMOD}).

== See Also ==

* change_path_permissions().
/---
function change_path_permissions_recursive_with_options() {
    if { :context.is_cli_func } {
        die_unless_args\
            'Expected optional "chown" options, one permissions string, and optional pathnames.'
        :str permissions paths
        :int arg_nonoption_count arg_nonoption_index_first

        # Default this path to the current directory.
        is_args_2_or_more :or :arg.append "$(get_dir)"

        # Get the number of non-option arguments and index in the passed
        # arguments of the first such argument.
        :args.nonoptions.Count,first_index\
            arg_nonoption_count arg_nonoption_index_first

        # Strings synopsizing this change for confirmation purposes.
        permissions="${@[${arg_nonoption_index_first}]}"
        paths="\"${@[$(( arg_nonoption_index_first + 1 ))]}\""
        if (( arg_nonoption_count > 2 )) {
            paths+=', ...'
        }

        # Confirm this change.
        is_query_character_yes\
            "Recursively change permissions of ${paths} to ${permissions}?" :or
            :failure.report
    } else {
        die_unless_args_2_or_more\
            'Expected optional "chown" options, one permissions string, and one or more pathnames.'
    }

    # Change these permissions.
    run_code_with_options_configured 'command chmod'\
        'ZY_OPTIONS_CHMOD ZY_OPTIONS_CHMOD_IF_RECURSIVE' "${(q)@}"
}
