#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle path user and group changes.
/---

# ....................{ CHANGERS                            }....................
declare_function_with_stdin <<'/---'
void change_path_ownership(
    string pathname1, ...,
    string ownership)

Change the user and/or group of all passed paths to the passed `:`-delimited
ownership with the currently configured `chown`-specific options (e.g.,
${ZESHY_OPTIONS_CHOWN}). If any such path does not exist, an exception is
thrown. See `man chown` for further details: e.g.,

.change_path_ownership()
==========================================
[source]
------------------------------------------
# Change only user ownership.
>>> change_path_ownership "/battle/of/bannockburn" bruce
# Change only group ownership.
>>> change_path_ownership "/battle/of/bannockburn" :scotland
# Change both user and group ownership to the same names.
>>> change_path_ownership "/battle/of/bannockburn" bruce:
# Change both user and group ownership to different names.
>>> change_path_ownership "/battle/of/bannockburn" bruce:scotland
------------------------------------------
==========================================

== Ownership Strings ==

As the prior example demonstrates, ownership strings consist of an optional
username and optional groupname delimited by `:`. To change:

* Only the user of such paths, pass only such username (e.g., `jrbobdobbs`).
* Only the group of such paths, pass only such groupname prefixed by `:` (e.g.,
  `:church_of_the_subgenius`).
* Both the user and group of such paths to the same name, pass only such
  username suffixed by `:` (e.g., `jhvh1:`).
* Both the user and group of such paths to different names, pass such username
  and groupname delimited by `:` (e.g., `yog:sothoth`).
/---
function change_path_ownership() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more paths and one ownership string.'
    string ownership="${@[-1]}"
    pop_arg

    # Change such ownership.
    change_path_ownership_with_options -- "${ownership}" "${@}"
}

declare_function_with_stdin <<'/---'
void change_path_ownership_with_options(
    string chown_option1?, ...,
    string ownership,
    string pathname1 = "$(get_dir)/"{.,*}, ...)

Change the user and/or group of all passed paths (defaulting to all paths in the
current directory as well as such directory, if called directly from the command
line) to the passed `:`-delimited ownership with both the passed and currently
configured `chown`-specific options (e.g., ${ZESHY_OPTIONS_CHOWN}). See
change_path_ownership() for further details.
/---
function change_path_ownership_with_options() {
    # Validate sanity.
    if { is_context_cli_function } {
        die_unless_args\
            'Expected optional "chown" options, one ownership string, and optional pathnames.'
        is_args_2_or_more or :arg.append "$(get_dir)/"{.,*}
    } else {
        die_unless_args_2_or_more\
            'Expected optional "chown" options, one ownership string, and one or more pathnames.'
    }

    # Change such ownership.
    run_code_with_options_configured\
        'command chown' ZESHY_OPTIONS_CHOWN "${(q)@}"
}

# ....................{ CHANGERS ~ recursive                }....................
declare_function_with_stdin <<'/---'
void change_path_ownership_recursive(
    string pathname1, ...,
    string ownership)

Recursively change the user and/or group of all passed paths to the passed `:`-
delimited ownership with the currently configured `chown`-specific options
(e.g., ${ZESHY_OPTIONS_CHOWN}). See change_path_ownership() for further details.
/---
function change_path_ownership_recursive() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more paths and one ownership string.'
    string ownership="${@[-1]}"
    pop_arg

    # Change such ownership.
    change_path_ownership_recursive_with_options -- "${ownership}" "${@}"
}

declare_function_with_stdin <<'/---'
[status: boolean] change_path_ownership_recursive_with_options(
    string chown_option1?, ...,
    string ownership,
    string source_pathname1 = "$(get_dir)", ...)

Recursively change the user and/or group of all passed paths (defaulting to the
current directory, if called directly from the command line) to the passed `:`-
delimited ownership with both the passed and currently configured
`chown`-specific options (e.g., ${ZESHY_OPTIONS_CHOWN}). If the current shell is
interactive, failure is reported unless the current user interactively affirms
such changes. (Since recursively changing ownership erroneously can be
debilitating, such change deserves confirmation.) See change_path_ownership()
for further details.
/---
function change_path_ownership_recursive_with_options() {
    # Validate sanity.
    if { is_context_cli_function } {
        die_unless_args\
            'Expected optional "chown" options, one ownership string, and optional pathnames.'
        string ownership paths
        integer arg_nonoption_count arg_nonoption_index_first

        # Default such path to the current directory.
        is_args_2_or_more or :arg.append "$(get_dir)"

        # Get the number of non-option arguments and index in the passed
        # arguments of the first such argument.
        set_integers_to_arg_nonoption_count_and_index_first\
            arg_nonoption_count arg_nonoption_index_first

        # Strings synopsizing such change for confirmation purposes.
        ownership="${@[${arg_nonoption_index_first}]}"
        paths="\"${@[$(( arg_nonoption_index_first + 1 ))]}\""
        if (( arg_nonoption_count > 2 )) {
            paths+=', ...'
        }

        # Confirm such change.
        is_query_character_yes\
            "Recursively change ownership of ${paths} to ${ownership}?" or
            report_failure
    } else {
        die_unless_args_2_or_more\
            'Expected optional "chown" options, one ownership string, and one or more pathnames.'
    }

    # Change such ownership.
    run_code_with_options_configured 'command chown'\
        'ZESHY_OPTIONS_CHOWN ZESHY_OPTIONS_CHOWN_IF_RECURSIVE' "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
        # Report failure unless
        # the current user interactively affirms such changes. Recursively changing
        # ownership is often permanently harmful and hence deserves confirmation.

        #FUXME: While this works, we'd much rather call a function concatenating
        #and truncating such paths for human-readable consumption. Yum!
        # Default pathnames to all pathnames in the current directory as well as
        # such directory.

    # Validate sanity.
#    die_unless_args_1_or_more\
#        'Expected one ownership string and optional pathnames.'
#
#    # If passed no paths, default to the current directory.
#    set_integers_to_arg_nonoption_count_and_index_first\
#        'arg_nonoption_count arg_nonoption_index_first'
#    (( arg_nonoption_count )) or {
#        :arg.append "$(get_dir)"
#
#        # Increment the number of passed arguments to ensure sanity below.
#        arg_nonoption_count+=1
#    }

    #FUXME: Call change_path_ownership_recursive_with_options() instead. This
    #is silly. Clearly, we were attempting to avoid the interactive query such
    #function leverages; since such query only pertains to CLI calls, however,
    #there's no tangible reason to *NOT* just call such function.
#    append_list_with_list_locally_from\
#        'ZESHY_OPTIONS_CHOWN ZESHY_OPTIONS_CHOWN_IF_RECURSIVE'
#    change_path_ownership "${@}"

    # Change such ownership.
#    run_code_with_options_configured\
#        'command chown' ZESHY_OPTIONS_CHOWN -- "${ownership}" "${(q)@}"

    # Validate sanity.
#    die_unless_args_1_or_more\
#        'Expected one ownership string and optional pathnames.'
#    integer arg_nonoption_count
#
#    # If passed no paths, default to the current directory and all paths in it.
#    set_integer_to_arg_nonoption_count arg_nonoption_count
#    (( arg_nonoption_count )) or :arg.append 

#   >>> remove_path_recursive "/battle/of/bannockburn"
#   rm: permission denied: /battle/of/bannockburn
