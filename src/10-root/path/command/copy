#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle path copying.
/---

#FIXME: It'd be *GREAT* to improve such functions with "pv" integration. There's
#basically no downside to adding "pv" into the mix (aside from slight
#computational overhead, but...) for *ALL* copy and move operations. Consider
#it, certainly.
#FIXME: Interesting. "rsync" could also be an option here, if installed:
#http://www.cyberciti.biz/faq/show-progress-during-file-transfer/

# ....................{ COPIERS                            }....................
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: boolean] copy_path(
    string source_pathname1, ...,
    string target_pathname)

Copy the passed source paths to the passed target path with the currently
configured `cp`-specific options (e.g., ${ZESHY_OPTIONS_CP}). See
copy_path_with_options() for further details.
/---
function copy_path() {
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    copy_path_with_options -- "${@}"
}

declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: boolean] copy_path_with_options(
    string cp_option1?, ...,
    string source_pathname1, ...,
    string target_pathname)

Copy the passed source paths to the passed target path with both the passed and
currently configured `cp`-specific options (e.g., ${ZESHY_OPTIONS_CP}). If any
source path does not exist, failure is reported.
/---
function copy_path_with_options() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    integer arg_nonoption_index_first

    # Move such paths.
    run_code_with_options_configured 'command cp' ZESHY_OPTIONS_CP "${(q)@}"

    # Print warnings for symbolic links broken by such move.
    set_integer_to_arg_nonoption_index_first arg_nonoption_index_first
    print_warning_if_symlink_broken_by_path_change\
        "${@[${arg_nonoption_index_first},-1]}"
}

# ....................{ COPIERS ~ recursive                }....................
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: boolean] copy_path_recursive(
    string source_pathname1, ...,
    string target_pathname)

Recursively copy the passed source paths to the passed target path with the
currently configured `cp`-specific options (e.g., ${ZESHY_OPTIONS_CP}). See
copy_path_with_options() for further details.
/---
function copy_path_recursive() {
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    copy_path_recursive_with_options -- "${@}"
}

declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: boolean]
    copy_path_recursive_with_options(
        string cp_option1?, ...,
        string source_pathname1, ...,
        string target_pathname)

Recursively copy the passed source paths to the passed target path with both the
passed and currently configured `cp`-specific options (e.g.,
${ZESHY_OPTIONS_CP}). See copy_path_with_options() for further details.
/---
function copy_path_recursive_with_options() {
    # Copy such paths. For efficiency, avoid printing warnings for symbolic
    # links broken by such copy. (The number of copied files to be tested for
    # such "brokenness" often exceeds tolerable limits, thanks to recursion.)
    die_unless_args_2_or_more\
        'Expected optional "cp" options, one or more source pathnames, and one target pathname.'
    run_code_with_options_configured 'command cp'\
        'ZESHY_OPTIONS_CP ZESHY_OPTIONS_CP_IF_RECURSIVE' "${(q)@}"
}

# ....................{ COPIERS ~ deep                     }....................
# Avoid defining copy_path_deep_with_options(), as such function is unlikely
# to be called interactively.

#FIXME: Terrible nomenclature. Rename copy_path_deep() to
#copy_path_symlink_targets:() and ${ZESHY_OPTIONS_CP_IF_DEEP} to
#${ZESHY_OPTIONS_CP_SYMLINK_TARGETS}.
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: boolean] copy_path_deep(
    string source_pathname1, ...,
    string target_pathname)

Copy the passed source paths to the passed target path *deeply* (i.e., copying
source symbolic link _targets_ rather than _links_) with the currently
configured `cp`-specific options (e.g., ${ZESHY_OPTIONS_CP}). See
copy_path_with_options() for further details.
/---
function copy_path_deep() {
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    append_list_with_list_locally_from\
        'ZESHY_OPTIONS_CP ZESHY_OPTIONS_CP_IF_DEEP'
    copy_path_with_options "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#    die_unless_args_2_or_more\
#        'Expected one or more source pathnames and one target pathname.'
#    run_code_silent_with_options 'command cp'\
#        'ZESHY_OPTIONS_CP ZESHY_OPTIONS_CP_IF_RECURSIVE' -- "${(q)@}"

    # Validate sanity.
#    die_unless_args_2_or_more\
#        'Expected one or more source pathnames and one target pathname.'
#
#    # Copy such paths. Since this never copies symbolic links, avoid testing for
#    # broken symbolic links.
#    run_code_with_options_configured 'command cp'\
#        'ZESHY_OPTIONS_CP ZESHY_OPTIONS_CP_IF_DEEP' -- "${(q)@}"

    # Validate sanity. If passed only one source path, default the
    # target path to the current directory.
#    die_unless_args_2_or_more\
#        'Expected optional "cp" options, one or more source pathnames, and one target pathname.'
#    integer arg_nonoption_index_first
#    set_integer_to_arg_nonoption_index_first arg_nonoption_index_first
#
#    # Copy such paths, printing warnings for symbolic links broken by such copy.
#    run_code_with_options_configured 'command cp' ZESHY_OPTIONS_CP "${(q)@}"
#    print_warning_if_symlink_broken_by_path_change\
#        "${@[${arg_nonoption_index_first},-1]}"

#    die_unless_args_2_or_more\
#        'Expected one or more source pathnames and one target pathname.'
#    run_code_silent_with_options 'command cp' ZESHY_OPTIONS_CP -- "${(q)@}"
#    print_warning_if_symlink_broken_by_path_change "${@}"

#Silently copy the passed source paths to the passed target path. If any source
#path does not exist, throw an exception. If any source path is a symbolic link
#broken after such copy, print a warning.

#   set_integers_to_arg_nonoption_count_and_index_first\
#       'arg_nonoption_count arg_nonoption_index_first'
#   (( arg_nonoption_count == 1 )) and :arg.append "$(get_dir)"

#FUXME: "deeply" is poorly descriptive. How about copy_path_symbolic_link_target
#FUXME: Implement copy_path_recursive_with_options().
#declare_function '
#void copy_path_recursive(
#  string source_pathname1, string source_pathname2, ...,
#  string target_pathname)
#
#Silently copy the passed source paths to the passed target path recursively. See
#copy_path() for further details.
#'
#function copy_path_recursive() {
#    #FUXME: O.K.; great idea, but I'd like to implement a _from<>-style alias
    #implementing such local list appending for us. I believe I specced out such
    #an alias elsewhere; can we hunt it down? Should be prefixed by
    #append_list_*(), or some such.

    # Defer to copy_path() by temporarily appending recursive options to the
    # global list accessed by such function.
#    list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_OPTIONS_CP[@]}" )
#    list ZESHY_OPTIONS_CP; ZESHY_OPTIONS_CP=(
#        "${zeshy_cp_options[@]}"
#        "${ZESHY_OPTIONS_CP_IF_RECURSIVE[@]}"
#    )
#    copy_path "${@}"

#   die_unless_args_2_or_more\
#       'expected at least one source pathname and one target pathname'
#   run_code_silent_with_options 'command cp'\
#       'ZESHY_OPTIONS_CP ZESHY_OPTIONS_CP_IF_RECURSIVE' -- "${(q)@}"
#   print_warning_if_symlink_broken_by_path_change "${@}"
#}

    #FUXME: Shoddy. For portability, this should use a new
    #'ZESHY_OPTIONS_CP_IF_DEEP' config list.
#   list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_OPTIONS_CP[@]}" )
#   list ZESHY_OPTIONS_CP; ZESHY_OPTIONS_CP=( "${zeshy_cp_options[@]}" -L )

# shallowly (i.e., copying source symbolic links rather than the targets of such links)
    # Defer to copy_path() by temporarily appending recursive options to the
    # global list accessed by such function.
#   list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_OPTIONS_CP[@]}" )
#   list ZESHY_OPTIONS_CP; ZESHY_OPTIONS_CP=(
#       "${zeshy_cp_options[@]}"
#       "${ZESHY_OPTIONS_CP_IF_RECURSIVE[@]}"
#   )
#   copy_path "${@}"

#FUXME: Implementation isn't quite right: we only want to ignore the path if not
#found; if the path is found but is *NOT* empty, we still want to throw an exception.

#(i.e., contains at least one subdirectory or file).
#   run_code_with_options 'command rmdir' ZESHY_OPTIONS_RMDIR "${(q)@}"

#Remove all passed directories if all such directories exist and
#are empty  or throw an exception if at
#least one such directory  See
#remove_dir_empty_if_found() for an alternative throwing no such exception.

#   run_code_silent run_code_with_options 'command rm'\
#       'ZESHY_OPTIONS_RM ZESHY_OPTIONS_RM_IF_SHELL_NONINTERACTIVE' -- "${(q)@}"

#       if set_integer_to_arg_nonoption_count __nonoptions__ and
#           (( 1 <= __nonoptions__ && __nonoptions__ <= 3 ))
    # Validate sanity.
#   die_unless_args 'expected at least one filename'

    # Since removal options depend on the number of such arguments,
    # run_code_with_options() is insufficient. Implement such logic manually.
#   string option_list_names='ZESHY_OPTIONS_RM'
#   is_shell_interactive && {
#       if is_args_1_to_3
#       then option_list_names+=' ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3'
#       else option_list_names+=' ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'
#       fi
#   }

    # Remove such files.
#   run_code_with_options_configured\
#       'command rm' "${option_list_names}" -- "${(q)@}"

#FUXME: This function should *NOT* be called by copy_file() or move_file() --
#only by the subsidiary copy_file_with_options_configured()-style functions.
