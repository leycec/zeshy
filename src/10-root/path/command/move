#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *path movement* (i.e., renaming).
/---

#FIXME: "zmv" might not be as horrific as I recall it being. To quote Milkman:
#
#    "Perhaps you know zmv already, but it can be a bit nasty. E.g. to rename all
#    *.lis files to *.txt, the manual recommends:
#        zmv '(*).lis' '$1.txt'
#    However, with the awesome -W mode, you can write this instead:
#        zmv -W '*.lis' '*.txt'
#    If you are not sure what happens, use the dry-run mode first (-n)."
#
#Now take the latter concept of "zmv -W '*.lis' '*.txt'", prefix it with a
#"noglob"-style alias, and add option "-n", giving us:
#
#    alias_cli_abbreviation {mvg}lob='noglob zmv -nW'
#
#Call such alias like so:
#
#    >>> mvg *.lis *.txt
#
#What happens? Does it work reasonably well? If so, this could be a first stab
#at the "mv-pcre" replacement I've been globbing for. Of course, the linchpin is
#whether such alias interacts sanely with the recursive operator "**". For
#example, what does the following do? I'm guessing "not terribly much" or
#"something totally horrible":
#
#    >>> mvg **/*.lis *.txt

# ....................{ MOVERS                             }....................
:func.doc <<'/---'
[stdout: string, stderr: string, status: boolean] move_path(
    string source_pathname1, ...,
    string target_pathname)

Move the passed source paths to the passed target path with the currently
configured "mv"-specific options (e.g., ${ZY_OPTIONS_MV}). See
move_path_with_options() for further details.
/---
function move_path() {
    move_path_with_options -- "${@}"
}

:func.doc <<'/---'
[stdout: void, stderr: void, status: boolean] move_path_silent(
    string source_pathname1, ...,
    string target_pathname)

Silently move the passed source paths to the passed target path with the
currently configured `mv`-specific options (e.g., ${ZY_OPTIONS_MV}). If any
source path does not exist, failure is reported.
/---
function move_path_silent() {
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    run_code_silent_with_options 'command mv' ZY_OPTIONS_MV -- "${(q)@}"
}

:func.doc <<'/---'
[stdout: string, stderr: string, status: boolean] move_path_with_options(
    string mv_option1?, ...,
    string source_pathname1, ...,
    string target_pathname)

Move the passed source paths to the passed target path with both the passed and
currently configured "mv"-specific options (e.g., ${ZY_OPTIONS_MV}). If any
source path does not exist, failure is returned. If any source path is a
symbolic link broken after such move, a warning is printed.
/---
function move_path_with_options() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    integer arg_nonoption_index_first

    # Move such paths.
    run_code_with_options_configured 'command mv' ZY_OPTIONS_MV "${(q)@}"

    # Print warnings for symbolic links broken by such move.
    :args.Nonoption_first_index arg_nonoption_index_first
    print_warning_if_symlink_broken_by_path_change\
        "${@[${arg_nonoption_index_first},-1]}"
}

# --------------------( WASTELANDS                         )--------------------
#    :args.Nonoption_count,first_index\
#        'arg_nonoption_count arg_nonoption_index_first'
#    (( arg_nonoption_count == 1 )) and :arg.append "$(get_dir)"

    #FUXME: If only one non-option argument passed, append the current directory
    #to the current argument list.
    #FUXME: Only pass non-option arguments. We get the desired index above, so
    #simply use it here.

# "shallowly" (i.e., moving source symbolic links rather than the targets of such links)
