#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core path functionality.
/---

#FIXME: It'd be nice to incorporate "zmv", for those who want and/or expect it.
#"zmv" is a built-in shell function applying extended glob patterns to
#the usual "mv" command, thus allowing batch renaming of file- and path-names.
#(Use option "-n" before permanently applying any such pattern, so as to
#prete[n]d- apply the pattern as initial "trial run;" or, use option "-i" to
#force "zmv" to [i]nteractively ask your permission to perform each rename.)
#For example: zmv -n '(*).txt' '$1.xtx'  # renames files ending in 'txt' to
#end in 'xtx'. Naturally, "zmv" is an autoloadable function: e.g.,
#autoload -U zmv

# ....................{ GETTERS                            }....................
#FIXME: Refactor into setters, with mute and minor apologies.

:func.doc <<'/---'
string get_path_basename(string pathname)

Get the basename of the passed path. See :set_string_to_path_basename() for
further details.
/---
function get_path_basename() {
    # For simplicity, inline such implementation rather than deferring to
    # :set_string_to_path_basename().
    die_unless_arg 'Expected one pathname.'
    :stdout.echo "${1:t}"
}

:func.doc <<'/---'
string get_path_dirname(string pathname)

Get the dirname of the passed path (i.e., sans basename).
/---
function get_path_dirname() {
    die_unless_arg 'Expected one pathname.'
    :stdout.echo "${1:h}"
}

# ....................{ GETTERS ~ size                     }....................
:func.doc <<'/---'
integer get_path_size(string pathname)

Get the size in bytes of the passed path. If such path is:

* A directory, this is the recursive disk usage reported by the `du` command.
* A symbolic link, this is the non-dereferenced file size of such link. To get
  the dereferenced file or directory size of the non-symbolic target of such
  link, explicitly call :path.canonicalize() prior to this function.
* Anything else (e.g., device node, plain file), this is the typical file size
  reported by the "stat" command.

Regardless of type, such size is always the physical space allocated to such
path by the filesystem containing such path and _not_ the logical space such
path pretends to consume (e.g., due to contiguous runs of logical zeroes in the
case of sparse files or redirection in the case of symbolic links).
/---
function get_path_size() {
    # Validate sanity.
    die_unless_arg 'Expected one pathname.'
    :str pathname="${1}"
    die_unless_path "${pathname}"

    # If the passed path is a directory, get its recursive disk usage.
    if { is_dir "${pathname}" } {
        #FIXME: Extract to a new :set_int_to_dir_size() function and call here.
        get_string_word "$(run_code_with_options 'command du'\
            'ZY_OPTIONS_DU ZY_OPTIONS_DU_IF_GETTING_DIR_SIZE' --\
            "${(q)pathname}")" 1
    # Else, the passed path is a non-directory file (e.g., symbolic link,
    # device node, plain file). Dismantled, this is:
    #
    # * "-L", preserving rather than dereferencing symbolic links. (In contrast
    #   to some commands, zstat() dereferences by default.)
    # * "+size", expanding to such file's size in bytes.
    } else {
        #FIXME: Extract to a new :set_int_to_file_size() function and call here.
        zstat -L +size "${pathname}"
    }
}

#FIXME: Shift to "path" and complete implementation.
#function remove_list_nonpaths() {
    # Filter non-extant paths from the passed paths. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed path.
    # * "(e:...:), excluding paths failing the test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant paths.
#    :args.set "${^@}"(e:'[[ -e "${REPLY}" ]]':)
#}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
void :set_string_to_path_basename(string string_name, string pathname)

Set the passed string variable to the passed path's *basename* (i.e., substring
following the last `/` in such path if containing at least one `/` or such path
otherwise).
/---
function :set_string_to_path_basename() {
    die_unless_args_2 'Expected one string name and one pathname.'
    :Str.set "${1}" "${2:t}"
}

:func.doc <<'/---'
void :set_string_to_path_dirname(string string_name, string pathname)

Set the passed string variable to the passed path's *dirname* (i.e., substring
preceding the last `/` in such path if containing at least one `/` or such path
otherwise).
/---
function :set_string_to_path_dirname() {
    die_unless_args_2 'Expected one string name and one pathname.'
    :Str.set "${1}" "${2:h}"
}

# ....................{ REMOVERS                           }....................
:func.doc <<'/---'
void :remove_path_basename(string string_name)

Remove the basename from the passed string variable in-place, reducing such
string to its dirname.
/---
function :remove_path_basename() {
    die_unless_arg 'Expected one string name.'
    :str string_name__rpb="${1}"
    :Str.die_unless "${string_name__rpb}"
    :Str.set "${string_name__rpb}" "${(P)string_name__rpb:h}"
}

:func.doc <<'/---'
void :remove_path_dirname(string string_name)

Remove the dirname from the passed string variable in-place, reducing such
string to its basename.
/---
function :remove_path_dirname() {
    die_unless_arg 'Expected one string name.'
    :str string_name__rpd="${1}"
    :Str.die_unless "${string_name__rpd}"
    :Str.set "${string_name__rpd}" "${(P)string_name__rpd:t}"
}

# --------------------( WASTELANDS                         )--------------------
#. Canonicalization
#reduces this path to standard form, such that two canonical paths are equal
#if and only if they represent the same file. Note that this is not
#necessarily the case with non-canonical paths (e.g., `/tmp` and
#`/tmp/../tmp/./` are not equal but represent the same directory). Specifically:
#
#* Expand every pseudo-directory component (e.g., `./`, `../`) iteratively,
#  until the resulting path contains no pseudo-directory components.
#* Expand every symlink in every component of the passed path recursively,
#  until the resulting path contains no symlinks.

#    # Dismantled, this is:
#    #
#    # * "-s", a summary of the form "4815162342 /the/numbers".
#    # * "-B1", in bytes rather than the default kilobytes.
#   then get_string_word "$(command du -s -B1 "${pathname}")" 1
# ....................{ ALIASES                            }....................
#alias_cli_abbreviation {c}p{r}ecursive='copy_path_recursive'
#alias_cli_abbreviation {r}m{r}ecursive='remove_path_recursive'
#alias_cli_substitution {c}p='copy_path'
#alias_cli_substitution {m}v='move_path'

#   string canonical_pathname=( "${pathname}"(:A) )
#   is_string_nonempty "${canonical_pathname}" or :die "\"${pathname}\" "
# recursive path creation or change of path content, filename, or
# permissions. This function is considerably more costly than :path.mtime().
# not reflect
# file or .
#
# * File, this is the most recent of file creation or change of file content or
#   permissions.
# * Directory, this is the most recent of directory creation or change of
#   directory content or permissions.
# (i.e., file content for files and the list of files and subdirectories for
# directories), filename, or permissions. For directories, mtime does *NOT*
# reflect change of file or subdirectory content or permissions.
    # Move paths.
    #FUXME: Call a helper function testing for broken symbolic links. See above.
    # If only two arguments were passed, print a warning if the latter is a
    # broken symbolic link.

    # Otherwise, print warnings for all passed source paths whose copies in the
    # last passed argument are broken symbolic links.
#   for source_pathname ("${@[1,-2]}") {
#   :is_link_symbolic "${1}" and
#       :is_symlink_broken "${filename}" and {
#           string target; target="$(get_symlink_target "${filename}")"
#           :warning.print "symbolic link \"${filename}\" target \"${target}\" not found"
#       }
#   }
#   fi
#FUXME: These could use copy_path() and copy_path_recursive() functions with
#corresponding globals ${ZY_OPTIONS_CP} and so forth.
#alias_cli_abbreviation cr='cp --archive --recursive --verbose --update'

# If the former is a
# symbolic link, copy the physical path to which that symbolic link
# transitively links rather than the shallow symbolic link itself (i.e., perform a deep rather than shallow copy).
#If interactive and the
# current user has not reconfigured ${ZY_OPTIONS_CP_IF_SHELL_INTERACTIVE[@]},
# confirm such copy for each already extant target path.
#   string first_match="$(print ${^@}(${glob_qualifiers}[1]))"
#   if is_string_nonempty "${first_match}"
#   then print     "${first_match}"
#   else :failure.report
#   fi
#alias_cli c='copy_path'
#alias_cli cp='copy_path'
#   string filetype="$(remove_string_prefix_matching_glob '*.')"
#   string filetype="${filename##*.}"

    # If the passed filename has no filetype, remove_string_prefix_matching_glob() failed to
    # match and hence returned the filename itself. If this is the case, return the empty string instead.
#   if is "${filetype}" == "${filename}" si or print "${filetype}"

    # Target filetype, supporting two-part "tar" designators. The regular expression
    # matches a prefixing ".", discarded via "#." below for brevity.
#   is "${filename}" =~ '\.(tar\.)?([^.]+)$' si or
#       :die "\"${filename}\" has no identifying filetype"
#   filetype="$(remove_string_prefix "${MATCH}" '.')"

# string get_file_type(string filename)
#
# Get the filetype of the passed filename. If this filename has no filetype,
# this is the empty string. Note the only matches the rightmost filetype: e.g.,
#
#     >>> get_file_type 'hastur.tar.gz'
#     gz
#get_file_type() {
#    die_unless_arg 'expected one filename'
#    string filename="${1}"
#    string filetype="${filename##*.}"
#
#    # If this filename has no filetype, then the prior parameter expansion
#    # matched the filename itself, in which case we test for and ignore this.
#    is "${filetype}" == "${filename}" si or print "${filetype}"
#
#    # Target filetype, supporting two-part "tar" designators. The regular expression
#    # matches a prefixing ".", discarded via "#." below for brevity.
#    is "${filename}" =~ '\.(tar\.)?([^.]+)$' si or
#        :die "\"${filename}\" has no identifying filetype"
#    filetype="$(remove_string_prefix "${MATCH}" '.')"
#}

    # The difficulty of removing specific indices from ${@} prompts us to copy ${@}
    # into a local list and operate on that, instead.
#   list extant_paths; extant_paths=( "${@}" )
#   extant_paths

#   list cp; cp=( command cp "${ZY_OPTIONS_CP[@]}" )
#   if :shell.is_interactive
#   then "${cp[@]}" "${ZY_OPTIONS_CP_IF_SHELL_INTERACTIVE[@]}"     -- "${@}"
#   else "${cp[@]}" "${ZY_OPTIONS_CP_IF_SHELL_NONINTERACTIVE[@]}" -- "${@}"
#   fi
#   list cp; cp=( command cp "${ZY_OPTIONS_CP[@]}" )
#   if :shell.is_interactive
#   then "${cp[@]}" "${ZY_OPTIONS_CP_IF_SHELL_INTERACTIVE[@]}"     -L -- "${@}"
#   else "${cp[@]}" "${ZY_OPTIONS_CP_IF_SHELL_NONINTERACTIVE[@]}" -L -- "${@}"
#   fi

#FUXME: When copying and moving symbolic links, we should verify afterwards that
#the target symbolic link is still valid. If it isn't, we should :warning.print to stderr
#but probably not :die. We'll want a new function for this; courtesy the mailing
#list, here's how we test for broken symbolic links. Cool:
#
#  # ...where "mylinktest" is the filename of the link to test. Replace with
#  # a parameter expansion, of course.
#  broken=( mylinktest(N-@) )
#
#  if (( ${#broken} ))
#  then print mylinktest is a broken symbolic link
#  else print mylinktest is not a symbolic link or is not broken
#  fi
#
#See http://www.zsh.org/mla/users/2005/msg00394.html for helpful explanation.

        #FUXME: Pretty sure there's a better way to do this by substituting "-i" 
        #for "-I" in "rm" with parameter expansion flags. Investigate.
#       elif is_list_contains rm '-i'
#       then "${rm[@]}" -I -- "${@}"
#       else "${rm[@]}"    -- "${@}"

        #FUXME: Not right. We should only replace an existing option "-i" with
        #"-I" rather than indiscriminantly appending "-I". 
#   string cp_option1, string cp_option2, ...,
