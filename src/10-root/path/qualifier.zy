#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *unglobbed qualifiers* (i.e., `(#q`- and `)`-delimited expressions
suffixing one or more pathnames).

== See Also ==

* Section ``Glob Qualifiers'' of `man zshexpn`, documenting such qualifiers.
* @{glob/path/qualifier}, a parcel handling path qualifiers prefixed by path-
  specific globs and hence requiring early-time compilation of function
  attribute `<globbable>`.
/---

#FIXME: Note that, under zsh 5.0.6 (which we should probably now hard-require):
#
#    "If the option EXTENDED_GLOB is in effect, it is possible to force
#     globbing within conditional code using the [[ ... ]] syntax by flagging
#     that a certain string is a glob using the (#q) glob qualifier syntax.
#     The resulting glob is treated as a single argument. For example,
#     [[ -n *.c(#qN) ]] tests whether there are any .c files in the current
#     directory."
#
#That's right! ":is -n *.c(#qN) :si" now does the right thing. No temporary
#lists are required, which is pretty sweet.

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] is_path_matches_qualifier(
    string pathname1, ...,
    string glob_qualifier)

Report success if all passed paths match the passed glob qualifier. See
:set_list_to_glob_qualified_paths() for further details: e.g.,

.is_path_matches_qualifier()
==========================================
[source]
------------------------------------------
>>> string on_dependency=\
...    "We live in a society exquisitely dependent on science and technology, in
...     which hardly anyone knows anything about science and technology. This is
...     a clear prescription for disaster. It's dangerous and stupid for us to
...     remain ignorant about global warming, say, or ozone depletion, toxic and
...     radioactive wastes, acid rain. Jobs and wages depend on science and
...     technology... What about fusion, supercomputers, abortion, massive
...     reductions in strategic weapons, addiction, high-resolution TV, airline
...     and airport safety, food additives, animal rights, superconductivity,
...     Midgetman vs. rail-garrison MX missiles, going to Mars, finding cures
...     for AIDS and cancer? How can we decide national policy if we don't
...     understand the underlying issues?"
>>> make_file on_ignorance on_understanding
>>> is_path_matches_qualifier on_ignorance on_understanding '-L0' and
...     get_string_line "${on_dependency}" 1
We live in a society exquisitely dependent on science and technology, in
------------------------------------------
==========================================
/---
function is_path_matches_qualifier() {
    # Validate sanity.
    die_unless_args 'Expected one or more pathnames.'
    :str qualifier="${@[-1]}"
    :list pathnames
    pop_arg

    # Filter non-regular files from such paths.
    set_list_to_paths_matching_qualifier pathnames "${@}" "${qualifier}"
#   :str.output "pathnames: ${*}; filtered: ${pathnames[*]}"

    # If no such paths were excluded, return success; else, failure. For
    # efficiency, inline such implementation.
    (( ${#pathnames} == ${#@} ))
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor into :set_string_to_path_matching_qualifier_first_if_found().

:func.doc <<'/---'
[stdout: string, status: boolean] get_path_matching_qualifier_first_if_found(
    string pathname1, ...,
    string glob_qualifier)

Get the first passed path that exists _and_ matches the passed glob qualifier or
return failure if no such path exists. See
:set_list_to_glob_qualified_paths() for further details: e.g.,

.get_path_matching_qualifier_first_if_found()
==========================================
[source]
------------------------------------------
>>> get_path_matching_qualifier_first_if_found /etc/[a-z]##tab u0
/etc/crontab
------------------------------------------
==========================================
/---
function get_path_matching_qualifier_first_if_found() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more pathnames and one glob qualifier.'
    :list pathnames

    # If at least one pathname matches, get the first; else, fail.
    set_list_to_paths_matching_qualifier pathnames "${@}"
    is_list_nonempty pathnames and :str.output "${pathnames[1]}"
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
void set_list_to_paths_matching_qualifier(
    string list_name,
    string pathname1, ...,
    string glob_qualifier)

Set the passed list to the subset of passed paths that exist _and_ match the
passed glob qualifier. See :set_list_to_glob_qualified_paths() for
further details: e.g.,

.set_list_to_paths_matching_qualifier()
==========================================
[source]
------------------------------------------
>>> list system_kernel_files
>>> set_list_to_paths_matching_qualifier\
...      system_kernel_files /sys/kernel/[a-z]## -.u0^w
>>> :str.output "${system_kernel_files[1,3]}"
/sys/kernel/fscaps /sys/kernel/notes /sys/kernel/vmcoreinfo
------------------------------------------
==========================================
/---
function set_list_to_paths_matching_qualifier() {
    # Validate sanity.
    die_unless_args_3_or_more\
        'Expected one list name, one or more pathnames, and one glob qualifier.'
    :str list_name__sltpmq="${1}" qualifier__sltpmq="${@[-1]}" glob__sltpmq
    :list pathnames__sltpmq
    shift_arg
    pop_arg

    # List of pathnames to be matched (as a named variable for use below).
    pathnames__sltpmq=( "${@}" )

    # Qualify an empty glob with such qualifiers.
    :qualify_glob glob__sltpmq "${qualifier__sltpmq}"

    # Set such list.
    set_list_to_evaluation ${list_name__sltpmq}\
        '${^pathnames__sltpmq}${~glob__sltpmq}'
}

# --------------------( WASTELANDS                         )--------------------
    # Delimit such qualifier, if not already.
    # qualifier__sltpmq="$(convert_string_to_glob_qualifier\
    #     "${qualifier__sltpmq}")"
#   :str.output "pathnames: ${pathnames__sltpmq}"
#   :str.output "qualifier: ${qualifier__sltpmq}"
