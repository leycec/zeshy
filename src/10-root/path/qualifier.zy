#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Unglobbed qualifiers* (i.e., `(#q`- and `)`-delimited expressions
suffixing one or more pathnames).

== See Also ==

* Section ``Glob Qualifiers'' of `man zshexpn`, documenting these qualifiers.
* zy://10-root/glob/path/qualifier.zy, a parcel handling path qualifiers
  prefixed by path-specific globs.
/---

#FIXME: Note that, under zsh 5.0.6 (which we should probably now hard-require):
#
#    "If the option EXTENDED_GLOB is in effect, it is possible to force
#     globbing within conditional code using the [[ ... ]] syntax by flagging
#     that a certain string is a glob using the (#q) glob qualifier syntax.
#     The resulting glob is treated as a single argument. For example,
#     [[ -n *.c(#qN) ]] tests whether there are any .c files in the current
#     directory."
#
#That's right! ":is -n *.c(#qN) :si" now does the right thing. No temporary
#lists are required, which is pretty sweet.

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_path_matches_qualifier(+:str pathnames :str glob_qualifier)

Report success if all passed paths match the passed glob qualifier.

== See Also ==

* Paths.^=().

== Examples ==

.is_path_matches_qualifier()
==========================================
[source]
------------------------------------------
>>> :str on_dependency=\
... "We live in a society exquisitely dependent on science and technology, in
...  which hardly anyone knows anything about science and technology. This is
...  a clear prescription for disaster. It's dangerous and stupid for us to
...  remain ignorant about global warming, say, or ozone depletion, toxic and
...  radioactive wastes, acid rain. Jobs and wages depend on science and
...  technology... What about fusion, supercomputers, abortion, massive
...  reductions in strategic weapons, addiction, high-resolution TV, airline
...  and airport safety, food additives, animal rights, superconductivity,
...  Midgetman vs. rail-garrison MX missiles, going to Mars, finding cures
...  for AIDS and cancer? How can we decide national policy if we don't
...  understand the underlying issues?"
>>> :file.make on_ignorance on_understanding
>>> is_path_matches_qualifier on_ignorance on_understanding '-L0' :and
...     get_string_line "${on_dependency}" 1
We live in a society exquisitely dependent on science and technology, in
------------------------------------------
==========================================
/---
function is_path_matches_qualifier() {
    die_unless_args 'Expected one or more pathnames.'
    :str qualifier="${@[-1]}"
    :list pathnames
    :args.pop 1

    # Filter non-regular files from such paths.
    set_list_to_paths_matching_qualifier pathnames "${@}" "${qualifier}"
#   :stdout.echo "pathnames: ${*}; filtered: ${pathnames[*]}"

    # If no such paths were excluded, return success; else, failure. For
    # efficiency, inline such implementation.
    (( ${#pathnames} == ${#@} ))
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor into :set_string_to_path_matching_qualifier_first_if_found().

:func.doc <<'/---'
[stdout=:str status=:bool] get_path_matching_qualifier_first_if_found(
    +:str pathnames :str glob_qualifier)

First passed path that both exists and matches the passed glob qualifier _or_
report failure otherwise.

== See Also ==

* Paths.^=().

== Examples ==

.get_path_matching_qualifier_first_if_found()
==========================================
[source]
------------------------------------------
>>> get_path_matching_qualifier_first_if_found /etc/[a-z]##tab u0
/etc/crontab
------------------------------------------
==========================================
/---
function get_path_matching_qualifier_first_if_found() {
    die_unless_args_2_or_more\
        'Expected one or more pathnames and one glob qualifier.'
    :list pathnames

    # If at least one pathname matches, get the first; else, fail.
    set_list_to_paths_matching_qualifier pathnames "${@}"
    :List.is_nonempty pathnames :and :stdout.echo "${pathnames[1]}"
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void set_list_to_paths_matching_qualifier(
    :List list_name +:str pathnames :str glob_qualifier)

Set the passed list to the subset of passed paths that both exist _and_ match
the passed glob qualifier.

== See Also ==

* Paths.^=().

== Examples ==

.set_list_to_paths_matching_qualifier()
==========================================
[source]
------------------------------------------
>>> :list system_kernel_files
>>> set_list_to_paths_matching_qualifier\
...      system_kernel_files /sys/kernel/[a-z]## -.u0^w
>>> :stdout.echo "${system_kernel_files[1,3]}"
/sys/kernel/fscaps /sys/kernel/notes /sys/kernel/vmcoreinfo
------------------------------------------
==========================================
/---
function set_list_to_paths_matching_qualifier() {
    die_unless_args_3_or_more\
        'Expected one list name, one or more pathnames, and one glob qualifier.'
    :str list_name__sltpmq="${1}" qualifier__sltpmq="${@[-1]}" glob__sltpmq
    :list pathnames__sltpmq
    :args.shift 1
    :args.pop 1

    # List of pathnames to be matched (as a named variable for use below).
    pathnames__sltpmq=( "${@}" )

    # Qualify an empty glob with these qualifiers.
    :Glob.qualify glob__sltpmq "${qualifier__sltpmq}"

    # Set this list.
    :List.eval ${list_name__sltpmq} '${^pathnames__sltpmq}${~glob__sltpmq}'
}
