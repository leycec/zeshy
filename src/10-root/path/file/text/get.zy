#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Text file getters* (i.e., functions getting text file metadata and/or content).
/---

#FIXME: Refactor all such getters into setters.

# ....................{ GETTERS                            }....................
#FIXME: Excise this! *shudder*
:func.doc <<'/---'
:str get_file_text(:str filename)

Contents of the passed text file.

== Caveats ==

This function is typically called as a getter function from command substitution
and hence subshell of the current shell. While typically safe, this substitution
is _inherently_ unsafe in the general case, in which the passed path is a
shell-specific symbolic link. In such case, consider calling
:file.Text() instead.

== See Also ==

* :path.canonicalize().

== Examples ==

.get_file_text()
==========================================
[source]
------------------------------------------
>>> :str on_employment="
... Liberals say we should end employment discrimination. I say we should
... end employment. Conservatives support right-to-work laws. Following Karl
... Marx's wayward son-in-law Paul Lafargue, I support the right to be lazy.
... Leftists favor full employment. Like the surrealists – except that I'm
... not kidding – I favor full unemployment. Trotskyists agitate for
... permanent revolution. I agitate for permanent revelry. But if all the
... ideologues (as they do) advocate work – and not only because they plan
... to make other people do theirs – they are strangely reluctant to say so.
... They will carry on endlessly about wages, hours, working conditions,
... exploitation, productivity, profitability. They'll gladly talk about
... anything but work itself. These experts who offer to do our thinking for
... us rarely share their conclusions about work, for all its saliency in
... the lives of all of us. Among themselves they quibble over the details.
... Unions and management agree that we ought to sell the time of our lives
... in exchange for survival, although they haggle over the price. Marxists
... think we should be bossed by bureaucrats. Libertarians think we should
... be bossed by businessmen. Feminists don't care which form bossing takes
... so long as the bosses are women. Clearly these ideology-mongers have
... serious differences over how to divvy up the spoils of power. Just as
... clearly, none of them have any objection to power as such and all of
... them want to keep us working."
>>> write_file_with_string on_wage_slavery "${on_employment}"
>>> get_string_line "$(get_file_text on_wage_slavery)" 5
not kidding – I favor full unemployment. Trotskyists agitate for
------------------------------------------
==========================================
/---
function get_file_text() {
    die_unless_arg 'Expected one filename.'
    :str filename

    # Canonicalize such path. If such path is a symbolic link rather than text
    # file and we do *NOT* canonicalize such path from the former to latter,
    # attempting to index ${mapfile} by such path below fails with an error:
    # "get_file_text:21: mapfile[${filename}]: parameter not set". For safety,
    # prefer :set_string_to_path_canonical() to :path.canonicalize().
    :set_string_to_path_canonical filename "${1}"

    # Since symbolic links are *NOT* text files, test such path *AFTER*
    # canonicalizing such path.
    :file.text.die_unless "${filename}"

    #FIXME: Actually, we should probably benchmark this for sufficiently large
    #files. While "mapfile" should be the fastest, "cat" might gives it a run
    #for its money.
    #FIXME: Use @with_module_mapfile instead.

    # Get such text. While precompiled zsh module "mapfile" provides the most
    # efficient access to such text, recall the following techniques to also
    # suffice:
    #
    #     >>> cat -- "${filename}"
    #     >>> :stdout.echo "$(< "${filename}")"
    :load_module_mapfile
    {
        :stdout.echo "${mapfile[${filename}]}"
    } always {
        :unload_module_mapfile
    }
}

# ....................{ GETTERS ~ count                    }....................
#FIXME: If "wc" is *NOT* pathable (hey; it could happen, particularly on BusyBox
#systems), such functions should provide pure-zeshy analogues. Such analogues
#will be quite slow and hence only serve as fallbacks in the absence of "wc".

:func.doc <<'/---'
:int get_file_text_line_count(+:str filenames)

Total number of lines accumulated over all passed text files.
/---
function get_file_text_line_count() {
    die_unless_args 'Expected one or more filenames.'
    command wc -l -- "${@}"
}


:func.doc <<'/---'
:int get_file_text_word_count(+:str filenames)

Total number of words accumulated over all passed text files.
/---
function get_file_text_word_count() {
    die_unless_args 'Expected one or more filenames.'
    command wc -w -- "${@}"
}
