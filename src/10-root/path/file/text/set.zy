#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Text file setters* (i.e., functions setting variables to text file metadata
and/or content).
/---

# ....................{ SETTERS                            }....................
:func_ 'void :file.Text(:str filename :Str text_name) [
    var_name_suffix="__fT"]' :func{
    #FIXME: Since we'll be eliminating get_file_text(), shift its discussion
    #here.

    # Canonicalize this path. See get_file_text().
    :path.canonicalize filename__fT
    :file.text.die_unless "${filename__fT}"

    #FIXME: Use @with_module_mapfile instead.

    # Set such string to such file's contents. To avoid expensive string copies
    # on large files, inline such implementation. See :Str.set()
    # for further details.
    :load_module_mapfile
    {
        :noop "${(P)string_name__fT::=${mapfile[${filename__fT}]}}"
    } always {
        :unload_module_mapfile
    }
}:func <<'/---'
Set the string variable with the passed name to the contents of the passed text
file.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_short_lives on_generalized_nastiness=\
...    "Crowley had always known that he would be around when the world ended,
...     because he was immortal and wouldn't have any alternative. But he'd
...     hoped it would be a long way off.
...     Because he rather liked people. It was a major failing in a demon.
...     Oh, he did his best to make their short lives miserable, because that
...     was his job, but nothing he could think up was half as bad as the stuff
...     they thought up themselves. They seemed to have a talent for it. It was
...     built into the design, somehow. They were born into a world that was
...     against them in a thousand little ways, and then devoted most of their
...     energies to making it worse. Over the years Crowley had found it
...     increasingly difficult to find anything demonic to do which showed up
...     against the natural background of generalized nastiness. There had been
...     times, over the past millennium, when he'd felt like sending a message
...     back Below saying, Look, we may as well give up right now, we might as
...     well shut down Dis and Pandemonium and everywhere and move up here,
...     there's nothing we can do to them that they don't do themselves and they
...     do things we've never even thought of, often involving electrodes.
...     They've got what we lack. They've got imagination. And electricity, of
...     course.
...     One of them had written it, hadn't he . . . \"Hell is empty, and all the
...     devils are here.\""
>>> write_file_with_string  on_empty_hell "${on_generalized_nastiness}"
>>> :set_string_to_file_text on_short_lives on_empty_hell
>>> get_string_line "${on_short_lives}" -1
devils are here."
------------------------------------------
==========================================
/---

:func.doc <<'/---'
:void set_list_to_file_text_lines(:str list_name :str filename)

Set the passed list variable to the contents of the passed text file split on
newlines. Each item of such list is thus a line of such file (in the exact same
order): e.g.,

.set_list_to_file_text_lines()
==========================================
[source]
------------------------------------------
>>> :list on_creeds
>>> :str on_satanism=\
...    "Most of the members of the convent were old-fashioned Satanists, like
...     their parents and grandparents before them. They'd been brought up to
...     it and weren't, when you got right down to it, particularly evil. Human
...     beings mostly aren't. They just get carried away by new ideas, like
...     dressing up in jackboots and shooting people, or dressing up in white
...     sheets and lynching people, or dressing up in tie-dye jeans and playing
...     guitars at people. Offer people a new creed with a costume and their
...     hearts and minds will follow. Anyway, being brought up as a Satanist
...     tended to take the edge off it. It was something you did on Saturday
...     nights. And the rest of the time you simply got on with life as best you
...     could, just like everyone else."
>>> write_file_with_string on_costumes "${on_satanism}"
>>> set_list_to_file_text_lines on_creeds on_costumes
>>> :stdout.echo "${on_creeds[5]}"
dressing up in jackboots and shooting people, or dressing up in white
------------------------------------------
==========================================
/---
function set_list_to_file_text_lines() {
    die_unless_args_2 'Expected one list name and one filename.'
    :str list_name__sltftl="${1}" filename__sltftl="${2}"
    :List.die_unless "${list_name__sltftl}"

    # Canonicalize this path. See :file.Text().
    :path.canonicalize filename__sltftl
    :file.text.die_unless "${filename__sltftl}"

    #FIXME: Use @with_module_mapfile instead.

    # Set such list to such file's lines. To avoid expensive string copies on
    # large files, inline such implementation. See
    # set_list_to_string_split_on_newline() for further details.
    :load_module_mapfile
    {
        eval ${list_name__sltftl}'=(
            "${(@f)${mapfile[${filename__sltftl}]}}" )'
    } always {
        :unload_module_mapfile
    }
}

# ....................{ SETTERS ~ dir                      }....................
:func.doc <<'/---'
void set_list_to_dir_files_text(string list_name, string dirname)

Set the passed list to the paths of all text files directly residing in the
passed directory.
/---
function set_list_to_dir_files_text() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one dirname.'
    :str list_name__sltdft="${1}" dirname__sltdft="${2}"
    :List.die_unless "${list_name__sltdft}"
    :dir.die_unless "${dirname__sltdft}"

    # Set such list. For efficiency, manually implement the test for such glob
    # qualifier. See get_file_encoding() and is_file_binary() for further
    # details. Dismantled, this is:
    #
    # * "-", resolving symbolic links to their transitive targets.
    # * ".", excluding non-plain files.
    # * "e{...}", excluding all files for which such test evaluates to false
    #   (i.e., binary files).
    :Paths.glob\
        "${list_name__sltdft}"\
        "${dirname__sltdft}/*"\
        "-.e:'[[ \$(file --brief --mime-encoding '\${REPLY}') != binary ]]':"
}
