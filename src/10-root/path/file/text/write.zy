#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Text writers* (i.e., functions either writing or appending to file contents).
/---

# ....................{ WRITERS                            }....................
:func.doc <<'/---'
:void write_file_with_string(:str filename :str text)

Overwrite the contents of the passed text file with the passed string if this
file exists or create a new file containing this string otherwise.

Since this function does _not_ interactively confirm this append, call this
function only where guaranteed to be non-destructive.
/---
function write_file_with_string() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one filename.'
    :str filename="${1}"

    # If such file's parent directory does *NOT* exist, make such directory.
    :make_dir_parent_if_not_found "${filename}"

    # Write such string to such file. zeshy disables zsh option "clobber", thus
    # requiring operator ">!" to force truncation of such file if nonzero.
    :stdout.echo "${2}" >!"${filename}"
}


:func.doc <<'/---'
:void append_file_with_string(:str filename :str text)

Append the passed string to the contents of the passed text file if this file
exists or create a new file containing this string otherwise.

Since this function does _not_ interactively confirm this append, call this
function only where guaranteed to be non-destructive.
/---
function append_file_with_string() {
    die_unless_args_2 'Expected one string and one filename.'
    :str filename="${1}"

    # If such file's parent directory does *NOT* exist, make such directory.
    :make_dir_parent_if_not_found "${filename}"

    # Append such string to such file. zeshy disables zsh option "clobber", thus
    # requiring operator ">>!" to force truncation of such file if nonzero.
    :stdout.echo "${2}" >>!"${filename}"
}

# ....................{ WRITERS ~ var                      }....................
:func.doc <<'/---'
:void :write_script_with_var_binding(:str filename +:str var_names)

Overwrite the passed file with *bindings* for the passed variables (i.e.,
exactly one or two `zsh` commands declaring _and_ defining each such variable).

This file will be prefixed by the `zsh` shebang line specific to the current
system (e.g., `#!/usr/bin/env zsh`) _and_ contain only low-level commands valid
under both `zsh` and `zeshy`; hence, this file will be a sourceable `zsh` _and_
`zeshy` script.

== Binding Deserialization ==

Consider calling :source_script() to *deserialize* these bindings (i.e., reverse
the serialization this function performs, by running this script and importing
the variables this script declares and defines back into the current shell).
/---
function :write_script_with_var_binding() {
    die_unless_args_2_or_more\
        'Expected one filename and one or more variable names.'
    :str filename="${1}" zsh_shebang_line var_bindings
    :args.shift 1

    # Shebang line prefixing zsh scripts for the current system.
    :set_string_to_zsh_shebang_line zsh_shebang_line

    # Such variable bindings.
    :Var.Binding "${@}" var_bindings

    # Write such shebang and bindings to such script.
    write_file_with_string\
        "${filename}"\
        "${zsh_shebang_line}${ZY_ASCII_NEWLINE}${var_bindings}"
}


:func.doc <<'/---'
:void :append_script_with_var_binding(:str filename +:str var_names)

Append the contents of the passed `zsh` script with bindings for the passed
variables.

== See Also ==

* :write_script_with_var_binding().
/---
function :append_script_with_var_binding() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one filename and one or more variable names.'
    :str filename="${1}"
    :args.shift 1

    # If such script already exists, append such bindings.
    if { :is_file "${filename}" } {
        # Get such bindings.
        :str var_bindings
        :Var.Binding "${@}" var_bindings

        # Append such bindings.
        append_file_with_string "${filename}" "${var_bindings}"
    # Else, such file does not exist. Call :write_script_with_var_binding() to prefix
    # the contents of such file with a shebang line.
    } else {
        :write_script_with_var_binding "${filename}" "${@}"
    }
}
