#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *text file replacers* (i.e., functions searching for and replacing text
file content).
/---

# ....................{ REPLACERS                          }....................
:func.doc <<'/---'
void :replace_file_text_matching_pcre_with_text(
    string filename1, ...,
    string pcre,
    string replacement_text)

Replace all substrings in the contents of the passed text files matching the
passed PCRE with the passed replacement substring. See
:replace_scalar_text_matching_pcre_with_text() for further details.
/---
function :replace_file_text_matching_pcre_with_text() {
    # Validate sanity.
    die_unless_args_3_or_more\
        'Expected one or more filenames, one PCRE, and one replacement substring.'
    string filename pcre="${@[-2]}" replacement="${@[-1]}"
    list pcres_with_replacement_texts
    pop_args_2

    # Defer to :replace_file_text_matching_list_pcres_with_texts() by
    # constructing a temporary list of such PCRE and replacement substring
    # suitable for passing to such function.
    pcres_with_replacement_texts=( "${pcre}" "${replacement}" )
    :replace_file_text_matching_list_pcres_with_texts\
        "${@}" pcres_with_replacement_texts
}

#FIXME: This *DEFINITELY* requires an example.
:func.doc <<'/---'
void :replace_file_text_matching_list_pcres_with_texts(
    string filename1, ...,
    string list_name_pcres_with_replacement_texts)

Iteratively replace all substrings in the contents of the passed text files
matching each item with an odd index (a PCRE) with the following item (a
replacement substring) in the passed list. See
:replace_scalar_text_matching_pcre_with_text() for further details.
/---
function :replace_file_text_matching_list_pcres_with_texts() {
    #FIXME: Actually define :die_unless_list_size_even().
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more filenames and one list name.'
    string list_name__rftmlpwt="${@[-1]}" filename__rftmlpwt pcre
    pop_arg
    :die_unless_list_size_even "${list_name__rftmlpwt}"

    # Provide the following code temporary access to map global ${mapfile}.
    :module.load_mapfile_start

    # Perform all such replacements in each such file before iterating to the
    # next file. While this could also be performed in the inverse order (i.e.,
    # performing each such replacement in all such files before iterating to the
    # next replacement), doing so prevents caching of file content and hence
    # harms efficiency.
    for filename__rftmlpwt ("${@}") {
        :file.text.die_unless "${filename__rftmlpwt}"

        #FIXME: Inefficient. Cache the contents of such file before
        #iterating across it. This is essential, and will probably be
        #unusable for real-world purposes without such optimization.

        # Replace such file contents. While we could call
        # :replace_map_key_value_text_matching_pcre_with_text() here, it
        # gains us little while adding a modest amount of overhead. Call
        # :replace_scalar_text_matching_pcre_with_text() directly, instead.
        for pcre__rftmlpwt replacement__rftmlpwt (
            "${(@P)list_name__rftmlpwt}") {
            :replace_scalar_text_matching_pcre_with_text\
                'mapfile[${filename__rftmlpwt}]'\
                "${pcre__rftmlpwt}"\
                "${replacement__rftmlpwt}"
        }
    }

    # Prevent subsequent code from accessing such global.
    :module.load_mapfile_stop
}

#FIXME: In lieu of unit tests...
function omom() {
    string filename="${HOME}/tmp/tamp.tamp"
    write_file_with_string\
        "${filename}"\
        '““““quote_double_right”””””quote_single_left‘‘‘‘‘quote_single_right’’’’’’border_top┈┈┈┈┈┈border_bottom┈┈┈┈┈┈┈border_left┋┋┋┋┋┋┋border_right┋┋┋┋┋┋┋'
    print_message_heading "${filename} (old)"
    print_file_text "${filename}"

    :replace_file_text_matching_pcre_with_text\
        "${filename}" '(quote_|border_).*?(quote_|border_)' '${match[1]}???${match[2]}'
    print_message_heading "${filename} (new)"
    print_file_text "${filename}"

    remove_file "${filename}"
}

# --------------------( WASTELANDS                         )--------------------
    # for filename ("${@}") {
    #     :file.text.die_unless "${filename}"

    #     # Replace such file contents. While we could call
    #     # :replace_map_key_value_text_matching_pcre_with_text() here, it gains us
    #     # little while adding a modest amount of overhead. Call
    #     # :replace_scalar_text_matching_pcre_with_text() directly, instead.
    #     run_code_with_mapfile:\
    #         ':replace_scalar_text_matching_pcre_with_text\
    #             mapfile[${filename}] "${pcre}" "${replacement}"'
    # }

# While we could call
    # :replace_map_key_value_text_matching_pcre_with_text() here, it gains us 
