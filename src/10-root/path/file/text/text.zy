#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Text files* (i.e., non-binary files).
/---

#FIXME: When printing text files to a terminal, perform syntax highlighting of
#source files. Calling :get_file_media_type() should efficiently suffice to decide
#this. There exist any number of source code highlighters; the three most
#popular as of this date are:
#
#* GNU source-highlighter (https://www.gnu.org/software/src-highlite).
#* Highlight (http://www.andre-simon.de/doku/highlight/en/langs.html).
#* Pygments (http://pygments.org/languages).
#
#Ideally, I'd like to default to Pygments if available. In practice, we should
#probably default to the highlighter that provides a command line option for
#either listing supported languages and/or filetypes *OR* for testing whether it
#supports the passed file(s).
#
#Happily, a helpful blog post has already been authored on how to robustly
#replace "cat" and "less" with zsh-specific Pygmentized versions. See:
#    http://www.jonathangross.de/2012/08/13/adding-a-little-color-to-your-command-line-life

# ....................{ EXCEPTIONS                         }....................
#FIXME: Refactor as follows:
#
#* Rename the die_unless_files_text() function to :file_text.die_unless().
#* Shift the body of this function into that :file_text.die_unless() function.
#* Remove this function entirely.
:func.doc <<'/---'
:void :file.text.die_unless(
    :str filename :str error_message='"${filename}" not a text file.')

Throw an exception with the passed message unless the passed text file exists.

== See Also ==

* is_file_text().
/---
function :file.text.die_unless() {
    die_unless_args_1_to_2\
        'Expected one pathname and optional error message.'
    :str filename="${1}"
    is_file_text "${filename}" :or :die "${2:-\"${filename}\" not a text file.}"
}


:func.doc <<'/---'
:void die_unless_files_text(+:str filenames)

Throw an exception with a stock message unless all passed text files exist.
/---
function die_unless_files_text() {
    die_unless_args 'Expected one or more filenames.'
    :str filename
    for  filename ("${@}") {
        :file.text.die_unless "${filename}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_file_text(:str pathname)

Report success only if the passed path is an existing *text file* (i.e.,
non-binary file), as decided by dynamically inspecting this file's contents with
the `file` command.

== Symbolic Links ==

Symbolic links are binary files and hence _not_ text files. Although most high-
level commands operating on text files accept text files as text files, low-
level commands (e.g., `zsh` module `mapfile`) do not. For safety, this function
thus complies with the technical definition of symbolic links as non-text files
by returning failure when passed symbolic links. If this is unacceptable,
consider calling die_if_link_symbolic() before calling this function.
/---
function is_file_text() {
    die_unless_arg 'Expected one pathname.'
    :str pathname="${1}"
    :is_file "${pathname}" :and :not is_file_binary "${pathname}"
}

# ....................{ TESTERS ~ text                     }....................
:func.doc <<'/---'
[status=:boolean] is_file_text_equals(:str filename :str text)

Report success only if the text file with the passed filename contains only the
passed text.
/---
function is_file_text_equals() {
    die_unless_args_2 'Expected one filename and one string.'
    :str filename="${1}" text="${2}"
    :file.text.die_unless "${filename}"

    # Test this text.
    is_string_equals "$(get_file_text "${filename}")" "${text}"
}


:func.doc <<'/---'
[status=:bool] is_file_text_contains(:str filename :str text)

Report success only if the text file with the passed filename contains the
passed text.
/---
function is_file_text_contains() {
    die_unless_args_2 'Expected one filename and one string.'
    :str filename="${1}" substring="${2}"
    :file.text.die_unless "${filename}"

    # Test this text.
    :str.contains "$(get_file_text "${filename}")" "${substring}"
}


#FIXME: Provide examples.
:func.doc <<'/---'
[status=:bool] is_file_text_matches_pcre_multiline(:str filename :str pcre)

Report success only if the text file with the passed filename matches the passed
PCRE with multiline matching enabled.
/---
function is_file_text_matches_pcre_multiline() {
    die_unless_args_2 'Expected one filename and one PCRE.'
    :str filename="${1}" pcre="${2}"
    :file.text.die_unless "${filename}"

    # Test this PCRE.
    is_string_matches_pcre_multiline "$(get_file_text "${filename}")" "${pcre}"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_file_text(+:str filenames)

Print a human-readable synopsis of the contents of all passed text files.
/---
function print_file_text() {
    #FIXME: This only applies to an eventual :print_file_text_with_options()
    #implementation and hence should be shifted there... when such function
    #exists.

    # If standard input appears to derive from a non-interactive source and
    # hence be readable without blocking, pass this input to "cat" and return.
    if { :stdin.is_noninteractive } {
        die_if_args
        :stdin | command cat | :stdin.page
        :success.report
    }

    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # Page each file's contents. Since "cat" fails to prepend a file's contents
    # with that file's filename, do so by iterating these files (rather than
    # passing all such files to a single "cat" call.) Fix this, scallywag "cat"!
    :str filename
    for     filename ("${@}") {
        print_message_heading '"'${filename}'" Contents'
        command cat -- "${filename}"
    } | :stdin.page
}


#FIXME: Rename to print_path_line_count_recursive(), as the implementation
#below demonstrates.
:func.doc <<'/---'
:int get_file_text_line_count_recursive(:str path)

Total number of lines corresponding to the file(s) in the passed path.

This number is calculated as follows:

* If no path is passed, default to the current directory.
* If this path is a directory, recursively sum the number of lines for files
  in this path ignoring binary files.
* If this path is a file:
** And this file is a PDF, use `pdftotext` to sum the number of text lines in
   the rendered PDF.
** Else, sum the number of lines in this file.
/---
function get_file_text_line_count_recursive() {
    die_unless_args_0_to_1 'Expected optional pathname.'
    :str find_path; file_path="${1:-$(get_dir)}"
    :int line_count

    if { is_dir "${find_path}" } {
        print_message_item_interactively\
            "Counting lines for all text files in \"${find_path}\"..."

        #FIXME: This is horrible. Replace dependency on "find" and "wc" with
        #pure homecooked zsh.
        # Recursively find all files *NOT*:
        #
        # * Non-files (e.g., directories, device files).
        # * Dotfiles and dot directories (e.g., ".cvs/", ".git/", ".svn/").
        # * Binary files. We borrow this expression from is_file_text().
        line_count="$(find "${find_path}"\
            -type d -iname '*test*' -prune -o\
            -type f \( ! -regex '.*/\..*' \)\
            $(is_file_text_find_compatible)\
            -exec wc -l {} \; |\
            awk '{ total += \$1 } END { print total }')"
    } elif { :is_file "${find_path}" } {
        print_message_interactively "counting lines for \"${find_path}\"..."

        #FIXME: This is rather shoddy. Generalize to multiple filetypes and
        #functions handling such filetypes as for extract_archive().
        if { :is_file_type_equals "${find_path}" 'pdf' :and
             :pathable.is pdftotext } {
            line_count="$(pdftotext "${find_path}" - | wc -l)"
        } else {
            die_unless_file_file "${find_path}"
            line_count="$(wc -l "${find_path}")"
        }
    } else {
        :die "\"${find_path}\" neither a file or directory."
    }

    # Print such count human-readably.
    convert_integer_to_string_localized "${line_count}"
}
