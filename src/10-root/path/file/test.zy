#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *non-directory file testers* (i.e., functions testing whether passed
paths both exist and are _not_ directories).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_file(
    string pathname,
    string error_message = "File \"${pathname}\" not found or not a file.")

Throw an exception with the passed message unless the passed path is an
existing file. See :is_file() for further details.
/---
function die_unless_file() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    :is_file "${1}" :or {
        :str pathname="${1}"
        :die "${2-File \"${pathname}\" not found or not a file.}"
    }
}

:func.doc <<'/---'
void die_unless_files(string pathname1, ...)

Throw an exception with a stock message unless all passed paths are existing
files. See :is_file() for further details.
/---
function die_unless_files() {
    die_unless_args 'Expected one or more filenames.'
    :is_file "${@}" :or {
        :str pathname
        for  pathname ("${@}") { die_unless_file "${pathname}" }
    }
}

# ....................{ EXCEPTIONS ~ permissions           }....................
:func.doc <<'/---'
void :die_unless_file_executable(
    string filename,
    string error_message =
        "File \"${filename}\" not executable by user \"$(get_user)\".")

Throw an exception with the passed message unless the passed file is executable
by the current user. See :is_file() for further details.
/---
function :die_unless_file_executable() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    :is_file_executable "${1}" :or {
        :str filename="${1}"
        :die "${2-File \"${filename}\" not executable by user \"$(get_user)\".}"
    }
}

# ....................{ EXCEPTIONS ~ emptiness             }....................
:func.doc <<'/---'
void die_unless_file_nonempty(
    string filename,
    string error_message = "File \"${filename}\" empty (i.e., 0-byte).")

Throw an exception with the passed message unless the passed file exists and is
larger than 0 bytes in size. See is_file_nonempty() for further details.
/---
function die_unless_file_nonempty() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    is_file_nonempty "${1}" :or {
        :str filename="${1}"
        :die "${2-File \"${filename}\" empty (i.e., 0-byte).}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_file(string pathname1, ...)

Report success if all passed paths are *existing files* (i.e., existing paths
of any type except directories). Equivalently, report failure if at least one
passed path either does _not_ exist or is an existing directory.
/---
function :is_file() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one path was passed, test such path with test() operators.
    if { is_arg } {
        :str pathname="${1}"
        :is -e "${pathname}" :and :not -d "${pathname}" :si
    # Else, at least two paths were passed. Test such paths with glob
    # qualifiers. While such test is also inefficiently implementable by manual
    # iteration, glob qualifiers are both simpler and more efficient.
    } else {
        # List of all such paths that are *NOT* directories.
        :list filenames
        set_list_to_paths_matching_qualifier filenames "${@}" '^/'

        # Report success only if there exist exactly as many such paths as
        # passed paths, in which case all such paths are *NOT* directories.
        :args.count.is_== ${#filenames}
    }
}

:func.doc <<'/---'
[status: bool] :is_file_1_or_more(string pathname1, ...)

Report success if at least one of the passed paths is an existing file. See
:is_file() for further details.
/---
function :is_file_1_or_more() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one path was passed, such test is equivalent to testing whether
    # such path is a file. Hence, defer to such function.
    if { is_arg } {
        :is_file "${1}"
    # Else, at least two paths were passed. Test such paths with glob
    # qualifiers.
    } else {
        # List of all such paths that are *NOT* directories.
        :list filenames
        set_list_to_paths_matching_qualifier filenames "${@}" '^/'

        # Report success only if there exist at least one such path.
        :List.is_nonempty filenames
    }
}

# ....................{ TESTERS ~ permissions              }....................
:func.doc <<'/---'
[status: bool] :is_file_executable(string filename1, ...)

Report success if all passed files are executable by the current user.
/---
function :is_file_executable() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one file was passed, test such files with test() operators.
    if { is_arg } {
        :str filename="${1}"
        die_unless_file "${filename}"

        # Test such file.
        :is -x "${filename}" :si
    # Else, at least two files were passed. Test such files with glob
    # qualifiers.
    } else {
        die_unless_files "${@}"

        #FIXME: Given the complexity of such expressions, it'd be great to
        #define a new :set_list_to_paths_matching_code() function generalizing
        #such logic in a safe manner. (Shouldn't be hard: just escape single
        #quotes, we should think.)
        #FIXME: Also refactor is_path_executable() accordingly.

        # List of all such files executable by the current user.
        :list filenames_executable
        set_list_to_paths_matching_qualifier\
            filenames_executable "${@}" '(e:''[[ -x "${REPLY}" ]]'':)'

        # Report success only if there exist exactly as many such files as
        # passed files, in which case all such files are executable.
        :args.count.is_== ${#filenames_executable}
    }
}

# ....................{ TESTERS ~ size                     }....................
:func.doc <<'/---'
[status: bool] is_file_nonempty(string filename1, ...)

Report success if all passed files are *nonempty* (i.e., larger than 0 bytes in
file size).
/---
function is_file_nonempty() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one file was passed, test such files with test() operators.
    if { is_arg } {
        :str filename="${1}"
        die_unless_file "${filename}"

        # Test such file.
        :is -s "${filename}" :si
    # Else, at least two files were passed. Test such files with glob
    # qualifiers.
    } else {
        die_unless_files "${@}"

        # List of all such files of nonempty size. Dismantled, this is:
        #
        # * "L+0", including only files strictly larger than 0 bytes.
        :list filenames_nonempty
        set_list_to_paths_matching_qualifier filenames_nonempty "${@}" 'L+0'

        # Report success only if there exist exactly as many such files as
        # passed files, in which case all such files are nonempty.
        :args.count.is_== ${#filenames_nonempty}
    }
}

:func.doc <<'/---'
[status: bool] is_file_empty(string filename1, ...)

Report success if all passed files are *empty* (i.e., 0 bytes in file size).
/---
function is_file_empty() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one file was passed, such test is equivalent to testing whether
    # such file is not nonempty. Hence, defer to such function.
    if { is_arg } {
        :not is_file_nonempty "${1}"
    # Else, at least two files were passed. Test such files with glob
    # qualifiers.
    } else {
        die_unless_files "${@}"

        # List of all such files of empty size. Dismantled, this is:
        #
        # * "L0", including only files exactly 0 bytes in size.
        :list filenames_empty
        set_list_to_paths_matching_qualifier filenames_empty "${@}" 'L0'

        # Report success only if there exist exactly as many such files as
        # passed files, in which case all such files are nonempty.
        :args.count.is_== ${#filenames_empty}
    }
}
