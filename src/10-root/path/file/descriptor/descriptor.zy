#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*File descriptors* (i.e., nonnegative integers signifying open files accessible
as device files under pseudo-filesystem `/dev/fd`).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_file_descriptor(
    :Int fd_name ?:str error_message='"${fd_name}" not a file descriptor.')

Throw an exception with the passed message unless the passed file descriptor is
well-formatted.

== See Also ==

* :File_desc.is().
/---
function die_unless_file_descriptor() {
    die_unless_args_1_to_2\
        'Expected one file descriptor name and optional error message.'
    :str file_descriptor_name__dufd="${1}"
    :File_desc.is "${file_descriptor_name__dufd}" :or
        :die "${2-\"${file_descriptor_name__dufd}\" not a file descriptor.}"
}


:func.doc <<'/---'
:void die_unless_file_descriptor_open(
    :Int fd_name ?:str error_message='File descriptor "${fd_name}" not open.')

Throw an exception with the passed message unless the passed file descriptor is
open under the current shell.

== See Also ==

* :File_desc.is_open().
/---
function die_unless_file_descriptor_open() {
    die_unless_args_1_to_2\
        'Expected one file descriptor name and optional error message.'
    :str file_descriptor_name__dufdo="${1}"
    :File_desc.is_open "${file_descriptor_name__dufdo}" :or
        :die "${2-File descriptor \"${file_descriptor_name__dufdo}\" not open.}"
}


:func.doc <<'/---'
:void die_unless_file_descriptor_open_writable(
    :Int fd_name
    ?:str error_message='File descriptor "${fd_name}" not opened for writing.')

Throw an exception with the passed message unless the passed file descriptor is
open for writing under the current shell.

== See Also ==

* is_file_descriptor_open_writable().
/---
function die_unless_file_descriptor_open_writable() {
    die_unless_args_1_to_2\
        'Expected one file descriptor name and optional error message.'
    :str file_descriptor_name__dufdw="${1}"
    is_file_descriptor_open_writable "${file_descriptor_name__dufdw}" :or
        :die "${2-File descriptor \"${file_descriptor_name__dufdw}\" not opened for writing.}"
}

# ....................{ TESTERS                            }....................
:func_ '[status=:bool] :File_desc.is(:Int fd_name) [
    var_name_suffix="__Fdi"]' :func{
    :int.is_nonnegative "${(P)fd_name__Fdi}"
}:func <<'/---'
Report success only if the file descriptor variable with the passed name is
*well-formatted* (i.e., is a nonnegative integer), regardless of whether this
descriptor is open under the current shell.

By the POSIX standard, file descriptors are internally implemented as
non-negative integers.
/---


#FIXME: Insufficient. The mere existence of such file descriptor does *NOT*
#imply such descriptor to be open: it merely demonstrates such descriptor to
#exist. Hence, this function should be renamed ::File_desc.is() and the
#current ::File_desc.is() renamed to :is_file_descriptor_valid(). Then,
#this function should be reimplemented to actually test whether such descriptor
#is open or not. To do so, we'll probably want to:
#
#* Die if symbolic link "/dev/fd/${(P)file_descriptor_name}" does not exist.
#* Resolve such link to its transitive target by calling
#  :set_string_to_symlink_target_last().
#* If such target matches glob "'pipe:['*']', report success. (No idea how to
#  test whether such pipe actually exists. Oh, right: can't we test
#  ":is -p ${(P)file_descriptor_name} :si" in that case?)
#* Else if such link is broken, report failure.
#
#Not terribly arduous; we just need to get around to it, eh?
#FIXME: Interesting! When run from a cronjob, we get:
#
#    >>> command ls -l /proc/self/fd/0
#    lrwx------ 1 leycec leycec 64 Jan 29 20:56 /proc/self/fd/0 -> /dev/null
#
#So, although standard input is technically always open, it can be effectively
#closed by redirecting it to the bit bucket. What this implies is that, indeed,
#our initial implementation was correct: the mere existence of a file
#descriptor technically implies such descriptor to be open. However, if such
#descriptor symlinks to the canonical bit bucket (e.g., "/dev/null"), such
#descriptor is effectively closed despite technically being open. We need to
#handle such distinction.
#
#See :stdin.is() for painfully similar functionality.
#FIXME: Perform the following nomenclature changes:
#
#* Rename :File_desc.is_open() to ::File_desc.is().
#* Rename :File_desc.is() to :is_file_descriptor_valid().
#* Define a new ::File_desc.is_open() report success if
#  ::File_desc.is() with such descriptor succeeds *AND* the transitive
#  target of such descriptor is *NOT* the canonical bit bucket. (Yay!)
#FIXME: Incidentally, *NONE* of these functions comply with zeshy nomenclature.
#Testers and exception handlers should be passed variable values rather than
#names. *Ugh.*

:func_ '[status=:bool] :File_desc.is_open(:Int fd_name) [
    var_name_suffix="__Fdio"]' :func{
    die_unless_file_descriptor "${fd_name__Fdio}"
    :path.is "$(get_file_descriptor_file_device "${fd_name__Fdio}")"
}:func <<'/---'
Report success only if the file descriptor variable with the passed name is
open under the current shell.
/---


:func.doc <<'/---'
[status=:bool] is_file_descriptor_open_readable(:str file_descriptor_name)

Report success if the passed file descriptor is open for reading under the
current shell.
/---
function is_file_descriptor_open_readable() {
    die_unless_arg 'Expected one file descriptor name.'
    :str file_descriptor_name__ifdofr="${1}"
    die_unless_file_descriptor "${file_descriptor_name__ifdofr}"
    is_path_readable\
        "$(get_file_descriptor_file_device "${file_descriptor_name__ifdofr}")"
}


:func.doc <<'/---'
[status=:bool] is_file_descriptor_open_writable(:str file_descriptor_name)

Report success if the passed file descriptor is open for writing under the
current shell.
/---
function is_file_descriptor_open_writable() {
    die_unless_arg 'Expected one file descriptor name.'
    :str file_descriptor_name__ifdofw="${1}"
    die_unless_file_descriptor "${file_descriptor_name__ifdofw}"
    is_path_writable\
        "$(get_file_descriptor_file_device "${file_descriptor_name__ifdofw}")"
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_file_descriptor_file_device(:Str file_descriptor_name)

absolute path of the device file of the pseudo-filesystem `/dev/fd` opened for
the passed file descriptor under the current shell.
/---
function get_file_descriptor_file_device() {
    # According to section "REDIRECTION" of "man zshmisc", zsh cross-platform-
    # portably treats "/dev/fd/${file_descriptor}" as the underlying platform-
    # specific path. Hence, this should require no platform-specific munging.
    #
    # Technically, we should test whether such descriptor is open under the
    # current shell as well. But doing so would require this function be called
    # under such shell, which getter functions never are. In the interests of
    # caller convenience, assume such descriptor is open. We know; we know.
    die_unless_arg 'Expected one file descriptor name.'
    :str file_descriptor_name__gfdd="${1}"
    die_unless_file_descriptor "${file_descriptor_name__gfdd}"

    # Return this path.
    :stdout.echo "/dev/fd/${(P)file_descriptor_name__gfdd}"
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void set_string_to_file_descriptor_file(
    :Str string_name :Str file_descriptor_name)

Set the passed string variable to the absolute path of the target file opened
for reading and/or writing by the passed file descriptor under the current
shell if this descriptor is open under this shell _or_ throw an exception
otherwise.

== Motivation ==

Since file descriptors are shell-specific _and_ since conventional getter
functions are called from command substitutions and hence subshells, this
function is a setter rather than getter.
/---
function set_string_to_file_descriptor_file() {
    die_unless_arg_2 'Expected one string name and one file descriptor name.'
    :str string_name__sstfdf="${2}"  file_descriptor_name__sstfdf="${2}"
    die_unless_file_descriptor_open "${file_descriptor_name__sstfdf}"

    # Get such path. For safety, prefer :set_string_to_path_canonical() to
    # :path.canonicalize().
    :set_string_to_path_canonical "${string_name__sstfdf}"\
        "$(get_file_descriptor_file_device "${file_descriptor_name__sstfdf}")"
}

# ....................{ OPENERS ~ file                     }....................
:func.doc <<'/---'
:void open_file_descriptor_to_file_read(
    :Str file_descriptor_name :str filename)

Open the passed file descriptor under the current shell for reading from the
passed file.

If this descriptor is already open under this shell, this descriptor is silently
closed first.

== See Also ==

* open_file_descriptor_to_file_write().
/---
function open_file_descriptor_to_file_read() {
    # See open_file_descriptor_to_file_write().
    die_unless_args_2 'Expected one file descriptor name and one filename.'
    :str file_descriptor_name__ofdff="${1}" filename__ofdff="${2}"
    die_unless_file_descriptor "${file_descriptor_name__ofdff}"
    close_file_descriptor_if_open_nonstandard "${file_descriptor_name__ofdff}"
    eval "exec {${file_descriptor_name__ofdff}}<'${filename__ofdff}'"
}


:func.doc <<'/---'
:void open_file_descriptor_to_file_write(
    :Str file_descriptor_name :str filename)

Open the passed file descriptor under the current shell for overwriting the
contents of the passed file.

If this descriptor is already open under this shell, this descriptor is silently
closed first.

== Examples ==

.open_file_descriptor_to_file_write()
==========================================
[source]
------------------------------------------
>>> file_descriptor                       white_pony
>>> open_file_descriptor_to_file_write white_pony "/diamond/eyes"
>>> write_file_descriptor_with_string     white_pony "koi no yokan"
>>> close_file_descriptor                 white_pony
>>> print_file_text "/diamond/eyes"
koi no yokan
------------------------------------------
==========================================
/---
function open_file_descriptor_to_file_write() {
    die_unless_args_2 'Expected one file descriptor name and one filename.'
    :str file_descriptor_name__ofdtf="${1}" filename__ofdtf="${2}"
    die_unless_file_descriptor "${file_descriptor_name__ofdtf}"

    # If such descriptor is open and nonstandard, close such descriptor.
    close_file_descriptor_if_open_nonstandard "${file_descriptor_name__ofdtf}"

    # Allocate such descriptor.
    eval "exec {${file_descriptor_name__ofdtf}}>'${filename__ofdtf}'"
}

# ....................{ OPENERS ~ descriptor               }....................
:func.doc <<'/---'
:void open_file_descriptor_to_stdout(:Str file_descriptor_name)

Open the file descriptor with the passed name under the current shell for
appending to the standard output stream of this shell.

== Examples ==

.open_file_descriptor_to_stdout()
==========================================
[source]
------------------------------------------
>>> file_descriptor                   black_rose
>>> open_file_descriptor_to_stdout    black_rose
>>> write_file_descriptor_with_string black_rose "immortal"
immortal
>>> close_file_descriptor             black_rose
------------------------------------------
==========================================
/---
function open_file_descriptor_to_stdout() {
    die_unless_arg 'Expected one file descriptor name.'
    open_file_descriptor_to_file_descriptor_write "${1}"\
        ZY_STDOUT_FILE_DESCRIPTOR
}


:func.doc <<'/---'
:void open_file_descriptor_to_stderr(:Str file_descriptor_name)

Open the passed file descriptor under the current shell for appending to the
standard error stream of this shell.

== Examples ==

.open_file_descriptor_to_stderr()
==========================================
[source]
------------------------------------------
>>> file_descriptor                   birch_white
>>> open_file_descriptor_to_stderr    birch_white
>>> write_file_descriptor_with_string birch_white "birch black"
birch black
>>> close_file_descriptor             birch_white
------------------------------------------
==========================================
/---
function open_file_descriptor_to_stderr() {
    die_unless_arg 'Expected one file descriptor name.'
    open_file_descriptor_to_file_descriptor_write "${1}"\
        ZY_STDERR_FILE_DESCRIPTOR
}


:func.doc <<'/---'
:void open_file_descriptor_to_file_descriptor_write(
    :Str target_file_descriptor_name :Str source_file_descriptor_name)

Open the file descriptor with the first passed name for overwriting the contents
of the file already opened by the file descriptor with the second passed name
under the current shell.

If the former is already open under the current shell, this descriptor is
silently closed first. This function thus performs file descriptor duplication.

== Examples ==

.open_file_descriptor_to_file_descriptor_write()
==========================================
[source]
------------------------------------------
>>> file_descriptor black_star
>>> open_file_descriptor_to_file_descriptor_write\
...     black_star ZY_STDOUT_FILE_DESCRIPTOR
>>> write_file_descriptor_with_string black_star "respiration"
respiration
>>> close_file_descriptor black_star
------------------------------------------
==========================================
/---
function open_file_descriptor_to_file_descriptor_write() {
    die_unless_args_2 'Expected one target and one source file descriptor name.'
    :str fd_trg_name__ofdtfd="${1}" fd_src_name__ofdtfd="${2}"
    die_unless_file_descriptor "${fd_trg_name__ofdtfd}"
    die_unless_file_descriptor "${fd_src_name__ofdtfd}"

    # If the target file descriptor is open and nonstandard, close this
    # descriptor.
    close_file_descriptor_if_open_nonstandard "${fd_trg_name__ofdtfd}"

    # Open this descriptor. Unfortunately, the following seemingly valid
    # assignment fails with nonzero exit status:
    #
    #     eval "exec {${fd_trg_name__ofdtfd}}>&${(P)fd_src_name__ofdtfd}"
    #
    # Unless expanding the source descriptor before its expansion in this
    # "eval" statement, this statement inexplicably fails. While this should
    # probably be reported, expand this descriptor beforehand in the meanwhile.
    :int fd_src__ofdtfd=${(P)fd_src_name__ofdtfd}
    eval 'exec {'${fd_trg_name__ofdtfd}'}>&'${fd_src__ofdtfd}
    :stdout.echo "trg: ${fd_trg_name__ofdtfd} (${(P)fd_trg_name__ofdtfd}; src: ${fd_src_name__ofdtfd} (${fd_src__ofdtfd})"
}

# ....................{ WRITERS                            }....................
:func.doc <<'/---'
:void write_file_descriptor_with_string(:str file_descriptor_name, +:str texts)

Overwrite the existing contents of the file opened for writing by the passed
file descriptor with the passed strings.

== See Also ==

* open_file_descriptor_to_file_write().
/---
function write_file_descriptor_with_string() {
    die_unless_args_2_or_more\
        'Expected one file descriptor name and one or more strings.'
    :str file_descriptor_name__wfdws="${1}" filename__wfdws
    die_unless_file_descriptor_open_writable "${file_descriptor_name__wfdws}"
    :args.shift 1

    # Absolute path of the file to be written.
    set_string_to_file_descriptor_file\
        filename__wfdws "${file_descriptor_name__wfdws}"

    # Write such strings. Bizarrely, zsh provides no corresponding ">>&"
    # operation. Instead, ">&" appends and *NO* operation writes. While
    # nonsensical, there's not terribly much we can do about it. So, we
    # stupidly fake it by silently removing the underlying file. Yes, this is
    # non-atomic and hence terrible. *shrug*
    remove_file "${filename__wfdws}"
    append_file_descriptor_with_string "${file_descriptor_name__wfdws}" "${@}"
}


:func.doc <<'/---'
:void append_file_descriptor_with_string(:Str file_descriptor_name +:str texts)

Append the passed strings to the existing contents of the file opened for
writing by the passed file descriptor.

== See Also ==

* open_file_descriptor_to_file_write().
/---
function append_file_descriptor_with_string() {
    die_unless_args_2_or_more\
        'Expected one file descriptor name and one or more strings.'
    :str file_descriptor_name__afdws="${1}"
    die_unless_file_descriptor_open_writable "${file_descriptor_name__afdws}"
    :args.shift 1

    # Append these strings.
    :stdout.echo "${@}" >&${(P)file_descriptor_name__afdws}
}

# ....................{ CLOSERS                            }....................
:func.doc <<'/---'
:void close_file_descriptor(:Str file_descriptor_name)

Close the passed open file descriptor if open under the current shell _or_ throw
an exception otherwise.

== See Also ==

* open_file_descriptor_to_file_write().
/---
function close_file_descriptor() {
    die_unless_arg 'Expected one file descriptor name.'
    :str fd_name__cfd="${1}"
    die_unless_file_descriptor_open "${fd_name__cfd}"

    # Close this descriptor.
    eval "exec {${fd_name__cfd}}>&-"
}


:func.doc <<'/---'
:void close_file_descriptor_if_open(:Str fd_name)

Close the passed file descriptor if open or return silently otherwise.

== See Also ==

* open_file_descriptor_to_file_write().
/---
function close_file_descriptor_if_open() {
    die_unless_arg 'Expected one file descriptor name.'
    :str fd_name__cfdio="${1}"

    # If this descriptor is open, close this descriptor.
    :File_desc.is_open   "${fd_name__cfdio}" :and
        close_file_descriptor "${fd_name__cfdio}"
}


:func.doc <<'/---'
:void close_file_descriptor_if_open_nonstandard(:Str fd_name)

Close the file descriptor with the passed name if open _and_ *nonstandard*
(i.e., _not_ opened for reading or writing the standard input, output, or error
streams of the current shell) _or_ reduce to a noop otherwise.

Since closing standard file descriptors is generally a poor idea, consider
calling this function rather than close_file_descriptor().

== See Also ==

* close_file_descriptor().
/---
function close_file_descriptor_if_open_nonstandard() {
    die_unless_arg 'Expected one file descriptor name.'
    :str fd_name__cfdion="${1}"
    die_unless_file_descriptor "${fd_name__cfdion}"

    # If such descriptor is open and nonstandard, close such descriptor. Since
    # POSIX assigns standard error the largest file descriptor of the three
    # standard file descriptors, check against such descriptor.
    (( ${(P)fd_name__cfdion} > ${ZY_STDERR_FILE_DESCRIPTOR} )) :and
        close_file_descriptor_if_open "${fd_name__cfdion}"
}
