#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Filetypes* (i.e., `.`-prefixed filename suffixes).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_file_type_equals(
    string pathname,
    string filetype,
    string error_message = "File \"${pathname}\" not of type \"${filetype}\".")

Throw an exception with the passed message unless the passed filename has the
passed filetype. See :is_file_type_equals() for further details.
/---
function :die_unless_file_type_equals() {
    die_unless_args_2_to_3\
        'Expected one pathname, one filetype, and optional error message.'
    string pathname="${1}" filetype="${2}"
    :is_file_type_equals "${pathname}" "${filetype}" :or :die\
        "${3-File \"${pathname}\" not of type \"${filetype}\".}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_file_type_equals(string filename, string filetype)

Report success if the passed filename has the passed filetype: e.g.,

.:is_file_type_equals()
==========================================
[source]
------------------------------------------
>>> :str on_status_quos="
...     At issue is whether the global economy will pass away. It is
...     passing away. Rising populations and debt combined with depletion of
...     freshwater sources and fossil fuel make the status quo untenable. The
...     only question is whether civil society will survive the transition. Can
...     we use the darknet to preserve representative democracy, or will we seek
...     protection from brutal strong-men as the old order begins to fail?"
>>> :is_file_type_equals "saverin.in" "out" :or
...     get_string_line "${on_status_quos}" -1
protection from brutal strong-men as the old order begins to fail?
------------------------------------------
==========================================
/---
function :is_file_type_equals() {
    die_unless_args_2 'Expected one filename and one filetype.'
    string filename="${1}" filetype_test="${2}" filetype_true

    #FIXME: For efficiency, switch to calling
    #:file.Type.if_found() instead.

    # Test such filetype.
    filetype_true="$(get_file_type_if_found "${filename}")" :and
        :is ${filetype_test} == ${filetype_true} :si
}

# ....................{ GETTERS                            }....................
#FIXME: Replace with the corresponding setters already defined below.
:func.doc <<'/---'
string get_file_type(string filename)

Get the passed filename's filetype. If such filename has no filetype, an
exception is thrown.

== See Also ==

* :file.Type.if_found().

== Examples ==

==========================================
[source]
------------------------------------------
>>> get_file_type "hastur.tar.gz"
tar.gz
>>> get_file_type "pasteur.ar.gz"
gz
------------------------------------------
==========================================
/---
function get_file_type() {
    die_unless_arg 'Expected one filename.'
    :str filetype
    :file.Type "${1}" filetype
    :stdout.echo "${filetype}"
}

:func.doc <<'/---'
[stdout: string, status: bool] get_file_type_if_found(string filename)

Get the passed filename's filetype if such filename has a filetype or report
failure otherwise. See :file.Type.if_found() for further details:
e.g.,

.get_file_type_if_found()
==========================================
[source]
------------------------------------------
>>> get_file_type_if_found "a_thing_of_beauty" :or :stdout.echo "is a joy"
is a joy
------------------------------------------
==========================================
/---
function get_file_type_if_found() {
    die_unless_arg 'Expected one filename.'
    :str filetype
    :file.Type.if_found "${1}" filetype :and :stdout.echo "${filetype}"
}

# ....................{ GETTERS ~ path                     }....................
:func.doc <<'/---'
string get_path_sans_file_type:(string pathname)

Get the passed pathname excluding `.`-prefixed filetype if such path is suffixed
by such type or such pathname ``as is'' otherwise: e.g.,

.get_path_sans_file_type:()
==========================================
[source]
------------------------------------------
>>> get_path_sans_file_type: "/endymion/hastur.tar.gz"
/endymion/hastur
>>> get_path_sans_file_type: "/hyperion/azazoth"
/hyperion/azazoth
------------------------------------------
==========================================
/---
function get_path_sans_file_type:() {
    # Validate sanity.
    die_unless_arg 'Expected one pathname.'
    string pathname="${1}" filetype

    # If such pathname contains a filetype, remove such filetype. See
    # remove_string_suffix() for further details.
    if { filetype="$(get_file_type_if_found "${pathname}")" } {
        :stdout.echo "${pathname%.${filetype}}"
    # Else, return such pathname as is.
    } else {
        :stdout.echo "${pathname}"
    }
}

# ....................{ SETTERS                            }....................
#FIXME: Add examples.
# function :file.Type() {
:func_ ':void :file.Type(:str filename :Str filetype_name) <
    var_name_suffix="__fT">' :func{
    :file.Type.if_found "${@}" :or
        :die "File \"${filename__fT}\" has no filetype."
}:func <<'/---'
Set the string variable with the passed name to the passed filename's filetype.
If this filename has no filetype, an exception is thrown.

== See Also ==

* :file.Type.if_found().
/---

:func_ '[status=:bool] :file.Type.if_found(:str filename :Str filetype_name) <
    var_name_suffix="__fTif">' :func{
    :is $(get_path_basename "${filename}") == *'.'(#b)(('tar.'|)[^.]##) :si :and
        :Str.set filetype_name__fTif "${match[1]}"
}:func <<'/---'
Set the string variable with the passed name to the passed filename's *filetype*
(i.e., `.`-prefixed suffix of this filename excluding that `.`) if this filename
has a filetype _or_ report false otherwise.

== Multipart Filetypes ==

This function supports *multipart filetypes* (i.e., filetypes containing at
least one `.`), of which the most common example are two-part `tar` filetypes
(e.g., `tar.bz2`). For these filenames, this string will be set to `tar`
followed by such filename's rightmost `.`-delimited suffix. For all other
filenames, this string will merely be set to this filename's rightmost
`.`-delimited suffix.
/---
