#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: There appears to be at least one (and probably more related) *CRITICAL*
#issue with the "zsh-mime-setup" script called below. Unfortunately, such
#script currently defines suffix aliases for script filetypes (e.g., "sh").
#Since *ALL* scripts are already prefixed by an appropriate shebang line, such
#aliases are substantially more harmful than helpful: e.g.,
#
#    # No! No!
#    >>> print ${saliases[sh]}
#    zsh-mime-handler
#
#To compound matters, the zsh function such aliases expand (i.e.,
#zsh-mime-handler()) currently fails with error. While this is probably a zsh
#emulation failure on zeshy's part, it's nonetheless fairly dispiriting,
#implying that trying to run shell scripts in the conventional way (e.g.,
#"./tmp.sh") will always fail with an obscure exception message.
#
#*THIS IS HORRIBLE*. We see no recourse other than to disable such
#functionality, until uncovering a better solution. We really need to just
#investigate why such function is failing. (Again, probably an obscure
#emulation issue.)
#
#Honestly, we should probably just define equivalent pure-zeshy functionality.

:parcel <<'/---'
File *media types* (i.e., lowercase `/`-delimited strings uniquely identifying
file formats), also referred to as *MIME types* in pre-2005 parlance.

== Configuration ==

This parcel assumes external mappings from filetype to mimetype and from
mimetype to command handling such mimetype. Installing mappings is simple, if
somewhat tedious:

.Media Type Configuration
==========================================
[source]
------------------------------------------
# Edit "/etc/mime.type", adding one line for the mimetype for each such
# filetype (e.g., a line "application/pdf pdf" for associating PDF files
# with the "application/pdf" mimetype and hence Okular, above).
>>> edit_file /etc/mime.type

# Edit "/etc/mailcap", adding one line for the application opening each such
# filetype (e.g., a line "application/pdf;/usr/bin/okular %s" for opening
# PDF files in Okular).
>>> edit_file /etc/mailcap

# Reload mimetype aliases.
>>> setup_mimetype_aliases
------------------------------------------
==========================================

== See Also ==

* http://www.bash2zsh.com/essays/essay1_file_manager.html[Readable introduction]
  to `zsh` suffix aliases in relation to media types and file magic.
/---

# ....................{ GLOBALS                            }....................
# There are various thoughts on media type validation. The W3C approach,
# naturally, recommends the following overly overkill PCRE:
#
#     /^[a-zA-Z0-9!#$%^&\*_-\+{}\|'.`~]+/[a-zA-Z0-9!#$%^&\*_-\+{}\|'.`~]+$/
#     http://lists.w3.org/Archives/Public/xml-dist-app/2003Jul/0064.html
#
# The Zend framework takes a different tack, opting instead for:
#
#     /^[a-z-]+\/[a-z0-9.+-]+$/i'
#     https://github.com/zendframework/zf2/blob/master/library/Zend/Mail/Header/ContentType.php
#
# The former arguably encompasses pathological edge cases that sane frameworks
# report as erroneous. We opt for the latter, generalized for
# case-insensitivity. Since non-ASCII Unicode characters do *NOT* constitute
# valid media type characters, avoid otherwise helpful character classes (e.g.,
# "[[:alpha:]]").

:str.global\
    ZY_MEDIA_TYPE_GLOB='[a-zA-Z_-]##/[a-zA-Z0-9.+_-]##' <<'/---'
Glob matching valid media types (e.g., `text/plain`).

== See Also ==

* :is_media_type().
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_media_type(:str media_type)

Report success only if the passed string is a syntactically valid *media type*
(i.e., (i.e., MIME type in pre-2005 parlance).

== Examples ==

.:is_media_type()
==========================================
[source]
------------------------------------------
>>> :str on_work="
... No one should ever work. Work is the source of nearly all the misery in
... the world. Almost any evil you'd care to name comes from working or from
... living in a world designed for work. In order to stop suffering, we have
... to stop working. That doesn't mean we have to stop doing things. It does
... mean creating a new way of life based on play; in other words, a ludic
... conviviality, commensality, and maybe even art. There is more to play
... than child's play, as worthy as that is. I call for a collective
... adventure in generalized joy and freely interdependent exuberance. Play
... isn't passive. Doubtless we all need a lot more time for sheer sloth and
... slack than we ever enjoy now, regardless of income or occupation, but
... once recovered from employment-induced exhaustion nearly all of us want
... to act. Oblomovism and Stakhanovism are two sides of the same debased
... coin."
>>> :is_media_type "All living things on earth are kindred." :or
...     get_string_line "${on_work}" 1
No one should ever work. Work is the source of nearly all the misery in
------------------------------------------
==========================================
/---
function :is_media_type() {
    die_unless_arg 'Expected one media type.'
    :is "${1}" == ${~ZY_MEDIA_TYPE_GLOB} :si
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str :get_file_media_type(:str filename)

*Media type* (i.e., MIME type in pre-2005 parlance) of the passed file.

== Examples ==

.:get_file_media_type()
==========================================
[source]
------------------------------------------
>>> :get_file_media_type "/etc/issue"
text/plain
------------------------------------------
==========================================
/---
function :get_file_media_type() {
    die_unless_arg 'Expected one filename.'
    :str media_type
    :set_string_to_file_media_type media_type "${1}"
    :stdout.echo "${media_type}"
}

#FIXME: In lieu of unit tests...
# function lita() {
#     is_binary_executable /bin/busybox
# }

# ....................{ SETTERS                            }....................
#FIXME: Actually, there exists a preferable means of getting MIME types. If
#"xdg-mime" is installed, such Bourne shell script is preferred to calling the
#lower-level "file" command. Indeed, such script should be reimplemented here as
#a pure-zeshy function. (Documentation for such script warns against running
#such script as root. While prudent, we would only be calling such script to
#perform a side-effect free MIME type query, suggesting such script to be safe
#in this specific context.) Usage is quite simple:
#
#    >>> xdg-mime query filetype photo.jpg
#    photo.jpg
#        image/jpeg
#
#Hence, just return the second line stripped of prefixing whitespace.
#FIXME: *ACTUALLY*, the ideal approach is probably to call "mimetype" if
#pathable. This is a Perl script (and hence *WAY* preferable to a hacky Bourne
#shell script) leveraging the Shared MIME-info database. Output is sane: e.g.,
#
#    >>> mimetype --brief /usr/bin/mimetype
#    application/x-perl
#
#Nice. No munging required. Perl. No insanity required. The particularly nice
#thing about "mimetype" is that it requires no external dependencies apart from
#the Perl modules it *ALWAYS* comes installed with (e.g., "File::MimeInfo").
#This differs sharply from "xdg-open", which basically has no intelligence of
#its own and simply defers all real work to the current desktop environemnt --
#which seems extremely heavyweight for such a simple process.
#FIXME: Add example.

:func.doc <<'/---'
:void :set_string_to_file_media_type(:Str str_name :str filename)

Set the string variable with the passed name to the *media type* (i.e., MIME
type in pre-2005 parlance) of the passed file.
/---
function :set_string_to_file_media_type() {
    die_unless_args_2 'Expected one string name and one filename.'
    :str\
        string_name__sstfmt="${1}"\
        filename__sstfmt="${2}"\
        media_type__sstfmt

    # If such path is not a file, fail. "file" successfully outputs media type
    # "inode/directory" for directories rather than failing with nonzero exit
    # status, requiring our intervention.
    die_unless_file "${filename__sstfmt}"

    #FIXME: GNU-specific. Unfortunately, there exists no short option for
    #"--mime-type". How do the BSDs handle this? Ah, I see; "--mime-type" parses
    #the desired substring from "-i" (i.e., "--mime"), which should certainly
    #exist on BSDs. We'll have to do some heavier lifting to generalize this,
    #but it certainly seems doable: parse "-i" output ourselves on BSD.
    #FIXME: O.K.; the output for file "/etc/issue" resembles:
    #    /etc/issue: text/plain; charset=us-ascii
    #To account for filenames containing ":", we'll clearly need to dynamically
    #create a glob first matching the desired filename (with glob characters
    #escaped, of course), followed by a colon, and so on. Certainly doable, but
    #somewhat annoying.

    # Defer to "file". (Oh, how we obsequiously bow before thy magnanimity.)
    media_type__sstfmt="$(command file\
        --brief --mime-type -- "${filename__sstfmt}")"
    # :stderr.echo "media type for \"${filename}\": ${media_type}"

    # Alas, "file" is perhaps not as rigorously tested as expected. "file" 5.12,
    # for example, behaves as follows:
    #
    #    # The following output isn't simply mistaken. It's fatally wrong. Why?
    #    # Such output fails to conform to valid media type syntax, thus
    #    # breaking functionality elsewhere expecting valid syntax.
    #    >>> command file --brief --mime-type -- /bin/busybox
    #    application/x-executableapplication/octet-stream
    #
    # Since such issues are likely to be subsequently fixed, we refuse to invest
    # any effort in doing so. Since such issues nonetheless exist *AND* since
    # this function is transitively depended on by core functionality elsewhere
    # (e.g., is_binary_executable()), we should at least attempt to detect such
    # issues and notify the user accordingly.
    :is_media_type "${media_type__sstfmt}" :or :die\
        "File \"${filename__sstfmt}\" media type \"${media_type__sstfmt}\" invalid. Command \"file\" appears to be broken; consider downgrading to a prior version."

    # Set this string to this type.
    :Str.set "${string_name__sstfmt}" "${media_type__sstfmt}"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str :print_aliases_suffix_from_mailcap()

Print a human-readable synopsis of all *media type-specific suffix aliases*
(i.e., suffix aliases previously defined by setup_mimetype_aliases()).
/---
function :print_aliases_suffix_from_mailcap() {
    # See define_aliases_suffix_from_mailcap:() for further details.
    die_if_args
    :code.run_paged :code.run_under_zsh zsh-mime-setup -l
}

# ....................{ PRECOMPILERS                       }....................
#FIXME: Temporarily disabled. See the head of this file for commentary.
# :run_hook_on_zeshy_precompile :precompile_zeshy_aliases_suffix_from_mailcap

:func.doc <<'/---'
:void :precompile_zeshy_aliases_suffix_from_mailcap()

Define one suffix alias for each media type mapped by system-wide and user-
specific `mailcap` files.

== See Also ==

* define_aliases_suffix_from_mailcap:().
/---
function :precompile_zeshy_aliases_suffix_from_mailcap() {
    die_if_args
    :list mailcap_filenames

    # System-wide and user-specific mailcap files mapping MIME types to the
    # application handling files of such type.
    mailcap_filenames=( '/etc/mailcap' "${HOME}/.mailcap" )

    # If any such files exist, define mimetype aliases from such file(s).
    # Prevent runnables such function temporarily defines from polluting the
    # current namespace and hence being compiled into the digest file.
    if { :is_file_1_or_more "${mailcap_filenames[@]}" } {
        :define_aliases_suffix_from_mailcap
    }

    # Add such files to the list of paths the digest file depends on.
    add_zeshy_digest_dependency_path "${mailcap_filenames[@]}"
}


:func.doc <<'/---'
:void :define_aliases_suffix_from_mailcap()

Define one suffix alias for each mimetype mapping listed in the system-wide and
user-specific "mailcap" files.

These aliases associate filename suffixes with the command handling such files,
enabling BSD-style file handling.

== Examples ==

.:define_aliases_suffix_from_mailcap()
==========================================
[source]
------------------------------------------
# Run files to open files. What could be simpler? Assuming installation of
# PDF readers and mimetype mapping associating the PDF mimetype with some
# PDF reader, running PDF files now opens such files in such reader.
>>> define_aliases_suffix_from_mailcap:
>>> ./Devour_All_the_Living_Things.pdf
------------------------------------------
==========================================
/---
function :define_aliases_suffix_from_mailcap() {
    die_if_args

    # Define these aliases by autoloading the standard
    # zsh-mime-setup() and zsh-mime-handler() functions bundled with zsh and
    # then calling the former function, which internally calls the latter.
    #
    # For safety, we do so in a manner:
    #
    # * Preventing non-suffix aliases and functions these functions temporarily
    #   define from polluting the current namespace and hence being compiled
    #   into the current digest file.
    # * Under zsh emulation and hence default zsh options and traps.
    run_code_and_undefine_runnables_defined_except_alias_suffixes\
        :code.run_under_zsh\
           ':autoload_function_zsh zsh-mime-setup zsh-mime-handler
            zsh-mime-setup -f'
}
