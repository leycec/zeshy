#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *simple files* (i.e., files that are neither directories or so-called
``special'' files). See :is_file_simple() for further details.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_file_simple(
    string pathname,
    string error_message = "\"${pathname}\" not a simple file.")

Throw an exception with the passed message unless the passed path is an existing
simple file. See :is_file_simple() for further details.
/---
function :die_unless_file_simple() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    string pathname="${1}"
    :is_file_simple "${pathname}" or :die\
        "${2-File \"${pathname}\" not found or not simple (e.g., device file, named pipe, socket, symbolic link).}"
}

:func.doc <<'/---'
void :die_unless_files_simple(string pathname1, ...)

Throw an exception unless the passed paths are all existing simple files. See
:is_file_simple() for further details.
/---
function :die_unless_files_simple() {
    die_unless_args 'Expected one or more pathnames.'
    :is_files_simple "${@}" or {
        :str pathname
        for     pathname ("${@}") { :die_unless_file_simple "${pathname}" }
    }
}

:func.doc <<'/---'
void :die_unless_file_simple_or_not_found(
    string pathname,
    string error_message = "\"${pathname}\" not a simple file.")

Throw an exception with the passed message unless the passed path is either an
existing simple file or does _not_ exist (i.e., throw an exception if such path
exists but is _not_ a simple file). This function is typically called to avoid
overwriting existing special files (e.g., device files).
/---
function :die_unless_file_simple_or_not_found() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    not :path.is "${pathname}" or :is_file_simple "${pathname}" or
        :die "${2-\"${pathname}\" not a simple file.}"
}

# ....................{ TESTERS                            }....................
#FIXME: Horrible. Such function should accept multiple pathnames. See
#:is_file() for an efficient means of implementing such function.

:func.doc <<'/---'
[status: bool] :is_file_simple(string pathname)

Report success if the passed path is an existing *simple file* (i.e., file that
is neither a directory or so-called ``special'' file). Specifically, report
success if such path exists _and_ is neither a device file, directory, named
pipe, socket, or symbolic link.
/---
function :is_file_simple() {
    die_unless_arg 'Expected one pathname.'
    is -f "${1}" si
}

:func.doc <<'/---'
[status: bool] :is_files_simple(string pathname1, ...)

Report success if the passed paths are all existing simple files. See
:is_file_simple() for further details.
/---
function :is_files_simple() {
    is_path_matches_qualifier "${@}" '.'
}

#FIXME: In lieu of unit tests...
#function isom() {
#    :is_files_simple /home/leycec/.xsession          or print 'ugh!'
#    :is_files_simple /home/leycec/{.xsession,.zshrc} or print 'ugh!!'
#}

# --------------------( WASTELANDS                         )--------------------
        # :die "${2-$(join_strings_readable: "${@}") not all simple files.}"

#FUXME: Not terribly fond of the apellation "simple." That said, our prior
#alternative "plain" was equally poor. I believe I recently hit upon an ideal
#alternative, however: "simple." Hence, we would have:
#
#* :die_unless_file_simple().
#* :is_file_simple().
#
#And so forth. Given that "simple" is one syllable (and character) less than
#"simple" and hence more readable, we'd say this one is a simple no-brainer.

#FUXME: Generalize implementation to a new is_path_matching_qualifier() function.
    # Validate passed arguments.
#   die_unless_args 'expected one or more pathname'
#   list filenames

    # Filter non-simple files from such paths.
#   set_list_to_paths_matching_qualifier filenames "${@}" '.'
#   :stdout.echo "filenames: ${filenames[*]}"

    # If no such paths were excluded, return success; else, failure. For
    # efficiency, inline such implementation.
#   (( ${#filenames} == ${#@} ))

#   (( $(get_list_size filenames) 
    # Filter non-simple files from such paths. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each such path.
    # * "(.)", excluding non-simple files.
#   pathnames=( ${^@}(.) )

    # If no such paths were excluded, return success; else, failure. For
    # efficiency, inline such implementation.
#   (( "${#pathnames}" == "${#@}" ))

#FUXME: Rename to die_unless_file_if_exists(). Much more readable.

#FUXME: Our distinction between files and directories is, of course,
#nonsensical. Directories *ARE* special files, as are symbolic links, named
#pipes (FIFOs), and so on. There's a reason prior shells chose "-f" to test for
#simple files. Why? Because that's almost *ALWAYS* what the programmer wants
#and hence expects. So, we should probably instate the following changes:
#
#* Rename functions matching "\b(\w+?)_file\b" to "\1_file_nondir": e.g.,
#  rename :is_file() to is_file_nondir(). It's not necessarily clear such
#  functions are genuinely helpful; but, to avoid breaking everything, let's be
#  at least this careful.
#  * *WAIT*. Yes, this is a good rename, but it's a bit *TOO* broad. We really
#    just need to do this on a case-by-case basis for functions to be
#    overwritten by the rename below (e.g., :is_file()). There should only four
#    or so functions, so... not a significant concern.
#* Rename "_file_simple" and "_files_simple" to simply "_file" and "_files"
#  everywhere.
#FUXME: Actually, I now disagree. If symbolic files were also considered
#simple, I probably would agree. But as it stands, the current broad conception
#of "file" better captures real-world use.

#FUXME: Rename the adjective "simple" to "simple" everywhere. See
#https://en.wikipedia.org/wiki/Unix_file_types as to why. (Reason: everyone
#calls them "simple files.")

#FUXME: Rename to die_unless_file_if_exists(). die_if_file_nonsimple(). There
#* Rename :path.is() to is_file_(). 
#function die_if_path_not_file_simple() {
