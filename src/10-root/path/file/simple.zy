#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *simple files* (i.e., files that are neither directories or so-called
``special'' files). See :is_file_simple() for further details.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_file_simple(
    string pathname,
    string error_message = "\"${pathname}\" not a simple file.")

Throw an exception with the passed message unless the passed path is an existing
simple file. See :is_file_simple() for further details.
/---
function :die_unless_file_simple() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :is_file_simple "${pathname}" :or :die\
        "${2-File \"${pathname}\" not found or not simple (e.g., device file, named pipe, socket, symbolic link).}"
}

:func.doc <<'/---'
void :die_unless_files_simple(string pathname1, ...)

Throw an exception unless the passed paths are all existing simple files. See
:is_file_simple() for further details.
/---
function :die_unless_files_simple() {
    die_unless_args 'Expected one or more pathnames.'
    :is_files_simple "${@}" :or {
        :str pathname
        for  pathname ("${@}") { :die_unless_file_simple "${pathname}" }
    }
}

:func.doc <<'/---'
void :die_unless_file_simple_or_not_found(
    string pathname,
    string error_message = "\"${pathname}\" not a simple file.")

Throw an exception with the passed message unless the passed path is either an
existing simple file or does _not_ exist (i.e., throw an exception if such path
exists but is _not_ a simple file). This function is typically called to avoid
overwriting existing special files (e.g., device files).
/---
function :die_unless_file_simple_or_not_found() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :not :path.is "${pathname}" :or :is_file_simple "${pathname}" :or
        :die "${2-\"${pathname}\" not a simple file.}"
}

# ....................{ TESTERS                            }....................
#FIXME: Horrible. Such function should accept multiple pathnames. See
#:is_file() for an efficient means of implementing such function.

:func.doc <<'/---'
[status: bool] :is_file_simple(string pathname)

Report success if the passed path is an existing *simple file* (i.e., file that
is neither a directory or so-called ``special'' file). Specifically, report
success if such path exists _and_ is neither a device file, directory, named
pipe, socket, or symbolic link.
/---
function :is_file_simple() {
    die_unless_arg 'Expected one pathname.'
    :is -f "${1}" :si
}

:func.doc <<'/---'
[status: bool] :is_files_simple(string pathname1, ...)

Report success if the passed paths are all existing simple files. See
:is_file_simple() for further details.
/---
function :is_files_simple() {
    is_path_matches_qualifier "${@}" '.'
}

#FIXME: In lieu of unit tests...
#function isom() {
#    :is_files_simple /home/leycec/.xsession          or print 'ugh!'
#    :is_files_simple /home/leycec/{.xsession,.zshrc} or print 'ugh!!'
#}
