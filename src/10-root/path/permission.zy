#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Path permissions* (e.g., user, group).
/---

#FIXME: Rename nomenclature from "_path_creation_mask" to "_mask_path_new". Oi!

# ....................{ ALIASES                            }....................
#FIXME: Implement.
#alias_cli_substitution {chg}rp='set_path_group'

#FIXME: Enable. This requires we augment set_path_creation_mask() to call
#print_path_creation_mask() when called interactively directly with no args.
#Actually, that suggests a new function set_path_creation_mask_interactively().
#No need to muddy the pure intent of set_path_creation_mask().
#alias_cli umask='umask -S'

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:int get_path_creation_mask_integer()

Umask for the current shell in machine-readable octal format.

== See Also ==

* set_path_creation_mask().
/---
function get_path_creation_mask_integer() {
    die_if_args
    builtin umask
}


:func.doc <<'/---'
:str get_path_creation_mask_string()

Umask for the current shell in human-readable string format.

== See Also ==

* set_path_creation_mask().
/---
function get_path_creation_mask_string() {
    die_if_args
    builtin umask -S
}

# ....................{ SETTERS                            }....................
#FIXME: Improve documentation for the string permissions format.
:func.doc <<'/---'
:void set_path_creation_mask(:str permissions)

Set the *umask* (i.e., user mask consisting of permission modifiers under which
new paths are created) for the current shell to the passed permissions string.

Unless applying this umask to to all subsequent path creations, consider
localizing this umask by calling this function from a subshell.

== Examples ==

.set_path_creation_mask()
==========================================
[source]
------------------------------------------
>>> get_path_creation_mask_string
u=rwx,g=rx,o=
>>> (
...     set_path_creation_mask u=,g=w,o=rwx
...     get_path_creation_mask_string
...     :file.make         /tmp/ego_death
...     list_path_verbose /tmp/ego_death
>>> )
u=,g=w,o=rwx
-----w-rwx  1 leycec leycec    0 2012-12-24 04:20 ego_death
>>> get_path_creation_mask_string
u=rwx,g=rx,o=
------------------------------------------
==========================================

== Permissions Formats ==

Such string must assume one of two formats: *string* or *octal*. The octal
approach is concise but considerably less readable and writable. The string
approach is verbose. Since both have their place, we leave it to the caller to
decide which better applies.

=== String Permissions ===

The human-readable string format consists of a comma-delimited string specifying
all permissions to be _allowed_.

Unspecified permissions for specified entities default to _denied_ (e.g., given
permissions string `u=rx`, the owning users of newly created paths have no write
permissions to such paths, which is usually bad).

Unspecified permissions for unspecified entities default to their current
settings (e.g., given a passed string of `u=rx` and current mask of
`u=rwx,g=rx,o=`, owning groups of newly created paths retain read and execute
permission to such paths, which may not necessarily be desirable).

See `man umask` for further details.

=== Octal Permissions ===

The machine-readable octal format consists of three octal digits (i.e., numbers
between 0 to 7) specifying all permissions to be _denied_. Specifically, the:

* First digit specifies permissions to deny the *owning user* (i.e., the user
   assigned to be the owner of newly created paths). If the:
** First bit of such digit is enabled (i.e., such digit is the summation of at
    least the number 1), such user does _not_ have *execute permission* to newly
    created paths.
** Second bit of such digit is enabled (i.e., such digit is the summation of at
    least the number 2), such user does _not_ have *write permission* to newly
    created paths.
** Third bit of such digit is enabled (i.e., such digit is the summation of at
    least the number 4), such user does _not_ have *read permission* to newly
    created paths.
* Second digit lists permissions to deny the *owning group* (i.e., the group
   assigned to be the owner of newly created paths), as above.
* Third digit lists permissions to deny *other users* (i.e., users neither the
   owning user or in the owning group), as above.
/---
function set_path_creation_mask() {
    die_unless_arg 'Expected one permissions string.'
    :str permissions="${1}"
    builtin umask -- "${permissions}"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_path_creation_mask()

Print a human-readable synopsis of the current umask.

== See Also ==

* set_path_creation_mask().
/---
function print_path_creation_mask() {
    # Validate passed arguments. "umask -S" prints a symbolic representation of
    # such mask resembling "u=rwx,g=rx,o=". Unlike human-readable "chmod" input
    # (e.g., "u+rwx,g+rx-w,o-rwx"), "umask -S" :stdout.echo fails to specify whether
    # such permissions are enabled or disabled. In fact, it is the former.
    # Since this is not necessarily intuitive, convert the symbolic
    # representation :stdout.echo by "umask -S" to that input by "chmod".
    # Unsurprisingly, this is a convolute munging.
    die_if_args
    :str\
        symbols\
        symbol_umask\
        symbol_name\
        symbol_type\
        symbol_accepts\
        symbol_forbids
    :list symbol_types symbol_flags symbol_accepts_flags symbol_forbids_flags

    # Split "umask -S" output on commas.
    symbol_umask="$(builtin umask -S)"
    :list.set_to_string_split_on_string "${symbol_umask}" ',' symbol_types

    # For each of the three permission types (i.e., user, group, and other),
    # split such type on "=", convert the right-hand side of such split to a
    # list of at most three permissions (e.g., from a string "rw" to a list
    # "( r w )"), and difference the list "( r w x )" with such list. The
    # result is the list of all disabled permissions.
    symbol_flags=( 'r' 'w' 'x' )
    for symbol_type ("${symbol_types[@]}") {
        # Get the list of all disabled permissions.
        set_strings_to_string_split_on_string\
            symbol_name symbol_accepts "${symbol_type}" '='
        :str.Chars "${symbol_accepts}" symbol_accepts_flags
        set_list_to_list_difference\
            symbol_forbids_flags symbol_flags symbol_accepts_flags
#       :stdout.echo "symbol_accepts_flags: ${symbol_accepts_flags[@]}"
#       :stdout.echo "symbol_forbids_flags: ${symbol_forbids_flags[@]}"

        # By default, list expansion delimits elements with spaces. Avoid this.
        symbol_forbids="$(join_list symbol_forbids_flags)"

        # Avoid prefixing empty permissions with "+" and "-" symbols.
        if { :str.is_nonempty "${symbol_accepts}${symbol_forbids}" } {
            symbols+="${symbol_name}+${symbol_accepts}-${symbol_forbids},"
        } elif { :str.is_nonempty "${symbol_accepts}" } {
            symbols+="${symbol_name}+${symbol_accepts},"
        } else {
            symbols+="${symbol_name}-${symbol_forbids},"
        }
    }

    # Remove the trailing comma accidentally appended by the final iteration.
    remove_string_suffix symbols ','

    #FIXME: Color such output.
    # Print such permissions.
    :stdout.echo "Path creation mask (umask):
  in octal:   $(builtin umask)
  in symbols: ${symbols}"
}
