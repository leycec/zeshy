#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *path testers* (i.e., functions testing passed paths).
/---

#FIXME: zsh 5.0.6 introduces a minor feature whereby file glob expressions may
#be tested for in ":is"- and ":si"-delimited tests by suffixing such globs by
#"(#q): e.g.,
#
#    # Test whether there exist any files of type "c" in the current directory.
#    :is -n *.c(#qN) :si

# ....................{ EXCEPTIONS                         }....................
#FIXME: Rename to :die_if_path().

:func.doc <<'/---'
void die_if_path_exists(
    string pathname,
    string error_message = "Path \"${pathname}\" already exists.")

Throw an exception with the passed message if the passed path exists. The
simultaneity of modern filesystems renders this function less useful than one
might think. While calling this function to print a Zeshy-style exception
message is helpful, this function should _not_ be relied upon to ensure the
non-existance of a path prior to performing an operation requiring such path to
not exist. As such path could be created by another process immediately after
calling this function, this function invites subtle race conditions! Be wary,
intrepid `zsh` wanderer.
/---
function die_if_path_exists() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    if { :path.is "${pathname}" } {
        :die "${2-Path \"${pathname}\" already exists.}"
    }
}

#FIXME: Rename to :die_unless_path().
:func.doc <<'/---'
void die_unless_path(
    string pathname,
    string error_message = "Path \"${pathname}\" not found.")

Throw an exception with the passed message unless the passed path exists.
/---
function die_unless_path() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :path.is "${pathname}" or :die "${2-Path \"${pathname}\" not found.}"
}

:func.doc <<'/---'
[status: bool] die_unless_path_absolute(
    string pathname,
    string error_message =
        "Path \"${pathname}\" relative rather than absolute.")

Throw an exception with the passed message unless the passed path is absolute.
See :path.is_absolute() for further details.
/---
function die_unless_path_absolute() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :path.is_absolute "${pathname}" or :die\
        "${2-Path \"${pathname}\" relative rather than absolute.}"
}

#FIXME: Based on the documentation, I think we mean
#:die_unless_file_simple_or_dir(), yes? Grep for where we call this. Awkward!
#Oh, right. *OF COURSE* this should be :die_unless_file_simple_or_dir(); as
#currently defined, this is functionally equivalent to die_unless_path(), since
#if such path exists it must either be a file or directory. *sigh*

:func.doc <<'/---'
void die_unless_file_or_dir(
    string pathname,
    string error_message = "\"${pathname}\" not a file or directory")

Throw an exception with the passed message unless the passed path is either a
plain file or directory, thus excluding symbolic links, device files, named
pipes (FIFOs), and similar ``special'' files.
/---
function die_unless_file_or_dir() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :is_file "${pathname}" or is_dir "${pathname}" or
        :die "${2-Path \"${pathname}\" neither a regular_file or directory.}"
}

# ....................{ TESTERS                            }....................
#FIXME: Refactor all tests below to accept an arbitrary number of pathnames.
#See :is_path_executable() for implementation details.

:func.doc <<'/---'
[status: bool] :path.is(string pathname)

Report success if the passed path exists.
/---
function :path.is() {
    die_unless_arg 'Expected one pathname.'
    is -e "${1}" si
}

:func.doc <<'/---'
[status: bool] is_path_equals(string pathname1, string pathname2)

Report success if the two passed paths refer to the same existing file or
directory: e.g.,

.is_path_equals()
==========================================
[source]
------------------------------------------
>>> string on_censorship=\
...     "The Net interprets censorship as damage and routes around it."
>>> is_path_equals "${HOME}" /proc/self/root and :str.output "${on_censorship}"
The Net interprets censorship as damage and routes around it.
------------------------------------------
==========================================
/---
function is_path_equals() {
    die_unless_args_2 'Expected two pathnames.'
    is "${1}" -ef "${2}" si
}

# ....................{ TESTERS ~ name                     }....................
:func.doc <<'/---'
[status: bool] :path.is_absolute(string pathname)

Report success if the passed path is absolute (i.e., is prefixed by `/`),
regardless of whether such path exists.
/---
function :path.is_absolute() {
    die_unless_arg 'Expected one pathname.'
    is "${1[1]}" == '/' si
}

# ....................{ TESTERS ~ permission               }....................
:func.doc <<'/---'
[status: bool] :is_path_executable(string filename1, ...)

Report success if all passed paths are executable by the current user.
/---
function is_path_executable() {
    # Validate sanity.
    die_unless_args 'Expected one or more pathnames.'

    # If only one path was passed, test such paths with test() operators.
    if { is_arg } {
        # Validate additional sanity.
        :str pathname="${1}"
        die_unless_path "${pathname}"

        # Test such path.
        :is -x "${pathname}" :si
    # Else, at least two paths were passed. Test such paths with glob
    # qualifiers.
    } else {
        #FIXME: Implement die_unless_paths().

        # Validate additional sanity.
        die_unless_paths "${@}"
        :list pathnames_executable

        # List of all such paths executable by the current user.
        set_list_to_paths_matching_qualifier\
            pathnames_executable "${@}" '(e:''[[ -x "${REPLY}" ]]'':)'

        # Report success only if there exist exactly as many such paths as
        # passed paths, in which case all such paths are executable.
        :arg_count.== ${#pathnames_executable}
    }
}

:func.doc <<'/---'
[status: bool] is_path_readable(string pathname)

Report success if the passed path exists and is readable by the current user.
/---
function is_path_readable() {
    die_unless_arg 'Expected one pathname.'
    is -r "${1}" si
}

:func.doc <<'/---'
[status: bool] is_path_writable(string pathname)

Report success if the passed path exists and is writable by the current user.
/---
function is_path_writable() {
    die_unless_arg 'Expected one pathname.'
    is -w "${1}" si
}

# --------------------( WASTELANDS                         )--------------------
