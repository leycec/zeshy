#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*String repeaters* (i.e., functions repeating strings, typically for ensuring
padded, aligned, and/or otherwise structured output).
/---

# ....................{ SETTERS                            }....................
#FIXME: If any function begged for examples, this would be it.
#FIXME: It's possible to create a generalized version of this function named
#:set_string_to_string_repeated_to_length() accepting any padding regardless of
#whether this padding contains ANSI escape sequences. Doing so requires code
#similar to that shifted to the wastelands (grep for
#"repetition_count__sstsartl"): namely, manually calculating whether the length
#of this padding excluding ANSI escape sequences evenly divides the passed
#length and, if not, appending the leftmost subset of such padding (again
#excluding ANSI escape sequences, which may be easier said than done). In such
#case, repetition must use the generalized printf() technique rather than the
#parameter expansion flag "(r...)" technique below. In other words, such
#function will have a completely different and considerably more complex and
#less efficient implementation. It'll probably be important at some point -- but
#it certainly isn't now!

:func_ ':Str.repeat_str_ansiless_to_len(
    :Str str_name
    :str+nonempty padding
    :int+nonnegative length
) [var_name_suffix="__srsatl"]' :func{
    :str remainder__srsatl
    :char token__srsatl

    # Parameter expansion token suitable for repeating this padding. If no such
    # token exists, an exception will be thrown. While this would typically be
    # problematic, padding strings are typically succinct and hence unlikely to
    # contain all possible parameter expansion tokens. Moreover, the general-
    # purpose solution of avoiding these tokens is substantially more complex,
    # more error prone, and less efficient than the token-based solution
    # implemented below.
    :set_char_to_string_expansion_token token__srsatl "${padding__srsatl}"

    # Repeat this string. While the length of this padding is not guaranteed to
    # divide the passed length, parameter expansion flag "(r...)" guarantees
    # that in that case the last repetition of such padding only expands to the
    # leftmost substring of such padding producing a string of exactly the
    # passed length: e.g.,
    #
    #     >>> print ${(r:6::=~-:):-}
    #     =~-=~-
    #     >>> print ${(r:8::=~-:):-}
    #     =~-=~-=~
    #
    # Parameter expansion flag "(l...)" behaves similarly except that in that
    # case the first repetition of such padding only expands to the rightmost
    # substring of this padding producing a string of exactly the passed length.
    # Since this does *NOT* produce the expected result, the implementation
    # below leverages flag "(r...)" instead: e.g.,
    #
    #     >>> print ${(l:6::=~-:):-}
    #     =~-=~-
    #     >>> print ${(l:8::=~-:):-}
    #     ~-=~-=~-
    eval ${str_name__srsatl}'="${(r'${token__srsatl}${length__srsatl}${token__srsatl}${token__srsatl}${padding__srsatl}${token__srsatl}'):-}"'
}:func <<'/---'
Set the string variable with the passed name to the passed *ANSI-less padding*
(i.e., string guaranteed by the caller to _not_ contain ANSI escape sequences)
repeated until producing a string of exactly the passed length.

If this length does _not_ evenly divide the length of this padding, the last
repetition of this padding will be truncated on the right by as many characters
as required to produce a string of exactly the passed length.

== Caveats ==

*Do _not_ embed ANSI escape sequences in this padding.* Doing so over-reports
this padding's length, producing a string of insufficient length.
/---

#FIXME: In lieu of unit tests...
#function biso() {
#    string text padding="=>/{"
#    :Str.repeat_str_ansiless_to_len text "${padding}" 9
#    :stdout.echo "padding: ${padding}; result length: 9; result: ${text}"
#}

# ....................{ REPEATERS                          }....................
#FIXME: Optimize this implementation to avoid the internal subshell fork, which
#is *EXTREMELY* costly. We call this function in loops elsewhere, so this is
#fairly critical.
:func_ ':void :Str.repeat_str(
    :Str str_name :str text :int+nonpositive count) [
    var_name_suffix="__Srs"]' :func{
    # If this count is 0, return the empty string. This isn't simply a trivial
    # edge-case optimization; the technique below assumes a strictly positive
    # count, actually repeating this string twice rather than printing the empty
    # string when passed a count of 0.
    (( count__Srs )) :or :success.report

    # Technically, there exist a multitude of techniques for repeating strings.
    # The technique implemented here is *NOT* necessarily the most efficient for
    # edge-case strings but has the distinct benefit of behaving as expected for
    # all strings regardless of content. The (arguably) more popular alternative
    # to this technique leverages either the parameter expansion flags "(l...)"
    # or "(r...)" as follows:
    #
    #    # If this text does *NOT* contain at least one parameter expansion token,
    #    # prefer token- to printf()-based repetition. The latter expands the
    #    # expression "{1..${count}}" to ${count} number of integer arguments and
    #    # hence fails to efficiently scale to large counts.
    #    if { :set_char_to_string_expansion_token_if_found\
    #            token "${text}" } {
    #        # Desired length *AFTER* repeating such string below. See
    #        # get_string_ansiless_length_printable() for further details.
    #        :int length=$(( count * ${(m)#text} ))
    #
    #        # Repeat this string. Since such string's length is guaranteed to divide
    #        # the total length computed above, repeating such string in either a
    #        # rightmost (i.e., ${(r...):-}) or leftmost (i.e., ${(l...):-}) manner
    #        # produces the same result. For orthogonality with related functionality
    #        # (e.g., :set_string_to_string_padded_to_length()), repeat in a
    #        # rightmost manner.
    #        eval ':stdout.echo ${(r'${token}${length}${token}${token}${text}${token}'):-}'
    #    }
    #
    # Unfortunately, these parameter expansion flags fail to account for non-
    # printable ANSI escape sequences when calculating this length, rendering
    # this technique erroneous for strings containing these sequences. While the
    # prior conditional *COULD* be improved to detect these strings and avoid
    # applying this technique to these strings, the cost of this detection and
    # the necessity of finding a suitable parameter expansion token quickly
    # overwhelms any efficiency gains of the technique itself.
    #
    # Instead, implement printf()-based repetition.

    #FIXME: Premature optimization! Just call escape_string_for_printf() here.

    # For safety, escape printf()-reserved percent signs in this string. For
    # efficiency, inline this implementation. See escape_string_for_printf() for
    # further details.
    :Str.set\
        "${str_name__Srs}"\
        "$(printf -- "${text__Srs//\%/%%}%.0s" {1..${count__Srs}})"
}:func <<'/---'
Repeat the passed string the passed number of times.

== Examples ==

==========================================
[source]
------------------------------------------
$$$ :str on_acquiescence on_relinquishment='The best thing to do with the best things in life is to give them up.'${ZESHY_ASCII_NEWLINE}
$$$ :Str.repeat_str on_acquiescence "${on_relinquishment}" 3
$$$ :stdout.echo "${on_acquiescence}"
The best thing to do with the best things in life is to give them up.
The best thing to do with the best things in life is to give them up.
The best thing to do with the best things in life is to give them up.
------------------------------------------
==========================================
/---

#FIXME: In lieu of unit tests...
#function baso() {
#    :Str.repeat_str "${ZY_STYLE_TO_COLOR[color.red]}bo${ZY_STYLE_TO_COLOR[color.white]}lo" 7
#}
