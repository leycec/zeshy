#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Newline-delimited strings.
/---

#FIXME: Refactor all getters into setters.

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] is_string_line(string text, string line)

Report success if the passed string contains the passed line: e.g.,

.is_string_line()
==========================================
[source]
------------------------------------------
>>> :str on_right_causes=\
...    "Don't look for media-approved ideologically sound Right Causes where
...     there are none. Look out of the window instead, and do something about
...     what you see there."
>>> is_string_line "${on_right_causes}" "what you see there." or :stdout.echo\
...     "Never trust anything that bleeds for four days but doesn't :die."
Never trust anything that bleeds for four days but doesn't :die.
------------------------------------------
==========================================
/---
function is_string_line() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one line.'

    # Test such string. Dismantled, this is:
    #
    # * "(|*...)", matching either the start of the string or a newline.
    # * "(|...*)", matching either the end of the string or a newline.
    #
    # To avoid string copies, inline such test.
    is "${1}" == (*${ZY_ASCII_NEWLINE}|)"${2}"(${ZY_ASCII_NEWLINE}*|) si
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor into a setter.
:func.doc <<'/---'
:str get_string_line(:str text :int line_number)

Get the line with the passed (possibly negative) 1-based line number from the
passed string.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_forced_labor=\
...    "When I say I want to abolish work, I mean just what I say, but I want to
...     say what I mean by defining my terms in non-idiosyncratic ways. My
...     minimum definition of work is forced labor, that is, compulsory
...     production. Both elements are essential. Work is production enforced by
...     economic or political means, by the carrot or the stick. (The carrot is
...     just the stick by other means.) But not all creation is work. Work is
...     never done for its own sake, it's done on account of some product or
...     output that the worker (or, more often, somebody else) gets out of it.
...     This is what work necessarily is. To define it is to despise it. But
...     work is usually even worse than its definition decrees. The dynamic of
...     domination intrinsic to work tends over time toward elaboration. In
...     advanced work-riddled societies, including all industrial societies
...     whether capitalist or \"Communist,\" work invariably acquires other
...     attributes which accentuate its obnoxiousness."
>>> get_string_line "${on_forced_labor}" 1
When I say I want to abolish work, I mean just what I say, but I want to
------------------------------------------
==========================================
/---
function get_string_line() {
    die_unless_args_2 'Expected one string and one line number.'
    :str text="${1}" line_number=${2} glob_line
    :int.die_unless_nonzero "${line_number}"

    # If such line number is positive, get such line by matching without
    # capturing the required number of prior newlines and then capturing the
    # next line into ${match[1]}. (This is more efficient than list splitting.)
    if (( line_number > 0 )) {
        # Glob matching a single line.
        glob_line="[^$'\n']#"

        # Match the desired line or throw an exception if no such line exists.
        :str.is_globbed\
            (${glob_line}${ZY_ASCII_NEWLINE})(#c${line_number})${ZY__GLOB_ENABLE_CAPTURING_GROUPED}(${glob_line})* or
            :die 'String "'$(truncate_string_readable: "${text}")'" contains no line '${line_number}'.'

        # Return this line.
        :str.return "${match[1]}"
    # Else, this line number is negative. Applying the prior technique would
    # require first counting the number of lines in such string and then
    # converting the passed line number from negative to positive, reducing the
    # efficiency of such technique. Instead, just split this list.
    } else {
        # List of all lines split from this string.
        :list lines
        :str.Lines "${1}" lines
        die_unless_list_index lines "${line_number}"\
            'string "'$(truncate_string_readable: "${text}")'" contains no line '${line_number}

        # Return this line.
        :str.return "${lines[${line_number}]}"
    }
}

:func.doc <<'/---'
string get_string_lines(
    string text, integer start_line_number, integer end_line_number)

Get all lines inclusively between the passed (possibly negative) 1-based line
numbers from the passed string: e.g.,

.get_string_lines()
==========================================
[source]
------------------------------------------
>>> string on_monoculture=\
...    "That's what a monoculture is. It's everywhere, and it's all the same.
...     And it takes up alien cultures and digests them and shits them out in a
...     homogenous building-block shape that fits seamlessly into the vast blank
...     wall of the monoculture. This is the future. This is what we built. This
...     is what we wanted. It must have been. Because we all had the fucking
...     choice, didn't we? It is only our money that allows commercial culture
...     to flower. If we didn't want to live like this, we could have changed it
...     any time, by not paying for it. So let's celebrate by all going out and
...     buying the same burger."
>>> get_string_lines "${on_monoculture}" -8 -7
homogenous building-block shape that fits seamlessly into the vast blank
wall of the monoculture. This is the future. This is what we built.
------------------------------------------
==========================================
/---
function get_string_lines() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one string, one start line number, and one end line number.'
    string line_number_start="${2}" line_number_end="${3}"

    # List of all lines split from this string. While this certainly could be
    # implemented with glob matching as under get_string_line(), it's uncertain
    # whether that would actually be any faster than the current approach.
    :list lines
    :str.Lines "${1}" lines
    die_unless_list_range lines "${line_number_start}" "${line_number_end}"

    # Join the desired lines back into a string. Do *NOT* quote such expansion.
    join_strings_on_newline ${lines[${line_number_start},${line_number_end}]}
}

# ....................{ GETTERS ~ count                    }....................
:func.doc <<'/---'
integer get_string_line_count(string text1, string text2, ...)

Get the total number of lines in the passed strings: e.g.,

.get_string_line_count()
==========================================
[source]
------------------------------------------
>>> :str on_candidates=\
...    "I always thought people were essentially bright. Distracted, sure, and
...     weak, and beaten, but never stupid. And then you show them, here's the
...     two people who want to be president. One is evil, but you can deal with
...     him, because he actually harbors beliefs. The other one will tell any
...     lie, wear any mask, to become president, and not only that, he fucking
...     hates you, and he's doing this just so he can make your lives hell. And
...     who do you think they vote for? Stupid."
>>> get_string_line_count "${on_candidates}"
7
------------------------------------------
==========================================
/---
function get_string_line_count() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'

    # List of all lines split from these strings.
    :list lines
    :str.Lines "${*}" lines

    # Number of such lines.
    :int line_count
    :List.Size lines line_count

    # Return this number.
    :stdout.echo "${line_count}"
}

# ....................{ NUMBERERS                          }....................
#FIXME: Poor nomenclature. Such functions will be rarely called and hence
#should be accessible as either getters or converters -- say,
#get_string_lines_numbered() (which coincides fairly nicely with existing
#get_string_line() nomenclature.
:func.doc <<'/---'
string number_string_lines(string text1, ...)

Prefix each line of the passed strings with such line's number.
/---
function number_string_lines() {
    die_unless_args 'Expected one or more strings.'
    :stdout.echo "${@}" |
        run_code_with_options 'run_code_paged command nl' ZY_OPTIONS_NL
}

#FIXME: Rename to number_string_lines_highlighting_line().
:func.doc <<'/---'
string number_string_lines_highlighting(
    string text, integer highlight_line_index)

Prefix each line of the passed string with that line's number and highlight
the passed line number. Since `nl` supports no highlighting, this function
accepts no `nl`-specific options.
/---
function number_string_lines_highlighting() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one line number.'
    string text="${1}" line_index="${2}"
    integer line_count
    :int.die_unless_positive "${line_index}"

    #FIXME: Actually, it's trivial to convert negative to positive line numbers.
    # Validate sanity. Negative line numbers are impermissible.
    line_count="$(get_string_line_count "${text}")"
#   print_message "line length: ${line_count}"
    (( 1 <= line_index && line_index <= line_count )) or
        :die "line number ${line_index} not in [1, ${line_count}]"

    #FIXME: Convert to zeshy. "awk" dependencies are simply awkward.
    # Number lines.
    :stdout.echo "${text}" | awk -vNRHI=${line_index} '
# If any line other than the highlight line, print the current line number
# followed by the line.
NR != NRHI { printf("%6d%7s%s\n", NR, "", $0) }
# If the highlight line, print the current line number prefixed and suffixed by
# pleasing ASCII arrows. (See curse_call_stack() for similar logic.)
NR == NRHI {
    # Number of digits in the current line number.
    NRLEN = length(NR);
         if (NRLEN==1) {NRNOW = " <-~ " NR}
    else if (NRLEN==2) {NRNOW = "<-~ " NR}
    else if (NRLEN==3) {NRNOW = "<- " NR}
    else               {NRNOW = NR}       # if true, your string is horrid.
    printf("%s ~->   %s\n", NRNOW, $0)
}'
}

# ....................{ REMOVERS                           }....................
:func.doc <<'/---'
string remove_string_line_duplicates(string text1, string text2, ...)

Remove all duplicate lines from the concatenation of the passed strings.
Unlike conventional solutions (e.g., `sort -u`, `sort | uniq -u`), this
function preserves the line order of returned lines: e.g.,

.remove_string_line_duplicates()
==========================================
[source]
------------------------------------------
>>> remove_string_line_duplicates\
...    "the Perfect
...     and
...     the Perfect
...     are one Perfect
...     and not two;
...     nay, are none!"
the Perfect
and
are one Perfect
and not two;
nay, are none!
------------------------------------------
==========================================
/---
function remove_string_line_duplicates() {
    # Split passed strings into lines, remove duplicate lines, and join all
    # remaining lines back into a newline-delimited string. Dismantled, this is:
    #
    # * "f", splitting passed strings into lines.
    # * "u", excluding duplicate lines.
    die_unless_args 'Expected one or more strings.'
    join_strings_on_newline "${(uf)*}"   # this... this is ridiculous
}

# ....................{ ITERATORS                          }....................
#FIXME: Optional arguments are horrible. Make such argument mandatory.

:func.doc <<'/---'
string for_string_lines(
    string text,
    string line_string_name = 'LINE',
    string code)

Run the passed code for each line of the passed string, capturing such line
into the passed local string variable (defaulting to ${LINE}): e.g.,

.for_string_lines()
==========================================
[source]
------------------------------------------
>>> :str on_little_men=\
...    "Because you have no memory for things that happened ten or twenty years
...     ago, you're still mouthing the same nonsense as two thousand years ago.
...     Worse, you cling with might and main to such absurdities as 'race,'
...     'class,' 'nation,' and the obligation to observe a religion and repress
...     your love."
>>> for_string_lines "${on_little_men}"\
...     ':str.is_globbed "${LINE}" *"you "* and :stdout.echo "${LINE}"'
Because you have no memory for things that happened ten or twenty years
Worse, you cling with might and main to such absurdities as 'race,'
------------------------------------------
==========================================
/---
function for_string_lines() {
    # Validate sanity.
    die_unless_args_2_to_3\
        'Expected one string, optional line string name, and one code string.'
    :str\
        text__fsl="${1}"\
        string_name_line__fsl='LINE'\
        command__fsl="${@[-1]}"
    :int length__fsl
    die_unless_string_nonempty "${command__fsl}" 'Code empty.'
    if { is_args_3 } { string_name_line__fsl="${2}" }
    :die_unless_var_name "${string_name_line__fsl}"

    # Currently matched line.
    :str "${string_name_line__fsl}"

    # Byte length of such string.
    :set_int_to_string_byte_count length__fsl "${text__fsl}"

    # If the string is sufficiently short, splitting such string on newlines
    # into a list of string lines *BEFORE* iterating such lines more
    # efficient than dynamically iterating PCRE line matches. While the latter
    # avoids both the space and time costs of splitting a string into a list,
    # the cost of PCRE line matching overwhelms such costs on "short" strings.
    #
    # Pending further tests, consider strings under 16KB to be short.
    if (( length__fsl <= 16000 )) {
        # List of all lines split from this string.
        :list lines__fsl
        :str.Lines "${text__fsl}" lines__fsl

        # Iterate this list and hence these lines.
        eval 'for '${string_name_line__fsl}' ("${lines__fsl[@]}") {
            '${command__fsl}'
        }'
    # Else, dynamically iterate PCRE line matches.
    } else {
        # PCRE matching implicitly captures each match (i.e., line) to ${MATCH}.
        for_string_text_matching_pcre_multiline: "${text__fsl}" '^.*$'\
            ${string_name_line__fsl}'="${MATCH}"
        '${command__fsl}
    }
}
