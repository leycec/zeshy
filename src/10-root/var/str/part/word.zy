#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Shell words* (i.e., substrings split from their parent string according to
`zsh`- rather than ${IFS}-based string splitting rules).
/---

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_string_word(:str text :int word_index)

Shell word with the passed 1-based index in the passed string if this string
contains this word *or* throw an exception otherwise.

== Examples ==

.get_string_word()
==========================================
[source]
------------------------------------------
>>> :str methods_of_control="
... People use the word \"natural.\" What is natural to me is these
... botanical species which interact directly with the nervous system. What
... I consider artificial is four years at Harvard, the Bible, Saint
... Patrick's cathedral, and Sunday school teachings."
>>> get_string_word "${methods_of_control}" 5
"natural."
------------------------------------------
==========================================
/---
function get_string_word() {
    die_unless_args_2 'Expected one string and one word index.'
    :list words

    # Return this word. In theory, efficiently indexing this text with list
    # index flag "(w)" should suffice: e.g.,
    #
    #    >>> :stdout.echo "${text[(w)${word_index}]}"
    #
    # Unfortunately, zsh *ALWAYS* reports success from such flag -- even if no
    # such word exists: e.g.,
    #
    #    # wat? zsh.
    #    >>> string wo='am wi' 
    #    >>> print ${wo[(w)777]}
    #    wi
    #    >>> print ${wo[(w)-666]}
    #    am
    #
    # Until such issue is resolved, we digress to manually splitting such string
    # on shell words into a local list and indexing into such list. *sigh*
    words=( "${(z)1}" )
    get_list_item words "${2}"
}


:func.doc <<'/---'
:str get_string_lines_word(string text, integer column_index)

Newline-delimited string listing the shell word at the whitespace-delimited
column with the passed 1-based index in each line of the passed string 
if at least one line contains such a column _or_ throw an exception otherwise.

== Examples ==

.get_string_lines_word()
==========================================
[source]
------------------------------------------
>>> :str on_america="
... We  are       waking from the   American Dream
... to  realize   that   it   was   a        dream
... few Americans lived  in   their waking   hours."
>>> get_string_lines_word "${on_america}" -1
Dream
dream
hours.
------------------------------------------
==========================================
/---
function get_string_lines_word() {
    die_unless_args_2 'Expected one string and one word index.'
    :str text="${1}" word_index="${2}"
    :int.die_unless "${word_index}"

    # Return these words.
    for_string_line_words "${text}"\
       'if :not (( ${+match['${word_index}']} )) {
            die_unless_list_index match '${word_index}'
        }
        :stdout.echo "${match['${word_index}']}"'
}

# ....................{ GETTERS ~ count                    }....................
:func.doc <<'/---'
:int get_string_word_count(+:str texts)

Number of shell words in the passed strings.

Despite the term ``word'', this does _not_ correspond to the conventional
human-readable word count.

== Examples ==

.get_string_word_count()
==========================================
[source]
------------------------------------------
>>> :str on_cloudbusting="
... On top of the world,
... Looking over the edge,
... You could see them coming.
... You looked too small
... In their big, black car,
... To be a threat to the men in power."
>>> get_string_word_count "${on_cloudbusting}"
1
------------------------------------------
==========================================
/---
function get_string_word_count() {
    die_unless_args 'Expected one or more strings.'
    :list words
    :int word_count

    # List of all words split from such string(s).
    :str.Words "${*}" words

    # Number of these words.
    :List.Size words word_count

    # Return this number.
    :stdout.echo "${word_count}"
}

# ....................{ ITERATORS                          }....................
:func.doc <<'/---'
:str for_string_words(
    :str text
    ?:Str word_string_name='WORD'
    :str code
)

Run the passed code for each shell word of the passed string, capturing this
word into the passed local string variable (defaulting to ${WORD}).

== Examples ==

.for_string_words()
==========================================
[source]
------------------------------------------
>>> string on_truth="
... Somewhere in Communist Russia I'll bet there's a little boy who has
... never known anything but censorship and oppression. But maybe he's heard
... of America, and he dreams of living in this land of freedom and
... opportunity! Someday, I'd like to meet that little boy...and tell him
... the awful TRUTH ABOUT THIS PLACE!!"
>>> for_string_words "${on_truth}"\
...     'is "${WORD}" == ?*om*? and :stdout.echo "${WORD}"'
Somewhere
Communist
freedom
Someday,
------------------------------------------
==========================================
/---
function for_string_words() {
    die_unless_args_2_to_3\
        'Expected one string, optional word string name, and one code string.'
    :str\
        text__fsw="${1}"\
        word_string_name__fsw='WORD'\
        code__fsw="${@[-1]}"
    is_args_3 :or word_string_name__fsw="${2}"
    :die_unless_var_name "${word_string_name__fsw}"
    die_unless_string_nonempty "${code__fsw}" 'Expected nonempty command.'

    # Current word.
    :str "${word_string_name__fsw}"

    # Split this string into words.
    eval 'for '${word_string_name__fsw}' ("${(z)'${text__fsw}'}") {
        '${code__fsw}'
    }'
}


:func.doc <<'/---'
:str for_string_line_words(
    :str text
    ?:Str line_string_name='LINE'
    ?:List word_list_name='word'
    :str code
)

Run the passed code for each line of the passed string, capturing this line into
the passed local string variable (defaulting to ${LINE}) and each shell word of
this line into an element of the passed local list variable (defaulting to
${word}).

== Examples ==

.for_string_line_words()
==========================================
[source]
------------------------------------------
>>> :str plan_plant_planet="
... The process begins by declaring legitimate what we have denied for so
... long. Let us declare nature to be legitimate. All plants should be
... declared legal, and all animals for that matter. The notion of illegal
... plants and animals is obnoxious and ridiculous."
>>> for_string_line_words "${plan_plant_planet}" ':stdout.echo "${word[-3]}"'
denied
plants
notion
obnoxious
------------------------------------------
==========================================
/---
function for_string_line_words() {
    die_unless_args_2_to_4\
        'Expected one string, optional line string name, optional word list name, and one code string.'
    :str\
        text__fslw="${1}"\
        line_string_name__fslw='LINE'\
        word_list_name__fslw='word'\
        code__fslw="${@[-1]}"
    is_args_3_to_4 :or line_string_name__fslw="${2}"
    is_args_4      :or word_list_name__fslw="${3}"
    :die_unless_var_names\
        "${line_string_name__fslw}" "${word_list_name__fslw}"
    die_unless_string_nonempty "${code__fslw}" 'Expected nonempty command.'

    # List of currently matched words.
    :list ${word_list_name__fslw}

    # Split each such line into words.
    for_string_lines "${text__fslw}" "${line_string_name__fslw}"\
        ${word_list_name__fslw}'=( "${(z)'${line_string_name__fslw}'}" )
        '${code__fslw}
}
