#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Revise documentation to reference the ":str/:glob" parameter type rather
#than the long-obsolete "<globbable>" flag.
:parcel <<'/---'
Perl-compatible Regular Expressions (PCREs).

== Caveats ==

While glob-specific functions are declared to be `<globbable>` and hence
permit globs to be unquoted, PCRE-specific functions are _not_ and hence
require PCREs to be single-quoted. Avoid double-quoting PCREs, which often
contain `\`-prefixed expressions treated by `zsh` as character escapes
implicitly deleting each such `\`.
/---

#FIXME: *ALL* PCRE-based functionality should call :pcre.compile(), defined by
#+{..-seed/macro/pcre/compile}.
#FIXME: Since zsh only supports one singleton compiled PCRE at a time, PCRE-
#based callables must *NEVER* be nested. Fortunately, this may be
#programmatically guaranteed via the following:
#
#* Declare a boolean global ${ZY__PCRE_IS_MATCHING}, initialized to 0.
#* Before calling pcre_compile(), such callables should test whether
#  ${ZY__PCRE_IS_MATCHING} is 1. If so, such call is nested in a call to
#  another callable already performing PCRE-based iteration, implying that an
#  exception should be thrown. Otherwise, such callables should set
#  ${ZY__PCRE_IS_RECOMPILED} to 1.
#* Before calling pcre_match(), such callables should set
#  ${ZY__PCRE_IS_MATCHING} to 1.
#* After terminating such iteration (either successfully or unsuccessfully and
#  hence probably in an "always {...}" block), such callables should reset
#  ${ZY__PCRE_IS_MATCHING} to 0.
#
#Done. Safe PCRE-based iteration for all!

#FIXME: We've finally uncovered the Dark Magestic Art of *BOTH* passing aliases
#multiple arguments *AND* "passing" aliases code to be dynamically evaluated.
#The solution to the latter leverages the solution to the former, so we start
#there. Consider the current alias undefine_variable_for():
#
#    alias undefine_variable_for='{
#        # Validate sanity.
#        list args__uvf; set_list_to_stdin_words args__uvf
#        (( ${#args__uvf} >= 1 )) or :die "Expected one or more variable names."
#
#        # For safety, destructively coerce such variables to writable local strings.
#        # When passed read-only variables, this prevents zsh from failing on the
#        # subsequent call to unset() with "zsh: ${variable_name} read-only".
#        typeset +r -- "${args__uvf[@]}"
#
#        # Unset such variables.
#        unset -- "${args__uvf[@]}"
#    } <<<'
#
#This is replaceable with the following normal alias undefine_variables()
#internally defining a temporary global alias, arbitrarily shadowing "--" in
#this case:
#
#    alias ":undefine_variables--"='
#       :alias_word "--"="
#           :undefine_alias \"--\"
#           typeset +r -- \"${variable_names__uv[@]}\"
#           unset -- \"${variable_names__uv[@]}\""
#       :list variable_names__uv
#       :set_list_to_args_1_or_more variable_names__uv'
#
#Ridiculously simple as well as fairly clever, eh? A propitious combination.
#Such alias must be called like so:
#
#    :undefine_variables-- this_one and_this_one and_this_last_one --
#
#Due to the additional burden on the caller, such alias names should probably be
#suffixed by "--" to explicitly inform the caller of such calling conventions.
#Alternately, and this is probably the better solution, we could temporarily
#shadow "{" to expand to the empty string and "}" to expand to the prior
#definition of "--", called like so:
#
#    :undefine_variables_in_block { this_one and_this_one and_this_last_one }
#
#That's certainly more intuitive.
#
#An issue does arise with all of this, however. If an exception is called by the
#arguments passed to such alias, the subsequent alias reverting such temporary
#shadowing will never be expanded, effectively rendering such shadowing
#*PERMANENT* -- which is *REALLY, REALLY HORRIBLE*. Since we *REALLY, REALLY*
#crave the freedom that such aliases afford, however, this must simply be worked
#around. And, obviously, it can.
#
#Simply have our homespun exception handler forcefully undefine all aliases
#shadowing "{" and "}". Fortunately, it's not hard to test this: e.g.,
#
#    # This should trigger the edge case noted above.
#    :undefine_variables_in_block { $(false) }
#
#All such aliases *MUST* explicitly state in their documentation's "Caveats"
#section that alias arguments *MUST* on penalty of terrible things happening
#delimit such arguments with "{" and "}". Failing to do so will cause "{" and
#"}" to be shadowed until the next thrown exception. Since shadowing "{" and
#"}" in this way is likely to provoke an exception in short order, this isn't
#quite as terrible as it could be. But it's still terrible.
#
#If the burden of shadowing "{" and "}" simply becomes too much (or zsh
#prohibits us from shadowing such strings), there are certainly safer
#alternatives we could try -- namely, similar parens pairs. Neither "[" and "]"
#or "(" and ")" are used *AT ALL* in the zeshy codebase, suggesting that
#terribly things probably won't happen when the user fails to embed arguments in
#such delimiters. How about:
#
#    :undefine_variables_in_parens ( this_one and_this_one and_this_last_one )
#
#Oh, wait. "(" and ")" are obviously used extensively for nonscalar definitions.
#Right, then. That leaves us with:
#
#    :undefine_variables_bracketed [ this_one and_this_one and_this_last_one ]
#
#Should be the safest, I imagine. Right. Let's go with this one! "[" and "]"
#weren't doing anything for us, anyway, given their obsoletion in zsh by the
#similar pair "[[" and "]]".
#
#Ah! Right. Since subshells inherit aliases, we absolutely *CANNOT* shadow a
#critical delimiter. Consider the following:
#
#    # And... we've now broken the world.
#    :undefine_variables_in_block { $(if true { print oh } else { print no }) }
#
#"[" and "]" it is, then. :)

#FIXME: Which returns us to a solution for the second matter above, of "passing"
#aliases code to be dynamically evaluated. Note that the following example uses
#delimiters "[" and "]" for the exact same reasons as the prior solution. "{"
#and "}" are simply out of the question, due to command substitutions. Then:
#
#    :for_string_text_matching_pcre_bracketed "test string" "\s++(str)" [
#        :stdout.echo "${match[1]}"
#    ]
#
#Great. I've confirmed Vim syntax highlights such code as expected, which
#(unsurprisingly) is a principal concern, although it probably shouldn't be! In
#any event, how does one define such alias? Simple, given the prior solution:
#
#    alias :for_string_text_matching_pcre_bracketed='
#       :alias_word "["="
#           :undefine_alias \"[\""
#           :str\
#               text__fstmpb="${args__fstmpbb[1]}"\
#               pcre__fstmpb="${args__fstmpbb[2]}"\
#               code__fstmpb="${args__fstmpbb[3]}"
#           :die_unless_str_nonempty pcre__fstmpb 'Expected non-empty PCRE.'
#           :str  MATCH
#           :list match
#           pcre_compile -- "${pcre__fstmpb}"
#           pcre_study
#           string ZPCRE_OP='0 0'
#           while { pcre_match -b -n ${ZPCRE_OP[(w)2]} -- "${text__fstmpb}" } {"
#       :alias_word "]"="}
#           :undefine_alias \"]\""
#       :list args__fstmpbb
#       :set_list_to_args_3 args__fstmpbb'
#
#It's almost ludicrously brilliant in its circularity. And I'm 100% confident it
#will work as advertised. We did it! I can hardly believe, and doubt terribly
#many others will ever see the worth in it. But... there it is. Awesome.
#FIXME: There's only one catch, and it relates to an issue we've noted elsewhere
#with such sorts of solutions. There's no real reason that the bracketed code
#can't expand another such alias. But the above definition implicitly prohibits
#such expansion, as that would overwrite the prior definition of "]". Ah, but,
#so long as we just alias "]" to "}" as we do above, this isn't an issue. But,
#it *WILL* probably be an issue with other such iterators, some of which will
#need to expand code *AFTER* the caller-provided block of code. And doing that
#reliably requires some... finesse. Which means that assuming "]" still expands
#to "}" is inherently unsafe, since other aliases will need to expand it
#differently.
#
#Hmm; honestly, the only safe means of doing so is somewhat clumsy, requiring
#alias-specific initiators and terminators. We'd call such aliases like so:
#
#    :for_string_text_matching_pcre_bracketed_start "test string" "\s++(str)" [
#        :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_bracketed_stop
#
#Of course, at this point, readability has all but died. How about:
#
#    :for_string_text_matching_pcre_init "test string" "\s++(str)"
#    :for_string_text_matching_pcre_start
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#Right. It's either that, or:
#
#    :for_string_text_matching_pcre_start "test string" "\s++(str)" --
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#Right. While terser, the latter form is inherently dangerous when operating on
#arbitrary user-provided strings. While the user *COULD* conceivably pass...
#Hm. Right. We no longer need to have such delimiter terminate such line,
#implying that the following should suffice:
#
#    :for_string_text_matching_pcre_start "test string" "\s++(str)"
#    :
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#Sweet, no? I mean, *SURE*, it is a bit awkward. But it's reliable, moderately
#terse, and immanently usuable. I'm unconvinced we can do better. Still,
#contemplate her a bit more before we commit this to repository memory. Ah;
#wait. ":" has critical import in zsh, as used widely throughout the zeshy
#codebase, ensuring conflicts with command substitutions in alias arguments. So,
#how about:
#
#    :for_string_text_matching_pcre_start "test string" "\s++(str)"
#    ::
#
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#It's either that or use "." (which also works). Right. Go with "::". As the
#prior example demonstrates, "::" produces a reasonably aesthetic result that
#*SHOULD* be readily memorable. That said, the nomenclature needs to explicitly
#specify double colons to be required. Hm; "_with_double_colon" and similar is
#overly cumbersome. How about just:
#
#    :for_string_text_matching_pcre_start:: "test string" "\s++(str)"
#    ::
#
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#The "::" suffixing such alias name should suffice to inform the user that
#something's up. Assuming the user actually then reads the alias documentation
#or is sufficiently aware of zeshy to recall what a suffixing "::" means, this
#should be reasonably readable. I mean, sure... it's a bit obtuse. But I'm not
#convinced we can do better. Right. We *REALLY* don't want to prefix such alias
#name by "::", as that implies such alias to be a private alias as well as
#requiring the corresponding "_stop" alias to also be prefixed by "::" for
#orthogonality.
#
#O.K.; I'm satisfied. The prior example *IS IT*. Full stop. Let's do this! Oh,
#right. We'd might as well truncate that to:
#
#    :for_string_text_matching_pcre_start::{ "test string" "\s++(str)" ::}
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#Ugh. Alternative delimiters "[" and "]" *AND* "(" and ")" cannot be used
#without explicit escaping in function and alias names, rendering such
#delimiters useless for our purposes. We'd prefer to use the briefer ":{" and
#":}" here, but for (obvious reasons) such delimiters are already occupied.
#However, I'd argue that the prior sort of aliases will be more common than
#"} always {...}" blocks... Hmm; perhaps not. Right. "always" blocks *ARE* more
#core to the language. Grumble; grumble.
#
#Oh; right. Why not a *DIFFERENT* prefix other than ":", here? If the closing
#delimiter were anything *BUT* a temporary expedient, adopting a different
#prefix would (of course) be a poor idea. But as it is, such alias is unlikely
#to conflict with terribly much; how about:
#
#   #:for_string_text_matching_pcre_start%{ "test string" "\s++(str)" }%
#   #:for_string_text_matching_pcre_start={ "test string" "\s++(str)" }:catch
#   #:for_string_text_matching_pcre_start-{ "test string" "\s++(str)" }-
#    :for_string_text_matching_pcre_start~{ "test string" "\s++(str)" }~
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#Yes, zsh prohibits us using anything suffixed by "}". So, "}-" or similar will
#have to do. "}:catch" appears to be out as well, coughing up similar parse errors.
#"}~" and "}-" are demonstrably the more aesthetic. Given that "}:" requires
#holding shift for all such characters, "}~" is the sound, orthogonal choice.
#It's also somewhat more aesthetic, *ESPECIALLY* for use with the corresponding
#prefix "~{".

#FIXME: O.K.; there we have it. After great deliberation, aliases accepting
#multiple arguments should be called with the following conventions:
#
#    :for_string_text_matching_pcre_start~{ "test string" "\s++(str)" }~
#
#And aliases accepting multiple arguments *AND* code to be dynamically evaluated
#called with the following conventions:
#
#    :for_string_text_matching_pcre_start~{ "test string" "\s++(str)" }~
#    :stdout.echo "${match[1]}"
#    :for_string_text_matching_pcre_stop
#
#I'm content. And that's all she wrote.
#FIXME: Given this, contemplate adopting the following style of alias definition:
#
#    alias ":for_string_text_matching_pcre_start~{"='
#       :alias_word "}~"="
#           }:catch{
#               :undefine_alias \"}~\""
#           }:
#
#           :die_unless_str_nonempty pcre__fstmpb 'Expected non-empty PCRE.'
#           :str MATCH
#           :list match
#           pcre_compile -- "${pcre__fstmpb}"
#           pcre_study
#           :str ZPCRE_OP='0 0'
#           while { pcre_match -b -n ${ZPCRE_OP[(w)2]} -- "${text__fstmpb}" } {"
#
#       # This is the cool part. The call to :set_strings_to_strings() *MUST* be
#       # the last line of this alias, which, when appended by the caller's
#       # passed arguments, will set the desired variables. Naturally, we need
#       # define such function, but it shouldn't be terribly hard. Here is what
#       # a complete expansion of the last line looks like (post-expansion!):
#       #
#       #     :set_strings_to_strings text__fstmpb pcre__fstmpb -- "test string" "\s++(str)"
#       #
#       # Also, we protect such call with a :try block, guaranteeing. This
#       # means we do *NOT* need to modify our existing exception handler make
#       # sure that alias "}~" has been undefined.
#       :try{
#           :str              text__fstmpb pcre__fstmpb
#           :set_strings_to_args text__fstmpb pcre__fstmpb --'
#    alias :for_string_text_matching_pcre_stop='
#           }'
#
#That's a *HECK* of a lot of awesome boilerplate automation. This should
#positively rock, once we get this up and running at a large enough scale.
#FIXME: So, "~{" and "}~" delimiters are quite nice, but one wonders if we
#can't do slightly better. Unlikely, but worth examining. Consider:
#
#    :for_string_text_matching_pcre_start~{ "test string" "\s++(str)" }~
#
#    :for_string_text_matching_pcre_start~ "test string" "\s++(str)" ~
#
#    :for_string_text_matching_pcre_start~~ "test string" "\s++(str)" ~~
#
#    :for_string_text_matching_pcre_start: "test string" "\s++(str)" :
#
#    :for_string_text_matching_pcre_start:: "test string" "\s++(str)" ::
#
#O.K.; we're fairly convinced. "~{" and "}~" *ARE* quite nice and probably the
#best we can reasonably do.
#FIXME: Actually, some reassessment is in order. Since we expect to leverage
#such high-level aliases considerably more than low-level ":try{...}" always,
#strongly consider switching our use of "~{" and ":{". Namely:
#
#* Rename ":{" to "~{" and "}:" to "}~" everywhere. (Should be a fairly trivial
#  global replacement.) For example:
#  :try{
#      :die
#  }:catch{
#      yumyum
#  }~
#* Name such aliases as follows:
#  :for_string_text_matching_pcre_start:{ "test string" "\s++(str)" }:
#
#Great! But that only gets us halfway. If you'll note, we actually have two
#discrete styles for such aliases:
#
#1. Aliases *NOT* required to be followed by corresponding stop aliases: e.g.,
#   :append_list_with_list_local:{ okok }:
#2. Start aliases required to be followed by corresponding stop aliases: e.g.,
#     :for_string_text_matching_pcre yum yum :{
#        yumyum
#    }:for_string_text_matching_pcre  # either this...
#    }:fstmp                          # ...or this
#
#Right. While the latter abbreviation is certainly more succinct, it also
#makes using such aliases in the wild something of a crapshoot, requiring the
#coder to correctly guess such alias' abbreviation. And when he or she
#inevitably fails, the result is an inscrutable error. (Not good.) So go with
#the unabbreviated form, we should think. (Not terribly fond of such
#repetition,
#but all alternatives are decidably contemptible.)
#
#To summarize the above examples, the former sort of alias names should be
#suffixed by ":{" and require the last argument to be "}:", while the latter
#sort of alias names should *NOT* be suffixed but should require their last
#argument to be ":{" (rather than "}:") *AND* should require a final stop alias
#of the same name prefixed by "}". Sweet, no?
#
#Given that, we'll clearly want different sorts of alias definers. Let's begin
#exploring, shall we?

# ....................{ GLOBALS                            }....................
#FIXME: Actually use such globals in place of their magic strings everywhere.

:str.global ZY_PCRE_OPTION_CASELESS='(?i)' <<'/---'
PCRE option enabling case-insensitive matching for the remainder of the pattern
following such option at the same group level.

By default, PCREs match case-sensitively.
/---


:str.global ZY_PCRE_OPTION_DOTALL='(?s)' <<'/---'
PCRE option enabling *dotall matching* (i.e., quantifier `.` matches any
character including newline) for the remainder of the pattern following such
option at the same group level.

By default, this quantifier matches any character excluding newline.
/---


:str.global ZY_PCRE_OPTION_EXTENDED='(?x)' <<'/---'
PCRE option enabling *extended matching* (i.e., ignoring all unescaped
whitespace _and_ substrings between an unescaped `#` and newline character or
the string end in the PCRE) for the remainder of the pattern following such
option at the same group level.

By default, PCRE whitespace is significant and unescaped `#` characters are
matched as is.
/---


:str.global ZY_PCRE_OPTION_MULTILINE='(?m)' <<'/---'
PCRE option enabling *multiline matching* (i.e., assertion `^` matches before
the string beginning or newline _and_ assertion `$` matches before the string
end or newline) for the remainder of the pattern following such option at the
same group level.

By default, `^` only matches before the string beginning and `$` only matches
before the string end.
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_string_matches_pcre(:str text :str pcre)

Report success if the passed string matches the passed PCRE. See
for_string_text_matching_pcre:() for further details.
/---
function is_string_matches_pcre() {
    # Match such string. While calling pcre_compile(), pcre_study(), and
    # pcre_match() would suffice to perform such match, operator "=~" does so
    # concisely and equally efficiently (in most cases).
    die_unless_args_2 'Expected one string and one PCRE.'
    :is "${1}" =~ "${2}" :si
}


:func.doc <<'/---'
[status=:bool] :is_string_has_pcre_syntax(:str text)

Report success if the passed string contains at least one PCRE-reserved
character, notably including most ASCII punctuation (e.g., `[`, `{`, `(`, `|`).
/---
function :is_string_has_pcre_syntax() {
    die_unless_arg 'Expected one string.'
    :is "${1}" == *['[]{}()|.+*?^$']* :si
}

# ....................{ GETTERS ~ count                    }....................
#FIXME: Rename to :get_string_text_count_matching_pcre().
:func.doc <<'/---'
:int get_string_pcre_match_count(:str text :str pcre)

Number of substrings in the passed string matching the passed PCRE.

== See Also ==

* for_string_text_matching_pcre:().

== Examples ==

.get_string_pcre_match_count()
==========================================
[source]
------------------------------------------
>>> get_string_pcre_match_count "anthropocene tropes" '(?x)
...     # An extended PCRE matching both "ropo" and "rope".
...     rop[aeiou]'
2
------------------------------------------
==========================================
/---
function get_string_pcre_match_count() {
    die_unless_args_2 'Expected one string and one PCRE.'
    :int match_count=0
    for_string_text_matching_pcre: "${@}" '(( ++match_count ))'
    :stdout.echo ${match_count}
}

# ....................{ ITERATORS                          }....................
#FIXME: Excise, shifting documentation to alias
#:for_string_text_matching_pcre~{().
:func.doc <<'/---'
[stdout=:str stderr=:str] for_string_text_matching_pcre:(
    :str text :str pcre :str code)

Run the passed code for each substring of the passed string matching the passed
PCRE.

== Examples ==

.for_string_text_matching_pcre:()
==========================================
[source]
------------------------------------------
>>> :str will_durant=\
...    "The great snare of thought is uncritical acceptance of irrational
...     assumptions."
>>> for_string_text_matching_pcre: "${will_durant}"\
...     '(?im)(?|th([eo])|^?(?) |?(?|c(c)|r(r)|s(s)))'\
...     ':stdout.echo "${MATCH}" ("${match[1]}")'
The (e)
tho (o)
is (s)
acc (c)
of (f)
irr (r)
ass (s)
------------------------------------------
==========================================

== PCRE Syntax ==

`zsh` performs PCRE matching by linking against the system-wide PCRE library
implemented in pure C and hence supports _all_ features of such library:

* Perfect emulation of Perl- and Python-specific regular expression syntax,
  including syntax specific to the most recently released version of Perl.
* Partial emulation of .NET-, Oniguruma-, and JavaScript-specific regular
  expression syntax.
* Just-in-time (JIT) optimization.
* UTF-8-driven Unicode character properties and extended grapheme clusters.
* Arbitrarily recursive patterns capable of matching fully balanced parentheses.
* Greedy and non-greedy quantifiers for controlling match length.
* Atomic groups and possessive quantifiers for preventing backtracking.
* Backtracking control verbs for controlling backtracking behaviour.
* Named and numbered subpatterns, including duplicates for resetting branches.
* Absolute and relative back references and subroutine calls.
* Positive and negative lookahead and lookbehind assertions.
* Conditional subpatterns for testing subpattern and recursion matches.

Such library is sufficiently powerful, expressive, and efficient to implement
non-regular context-free text parsers in pure `zsh` -- as `zeshy` itself does
elsewhere (e.g., parsing help documentation strings). For further details, see
the following documentation:

* http://www.pcre.org/pcre.txt[PCRE *.txt], concatenating all PCRE man pages
  into a single plaintext file. This is arguably the optimal means of searching
  PCRE documentation for specific features, phrases, or syntax.
* `man pcre`, indexing other PCRE man pages.

=== PCRE-internal Options ===

Like most regular expression implementations, the PCRE library supports numerous
options for modifying PCRE matching on a PCRE-specific basis -- including common
options for enabling caseless, multiline, and extended matching. While the
underlying `zsh/pcre` module interfacing with such library supports passing such
options as `-`-prefixed options to builtin pcre_compile() (e.g.,
`pcre_compile -m ^$`, a multiline PCRE matching both the empty string and blank
lines), this function requires such options be embedded directly into PCREs with
syntax `(?${options})`, where `${options}` is a string of one or more of the
following characters:

* `i`, enabling caseless (i.e., case-insensitive) matching. By default, matches
  are case-sensitive.
* `m`, enabling multiline matching such that:
** `^` matches either a newline or the string start. By default, `^` matches
   only the string start.
** `$` matches either a newline or the string end. By default, `$` matches only
   the string end.
* `s`, permitting `.` to match all characters _including_ newline. By default,
  `.` matches all characters _excluding_ newline.
* `x`, enabling extended matching by ignoring:
** All whitespace characters neither escaped or in a character class. By
   default, whitespace is significant.
** All characters between an unescaped `#` not in a character class and the next
   newline, thus ignoring comments. By default, `#` characters are matched
   literally.
* `J`, permitting subpattern names to be duplicated, typically used for so-
  called ``branch resets.'' By default, subpattern names must be unique.
* `U`, inverting quantifier greediness such that quantifiers _not_ suffixed by
  `?` are non-greedy and quantifiers suffixed by `?` are greedy. By default,
  quantifiers _not_ suffixed by `?` are greedy and quantifiers suffixed by `?`
  are non-greedy.

Either prefixing or suffixing a PCRE with such options suffices to globally
enable such options on the full PCRE.

== PCRE Globals ==

On each successful match, the passed command may access the following globals:

* ${MATCH}, a string global expanding to the currently matched substring.
* ${match}, a list global containing each match group captured within such
  substring (e.g., `${match[1]}`, the first match group).

Note that globs enabling globbing flags `(#b)` and `(#m)` (e.g., by calling
convert_string_to_glob_capturing_groups_and_substrings()) set similar globals,
as well as several others _not_ set for PCRE matches (i.e., ${mbegin}, ${mend},
${MBEGIN}, ${MEND}). Since the latter globals are largely unhelpful, this tends
not to be an issue.
/---
function for_string_text_matching_pcre:() {
    die_unless_args_3 'Expected one string, one PCRE, and one command.'
    :str text__fstmp="${1}" pcre__fstmp="${2}" code__fstmp="${3}"
    die_unless_string_nonempty pcre__fstmp 'Expected non-empty PCRE.'

    # Localize string and list match globals.
    :str MATCH
    :list match

    # Compile such PCRE, as required by the subsequent call to pcre_match().
    pcre_compile -- "${pcre__fstmp}"

    # Optimize such compilation.
    pcre_study

    # Iterate such matches. Dismantled, this is:
    #
    # * "ZPCRE_OP='0 0'", a zsh string global tracking the first and last
    #   0-based byte indices of the currently matched substring in ${text}.
    # * "pcre_match", matching the next substring given:
    #   * "-b", tracking indices in the ${ZPCRE_OP} global.
    #   * "-n", starting matching at the passed string index:
    #     * "${ZPCRE_OP[(w)2]}", expanding to the byte immediately following the
    #       last byte index of the previously matched substring.
    #
    # For efficiency, evaluate the loop once rather than on each loop iteration.
    :str ZPCRE_OP='0 0'
    eval 'while { pcre_match -b -n ${ZPCRE_OP[(w)2]} -- "${text__fstmp}" } {
        '${code__fstmp}'
    }'
}
