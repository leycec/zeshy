#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] is_string_matches_pcre_multiline(string text, string pcre)

Report success if the passed string matches the passed PCRE in multiline mode.
See for_string_text_matching_pcre:() for further details.
/---
function is_string_matches_pcre_multiline() {
    die_unless_args_2 'Expected one string and one PCRE.'
    is_string_matches_pcre\
        "${1}" "$(convert_string_to_pcre_multiline "${2}")"
}

# ....................{ GETTERS                            }....................
#FIXME: Rename to get_string_matches_pcre_multiline_indexed().
:func.doc <<'/---'
string get_string_pcre_multiline_match_index_all(
    string text, string pcre, integer group_index)

List the substring captured to the passed 1-based group index from each line
matching the passed PCRE in multiline mode, delimiting each such substring by a
newline. Ensure each output line contains only a single match by anchoring such
PCRE to the current line. Specifically:

* Explicitly prefix and suffix such PCRE with zero-width assertions `^` and `$`.
* Avoid both negative character types (e.g., `\D`, `\W`) and classes (e.g.,
  `[[:^alpha:]]`, `[^[:punct:]]`) in such PCRE, which _always_ match newlines if
  possible and hence consume more than a single line of text.

See for_string_text_matching_pcre:() for further details: e.g.,

.get_string_pcre_multiline_match_index_all()
==========================================
[source]
------------------------------------------
>>> string i_seem_to_be_a_verb="
...     I live on Earth at present,
...     and I don't know what I am.
...     I know that I am not a category.
...     I am not a thing—a noun.
...     I seem to be a verb,
...     an evolutionary process—
...     an integral function of the universe."
>>> get_string_pcre_multiline_match_index_all "${i_seem_to_be_a_verb}"\
...     '^I (\w++).*$' 1
live
know
am
seem
------------------------------------------
==========================================
/---
function get_string_pcre_multiline_match_index_all() {
    # Validate passed arguments, popping off the trailing group index.
    die_unless_args_3 'expected one string, one PCRE, and one group index'
    string group_index="${3]}"
    :int.die_unless_positive "${group_index}"
    pop_arg

    # Match and break on the first such group.
    for_string_text_matching_pcre_multiline: "${@}"\
        ":stdout.echo \"\${match[${group_index}]}\""
}

#FIXME: Rename to get_string_pcre_multiline_match_indexed_first().
:func.doc <<'/---'
string get_string_pcre_multiline_match_index_first(
    string text, string pcre, integer group_index)

Get the substring captured to the passed 1-based group index from the first line
matching the passed PCRE in multiline mode. (Equivalently, return the first line
that get_string_pcre_multiline_match_index_all() matches). See such function for
further details: e.g.,

.get_string_pcre_multiline_match_index_first()
==========================================
[source]
------------------------------------------
>>> string syllabus_of_condemned_opinions="
...     There is no
...     supreme, omniscient, all foreseeing Deity distinct from the universe.
...     God is the same thing as Nature and therefore subject to change.
...     He becomes God in the world and man;
...     all things are God and have the very substance of God."
>>> get_string_pcre_multiline_match_index_first\
...     "${syllabus_of_condemned_opinions}" '^.*?all (\w++).*$' 1
foreseeing
------------------------------------------
==========================================
/---
function get_string_pcre_multiline_match_index_first() {
    # Validate passed arguments, popping off the trailing group index.
    die_unless_args_3 'expected one string, one PCRE, and one group index'
    string group_index="${3}"
    :int.die_unless_positive "${group_index}"
    pop_arg

    # Match and break on the first such group.
    for_string_text_matching_pcre_multiline: "${@}"\
        ":stdout.echo \"\${match[${group_index}]}\"; break"
}

# ....................{ GETTERS ~ count                    }....................
:func.doc <<'/---'
integer get_string_pcre_multiline_match_count(string text, string pcre)

Get the number of lines in the passed string matching the passed PCRE in
multiline mode. See for_string_text_matching_pcre:() for further details.
/---
function get_string_pcre_multiline_match_count() {
    integer match_count=0
    for_string_text_matching_pcre_multiline: "${@}" '(( ++match_count ))'
    :str.return ${match_count}
}

# ....................{ CONVERTERS                         }....................
#FIXME: Refactor into an in-place setter with signature:
#    void :enable_pcre_multiline(string pcre_name)

:func.doc <<'/---'
string convert_string_to_pcre_multiline(string pcre)

Enable multiline matching in the passed PCRE. This prefixes such PCRE with
`(?m)`, inducing `^` and `$` to match newline characters as well as the string
start and end, respectively.
/---
function convert_string_to_pcre_multiline() {
    # If such PCRE already contains "(?m)", prefixing yet another does no harm.
    die_unless_arg 'Expected one PCRE.'
    :str.return "${ZY_PCRE_OPTION_MULTILINE}${1}"
}

# ....................{ ITERATORS                          }....................
:func.doc <<'/---'
string for_string_text_matching_pcre_multiline:(
    string text, string pcre, string command)

Run the passed command for each match of the passed string with the passed PCRE
in multiline mode. See for_string_text_matching_pcre:() for further details: e.g.,

.for_string_text_matching_pcre_multiline:()
==========================================
[source]
------------------------------------------
>>> string aphorisms_against_work=\
...    "Laziness is a comedy in which we can all play a part,
...     a veritable field of sunblown flowers
...     where the unruly colors of
...     the universe dance with the wind."
>>> for_string_text_matching_pcre_multiline: "${aphorisms_against_work}"\
...     '^.*\b(a|the)\b.*$'\
...     ':stdout.echo ${match[1]}: ${MATCH}'
a: Laziness is a comedy in which we can all play a part,
a: a veritable field of sunblown flowers
the: where the unruly colors of
the: the universe dance with the wind.
------------------------------------------
==========================================
/---
function for_string_text_matching_pcre_multiline:() {
    die_unless_args_3 'expected one string, one PCRE, and one command'
    for_string_text_matching_pcre:\
        "${1}" "$(convert_string_to_pcre_multiline "${2}")" "${3}"
}
