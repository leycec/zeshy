#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle string tests and exception throwing.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_string_nonempty(string text, string exception_message)

Throw an exception with the passed message unless the passed string is empty.
/---
function die_unless_string_nonempty() {
    die_unless_args_2 'Expected one string and one exception message.'
    :str.is_nonempty "${1}" :or :die "${2}"
}

# ....................{ TESTERS ~ equality                 }....................
:func.doc <<'/---'
[status: bool] is_string_equals(string text1, string text2)

Report success if the two passed strings are identical: e.g.,

.is_string_equals()
==========================================
[source]
------------------------------------------
>>> string on_existence=\
...    "There is very good reason to believe that, in a generation or so,
...     capitalism itself will no longer exist – most obviously, as ecologists
...     keep reminding us, because it's impossible to maintain an engine of
...     perpetual growth forever on a finite planet, and the current form of
...     capitalism doesn't seem to be capable of generating the kind of vast
...     technological breakthroughs and mobilizations that would be required for
...     us to start finding and colonizing any other planets. Yet faced with the
...     prospect of capitalism actually ending, the most common reaction – even
...     from those who call themselves \"progressives\" – is simply fear. We
...     cling to what exists because we can no longer imagine an alternative
...     that wouldn't be even worse."
>>> is_string_equals "${on_existence}" "${on_existence}?" or
...     :stdout.echo "Honor is a zero sum game."
Honor is a zero sum game.
------------------------------------------
==========================================
/---
function is_string_equals() {
    die_unless_args_2 'Expected two strings.'
    :is ${1} == ${2} :si
}

:func.doc <<'/---'
[status: bool] is_string_equals_caseless(string text1, string text2)

Report success if the two passed strings are case-insensitively identical (i.e.,
identical when ignoring case): e.g.,

.is_string_equals()
==========================================
[source]
------------------------------------------
>>> string on_primacy=\
...    "The things we care most about – our loves, passions, rivalries,
...     obsessions – are always other people; and in most societies that are
...     not capitalist, it's taken for granted that the manufacture of material
...     goods is a subordinate moment in a larger process of fashioning people.
...     In fact, I would argue that one of the most alienating aspects of
...     capitalism is the fact that it forces us to pretend that it is the other
...     way around, and that societies exist primarily to increase their output
...     of things."
>>> is_string_equals_caseless "${on_primacy}" "${(U)on_primacy}" and
...     :stdout.echo "Exchange implies equality."
Exchange implies equality.
------------------------------------------
==========================================
/---
function is_string_equals_caseless() {
    die_unless_args_2 'Expected two strings.'
    :is "${1}" == (#i)"${2}" :si
}

# ....................{ TESTERS ~ containment              }....................
:func.doc <<'/---'
[status: bool] :str.contains(string text, string substring)

Report success if the passed string contains the passed substring: e.g.,

.:str.contains()
==========================================
[source]
------------------------------------------
>>> string on_the_rest_of_your_life=\
...    "In the world I see, you're stalking elk through the damp canyon forests
...     around the ruins of Rockefeller Center. You'll wear leather clothes that
...     will last you the rest of your life. You'll climb the wrist-thick kudzu
...     vines that wrap the Sears Tower. And when you look down, you'll see tiny
...     figures pounding corn, laying strips of venison on the empty car pool
...     lane of some abandoned superhighway."
>>> :str.contains "${on_the_rest_of_your_life}" "And when you look down" and
...     print_message "The things you own end up owning you."
The things you own end up owning you.
------------------------------------------
==========================================
/---
function :str.contains() {
    die_unless_args_2 'Expected one string and one substring.'
    :is ${1} == *"${2}"* :si
}

:func.doc <<'/---'
[status: bool] is_string_prefix(string text, string prefix)

Report success if the passed string is prefixed by the passed prefix: e.g.,

.is_string_prefix()
==========================================
[source]
------------------------------------------
>>> string on_being_raised_on_television=\
...    "God damn it, an entire generation pumping gas, waiting tables – slaves
...     with white collars. Advertising has us chasing cars and clothes,
...     working jobs we hate so we can buy shit we don't need. We're the
...     middle children of history, man. No purpose or place. We have no Great
...     War. No Great Depression. Our great war is a spiritual war. Our great
...     depression is our lives."
>>> is_string_prefix "${on_being_raised_on_television}" "God damn it" and
...     print_message "I see all this potential, and I see it squandered."
I see all this potential, and I see it squandered.
------------------------------------------
==========================================
/---
function is_string_prefix() {
    die_unless_args_2 'Expected one string and one prefix.'
    :is ${1} == "${2}"* :si
}

:func.doc <<'/---'
[status: bool] is_string_suffix(string text, string suffix)

Report success if the passed string is suffixed by the passed suffix: e.g.,

.is_string_suffix()
==========================================
[source]
------------------------------------------
>>> string on_the_profit_motive=\
...    "A new car built by my company leaves somewhere traveling at 60 mph. The
...     rear differential locks up. The car crashes and burns with everyone
...     trapped inside. Now, should we initiate a recall? Take the number of
...     vehicles in the field, A, multiply by the probable rate of failure, B,
...     multiply by the average out-of-court settlement, C. A times B times C
...     equals X. If X is less than the cost of a recall, we don't do one."
>>> is_string_suffix "${on_the_profit_motive}" "we don't do one." and
...     print_message "You are not your job. You're not the car you drive."
You are not your job. You're not the car you drive.
------------------------------------------
==========================================
/---
function is_string_suffix() {
    die_unless_args_2 'Expected one string and one suffix.'
    :is ${1} == *"${2}" :si
}
