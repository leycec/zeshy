#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core substring functionality (i.e., functions operating on substrings embedded
within strings).
/---

# ....................{ PREFIXERS                          }....................
:func.doc <<'/---'
:void :str.prefix(:Str string_name :str prefix)

Unconditionally prepend the passed prefix to the value of the passed string
variable.

== See Also ==

* :str.prefix_if_unprefixed(), a related function conditionally prepending this
  prefix only if this value is _not_ already prefixed by this prefix.

== Examples ==

.:str.prefix()
==========================================
[source]
------------------------------------------
>>> :str on_humanity=\
...    "You don't hate! Only the unloved hate — the unloved and the unnatural."
>>> prefix_string on_humanity=\
...    "Soldiers! Don't give yourselves to brutes — men who despise you! Enslave
...     you! Who regiment your lives, tell you what to do, what to think or what
...     to feel! Who drill you, diet you, treat you like cattle, use you as
...     cannon fodder! Don't give yourselves to these unnatural men — machine
...     men with machine minds and machine hearts! You are not machines! You are
...     not cattle! You are men! You have the love of humanity in your hearts."
>>> get_string_line on_humanity 1
Soldiers! Don't give yourselves to brutes — men who despise you! Enslave
------------------------------------------
==========================================
/---
function :str.prefix() {
    die_unless_args_2 'Expected one string name and one string suffix.'
    :str string_name__ps="${1}"
    :Str.die_unless "${string_name__ps}"

    # Suffix this string.
    :Str.set "${string_name__ps}" "${2}${(P)string_name__ps}"
}


#FIXME: Add example.
:func.doc <<'/---'
:void :str.prefix_if_unprefixed(:Str string_name :str prefix)

Conditionally prepend the passed prefix to the value of the string variable with
the passed name if this value is not already prefixed by this prefix _or_ noop
otherwise.
/---
function :str.prefix_if_unprefixed() {
    die_unless_args_2 'Expected one string name and one string prefix.'
    :str string_name__psiu="${1}" prefix__psiu="${2}"
    :Str.die_unless "${string_name__psiu}"

    # Prefix this string if not found. For efficiency, remove this prefix if
    # found and reprepend this prefix.
    :Str.set "${string_name__psiu}"\
        "${prefix__psiu}${(P)string_name__psiu#${prefix__psiu}}"
}

# ....................{ SUFFIXERS                          }....................
:func.doc <<'/---'
:void :Str.suffix(:Str string_name :str suffix)

Unconditionally append the passed suffix to the value of the string variable
with the passed name.

== See Also ==

* :suffix_string_if_needed(), a related function conditionally appending this
  suffix only if this value is _not_ already suffixed by this suffix.

== Examples ==

.:Str.suffix()
==========================================
[source]
------------------------------------------
>>> :str on_governance=\
...    "To be governed is to be watched, inspected, spied upon, directed,
...     law-driven, numbered, regulated, enrolled, indoctrinated, preached at,
...     controlled, checked, estimated, valued, censured, commanded, by creatures
...     who have neither the right nor the wisdom nor the virtue to do so."
>>> :Str.suffix on_governance '
...     -- Pierre-Joseph Proudhon,
...        "General Idea of the Revolution in the Nineteenth Century"'
>>> :stdout.echo "${on_governance}"
To be governed is to be watched, inspected, spied upon, directed,
law-driven, numbered, regulated, enrolled, indoctrinated, preached at,
controlled, checked, estimated, valued, censured, commanded, by creatures
who have neither the right nor the wisdom nor the virtue to do so.
-- Pierre-Joseph Proudhon,
   "General Idea of the Revolution in the Nineteenth Century"
------------------------------------------
==========================================
/---
function :Str.suffix() {
    die_unless_args_2 'Expected one string name and one string suffix.'
    :str string_name__ss="${1}"
    :Str.die_unless "${string_name__ss}"

    # Suffix such string.
    :Str.set "${string_name__ss}" "${(P)string_name__ss}${2}"
}


#FIXME: Rename to :suffix_string_if_unsuffixed(). Somewhat longer but
#significantly more readable, and hence the way forward.
:func.doc <<'/---'
:void :suffix_string_if_needed(:Str string_name :str suffix)

Conditionally append the passed suffix to the value of the string variable with
the passed name if this value is not already suffixed by this suffix _or_ noop
otherwise.

== Examples ==

.:suffix_string_if_needed()
==========================================
[source]
------------------------------------------
>>> :str on_ashcans_and_unobtainable_dollars=\
...    "Moloch the incomprehensible prison! Moloch the crossbone soulless jailhouse and
...       Congress of sorrows! Moloch whose buildings are judgment! Moloch the vast stone
...       of war! Moloch the stunned governments!
...     Moloch whose mind is pure machinery! Moloch whose blood is running money!
...       Moloch whose fingers are ten armies! Moloch whose breast is a cannibal dynamo!
...       Moloch whose ear is a smoking tomb!"
>>> :suffix_string_if_needed on_ashcans_and_unobtainable_dollars\
...     "Moloch whose ear is a smoking tomb!"
>>> :stdout.echo "${on_ashcans_and_unobtainable_dollars}"
Moloch the incomprehensible prison! Moloch the crossbone soulless jailhouse and
  Congress of sorrows! Moloch whose buildings are judgment! Moloch the vast stone
  of war! Moloch the stunned governments!
Moloch whose mind is pure machinery! Moloch whose blood is running money!
  Moloch whose fingers are ten armies! Moloch whose breast is a cannibal dynamo!
  Moloch whose ear is a smoking tomb!
------------------------------------------
==========================================
/---
function :suffix_string_if_needed() {
    die_unless_args_2 'Expected one string name and one string suffix.'
    :str string_name__ssiu="${1}" suffix__ssiu="${2}"
    :Str.die_unless "${string_name__ssiu}"

    # Suffix this string if not found. For efficiency, remove this suffix if
    # found and reappend this suffix.
    :Str.set "${string_name__ssiu}"\
        "${(P)string_name__ssiu%${suffix__ssiu}}${suffix__ssiu}"
}

# ....................{ REMOVERS                           }....................
#FIXME: Refactor all such functions to accept a string variable instead.

:func.doc <<'/---'
:str remove_string_text(:str text :str substring)

Remove all instances of the passed substring from the passed string and return
this string.

== Examples ==

.remove_string_text()
==========================================
[source]
------------------------------------------
>>> :str on_the_rocks_of_time=\
...    "Moloch! Moloch! Robot apartments! invisible suburbs! skeleton treasuries!
...      blind capitals! demonic industries! spectral nations! invincible mad houses
...      granite cocks! monstrous bombs!
...     They broke their backs lifting Moloch to Heaven! Pavements, trees, radios,
...      tons! lifting the city to Heaven which exists and is everywhere about us!"
>>> remove_string_text "${on_the_rocks_of_time}" "Moloch"
! ! Robot apartments! invisible suburbs! skeleton treasuries!
 blind capitals! demonic industries! spectral nations! invincible mad houses
 granite cocks! monstrous bombs!
They broke their backs lifting to Heaven! Pavements, trees, radios,
 tons! lifting the city to Heaven which exists and is everywhere about us!
------------------------------------------
==========================================
/---
function remove_string_text() {
    die_unless_args_2 'Expected one string and one substring.'
    :stdout.echo "${1//${2}}"
}


:func.doc <<'/---'
:void :Str.remove_prefix(:Str string_name :str prefix)

Remove the passed prefix from the value of the string variable with the passed name if this
prefix prefixes this value _or_ noop otherwise.

== See Also ==

.:Str.remove_prefix()
==========================================
[source]
------------------------------------------
>>> :str on_cities="
... Moloch whose eyes are a thousand blind windows! Moloch whose skyscrap-
... ers stand in the long streets like endless Jehovahs! Moloch whose
... factories dream and croak in the fog! Moloch whose smokestacks and
... antennae crown the cities!"
>>> :Str.remove_prefix on_cities\
...    "Moloch whose eyes are a thousand blind windows!"
>>> get_string_line "${on_cities}" 1
Moloch whose skyscrap-
------------------------------------------
==========================================
/---
function :Str.remove_prefix() {
    die_unless_args_2 'Expected one string name and one string suffix.'
    :str string_name__rsp="${1}" prefix__rsp="${2}"
    :Str.die_unless "${string_name__rsp}"

    # Remove this prefix.
    :Str.set "${string_name__rsp}" "${(P)string_name__rsp##${prefix__rsp}}"
}


:func.doc <<'/---'
:void remove_string_suffix(:Str string_name :str suffix)

Remove the passed suffix from the value of the string variable with the passed
name if this suffix suffixes this value _or_ noop otherwise.

== Examples ==

.remove_string_suffix()
==========================================
[source]
------------------------------------------
>>> :str on_cities=\
...    "Moloch whose eyes are a thousand blind windows! Moloch whose skyscrap-
...     ers stand in the long streets like endless Jehovahs! Moloch whose
...     factories dream and croak in the fog! Moloch whose smokestacks and
...     antennae crown the cities!"
>>> remove_string_suffix "${on_cities}"\
...    "Moloch whose eyes are a thousand blind windows!"
Moloch whose skyscrap-

>>> :str on_poverty=\
...    "Moloch whose love is endless oil and stone! Moloch whose soul is electricity
...     and banks! Moloch whose poverty is the specter of genius! Moloch
...     whose fate is a cloud of sexless hydrogen! Moloch whose name is the
...     Mind!"
>>> remove_string_suffix on_poverty "Moloch whose name is the"$'\n'"Mind!"
>>> get_string_line "${on_poverty}" -1
whose fate is a cloud of sexless hydrogen!
------------------------------------------
==========================================
/---
function remove_string_suffix() {
    die_unless_args_2 'Expected one string name and one string suffix.'
    :str string_name__rss="${1}" suffix__rss="${2}"
    :Str.die_unless "${string_name__rss}"

    # Remove this suffix.
    :Str.set\
        "${string_name__rss}" "${(P)string_name__rss%%${suffix__rss}}"
}
