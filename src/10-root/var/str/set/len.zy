#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*String length setters* (i.e., functions setting integer variables to the
lengths of passed strings).
/---

#FIXME: OHJEEBUS. We *CAN* reliably get multibyte and unibyte string lengths.
#This is (frankly) embarrassing, as the following example demonstrates:
#
#     >>> local yum='———'
#     >>> setopt multibyte
#     >>> print 'yum length (multi): '${#yum}
#     3
#     >>> setopt no_multibyte
#     >>> print 'yum length (uni): '${#yum}
#     9
#
#Massive facepalm on that one.

#FIXME: Reuse the following example strings:
#
#>>> :str on_informed_decisions=\
#...     "Wouldn't you like to see a positive LSD story on the news? To base your
#...      decision on information rather than scare tactics and superstition?
#...      Perhaps? Wouldn't that be interesting? Just for once?"
#>>> :str on_the_holographic_principle=\
#...     "Today, a young man on acid realized that all matter is merely energy
#...      condensed to a slow vibration – that we are all one consciousness
#...      experiencing itself subjectively. There's no such thing as death, life
#...      is only a dream, and we're the imagination of ourselves. Here's Tom
#...      with the weather."

# ....................{ GETTERS                            }....................
#FIXME: Refactor into setters.

:func.doc <<'/---'
:int get_string_length_printable(+:str texts)

Total length in printable multibyte characters of the passed strings excluding
ANSI escape sequences in these strings.

== See Also ==

* :set_int_to_string_length_printable().
* get_string_ansiless_length_printable().

== Examples ==

.get_string_length_printable()
==========================================
[source]
------------------------------------------
>>> :str on_flag_and_wind='
... A temple flag flapped in the wind. Two monks stood watching. One said to
... the other, "The flag is moving." The other replied, "The wind is
... moving." The sixth patriarch, Eno, overheard this and said, "It is not
... the wind or the flag. The mind is moving."'
>>> get_string_length_printable "${on_flag_and_wind}"
248
>>> get_string_length_printable\
...     "${ZY_STYLE_TO_COLOR[color.reset]}${on_flag_and_wind}"
248
------------------------------------------
==========================================
/---
function get_string_length_printable() {
    # See get_string_length() for further details.
    die_unless_args 'Expected one or more strings.'
    :str text="${*}"
    :stdout.echo "${(m)#${text//${~ZY_ANSI_GLOB}}}"
}


#FIXME: We strongly suspect all existing calls of this function to be erroneous.
#Consider changing such calls to get_string_length_printable() instead.
:func.doc <<'/---'
:int get_string_ansiless_length_printable(+:str texts)

Length of the passed string in printable multibyte characters, thus treating
*control characters* (e.g., newline, tab) as 0 characters for counting purposes.

Unfortunately, `zsh` currently provides no builtin means for counting these
characters as 1 character.

== Examples ==

.get_string_ansiless_length_printable()
==========================================
[source]
------------------------------------------
>>> :str on_informed_decisions="
... Wouldn't you like to see a positive LSD story on the news? To base your
... decision on information rather than scare tactics and superstition?
... Perhaps? Wouldn't that be interesting? Just for once?"
>>> :str on_the_holographic_principle='
... "Today, a young man on acid realized that all matter is merely energy
... condensed to a slow vibration – that we are all one consciousness
... experiencing itself subjectively. There''s no such thing as death, life
... is only a dream, and we''re the imagination of ourselves. Here''s Tom
... with the weather."'
>>> get_string_ansiless_length_printable\
...     "${on_informed_decisions}" "${on_the_holographic_principle}"
481
>>> get_string_ansiless_length_printable "${ZY_ASCII_NEWLINE}"
0
>>> get_string_ansiless_length_printable "${ZY_ASCII_NEWLINE}Gnosis"
6
------------------------------------------
==========================================
/---
function get_string_ansiless_length_printable() {
    # See get_string_length() for further details.
    die_unless_args 'Expected one or more strings.'
    :str text="${*}"
    :stdout.echo ${(m)#text}
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void :set_int_to_string_byte_count(:Int int_name +:str texts)

Set the passed integer variable to the *byte count* of all passed strings (i.e.,
the total length of these strings in single-byte ASCII characters).

If these strings _only_ contain single-byte ASCII characters, this integer will
be set to the total length of these strings; else, this integer will be strictly
greater than this length. In the latter case, consider calling
:set_int_to_string_length_printable() instead.

== Examples ==

.:set_int_to_string_byte_count()
==========================================
[source]
------------------------------------------
>>> :int count
>>> :str on_sensoria="
... The world is like a ride in an amusement park, and when you choose to go
... on it you think it's real because that's how powerful our minds are. The
... ride goes up and down, around and around, it has thrills and chills, and
... it's very brightly colored, and it's very loud, and it's fun for a while."
>>> :str on_existentia='
... Many people have been on the ride a long time, and they begin to wonder,
... "Hey, is this real, or is this just a ride?" And other people have
... remembered, and they come back to us and say, "Hey, don''t worry; don''t
... be afraid, ever, because this is just a ride." And we kill those
... people. "Shut him up! I''ve got a lot invested in this ride, shut him
... up! Look at my furrows of worry, look at my big bank account, and my
... family. This has to be real."'
>>> :set_int_to_string_byte_count count "${on_sensoria}" "${on_existentia}"
>>> :stdout.echo "${count}"
735
------------------------------------------
/---
function :set_int_to_string_byte_count() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :set_int_to_string_length_printable().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    die_unless_args_2_or_more\
        'Expected one integer name and one or more strings.'

    # Locally override the current internal field separator ${IFS} to the empty
    # string *BEFORE* joining the passed strings below. (If ${IFS} were *NOT*
    # overriden here, such strings would be joined with spaces, resulting in
    # such integer being set to an erroneous larger byte count.)
    :str IFS= int_name__sitsl="${1}" text__sitsl
    :args.shift 1

    # Due to zsh eccentricity, the parameter expansion counting
    # such bytes *CANNOT* be reduced to either "${#*}", "${#@}", "${#${*}}", or
    # "${#${@}}". Reducing this expansion to "${#${*}}" successfully returns the
    # expected string length in all cases *EXCEPT* when the empty string is
    # passed, in which case such expansion erroneously returns 1 rather than 0.
    # Strangely, joining the passed strings into a local string variable
    # *BEFORE* testing the length of such variable corrects this edge case and
    # probable zsh bug.
    text__sitsl="${*}"

    # Set this integer.
    :Int.set "${int_name__sitsl}" "${#text__sitsl}"
}


#FIXME: Awesome, but overly long examples. Consider truncating.
:func.doc <<'/---'
:void :set_int_to_string_length_printable(:Int int_name +:str texts)

Set the passed integer variable to the total length in printable multibyte
characters of all passed strings excluding ANSI escape sequences in these
strings.

== Caveats ==

*`zsh` provides no builtin means of setting the total length in _all_ multibyte
characters of such strings*. However, `zsh` _does_ provide a builtin means of
testing whether such length is exactly some number or in a range of some
numbers. Indeed, this is exactly how :is_char() is implemented: e.g.,

.:set_int_to_string_length_printable() Test Alternatives
==========================================
[source]
------------------------------------------
>>> :is "O" == ? :si
>>> :str on_fear="
... It's just a ride. But we always kill the good guys who try and tell us
... that, you ever notice that? And let the demons run amok. But it doesn't
... matter, because it's just a ride. And we can change it any time we want.
... It's only a choice. No effort, no work, no job, no savings of money.
... Just a simple choice, right now, between fear and love. The eyes of fear
... want you to put bigger locks on your doors, buy guns, close yourself
... off. The eyes of love instead see all of us as one."
>>> :str on_love="
... Here's what we can do to change the world, right now, to a better ride.
... Take all that money we spend on weapons and defenses each year and
... instead spend it feeding and clothing and educating the poor of the
... world, which it would pay for many times over, not one human being
... excluded, and we could explore space, together, both inner and outer,
... forever, in peace."
>>> :is "${on_fear}${on_love}" == ?(#c840) :si :and :stdout.echo\
...    "I left in love, in laughter, and in truth and wherever truth, love and
...     laughter abide, I am there in spirit."
I left in love, in laughter, and in truth and wherever truth, love and
laughter abide, I am there in spirit.
------------------------------------------
==========================================

== Printable Characters ==

Printable characters are all ASCII and UTF-8-encoded Unicode characters
excluding *control characters* (i.e., characters providing semantic instructions
to be programmatically interpreted by end-user software rather than raw glyphs
to be displayed as is), which include common whitespace characters (e.g.,
newline, tab).

Different characters contribute different *printable widths* (i.e., abstract
character lengths for the purposes of counting printable string length) to the
length the passed integer will be set to. Specifically:

* Most printable characters, including all ASCII and English-specific UTF-8-
  encoded Unicode characters, have a printable width of 1.
* Some printable characters, including wide Asian and special effect characters,
  have a printable width greater than 1.
* All combining characters have a printable width of 0.
* All non-printable characters, including all control characters, have a
  printable width of 0.

Hence, not even all printable characters contribute a printable width of 1.

== Examples ==

.:set_int_to_string_length_printable()
==========================================
[source]
------------------------------------------
>>> :int length
>>> :str on_doctrine='
... Nobushige, a respected samurai, came to Hakuin and asked, "Is there
... really a heaven and hell?"
... "Who are you?" inquired Hakuin.
... "A samurai," Nobushige replied.'
... :str on_compassion='
... "You, a samurai!" exclaimed Hakuin. "What kind of ruler would have
... you as his guard? Your face is like that of a beggar."
... In anger, Nobushige drew his sword. Hakuin continued, "So, you have a
... sword? Your weapon is probably too dull to even cut off my head."
... As Nobushige raised his sword, Hakuin intoned, "Here open the gates of
... hell." As Nobushige lowered his sword, Hakuin intoned, "Here open the
... gates of heaven."'
>>> :set_int_to_string_length_printable length\
...     "${on_doctrine}" "${on_compassion}"
>>> :stdout.echo "${length}"
568
>>> :set_int_to_string_length_printable length\
...     "${ZY_STYLE_TO_COLOR[color.black]}${on_doctrine}${on_compassion}"
>>> :stdout.echo "${length}"
568
------------------------------------------
==========================================
/---
function :set_int_to_string_length_printable() {
    # See :set_int_to_string_byte_count() for further details.
    die_unless_args_2_or_more\
        'Expected one integer name and one or more strings.'
    :str IFS= int_name__sitslp=${1} text__sitslp
    :args.shift 1

    text__sitslp=${*}

    # Remove all ANSI escape sequences from this string. These sequences are
    # inherently unprintable (in the sense of printable characters).
    :Str.ansi.remove text__sitslp

    # Set this length.
    :Int.set "${int_name__sitslp}" "${(m)#text__sitslp}"
#   print "text__sitslp: \"${text__sitslp}\"; length: ${#text__sitslp}; length (multi): ${(m)#text__sitslp}; length (multi sans ansi): ${(m)#${text__sitslp//${~ZY_ANSI_GLOB}}}"
}
