#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*String setters* (i.e., functions setting the values of string variables).
/---

# ....................{ SETTERS                            }....................
#FIXME: Rename to :str.set_if_empty().

:func.doc <<'/---'
:void set_string_if_empty_to_string(^:str string_name, :str text)

Set the passed string variable if unset or empty to the passed string: e.g.,

.set_string_if_empty_to_string()
==========================================
[source]
------------------------------------------
>>> :str on_dmt on_the_chrysanthemum=\
...    "A complete rupture of the mundane plane. And you fall back into this
...     hallucinogenic space. And what you see is a slowly rotating red and
...     orange kind of thing, which over the years we've nicknamed \"The
...     Chrysanthemum.\" And this represents some kind of disequilibrium state
...     that has its roots in the synapses. What's happening as you're watching
...     this Chrysanthemum is that millions and then hundreds of millions of
...     DMT molecules are rushing into these serotonin bond sites in the
...     synaptic cleft and disrupting the serotonin and switching the electron
...     spin resonance signature of these neural junctions in this \"other\"
...     direction... And then, if you've taken enough DMT, something happens
...     for which there are no words. A membrane is rent, and you are propelled
...     into this \"place.\" And language cannot describe it accurately.
...     Therefore I will inaccurately describe it. The rest is now lies."
>>> set_string_if_empty_to_string "${on_dmt}" "${on_the_chrysanthemum}"
>>> get_string_line "${on_dmt}" 1
A complete rupture of the mundane plane. And you fall back into this
------------------------------------------
==========================================
/---
function set_string_if_empty_to_string() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one string.'
    :str string_name__ssiets="${1}"
    :Str.die_unless "${string_name__ssiets}"

    # Set such string.
    noop "${(P)string_name__ssiets:=${2}}"
}

# ....................{ SETTERS ~ evaluation               }....................
# There exists no corresponding set_string_if_unset_to_evaluation() function,
# as functions cannot declare local variables in the caller's context. Sadly,
# such function cannot reasonably be implemented as an alias, due to awkwardness
# in herestring-based calling conventions under two or more arguments.

#FIXME: Rename to :Str.set.dynamic().
#FIXME: Hmm; shouldn't this function instead set such string as follows:
#
#   eval 'noop ${'${string_name__sste}'::='${evaluation__sste}'}'
#
#This should be far safer, as there's no need for the caller to quote-protect
#double quotes in such string. They *WILL* need to quote-protect "}" characters,
#but they'd have to so that anyway under the current implementation. Reimplement
#as above and note such caveat.

:func.doc <<'/---'
:void set_string_to_evaluation(^:str string_name, :str code)

Set the passed string variable to the dynamic expansion of the passed code in a
*double-quoted context* (i.e., as `"${expression}"`): e.g.,

.set_string_to_evaluation()
==========================================
[source]
------------------------------------------
>>> :str on_tykes on_elves=\
...    "You burst into this space. It's lit, socketed lighting, some kind of
...     indirect lighting you can't quite locate. But what is astonishing and
...     immediately riveting is that in this place there are entities. There
...     are these things, which I call \"self-transforming machine elves.\" I
...     also call them \"self-dribbling basketballs.\" They are, but they are
...     none of these things. I mean, you have to understand: these are
...     metaphors in the truest sense, meaning they're lies! It's a jeweled
...     self-transforming basketball, a machine elf. I name them \"Tykes\",
...     because tyke is a word that means to me a small child. And I was
...     fascinated by the 54th fragment of Heraclitis where he says: \"The
...     Aeon is a child at play with colored balls." And when you burst into the
...     DMT space, this is the Aeon: it's a child, and it's at play with colored
...     balls, and I am in eternity, apparently, in the presence of this thing."
>>> set_string_to_evaluation "${on_tykes}" '$(:stdout.echo "${on_elves}")'
>>> get_string_line "${on_tykes}" 8
self-transforming basketball, a machine elf. I name them "Tykes",
------------------------------------------
==========================================
/---
function set_string_to_evaluation() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one statement.'
    :str string_name__sste="${1}" evaluation__sste="${2}"
    :Str.die_unless "${string_name__sste}"

    # Set such string.
    eval ${string_name__sste}'="'${evaluation__sste}'"'
}

#FIXME: Rename to :str.set_if_empty_to_expansion().

:func.doc <<'/---'
:void set_string_if_empty_to_evaluation(^:str string_name, :str code)

Set the passed string variable if unset or empty to the dynamic evaluation of
the passed code in a double-quoted context. See set_string_to_evaluation() for
further details: e.g.,

.set_string_if_empty_to_evaluation()
==========================================
[source]
------------------------------------------
>>> :str on_lesser_lights on_faberge_eggs=\
...    "And then they proceed to sing objects into existence. Amazing objects.
...     Objects that are FabergÃ© Eggs. Things made of pearl, and metal, and
...     glass, and gel, and you. When you're shown one of these things, a single
...     one of them, you look at it. And you know without a shadow of a doubt,
...     in the moment of looking at this thing, that if it were right here,
...     right now, this world would go mad. It's like something from another
...     dimension. It's like an artifact from a flying saucer. It's like
...     something falling out of the mind of God. Such objects do not exist in
...     this universe. And yet you're looking at it. And they're clamoring for
...     your attention. \"Look at this! Look at this! Look at THIS!\" And they
...     pull these things. And each one, you look into it and it begins to open
...     into this wonder that you must fight. You say: \"No, don't look at it!
...     Look away from it! Because it's so wonderful that it's swamping my
...     objectivity and destroying my ability to function in this space.\""
>>> set_string_if_empty_to_evaluation "${on_lesser_lights}"\
...     '$(:stdout.echo "'${on_faberge_eggs}'")'
>>> get_string_line "${on_lesser_lights}" 1
And then they proceed to sing objects into existence. Amazing objects.
------------------------------------------
==========================================
/---
function set_string_if_empty_to_evaluation() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one statement.'
    :str string_name__ssiete="${1}" evaluation__ssiete="${2}"
    :Str.die_unless "${string_name__ssiete}"

    # Set such string.
    eval 'noop ${'${string_name__ssiete}':='${evaluation__ssiete}'}'
}

# ....................{ SETTERS ~ [pre|suf]fix             }....................
:func.doc <<'/---'
:void :str.set_sans_prefix(
    ^:str string_name, :str text, :str prefix)

Set the passed string variable to the passed string stripped of the passed
prefix if such string is prefixed by such prefix or to the passed string as is
otherwise: e.g.,

.:str.set_sans_prefix()
==========================================
[source]
------------------------------------------
>>> :str on_barbarous_times on_feudal_obligations=\
...    "We cry shame on the feudal baron who forbade the peasant to turn a clod
...     of earth unless he surrendered to his lord a fourth of his crop. We call
...     those the barbarous times. But if the forms have changed, the relations
...     have remained the same, and the worker is forced, under the name of free
...     contract, to accept feudal obligations. For, turn where he will, he can
...     find no better conditions. Everything has become private property, and
...     he must accept, or :die of hunger."
>>> :str.set_sans_prefix on_barbarous_times\
...     "${on_feudal_obligations}"\
...     "$(get_string_lines "${on_feudal_obligations}" 1 -2)"
>>> :stdout.echo "${on_barbarous_times}"
of hunger.
------------------------------------------
==========================================
/---
function :str.set_sans_prefix() {
    die_unless_args_3 'Expected one string name, one string, and one prefix.'
    :Str.set "${1}" "${2#${3}}"
}

:func.doc <<'/---'
:void :str.set_sans_suffix(
    ^:str string_name, :str text, :str suffix)

Set the passed string variable to the passed string stripped of the passed
suffix if such string is suffixed by such suffix or to the passed string as is
otherwise: e.g.,

.:str.set_sans_suffix()
==========================================
[source]
------------------------------------------
>>> :str on_soul_echoes on_animal_soup=\
...    "What sphinx of cement and aluminium bashed open their skulls and ate up
...     their brains and imagination?
...     Moloch! Solitude! Filth! Ugliness! Ashcans and unobtainable dollars!
...     Children screaming under the stairways! Boys sobbing in armies! Old men
...     weeping in the parks!
...     Moloch! Moloch! Nightmare of Moloch! Moloch the loveless! Mental Moloch!
...     Moloch the heavy judger of men!"
>>> :str.set_sans_suffix on_soul_echoes\
...     "${on_animal_soup}"\
...     "$(get_string_lines "${on_animal_soup}" 2 -1)"
>>> :stdout.echo "${on_soul_echoes}"
What sphinx of cement and aluminium bashed open their skulls and ate up
------------------------------------------
==========================================
/---
function :str.set_sans_suffix() {
    die_unless_args_3 'Expected one string name, one string, and one suffix.'
    :Str.set "${1}" "${2%${3}}"
}

# ....................{ SETTERS ~ split                    }....................
#FIXME: Improve example.
:func.doc <<'/---'
void set_strings_to_string_split_on_string(
    string string_name1,
    string string_name2,
    string text,
    string delimiter)

Split the substring of the passed string preceding the first instance of the
passed delimiter into the first passed list and the remainder (excluding the
passed delimiter) into the second passed list. Such delimiter may be of any non-
zero length. If such string contains no such delimiter, throw an exception:
e.g.,

.set_strings_to_string_split_on_string()
==========================================
[source]
------------------------------------------
>>> :str prefix suffix
>>> set_strings_to_string_split_on_string pre suf "wol==hea==soc" "=="
>>> :stdout.echo "prefix: ${prefix}\nsuffix: ${suffix}"
prefix: wol
suffix: hea==soc
------------------------------------------
==========================================
/---
function set_strings_to_string_split_on_string() {
    # Validate sanity.
    die_unless_args_4\
        'Expected one prefix name, one suffix name, one string, and one delimiter.'
    :str\
        prefix_name__sstspod="${1}"\
        suffix_name__sstspod="${2}"\
        text__sstsps="${3}"\
        separator__sstsps="${4}"
    :Str.die_unless "${prefix_name__sstsps}"
    :Str.die_unless "${suffix_name__sstsps}"
    die_unless_string_nonempty "${separator__sstsps}" 'Expected nonempty separator.'

    #FIXME: Generalize into a new :die_unless_string_contains() exception handler.
    # If such string contains no such delimiter, throw an exception.
    :str.contains "${text__sstsps}" "${separator__sstsps}" :or
        :die "String \"${text__sstsps}\" contains no separator \"${separator__sstsps}\"."

    #FIXME: Conjoin into a single "//"-style match enabling "(#b)" to capture
    #the two groups, then set such strings with such groups. This also helps to
    #rid us of the unwieldy test above, assuming we detect such match failing
    #with non-zero exit status.
    #FIXME: Just use a single "#" with "(#b)". See :List.from_stdin().
    #FIXME: Actually, the current approach is probably optimal after all. After
    #contemplating, document the above alternatives and why the current approach
    #is, indeed, optimal. Reasons include:
    #
    #* If such string does *NOT* contain such delimiter, such split will
    #  silently succeed, in which case ${match} is unchanged. Hence, we still
    #  need to perform the above validation.
    #* Modifying ${match} is a bad thing. While localizing ${match} solves
    #  issues of overwriting parent values of such list, there probably exist a
    #  number of inefficiencies related to declaring and setting a new list that
    #  the current scalar-based approach completely obviates.

    # Split this string.
    :Str.set "${prefix_name__sstsps}" "${text__sstsps%%${separator__sstsps}*}"
    :Str.set "${suffix_name__sstsps}" "${text__sstsps#*${separator__sstsps}}"
}
