#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *string encoders* and *decoders* (i.e., functions converting strings to
and from various string encodings).
/---

# ....................{ GLOBALS                            }....................
# See https://en.wikipedia.org/wiki/Percent-encoding.
:str.global\
    ZY_URL_CHARACTERS_RESERVED_GLOB='[!*''();:@&=+$,/?#\[\]]' <<'/---'
Glob matching all *URL-reserved characters* (i.e., characters reserved for use
in URLs by the canonical URL specification).
/---

# ....................{ ENCODERS ~ url                     }....................
#FIXME: Rename to encode_string_into_url:().
#FIXME: Add examples.
:func.doc <<'/---'
string encode_string_to_url(string text1, string text2, ...)

*Percent encode* the passed strings (i.e., encode the passed strings into a
syntactically valid URL). Specifically, convert all URL-reserved characters in
such strings to percent-prefixed hexadecimal substrings (i.e., `%NN`, where `NN`
is the ASCII code point in hexadecimal of the character to be encoded).
Subsequently call decode_string_from_url() to convert such URLs back to the
original string.
/---
function encode_string_to_url() {
    # Encode only URL-reserved characters. While the percent encoding scheme
    # technically permits *ALL* characters to be encoded, doing so is
    # (rightfully) perceived to be both obnoxious and unnecessary. For
    # efficiency, inline such implementation. See
    # convert_character_to_hexadecimal() for further details.
    die_unless_args 'Expected one or more strings.'
    :stdout.echo "${*//(#m)(${~ZY_URL_CHARACTERS_RESERVED_GLOB})/%$(( [##16] ##${MATCH} ))}"
}

#FIXME: Document me!
:func.doc <<'/---'
string decode_string_from_url(string url1, ...)

*Percent decode* the passed URLs (i.e., decode the passed syntactically
valid URLs into a string). Specifically, convert percent-prefixed hexadecimal
substrings (i.e., `%NN`, where `NN` is the ASCII code point in hexadecimal of
the character to be decoded) to the corresponding URL-reserved characters. See
encode_string_to_url() for further details.
/---
function decode_string_from_url() {
    # For efficiency, inline such implementation. See
    # convert_hexadecimal_to_character() for further details.
    die_unless_args 'Expected one or more URLs.'
    :stdout.echo "${*//(#m)(\%[[:xdigit:]][[:xdigit:]])/${(#)MATCH//\%/0x}}"
}

# ....................{ ENCODERS ~ path                    }....................
#FIXME: Rename to simply encode_string_into_path:(). UNIX paths are *ALWAYS*
#assumed and need not be explicitly stated. If we ever concoct another function
#for, say, encoding into Windows paths, the resultant function name
#encode_string_into_path_windows:() would readily apply.
:func.doc <<'/---'
string encode_string_to_path_unix(string text1, ...)

Encode the passed strings to a syntactically valid UNIX pathname by converting
reserved characters and pathnames in such strings to printf()-compatible
hexadecimal format (i.e., `\xNN`, where `NN` is the ASCII code point in
hexadecimal of the character to be encoded). Call decode_string_from_path() to
decode such pathnames back into the original string: e.g.,

.encode_string_to_path_unix()
==========================================
[source]
------------------------------------------
>>> string party="oil/ war\ and the fate of industrial societies"
>>> encode_string_to_path_unix "${party}"
oil\x2F war\x5C and the fate of industrial societies
>>> decode_string_from_path_unix "$(encode_string_to_path_unix "${party}")"
oil/ war\ and the fate of industrial societies
------------------------------------------
==========================================

== Motivation ==

While remarkably permissive by compare to non-UNIX filesystems, UNIX filesystems
reserve pathnames `.` and `..` for use in constructing relative pathnames; thus,
this encodes `.` to `\x2E` and `..` to `\x2E\x2E`. Likewise, UNIX filesystems
reserve character `/` for the directory separator and the null character for the
pathname terminator; thus, this encodes `/` to `\x2F` and null characters to
`\x00`. To avoid accidentally converting `\`-prefixed substrings on decode, this
function additionally encodes `\` to `\x5C`.

This function encodes no other characters and hence does _not_ perform full
hexadecimal encoding (also referred to as *percent* or *URI encoding*). See
convert_string_to_string_percent_encoded() for such functionality.
/---
function encode_string_to_path_unix() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'
    string pathname="${*}"

    # If such path is either "." or "..", manually hexadecimal encode such path.
    # While feasible, doing so below proved overly cumbersome.
    if is "${pathname}" == '..' si {
        :str.return '\x2E\x2E'
    } elif is "${pathname}" == '.' si {
        :str.return '\x2E'
    #FIXME: The above is fine, but this is fairly unoptimal. Instead, adopt a
    #encode_string_to_url()-based approach: e.g.,
    #} else {
    #   :str.return "${pathname//...}"
    #}
    # Else if such path contains either "/" , "\", or a null, hexadecimal encode
    # all such characters. For efficiency, inline such replacements.
    } elif is "${pathname}" == *('/'|'\'|"${ZY_ASCII_NULL}")* si {
        # Right. So we actually have to encode *ALL* "\" characters, not merely
        # "\" preceding "x" characters. Why? Because efficiently decoding such
        # strings below passes them through "echo -e", which recognizes all
        # escape codes. That's bad, in this case, because it implies "\"-prefixed
        # substrings (e.g., "\n") would be erroneously converted on decoding. So,
        # we escape all such substrings here to prevent erroroneous decoding.
        :str.return "${${${pathname//\//\x2F}//${ZY_ASCII_NULL}/\x00}//\\/\x5C}"
    }
}

:func.doc <<'/---'
string decode_string_from_path_unix(string pathname1, ...)

Decode the passed hexadecimal-encoded UNIX pathnames back to their original
strings. See encode_string_to_path_unix() for further details.
/---
function decode_string_from_path_unix() {
     die_unless_args 'Expected one or more pathnames.'
     echo -e "${*}"
}

# --------------------( WASTELANDS                         )--------------------
#   if is "${pathname}" == ('.'|'..') si {
#      pathname='\x2E'
    # Get such path.
#   :stdout.echo "${pathname}"
