#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *escaped string characters* (i.e., string characters encoded under some
canonical representation rather than embedded as is in such string).
/---

# ....................{ ESCAPERS                           }....................
:func.doc <<'/---'
string escape_string(string text1, ...)

Escape all shell-reserved and whitespace characters in the passed strings.
Specifically, prefix such characters with a backslash: e.g.,

.escape_string()
==========================================
[source]
------------------------------------------
>>> string on_american_beauty=\
...    "O Beautiful for smoggy skies,
...     Insecticided grain,
...     For strip-mined mountains' majesty
...     Above the asphalt plain!
...     America!
...     America!
...     Man sheds his waste on thee
...     And hides the pines with billboard signs
...     From sea to oily sea!"
>>> escape_string "${on_american_beauty}"
O\ Beautiful\ for\ smoggy\ skies,
Insecticided\ grain,
For\ strip-mined\ mountains\'\ majesty\
Above\ the\ asphalt\ plain\!
America\!
America\!
Man\ sheds\ his\ waste\ on\ thee
And\ hides\ the\ pines\ with\ billboard\ signs
From\ sea\ to\ oily\ sea!
------------------------------------------
==========================================
/---
function escape_string() {
    die_unless_args 'Expected one or more strings.'
    :stdout.echo "${(q)*}"
}

:func.doc <<'/---'
string escape_string_double_quotes(string text1, ...)

Escape all double quotes in the passed strings. Specifically, prefix such quotes
with a backslash: e.g.,

.escape_string_double_quotes()
==========================================
[source]
------------------------------------------
>>> string on_courtrooms=\
...    'Medical marijuana grower and activist Steve McWilliams killed himself
...     last June, rather than face 6 months in prison with no marijuana to
...     relieve his chronic pain. If you are ever in a situation like this,
...     don't kill yourself in private. Make your death itself be a blow against
...     the tyrant. Plead innocent; then kill yourself in the courtroom, with
...     the jury and journalists watching, after defying the judge by shouting,
...     "I'm a medical marijuana grower. You were going to make those 12 honest
...     citizens your tools for evil, but I will save them from you. May my
...     death be on your conscience for as long as you live."'
>>> get_string_line "$(escape_string_double_quotes "${on_courtrooms}")" -1
death be on your conscience for as long as you live."
------------------------------------------
==========================================
/---
function escape_string_double_quotes() {
    die_unless_args 'Expected one or more strings.'
    :stdout.echo "${*//\"/\\\"}"
}

:func.doc <<'/---'
string escape_string_for_printf(string text1, ...)

Escape the passed strings for subsequent passing to printf() as string literals
rather than format specifications. Specifically, repeat percent signs: e.g.,

.escape_string_for_printf()
==========================================
[source]
------------------------------------------
>>> string on_acceptance=\
...    "People said I should accept the world. Bullshit!
...     I don't accept the world.
...     % RMS %"
>>> escape_string_for_printf "${on_acceptance}"
People said I should accept the world. Bullshit!
I don't accept the world.
%% RMS %%
------------------------------------------
==========================================
/---
function escape_string_for_printf() {
    # "%" is a zero-width assertion matching the string end and must be escaped.
    die_unless_args 'Expected one or more strings.'
    :stdout.echo "${*//\%/%%}"
}

# ....................{ ESCAPERS ~ path                    }....................
#FIXME: This is inherently nonsensical. By definition, Linux pathnames *CANNOT*
#contain directory separators or null characters. Full stop. Period. End of
#sentence. There *ARE* various means of indirectly encoding such characters into
#pathnames, however: the simplest and most common being base64 encoding. I
#believe we discuss this somewhere in @{path/database/kvs}, as we need to apply
#such encoding to KVS key names stored as filenames.

:func.doc <<'/---'
string escape_path_dir_separator(string pathname)

Escape all directory separators in the passed path, prefixing all forward
slashes in such path with a backslash. For safety, consider calling this
function when creating path basenames from unsafe sources (e.g., user input
possibly containing forward slashes): e.g.,

.escape_path_dir_separator()
==========================================
[source]
------------------------------------------
>>> string shibboleth="$(escape_path_dir_separator /fungi/from/yuggoth)"
>>> make_file "$(get_home)/${shibboleth}"
>>> list_path "$(get_home)/${shibboleth}"
/home/leycec/\/fungi\/from\/yuggoth
------------------------------------------
==========================================
/---
function escape_string_dir_separator() {
    die_unless_arg 'Expected one pathname.'

    #FIXME: See the above comment.
    :die 'Unimplemented!'
}

# --------------------( WASTELANDS                         )--------------------
#   replace_string_matches_glob_with_string "${*}" '"' '\"'
#   replace_string_matches_glob_with_string "${1}" '/' '\/'
#shell-reserved characters preceded by `\`).

#(Three Rings)" "[for the]" "{Elven-kings}"
#\(Three\ Rings\) \[for\ the\] \{Elven-kings\}

#...     'Internationally, "the war on drugs" provides a cover for intervention.
#...      Domestically, it has little to do with drugs but a lot to do with
#...      distracting the population, increasing repression in the inner cities,
#...      and building support for the attack on civil liberties.'
