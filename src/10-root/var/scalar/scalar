#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *scalar left-hand sides* (i.e., expressions syntactically valid as the
left-hand sides of scalar assigments). See is_scalar() for further details.
/---

# ....................{ EXCEPTIONS                         }....................
#FIXME: Rename to :scalar.die_unless().
:func.doc <<'/---'
:void :die_unless_scalar(:str expression)
/---
function :die_unless_scalar() {
    die_unless_args_1_to_2 'Expected one expression and optional error message.'
    :scalar.is "${1}" :or {
        :str expression="${1}"
        :die 'Expression "'${expression}'" not a scalar left-hand side.'
    }
}

# ....................{ TESTERS                            }....................
#FIXME: Rename to :scalar.is().
:func.doc <<'/---'
[status = :bool] :scalar.is(:str expression)

Report success if the passed expression is a *scalar left-hand side* (i.e.,
valid as the left-hand side of scalar assigments), including:

* Scalar variable names (e.g., `vituperative_portrayal_of_weak_and_vulnerable`).
* List indexation (e.g., `fecund_bone_yard_of_gossip_poison_and_lies[96]`).
* Map indexation (e.g., `distracted_by[vapid celebrity claptrap]`).
/---
function :scalar.is() {
    #FIXME: Match the variable name from such LHS and verify whether such
    #variable exists. Trivially accomplished by simply grouping
    #${ZY_VAR_NAME_PCRE} and expanding ${match[1]} afterward. *shrug*
    die_unless_arg 'Expected one expression.'
    :is ${1} =~ ${ZY_VAR_NAME_PCRE}'(?:\[[^\]]*+\])?' :si
}

# ....................{ REPLACERS                          }....................
#FIXME: A reasonably efficient remove_scalar_text_matching_pcre:() function can
#now be implemented simply by calling this function with the empty string as the
#last passed argument. Sweet, eh?
#FIXME: This function is *SIGNIFICANTLY* faster than the following single-line
#idiom for replacing text file contents via globbing:
#
#   # Globally remove all forward references in such file.
#   mapfile[${filename}]="${mapfile[${filename}]//\<a[^>]#\>↓\</a\>}"
#
#That's good, we suppose. But it's also somewhat unexpected.
#
#What enquiring minds want to know is: *WHY*? Is it the fact that this function
#copies the contents of such file to a temporary string local before performing
#such replacement on that local? Is it the possibility that "libpcre" is
#substantially more efficient than zsh's globbing implementation? Is it merely
#the fact that "libpcre" compiles PCREs while zsh's globbing implementation
#(presumably) does not? Or is something far more insidious occuring here?
#Uncover some semblance of the truth, please.

#FIXME: Correct the example -- which should have defined a valid map but
#doesn't. (Odd.)

#FIXME: Rename to :scalar.replace_pcre_matches_with_string().

:func.doc <<'/---'
:void :replace_scalar_text_matching_pcre_with_text(
     :str scalar_lhs,
     :str pcre,
     :str replacement_text)

Globally replace all substrings in the passed *scalar left-hand side* (i.e., an
expression valid as the left-hand side of scalar assigments) matching the passed
PCRE with the passed replacement substring. See :scalar.is() for further
details: e.g.,

.:replace_scalar_text_matching_pcre_with_text()
==========================================
[source]
------------------------------------------
>>> :map on_civil_disobedience; on_civil_disobedience=(
...     "The Problem is Civil Obedience"
...     "I start from the supposition that the world is topsy-turvy, that things
...      are all wrong, that the wrong people are in jail and the wrong people
...      are out of jail, that the wrong people are in power and the wrong
...      people are out of power, that the wealth is distributed in this country
...      and the world in such a way as not simply to require small reform but
...      to require a drastic reallocation of wealth. I start from the
...      supposition that we don't have to say too much about this because all
...      we have to do is think about the state of the world today and realize
...      that things are all upside down." )
>>> :replace_scalar_text_matching_pcre_with_text\
...      'on_civil_disobedience[The Problem is Civil Obedience]'\
...      '\bthat [^:punct:]++([:punct:])'\
...      'that our problem is civil obedience${match[1]}'
>>> :str.output "${on_civil_disobedience[The Problem is Civil Obedience]}"
I start from the supposition that our problem is civil obedience, that our
problem is civil obedience, that our problem is civil obedience, that our
problem is civil obedience, that our problem is civil obedience. I start from the
supposition that our problem is civil obedience.
------------------------------------------
==========================================

== Replacement Expansion ==

Such replacement is dynamically expanded in the context of each replacement and
hence may contain references to:

* Currently matched substring `${MATCH}`.
* Currently captured groups `${match[${group_index}]}` for all valid group
  indices `${group_index}`.
/---
function :replace_scalar_text_matching_pcre_with_text() {
    # This function has been heavily optimized for real-world application on
    # large text files. Avoid extraneous string copies and hence implicit
    # copies of text file contents at all costs.
    #
    # Validate sanity.
    die_unless_args_3\
        'Expected one scalar left-hand side, one PCRE, and one replacement substring.'
    :str\
        scalar__rltmpbt="${1}"\
        pcre__rltmpbt="${2}"\
        replacement__rltmpbt="${3}"\
        text_old__rltmpbt\
        text_new__rltmpbt
    :die_unless_scalar "${scalar__rltmpbt}"

    # Original text of such scalar. For efficiency, iteration below modifies
    # such text "in-place."
    text_old__rltmpbt="${(P)scalar__rltmpbt}"

    #FIXME: While it's true in the common case that we don't need to iterate
    #in ${ZPCRE_OP}-based fashion, doing so should dramatically increase
    #efficiency for large input. Moreover, the current approach actually
    #implements a different algorithm than the documentation suggests:
    #currently, we transitively replace *ALL* matches, including those
    #introduced by prior replacements! But that isn't at all what the core
    #"${...//.../...}" operation does, suggesting even the current behaviour to
    #be subtle erroneous (or at least non-orthogonal with "zsh" and most other
    #regex implementations).
    #
    #In other words, start iterating in ${ZPCRE_OP}-based fashion.

    # While there exist substrings matching such PCRE in such text, dynamically
    # replace such substrings with their replacement. Since each such
    # replacement guaranteeably replaces such match, the implementation below
    # need *NOT* store the byte offset of the current match to string global
    # ${ZPCRE_OP} (unlike most PCRE match iterations). Such implementation
    # strongly resembles that of for_string_text_matching_pcre:() but differs
    # enough to warrant separation here. See such function for further details.
    #
    # For efficiency, avoid performing brute-force matching ala
    # 'while :is "${text_old__rltmpbt}" =~ "${pcre__rltmpbt}" :si {...}'. Such
    # approach does suffice to implement the desired iteration but could
    # conceivably recompile such PCRE on each iteration (depending on zsh
    # internals) and in any case is unlikely to optimize such compilation by
    # internally calling pcre_study().
    :str MATCH ZPCRE_OP
    :list   match
    :pcre.compile "${pcre__rltmpbt}"

    # Locally disable default zsh option "multibyte", permitting substrings
    # matched by pcre_match() to be indexed by the " "-delimited byte indices
    # written to ${ZPCRE_OP}. See ::code.preprocess().
    :option.disable_local multibyte

    # While there exist substrings matching such PCRE in such text, setting
    # global string ${ZPCRE_OP} to the " "-delimited byte indices of the start
    # and end of such substring...
    while { pcre_match -b -- "${text_old__rltmpbt}" } {
        # If such substring is empty, throw an exception. This avoids infinite
        # loops on perverse PCREs matching only zero-width assertions or the
        # empty string.
        (( ${#MATCH} )) :or :die\
            'PCRE "'${pcre__rltmpbt}'" erroneously matched the empty string.'

        # As ::code.preprocess() documents, "man zshmodules" documentation is
        # incorrect with respect to ${ZPCRE_OP}, whose first word is in fact
        # the byte index of the last character preceding the matched substring
        # and the second word the byte index of the last character of such
        # substring. This implies the second assignment below should resemble:
        #
        #     text_old__rltmpbt=${text_old__rltmpbt[$((
        #         ${ZPCRE_OP[(w)2]} + 1 )),-1]}
        #
        # Unfortunately, since ${ZPCRE_OP[(w)2]} is a byte index *AND* since
        # such string may contain multibyte characters, incrementing such index
        # by one does *NOT* suffice to skip to the next character. Instead, we
        # need to temporarily reenable character indexing *AFTER* the
        # assignment that appears below, skip the last character of the matched
        # substring by slicing such text with character indices, and then
        # reenabling byte indexing in preparation for the next iteration.
        #
        # At this point, you're probably asking yourself: "Is any of this
        # nonsensical claptrap genuinely worth it?" The answer is a resounding
        # "Yes, but no more questions." The reasons why? Efficiency. Global
        # search and replace over precompiled PCREs is sufficiently fast to
        # warrant such contorted code -- but only just.

        # Append the replaced text by the portion of the original text preceding
        # such match followed by such replacement dynamically expanded in the
        # current context.
        text_new__rltmpbt+="${text_old__rltmpbt[1,${ZPCRE_OP[(w)1]}]}${(e)replacement__rltmpbt}"

        # Reduce the original text to the portion following such match.
        text_old__rltmpbt="${text_old__rltmpbt[${ZPCRE_OP[(w)2]},-1]}"

        # Skip the last character of such match, as discussed above. Since the
        # prior call to :option.disable_local() set option "local_options",
        # these calls only enable and disable such option locally. Since this
        # code is sufficiently hacky, don't bother calling genuine zeshy
        # runnables here. (Let the ivory-horned kludges of Cthulhu arise.)
        setopt   multibyte
        text_old__rltmpbt="${text_old__rltmpbt[2,-1]}"
        unsetopt multibyte
    }

    # Set such scalar to such replaced text followed by all remaining original
    # text. To avoid extraneous string copies of large text file contents,
    # such operation is inlined.
    eval ${scalar__rltmpbt}'="${text_new__rltmpbt}${text_old__rltmpbt}"'
}

#FIXME: In lieu of unit tests...
# function lymo() {
#     string scalar_new scalar_old='““““quote_double_right”””””quote_single_left‘‘‘‘‘quote_single_right’’’’’’border_top┈┈┈┈┈┈border_bottom┈┈┈┈┈┈┈border_left┋┋┋┋┋┋┋border_right┋┋┋┋┋┋┋'
#     scalar_new="${scalar_old}"
#     :replace_scalar_text_matching_pcre_with_text\
#         scalar_new '(quote_|border_).*?(quote_|border_)' '${match[1]}???${match[2]}'
#     print "old: ${scalar_old}\nnew: ${scalar_new}"
# }

# --------------------( WASTELANDS                         )--------------------
        #FUXME: Ugh. In hindsight, the following is more than a little overkill.
        #While it *DOES* work, ${#MATCH} gives us the byte length of the current
        #match and hence a significantly more efficient equivalent:
        #
        #    text_old__rltmpbt="${text_old__rltmpbt[$((
        #        ${#MATCH}${ZPCRE_OP[(w)2]},-1]}"

        #FUXME: Report this bug! This is currently affecting *EVERYONE*
        #leveraging module "zsh/pcre", which is probably most people.

        # "man zshmodules" explicitly states the first word of ${ZPCRE_OP} to
        # be the byte index of the first character of the matched match and the
        # second word of ${ZPCRE_OP} to be the byte index of the first
        # character following such match. Unfortunately, this is *NOT* the
        # case, a bug in the current zsh implementation (or documentation).
        #
        # Regardless of whether option "-n" is passed to pcre_match(), the
        # first word of ${ZPCRE_OP} is the byte index of the last character
        # preceding such match and the second word of ${ZPCRE_OP} the byte
        # index of the last character of such match. In other words, the
        # documentation is "off by one" in both cases.

        #FUXME: Perhaps more importantly, ensure that *WE* are not silently
        #hitting such bug elsewhere in the codebase.

    # Unfortunately, pcre_match() fails to set global integers ${MBEGIN} and
    # ${MEND} to the character indices of the start and end of the matched
    # substring. Fortunately, it sets global string ${ZPCRE_OP} to the " "-
    # delimited *BYTE* indices of the start and end of such substring.
    # Unfortunately, multibyte strings (e.g., UTF8-encoded) are indexed with
    # character rather than byte indices under default zsh option "multibyte".
    # Fortunately, such option can be locally disabled to force zsh to index
    # all strings (multibyte or not) with byte rather than character indices.

#FUXME: Rename to :scalar.replace_text_matching_pcre_with_text().
    #FUXME: Document new ${ZPCRE_OP} approach. Namely, because pcre_match()
    #fails to set ${MBEGIN} and ${MEND}, we resort to a raw byte-based approach.

#           print "MBEGIN: ${MBEGIN}; MEND: ${MEND}"
        # :option.enable_local  multibyte
        # text_new__rltmpbt="${text_new__rltmpbt[1,-2]}"
        # :option.disable_local multibyte


        # Append the replaced text by the portion of the original text preceding
        # such match followed by such replacement dynamically expanded in the
        # current context.
#       text_old_start__rltmpbt="${text_old__rltmpbt[1,${ZPCRE_OP[(w)1]}]}"
#       text_old_start__rltmpbt="${text_old_start__rltmpbt[1,-2]}"
#       text_new__rltmpbt+="${text_old__rltmpbt[1,${ZPCRE_OP[(w)1]}-1]}${(e)replacement__rltmpbt}"

    # try {
    # }:catch{
    # }:
    #FUXME: This would probably be *MUCH* faster leveraging a pcre_compile()-
    #based approach. This approach probably recompiles such PCRE on each
    #iteration and in any case is unlikely to call pcre_study(). See
    #for_string_text_matching_pcre:() for further details.

    # While there exist substrings matching such PCRE in the original text...
#   while is "${text_old__rltmpbt}" =~ "${pcre__rltmpbt}" si {

    # for_string_text_matching_pcre: "${(P)scalar__rltmpbt}"
    # distribution for real-world application to large text files. Indeed, since
    # this function is transitively called by
    # :replace_file_text_matching_pcre_with_text(), avoid extraneous string copies
    # (and hence copies of text file contents) at all costs.

    # # Prepare such PCRE for iterative matching. While brute-force matching ala
    # # See for_string_text_matching_pcre:() for further details.
    # for_string_text_matching_pcre: "${(P)scalar__rltmpbt}"
    # string MATCH MBEGIN MEND
    # list   match mbegin mend
    # pcre_compile -- "${pcre__fspm}"
    # pcre_study

    # # While there exist substrings matching such PCRE in the original text...
    # string ZPCRE_OP='0 0'
    # while { pcre_match -b -n ${ZPCRE_OP[(w)2]} -- "${text_old__rltmpbt}" } {
    #     
    # }

    #FUXME: It'd be great if we could syntactically validate such LHS to
    #actually be a valid scalar LHS. So far as I can conceive, the following glob
    #should do it:
    #
    #    is "${expression}" == ${~ZY_VAR_NAME_GLOB}(|'['?*']') si
    #
    #Encapsulate this into a new die_unless_lhs_scalar() function. We could even
    #match the variable from such LHS and verify whether it exists -- though,
    #perhaps that's a bit much? *shrug*

# == Scalar Left-hand Sides ==
# 
# Valid scalar left-hand sides include:
# 
# * Scalar variable names (e.g., `vituperative_portrayal_of_weak_and_vulnerable`).
# * List indexation (e.g., `fecund_bone_yard_of_gossip_poison_and_lies[96]`).
# * Map indexation (e.g., `distracted_by[vapid celebrity claptrap]`).
