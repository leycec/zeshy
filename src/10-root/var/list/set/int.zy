#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*List size setters* (i.e., functions setting integer variables to the size of
passed lists).
/---

# ....................{ GETTERS                            }....................
#FIXME: Replace with :List.Size() everywhere in the codebase.
:func.doc <<'/---'
:int get_list_size(:str list_name)

Get the number of items in the passed list: e.g.,

.get_list_size()
==========================================
[source]
------------------------------------------
>>> list on_mind; on_mind=(
...    'A temple flag flapped in the wind. Two monks stood watching. One said'
...    'to the other, "The flag is moving." The other replied, "The wind is'
...    'moving." The sixth patriarch Eno overheard this and said, "It is not'
...    'the wind or the flag. The mind is moving."'
>>> get_list_size on_mind
4
------------------------------------------
==========================================
/---
function get_list_size() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :str list_name__gls="${1}"
    :int list_size

    # Get and return such size.
    :List.Size "${list_name__gls}" list_size
    :stdout.echo "${list_size}"
}

# ....................{ SETTERS                            }....................
:func_ ':void :List.Item.index(
    :List list_name :Str list_item_name :int list_index) [
    var_name_suffix="__LIi"]' :func{
    :Str.set\
        "${list_item_name__LIi}" "${${(@P)list_name__LIi}[${list_index__LIi}]}"
#FIXME: Add examples. For it is good.
}:func <<'/---'
Set the string variable with the passed name to the list item with the passed
1-based index in the list variable with the passed name.
/---


:func_ ':void :List.Size(:List list_name :Int size_name) [
    var_name_suffix="__LS"]' :func{
    # Set this integer. Dismantled, this is:
    #
    # * '@P', expanding the passed list name as a list.
    # * '#', expanding the size of such list.
    #
    # This expansion *MUST* be double-quoted. When failing to do so, this
    # function will still behave as expected for all lists except those
    # containing empty elements (i.e., elements equal to the empty string), in
    # which case these elements will be ignored and the returned list size will
    # be the expected list size minus the number of these elements. (While
    # obscure, this behavior extends to all list operations!)
    :Int.set "${size_name__LS}" "${#${(@P)list_name__LS}}"
}:func <<'/---'
Set the integer variable with the passed name to the size of the list variable
with the passed name (i.e., the number of items in this list).

== Examples ==

==========================================
[source]
------------------------------------------
>>> :int list_size
>>> :list on_relevancy; on_relevancy=(
...     "Folks, it's time to evolve. That's why we're troubled. You know why"
...     "our institutions are failing us â€“ the Church, the State? Everything's"
...     "failing. It's because they're no longer relevant. We're supposed to"
...     "keep evolving. Evolution did not end with us growing opposable"
...     "thumbs." )
>>> :List.Size on_relevancy list_size
>>> :stdout.echo "${list_size}"
5
------------------------------------------
/---
