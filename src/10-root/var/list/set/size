#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *list size setters* (i.e., functions setting integer variables to the
size of passed lists).
/---

# ....................{ GETTERS                            }....................
:func.document <<'/---'
int get_list_size(string list_name)

Get the number of items in the passed list: e.g.,

.get_list_size()
==========================================
[source]
------------------------------------------
>>> list on_mind; on_mind=(
...    'A temple flag flapped in the wind. Two monks stood watching. One said'
...    'to the other, "The flag is moving." The other replied, "The wind is'
...    'moving." The sixth patriarch Eno overheard this and said, "It is not'
...    'the wind or the flag. The mind is moving."'
>>> get_list_size on_mind
4
------------------------------------------
==========================================
/---
function get_list_size() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :string list_name__gls="${1}"
    :int list_size

    # Get and return such size.
    :set_int_to_list_size list_size "${list_name__gls}"
    :string.output "${list_size}"
}

# ....................{ SETTERS                            }....................
#FIXME: Refactor to :list.set_int_to_size().

:func.document <<'/---'
:void :set_int_to_list_size(^:int int_name, ^:list list_name)

Set the passed integer variable to the *size* of the passed list (i.e., the
number of items such list contains): e.g.,

.:set_int_to_list_size()
==========================================
[source]
------------------------------------------
>>> :int list_size
>>> :list on_relevancy; on_relevancy=(
...     "Folks, it's time to evolve. That's why we're troubled. You know why"
...     "our institutions are failing us â€“ the Church, the State? Everything's"
...     "failing. It's because they're no longer relevant. We're supposed to"
...     "keep evolving. Evolution did not end with us growing opposable"
...     "thumbs." )
>>> :set_int_to_list_size list_size on_relevancy
>>> :string.output "${list_size}"
5
------------------------------------------
/---
function :set_int_to_list_size() {
    # Validate sanity.
    die_unless_args_2 'Expected one integer name and one list name.'
    :string int_name__sitls="${1}" list_name__sitls="${2}"
    :var.die_unless_type_list "${list_name__sitls}"

    # Set such integer. Dismantled, this is:
    #
    # * '@P', expanding the passed list name as a list.
    # * '#', expanding the size of such list.
    #
    # Such expansion *MUST* be double-quoted. If you fail to do so, this
    # function will still behave as expected for all lists except those
    # containing empty elements (i.e., elements equal to the empty string), in
    # which case such elements will be ignored and the returned list size will
    # be the expected list size minus the number of such elements. (While
    # obscure, such behavior actually extends to all other list functions! Wary,
    # young padawan.)
    :int.set "${int_name__sitls}" "${#${(@P)list_name__sitls}}"
}

# --------------------( WASTELANDS                         )--------------------
