#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*List joiners* (i.e., functions reducing lists to strings by joining list items
together into composite strings).

== See Also ==

* zy://var/str/message, declaring additional list joiners.
/---

#FIXME: Refactor all getters into setters.

# ....................{ JOINERS                            }....................
#FIXME: Refactor into a :List.Join() setter.

:func.doc <<'/---'
:str join_list(:List list_name)

Concatenate all items of the list with the passed name without delimitation.

Equivalently, this function delimits all elements of this list with the empty
string.

== Examples ==

.join_list()
==========================================
[source]
------------------------------------------
>>> :list on_forerunners; on_forerunners=(
...    "You are your own forerunner," "and the towers you have builded are but
...     the foundation of your giant" "-self. And that self too shall be a
...     foundation. And I too am my"  "own forerunner, for the long shadow
...     stretching before me at"      "sunrise shall gather under my feet at
...     the noon hour. Yet another"   "sunrise shall lay another shadow before
...     me, and that also shall be"   "gathered at another noon. Always have we
...     been our own forerunners,"    "and always shall we be. And all that we
...     have gathered and shall"      "gather shall be but seeds for fields yet
...     unploughed. We are the"       "fields and the ploughmen, the gatherers
...     and the gathered."
... )
>>> get_string_line "$(join_list on_forerunners)" 1
You are your own forerunner,and the towers you have builded are but
------------------------------------------
==========================================
/---
function join_list() {
    die_unless_arg 'Expected one list name.'
    :str list_name__jl="${1}"
    :List.die_unless "${list_name__jl}"

    # See concatenate_strings() for further details.
    IFS= :stdout.echo "${(P)list_name__jl}"
}


#FIXME: Refactor into a :List.Join_on_str() setter.
#FIXME: Create a new :list.join_to_string_on_char() as well, probably deferring
#to the more general :list.join_to_string_on_string().

:func.doc <<'/---'
:str join_list_on_string(:List list_name :str separator)

Join all items of the list with the passed name on the passed separator, thus
converting this list to a string internally delimited by this separator.

== Examples ==

.join_list_on_string()
==========================================
[source]
------------------------------------------
>>> :list on_love; on_love=(
...    "Like sheaves of corn he gathers you unto himself."
...    "He threshes you to make you naked."
...    "He sifts you to free you from your husks."
...    "He grinds you to whiteness."
...    "He kneads you until you are pliant;"
...    "And then he assigns you to his sacred fire,"
...    "that you may become sacred bread for God's sacred feast."
...    "All these things shall love do unto you"
...    "that you may know the secrets of your heart,"
...    "and in that knowledge become a fragment of Life's heart."
...    "But if in your fear you would seek only
...    "love's peace and love's pleasure,"
...    "Then it is better for you that you cover your nakedness"
...    "and pass out of love's threshing-floor,"
...    "Into the seasonless world where you shall laugh,"
...    "but not all of your laughter, and weep,"
...    "but not all of your tears."
... )
>>> get_string_line "$(join_list_on_string on_love "${ZY_ASCII_NEWLINE}")" 1
Like sheaves of corn he gathers you unto himself.
------------------------------------------
==========================================
/---
function join_list_on_string() {
    die_unless_args_2 'Expected one list name and one separator.'
    :str list_name__jlos="${1}" separator__jlos="${2}"
    :char token__jlos
    :List.die_unless "${list_name__jlos}"

    #FIXME: OMFG. This is trivially implementable in a generic manner without
    #any such nonsense by merely leveraging zsh's builtin (and highly efficient)
    #glob-replacement-over-all-list-items functionality. Super trivial. More
    #importantly, this approach immediately generalizes to all possible strings.
    #To do so:
    #
    #* See :List.Join_on_newline().
    #* Generalize the approach implemented by that function.
    #* Refactor :List.Join_on_newline() to call this function instead.

    # If a parameter expansion token specific to this separator exists, join
    # this list with parameter expansion flag "(j...)".
    if { :set_char_to_string_expansion_token_if_found\
        token__jlos "${separator__jlos}" } {
        eval ":str.return\
            \"\${(j${token__jlos}${separator__jlos}${token__jlos})${list_name__jlos}}\""
    #FIXME: Google us up a last-ditch alternative.
    # Else, throw an exception. While difficult to concieve a real-world join
    # separator containing all possible tokens, it certainly remains possible.
    } else {
        :die "separator \"${separator__jlos}\" contains all possible paramater expansion tokens"
    }
}

# ....................{ JOINERS ~ newline                  }....................
:func_ ':str :List.Join_on_newline(:List list_name :Str str_name) [
    var_name_suffix="__LSjon"]' :func{
    # String of all items of this list joined on newline. Dismantled, this is:
    #
    # * "IFS=", preventing zsh from additionally joining list items on space.
    # * "${(@P)...}", expanding to all list items of this list.
    # * "${(@)...//.../...}", replacing in each such list item:
    #   * "(#b)(*)", the entire list item captured to "${match[1]}".
    #   * "${match[1]}...", this list item suffixed by a newline.
    #
    # Note that both "@" signs are required.
    #
    # Note also that this is the *ONLY* efficient means of joining arbitrary
    # list items containing characters. Unfortunately, the builtin zsh operator
    # for joining list items (i.e., the parameter expansion flag "(j...)")
    # requires an a priori delimiter guaranteed to *NOT* be a character of these
    # list items to be chosen. Since arbitrary list items containing arbitrary
    # characters could theoretically contain all possible delimiters, this
    # operator *CANNOT* by definition be used for general-purpose joining.
    IFS= :Str.set "${str_name__LSjon}"\
        "${(@)${(@P)list_name__LSjon}//(#b)(*)/${match[1]}${ZESHY_ASCII_NEWLINE}}"
}:func <<'/---'
Set the string variable with the passed name to all items of the list variable
with the passed name joined on newline.

This function converts this list into a newline-delimited string.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_tomorrow
>>> :list on_children; on_children=(
...    "Your children are not your children."
...    "They are the sons and daughters of Life's longing for itself."
...    "They come through you but not from you,"
...    "And though they are with you yet they belong not to you."
...    "You may give them your love but not your thoughts,"
...    "For they have their own thoughts."
...    "You may house their bodies but not their souls,"
...    "For their souls dwell in the house of tomorrow,"
...    "which you cannot visit,"
...    "not even in your dreams."
...    "You may strive to be like them,"
...    "but seek not to make them like you."
...    "For life goes not backward nor tarries with yesterday."
...    "You are the bows from which"
...    "your children as living arrows are sent forth."
... )
>>> :List.Join_on_newline on_children on_tomorrow
>>> get_string_line "${on_tomorrow}" 1
Your children are not your children.
------------------------------------------
==========================================
/---


#FIXME: Refactor into a :List.Join_on_newline_in_range() setter.
#FIXME: Add examples.
:func.doc <<'/---'
:str join_list_elements_in_range_on_newline(
    :List list_name :int start_index :int end_index)

Join all items of the list with the passed name between the passed (possibly
negative) inclusive start and end indices on newline, thus converting the
desired subset of this list to a newline-delimited string.
/---
function join_list_elements_in_range_on_newline() {
    die_unless_args_1_to_3\
        'Expected one list name and optional start and end indices.'
    :str\
        list_name__jlon="${1}"\
        index_start__jlon="${2-1}"\
        index_end__jlon="${3--1}"
    die_unless_list_range\
        "${list_name__jlon}"\
        "${index_start__jlon}"\
        "${index_end__jlon}"

    # Join such list with print() rather than join_list_on_string(), as the
    # former does so more safely and efficiently.
    #
    # Do *NOT* double quote such expansion, as doing so erroneously joins such
    # list on spaces rather than newlines.
    print -lr --\
        ${${(@P)list_name__jlon}[${index_start__jlon},${index_end__jlon}]}
}

#FIXME: In lieu of unit tests...
#function joii() {
#    list on_children; on_children=( "Your children" "are not" "your children." )
#    join_list_on_newline on_children
#    join_list_elements_in_range_on_newline on_children -3 -1
#}

# ....................{ JOINERS ~ column                   }....................
#FIXME: Refactor into a :List.Join_to_columns() setter.
#FIXME: Add examples.
#FIXME: Define convert_list_to_string_columns_horizontal() with identical
#implementation except also passing "-a" to the print() call.
:func.doc <<'/---'
:str join_list_into_column_count_vertical(:List list_name :int column_count)

Convert the list with the passed name to a string *columnated vertically* (i.e.,
assigning this list's first item to this string's first row and column,
assigning this list's second item to this string's second row and first column,
and so on) into the passed number of total columns.
/---
function join_list_into_column_count_vertical() {
    die_unless_args_2 'Expected one list name and one column count.'
    :str list_name__cltscv="${1}" column_count__cltscv="${2}"
    :List.die_unless "${list_name__cltscv}"
    :int.die_unless_positive "${column_count__cltscv}"

    #FIXME: Does this transparently handle embedded ANSI escape sequences?

    # Convert this list.
    print -r -C "${column_count__cltscv}" -- "${(@P)list_name__cltscv}"
}
