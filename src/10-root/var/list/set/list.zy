#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*List-based list setters* (i.e., functions setting list variables to the
contents of other list variables).
/---

#FIXME: Most (if not all) inefficient calls to builtin eval() below can be
#replaced by efficient calls to builtin set(): e.g.,
#
#    set -A "${list_name__sltl}" "${@}"
#
#Interestingly, there even exists a variant of the above suitable for setting
#arbitrarily large slices rooted at the *FIRST* element of such array:
#
#    "If +A is used and NAME is an array, the given arguments will
#     replace the initial elements of that array."
#
#Somewhat bizarre, but we could doubtless leverage that *SOMEWHERE*.
#FIXME: Likewise, we believe we've uncovered a technique for dynamically
#setting arbitrary single list items. Note the implementation of
#:set_map_key_to_string(). Now, if we just take that implementation and set and
#change the "key" to be set to the list index one past the current last list
#item, we've effectively implemented a dynamic list appending without eval().
#Nice, eh?

# ....................{ SETTERS                            }....................
#FIXME: Great example, but somewhat ludicrously long. Split in twain, and shift
#half of it elsewhere.

:func.doc <<'/---'
:void :List.eval(:List list_name :str code)

Set the list with the passed name to the dynamic expansion of the passed code in
a *list context* (i.e., as `( ${code} )`).

== Examples ==

.:List.eval()
==========================================
[source]
------------------------------------------
>>> :list on_struggle=(
...     "To grasp the full enormity of our deterioration, however, consider the"
...     "earliest condition of humanity, without government or property, when we"
...     "wandered as hunter-gatherers. Hobbes surmised that life was then nasty,"
...     "brutish and short. Others assume that life was a desperate unremitting"
...     "struggle for subsistence, a war waged against a harsh Nature with death"
...     "and disaster awaiting the unlucky or anyone who was unequal to the"
...     "challenge of the struggle for existence. Actually, that was all a"
...     "projection of fears for the collapse of government authority over"
...     "communities unaccustomed to doing without it, like the England of
...     "Hobbes during the Civil War. Hobbes' compatriots had already"
...     "encountered alternative forms of society which illustrated other ways"
...     "of life – in North America, particularly – but already these were too"
...     "remote from their experience to be understandable. (The lower orders,"
...     "closer to the condition of the Indians, understood it better and often"
...     "found it attractive. Throughout the seventeenth century, English"
...     "settlers defected to Indian tribes or, captured in war, refused to"
...     "return. But the Indians no more defected to white settlements than"
...     "Germans climb the Berlin Wall from the west.) The \"survival of the"
...     "fittest\" version – the Thomas Huxley version – of Darwinism was a"
...     "better account of economic conditions in Victorian England than it was"
...     "of natural selection, as the anarchist Kropotkin showed in his book"
...     "Mutual Aid, A Factor of Evolution. (Kropotkin was a scientist – a"
...     "geographer – who'd had ample involuntary opportunity for fieldwork"
...     "whilst exiled in Siberia: he knew what he was talking about.) Like most"
...     "social and political theory, the story Hobbes and his successors told"
...     "was really unacknowledged autobiography." )
>>> :List.eval on_struggle "'\"'${^on_struggle}'...\"'"
>>> :stdout.echo "${on_struggle[1]}"
"To grasp the full enormity of our deterioration, however, consider the..."
------------------------------------------
==========================================
/---
function :List.eval() {
    die_unless_args_2 'Expected one list name and one list operation.'
    :str\
        list_name__slte="${1}"\
        list_operation__slte="${2}"\
        list_assignment__slte\
        list_error__slte
    :List.die_unless "${list_name__slte}"
    :str.die_if_empty "${list_operation__slte}"\
        'Expected nonempty list operation.'
    
    # List assignment to be evaluated below.
    list_assignment__slte=${list_name__slte}'=( '${list_operation__slte}' )'
#   print "${list_name__slte}: ${list_name__slte[*]}\nstderr: ${stderr__slte}"

    # Attempt to set this list dynamically.
    {
        eval "${list_assignment__slte}"
    # If doing so fails...
    } :=stderr.silent :or {
        #FIXME: Unfortunately, an as-yet-undetermined version of zsh >= 5.0.5
        #has subtly broken parsing of global aliases embedded in process
        #substitutions. Specifically, global aliases following "}" delimiters in
        #such substitutions are erroneously parsed as syntactic errors rather than
        #expanded as expected. Until this is resolved, we defer to the manual
        #approach and avoid trailing global aliases in process substitutions.

        # Capture all output emitted by zsh on performing this assignment,
        # ignoring the expected failure.
        list_error__slte=$({ eval "${list_assignment__slte}" } 2>&1 || true)

        # If this assignment failed with output, this failure is assumed to be
        # a fatal error. In this case, throw an exception embedding this error.
        if { :str.is_nonempty ${list_error__slte} } {
            # If this error is prefixed by "zsh: ", remove this prefix.
            :Str.remove_prefix stderr__slte 'zsh: '
            :die 'List assignment "'${list_assignment__slte}'" invalid:'${ZY_ASCII_NEWLINE}${list_error__slte}
        }
        # Else, this failure is assumed to be the result of a non-fatal path
        # glob (e.g., due to the current user having insufficient permissions to
        # access subdirectories when recursive globbing). In this case, silently
        # ignore this failure.
    }
}

# ....................{ SETTERS ~ list                     }....................
#FIXME: Refactor to accept multiple source list names, implemented by simply
#appending all such source lists in the passed order.
#FIXME: Overly long example. Split!

:func.doc <<'/---'
:void :List.Set(:List target_list_name :List source_list_name)

Set the target list with the passed name to the source list with the passed name
(i.e., copy the latter into the former).

== Examples ==

.:List.Set()
==========================================
[source]
------------------------------------------
>>> :list on_venality on_richard_nixon; on_richard_nixon=(
...    "What we are looking at on all our TV sets is a man who finally, after"
...    "24 years of frenzied effort, became the President of the United States"
...    "with a personal salary of $200,000 a year and an unlimited expense"
...    "account including a fleet of private helicopters, jetliners, armored"
...    "cars, personal mansions and estates on both coasts and control over a"
...    "budget beyond the wildest dream of King Midas... and all the dumb"
...    "bastard can show us, after five years of total freedom to do anything"
...    "he wants with all this power, is a shattered national economy,"
...    "disastrous defeat in a war we could have ended four years ago on far"
...    "better terms than he finally came around to, and a hand-picked personal"
...    "staff put together through five years of screening, whose collective"
...    "criminal record will blow the minds of high-school American History"
...    "students for the next 100 years. Nixon's hand-picked Vice President is"
...    "about to be indicted for Extortion and Bribery; his former campaign"
...    "manager and his former Secretary of Commerce & personal fund-raiser"
...    "have already been indicted for Perjury, two of his ranking campaign"
...    "managers have already pleaded guilty to Obstruction of Justice, the"
...    "White House counsel is headed for prison on more felony counts than I"
...    "have room to list here, and before the trials are finished..." )
>>> :List.Set on_presidential_pardons on_richard_nixon
>>> :stdout.echo "${on_venality[1]}"
What we are looking at on all our TV sets is a man who finally, after
------------------------------------------
==========================================
/---
function :List.Set() {
    die_unless_args_2 'Expected one target list name and one source list name.'
    :str list_name_target__sltl="${1}" list_name_source__sltl="${2}"
    :List.die_unless "${list_name_target__sltl}" "${list_name_source__sltl}"

    # Copy such list.
    eval ${list_name_target__sltl}'=( "${'${list_name_source__sltl}'[@]}" )'
}


:func.doc <<'/---'
:void :List.Reversed(
    :List target_list_name :List source_list_name)

Set the target list with the passed name to the *reverse* of the source list
with the passed name (i.e., to all list items of the passed source list in the
reverse order).

== Examples ==

.:List.Reversed()
==========================================
[source]
------------------------------------------
>>> :list politizane politizane_reversed
>>> politizane=( wealth inequality in america )
>>> :List.Reversed politizane_reversed politizane
>>> :stdout.echo "${politizane_reversed}"
america in inequality wealth
------------------------------------------
==========================================
/---
function :List.Reversed() {
    die_unless_args_2 'Expected one target list name and one source list name.'
    :str list_name_target__sltlr="${1}" list_name_source__sltlr="${2}"
    :List.die_unless "${list_name_target__sltlr}" "${list_name_source__sltlr}"

    # Reverse such list. Dismantled, this is:
    #
    # * "@P", expanding the source list.
    # * "Oa", reversing the order of list expansion.
    eval ${list_name_target__sltlr}'=( "${(Oa@P)list_name_source__sltlr}" )'
}

# ....................{ SETTERS ~ list : set               }....................
:func.doc <<'/---'
:void :List.Difference(
    :List target_list_name
    :List source_left_list_name
    :List source_right_list_name
)

Difference the second and third passed lists into the first.

Formally, this function performs the asymmetric set difference
`target_list = source_left_list - source_right_list`.

== Examples ==

.:List.Difference()
==========================================
[source]
------------------------------------------
>>> list a
>>> list y; y=( slimy things did crawl with legs )
>>> list e; e=( upon the slimy sea )
>>> :List.Difference a y e
>>> :stdout.echo "${a[@]}"
things did crawl with legs
------------------------------------------
==========================================
/---
function :List.Difference() {
    die_unless_args_3\
        'Expected one target list name and two source list names.'
    :str\
        list_name_target__sltld="${1}"\
        list_name_left__sltld="${2}"\
        list_name_right__sltld="${3}"
    :List.die_unless\
        "${list_name_target__sltld}"\
        "${list_name_left__sltld}"\
        "${list_name_right__sltld}"

    # Difference these lists. Bless your pithy soul, zsh 5.x.x.
    eval ${list_name_target__sltld}'=(
        ${'${list_name_left__sltld}'[@]:|'${list_name_right__sltld}'} )'
}


:func.doc <<'/---'
:void :List.Intersection(
    :List target_list_name
    :List source_list_name
    +:List source_list_names
)

Set the passed target list to the intersection of the passed source lists, in
arbitrary order.

Specifically, this function sets this target list to the first source list and
for each additional source list, removes all items from the target list _not_ in
that source list. This intersection is symmetric and hence performed in
arbitrary order. At least two source lists must be passed.

== Examples ==

.:List.Intersection()
==========================================
[source]
------------------------------------------
>>> :list a
>>> :list y; y=( slimy things did crawl with legs )
>>> :list e; e=( upon the slimy sea )
>>> :list h; a=( and a thousand thousand slimy things )
>>> :List.Intersection a y e h
>>> print "${h[@]}"
slimy
------------------------------------------
==========================================
/---
function :List.Intersection() {
    # Validate sanity, popping the last such argument off as the
    # target list name. Hence, all remaining arguments are source list names.
    die_unless_args_3_or_more\
        'Expected one target list name and two or more source list names.'
    :str\
        list_name_target__sltli="${@[1]}"\
        list_name_source1__sltli="${@[2]}"\
        list_name_source2__sltli="${@[3]}"
    :List.die_unless\
        "${list_name_target__sltli}"\
        "${list_name_source1__sltli}"\
        "${list_name_source2__sltli}"
    :args.shift 3

    # Intersect the first two source lists into the target list.
    eval ${list_name_target__sltli}'=(
        ${'${list_name_source1__sltli}'[@]:*'${list_name_source2__sltli}'} )'

    # Intersect each remaining source list with the target list back into the
    # target list. Bless your extreme utility, zsh 5.x.x.
    :str list_name_source__sltli
    for  list_name_source__sltli ("${@}") {
        :List.die_unless "${list_name_source__sltli}"
        eval ${list_name_target__sltli}'=(
            ${'${list_name_source__sltli}'[@]:*'${list_name_target__sltli}'} )'
    }
}
