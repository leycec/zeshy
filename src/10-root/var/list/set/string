#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *string-based list setters* (i.e., functions converting string values to
list variables, typically by splitting such list into constituent substrings).
/---

# ....................{ SETTERS                            }....................
#FIXME: Rename to :list.set_to_string_split_on_string().
#FIXME: Arguably, not a terribly helpful quote when taken out of context.
#Contemplate replacement with a more insulated quote.

:func.document <<'/---'
:void :list.set_to_string_split_on_string(
    ^:list list_name, :string text, :string delimiter)

Split the passed string on the passed delimiter into the passed list. Such
delimiter may be of any length, including 0: e.g.,

.:list.set_to_string_split_on_string()
==========================================
[source]
------------------------------------------
>>> :string on_the_other_path=\
...    '"I was surrounded by all these people hanging on my every word. It was
...     intoxicating â€” especially for a loner like me," Quijada said. "For one
...     day, I got to play as an academic. I got to live this fantasy where I
...     took the other path in the garden. I got to see what it would have been
...     like if I had gone to graduate school and become a professional
...     linguist. The fates of the universe tore open a window to show me what
...     my life could have been. That night, I went back to my room, took a
...     shower, and burst into tears."'
>>> :list in_the_garden
>>> :list.set_to_string_split_on_string in_the_garden "${on_the_other_path}" ', '
>>> :string.output "${in_the_garden[-1]}"
and burst into tears."
------------------------------------------
==========================================
/---
function :list.set_to_string_split_on_string() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one list name, one string, and one separator string.'
    :string\
        token__sltssos\
        list_name__sltssos="${1}"\
        text__sltssos="${2}"\
        separator__sltssos="${3}"

    # If a parameter expansion token specific to such separator exists, split
    # such list with parameter expansion flag "(s...)".
    if { :set_char_to_string_expansion_token_if_found\
            token__sltssos "${separator__sltssos}" } {
        :list.set_to_string\
            "${list_name__sltssos}"\
            "${(e):-\${(s${token__sltssos}${separator__sltssos}${token__sltssos})text__sltssos\}}"  # quiet vim: "}"
    # Else, split such list by non-greedily matching each shortest substring of
    # such string preceding such separator and appending such substring to such
    # list. For efficiency, such logic is only a last-ditch fallback.
    } else {
        # Clear such list.
        :list.clear "${list_name__sltssos}"

        #FIXME: Avoid horrible subshells.

        # Split such string. For safety, escape all glob-reserved characters in
        # such separator.
        for_string_matches_glob_nongreedy_capturing_groups "${text__sltssos}"\
            (*)"$(escape_string "${separator__sltssos}")"\
            ${list_name__sltssos}'+="${match[1]}"'
    }
}

# ....................{ SETTERS ~ char                     }....................
#FIXME: Rename to :list.set_to_string_split_on_char().
:func.document <<'/---'
:void :set_list_to_string_split_on_char(
    ^:list list_name, :string text, :char separator1, ...)

Split the passed string on any of the passed characters into the passed list.
At least one such character must be passed. If two or more such characters are
passed, such string is split on each such character: e.g.,

.:set_list_to_string_split_on_char()
==========================================
[source]
------------------------------------------
>>> :string on_urbanity=\
...    "Shall I say, I have gone at dusk through narrow streets
...     And watched the smoke that rises from the pipes
...     Of lonely men in shirt-sleeves, leaning out of windows?...
...
...     I should have been a pair of ragged claws
...     Scuttling across the floors of silent seas."
>>> :list under_inanity
>>> :set_list_to_string_split_on_char under_inanity "${on_urbanity}" ',.'
>>> print_list under_inanity
1: Shall I say
2: I have gone at dusk through narrow streets
And watched the smoke that rises from the pipes
Of lonely men in shirt-sleevesleaning out of windows?
3: leaning out of windows?
4:
5:
6:
I should have been a pair of ragged claws
Scuttling across the floors of silent seas
------------------------------------------
==========================================
/---
function :set_list_to_string_split_on_char() {
    # Validate sanity.
    die_unless_args_3_or_more\
        'Expected one list name, one string, and one or more separating characters.'
    :string list_name_sltssoc="${1}" text_sltssoc="${2}"
    shift_args_2

    # Split such string by temporarily setting the internal field separator
    # (IFS) to such separator and then splitting on internal fields. There exist
    # numerous means of doing so, including passing read() such string on
    # standard input via here-string syntax as follows:
    #
    #     IFS="${separator__sltssoc1om}${separator__sltssoc1om}"\
    #         read -r -d '' -A "${list_name__sltssoc1om}" <<<"${text__sltssoc1om}"
    #
    # Dismantled, this approach is:
    #
    # * "IFS...", setting the internal field separator to such character.
    # * "-r", enabling raw mode, preventing read() from interpreting "\" at line
    #   ends as line continuations and "\" elsewhere as character escapes.
    # * "-d ''", preventing read() from halting until reading the entire string.
    #   By default, read() halts on reading a newline.
    # * "-A ...", writing all split substrings into such list.
    # * "<<< ...", passing such string on standard input as a "here document."
    #
    # While this does work, it's much more complex and slightly less efficient
    # (largely due to the redirection from standard input) than the following,
    # as well as failing to scale to two or more separating characters.
    #
    # Dynamically construct the appropriate ${IFS} from the passed characters.
    # To avoid overwriting the corresponding global, localize such global here.
    # To avoid treating whitespace characters in a "special manner", append each
    # separating character twice. (See "IFS" under "man zshparam" for further
    # details.)
    :string separator__sltssoc IFS
    for     separator__sltssoc ("${@}") {
        :die_unless_char "${separator__sltssoc}"
        IFS+="${separator__sltssoc}${separator__sltssoc}"
    }

    # Split such string into such list.
    :list.set_to_string "${list_name_sltssoc}" "${=text_sltssoc}"
}

#FIXME: Rename to :list.set_to_string_chars().
#FIXME: Expand example, as below. The original rests at:
#    http://www.poets.org/viewmedia.php/prmMID/15378

:func.document <<'/---'
:void set_list_to_string_characters(^:list list_name, :string text)

Set the passed list to all characters of the passed string. Since `zsh` supports
character indexing and slicing out of the box (e.g., `${text[42]}`, the 42nd
character of such string), this function is useful only where a list is
explicitly required: e.g.,

.set_list_to_string_characters()
==========================================
[source]
------------------------------------------
>>> :list fern_hill
>>> set_list_to_string_characters fern_hill "though I sang in my chains"
>>> ouput_string "${fern_hill[21,26]}"
chains
>>> join_list fern_hill
though I sang in my chains
------------------------------------------
==========================================
/---
function set_list_to_string_characters() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one string.'
    :string list_name__sltssoc="${1}"

    # Split such string on the empty string. Paradoxical, yet true.
    :list.set_to_string "${list_name__sltssoc}" "${(s::)2}"
}

# ....................{ SETTERS ~ word                     }....................
#FIXME: Rename to :list.set_to_string_words().
:func.document <<'/---'
:void set_list_to_string_words(^:string list_name, :string text)

Set the passed list to all shell words of the passed string. Since `zsh`
supports shell word indexing and slicing out of the box (e.g., `${text[(w)42]}`,
the 42nd shell word of such string), this function is useful only where a list
is explicitly required: e.g.,

.set_list_to_string_words()
==========================================
[source]
------------------------------------------
>>> :list on_heydays
>>> :string on_youth=\
...     "Now as I was young and easy under the apple boughs
...      About the lilting house and happy as the grass was green,
...           The night above the dingle starry,
...                Time let me hail and climb
...           Golden in the heydays of his eyes,
...      And honoured among wagons I was prince of the apple towns
...      And once below a time I lordly had the trees and leaves
...                Trail with daisies and barley
...           Down the rivers of the windfall light."
>>> set_list_to_string_words on_heydays "${on_youth}"
>>> :string.output "${on_heydays[1]}"
Now
>>> :string.output "${on_heydays[-1]}"
light.
------------------------------------------
==========================================
/---
function set_list_to_string_words() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one string.'
    :string list_name__sltsw="${1}"

    # Split with parameter expansion flag "(z)".
    :list.set_to_string "${list_name__sltsw}" "${(z)2}"
}

#FIXME: Rename to :list.set_to_stdin_words().
:func.document <<'/---'
:void set_list_to_stdin_words[
    args = (^:list list_name),
    stdin = (:string text)]

Set the passed list to all shell words of standard input to the current context.
Since this function blocks until receiving *EOF* (end of file) from such input,
avoid this function unless such input is known to succinctly terminate: e.g.,

.set_list_to_stdin_words()
==========================================
[source]
------------------------------------------
>>> :list on_irrationality
>>> :string on_rationality=\
...    "So at the present time I seem to be thinking rationally again in the
...     style that is characteristic of scientists. However this is not entirely
...     a matter of joy as if someone returned from physical disability to good
...     physical health. One aspect of this is that rationality of thought
...     imposes a limit on a person's concept of his relation to the cosmos. For
...     example, a non-Zoroastrian could think of Zarathustra as simply a madman
...     who led millions of naive followers to adopt a cult of ritual fire
...     worship. But without his \"madness\" Zarathustra would necessarily have
...     been only another of the millions or billions of human individuals who
...     have lived and then been forgotten."
>>> set_list_to_stdin_words on_irrationality <<<"${on_rationality}"
>>> :string.output "${on_irrationality[1]}"
So
>>> :string.output "${on_irrationality[-1]}"
forgotten.
------------------------------------------
==========================================
/---
function set_list_to_stdin_words() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :string list_name__sltsw="${1}"

    # Split such string. To avoid string copies, inline such implementation.
    # See set_list_to_string_words() for further details.
    :list.set_to_string "${list_name__sltsw}" "${(z)$(:stdin.get)}"
}

# ....................{ SETTERS ~ line                     }....................
#FIXME: Rename to :list.set_to_string_lines().
:func.document <<'/---'
:void set_list_to_string_lines(^:list list_name, :string text)

Split the passed string on newlines into the passed list.
/---
function set_list_to_string_lines() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one string.'
    :string list_name__sltsl="${1}"

    # Split such string. To avoid string copies, inline such implementation.
    # Such expansion *MUST* be both double-quoted and explicitly expanded as a
    # list with parameter expansion flag "@". Failing that, this function will
    # behave as expected for all lists except those containing empty items. See
    # :set_int_to_list_size() for further details.
    :list.set_to_string "${list_name__sltsl}" "${(@f)2}"
}

#FIXME: In lieu of unit tests...
#function samo() {
#    string walden='
#When formerly I was looking about to see what I could do for a living,
#
#some sad experience in conforming to the wishes of friends being fresh in my mind
#
#to tax my ingenuity, I thought often and seriously of picking huckleberries; that
#
#surely I could do, and its small profits might sufficeâ€”for my greatest skill
#
#has been to want but littleâ€”so little capital it required, so little
#
#distraction from my wonted moods, I foolishly thought.'
#    list lines
#    set_list_to_string_lines lines "${walden}"
#    :string.output "number of lines: $(get_list_size lines)"
#    print_list lines
#}

# --------------------( WASTELANDS                         )--------------------
#FUXME: All inefficient use of "eval ${list_name__sltsw}'=(...)"-style
#statements below should be supplanted by simple calls to existing function
#:list.set_to_string(). (Substantially simpler; somewhat embarrassing.)

    # Close standard input.
    # close_stdin

#FUXME: Refactor to accept variadic arguments.
# >>> join_list_on_string on_heydays ' '
# Now as I was young and easy under the apple boughs About the lilting house and happy as the grass was green, The night above the dingle starry, Time let me hail and climb Golden in the heydays of his eyes, And honoured among wagons I was prince of the apple towns And once below a time I lordly had the trees and leaves Trail with daisies and barley Down the rivers of the windfall light.
