#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*List getters* (i.e., functions getting list items and indices).
/---

#FIXME: Convert all such getters to setters. There should be *NO* such getters,
#ideally.

# ....................{ GETTERS ~ item                     }....................
:func.doc <<'/---'
:str get_list_item(:List list_name :int index)

Item the passed (possibly negative) 1-based index in the list with the passed
name if this item exists *or* throw an exception otherwise (i.e., if no item
with this index exists).

== Examples ==

.get_list_item()
==========================================
[source]
------------------------------------------
>>> :list on_lived_meaning; on_lived_meaning=(
...     "Creating a life that reflects your values and satisfies your soul is a"
...     "rare achievement. In a culture that relentlessly promotes avarice and"
...     "excess as the good life, a person happy doing his own work is usually"
...     "considered an eccentric, if not a subversive. Ambition is only"
...     "understood if it's to rise to the top of some imaginary ladder of"
...     "success. Someone who takes an undemanding job because it affords him"
...     "the time to pursue other interests and activities is considered a"
...     "flake. A person who abandons a career in order to stay home and raise"
...     "children is considered not to be living up to his potential – as if a"
...     "job title and salary are the sole measure of human worth. You'll be"
...     "told in a hundred ways, some subtle and some not, to keep climbing,"
...     "and never be satisfied with where you are, who you are, and what"
...     "you're doing. There are a million ways to sell yourself out, and I"
...     "guarantee you'll hear about them. To invent your own life's meaning is"
...     "not easy, but it's still allowed, and I think you'll be happier for"
...     "the trouble."
... )
>>> get_list_item on_lived_meaning -4
you're doing. There are a million ways to sell yourself out, and I
------------------------------------------
==========================================
/---
function get_list_item() {
    die_unless_args_2 'Expected one list name and one list index.'
    :str list_name__gli="${1}" list_index__gli="${2}"
    die_unless_list_index "${list_name__gli}" "${list_index__gli}"

    # Return this item.
    :stdout.echo "${${(@P)list_name__gli}[${list_index__gli}]}"
}


:func.doc <<'/---'
:str get_list_head(:List list_name)

First item of the list with the passed name if this list is nonempty _or_ throw
an exception otherwise (i.e., if this list is empty).

== Examples ==

.get_list_head()
==========================================
[source]
------------------------------------------
>>> :list on_two_party_systems; on_two_party_systems=(
...    'I'll show you politics in America. Here it is, right here.'
...    '"I think the puppet on the right shares my beliefs."'
...    '"I think the puppet on the left is more to my liking."'
...    '"Hey, wait a minute, there's one guy holding out both puppets!"'
...    '"Shut up! Go back to bed, America. Your government is in control.'
...    'Here's "Love Connection." Watch this and get fat and stupid. By the'
...    'way, keep drinking beer."'
... )
>>> get_list_head on_two_party_systems
I'll show you politics in America. Here it is, right here.
------------------------------------------
==========================================
/---
function get_list_head() {
    die_unless_arg 'Expected one list name.'
    :str list_name__glh="${1}"
    die_unless_list_nonempty "${list_name__glh}"

    # Return this item.
    :stdout.echo "${${(@P)list_name__glh}[1]}"
}


:func.doc <<'/---'
:str get_list_tail(:List list_name)

Last item of the list with the passed name if this list is nonempty _or_ throw
an exception otherwise (i.e., if this list is empty).

== Examples ==

.get_list_tail()
==========================================
[source]
------------------------------------------
>>> :list on_american_culture; on_american_culture=(
...     "If you want to understand a society, take a good look at the drugs it"
...     "uses. And what can this tell you about American culture? Well, look at"
...     "the drugs we use. Except for pharmaceutical poison, there are"
...     "essentially only two drugs that Western civilization tolerates:"
...     "caffeine from Monday to Friday to energize you enough to make you a"
...     "productive member of society, and alcohol from Friday to Monday to"
...     "keep you too stupid to figure out the prison that you are living in."
... )
>>> get_list_tail on_american_culture
keep you too stupid to figure out the prison that you are living in.
------------------------------------------
==========================================
/---
function get_list_tail() {
    die_unless_arg 'Expected one list name.'
    :str list_name__glt="${1}"
    die_unless_list_nonempty "${list_name__glt}"

    # Return this item.
    :stdout.echo "${${(@P)list_name__glt}[-1]}"
}

# ....................{ GETTERS ~ index                    }....................
#FIXME: Fix example.
:func.doc <<'/---'
[stdout=:int status=:bool] get_list_index_first_equaling_item_if_found(
    :List list_name :str item)

1-based index of the first item in the list with the passed name equal to the
passed string if at least one such item exists _or_ report failure otherwise
(i.e., if no such item exists).

== Examples ==

.get_list_index_first_equaling_item_if_found()
==========================================
[source]
------------------------------------------
>>> :list on_academia; on_academia=(
...    "There are but two ways of forming an opinion on science. One is the"
...    "scientific method; the other, the scholastic. One can judge from"
...    "experiment, or one can blindly accept authority. To the scientific"
...    "mind, experimental proof is all important and theory is merely a"
...    "convenience in description, to be junked when it no longer fits. To"
...    "the academic mind, authority is everything and facts are junked when"
...    "they do not fit theory laid down by authority. It is this point of view"
...    "– academic minds clinging like oysters to disproved theories – that has"
...    "blocked every advance of knowledge in history."
... )
>>> get_list_index_first_equaling_item_if_found\
...     on_academia "blocked every advance of knowledge in history."
9
------------------------------------------
==========================================
/---
function get_list_index_first_equaling_item_if_found() {
    die_unless_args_2 'Expected one list name and one search string.'
    :str list_name__gliefif="${1}" list_item__gliefif="${2}"
    :int list_index__gliefif list_size__gliefif
    :List.die_unless "${list_name__gliefif}"

    # 1-based index of the first matching item. Dismantled, this is:
    #
    # * '@P', expanding to the passed list.
    # * 'i', expanding to the index of the first matching item.
    # * 'e', interpreting such item as a string literal rather than glob.
    list_index__gliefif="${${(@P)list_name__gliefif}[(ie)${list_item__gliefif}]}"

    # Size of this list.
    :List.Size "${list_name__gliefif}" list_size__gliefif

    # Return this index if found *OR* report failure otherwise.
    (( list_index__gliefif <= list_size__gliefif )) :and
        :stdout.echo "${list_index__gliefif}"
}
