#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *list removers* (i.e., functions removing list items).
/---

#FIXME: Since both "set -A ${list_name} ..." and ": ${(P)list_item::=...}"
#suffice to modify arbitrary lists, eval() statements *ARE* not required.
#Excise all such statements below.

# ....................{ CLEARERS                           }....................
:func_ ':void :list.clear(:string:list list_name1, ...)' :func{
    # Validate sanity.
    die_unless_args 'Expected one or more list names.'

    # If only one list was passed, clear such list without iteration.
    if { is_arg } {
        :var.die_unless_type_list "${1}"
        set -A          "${1}"
    # Else, clear all such lists.
    } else {
        :string list_name__cl
        for     list_name__cl ("${@}") {
            :var.die_unless_type_list "${list_name__cl}"
            set -A "${list_name__cl}"
        }
    }
}:func <<'/---'
Clear all passed lists (i.e., remove all items from such lists): e.g.,

.:list.clear()
==========================================
[source]
------------------------------------------
>>> :list on_plenitude; on_plenitude=(
...    "If we are to prevent megatechnics from further controlling and"
...    "deforming every aspect of human culture, we shall be able to do so only"
...    "with the aid of a radically different model derived directly, not from"
...    "machines, but from living organisms and organic complexes (ecosystems)."
...    "What can be known about life only through the process of living — and"
...    "so is part of even the humblest organisms — must be added to all the"
...    "other aspects that can be observed, abstracted, measured... Once an"
...    "organic world picture is in the ascendant, the working aim of an"
...    "economy of plenitude will be not to feed more human functions into the"
...    "machine, but to develop further man's incalculable potentialities for"
...    "self-actualization and self-transendence, taking back into himself"
...    "deliberately many of the activities he has too supinely surrendered"
...    "into the mechanical system." )
>>> get_list_size on_plenitude
13
>>> :list.clear    on_plenitude
>>> get_list_size on_plenitude
0
------------------------------------------
==========================================
/---

# ....................{ REMOVERS                           }....................
#FIXME: Rename to :remove_list_items_equalling().
:func.document <<'/---'
void remove_list_items(string list_name, string item)

Remove all items equal to the passed string from the passed list if at least one
such item exists or return silently otherwise. This function succeeds regardless
of whether any items were actually removed. To test or guarantee such
constraint, consider calling is_list_item() or die_unless_list_item()
beforehand: e.g.,

.remove_list_items()
==========================================
[source]
------------------------------------------
>>> :list on_police_states; on_police_states=(
...    "Work makes a mockery of freedom. The official line is that we all have"
...    "rights and live in a democracy. Other unfortunates who aren't free like"
...    "we are have to live in police states. These victims obey orders or-"
...    "else, no matter how arbitrary. The authorities keep them under regular"
...    "surveillance. State bureaucrats control even the smaller details of"
...    "everyday life. The officials who push them around are answerable only"
...    "to higher-ups, public or private. Either way, dissent and disobedience"
...    "are punished. Informers report regularly to the authorities. All this"
...    "is supposed to be a very bad thing. And so it is, although it is"
...    "nothing but a description of the modern workplace." )
>>> remove_list_items on_police_states\
...     "nothing but a description of the modern workplace."
>>> :string.output "${on_police_states[-1]}"
is supposed to be a very bad thing. And so it is, although it is
------------------------------------------
==========================================
/---
function remove_list_items() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one string to be removed.'
    :string list_name__rls="${1}" list_item__rls="${2}"
    :var.die_unless_type_list "${list_name__rls}"

    # Remove such items from such list. Since parameter expansion operator ":#"
    # expects globs rather than string literals, quote-protect glob-reserved
    # characters in such item to force its interpretanion as a literal instead.
    # See set_list_to_list_items_not_matching_glob() for further details.
    eval ${list_name__rls}'=(
        "${'${list_name__rls}'[@]:#$(escape_string "${list_item__rls}")}" )'
}

#FIXME: Rename to :remove_list_item_first_equalling(). (This corresponds to the
#nomenclature :remove_list_item_first_matching_glob().)
:func.document <<'/---'
void remove_list_item_first(string list_name, string item)

Remove the first item equal to the passed string from the passed list if such
item exists or return silently otherwise. See remove_list_items() for further
details: e.g.,

.remove_list_item_first()
==========================================
[source]
------------------------------------------
>>> :list on_psychology; on_psychology=(
...    "Take sex away from people. Make it forbidden, evil, limit it to"
...    "ritualistic breeding. Force it to back up into suppressed sadism. Then"
...    "hand the people a scapegoat to hate. Let them kill a scapegoat"
...    "occasionally for cathartic, release. The mechanism is ages old. Tyrants"
...    "used it centuries before the word \"psychology\" was ever invented. It"
...    "works, too. Look at yourself." )
>>> remove_list_item_first on_psychology\
...     "Take sex away from people. Make it forbidden, evil, limit it to"
>>> :string.output "${on_psychology[1]}"
ritualistic breeding. Force it to back up into suppressed sadism. Then
------------------------------------------
==========================================
/---
function remove_list_item_first() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one string to be removed.'
    :string list_name__rli="${1}" list_item__rli="${2}"
    :int list_index__rli
    :var.die_unless_type_list "${list_name__rli}"

    # Remove such item from such list. Since parameter expansion operator ":#"
    # removes all such items rather than merely the first, do as follows:
    #
    # * Find the index of such item if such item exists.
    # * Copy such list to itself, excluding such index.
    #
    # While somewhat cumbersome, this appears the most efficient implementation.
    if { list_index__rli="$(get_list_index_first_equaling_item_if_found\
        "${list_name__rli}" "${list_item__rli}")" } {
        # If such index is 0, zsh correctly expands the list slice "${...[1,0]}"
        # to the empty string without complaint -- which is rather nice of it.
        # Ditto if such index exceeds such list length.
        eval ${list_name__rli}'=(
            "${'${list_name__rli}'[1,'$(( ${list_index__rli} - 1 ))']}"
            "${'${list_name__rli}'['$(( ${list_index__rli} + 1 ))',-1]}"
        )'
    }
}

# ....................{ REMOVERS ~ stack                   }....................
#FIXME: Fantastic example, but overlong. Let's split!

:func.document <<'/---'
void {remove_list_head, shift_list}(string list_name)

Remove the first item from the passed list. If such list is empty, an exception
is thrown: e.g.,

.remove_list_head()
==========================================
[source]
------------------------------------------
>>> :list on_hypocrisy; on_hypocrisy=(
...    "The liberals and conservatives and libertarians who lament"
...    "totalitarianism are phonies and hypocrites. There is more freedom in"
...    "any moderately de-Stalinized dictatorship than there is in the ordinary"
...    "American workplace. You find the same sort of hierarchy and discipline"
...    "in an office or factory as you do in a prison or monastery. In fact, as"
...    "Foucault and others have shown, prisons and factories came in at about"
...    "the same time, and their operators consciously borrowed from each"
...    "other's control techniques. A worker is a part time slave. The boss"
...    "says when to show up, when to leave, and what to do in the meantime. He"
...    "tells you how much work to do and how fast. He is free to carry his"
...    "control to humiliating extremes, regulating, if he feels like it, the"
...    "clothes you wear or how often you go to the bathroom. With a few"
...    "exceptions he can fire you for any reason, or no reason. He has you"
...    "spied on by snitches and supervisors, he amasses a dossier on every"
...    "employee. Talking back is called \"insubordination,\" just as if a"
...    "worker is a naughty child, and it not only gets you fired, it"
...    "disqualifies you for unemployment compensation. Without necessarily"
...    "endorsing it for them either, it is noteworthy that children at home"
...    "and in school receive much the same treatment, justified in their case"
...    "by their supposed immaturity. What does this say about their parents"
...    "and teachers who work?" )
>>> remove_list_head on_hypocrisy
>>> :string.output "${on_hypocrisy[1]}"
totalitarianism are phonies and hypocrites. There is more freedom in
>>> shift_list on_hypocrisy
>>> :string.output "${on_hypocrisy[1]}"
any moderately deStalinized dictatorship than there is in the ordinary
------------------------------------------
==========================================
/---
function remove_list_head shift_list() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :string list_name__sl="${1}"
    die_unless_list_nonempty "${list_name__sl}"

    # Shift such list.
    eval ${list_name__sl}'[1]=()'
}

#FIXME: Ditto. Split awesome example up a bit, please.
:func.document <<'/---'
void {remove_list_tail, pop_list}(string list_name)

Remove the last item from the passed list. If such list is empty, an exception
is thrown: e.g.,

.pop_list()
==========================================
[source]
------------------------------------------
>>> :list on_cretinization; on_cretinization=(
...    "The demeaning system of domination I've described [i.e., work] rules"
...    "over half the waking hours of a majority of women and the vast majority"
...    "of men for decades, for most of their lifespans. For certain purposes"
...    "it's not too misleading to call our system democracy or capitalism or –"
...    "better still – industrialism, but its real names are factory fascism"
...    "and office oligarchy. Anybody who says these people are \"free\" is"
...    "lying or stupid. You are what you do. If you do boring, stupid"
...    "monotonous work, chances are you'll end up boring, stupid and"
...    "monotonous. Work is a much better explanation for the creeping"
...    "cretinization all around us than even such significant moronizing"
...    "mechanisms as television and education. People who are regimented all"
...    "their lives, handed off to work from school and bracketed by the family"
...    "in the beginning and the nursing home at the end, are habituated to"
...    "heirarchy and psychologically enslaved. Their aptitude for autonomy is"
...    "so atrophied that their fear of freedom is among their few rationally"
...    "grounded phobias. Their obedience training at work carries over into"
...    "the families they start, thus reproducing the system in more ways than"
...    "one, and into politics, culture and everything else. Once you drain the"
...    "vitality from people at work, they'll likely submit to heirarchy and"
...    "expertise in everything. They're used to it." )
>>> remove_list_tail on_cretinization
>>> :string.output "${on_cretinization[-1]}"
vitality from people at work, they'll likely submit to heirarchy and
>>> shift_list on_cretinization
>>> :string.output "${on_cretinization[-1]}"
one, and into politics, culture and everything else. Once you drain the
------------------------------------------
==========================================
/---
function remove_list_head pop_list() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :string list_name__pl="${1}"
    die_unless_list_nonempty "${list_name__pl}"

    # Pop such list.
    eval ${list_name__pl}'[-1]=()'
}

# --------------------( WASTELANDS                         )--------------------
    # eval ${list_name__cl}'=()'

#:func.document <<'/---'
#void remove_list_items(string list_name, string item)
#
#Remove the first item equal to the passed string from the passed list if such
#such item exists in such list or throw an exception otherwise: e.g.,
#
#.remove_list_items()
#==========================================
#[source]
#------------------------------------------
#>>> 
#------------------------------------------
#==========================================
#/---
#function remove_list_items() {
#}

#:func.document <<'/---'
#void remove_list_items_silently(string list_name, string item)
#
#Remove the first item equal to the passed string from the passed list if such
#such item exists in such list or return silently otherwise: e.g.,
#
#.remove_list_items_silently()
#==========================================
#[source]
#------------------------------------------
#>>> 
#------------------------------------------
#==========================================
#/---
#function remove_list_items_silently() {
#    remove_list_items_if_found "${@}" or ignore_failure
#}

#   list_item__rliif="$(escape_string "${list_item__rliif}")"
