#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *list joiners* (i.e., functions reducing lists to strings by joining list
items together into a composite string).

== See Also ==

* @{variable/string/message}, declaring additional list joiners.
/---

# ....................{ JOINERS                            }....................
#FIXME: Refactor to :list.join_to_string().

:func.document <<'/---'
string join_list(string list_name)

Concatenate all elements of the passed list without delimitation. Equivalently,
delimit all elements of such list with the empty string: e.g.,

.join_list()
==========================================
[source]
------------------------------------------
>>> :list on_forerunners; on_forerunners=(
...    "You are your own forerunner," "and the towers you have builded are but
...     the foundation of your giant" "-self. And that self too shall be a
...     foundation. And I too am my"  "own forerunner, for the long shadow
...     stretching before me at"      "sunrise shall gather under my feet at
...     the noon hour. Yet another"   "sunrise shall lay another shadow before
...     me, and that also shall be"   "gathered at another noon. Always have we
...     been our own forerunners,"    "and always shall we be. And all that we
...     have gathered and shall"      "gather shall be but seeds for fields yet
...     unploughed. We are the"       "fields and the ploughmen, the gatherers
...     and the gathered." )
>>> get_string_line "$(join_list on_forerunners)" 1
You are your own forerunner,and the towers you have builded are but
------------------------------------------
==========================================
/---
function join_list() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :string list_name__jl="${1}"
    :var.die_unless_type_list "${list_name__jl}"

    #FIXME: Surely this can be combined into a single command, yes? For example:
    #   IFS= :string.output "${(P)list_name__jl}"

    # See concatenate_strings() for further details.
    :string IFS=
    :string.output "${(P)list_name__jl}"
}

#FIXME: Refactor to :list.join_to_string_on_string().
#FIXME: Create a new :list.join_to_string_on_char() as well, probably deferring
#to the more general :list.join_to_string_on_string().

:func.document <<'/---'
string join_list_on_string(string list_name, string separator)

Join all elements of the passed list with the passed string, thus converting such
list to a string internally delimited by such string: e.g.,

.join_list_on_string()
==========================================
[source]
------------------------------------------
>>> :list on_love; on_love=(
...    "Like sheaves of corn he gathers you unto himself."
...    "He threshes you to make you naked."
...    "He sifts you to free you from your husks."
...    "He grinds you to whiteness."
...    "He kneads you until you are pliant;"
...    "And then he assigns you to his sacred fire,"
...    "that you may become sacred bread for God's sacred feast."
...    "All these things shall love do unto you"
...    "that you may know the secrets of your heart,"
...    "and in that knowledge become a fragment of Life's heart."
...    "But if in your fear you would seek only
...    "love's peace and love's pleasure,"
...    "Then it is better for you that you cover your nakedness"
...    "and pass out of love's threshing-floor,"
...    "Into the seasonless world where you shall laugh,"
...    "but not all of your laughter, and weep,"
...    "but not all of your tears." )
>>> get_string_line "$(join_list_on_string on_love "${ZESHY_ASCII_NEWLINE}")" 1
Like sheaves of corn he gathers you unto himself.
------------------------------------------
==========================================
/---
function join_list_on_string() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one separator.'
    :string list_name__jlos="${1}" separator__jlos="${2}"
    :char token__jlos
    :var.die_unless_type_list "${list_name__jlos}"

    # If a parameter expansion token specific to such separator exists, join
    # such list with parameter expansion flag "(j...)".
    if { :set_char_to_string_expansion_token_if_found\
        token__jlos "${separator__jlos}" } {
        eval "return_string\
            \"\${(j${token__jlos}${separator__jlos}${token__jlos})${list_name__jlos}}\""
    #FIXME: Google us up a last-ditch alternative.
    # Else, throw an exception. While difficult to concieve a real-world join
    # separator containing all possible tokens, it certainly remains possible.
    } else {
        :die "separator \"${separator__jlos}\" contains all possible paramater expansion tokens"
    }
}

# ....................{ JOINERS ~ newline                  }....................
#FIXME: Refactor to :list.join_string_on_newline().
#FIXME: Rename to :list.join_items_in_range_to_string_on_newline() and create a
#newer, much simpler and more efficient :list.join_string_on_newline()
#hard-coding such indices to "1" and "-1". die_unless_list_range() is a
#shockingly inefficient function -- unavoidably, of course, but there you are.

:func.document <<'/---'
string join_list_on_newline(string list_name)

Join all elements of the passed list on newline, thus converting such list to a
newline-delimited string: e.g.,

.join_list_on_newline()
==========================================
[source]
------------------------------------------
>>> list on_children; on_children=(
...    "Your children are not your children."
...    "They are the sons and daughters of Life's longing for itself."
...    "They come through you but not from you,"
...    "And though they are with you yet they belong not to you."
...    "You may give them your love but not your thoughts,"
...    "For they have their own thoughts."
...    "You may house their bodies but not their souls,"
...    "For their souls dwell in the house of tomorrow,"
...    "which you cannot visit,"
...    "not even in your dreams."
...    "You may strive to be like them,"
...    "but seek not to make them like you."
...    "For life goes not backward nor tarries with yesterday."
...    "You are the bows from which"
...    "your children as living arrows are sent forth." )
>>> get_string_line "$(join_list_on_newline on_children)" 1
Your children are not your children.
------------------------------------------
==========================================
/---
function join_list_on_newline() {
    # Validate sanity. For efficiency, do *NOT* simply defer to
    # join_list_elements_in_range_on_newline().
    die_unless_arg 'Expected one list name.'
    string list_name__jlon="${1}"
    :var.die_unless_type_list "${list_name__jlon}"

    # Join such list with print() rather than join_list_on_string(), as the
    # former does so more safely and efficiently.
    #
    # Do *NOT* double quote such expansion, as doing so erroneously joins such
    # list on spaces rather than newlines.
    print -lr -- ${${(@P)list_name__jlon}[1,-1]}
}

#FIXME: Add examples.
:func.document <<'/---'
string join_list_elements_in_range_on_newline(
    string list_name, integer start_index, integer end_index)

Join all elements of the passed list between the passed (possibly negative)
inclusive start and end indices on newline, thus converting the desired subset
of such list to a newline-delimited string.
/---
function join_list_elements_in_range_on_newline() {
    # Validate sanity.
    die_unless_args_1_to_3\
        'Expected one list name and optional start and end indices.'
    string\
        list_name__jlon="${1}"\
        index_start__jlon="${2-1}"\
        index_end__jlon="${3--1}"
    die_unless_list_range\
        "${list_name__jlon}"\
        "${index_start__jlon}"\
        "${index_end__jlon}"

    # Join such list with print() rather than join_list_on_string(), as the
    # former does so more safely and efficiently.
    #
    # Do *NOT* double quote such expansion, as doing so erroneously joins such
    # list on spaces rather than newlines.
    print -lr --\
        ${${(@P)list_name__jlon}[${index_start__jlon},${index_end__jlon}]}
}

#FIXME: In lieu of unit tests...
#function joii() {
#    list on_children; on_children=( "Your children" "are not" "your children." )
#    join_list_on_newline on_children
#    join_list_elements_in_range_on_newline on_children -3 -1
#}

# ....................{ JOINERS ~ column                   }....................
#FIXME: Add examples.
#FIXME: Define convert_list_to_string_columns_horizontal() with identical
#implementation except also passing "-a" to the print() call.
:func.document <<'/---'
string join_list_into_column_count_vertical(string list_name, integer column_count)

Convert the passed list to a string *columnated vertically* (i.e., assigning the
first list element to the first row and column, the second list element to the
second row and first column, and so on) into the passed number of columns.
/---
function join_list_into_column_count_vertical() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one column count.'
    string list_name__cltscv="${1}" column_count__cltscv="${2}"
    :var.die_unless_type_list "${list_name__cltscv}"
    :int.die_unless_positive "${column_count__cltscv}"

    #FIXME: Does this transparently handle embedded ANSI escape sequences?

    # Convert such list.
    print -r -C "${column_count__cltscv}" -- "${(@P)list_name__cltscv}"
}

# --------------------( WASTELANDS                         )--------------------
#* join_list_on_string_nonlast_and_string_last:().
#* join_list_on_string_nonlast_and_string_last_if_size_ge_2_or_last:().
#* join_list_on_string_nonlast_and_string_last_depending_on_list_size().
#(defaulting to the first and last such elements) 
#FUXME: Reduce to a simple alias, for simplicity.
    # If the passed separator is a colon, delimit such separator by periods.
    # Delimited, this is:
    #
    # * "j.:.", joining on colons.
    # * "@P", expanding to the list with the passed name.
#   if is "${separator__jlos}" == ':' si {
#       return_string "${(j.:.@P)list_name__jlos}"
    # Else, delimit such separator by colons. Since zsh appears to
    # expand no parameters embedded in parameter expansion flags (e.g.,
    # "print ${(j:${separator}:)@}", joining list elements with the raw string
    # "${separator}" rather than the expansion of such parameter), wrap the
    # desired expression in an "eval" to force such expansion.
#   } else {
#       eval "return_string \"\${(j:${separator__jlos}:)${list_name__jlos}}\""
#   }
#Get a string suffixing each element except the last of the passed list with
#the passed delimiter. The delimiter may be of any length: e.g.,

#. Negative indices 
#If no indices are passed, all list elements are printed; if one
#index is passed, only that index is printed. Negative indices are offset against
#the last index
#FUXME: Rename to join_list_on_newline(). Actually, that function already
#exists! But this implementation is far more efficient. Hence, replace that with
#this and rename all calls to this to that. *sigh*
#FUXME: Rename to join_list_with_newline().
#declare_function '
#string join_list_on_newline(string list_name)
#
#Get a string suffixing each element except the last of the passed list with
#a newline character: e.g.,
#
#    >>> list banks; banks=( use of weapons )
#    >>> join_list_on_newline banks
#    use
#    of
#    weapons
#'
#function join_list_on_newline() {
#    die_unless_arg 'expected one list name'
#    join_list_on_string "${@}" "${ZESHY_ASCII_NEWLINE}"
#}

#FUXME: How about join_list_on_string(), instead?
#FUXME: Rename "list_elements" to "list_entries" everywhere. The latter gives
#more Google hits and is more concise. Double win! Actually, perhaps get_*()-
#style names wouldn't be more appropriate? Consider:
# string get_list_entries_joined_undelimited
#Ah, no; much too much of a mouthful. Good as is.
#FUXME: Actually, just drop the "_elements" everywhere. Excessive; unneeded. And
#reduce "with" to "on". That gives us final functions resembling:
#   join_list_on_string()

#FUXME: We should probably just centralize split and join functions into a new
#component: say, "type/variable/list_and_string".
# See "string/string" for corresponding split_*() functions.

#FUXME: Rename to get_list_as_restorable_string() or
#get_restorable_string_from_list(). Perhaps 
# ....................{ JOINERS ~ lines                    }....................
#FUXME: Trivial. Delete?
# string join_list_to_lines(string list_name)
#
# Join the list with the passed name into a newline-delimited string: e.g.,
#
#     >>> list grok; grok=( "Stranger in" "a" "Strange Land" )
#     >>> join_list_to_lines grok
#     Stranger in
#     a
#     Strange Land
#function join_list_to_lines() {
#   die_unless_arg 'expected one list name'
#   join_list_on_string "${1}" '\n'
#

#FUXME: The "_to_string" is redundant and renders function names cumbersome and
#unreadable. Replace with "_elements", which *isn't* redundant (e.g., renaming
#join_list() to
#join_list()).
#           "${(@P)__list_sans_last_element__}"\

#FUXME: Unconvinced we still want this.
# void die_unless_map_or_list(
#   string variable_name, string error_message = 'not a map or list')
#
# Die unless the variable with the passed name is a map or list.
#die_unless_map_or_list() {
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    is_map_or_list "${1}" or :die "${2:-\"${1}\" not a declared map or list}"
#}

#FUXME: Unconvinced we still want this.
# boolean is_map_or_list(string variable_name)
#
# Return true if the variable with the passed name is a map or list.
#is_map_or_list() {
#    die_unless_arg 'expected one variable name'
#    is $(get_type "${1}") == (list|array|association)* si
#}

# void die_unless_list_nonempty(
#   string variable_name, string error_message = 'not a list')
#
# A synonym of die_unless_list_nonempty().
#die_unless_list_nonempty() {
#    die_unless_list_nonempty "${@}"
#}

    # If more than two list elements were passed, join such elements and prefix
    # the last such element.
#   if is_args_3_or_more; then
#       list munged; munged=( "${@[1,-2]}" "${__last_delimiter__} ${@[-1]}" )
#       join_list_on_stringmunged ', '
    # If only two list elements were passed, print the first element, the last
    # element prefix, and the third element.
#   elif is_args_2
#   then :string.output "${1} ${last_element_prefix} ${2}"
    # If only one list element was passed, print that element as is.
#   else :string.output "${1}"
#   fi

#FUXME: Actually, we no longer require list elements as positional arguments.
#Revert to a much more sensible list variable style, as follows:
#
# void join_list_on_different_last_delimiter(
#   string list_name,
#   string non_last_delimiter = ', ',
#   string last_delimiter = ', and ')
#
#Sweet. That's sufficiently generalized that we should be able to rename such
#function to join_list_on_different_last_delimiter(). More explicit
#is much better. (I mean, what does "legible" really mean, anyway?)
#
#Actually, the name's a bit silly. Let's just incorporate such functionality
#into joint_list_to_string(), yes? Though, I wonder if that'd just confuse
#things even more. Perhaps this is sensible, after all.
#
# Join all passed strings except the first into a comma-delimited string,
# prefixing the last such string with the first passed string. Unlike most Zeshy
# functions operating on lists, this function excepts accepts list elements as
# positional arguments rather than a variable name due to caller requirements:
# e.g.,

#   print "${_beg_index_name_}:catch${(P)_beg_index_name_}"
#   print "${_end_index_name_}:catch${(P)_end_index_name_}"

# void join_list_to_legible_truncated_string(
#   string last_element_prefix, string text1, string text2, ...)
#
# Join the passed elements into a human-readable string separated by commas,
# prefixing the last such element with the passed string and truncating the
# resulting string to a hopefully sensible number of characters (currently,
# 75% of the current terminal width): e.g.,
#
#     >>> join_list_to_legible_truncated_string 'or'\
#     ...   '"I laiss i-ferin thuiar"' '"I wilith lim echui aur."'
#     "I laiss i-ferin thuiar" or "I wil...
#join_list_to_legible_truncated_string() {
    # Join the sanity.
#    string text; text="$(join_list_to_legible_string "${@}")"

    # Truncate the joined string to 75% of the current terminal's width.
#    integer max_length
#    (( max_length = 0.75 * $(get_terminal_width) ))
#    truncate_string "${text}" ${max_length} '...'
#}

# This and join_list_to_legible_string() accept list elements rather than a
# variable name signifying a list due to caller requirements, elsewhere.
#
    # If no list elements were passed, print the empty string and return.
#   is_list_nonempty "${list_name}" or report_success

    #FUXME: Add new get_list_difference() and get_list_intersection() functions
    #to "type/function", leveraging :var.die_unless_type_list() and return_list(). (Yep!)
    #Hmm; wait. We're probably better off with set_list_to_list_difference_into() and
    #set_list_to_list_intersection_into() functions accepting a third arg: the target list.

    # The difference between the two lists is the list of all Zeshy functions.
    # Recompile all such function definitions into the Zeshy digest file. (For
    # those who care, this is an asymmetric rather than symmetric difference.)
#   print "autoload function names: ${new_function_names[@]:|ZESHY_OLD_FUNCTION_NAMES}"
#   zcompile -c "${ZESHY_USER_DIGEST_FILENAME}"\
#       "${new_function_names[@]:|ZESHY_OLD_FUNCTION_NAMES}"

#FUXME: Poor name, since this doesn't actually perform a "return" statement.
#Perhaps print_restorable_list()? AH! Got it: convert_list_to_string().
# If no delimiter is passed, split words by default
# parsing (i.e., first by quote- and then whitespace-delimited words)
# See set_list_to_string_split_on() for alternative splitting on all substrings.
# See split_string_on_first() for alternative splitting into string variables.
#I'm pretty sure we can implement this by splitting text into a list of lines
#and running a single parameter expansion on such list (possibly also locally
#setting "IFS=':'"), which zsh *SHOULD* apply to each list member. If we can't
#do this and instead have to manually iterate the list, *DON'T*. Just use "cut".
#   >>> string List="$(get_list)"
#   >>> expand_List_to_list

#FUXME: This is silly. No one's *EVER* going to call this function. It's simply
#too obscure. Fold its implementation into expand_List(), which should
#incidentally be renamed to expand_...

#   # Expand the stringified list back into a list with a brute-force "eval".
#   >>> eval 'expand_list list $(make_list)'
#   >>> print "last list element: ${list[-1]}"  # as in the original list!
#   mafic

# void expand_list(string list_name, string text1, string text2, ...)
#
# Return a string that, when "eval"-ed by the caller, expands the passed strings
# having a stringified list previously produced by return_list() into the list
# with the passed name. See expand_List() for a concise alternative.
#expand_list() {
#    die_unless_args_2_or_more\
#        'expected one variable name and one or more strings'
#    string list_name="${1}"
#    shift_arg
#
#    # Dismantled, this is:
#    #
#    # * '@' expands to all remaining passed parameters: the stringified list.
#    # * 'z' splits the stringified list into a numeric list of words,
#    #   effectively undoing the prior 'kv' flag.
#    print "list ${list_name}; ${list_name}:catch( ${(z)@} )"
#}

# void expand_List()
#
# Expand stringified list "List" to list "list", a convenience alias simplifying
# the more generalized expand_list() function. See return_list() for examples.
#alias expand_List='
#:Var.is List or :die "\"List\" not defined";
#eval "$(expand_list list ${List})"'

    # Declare a list with the passed name if no such list exists.
#   is_undeclared "${list_name}" or print "list ${list_name}; "

#   :var.die_unless_type_list "${list_name}"
#
# Map-specific analogues of the above list-specific functions.
# ....................{ INITIALIZATION                     }....................
#   die_unless_two_to_three_args\
#       'expected one string name, one list name, and one optional delimiter'
#   string text_name="${1}" list_name="${2}" delimiter="${3}"
