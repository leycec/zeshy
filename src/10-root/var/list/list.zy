#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Lists* (i.e., sequential arrays).
/---

#FIXME: Incorporate set operations from:
#   http://www.catonmat.net/blog/set-operations-in-unix-shell

# ....................{ ADDERS                             }....................
:func.doc <<'/---'
:void :List.items.prepend(:List list_name +:str list_items)

Concatenate the passed strings into a new list element prepended to the start of
the passed list.

== Examples ==

.:List.items.prepend()
==========================================
[source]
------------------------------------------
>>> list on_ego_driven_cleverness; on_ego_driven_cleverness=(
...    "This is where we are at right now, as a whole. No one is left out of"
...    "the loop. We are experiencing a reality based on a thin veneer of lies"
...    "and illusions. A world where greed is our God and wisdom is sin, where"
...    "division is key and unity is fantasy, where the ego-driven cleverness"
...    "of the mind is praised, rather than the intelligence of the heart."
... )
>>> :List.items.prepend on_ego_driven_cleverness\
...    "Watching television is like taking black spray paint to your third eye."
>>> get_list_head on_ego_driven_cleverness
Watching television is like taking black spray paint to your third eye.
------------------------------------------
==========================================
/---
function :List.items.prepend() {
    die_unless_args_2_or_more 'Expected one list name and one or more strings.'
    :str list_name__pl="${1}"
    :List.die_unless "${list_name__pl}"
    :args.shift 1

    # Prepend this list.
    eval ${list_name__pl}'=( "${@}" "${(@P)list_name__pl}}" )'
}


:func.doc <<'/---'
:void append_list(:List list_name +:str list_items)

Concatenate the passed strings into a new list element appended to the end of
the passed list.

== Examples ==

.append_list()
==========================================
[source]
------------------------------------------
>>> :list on_the_land_of_freedom; on_the_land_of_freedom=(
...    "Go back to bed, America. Your government has figured out how it all"
...    "transpired. Go back to bed, America. Your government is in control"
...    "again. Here. Here's American Gladiators. Watch this. Shut up. Go back"
...    "to bed, America. Here is American Gladiators. Here is 56 channels of"
...    "it! Watch these pituitary retards bang their fucking skulls together"
...    "and congratulate you on living in the land of freedom. Here you go,"
...    "America! You are free to do what we tell you. You are free to do what"
...    "we tell you."
... )
>>> append_list on_the_land_of_freedom\
...     "Eternal suffering awaits anyone who questions god's infinite love."
>>> get_list_tail on_the_land_of_freedom
Eternal suffering awaits anyone who questions god's infinite love.
------------------------------------------
==========================================
/---
function append_list() {
    die_unless_args_2_or_more 'Expected one list name and one or more strings.'
    :str list_name__al="${1}"
    :List.die_unless "${list_name__al}"

    # Append this list.
    eval ${list_name__al}'+=( "${@}" )'
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str :List.print(:List list_name)

Print the passed list in human-readable format.
/---
function :List.print() {
    die_unless_arg 'Expected one list name.'
    :str list_name__pl="${1}"
    :int index__pl list_size__pl
    :List.die_unless "${list_name__pl}"

    #FIXME: This is nonsense. Call a proper :List.Size() function instead.

    # Size of this list. To properly handle call stack lists (e.g.,
    # ${funcstack}), inline such implementation. See get_list_size() for further
    # details.
    list_size__pl="${#${(@P)list_name__pl}}"

    #FIXME: Colorize this list using ${ZY_STYLE_TO_COLORS}. Not terribly hard...
    #FIXME: Indices should be aligned into a numerically padded column: e.g.,
    #
    #00: ...
    #01: ...
    #02: ...
    #  .
    #  .
    #  .
    #10: ...

    {
        # Announce such list.
        print_message_heading "List \${${list_name__pl}}"

        # Print such list.
        for (( index__pl = 1; index__pl <= list_size__pl; index__pl++ )) {
            :stdout.echo "${index__pl}: ${${(@P)list_name__pl}[${index__pl}]}"
        }
    } | :stdin.page
}
