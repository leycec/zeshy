#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Variable types.
/---

# ....................{ SETTERS                            }....................
#FIXME: Actually call this setter elsewhere rather than manually expanding
#"${(tP)...}" everywhere, except where efficiency *ABSOLUTELY* demands such
#optimization.

:func.doc <<'/---'
:void :Var.Type(:Var var_name :Str str_name)

Set the string variable with the second lpassed name to the *type string* (i.e.,
`zsh`-specific lowercase string succinctly synopsizing both the type and scope
this variable was originally declared as) of the variable with the first passed
name.

== Variable Type Strings ==

This type string consists of This variable's type _and_ scope delimited by `-`
(e.g., `array-local`, the type string for local lists). If This scope is
global, This type string omits This scope and hence consists only of This
variable's type without a suffixing `-`.

=== Type ===

If This variable was declared as type:

* Float, this type string is prefixed by `float`.
* Integer, this type string is prefixed by `integer`.
* Map, this type string is prefixed by `association`.
* String, this type string is prefixed by `scalar`.
* List _and_ is a:
** *Canonical `zsh` global* (e.g., ${match}, ${path}), this type string is
   prefixed by `array`.
** *Non-canonical variable* (i.e., user- or `zeshy`-specific), this type string
   is prefixed by `list`.

=== Scope ===

If this variable was declared with scope:

* Local, this type string is suffixed by `-local`.
* Global, this type string omits this scope.
* Exported, this type string is suffixed by `-exported`.

== Examples ==

.:Var.Type()
==========================================
[source]
------------------------------------------
>>> :str type_string
>>> :list on_employment; on_employment=(
...     "Most men would feel insulted if it were proposed to employ them in"
...     "throwing stones over a wall, and then in throwing them back, merely"
...     "that they might earn their wages. But many are no more worthily"
...     "employed now." )
>>> :Var.Type on_employment type_string
>>> :stdout.echo "${type_string}"
array-local
------------------------------------------
==========================================
/---
function :Var.Type() {
    die_unless_args_2 'Expected one variable name and one string name.'
    :str var_name__sstvt=${1} str_name__sstvt=${2}
    :Var.die_unless "${var_name__sstvt}"

    # Set this string to this variable's type. Dismantled, this is:
    #
    # * "P", expanding to this variable's name.
    # * "t", expanding to this variable's type.
    :Str.set "${str_name__sstvt}" "${(tP)var_name__sstvt}"
}

# ....................{ MAIN                               }....................
() {
    # For each zeshy-specific variable type and human-readable sentence fragment
    # describing that type in Asciidoc format, define a public tester function
    # testing variables of that type.
    :str var_type_zeshy var_type_doc
    for  var_type_zeshy var_type_doc (
        Bool   '*booleans* (i.e., integers whose values are either 0 or 1)'
        Char   '*characters* (i.e., strings of length 1)'
        Float  '*floats** (i.e., floating-point numbers)'
        Int    'integers'
        List   'lists'
        Map    'maps'
        Number '*numbers* (i.e., either integers or floats)'
        Scalar '*scalars* (i.e., either booleans, characters, integers, floats, or strings)'
        Str    'strings'
    ) {
        :func.declare\
            '[status=:bool] :'${var_type_zeshy}'.is(+:str var_names) [is_args_unhandled]' '
    :Var.is "${@}" :and ::'${var_type_zeshy}'.is "${@}"' <</---
Report success only if all variables with the passed names are existing
${var_type_doc}.
/---
    }
}

# In lieu of unit tests...
# function unitae() {
#     :list simlo
#     :List.is simlo :and :stdout.echo 'simlo, oh no!'
# }
