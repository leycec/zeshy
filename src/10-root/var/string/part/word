#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *shell words* (i.e., substrings split from their parent string
according to `zsh`- rather than ${IFS}-based string splitting rules).
/---

# ....................{ GETTERS                            }....................
:func.document <<'/---'
string get_string_word(string text, integer word_index)

Get the shell word with the passed 1-based index in the passed string. If such
string contains no such word, an exception is thrown: e.g.,

.get_string_word()
==========================================
[source]
------------------------------------------
>>> string methods_of_control=\
...    "People use the word \"natural.\" What is natural to me is these
...     botanical species which interact directly with the nervous system. What
...     I consider artificial is four years at Harvard, the Bible, Saint
...     Patrick's cathedral, and Sunday school teachings."
>>> get_string_word "${methods_of_control}" 5
"natural."
------------------------------------------
==========================================
/---
function get_string_word() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one word index.'
    :list words

    # Get such word. In theory, efficiently indexing such text with list index
    # flag "(w)" should suffice: e.g.,
    #
    #    >>> :string.output "${text[(w)${word_index}]}"
    #
    # Unfortunately, zsh *ALWAYS* reports success from such flag -- even if no
    # such word exists: e.g.,
    #
    #    # wat? zsh.
    #    >>> string wo='am wi' 
    #    >>> print ${wo[(w)777]}
    #    wi
    #    >>> print ${wo[(w)-666]}
    #    am
    #
    # Until such issue is resolved, we digress to manually splitting such string
    # on shell words into a local list and indexing into such list. *sigh*
    words=( "${(z)1}" )
    get_list_item words "${2}"
}

:func.document <<'/---'
string get_string_lines_word(string text, integer column_index)

Get a newline-delimited list of the shell word with the passed 1-based index in
each line of the passed string. If any such line contains no such word, an
exception is thrown: e.g.,

.get_string_lines_word()
==========================================
[source]
------------------------------------------
>>> string on_america=\
...    "We  are       waking from the   American Dream
...     to  realize   that   it   was   a        dream
...     few Americans lived  in   their waking   hours."
>>> get_string_lines_word "${on_america}" -1
Dream
dream
hours.
------------------------------------------
==========================================
/---
function get_string_lines_word() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one word index.'
    string text="${1}" word_index="${2}"
    :int.die_unless "${word_index}"

    # Get such words.
    for_string_line_words "${text}"\
       'if not (( ${+match['${word_index}']} )) {
            die_unless_list_index match '${word_index}'
        }
        :string.output "${match['${word_index}']}"'
}

# ....................{ GETTERS ~ count                    }....................
:func.document <<'/---'
int get_string_word_count(string text1, ...)

Get the number of shell words in the passed strings. Despite the term ``word'',
this does _not_ correspond to the conventional human-readable word count: e.g.,

.get_string_word_count()
==========================================
[source]
------------------------------------------
>>> :string on_cloudbusting=\
...    '"On top of the world,
...      Looking over the edge,
...      You could see them coming.
...      You looked too small
...      In their big, black car,
...      To be a threat to the men in power."'
>>> get_string_word_count "${on_cloudbusting}"
1
------------------------------------------
==========================================
/---
function get_string_word_count() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'
    :list words
    :int word_count

    # List of all words split from such string(s).
    set_list_to_string_words words "${*}"

    # Number of such words.
    :set_int_to_list_size word_count words

    # Get such number.
    :string.output "${word_count}"
}

# ....................{ ITERATORS                          }....................
:func.document <<'/---'
string for_string_words(
    string text,
    word_string_name = 'WORD',
    string code)

Run the passed code for each shell word of the passed string, capturing such
word into the passed local string variable (defaulting to ${WORD}): e.g.,

.for_string_words()
==========================================
[source]
------------------------------------------
>>> string on_truth=\
...    "Somewhere in Communist Russia I'll bet there's a little boy who has
...     never known anything but censorship and oppression. But maybe he's heard
...     of America, and he dreams of living in this land of freedom and
...     opportunity! Someday, I'd like to meet that little boy...and tell him
...     the awful TRUTH ABOUT THIS PLACE!!"
>>> for_string_words "${on_truth}"\
...     'is "${WORD}" == ?*om*? and :string.output "${WORD}"'
Somewhere
Communist
freedom
Someday,
------------------------------------------
==========================================
/---
function for_string_words() {
    # Validate sanity.
    die_unless_args_2_to_3\
        'Expected one string, optional word string name, and one code string.'
    string\
        text__fsw="${1}"\
        word_string_name__fsw='WORD'\
        code__fsw="${@[-1]}"
    is_args_3 or word_string_name__fsw="${2}"
    :die_unless_var_name "${word_string_name__fsw}"
    die_unless_string_nonempty "${code__fsw}" 'Expected nonempty command.'

    # Current word.
    string "${word_string_name__fsw}"

    # Split such string into words.
    eval 'for '${word_string_name__fsw}' ("${(z)'${text__fsw}'}") {
        '${code__fsw}'
    }'
}

:func.document <<'/---'
string for_string_line_words(
    string text,
    line_string_name = 'LINE',
    word_list_name = 'word',
    string code)

Run the passed code for each line of the passed string, capturing such line into
the passed local string variable (defaulting to ${LINE}) and each shell word of
such line into an element of the passed local list variable (defaulting to
${word}): e.g.,

.for_string_line_words()
==========================================
[source]
------------------------------------------
>>> string plan_plant_planet=\
...    "The process begins by declaring legitimate what we have denied for so
...     long. Let us declare nature to be legitimate. All plants should be
...     declared legal, and all animals for that matter. The notion of illegal
...     plants and animals is obnoxious and ridiculous."
>>> for_string_line_words "${plan_plant_planet}" ':string.output "${word[-3]}"'
denied
plants
notion
obnoxious
------------------------------------------
==========================================
/---
function for_string_line_words() {
    # Validate sanity.
    die_unless_args_2_to_4\
        'Expected one string, optional line string name, optional word list name, and one code string.'
    string\
        text__fslw="${1}"\
        line_string_name__fslw='LINE'\
        word_list_name__fslw='word'\
        code__fslw="${@[-1]}"
    is_args_3_to_4 or line_string_name__fslw="${2}"
    is_args_4      or word_list_name__fslw="${3}"
    :die_unless_var_names\
        "${line_string_name__fslw}" "${word_list_name__fslw}"
    die_unless_string_nonempty "${code__fslw}" 'Expected nonempty command.'

    # List of currently matched words.
    list ${word_list_name__fslw}

    # Split each such line into words.
    for_string_lines "${text__fslw}" "${line_string_name__fslw}"\
        ${word_list_name__fslw}'=( "${(z)'${line_string_name__fslw}'}" )
        '${code__fslw}
}

# --------------------( WASTELANDS                         )--------------------
    # Get the number of shell words in such strings as the size of a local list
    # of such words split from such strings.
#   string text="${1}" word_index="${2}"
#   :int.die_unless "${word_index}"

    #FUXME: Minor zsh bug here. We *REALLY* want to throw an exception if no
    #such word exists. Unfortunately, zsh currently *ALWAYS* reports success
    #from list index flag "(w)". Try it at the command line: e.g.,
    #
    #    # wat? zsh.
    #    >>> string wo='am wi' 
    #    >>> print ${wo[(w)777]}
    #    wi
    #    >>> print ${wo[(w)-666]}
    #    am
    #
    #Sadly, this means such flag is inappropriate for general-purpose use of any
    #sort -- including this function. We'll need to instead

    # List of shell words split from such strings.
    # Get the size of such list as the number of shell words in such strings.

# Splits words from the
    # current line ${MATCH} (captured by for_string_lines()) into ${match}.
# Handle shell words (i.e., substrings subject to `zsh`- rather than ${IFS}-
# based string splitting).
#
# Handle shell words (i.e., substrings delimited according to `zsh` string
# splitting rules rather than conventional ${IFS}-based string splitting).
# whitespace-delimited substrings).
#....    I have a secret love of chaos. There should be more of it. Do not...
#....    assume that order and stability are always good, in a society or in a
#....    universe. The old, the ossified, must always give way to new life and
#....    the birth of new things. Before the new things can be born the old must
#....    perish. This is a dangerous realization, because it tells us that we
#....    must eventually part with much of what is familiar to us. And that
#....    hurts. But that is part of the script of life."
    #FUXME: Actually, there's a much better implementation. The problem with
    #this one is that for_string_columns_split_on_pcre_class() constrains the
    #number of words in each line to the number in the first line. A bit
    #strange, no? For greater flexibility *AND* efficiency, instead:
    #
    #* Call a new function get_string_lines(), which should internally use
    #  either:
    #  * Parameter flag "(f)", if such string is short.
    #  * A PCRE, if such string is long. (To avoid creating a huge list.)
    #* For each ${MATCH}-ing line, manually split such line into ${match} with:
    #  "match=( ${(z)MATCH} ); ${command}"
    #
    #Not only is this faster, it also preserves the shell-based notion of "word".

    # Iterate such matches. Match whitespace column delimiters with PCRE
    # character class "[:blank:]" rather than "[:space:]"; the latter
    # unhelpfully matches newline, while the former does not.
#   for_string_columns_split_on_pcre_class "${1}" [:blank:] "${2}"

    # inline such splitting of the current line ${MATCH} into the current list
    # of words ${match}.
#...     \"He had a great capacity to arouse irrational hatred obviously,
#...     and that's because his ideas were radical in the most extreme sense of
#...     the word \"radical.\" His ideas have something to offend everybody, and
#...     he ended up becoming the only heretic in American history whose books
#...     were literally burned by the government.\"
#...     \"None of Dr. Leary's most important studies have either suffered
#...     refutation or enjoyed confirmation, because enacted law – statutes
#...     enacted after and because of Dr. Leary's research – makes it a crime for
#...     any other psychologists or psychiatrists to replicate such research.\""

    #FUXME: This could probably be optimized by calling
    #for_string_columns_split_on_class() instead. I'm not
    #sure there's an equivalent glob class to "[:blank:]", but "\t " seems a
    #reasonable approximation. Note that it's not a good idea to implement
    #for_string_columns_split_on_glob(), as globs have no equivalent to
    #multiline mode. Note also that no "_capturing_groups" suffix is required,
    #since if you're not capturing groups, you can't capture columns, which
    #renders the whole affair nonsensical.

#FUXME: You know, this should arguably use "[${IFS}]" as the separator character
#class rather than "[:blank:]". A nice improvement -- and needful, actually. I
#mean, we can't reliably call the matched substrings "words" unless we do this.
#FUXME: No, wait. That doesn't work. ${IFS} contains newlines, which we'd have
#to manually strip off. Even then, it's not clear that "[${IFS}]" is actually a
#valid PCRE class. Ignore for now.

#containing at most the passed number of whitespace-delimited columns.

#FUXME: Generalize to a new simpler function for_string_lines(),
#which would provide each such line as ${MATCH} (...and perhaps also ${LINE}).
#FUXME: Ah! We probably want to reimplement such functions with multiline PCREs,
#which should offer substantially better efficiency, generality, and safety.
#The current glob-based implementation splits the passed string into lines,
#clearly slower than multiline matching.

