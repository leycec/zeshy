#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *string fields* (i.e., substrings split from their parent string
according to ${IFS}- rather than `zsh`-based string splitting rules).
/---

# ....................{ GETTERS ~ count                    }....................
#FIXME: Convert to setters, naturally.

declare_function_with_stdin <<'/---'
int get_string_field_count(string text1, ...)

Get the number of fields split on the current internal field separator ${IFS}
from the passed strings. Assuming ${IFS} retains its default value of all ASCII
whitespace characters, this counts the number of ``words'' (in the conventional
English sense) in such strings: e.g.,

.get_string_field_count()
==========================================
[source]
------------------------------------------
>>> :string on_heresy=\
...    "Timothy Leary spent five years in prison for unorthodox scientific
...     ideas. Ezra Pound spent 13 years in a nuthouse for unorthodox political
...     and economic ideas. Their books were not burned. Reich was not only
...     thrown in prison, but they chopped up all the scientific equipment in
...     his laboratory with axes and burned all of his books in an
...     incinerator."
>>> get_string_field_count "${on_heresy}"
59
------------------------------------------
==========================================
/---
function get_string_field_count() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'
    :list fields
    :int field_count

    #FIXME: Define such function as follows:
    #fields=( "${=*}" )

    # List of all fields split from such string(s).
    set_list_to_string_fields fields "${*}"

    # Number of such fields.
    :set_int_to_list_size field_count fields

    # Get such number.
    :string.output "${field_count}"
}

# ....................{ ITERATORS                          }....................
declare_function_with_stdin <<'/---'
string for_string_line_fields(
    string text,
    line_string_name = 'LINE',
    word_list_name = 'field',
    string command)

Run the passed command for each line of the passed string, capturing such line
into the passed local string variable (defaulting to ${LINE}) and each field of
such line split on the current internal field separator ${IFS} into an element
of the passed local list variable (defaulting to ${field}). Assuming ${IFS}
retains its default value of all ASCII whitespace characters, such fields will
be words in the conventional English sense. See
for_string_line_fields_split_on_ifs() for further details: e.g.,

.for_string_line_fields()
==========================================
[source]
------------------------------------------
>>> :string on_thralldom=\
...    "Just see these superfluous ones! Wealth they acquire and become poorer
...     thereby. Power they seek for, and above all, the lever of power, much
...     money — these impotent ones! See them clamber, these nimble apes! They
...     clamber over one another, and thus scuffle into the mud and the abyss.
...     Towards the throne they all strive: it is their madness — as if
...     happiness sat on the throne! Ofttimes sitteth filth on the throne. — and
...     ofttimes also the throne on filth."
>>> for_string_line_fields "${on_thralldom}"\
...     'is "${field[-2]}" == *"o"* si and :string.output "${field[-1]}"'
poorer
much
filth.
------------------------------------------
==========================================
/---
function for_string_line_fields() {
    # Validate sanity.
    die_unless_args_2_to_4\
        'Expected one string, optional line string name, optional field list name, and one command.'
    :string\
        text__fslf="${1}"\
        line_string_name__fslf='LINE'\
        field_list_name__fslf='field'\
        command__fslf="${@[-1]}"
    is_args_3_to_4 and line_string_name__fslf="${2}"
    is_args_4      and field_list_name__fslf="${3}"
    :die_unless_var_names\
        "${line_string_name__fslf}" "${field_list_name__fslf}"
    die_unless_string_nonempty "${command__fslf}" 'Expected nonempty command.'

    # List of currently matched fields.
    :list ${field_list_name__fslf}

    # Split each such line into fields.
    for_string_lines "${text__fslf}" "${line_string_name__fslf}"\
        ${field_list_name__fslf}'=( "${='${line_string_name__fslf}'}" )
        '${command__fslf}
}

declare_function_with_stdin <<'/---'
string for_string_line_fields_split_on_whitespace(
    string text,
    line_string_name = 'LINE',
    word_list_name = 'field',
    string command)

Run the passed command for each line of the passed string, capturing such line
into the passed local string variable (defaulting to ${LINE}) and each field of
such line split on whitespace into an element of the passed local list variable
(defaulting to ${field}). Such fields will be words in the conventional English
sense. See for_string_line_words() for a similar iterator (but aggregating
single- and double-quoted strings into single fields) and
for_string_line_fields_split_on_ifs() for further details: e.g.,

.for_string_line_fields_split_on_whitespace()
==========================================
[source]
------------------------------------------
>>> :string on_time=\
...    "This spending of the best part of one's life earning money in order to
...     enjoy a questionable liberty during the least valuable part of it
...     reminds me of the Englishman who went to India to make a fortune first,
...     in order that he might return to England and live the life of a poet. He
...     should have gone up garret at once. \"What!\" exclaim a million Irishmen
...     starting up from all the shanties in the land, \"is not this railroad
...     which we have built a good thing?\" Yes, I answer, comparatively good,
...     that is, you might have done worse; but I wish, as you are brothers of
...     mine, that you could have spent your time better than digging in this
...     dirt."
>>> for_string_line_fields_split_on_whitespace "${on_time}"\
...     'is "${field[1]}" == *"e"* and :string.output "${field[3]}"'
questionable
of
you
------------------------------------------
==========================================
/---
function for_string_line_fields_split_on_whitespace() {
    # Validate sanity.
    die_unless_args_2_to_4\
        'Expected one string, optional line string name, optional field list name, and one command.'
    :string command__fslfsow="${@[-1]}"
    pop_arg

    # Iterate such fields.
    for_string_line_fields_split_on_ifs\
        "${@}" "${ZESHY_IFS_DEFAULT}" "${command__fslfsow}"
}

declare_function_with_stdin <<'/---'
string for_string_line_fields_split_on_ifs(
    string text,
    line_string_name = 'LINE',
    word_list_name = 'field',
    string ifs,
    string command)

Run the passed command for each line of the passed string, capturing such line
into the passed local string variable (defaulting to ${LINE}) and each field of
such line split on the passed *internal field separator* (IFS) into an element
of the passed local list variable (defaulting to ${field}): e.g.,

.for_string_line_fields_split_on_ifs()
==========================================
[source]
------------------------------------------
>>> string on_philip_k_dick=\
...    "One time, when I was researching Gnosticism in the Britannica, I came
...     across mention of a Gnostic codex called \"The Unreal God and the
...     Aspects of His Nonexistent Universe,\" an idea which reduced me to
...     helpless laughter. What kind of person would write about something that
...     he knows doesn't exist, and how can something that doesn't exist have
...     aspects? But then I realized that I'd been writing about these matters
...     for over twenty-five years."
>>> for_string_line_fields_split_on_ifs "${on_philip_k_dick}" ','\
...     '(( $(get_list_size field) > 1 )) and :string.output "${field[1]}"'
One time
Aspects of His Nonexistent Universe
he knows doesn't exist
------------------------------------------
==========================================

== Splitting Algorithm ==

While efficient, such splitting follows a subtly complex algorithm. Denote
*whitespace characters* to be any characters matching newline, space, and tab
embedded in such IFS (i.e., if such IFS contains a newline but no space or tab,
whitespace characters consist only of a newline) and *non-whitespace
characters* be all other characters embedded in such IFS. Then fields are
greedily split on the following substrings:

* One or more whitespace characters.
* One non-whitespace character preceded and followed by zero or more whitespace
  characters.

See ``IFS'' under `man zshparam` for further details
/---
function for_string_line_fields_split_on_ifs() {
    # Validate sanity.
    die_unless_args_3_to_5\
        'Expected one string, optional line string name, optional field list name, one IFS, and one command.'
    :string ifs__fslfsoi="${@[-2]}" command__fslfsoi="${@[-1]}"
    die_unless_string_nonempty "${ifs__fslfsoi}" 'Nonempty IFS expected.'
    pop_args_2

    # Iterate such fields.
    IFS="${ifs__fslfsoi}" for_string_line_fields "${@}" "${command__fslfsoi}"
}

# ....................{ ITERATORS ~ string                 }....................
declare_function_with_stdin <<'/---'
string for_string_line_fields_split_on_character(
    string text,
    line_string_name = 'LINE',
    word_list_name = 'field',
    string command)

Run the passed command for each line of the passed string, capturing such line
into the passed local string variable (defaulting to ${LINE}) and each field of
such line split on the passed separator character into an element of the passed
local list variable (defaulting to ${field}): e.g.,

.for_string_line_fields_split_on_character()
==========================================
[source]
------------------------------------------
>>> string on_wilhelm_reich=\
...    "He had a great capacity to arouse irrational hatred obviously, and
...     that's because his ideas were radical in the most extreme sense of the
...     word \"radical.\" His ideas have something to offend everybody, and he
...     ended up becoming the only heretic in American history whose books were
...     literally burned by the government."
>>> for_string_line_fields_split_on_character "${on_wilhelm_reich}" ','\
...     '(( $(get_list_size field) == 2 )) and :string.output "${field[2]}"'
 and
 and he
------------------------------------------
==========================================
/---
function for_string_line_fields_split_on_character() {
    # Validate sanity.
    die_unless_args_3_to_5\
        'Expected one string, optional line string name, optional field list name, one field separator character, and one command.'
    :die_unless_char "${@[-2]}"

    # Iterate such fields. Since such separator is a single character, a
    # corresponding parameter expansion token necessarily exists, rendering the
    # token-based splitting this call performs inherently reliable.
    for_string_line_fields_split_on_string "${@}"
}

declare_function_with_stdin <<'/---'
string for_string_line_fields_split_on_string(
    string text,
    line_string_name = 'LINE',
    word_list_name = 'field',
    string separator,
    string command)

Run the passed command for each line of the passed string, capturing such line
into the passed local string variable (defaulting to ${LINE}) and each field of
such line split on the passed separator string into an element of the passed
local list variable (defaulting to ${field}): e.g.,

.for_string_line_fields_split_on_string()
==========================================
[source]
------------------------------------------
>>> :string on_bankruptcy=\
...     "As the United States goes bankrupt trying to maintain its global
...      empire, and industrial civilization as a whole slides down the far side
...      of a dizzying range of depletion curves, it's becoming harder by the
...      day for Americans to make believe that the old saws of upward mobility
...      and an ever brighter future have any relevance to their own lives –
...      and yet those beliefs are central to the psychology, the self-image,
...      and the worldview of most Americans."
>>> for_string_line_fields_split_on_string "${on_national_bankruptcy}" ', '\
...     '(( $(get_list_size field) >= 2 )) and :string.output "${field[2]}"'
and industrial civilization as a whole slides down the far side
it's becoming harder by the
the self-image
------------------------------------------
==========================================
/---
function for_string_line_fields_split_on_string() {
    # Validate sanity.
    die_unless_args_3_to_5\
        'Expected one string, optional line string name, optional field list name, one field separator string, and one command.'
    :string\
        text__fslfsos="${1}"\
        line_string_name__fslfsos='LINE'\
        field_list_name__fslfsos='field'\
        separator__fslfsos="${@[-2]}"\
        command__fslfsos="${@[-1]}"\
        token__fslfsos
    is_args_3_to_4 and line_string_name__fslfsos="${2}"
    is_args_4      and field_list_name__fslfsos="${3}"
    :die_unless_var_names\
        "${line_string_name__fslfsos}" "${field_list_name__fslfsos}"
    die_unless_string_nonempty\
        "${separator__fslfsos}" 'expected nonempty field separator'

    # Parameter expansion token specific to such separator, if such token
    # exists. If such token does not exist, this implicitly throws an exception,
    # which we propagate by failing to catch such exception. Since there exists
    # no comparable efficient alternative to such splitting, this is the best to
    # be done. (The only alternative to such splitting remains
    # for_string_line_fields_split_on_pcre_bounded(), which while moderately
    # efficient requires the number of fields in each string line be bound by
    # some maxima. Since the manner of field splitting implemented here suffers
    # no such restriction, there is no comparable efficient alternative.)
    :set_char_to_string_expansion_token token__fslfsos "${separator__fslfsos}"

    # List of currently matched fields.
    :list ${field_list_name__fslfsos}

    #FIXME: Allow the caller to pass variable names.

    # Iterate lines, splitting fields from the current line ${MATCH} into the
    # list of fields ${match}. See :list.set_to_string_split_on_string() for
    # further details.
    for_string_lines "${text__fslfsos}" "${line_string_name__fslfsos}" "
        ${field_list_name__fslfsos}=( \${(s${token__fslfsos}${separator__fslfsos}${token__fslfsos})${line_string_name__fslfsos}} )
        ${command__fslfsos}"
}

# --------------------( WASTELANDS                         )--------------------
#Every character of such IFS
#indicates a character on which to split. with *whitespace characters* (i.e.,
#newline, space, tab) handled differently from non-whitespace characters.
#Specifically, fields are split on any of the following:

#Assuming the default ${IFS}
#splitting fields on whitespace, this corresponds to the conventional human-
#readable (rather than shell-specific) word count:
    # Parameter expansion token specific to such separator exists. Since such
    # separator is a single character, some such token must exist, rendering
    # token-based splitting reliable (in this case, at least).
#   token="$(get_string_parameter_expansion_token_if_found "${separator}")"

    # Words split from the currently matched line.
#   list match

    # Iterate lines, splitting fields from the current line ${MATCH} into the
    # list of fields ${match}. See :list.set_to_string_split_on_string() for
    # further details.
#   for_string_lines "${text}"\
#       "match=( \${(s${token}${separator}${token})MATCH} ); ${command}"
    # Iterate such fields.
#   for_string_line_fields_split_on_ifs\
#       "${text}" "${separator}${separator}" "${command}"

# p _not_ aggregating quoted
#substrings. Hence, this is the conventional English word count: e.g.,
