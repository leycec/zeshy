#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *string getters* (i.e., functions getting string properties).
/---

# ....................{ GETTERS ~ count                    }....................
#FIXME: "Count" is a verb as well as noun. Hence, rename this function to
#count_string_text() *AND* rename all other function names matching
#*"_count"* similarly.

:func.doc <<'/---'
integer get_string_text_count(string text, string substring)

Get the number of instances of the passed substring in the passed string: e.g.,

.get_string_text_count()
==========================================
[source]
------------------------------------------
>>> string on_war_as_peace=\
...    "Launch the Polaris.
...     The end doesn't scare us.
...     The warheads will all rust in peace.
...     Eradication of
...     Earth's population loves
...     Polaris."
>>> get_string_text_count "${on_war_as_peace}" 'ar'
3
------------------------------------------
==========================================
/---
function get_string_text_count() {
    # Validate sanity.
    die_unless_args_2 'Expected one string and one substring.'
    string text="${1}" substring="${2}" text_with_substrings_removed

    #FIXME: Inefficient. Call :set_string_to_string_text_removed(): e.g.,
    #:set_string_to_string_text_removed\
    #    text_with_substrings_removed text substring
    #FIXME: Actually, there should be an even more efficient mechanism:
    #
    #    eval ':str.output $(( '${(S)text//*${substring}/1+}'0 ))'
    #
    #Reasonably clever, eh? The "(S)" enables non-greedy matching. The
    #replacement portion *SHOULD* (untested, of course!) replace each matching
    #substring with "1+". The outer evaluation thus gets the number of such
    #substrings. Niiiice.

    # Remove such substrings from such string.
    text_with_substrings_removed="$(remove_string_text\
        "${text}" "${substring}")"

    # Get the number of such substrings by differencing the lengths of such
    # string and such string with all such substrings removed, divided by the
    # length of such substring. For efficiency, avoid calling
    # get_string_length().
    :str.output\
        $(( (${#text} - ${#text_with_substrings_removed}) / ${#substring} ))
}

# --------------------( WASTELANDS                         )--------------------
