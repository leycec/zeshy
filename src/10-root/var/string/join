#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *string joiners* (i.e., functions concatenating strings).
/---

#FIXME: Horrid. Refactor from getters into setters.

# ....................{ JOINERS                            }....................
#FIXME: Obsoleted by :Str.set(), which now provides the same
#functionality implicitly, including all commentary below. Excise!

:func.doc <<'/---'
string join_strings(string text1, ...)

Concatenate the passed strings with no separation between such strings: e.g.,

.join_strings()
==========================================
[source]
------------------------------------------
>>> join_strings "Where Alph," "the sacred river," "ran"
Where Alph,the sacred river,ran
------------------------------------------
==========================================
/---
function join_strings() {
    # Temporarily set global string ${IFS} to the empty string. Since zsh
    # implicitly delimits lists interpolated with the "*" operator when double-
    # quoted with such global, the following commands print the passed arguments
    # undelimited. This incantation was astonishingly difficult to discover. In
    # particular, note that if such operator is *NOT* double-quoted, zsh ignores
    # ${IFS}. *ruefully shakes head*
    die_unless_args 'Expected one or more strings.'
    IFS='' :stdout.echo "${*}"
}

:func.doc <<'/---'
string join_strings_on_newline(string text1, ...)

Separate the passed strings with newline characters: e.g.,

.join_strings_on_newline()
==========================================
[source]
------------------------------------------
>>> join_strings_on_newline "Through caverns" measureless "to man"
Through caverns
measureless
to man
------------------------------------------
==========================================
/---
function join_strings_on_newline() {
    die_unless_args 'Expected one or more strings.'
    print -lr -- "${@}"
}

:func.doc <<'/---'
string join_strings_on_null(string text1, string text2, ...)

Separate the passed strings with null characters (i.e., "\0"): e.g.,

.join_strings_on_null()
==========================================
[source]
------------------------------------------
>>> join_strings_on_null "Down to" "a sunless" sea.
Down to\0a sunless\0sea.
------------------------------------------
==========================================
/---
function join_strings_on_null() {
    die_unless_args 'Expected one or more strings.'
    print -Nr -- "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#the returned string to a sensible maximum (currently, 75% of the
#  current terminal width).
    # Truncate the joined string to 33% of the current terminal's width, rounded
    # down to the nearest integer.
#   integer max_length=80
#   :stdout.is_terminal and max_length=$(( 0.75 * $(get_terminal_width) ))
#   truncate_string "${text}" "${max_length}" '...'

#Print the passed strings to standard output delimited and terminated by nulls.
#Suffix each such string with character "\0", in other words: e.g.,
