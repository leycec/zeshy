#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle *string unescapers* (i.e., functions decoding escaped string characters).
See @{escape} for further details.
-/-

# ....................{ UNESCAPERS                         }....................
:func.document <<'/---'
string unescape_pcre(string pcre)

Convert all escaped characters in the passed PCRE into their respective UTF-8-
encoded characters. While similar, PCRE and `zsh` escape syntax differs enough
to preclude a universal function for unescaping all such syntax. Specifically,
PCREs support the following escape syntax:

* `\a`, alarm (i.e., bell) (hex 07).
* `\cx`, the control character <Ctrl-x>, where `x` is any ASCII character.
* `\e`, escape (hex 1B).
* `\f`, form feed (hex 0C).
* `\n`, linefeed (i.e., newline) (hex 0A).
* `\r`, carriage return (hex 0D).
* `\t`, tab (hex 09).
* `\ddd`, the ASCII character with octal codepoint `ddd`. Since PCRE
  conditionally overloads such syntax to also denote backreferences, this
  function should typically only be called on PCREs _not_ containing such
  backreferences.
* `\xhh`, the ASCII character with hexadecimal codepoint `hh`.
* `\x{h...}`, the Unicode character with hexadecimal codepoint `h...`.
* `\uhhhh`, the Unicode character with hexadecimal codepoint `hhhh`. While such
  escape technically only applies in JavaScript mode, this function ignores such
  distinctions and _always_ decodes such characters.

See unescape_string() for further details on `zsh` escape syntax.

For example:

.unescape_pcre()
==========================================
[source]
------------------------------------------
>>> string on_surplus=\
...    "The master is in possession of a surplus\054 of what is physically necessary\x3b the\nservant lacks it\054 and indeed in such a way that the surplus and the lack of it\nare not single \x{5b}accidental\x{5d} aspects but the indifference of necessary needs\u002e"
>>> unescape_pcre "${on_surplus}"
The master is in possession of a surplus, of what is physically necessary; the
servant lacks it, and indeed in such a way that the surplus and the lack of it
are not single [accidental] aspects but the indifference of necessary needs.
------------------------------------------
==========================================
/---
function unescape_pcre() {
    # Validate passed arguments.
    die_unless_args 'expected at least one string'

    # While PCRE and zsh escape syntax largely overlaps, there are differences:
    #
    # * zsh requires octal escapes be prefixed by a 0, while PCRE does not.
    #   Hence, prefix the latter by a 0. This is always safe, thankfully.
    # * zsh offers the "\xhh" but not "\x{h...}" syntax of PCRE. Convert the
    #   latter to "\uh..." syntax.
    # * While zsh treats "\C-x" as <Ctrl-x> with "x" any ASCII character, PCRE
    #   instead treats "\cx" as such escape. Convert the latter to the former.
    #
    # Convert PCRE to zsh escape syntax and leverage zsh to decode such syntax.
    unescape_string\
        "${${${*//(#b)\\([[:digit:]]##)/\0${match[1]}}//(#b)\\x\{([[:xdigit:]]##)\}/\u${match[1]}}//(#b)\\c([[:ascii:]])/\C-${match[1]}}"
}

# --------------------( WASTELANDS                         )--------------------
#   string text="${*}"
#`\x{...}` expressions in the passed PCRE into the UTF-8-
#encoded characters such expressions match.

#PCREs also conditionally support escape syntax  in JavaScript mode.
#Since `zeshy` never enables such mode, such syntax need not be unescaped.
#
#require distinct functions for unescaping 
#a
#distinct
#attempting to unescape such escapes by merely calling print() is insufficient.

