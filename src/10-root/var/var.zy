#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core variable functionality.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :Var.die_unless(+:Var var_names)

Throw an exception unless all passed variables exist.

== See Also ==

* :Var.is().
/---
function :Var.die_unless() {
    die_unless_args 'Expected one or more variable names.'
    :Var.is "${@}" :or {
        :str var_name__duv
        for  var_name__duv ("${@}") {
            :Var.is "${var_name__duv}" :or
                :die 'Variable ${'${var_name__duv}'} undefined.'
        }
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :Var.is(+:Var var_names) [is_args_unhandled]

Report success only if all passed variables *exist* (i.e., were declared as
either global variables _or_ local variables in the same dynamic scope with
which this function was called).
/---
function :Var.is() {
    (( # )) || :die 'Expected one or more variable names.'

    # If only one variable name was passed, test such variable by efficiently
    # testing for the existence of such name in canonical map global
    # ${parameters} (rather than the implicitly iterative and hence
    # comparatively less efficient string length test performed below).
    if (( # == 1 )) {
        (( ${+parameters[${1}]} ))
    # Else, multiple variable names were passed.
    } else {
        # Temporarily clear the internal field separator (IFS). Failing to do
        # so here causes each string substitution performed below to be
        # delimited by whitespace; since matching such whitespace is
        # cumbersome, sidestep the issue entirely.
        local vars_found IFS=

        # Report success if this string contains as many "x" characters as the
        # number of these variable names (implying all such variables to exist)
        # or failure otherwise. For efficiency, avoid explicit iteration by
        # condensing all such tests into a single test against a dynamically
        # evaluated expansion. Dismantled, this is:
        #
        # * "${(e)...}", dynamically expanding the result of such expansion
        #   (e.g., "${my_var1+}${my_var2+}").
        # * "${...//.../...}", replacing each passed variable name with a string
        #   delimiting such name by "${" and "+}" (e.g., replacing a passed
        #   variable name "my_var" with "${my_var+}"), which zsh then expands
        #   to "x" if such variable exists or the empty string otherwise.
        :is ${(e)${@//(#m)*/\$\{${MATCH}+x\}}} == 'x'(#c${#}) :si
    }
}

# ....................{ TESTERS ~ empty                    }....................
#FIXME: Generalize the following functions to accept multiple variable names.
#Despite documentation, they currently do *NOT*.

:func.doc <<'/---'
[status=:bool] :Var.is_empty(:Var var_name)

Report success if the values of all passed variables are *empty* (i.e., expand
to the value specific to such variable's type signifying emptiness).

This function reports success if each such variable is either a:

* Float expanding to *real zero* (i.e., `0.0`).
* Integer expanding to *integer zero* (i.e., `0`).
* List expanding to the *empty list* (i.e., `()`).
* Map expanding to the *empty map* (i.e., `()`).
* String expanding to the *empty string* (i.e., `""`).
/---
function :Var.is_empty() {
    :not :Var.is_nonempty "${@}"
}


:func.doc <<'/---'
[status=:bool] :Var.is_nonempty(:Var var_name)

Report success if the passed variable's value is nonempty.

== See Also ==

* :Var.is_empty().
/---
function :Var.is_nonempty() {
    (( # )) || :die 'Expected one or more variable names.'
    :str variable_name__ivn=${1}

    # Test such variable. Since :is_var_number() calls
    # :Var.die_unless(), avoid doing so above.
    if { :is_var_number "${variable_name__ivn}" } {
             (( ${(P)variable_name__ivn} ))
    } else {
        :is -n ${(P)variable_name__ivn} :si
    }
}

# ....................{ GETTERS                            }....................
#FIXME: Convert to setters, naturally renaming "_variable" to "_var" everywhere.

:func.doc <<'/---'
:str get_variable_first(+:str var_names)

Name of the first passed defined variable expanding to a non-empty string if any
or throw an exception otherwise (i.e., if all such variables are either
undefined or expand to the empty string).

== Examples ==

.get_variable_first()
==========================================
[source]
------------------------------------------
>>> :str on_growth="
... Unfortunately, once an economy is geared to expansion, the means rapidly
... turn into an end and \"the going becomes the goal.\" Even more
... unfortunately, the industries that are favored by such expansion must,
... to maintain their output, be devoted to goods that are readily
... consumable either by their nature, or because they are so shoddily
... fabricated that they must soon be replaced. By fashion and built-in
... obsolescence the economies of machine production, instead of producing
... leisure and durable wealth, are duly cancelled out by the mandatory
... consumption on an even larger scale."
>>> get_variable_first on_sustenance on_decline on_growth
on_growth
------------------------------------------
==========================================
/---
function get_variable_first() {
    get_variable_first_if_found "${@}" :or
        :die "Variables $(join_strings_readable: "${@}") undefined."
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_variable_first_if_found(+:str var_names)

Name of the first passed variable with a non-empty value if any or return
failure otherwise (i.e., if no such variable has a non-empty value).

== Examples ==

.get_variable_first_if_found()
==========================================
[source]
------------------------------------------
>>> :str on_modernity="
... [The processes of the paleotechnic period are] doubly ruinous: they
... impoverish the earth by hastily removing, for the benefit of a few
... generations, the common resources which, once expended and dissipated,
... can never be restored; and second, in its technique, its habits, its
... processes, the paleotechnic period is equally inimical to the earth
... considered as a human habitat, by its destruction of the beauty of the
... landscape, its ruining of streams, its pollution of drinking water, its
... filling the air with a finely divided carboniferous deposit, which
... chokes both life and vegetation."
>>> get_variable_first_if_found on_ruination on_rusticity on_modernity
on_modernity
------------------------------------------
==========================================
/---
function get_variable_first_if_found() {
    die_unless_args 'Expected one or more variable names.'

    # Get such variable. For efficiency, inline such implementation. See
    # :Var.is() for further details.
    :str var_name__gvnfif
    for  var_name__gvnfif ("${@}") {
        if :is -n     ${(P)var_name__gvnfif+x} :si {
            :str.return "${var_name__gvnfif}"
        }
    }
    :failure.report
}

# ....................{ GETTERS ~ value                    }....................
:func.doc <<'/---'
:str get_variable_value_first(+:str var_names)

Value of the first passed variable with non-empty value or throw an exception if
no such variables have a non-empty value.

== Examples ==

.get_variable_value_first()
==========================================
[source]
------------------------------------------
>>> :str on_obsolescence="
... But what would become of mass production and its system of financial
... expansion if technical perfection, durability, social efficiency, and
... human satisfaction were the guiding aims? The very conditions for
... current financial success — constantly expanding production and
... replacement — works against these ends. To ensure the rapid absorption
... of its immense productivity, megatechnics resort to a score of different
... devices: consumer credit, installment buying, multiple packaging, non-
... functional designs, meretricious novelties, shoddy materials, defective
... workmanship, built-in fragility, or forced obsolescence through frequent
... arbitrary changes of fashion. Without constant enticement and
... inveiglement by advertising, production would slow down and level off to
... normal replacement demand. Otherwise many products could reach a plateau
... of efficient design which would call for only minimal changes from year
... to year."
>>> get_string_line "$(get_variable_value_first\
...     on_durability on_efficiency on_obsolescence)" 1
But what would become of mass production and its system of financial
------------------------------------------
==========================================
/---
function get_variable_value_first() {
    get_variable_value_first_if_found "${@}" :or
        :die "Variables $(join_strings_readable: "${@}") undefined."
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_variable_value_first_if_found(+:str var_names)

Value of the first passed variable with non-empty value or return failure if no
such variables has a non-empty value.

== Examples ==

.get_variable_value_first_if_found()
==========================================
[source]
------------------------------------------
>>> :str on_suburbia="
... In the mass movement into the suburban areas a new kind of community was
... produced, which caricatured both the historic city and the archetypal
... suburban refuge: a multitude of uniform, unidentifiable houses, lined up
... inflexibly, at uniform distances, on uniform roads, in a treeless
... communal waste, inhabited by people of the same class, the same income,
... the same age group, witnessing the same television performances, eating
... the same tasteless prefabricated foods, from the same freezers,
... conforming in every outward and inward respect to a common mold,
... manufactured in the central metropolis. Thus the ultimate effect of the
... suburban escape in our time is, ironically, a low-grade uniform
... environment from which escape is impossible."
>>> get_string_line "$(get_variable_value_first_if_found\
...     on_usurpation on_conurbations on_suburbia)" -1
environment from which escape is impossible.
------------------------------------------
==========================================
/---
function get_variable_value_first_if_found() {
    die_unless_args 'Expected one or more variable names.'

    # Get such variable's value. For efficiency, inline such implementation. See
    # :Var.is() for further details.
    :str var_name__gvnvfif
    for  var_name__gvnvfif ("${@}") {
        if :is -n        ${(P)var_name__gvnvfif+x} :si {
            :str.return "${(P)var_name__gvnvfif}"
        }
    }
    :failure.report
}

# ....................{ GETTERS ~ binding                  }....................
:func.doc <<'/---'
:str :Var.binding(+:Var var_names)

Bindings for all passed variables in the passed order.

For efficiency, setters are typically preferable to getters. In this obscure
case, however, the most efficient and reliable means of implementing a setter
for these bindings is to capture subshell output from this getter. (Go figure.)

== See Also ==

* :Var.Binding().
/---
function :Var.binding() {
    die_unless_args 'Expected one or more variable names.'

    # For each such variable, both declare and define such variable.
    # Ideally, the following command would suffice to do so:
    #
    # >>> typeset -p -- "${@}"
    #
    # Unfortunately, such command suffers numerous deficiencies (arguably,
    # reportable zsh bugs):
    #
    # * It fails to annotate global variables with option "-g", thus localizing
    #   variable declarations to the current context.
    # * It fails to quote nonscalar variable elements when such elements are
    #   single shell words: e.g.,
    #
    # >>> list l; l=( and or is )
    # zsh: parse error near `&&'
    #
    # Typically, quoting single shell words is safe. As the prior example
    # demonstrates, however, if such words are equal to global alias names,
    # then the result is typically a fatal parse error.
    #
    # Only manually iterating such variables suffices to amend such issues.

    # Type string for the current variable (e.g., "string-local").
    :str var_type__sstvb

    # Options to be passed to "typeset" for the current variable.
    :str typeset_options__sstvb

    # Append all such variable bindings to such strings.
    :str var_name__sstvb
    for  var_name__sstvb ("${@}") {
        # Type string for this variable.
        :Var.Type "${var_name__sstvb}" var_type__sstvb
        # :stdout.echo "binding: ${var_name__sstvb} (${var_type__sstvb})"

        # Reset "typeset" options for this variable.
        typeset_options__sstvb=''

        # If such variable is *NOT* local and hence is global, pass appropriate
        # options. (If such variable is local, no "typeset" options need be
        # passed, as "typeset" defaults to local scope.)
        if :is ${var_type__sstvb} != ${~ZY__VAR_TYPE_GLOB_LOCAL} :si {
            # Globalize this variable.
            typeset_options__sstvb+='-g '

            # If such variable is exported, also pass such option.
            if :is ${var_type__sstvb} == ${~ZY__VAR_TYPE_GLOB_EXPORTED} :si {
                typeset_options__sstvb+='-x '
            }
        }

        #FIXME: While the scalar logic suffices (due to deferring to "typeset -p"),
        #the nonscalar logic is necessarily implemented manually and hence
        #insufficient. In particular, such logic fails to currently detect and
        #set "typeset" options "-U" and possibly others.

        # If this variable is a list, all reserved characters in list items
        # must be escaped. See :List.is().
        #
        # While parameter expansion flag "q" also suffices for these purposes,
        # that flag increases the length of the output string and hence both
        # serialization and deserialization time -- especially on large lists
        # and maps, our principle use case for serializing variables: e.g.,
        #
        #    >>> :stdout.echo "${(q):-Laissez-faire was planned; planning was not.}"
        #    Laissez-faire\ was\ planned\;\ planning\ was\ not.
        #    >>> :stdout.echo "${(qq):-Laissez-faire was planned; planning was not.}"
        #    'Laissez-faire was planned; planning was not.'
        if :is ${var_type__sstvb} == ${~ZY__VAR_TYPE_ZSH_GLOB_LIST} :si {
            :stdout.echo\
                "typeset ${typeset_options__sstvb}-a ${var_name__sstvb}
${var_name__sstvb}=( ${(qq@P)var_name__sstvb} )"
        # Else if this variable is a map, all reserved characters in both
        # keys and values of this map must be escaped. See :Map.is().
        } elif :is ${var_type__sstvb} == ${~ZY__VAR_TYPE_ZSH_GLOB_MAP} :si {
            :stdout.echo\
                "typeset ${typeset_options__sstvb}-A ${var_name__sstvb}
${var_name__sstvb}=( ${(qqkv@P)var_name__sstvb} )"
        # Else, this variable is scalar.
        #
        # If one or more "typeset" options are to be passed (e.g., globals),
        # "typeset -p" output must be modified to do so. Dismantled, this is:
        #
        # * "/", performing this replacement at most once.
        # * "(#s)", anchoring this match to the start of this output.
        } elif :is -n ${typeset_options__sstvb} :si {
            :stdout.echo\
                "${$(typeset -p -- "${var_name__sstvb}")/(#s)typeset /typeset ${typeset_options__sstvb}}"
        # Else, "typeset -p" output suffices.
        } else {
            typeset -p -- "${var_name__sstvb}"
        }
    }
}

# ....................{ SETTERS                            }....................
#FIXME: Intense example. Fantastic, of course, but excessive; split at least
#half elsewhere.

:func.doc <<'/---'
:void :Var.Binding(:Var var_names :Str binding_name)

Set the passed string variable to the concatenation of all bindings for the
passed variables in the passed order.

For each such variable, the corresponding binding is exactly one or two
evaluable commands declaring _and_ defining such variable.

== Examples ==

.:Var.Binding()
==========================================
[source]
------------------------------------------
>>> :str.constant_global on_world3="
... Our world model was built specifically to investigate five major trends
... of global concern -- accelerating industrialization, rapid population
... growth, widespread malnutrition, depletion of nonrenewable resources,
... and a deteriorating environment. These trends are all interconnected in
... many ways, and their development is measured in decades or centuries,
... rather than in months or years. With the model we are seeking to
... understand the causes of these trends, their interrelationships, and
... their implications as much as one hundred years in the future."
>>> :map.global on_conclusions; on_conclusions=( "Our" "conclusions are:" )
>>> :list on_conclusion_1; on_conclusion_1=(
...     "1. If the present growth trends in world population,"
...     "industrialization, pollution, food production, and resource depletion"
...     "continue unchanged, the limits to growth on this planet will be"
...     "reached sometime within the next one hundred years. The most probable"
...     "result will be a rather sudden and uncontrollable decline in both"
...     "population and industrial capacity." )
>>> :str var_bindings
>>> :Var.Binding on_world3 on_conclusions on_conclusion_1 var_bindings
>>> :stdout.echo "${var_bindings}"
typeset -g -r on_world3='Our world model was built specifically to investigate five major trends
of global concern -- accelerating industrialization, rapid population
growth, widespread malnutrition, depletion of nonrenewable resources,
and a deteriorating environment. These trends are all interconnected in
many ways, and their development is measured in decades or centuries,
rather than in months or years. With the model we are seeking to
understand the causes of these trends, their interrelationships, and
their implications as much as one hundred years in the future.'
typeset -g -A on_conclusions
on_conclusions=( Our conclusions\ are: )
typeset -a on_conclusion_1
on_conclusion_1=( 1.\ If\ the\ present\ growth\ trends\ in\ world\ population, industrialization,\ pollution,\ food\ production,\ and\ resource\ depletion continue\ unchanged,\ the\ limits\ to\ growth\ on\ this\ planet\ will\ be reached\ sometime\ within\ the\ next\ one\ hundred\ years.\ The\ most\ probable result\ will\ be\ a\ rather\ sudden\ and\ uncontrollable\ decline\ in\ both population\ and\ industrial\ capacity. )
------------------------------------------
==========================================
/---
function :Var.Binding() {
    (( # >= 2 )) || :die\
        'Expected one or more variable names and one string name.'
    :str binding_name__vb=${@[-1]}
    :args.pop 1

    # Set this string to all such bindings, captured from the output of the
    # following subshell. In this obscure case, capturing subshell output
    # performs both more reliably *AND* efficiently (contrary to customary zeshy
    # doctrine). Why? Because:
    #
    # * Each such binding is produced as either a string literal *OR* the
    #   output of running "typeset -p". While the former is efficiently
    #   appendable to the passed string, attempting to append the latter to
    #   such string would require forking one subshell for each passed variable
    #   satisfying the corresponding conditions (i.e., local scalars).
    #   Since at least one subshell is required in either case, forking only
    #   one exterior subshell is dramatically (!!!!) more preferable to forking
    #   one interior subshell each iteration.
    # * Perhaps more importantly, list and map items are *NOT* quote-escapable
    #   in scalar assignments (e.g., when appending to the passed string).
    #   Curiously, list and map items are quote-escapable in both list
    #   assignments and output commands. While this arguably constitutes a zsh
    #   bug, the only alternative is to output rather than append such items:
    #   e.g.,
    #
    #    # Test list.
    #    :list de_te_spellemenn=( "Trollskau, skrømt" "og kølabrenning" )
    #    :str quoted_list
    #
    #    # This is terrible. zsh concatenates such list items!
    #    >>> quoted_list="${(qq@)de_te_spellemenn}"
    #    >>> :stdout.echo "${quoted_list}"
    #    'Trollskau, skrømt og kølabrenning'
    #
    #    # This isn't. zsh actually separates such list items.
    #    >>> :stdout.echo "${(qq@)de_te_spellemenn}"
    #    'Trollskau, skrømt' 'og kølabrenning'
    #
    # Given the requirement for such subshell, we implement the core logic to
    # be performed by such subshell as a distinct getter function. This has the
    # demonstrable benefit of expanding all aliases in such function at
    # function definition time rather than at function call time, as would
    # otherwise be the case if such function were inlined in such subshell here.
    :Str.set "${binding_name__vb}" "$(:Var.binding "${@}")"
}

#FIXME: In lieu of unit tests...
# function varo() {
#     string_global YIL
#     :str yil binding
#     :Var.Binding binding yil YIL
#     :stdout.echo "bindings: ${binding}"
# }

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str :Var.print(+:Var var_names)

Print a human-readable synopsis of all passed variables.

This synopsis will describe both the type and value of each passed variable.
/---
function :Var.print() {
    die_unless_args 'Expected one or more variable names.'

    #FIXME: While fine, this output is rather bland and difficult to read. For
    #readability, lightly parse and colorify this output. See
    #print_aliases_cli() for similar code.

    # Print these variables.
    {
        print_message_heading 'Variable Definitions'
        builtin typeset -p -- "${@}"
    } | page_stdin
}
