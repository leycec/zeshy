#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
*Float variables* (i.e., variables whose values ore floating point numbers
approximating real numbers).
-/-

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_float(
    :str value ?:str error_message='"${value}" not a float.')

Throw an exception with the passed message unless the passed string is a float.

== See Also ==

* is_float().
/---
function die_unless_float() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :str text="${1}"
    is_float "${text}" :or :die "${2:-\"${text}\" not a float.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:boolean] is_float(:str value)

Report success only if the passed string is a *float* (i.e., a string consisting
of optional negative sign, one or more digits, a decimal point, and optional
digits).
/---
function is_float() {
    # See :int.is() for further details.
    die_unless_arg 'Expected one string.'
    :is "${1}" == (|-)<->.(|<->) :si
}

# ....................{ ROUNDERS                           }....................
:func.doc <<'/---'
:float round_float(:float number ?:int precision=0)

Round the passed float to the passed number of decimal places (defaulting to 0
and hence rounding to a whole integer).
/---
function round_float() {
    die_unless_args_1_to_2 'Expected one float and optional precision.'
    :str number="${1}" precision="${2:-0}"
    die_unless_float "${number}"
    :int.die_unless_nonnegative "${precision}"

    # Round this float. By design, printf() rounds rather than truncates.
    printf "%.${precision}f\n" ${number}
}
