#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *system-specific integer setters* (i.e., functions setting integer
variables to system-specific integer metadata).
/---

# ....................{ SETTERS                            }....................
#FIXME: Given such setter, it's not terribly arduous to define other setters
#calling such setter: e.g.,
#
#* Set the passed integer to the *minimum value* of integers on the current system.
#  :void :int.set_system_min(`^:int `max_name)

:func.document <<'/---'
:void :int.set_system_bit_width(`^:int `bit_width_name)

Set the passed integer to the *bit width* (i.e., number of allocated bits, also
referred to as *precision*) of integers on the current system.

== Bit Widths ==

Specifically, `zsh` guarantees such width to be:

* 64 on 64-bit architectures.
* 32 on 32-bit architectures.

Since such width coincides with standard C and C++ definitions of the `long`
datatype, `zeshy` integers are effectively longs.
/---
function :int.set_system_bit_width() {
    # While zsh provides no explicit globals or builtins for retrieving such
    # width, such width may be manually obtained by testing whether or not a
    # 32-bit integer with only the high bit set is interpreted as a negative
    # number or not. If such integer is negative, such bit corresponds to the
    # sign bit under customary two's complement representation, implying
    # integers to be at most 32 bits wide. Else, integers are at most 64 bits
    # wide. Since zsh guarantees one or the other, we needn't explicitly test
    # the latter when the former fails.
    if (( (1 << 31) > 0 )) {
        :int.set "${1}" 64
    } else {
        :int.set "${1}" 32
    }
}

#* Set the passed integer to the *maximum value* of integers on the current system.
#  :void :int.set_system_max(`^:int `max_name)

# --------------------( WASTELANDS                         )--------------------
