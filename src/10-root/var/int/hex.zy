#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Hexadecimal strings* (i.e., base 16 integers signifying values 10 through 15 as
characters `A` through `F`).
/---

#FIXME: Reduce "_hexadecimal" to "_hex" everywhere. Leave "_decimal" as is,
#however. There's no meaningfully familiar truncation of such word, as with
#"_string" elsewhere.

# ....................{ EXCEPTIONS                         }....................
#FIXME: Define new type aliases resembling:
#
#    alias integer_decimal="integer_in_base 10"
#    alias integer_hexadecimal="integer_in_base 16"
#    alias integer_octal="integer_in_base 8"
#
#While redundant, the "integer_decimal" alias improves orthogonality: namely,
#there's a :hex.to_int() function and a hexadecimal "type"
#but no decimal "type". Fix that.

:func.doc <<'/---'
:void :hex.die_unless(
    :str value
    ?:str error_message='String "${value}" not a hexadecimal integer (e.g., "0xFEEDFACE").')

Throw an exception with the passed message unless the passed string is an
integer in base 16 hexadecimal format.

== See Also ==

* :hex.is().
/---
function :hex.die_unless() {
    die_unless_args_1_to_2 'Expected one string and optional error message.'
    :str value="${1}"
    :hex.is "${value}" :or :die\
        "${2-String \"${value}\" not a hexadecimal integer (e.g., \"0xFEEDFACE\").}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :hex.is(:str value)

Report success only if the passed string is an integer in base 16 hexadecimal
format and hence prefixed by either `0x` or `16#` (e.g., `16#DEADFACE`).

== Examples ==

.:hex.is()
==========================================
[source]
------------------------------------------
>>> :str on_ignorance="
... Ignorance is king. Many would not profit by his abdication. Many enrich
... themselves by means of his dark monarchy. They are his Court, and in his
... name they defraud and govern, enrich themselves and perpetuate their
... power. Even literacy they fear, for the written word is another channel
... of communication that might cause their enemies to become united. Their
... weapons are keen-honed, and they use them with skill. They will press
... the battle upon the world when their interests are threatened, and the
... violence which follows will last until the structure of society as it
... now exists is leveled to rubble, and a new society emerges. I am sorry:
... But that is how I see it."
>>> :hex.is "0xFEEDBEEF" :and get_string_line "${on_ignorance}" 1\
Ignorance is king. Many would not profit by his abdication. Many enrich
------------------------------------------
==========================================
/---
function :hex.is() {
    die_unless_arg 'Expected one string.'
    :is ${1} == ('0x'|'16#')[[:xdigit:]]## :si
}

# ....................{ CONVERTERS ~ decimal               }....................
:func.doc <<'/---'
:str :hex.from_int(:int integer)

Convert the passed base 10 string integer to hexadecimal format.

== Examples ==

.:hex.from_int()
==========================================
[source]
------------------------------------------
>>> :hex.from_int 3405691582
0xCAFEBABE
------------------------------------------
==========================================
/---
function :hex.from_int() {
    die_unless_arg 'Expected one integer.'
    :str decimal="${1}"
    :int.die_unless "${decimal}"

    # Convert this decimal.
    :stdout.echo $(( [#16] decimal ))
}


#FIXME: This function is overly strict. The caller shouldn't be required to
#prefix this string with a hexadecimal prefix (i.e., either "0x" or "16#"). If
#this prefix is absent, simply silently prefix this string with "0x" before
#attempting to convert this number. Not too nice?
:func.doc <<'/---'
:int :hex.to_int(:str hexadecimal)

Convert the passed base 16 integer in hexadecimal format to base 10.

== Examples ==

.:hex.to_int()
==========================================
[source]
------------------------------------------
>>> :hex.to_int 0xBADF00D
195948557
------------------------------------------
==========================================
/---
function :hex.to_int() {
    die_unless_arg 'Expected one hexadecimal string.'
    :str hexadecimal="${1}"
    :hex.die_unless "${hexadecimal}"

    # Convert this hexadecimal.
    :stdout.echo $(( [#10] hexadecimal ))
}
