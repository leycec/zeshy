#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Copy the integer-specific caveats in "doc/README.dev" here, to be
#incorporated into zeshy's formal documentation.

:parcel <<'/---'
Core integer functionality.

== Caveats ==

As `doc/README.dev` discusses, integer variables suffer numerous deficiencies,
including forced casting of non-integer types to 0 _and_ forced rounding down
of float types without error or warning. Since string variables suffer no such
deficiencies and implicitly support integer values, consider declaring integers
to be of type string instead. In either case, this component seemlessly handles
integer values and hence both types.
/---

# ....................{ GETTERS                            }....................
#FIXME: Refactor into setters.

:func.doc <<'/---'
void get_integer_maximum(integer number1, ...)

Get the largest of the passed integers: e.g.,

.get_integer_maximum()
==========================================
[source]
------------------------------------------
>>> get_integer_maximum 4 8 15 16 23 42
42
------------------------------------------
==========================================
/---
function get_integer_maximum() {
    die_unless_args 'Expected one or more integers.'
    :int.die_unless "${@}"

    # Dismantled, this is:
    #
    # * "(On)", sorting such integers in descending order.
    # * "[1]", returning the first such integer.
    :stdout.echo "${${(On)@}[1]}"
}

:func.doc <<'/---'
void get_integer_minimum(integer number1, ...)

Get the largest of the passed integers: e.g.,

.get_integer_minimum()
==========================================
[source]
------------------------------------------
>>> get_integer_minimum 4 6 8 10 12 14 16 18 20 22 24 26 28 30 36 38 42
4
------------------------------------------
==========================================
/---
function get_integer_minimum() {
    die_unless_args 'Expected one or more integers.'
    :int.die_unless "${@}"

    # Dismantled, this is:
    #
    # * "(on)", sorting such integers in ascending order.
    # * "[1]", returning the first such integer.
    :stdout.echo "${${(on)@}[1]}"
}

# ....................{ CONVERTERS                         }....................
#FIXME: Refactor this function to operate on a passed integer variable in-place
#and tHen rename this function to :Str.localize_int().

# If:
#
# * GNU printf() is available, defer to this command, efficiently implementing
#   this conversion with proper localization. ("Solid gold, mate.")
# * Else, implement this conversion in pure zsh.
:declare_func_if_or_noop\
    ':str convert_integer_to_string_localized(:int number)'\
    ':str number="${1}"'\
    'is_pathable_gnu printf' 'command printf "%''d\n" "${number}"'\
    ':else' '
        # Thousandths separator specific to the current locale.
        :str separator
        separator="$(get_locale_delimiter_thousands)"

        # Reverse such integer as a string.
        number="$(reverse_string "${number}")"

        # Suffix every set of three digits with such separator.
        number="${x//(#b)([0-9](#c3))/${match[1]}${separator}}"

        # If the number of digits in such integer is a multiple of three, the
        # prior replacement appended an superfluous separator. Excise it.
        remove_string_suffix number "${separator}"

        # Reverse such string back into an integer.
        reverse_string "${number}"' <<'/---'
Localize the passed integer into a human-readable string specific to the current
locale.

For English locales, this function comma-separates thousandths places.

== Examples ==

==========================================
[source]
------------------------------------------
>>> convert_integer_to_string_localized $(round_float $((4.54 * 10**9)))
4,540,000,000
------------------------------------------
==========================================
/---
