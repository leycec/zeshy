#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Integer testers* (i.e., functions testing integer values).
/---

# ....................{ EXCEPTIONS                         }....................
#FIXME: Actually, this function only matches decimal integers. Hence, rename
#this function to die_unless_decimal() and create a new :int.die_unless()
#function properly matching *ALL* integer strings. Such functions needs to match
#both "0x"- and "16#"-style base prefixes.

:func.doc <<'/---'
void :int.die_unless(
    string value,
    string error_message = "String \"${value}\" not an integer.")

Throw an exception with the passed message unless the passed string is an
integer. See :int.is() for further details.
/---
function :int.die_unless() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :int.is "${1}" :or {
        :str value="${1}"
        :die "${2-String \"${value}\" not an integer.}"
    }
}

:func.doc <<'/---'
void :int.die_unless(string value1, ...)

Throw an exception with a stock message unless all passed strings are integers.
See :int.is() for further details.
/---
function :int.die_unless() {
    die_unless_args 'Expected one or more strings.'
    :str value
    for  value ("${@}") { :int.die_unless "${value}" }
}

# ....................{ EXCEPTIONS ~ zero                  }....................
:func.doc <<'/---'
void :int.die_unless_nonzero(
    int value,
    string error_message = "Integer ${value} not nonzero.")

Throw an exception with the passed message unless the passed integer is
nonzero. See :is_int_nonzero() for further details.
/---
function :int.die_unless_nonzero() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :is_int_nonzero "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} not nonzero.}"
    }
}

# ....................{ EXCEPTIONS ~ sign                  }....................
:func.doc <<'/---'
void :int.die_unless_positive(
    string integer,
    string error_message = "Integer ${integer} not positive.")

Throw an exception with the passed message unless the passed string is a
positive integer. See :int.is_positive() for further details.
/---
function :int.die_unless_positive() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :int.is_positive "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} not positive.}"
    }
}

:func.doc <<'/---'
void :int.die_unless_negative(
    int value,
    string error_message = "Integer ${integer} not negative.")

Throw an exception with the passed message unless the passed integer is
negative. See :is_int_negative() for further details.
/---
function :int.die_unless_negative() {
    die_unless_args_1_to_2\
        'Expected one integer and optional error message.'
    :is_int_negative "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} not negative.}"
    }
}

:func.doc <<'/---'
void :int.die_unless_nonnegative(
    int value,
    string error_message = "Integer ${integer} negative.")

Throw an exception with the passed message unless the passed integer is
nonnegative. See :is_int_nonnegative() for further details.
/---
function :int.die_unless_nonnegative() {
    die_unless_args_1_to_2\
        'Expected one integer and optional error message.'
    :is_int_nonnegative "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} negative.}"
    }
}

:func.doc <<'/---'
void :int.die_unless_nonpositive(
    int value,
    string error_message = "Integer ${integer} positive.")

Throw an exception with the passed message unless the passed integer is
nonpositive. See :is_int_nonpositive() for further details.
/---
function :int.die_unless_nonpositive() {
    die_unless_args_1_to_2\
        'Expected one integer and optional error message.'
    :is_int_nonpositive "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} positive.}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_int_nonzero(int value)

Report success if the passed integer is *nonzero* (i.e., any integer except 0).
If such value is _not_ an integer, an exception is thrown.
/---
function :is_int_nonzero() {
    die_unless_arg 'Expected one integer.'
    :str value=${1}
    :int.die_unless "${value}"
    (( value ))
}

# ....................{ TESTERS ~ parity                   }....................
:func.doc <<'/---'
[status: bool] :int.is_even(int value)

Report success if the passed integer is even. If such value is _not_ an
integer, an exception is thrown.
/---
function :int.is_even() {
    # Validate sanity.
    die_unless_arg 'Expected one integer.'
    :str value="${1}"
    :int.die_unless "${value}"

    # Test such parity.
    not (( value & 1 ))
}

:func.doc <<'/---'
[status: bool] :int.is_odd(int value)

Report success if the passed integer is odd. If such value is _not_ an
integer, an exception is thrown.
/---
function :int.is_odd() {
    # Validate sanity.
    die_unless_arg 'Expected one integer.'
    :str value="${1}"
    :int.die_unless "${value}"

    # Test such parity.
    (( value & 1 ))
}

:func.doc <<'/---'
[status: bool] :is_int_parity_equals(int value1, int value2)

Report success if the passed integers share the same *parity* (i.e., are either
both even or both odd). If either such value is _not_ an integer, an exception
is thrown.
/---
function :is_int_parity_equals() {
    die_unless_args_2 'Expected two integers.'
    :str value1="${1}" value2="${2}"
    :int.die_unless "${value1}" "${value2}"

    # Test such parity by recalling that two integers share the same parity if
    # and only if their sum is even.
    :int.is_even $(( value1 + value2 ))
}
