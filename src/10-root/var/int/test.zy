#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Integer testers* (i.e., functions testing integer values).
/---

# ....................{ EXCEPTIONS                         }....................
#FIXME: Actually, this function only matches decimal integers. Hence, rename
#this function to die_unless_decimal() and create a new :int.die_unless()
#function properly matching *ALL* integer strings. Such functions needs to match
#both "0x"- and "16#"-style base prefixes.

:func.doc <<'/---'
:void :int.die_unless(
    :str value ?:str error_message='String "${value}" not an integer.')

Throw an exception with the passed message unless the passed string is an
integer.

== See Also ==

* :int.is().
/---
function :int.die_unless() {
    die_unless_args_1_to_2 'Expected one string and optional error message.'
    :int.is "${1}" :or {
        :str value="${1}"
        :die "${2-String \"${value}\" not an integer.}"
    }
}


:func.doc <<'/---'
:void :int.die_unless(+:str values)

Throw an exception unless all passed strings are syntactically valid integers.

== See Also ==

* :int.is().
/---
function :int.die_unless() {
    die_unless_args 'Expected one or more strings.'

    #FIXME: If passed multiple values, it would be more efficient to simply:
    #
    #* Concatenate these values in a space-delimited manner into a single
    #  string.
    #* Test whether this single string contains only space-delimited integers
    #  with a single glob- or regex-based match test.
    :str value
    for  value ("${@}") {
        :int.is "${value}" :or :die "String \"${value}\" not an integer."
    }
}

# ....................{ EXCEPTIONS ~ zero                  }....................
:func.doc <<'/---'
:void :int.die_unless_nonzero(
    :int value ??:str error_message='Integer ${value} not nonzero.')

Throw an exception with the passed message unless the passed integer is
nonzero.

== See Also ==

* :is_int_nonzero().
/---
function :int.die_unless_nonzero() {
    die_unless_args_1_to_2 'Expected one string and optional error message.'
    :is_int_nonzero "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} not nonzero.}"
    }
}

# ....................{ EXCEPTIONS ~ sign                  }....................
:func.doc <<'/---'
:void :int.die_unless_positive(
    :str integer ?:str error_message='Integer ${integer} not positive.')

Throw an exception with the passed message unless the passed string is a
positive integer.

== See Also ==

* :int.is_positive().
/---
function :int.die_unless_positive() {
    die_unless_args_1_to_2 'Expected one string and optional error message.'
    :int.is_positive "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} not positive.}"
    }
}


:func.doc <<'/---'
:void :int.die_unless_negative(
    :int value ?:str error_message='Integer ${integer} not negative.')

Throw an exception with the passed message unless the passed integer is
negative.

== See Also ==

* :is_int_negative().
/---
function :int.die_unless_negative() {
    die_unless_args_1_to_2 'Expected one integer and optional error message.'
    :is_int_negative "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} not negative.}"
    }
}


:func.doc <<'/---'
:void :int.die_unless_nonnegative(
    :int value ?:str error_message='Integer ${integer} negative.')

Throw an exception with the passed message unless the passed integer is
nonnegative.

== See Also ==

* :is_int_nonnegative().
/---
function :int.die_unless_nonnegative() {
    die_unless_args_1_to_2 'Expected one integer and optional error message.'
    :is_int_nonnegative "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} negative.}"
    }
}


:func.doc <<'/---'
:void :int.die_unless_nonpositive(
    :int value ?:str error_message="Integer ${integer} positive.")

Throw an exception with the passed message unless the passed integer is
nonpositive.

== See Also ==

* :is_int_nonpositive().
/---
function :int.die_unless_nonpositive() {
    die_unless_args_1_to_2 'Expected one integer and optional error message.'
    :is_int_nonpositive "${1}" :or {
        :str value="${1}"
        :die "${2-Integer ${value} positive.}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_int_nonzero(:int value)

Report success if the passed integer is *nonzero* (i.e., any integer except 0).

If this value is _not_ an integer, an exception is thrown.
/---
function :is_int_nonzero() {
    die_unless_arg 'Expected one integer.'
    :str value=${1}
    :int.die_unless "${value}"
    (( value ))
}

# ....................{ TESTERS ~ parity                   }....................
:func.doc <<'/---'
[status=:bool] :int.is_even(:int value)

Report success if the passed integer is even.

If this value is _not_ an integer, an exception is thrown.
/---
function :int.is_even() {
    die_unless_arg 'Expected one integer.'
    :str value="${1}"
    :int.die_unless "${value}"

    # Test this parity.
    :not (( value & 1 ))
}


:func.doc <<'/---'
[status=:bool] :int.is_odd(int value)

Report success if the passed integer is odd.

If this value is _not_ an integer, an exception is thrown.
/---
function :int.is_odd() {
    die_unless_arg 'Expected one integer.'
    :str value="${1}"
    :int.die_unless "${value}"

    # Test this parity.
    (( value & 1 ))
}


:func.doc <<'/---'
[status=:bool] :is_int_parity_equals(:int value1 :int value2)

Report success if the passed integers share the same *parity* (i.e., are either
both even or both odd).

If either such value is _not_ an integer, an exception is thrown.
/---
function :is_int_parity_equals() {
    die_unless_args_2 'Expected two integers.'
    :str value1="${1}" value2="${2}"
    :int.die_unless "${value1}" "${value2}"

    # Test such parity by recalling that two integers share the same parity if
    # and only if their sum is even.
    :int.is_even $(( value1 + value2 ))
}
