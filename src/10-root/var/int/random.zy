#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Integer-specific random number generators (RNGs)* (i.e., functions generating
pseudo-random integers).
/---

# ....................{ GETTERS                            }....................
# If:
#
# * The current shell provides rand48(), prefer such function to integer global
#   ${RANDOM}. The former is more reliable, efficient, and accurate.
# * Else, fallback to such global. Such global is strictly in [0, 32767] *AND*
#   requires reseeding on each expansion, complicating the implementation below.
:declare_func_if_or_noop\
    ':void :set_int_to_random_in_range(
        :Int int_name :int minimum :int maximum) [var_name_suffix="__sitrir"]'\
    ':int.die_unless_"<=" "${minimum__sitrir}" "${maximum__sitrir}"'\
    is_math_function_rand48 '
        # Since rand48() returns a float in [0.0, 1.0), adjust accordingly.
        :Int.set "${int_name__sitrir}"\
            $(( minimum__sitrir + int(
                rand48() * (maximum__sitrir - minimum__sitrir + 1)) ))'\
    :else '
        # Reseed zsh''s internal random number generator with a mock non-
        # pseudorandom integer: the fractional segment of the current time
        # (typically, in nanoseconds). Failure to do so *WILL* return the same
        # integer on each call to this function with the same parameters.
        RANDOM=${EPOCHREALTIME##*.}

        # If such range is within that provided by ${RANDOM} (i.e., in
        # [0, 32767], the positive end of the range provided by a 2-byte signed
        # short), modulo ${RANDOM} itself to produce a random integer in
        # [0, maximum - minimum], where maximum - minimum + 1 is the number of
        # possible integers in such range. Adding the minimum shifts this to
        # [minimum, maximum], as expected.
        if (( minimum__sitrir >= 0 && maximum__sitrir <= 32767 )) {
            :Int.set "${int_name__sitrir}"\
                $(( minimum__sitrir + (
                    RANDOM % (maximum__sitrir - minimum__sitrir + 1)) ))
        # Else, quantize ${RANDOM} to a float in [0.0, 1.0] and apply a similar
        # transformation as above, noting that the end bound is inclusive in
        # this case rather than exclusive and hence off by 1.
        } else {
            :float random__sitrir; random__sitrir=$(( RANDOM / 32767 ))
            :Int.set "${int_name__sitrir}"\
                $(( minimum__sitrir + int(
                    random__sitrir * (maximum__sitrir - minimum__sitrir)) ))
        }' <<'/---'
Set the value of the passed integer variable to a random integer in the passed
*inclusive range* (i.e., guaranteed to be greater than or equal to the passed
minimum integer _and_ less than or equal to the passed maximum integer): e.g.,

.:set_int_to_random_in_range()
==========================================
[source]
------------------------------------------
>>> :set_int_to_random_in_range 0x0DDBA11 0x60DDE55
0x1D0112E
------------------------------------------
==========================================
/---
