#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *RGB colors* (i.e., colors described by red, green, and blue components
in the range `[1, 256]` formatted as either hexadecimal or decimal triplets).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_color_rgb_hex(
    string value,
    string error_message =
        "String \"${value}\" not a hexadecimal RGB color (e.g., `#FACADE`).")

Throw an exception with the passed message unless the passed string is an RGB
color in base 16 hexadecimal format. See is_color_rgb_hex:() for further
details.
/---
function :die_unless_color_rgb_hex() {
    die_unless_args_1_to_2 'Expected one string and optional error message.'
    string value="${1}"
    is_color_rgb_hex: "${value}" or :die\
        "${2-String \"${value}\" not a hexadecimal RGB color (e.g., `#FACADE`).}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] is_color_rgb_hex:(string value)

Report success if the passed string is an RGB color in base 16 hexadecimal
format. Specifically, report success if such string is a *hex triplet* (i.e.,
three-byte integer expressed as six consecutive hexadecimal digits) optionally
prefixed by `#` (e.g., `#EFFACE`): e.g.,

.is_color_rgb_hex:()
==========================================
[source]
------------------------------------------
>>> string on_law_and_order=\
...    "The men who are responsible for the My Lai massacre are not on trial;
...     they are in Washington serving various functions, primary and
...     subordinate, that have to do with the unleashing of massacres, which
...     surprise them when they occur. At Kent State University, four students
...     were killed by the National Guard and students were indicted. In every
...     city in this country, when demonstrations take place, the protesters –
...     whether they have demonstrated or not, whatever they have done – are
...     assaulted and clubbed by police and then they are arrested for
...     assaulting a police officer."
>>> is_color_rgb_hex: '#ACCEDE' and get_string_line "${on_law_and_order}" 1
The men who are responsible for the My Lai massacre are not on trial;
------------------------------------------
==========================================
/---
function is_color_rgb_hex:() {
    die_unless_arg 'Expected one string.'
    is "${1}" == ('#'|)[[:xdigit:]](#c6) si
}

# ....................{ CONVERTERS ~ decimal               }....................
#FIXME: Rename to :get_color_rgb_hex_as_decimal().
:func.doc <<'/---'
string convert_color_rgb_hex_to_decimal:(string color_rgb_hex)

Convert the passed RGB color from base 16 hexadecimal format (optionally
prefixed by `#`) to `,`-delimited base 10 decimal format: e.g.,

.convert_color_rgb_hex_to_decimal:()
==========================================
[source]
------------------------------------------
>>> convert_color_rgb_hex_to_decimal: '#DECADE'
222,202,222
------------------------------------------
==========================================
/---
function convert_color_rgb_hex_to_decimal:() {
    die_unless_arg 'Expected one hexadecimal RGB color.'
    convert_color_rgb_hex_to_decimal_with_separator: "${1}" ','
}

#FIXME: Rename to :get_color_rgb_hex_as_decimal_with_separator().
:func.doc <<'/---'
string convert_color_rgb_hex_to_decimal_with_separator:(
    string color_rgb_hex, string separator)

Convert the passed RGB color from base 16 hexadecimal format (optionally
prefixed by `#`) to base 10 decimal format, suffixing the red and green
components of such format by the passed delimiter of arbitrary length: e.g.,

.convert_color_rgb_hex_to_decimal:()
==========================================
[source]
------------------------------------------
>>> convert_color_rgb_hex_to_decimal: '#DEEDED' ';'
222;237;237
------------------------------------------
==========================================
/---
function convert_color_rgb_hex_to_decimal_with_separator:() {
    # Validate sanity.
    die_unless_args_2 'Expected one hexadecimal RGB color and one separator.'
    :str hex="${1}" separator="${2}"
    :die_unless_color_rgb_hex "${hex}"

    # If such color is prefixed by "#", remove such prefix.
#   print "hex: ${hex}"
    remove_string_prefix hex '#'
#   print "hex (stripped): ${hex} (${hex[1,2]}; $(( [#10] ${hex[1,2]} )))"

    # Convert such decimal. For efficiency, inline such implementation rather
    # than perform three consecutive command substitutions. See
    # convert_hexadecimal_to_decimal() for further details.
    #
    # Since "$(( [#10] ${hex[m,n]} ))" for all possible integers ${m} and ${n}
    # expands to 0 unless ${hex} is explicitly prefixed by either "0x" or "16#",
    # resort to obscure zsh theatrics to ensure this is the case.
    :str.output\
        "$(( [#10] ${:-0x${hex[1,2]}} ))${separator}$(( [#10] ${:-0x${hex[3,4]}} ))${separator}$(( [#10] ${:-0x${hex[5,6]}} ))"
}

#FIXME: In lieu of unit tests...
# function hexo() {
#     convert_color_rgb_hex_to_decimal: '#ff00ff'
#     convert_color_rgb_hex_to_decimal: '#decade'
# }

# --------------------( WASTELANDS                         )--------------------
#    die_unless_arg 'Expected one hexadecimal RGB color.'
#    string hex="${1}" hex_r hex_g hex_b
#    :die_unless_color_rgb_hex "${hex}"
#    :set_string_to_string_sans_prefix: hex "${hex}" '#'
##   print "hex (stripped): ${hex} (${hex[1,2]}; $(( [#10] ${hex[1,2]} )))"
#    :str.output\
#        "$(( [#10] ${:-0x${hex[1,2]}} )),$(( [#10] ${:-0x${hex[3,4]}} )),$(( [#10] ${:-0x${hex[5,6]}} ))"
