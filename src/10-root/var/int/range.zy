#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Integer ranges.
/---

# ....................{ EXCEPTIONS                         }....................
:func_ ':void ":int.die_unless_>="(:int number :int minimum)' :func{
    :int.is_'>=' "${number}" "${minimum}" :or
        :die ${number}' less than '${minimum}'.'
}:func <<'/---'
Throw an exception unless the first passed integer is greater than or equal to
the second passed integer.
/---


:func_ ':void ":int.die_unless_<="(:int number :int maximum)' :func{
    :int.is_'<=' "${number}" "${maximum}" :or
        :die ${number}' greater than '${maximum}'.'
}:func <<'/---'
Throw an exception unless the first passed integer is less than or equal to the
second passed integer.
/---


:func_ ':void ":int.die_unless_>=<"(
    :int number :int minimum :int maximum)' :func{
    :int.is_'>=<' "${number}" "${minimum}" "${maximum}" :or
        :die "${number} not in [${minimum}, ${maximum}]."
}:func <<'/---'
Throw an exception unless the passed integer is in the passed range.

== See Also ==

* :int.>=<().
/---

# ....................{ TESTERS                            }....................
:func_ '[status=:bool] ":int.is_>="(:int number :int minimum)' :func{
    (( number >= minimum ))
}:func <<'/---'
Report success only if the first passed integer is greater than or equal to the
second passed integer.
/---


:func_ '[status=:bool] ":int.is_<="(:int number :int maximum)' :func{
    (( number <= maximum ))
}:func <<'/---'
Report success only if the first passed integer is less than or equal to the
second passed integer.
/---


:func_ '[status=:bool] ":int.is_>=<"(
    :int number :int minimum :int maximum)' :func{
    :int.die_unless_'<=' ${minimum} ${maximum}
    (( minimum <= number && number <= maximum ))
}:func <<'/---'
Report success only if the first passed integer is in the passed range (i.e.,
both greater than or equal to the second passed integer _and_ less than or equal
to the third passed integer).

== Examples ==

==========================================
[source]
------------------------------------------
>>> ':int.is_>=<' 1776 1694 1913 :and :stdout.echo\
...    "If history shows anything, it is that there's no better way to justify
...     relations founded on violence, to make such relations seem moral, than
...     by reframing them in the language of debt — above all, because it
...     immediately makes it seem that it's the victim who's doing something
...     wrong."
If history shows anything, it is that there's no better way to justify
relations founded on violence, to make such relations seem moral, than
by reframing them in the language of debt — above all, because it
immediately makes it seem that it's the victim who's doing something
wrong.
------------------------------------------
==========================================
/---

# ....................{ GETTERS                            }....................
#FIXME: Refactor the following getters into setters.
#FIXME: If the passed range is sufficiently large, the current implementation of
#this function silently terminates the shell, which is terrible. This appears to
#be somewhere between 100,000 to 1,000,000 elements. Hence, if such range is
#larger than 100000, just throw an exception. There's really no point in ever
#listing that many integers anyway, so this is a helpful reality check as well.

:func.doc <<'/---'
:str get_integers_in_range(:int minimum :int maximum)

Space-delimited string listing all integers in the passed inclusive range.

== Examples ==

.get_integers_in_range()
==========================================
[source]
------------------------------------------
>>> get_integers_in_range 19450806 19450809
19450806 19450807 19450808 19450809
------------------------------------------
==========================================
/---
function get_integers_in_range() {
    die_unless_args_2 'Expected one minimum integer and one maximum integer.'
    get_integers_in_range_with_step "${1}" "${2}" 1
}


:func.doc <<'/---'
int get_integers_in_range_with_step(
    int start, int end, int step)

Space-delimited string listing all integers in the passed inclusive range
incremented by the passed ``step'' starting at the first passed integer and
stopping at the second passed integer, delimited by spaces.

== See Also ==

* for_integers_in_range_with_step().

== Examples ==

.get_integers_in_range_with_step()
==========================================
[source]
------------------------------------------
>>> get_integers_in_range_with_step1 19551101 19750430 300000
19551101 19581101 19611101 19641101 19671101 19701101 19731101
------------------------------------------
==========================================
/---
function get_integers_in_range_with_step() {
    die_unless_args_3\
        'Expected one start integer, one end integer, and one step.'
    :str start="${1}" end="${2}" step="${3}"
    :int.die_unless "${start}" "${end}"
    :int.die_unless_nonzero "${step}"

    # If such range exceeds an experimentally (if non-rigorously) verified
    # maximum, throw an exception. Since attempting to make a list of integers
    # in such range induces zsh to silently terminate the current shell,
    # throwing an exception is the lesser of two certain evils.
    (( abs((stop - start) / step) < 100000 )) :or
        :die "Range [${start}, ${stop}] with step ${step} exceeds zsh limits."

    # Get such integers.
    :stdout.echo {${start}..${end}..${step}}
}

# ....................{ ITERATORS                          }....................
#FIXME: Refactor into a block alias.
:func.doc <<'/---'
:str for_integers_in_range(
    ?:str integer_name="INTEGER"
    :int minimum
    :int maximum
    :str command
)

Run the passed command for each integer in the passed inclusive range in
ascending order, setting the passed local variable (defaulting to `${INTEGER}`)
to each such integer starting at the passed minimum and stopping at the passed
maximum.

== Examples ==

.for_integers_in_range()
==========================================
[source]
------------------------------------------
>>> for_integers_in_range reconstruction_year 1869 1929\
...     '(( reconstruction_year % 10 )) or :stdout.echo ${reconstruction_year}'
1870
1880
1890
1900
1910
1920
------------------------------------------
==========================================
/---
function for_integers_in_range() {
    die_unless_args_3_or_4\
        'Expected optional integer name, one minimum integer, one maximum integer, and one command.'
    if { is_args_3 } {
        for_integers_in_range_with_step "${@[1,2]}" 1 "${3}"
    } else {
        for_integers_in_range_with_step "${@[1,3]}" 1 "${4}"
    }
}


#FIXME: Refactor into a block alias.
:func.doc <<'/---'
:str for_integers_in_range_with_step(
    ?:str integer_name="INTEGER"
    :int start
    :int stop
    :int step
    :str command
)

Run the passed command for each integer in the passed inclusive range, setting
the passed local variable (defaulting to `${INTEGER}`) to each such integer
incremented by the passed ``step'' starting at the first passed integer and
stopping at the second passed integer.

If this step is:

* Positive, the starting integer should be less than or equal to the stopping
  integer. If this is the case, such integers are incremented in ascending
  order; else, this function silently returns without running such command.
* Negative, the starting integer should be greater than or equal to the stopping
  integer. If this is the case, such integers are decremented in descending
  order; else, this function silently returns without running such command.
* Zero, an exception is thrown to avoid an infinite loop.

If such step does _not_ evenly divides the absolute difference of such starting
and stopping integers, the last integer to be visited strictly precedes (i.e.,
is less than but _not_ equal to) such stopping integer. For example:

.for_integers_in_range_with_step()
==========================================
[source]
------------------------------------------
>>> for_integers_in_range_with_step first_plague_year 541 747 42\
...     ':stdout.echo ${first_plague_year}'
541
583
625
667
709
>>> for_integers_in_range_with_step second_plague_year 1844 1346 -84\
...     ':stdout.echo ${second_plague_year}'
1844
1760
1676
1592
1508
1424
1340
------------------------------------------
==========================================
/---
function for_integers_in_range_with_step() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize changes with get_integers_in_range_with_step().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # For orthogonality with both the glob operator ".." and common sense, do
    # *NOT* throw an exception if such start exceeds such stop integer.
    die_unless_args_4_or_5\
        'Expected optional integer name, one starting integer, one stopping integer, one step integer, and one command.'
    :str\
        integer_name='INTEGER'\
        start="${@[-4]}"\
        stop="${@[-3]}"\
        step="${@[-2]}"\
        command="${@[-1]}"
    if { is_args_5 } { integer_name="${1}" }
    :die_unless_var_name "${integer_name}"
    :int.die_unless "${start}" "${stop}"
    :int.die_unless_nonzero "${step}"
    :str.die_if_empty "${command}" 'Expected nonempty command.'

    # If this range is sufficiently small, make and iterate an ordered list of
    # all integers in this range. Practical (if non-rigorous) experimentation
    # demonstrates that making lists an order of magnitude larger induces
    # discernable slowdown and lists at least two orders of magnitude larger
    # termination of the current shell. In either case, the costs are
    # unacceptable. See "BRACE EXPANSION" under "man zshexpn" for further
    # details on the brace operator "..".
    if (( abs((stop - start) / step) <= 10000 )) {
        # Iterate such integers. Since brace operator ".." requires a positive
        # step for prroper iteration, pass the absolute value of such step.
        eval "for ${integer_name} ({${start}..${stop}..$(( abs(step) ))}) {
            ${command}
        }"
    # Else, such range is sufficiently large to require a just-in-time
    # alternative avoiding list construction: namely, for loop iteration.
    #
    # If this step is positive, iterate upwards.
    } elif (( step < 0 )) {
        eval "for ((
            ${integer_name}=${start};
            ${integer_name} <= ${stop};
            ${integer_name}+=${step} )) {
            ${command}
        }"
    # Else, this step is negative; iterate downwards.
    } else {
        eval "for ((
            ${integer_name}=${start};
            ${integer_name} >= ${stop};
            ${integer_name}+=${step} )) {
            ${command}
        }"
    }
}
