#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle *character converters* (i.e., functions converting to and from
characters).
-/-

# ....................{ CONVERTERS ~ from                  }....................
declare_function_with_stdin <<'/---'
decimal convert_character_to_decimal(character value)

Convert the passed character to the corresponding Unicode codepoint (and hence
ASCII codepoint if ASCII contains such character) in base 10 octal format: e.g.,

.convert_character_to_decimal()
==========================================
[source]
------------------------------------------
>>> convert_character_to_decimal "${ZESHY_ASCII_NEWLINE}"
10
------------------------------------------
==========================================
/---
function convert_character_to_decimal() {
    # Validate passed arguments.
    die_unless_arg 'expected one character'
    string value="${1}"
    :die_unless_char "${value}"

    # Convert such character with an absurdly concise one-liner.
    :string.output $(( #value ))
}

declare_function_with_stdin <<'/---'
hexadecimal convert_character_to_hexadecimal(character value)

Convert the passed character to the corresponding Unicode codepoint (and hence
ASCII codepoint if ASCII contains such character) in base 16 octal format: e.g.,

.convert_character_to_hexadecimal()
==========================================
[source]
------------------------------------------
>>> convert_character_to_hexadecimal "${ZESHY_ASCII_NEWLINE}"
0xA
------------------------------------------
==========================================
/---
function convert_character_to_hexadecimal() {
    # Validate passed arguments.
    die_unless_arg 'expected one character'
    string value="${1}"
    :die_unless_char "${value}"

    # Convert such character with an absurdly concise one-liner. While this
    # is also implementable as
    # 'convert_decimal_to_hexadecimal "$(convert_character_to_decimal "${1}")"',
    # this is certainly the most efficient implementation.
    :string.output $(( [#16] #value ))
}

declare_function_with_stdin <<'/---'
octal convert_character_to_octal(character value)

Convert the passed character to the corresponding Unicode codepoint (and hence
ASCII codepoint if ASCII contains such character) in base 8 octal format: e.g.,

.convert_character_to_octal()
==========================================
[source]
------------------------------------------
>>> convert_character_to_octal "${ZESHY_ASCII_NEWLINE}"
8#12
------------------------------------------
==========================================
/---
function convert_character_to_octal() {
    # Validate passed arguments.
    die_unless_arg 'expected one character'
    string value="${1}"
    :die_unless_char "${value}"

    # Convert such character with an absurdly concise one-liner.
    :string.output $(( [#8] #value ))
}

# ....................{ CONVERTERS ~ to                    }....................
declare_function_with_stdin <<'/---'
character convert_codepoint_to_character(string codepoint)

Convert the passed ASCII or Unicode codepoint to the corresponding character,
where such codepoint may be formatted in any of the following integer formats:

* *Decimal* (i.e., base 10). Codepoints _not_ prefixed by either `0x`, `16#`, or
  `8#` are assumed to be base 10 (e.g., `5`).
* *Hexadecimal* (i.e., base 16), prefixed by either `0x` or `16#` (e.g., `0x5`).
* *Octal* (i.e., base 8), prefixed by `8#` (e.g., `8#5`).

For example:

.convert_codepoint_to_character()
==========================================
[source]
------------------------------------------
>>> convert_codepoint_to_character 69
E
>>> convert_codepoint_to_character 16#x69
i
>>> convert_codepoint_to_character 0x69
i
>>> convert_codepoint_to_character 8#69
"
------------------------------------------
==========================================
/---
function convert_codepoint_to_character() {
    # Validate passed arguments.
    die_unless_arg 'expected one codepoint codepoint'
    string value="${1}"
    die_unless_codepoint "${value}"

    # zsh, you made life contemptibly easy here.
    :string.output "${(#)value}"
}

declare_function_with_stdin <<'/---'
character convert_decimal_to_character(decimal codepoint)

Convert the passed ASCII or Unicode codepoint in *base 10 decimal format* (i.e.,
_not_ prefixed by either `0x`, `16#`, or `8#`) to the corresponding character.
See convert_codepoint_to_character() for further details.
/---
function convert_decimal_to_character() {
    # Since the type of such codepoint must be checked, this function does not
    # reduce to simply calling convert_codepoint_to_character().
    die_unless_arg 'expected one decimal codepoint'
    string codepoint="${1}"
    die_unless_decimal "${codepoint}"
    :string.output "${(#)codepoint}"
}

declare_function_with_stdin <<'/---'
character convert_hexadecimal_to_character(hexadecimal codepoint)

Convert the passed ASCII or Unicode codepoint in *base 16 decimal format* (i.e.,
prefixed by either `0x` or `16#`) to the corresponding character. See
convert_codepoint_to_character() for further details.
/---
function convert_hexadecimal_to_character() {
    # Since the type of such codepoint must be checked, this function does not
    # reduce to simply calling convert_codepoint_to_character().
    die_unless_arg 'expected one hexadecimal codepoint'
    string codepoint="${1}"
    die_unless_hexadecimal "${codepoint}"
    :string.output "${(#)codepoint}"
}

declare_function_with_stdin <<'/---'
character convert_octal_to_character(octal codepoint)

Convert the passed ASCII or Unicode codepoint in *base 8 octal format* (i.e.,
prefixed by `8#`) to the corresponding character. See
convert_codepoint_to_character() for further details.
/---
function convert_octal_to_character() {
    # Since the type of such codepoint must be checked, this function does not
    # reduce to simply calling convert_codepoint_to_character().
    die_unless_arg 'expected one octal codepoint'
    string codepoint="${1}"
    die_unless_octal "${codepoint}"
    :string.output "${(#)codepoint}"
}

# --------------------( WASTELANDS                         )--------------------
#Convert the passed UTF-8 code (and hence ASCII, if such character is ASCII) in
#base 16 hexadecimal format to the corresponding character: e.g.,
#(and hence ASCII, if such codepoint is less than or equal to 128) 
    #FUXME: For efficiency, isn't this just...:
    #    return_string $(( [#16] #value ))
    #Naturally, test that. If it works, replace the current implementation.

    # Defer to convert_character_to_decimal().
#   die_unless_arg 'expected one character'

    # Test such variable. Support multibyte character encodings by
    # calling get_string_ansiless_length_printable() rather than get_string_length().
#FUXME: Rename to :die_unless_char(). (There might be a real
#"character" type, someday.)
