#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Characters* (i.e., strings of multibyte length 1).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :die_unless_char(
    :str text ?:str error_message='String "${text}" not a character.")

Throw an exception with the passed message unless the passed string is a
character. See :is_char() for further details.
/---
function :die_unless_char() {
    die_unless_args_1_to_2 'Expected one string and optional error message.'
    :str value="${1}"
    :is_char "${value}" :or :die "${2-String \"${value}\" not a character.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_char(:str text)

Report success if the passed string is either a single- or multibyte character
(i.e., either a single- or multibyte string of length 1).

By `zsh` constraints, this function incorrectly returns false for non-ASCII,
non-printable multibyte characters (e.g., Unicode code point U+00A0, a
non-breaking space). While this this is probably fine for most purposes, your
shell mileage may vary.
/---
function :is_char() {
    # zsh provides a builtin means of obtaining strings lengths in both single-
    # byte *AND* printable multibyte characters but *NOT* in multibyte
    # characters. Consequently, this function cannot be implemented by testing
    # string length. However, assuming the shell option "MULTIBYTE" retains its
    # default value, zsh does provide a builtin means of testing whether the
    # length of a string in multibyte characters is some number: glob operators!
    die_unless_arg 'Expected one string.'
    :is "${value}" == ? :si
}
