#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *map getters* (i.e., functions getting map keys, values, and metadata).
/---

#FIXME: Refactor all such getters into setters.

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
integer get_map_size(string map_name)

Get the number of key-value pairs in the passed map. By definition, this is
equivalent to the number of keys and the number of values in such map: e.g.,

.get_map_size()
==========================================
[source]
------------------------------------------
>>> map on_compromise; on_compromise=(
...     "I'm"       "interested in living in a world that has more wild"
...     "salmon"    "every year than the year before. A world that has more"
...     "migratory" "songbirds every year than the year before. A world that"
...     "has"       "less dioxins and flame retardants in mothers' breast milk."
...     "A"         "world not being destroyed. A world where krill populations"
...     "aren't"    "collapsing. A world where there are not dead zones in the"
...     "oceans."   "A world not being systematically dismantled. I want to"
...     "live"      "in a world that is not being killed. I will do whatever it"
...     "takes"     "to get there." )
>>> get_map_size on_compromise
9
------------------------------------------
==========================================
/---
function get_map_size() {
    # Validate sanity.
    die_unless_arg 'Expected one map name.'
    string map_name__gms="${1}"
    :Map.die_unless "${map_name__gms}"

    # Get such map's size.
    :stdout.echo ${#${(k@P)map_name__gms}}
}

# ....................{ CONVERTERS                         }....................
:func.doc <<'/---'
string convert_map_to_string(string map_name)

Get a string corresponding to the contents of the map with the passed name.
See :List.as_string() for further details.
/---
function convert_map_to_string() {
    # Validate sanity.
    die_unless_arg 'Expected one map name.'
    string map_name__cvmts="${1}"
    :Map.die_unless "${map_name__cvmts}"

    # Dismantled, this is as in :List.return(), except:
    #
    # * 'kv', a string concatenating all map keys and values delimited by
    #   whitespace.
    :stdout.echo "${(qqkv@P)map_name__cvmts}"
}

# --------------------( WASTELANDS                         )--------------------
# ....................{ GETTERS ~ value                    }....................
# :func.doc <<'/---'
# string get_map_key_value(string map_name, string key)
# 
# Get the value of the passed key in the passed map if such map contains such key
# or throw an exception otherwise: e.g.,
# 
# .get_map_key_value()
# ==========================================
# [source]
# ------------------------------------------
# >>> map on_easter_island; on_easter_island=(
# ...     "The"     "Easter Islanders, aware that they were almost completely"
# ...     "isolated "from the rest of the world, must surely have realised that"
# ...     "their"   "very existence depended on the limited resources of a small"
# ...     "island." "After all it was small enough for them to walk round the"
# ...     "entire"  "island in a day or so and see for themselves what"
# ...     "was"     "happening to the forests. Yet they were unable to devise a"
# ...     "system"  "that allowed them to find the right balance with"
# ...     "their"   "environment. Instead vital resources were steadily consumed"
# ...     "until"   "finally none were left. Indeed, at the very time when the"
# ...     "limitations" "of the island must have become starkly apparent the"
# ...     "competition" "between the clans for the available timber seems to have"
# ...     "intensified" "as more and more statues were carved and moved across"
# ...     "the"     "island in an attempt to secure prestige and status."
# ... )
# >>> get_map_key_value on_easter_island their
# environment. Instead vital resources were steadily consumed
# ------------------------------------------
# ==========================================
# /---
# function get_map_key_value() {
#     get_map_key_value_if_found "${@}" or die_unless_map_key "${@}"
# }
# 
# :func.doc <<'/---'
# [stdout: string, status: boolean] get_map_key_value_if_found(
#     string map_name, string key)
# 
# Get the value of the passed key in the passed map if such map contains such key
# or return failure otherwise: e.g.,
# 
# .get_map_key_value_if_found()
# ==========================================
# [source]
# ------------------------------------------
# >>> map on_economics; on_economics=(
# ...     "Economics" "is not value free, and no amount of abstraction can make"
# ...     "it"        "value free. The econometricians' search for equations that"
# ...     "will"      "explain the economy is forever doomed to frustration. It"
# ...     "is"        "often said that their models don't work, because, on the"
# ...     "one"       "hand, the variables are too many and, on the other, the"
# ...     "statistical" "data are too sparse. But the physical universe is as"
# ...     "various"     "as the economic universe (they are, to repeat, both"
# ...     "infinite),"  "and Newton had fewer data and less powerful means of"
# ...     "calculation" "than are at the disposal of Jan Tinbergen and his"
# ...     "econometrician" "followers. The difference is fundamental, and the"
# ...     "failure"     "to understand it reduces much of modern economics to a"
# ...     "game"        "that unfortunately has serious consequences."
# ... )
# >>> get_map_key_value_if_found on_economics "invisible hand" or :stdout.echo\
# ...     "To be important, therefore, a hypothesis must be descriptively false in its assumptions."
# To be important, therefore, a hypothesis must be descriptively false in its assumptions.
# /---
# function get_map_key_value_if_found() {
#     # Validate sanity.
#     die_unless_args_2 'Expected one map name and one key.'
#     string map_name__gmkvif="${1}" key__gmkvif="${2}"
#     :Map.die_unless "${map_name__gmkvif}"
# 
#     # Get such value if found or return failure. Note the sensible expression
#     # "${${(@P)map_name}[${key__gmkvif}]}" always expands to the empty string
#     # as does every sensible permutation of such expression (e.g., adding "k").
#     # It shouldn't; it certainly doesn't for lists. But since it does, we
#     # necessarily resort to the usual "eval" kludge.
#     #
#     # Needless to say, this is shockingly difficult.
#     :Map.is_key "${map_name__gmkvif}" "${key__gmkvif}" and
#         eval ':stdout.echo "${'${map_name__gmkvif}'[${key__gmkvif}]}"'
# }
