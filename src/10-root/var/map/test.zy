#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Map testers* (i.e., functions testing maps).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_map_nonempty(
    :Map map_name
    :str error_message='Map ${map_name} is empty.')

Throw an exception with the passed message unless the passed map is nonempty.
/---
function die_unless_map_nonempty() {
    die_unless_args_1_to_2\
        'Expected one variable name and optional error message.'
    :str map_name__dumn="${1}"
    is_map_nonempty "${map_name__dumn}" :or
        :die "${2-\$\{${map_name__dumn}\} is empty.}"
}

# ....................{ EXCEPTIONS ~ key                   }....................
#FIXME: Horrid. Rename die_unless_map_keys() to :map.die_unless_key() and
#excise die_unless_map_key() entirely.

:func.doc <<'/---'
:void die_unless_map_key(
    :Map map_name
    :str key
    :str error_message='Map "${map_name}" contains no key "${key}".')

Throw an exception with the passed message unless the map with the passed name
contains the passed key.

== See Also ==

* :Map.is_key().
/---
function die_unless_map_key() {
    die_unless_args_2_to_3\
        'Expected one map name, one key, and optional error message.'
    :str map_name__dumk="${1}" key__dumk="${2}"
    :Map.is_key "${map_name__dumk}" "${key__dumk}" :or
        :die "${3-map \$\{${map_name__dumk}\} contains no key \"${key__dumk}\".}"
}


:func.doc <<'/---'
:void die_unless_map_keys(:Map map_name +:str keys)

Throw an exception with a stock message unless the map with the passed name
contains all passed keys.

== See Also ==

* :Map.is_key().
/---
function die_unless_map_keys() {
    die_unless_args_2_or_more 'Expected one map name and one or more keys.'
    :str map_name__dumks="${1}"
    :args.shift 1

    # To throw human-readable exception messages, iterate such map here.
    :str key__dumks
    for  key__dumks ("${@}") {
        die_unless_map_key "${map_name__dumks}" "${key__dumks}"
    }
}

# ....................{ TESTERS                            }....................
#FIXME: Add examples.
:func.doc <<'/---'
[status=:bool] :map.is_empty(:Map map_name)

Report success if the map with the passed name is empty.
/---
function is_map_empty() {
    die_unless_arg 'Expected one map name.'
    :str map_name__imn="${1}"
    :Map.die_unless "${map_name__imn}"

    # Test this map.
    (( ${#${(@P)map_name__imn}} == 0 ))
}


:func.doc <<'/---'
[status=:bool] :map.is_nonempty(:Map map_name)

Report success if the map with the passed name is nonempty.
/---
function is_map_nonempty() {
    die_unless_arg 'Expected one map name.'
    :str map_name__imn="${1}"
    :Map.die_unless "${map_name__imn}"

    # Test this map.
    (( ${#${(@P)map_name__imn}} ))
}

# ....................{ TESTERS ~ key                      }....................
#FIXME: Split the example at key "Ignorance,". Fantastic example, if overlong.

:func.doc <<'/---'
[status=:bool] :Map.is_key(:Map map_name +:str keys)

Report success if the map with the passed name contains all passed keys.

== Examples ==

.:Map.is_key()
==========================================
[source]
------------------------------------------
>>> :map on_lebensraum; on_lebensraum=(
...    "\"Solving"  "[our economic problems] wasn't difficult. To begin with, we"
...    "never"      "allowed ourselves to produce more children than we could"
...    "feed,"      "clothe, house, and educate into something like full"
...    "humanity."  "Not being overpopulated, we have plenty. But, although we"
...    "have"       "plenty, we've managed to resist the temptation that the"
...    "West"       "has now succumbed to — the temptation to overconsume. We"
...    "don't"      "give ourselves coronaries by guzzling six times as much"
...    "saturated"  "fat as we need. We don't hypnotize ourselves into believing"
...    "that"       "two television sets will make us twice as happy as one"
...    "television" "set. And finally we don't spend a quarter of the gross"
...    "national"   "product preparing for World War III or even World War's"
...    "baby"       "brother, Local War MMMCCCXXXIII. Armaments, universal debt,"
...    "and"        "planned obsolescence — those are the three pillars of"
...    "Western"    "prosperity. If war, waste, and moneylenders were abolished,"
...    "you'd"      "collapse. And while you people are overconsuming, the rest"
...    "of"         "the world sinks more and more deeply into chronic disaster."
...    "Ignorance," "militarism and breeding, these three — and the greatest of"
...    "these"      "is breeding. No hope, not the slightest possibility, of"
...    "solving"    "the economic problems until that's under control. As"
...    "population" "rushes up, prosperity goes down.\" He traced the descending"
...    "curve"      "with an outstretched finger. \"And as prosperity goes down,"
...    "discontent" "and rebellion,\" (the forefinger moved up again),"
...    "\"political" "ruthlessness and one-party rule, nationalism and"
...    "bellicosity" "begin to rise. Another ten or fifteen years of uninhibited"
...    "breeding,"   "and the whole world, from China to Peru via Africa and the"
...    "Middle"      "East, will be fairly crawling with Great Leaders, all"
...    "dedicated"   "to the suppression of freedom, all armed to the teeth by"
...    "Russia"      "or America or, better still, by both at once, all waving"
...    "flags,"      "all screaming for Lebensraum." )
>>> :Map.is_key on_lebensraum "humanity." "have" "saturated" :and :stdout.echo
...     "In any race between human numbers and natural resources, time is against us."
In any race between human numbers and natural resources, time is against us.
------------------------------------------
==========================================
/---
function :Map.is_key() {
    die_unless_args_2_or_more 'Expected one map name and one or more keys.'
    :str map_name__imk="${1}"
    :Map.die_unless "${map_name__imk}"
    :args.shift 1

    # If only one key was passed, efficiently test this map without iteration.
    if { is_arg } {
        :str map_key_name__imk=${map_name__imk}'['${1}']'
        (( ${(P)+map_key_name__imk} ))
    # Else, two or more keys were passed. In this case, efficiently test this
    # map with implicit iteration leveraging obscenely obscure zsh syntax. See
    # ={*-start/*-declare/*-test/var.zy}.
    } else {
        local IFS=
        :is "${(e)${@//(#m)*/\${(P)+${map_name__imk}[${MATCH}]\}}}" ==\
            1(#c${#}) :si  # quiet: "}"
    }
}
