#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Map removers* (i.e., functions removing key-value pairs from maps).
/---

# ....................{ CLEARERS                           }....................
#FIXME: Rename to :Map.clear().
:func_ ':void ::map.clear(+:Map map_names) [var_name_suffix="__Mc"]' :func{
    # If only one map was passed, clear such map without iteration.
    if { is_arg } {
        :Map.die_unless "${map_names__Mc[1]}"
        set -A          "${map_names__Mc[1]}"
    # Else, clear all such maps.
    } else {
        :str map_name__Mc
        for  map_name__Mc ("${map_names__Mc[@]}") {
            :Map.die_unless "${map_name__Mc}"
            set -A "${map_name__Mc}"
        }
    }
}:func <<'/---'
Clear (i.e., remove all key-value pairs from) all passed maps: e.g.,

.::map.clear()
==========================================
[source]
------------------------------------------
>>> :map on_seclusion; on_seclusion=(
...    "The"      "mind is sharper and keener in seclusion and uninterrupted"
...    "solitude. "No big laboratory is needed in which to think. Originality"
...    "thrives"  "in seclusion free of outside influences beating upon us to"
...    "cripple"  "the creative mind. Be alone, that is the secret"
...    "of"       "invention; be alone, that is when ideas are born. That is"
...    "why"      "many of the earthly miracles have had their genesis in"
...    "humble"   "surroundings." )
>>> get_map_size on_seclusion
7
>>> ::map.clear   on_seclusion
>>> get_map_size on_seclusion
0
------------------------------------------
==========================================
/---

# ....................{ REMOVERS                           }....................
#FIXME: Rename to :Map.remove_key().
:func_ ':void :remove_map_key(:Map map_name :str key) [
    var_name_suffix="__Mrk"]' :func{
    # If this key contains either "[" or "]", throw an exception. Unfortunately,
    # zsh appears to currently prohibit removal of these keys. (Yes, this is a
    # bug and should be reported as such.)
    :is "${key__Mrk}" != *['[]']* :si :or :die\
        'Map '${map_name__Mrk}' key "'${key__Mrk}'" contains "[" and/or "]", which zsh currently cannot remove.'

    # Remove such key. On the bright side, such operation requires no eval().
    # On the dark side, zsh requires such expansion be double-quoted, the
    # principal cause of its failure to remove keys containing "[" or "]".
    unset "${map_name__Mrk}[${key__Mrk}]"
}:func <<'/---'
Remove the passed key and corresponding value from the passed map: e.g.,

.:remove_map_key()
==========================================
[source]
------------------------------------------
>>> :map on_solitude_and_freedom; on_solitude_and_freedom=(
...    "Above"     "everything else I am taken by the Revolution. It had to be"
...    "that"      "way. The wind that blew through the ruin where I was born,"
...    "the"       "old people who brought me up, the solitude and freedom of"
...    "my"        "childhood, the legends of the Haute-Marne, the scraps of"
...    "knowledge" "gleaned from here and there â€“ all that opened my ear to"
...    "every"     "harmony, my spirit to every illumination, my heart to both"
...    "love"      "and hate. Everything intermingled in a single song, a"
...    "single"    "dream, a single love: the Revolution." )
>>> :remove_map_key
------------------------------------------
==========================================
/---
