#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Maps* (i.e., associative arrays).
/---

# ....................{ PRINTERS                           }....................
:func_ ':str print_map(:Map map_name) [var_name_suffix="__mp"]' :func{
    #FIXME: Avoid getters during iteration. Hence, define a new function
    #:set_string_to_string_escaping_double_quotes:() and call such function below
    #in place of the existing command substitution.
    #FIXME: Style with colors.
    #FIXME: Consider aligning keys into columns. Of course, this is only really
    #feasible if all keys are sufficiently short; even a single lengthy key
    #renders the entire effort unprintable. Nonetheless, it seems worth the
    #attempt, if all keys are sufficiently short.

    # Page this output.
    {
        # Prefix this map with its name.
        print_message_heading "Map ${map_name__mp}"

        # Print this map.
        for_map_key_value_pairs "${map_name__mp}" '
            # If this key contains a colon or whitespace, quote this key. For
            # efficiency, inline this test.
            if :is "${KEY}" == *[:[:space:]]* :si {
                :stdout.echo "\"$(escape_string_double_quotes "${KEY}")\": ${VALUE}"
            # Else, print this key as is.
            } else {
                :stdout.echo "${KEY}: ${VALUE}"
            }'
    } | :stdin.page
}:func <<'/---'
Print a human-readable synopsis of the map with the passed name.
/---
