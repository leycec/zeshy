#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Variable scope* (i.e., the programmatic contexts in which variables are
referenceable).
/---

# ....................{ GLOBALS ~ scope                    }....................
:str.global ZY__VAR_TYPE_GLOB_LOCAL='*-local' <<'/---'
Glob matching type strings of local variables.
/---

:str.global ZY__VAR_TYPE_GLOB_EXPORTED='*-exported' <<'/---'
Glob matching type strings of exported variables.
/---

# Sadly, type strings of local but *NOT* global variables are explicitly
# suffixed by a suffix specific to such variables. Thus, type strings of the
# latter are matchable only by matching type strings either:
#
# * *NOT* containing delimiter "-" (and hence implicitly global).
# * Containing delimiter "-" suffixed by an suffix other than "local" (and
#   hence implicitly global).
#
# While extended globs lack support for the generalized negative lookahead and
# lookbehind assertions now supported by most PCRE implementations, they *DO*
# support negative character classes. Since no type suffix other than "-local"
# starts with "l", negating such letter suffices to match the desired strings.
:str.global ZY__VAR_TYPE_GLOB_GLOBAL='([^-]##|*-[^l]*)' <<'/---'
Glob matching type strings of global variables.
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] is_global(string variable_name)

Report success if the passed variable exists _and_ the declaration of such
variable accessible to the current scope was global. See :is_var_global()
for further details.
/---
function is_global() {
    die_unless_arg 'Expected one variable name.'
    :str variable_name__ig="${1}"
    :Var.is "${variable_name__ig}" and
        :is_var_global "${variable_name__ig}"
}

:func.doc <<'/---'
[status: bool] is_local(string variable_name)

Report success if the passed variable exists _and_ the declaration of such
variable accessible to the current scope was local. See :is_var_local()
for further details.
/---
function is_local() {
    die_unless_arg 'Expected one variable name.'
    :str variable_name__il="${1}"
    :Var.is "${variable_name__il}" and
        :is_var_local "${variable_name__il}"
}

# ....................{ TESTERS ~ variable                 }....................
#FIXME: Great example. Overly long, however. Breakup, please!
:func.doc <<'/---'
[status: bool] :is_var_global(string variable_name)

Report success if the declaration of the passed variable accessible to the
current scope was global.

If this variable does _not_ exist, an exception is thrown. Note that this global
may exist even if this function returns failure, as that global may have been
redeclared as a local variable by some parent scope of the current scope.

== Examples ==

.:is_var_global()
==========================================
[source]
------------------------------------------
>>> :str.global on_poetry_and_science=\
...    "The winds, the sea, and the moving tides are what they are. If there is
...     wonder and beauty and majesty in them, science will discover these
...     qualities. If they are not there, science cannot create them. If there
...     is poetry in my book about the sea, it is not because I deliberately put
...     it there, but because no one could write truthfully about the sea and
...     leave out the poetry."
>>> function on_wind_and_sea() {
...     :str on_poetry_and_science=\
...        "We have looked first at man with his vanities and greed and his
...         problems of a day or a year; and then only, and from this biased
...         point of view, we have looked outward at the earth he has inhabited
...         so briefly and at the universe in which our earth is so minute a
...         part. Yet these are the great realities, and against them we see our
...         human problems in a different perspective. Perhaps if we reversed
...         the telescope and looked at man down these long vistas, we should
...         find less time and inclination to plan for our own destruction."
...     :is_var_global on_poetry_and_science
... }
>>> on_wind_and_sea or get_string_line "$(on_poetry_and_science)" 1
The winds, the sea, and the moving tides are what they are. If there is
------------------------------------------
==========================================
/---
function :is_var_global() {
    # While we could also test such variable positively against glob
    # ${ZY__VAR_TYPE_GLOB_LOCAL}, the negative test below remains both
    # slightly more efficient and safe.
    die_unless_arg 'Expected one variable name.'
    :is $(get_variable_type "${1}") != ${~ZY__VAR_TYPE_GLOB_LOCAL} :si
}

:func.doc <<'/---'
[status: bool] :is_var_local(string variable_name)

Report success if the declaration of the passed variable accessible to the
current scope was local. If such variable does _not_ exist, throw an exception.
Since there may exist another declaration of such variable external to the
current scope, a corresponding global may exist even if this function returns
success: e.g.,

.:is_var_local()
==========================================
[source]
------------------------------------------
>>> :str.global on_steel_and_concrete=\
...    "Mankind has gone very far into an artificial world of his own creation.
...     He has sought to insulate himself, in his cities of steel and concrete,
...     from the realities of earth and water and the growing seed. Intoxicated
...     with a sense of his own power, he seems to be going farther and farther
...     into more experiments for the destruction of himself and his world."
>>> function on_real_wealth() {
...     :str on_steel_and_concrete=\
...        "The real wealth of the Nation lies in the resources of the earth —
...         soil, water, forests, minerals, and wildlife. To utilize them for
...         present needs while insuring their preservation for future
...         generations requires a delicately balanced and continuing program,
...         based on the most extensive research. Their administration is not
...         properly, and cannot be, a matter of politics."
...     :is_var_local on_steel_and_concrete
... }
>>> on_real_wealth or :stdout.echo "All living things on earth are kindred."
All living things on earth are kindred.
------------------------------------------
==========================================
/---
function :is_var_local() {
    die_unless_arg 'Expected one variable name.'
    :is $(get_variable_type "${1}") == ${~ZY__VAR_TYPE_GLOB_LOCAL} :si
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
void :set_list_to_vars_global(string list_name)

Set the passed list (ideally, list set) to the names of all global variables
accessible in the current context.

== Examples ==

.:set_list_to_vars_global()
==========================================
[source]
------------------------------------------
>>> :str.global on_hypnotism=\
...    "One Folk, One Realm, One Leader. Union with the unity of an insect
...     swarm. Knowledgeless understanding of nonsense and diabolism. And then
...     the newsreel camera had cut back to the serried ranks, the swastikas,
...     the brass bands, the yelling hypnotist on the rostrum. And here once
...     again, in the glare of his inner light, was the brown insectlike column,
...     marching endlessly to the tunes of this rococo horror-music. Onward Nazi
...     soldiers, onward Christian soldiers, onward Marxists and Muslims, onward
...     every chosen People, every Crusader and Holy War-maker. Onward into
...     misery, into all wickedness, into death!"
>>> :list globals
>>> :set_list_to_vars_global globals
>>> is_list_item globals on_hypnotism :and get_string_line "${on_hypnotism}" 1
One Folk, One Realm, One Leader. Union with the unity of an insect
------------------------------------------
==========================================
/---
function :set_list_to_vars_global() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :set_list_to_vars_local().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :str list_name__sltvg=${1}

    # List of the names of all declared variables, each prefixed by zero or more
    # type attributes for such variable (e.g., "integer 10 readonly JahJah", an
    # integer constant printed in base 10 named "JahJah").
    set_list_to_string_lines "${list_name__sltvg}" "$(typeset +)"

    # Remove the names of all local variables from such list. Sadly, there
    # exists no means of instructing typeset() to only print the names of global
    # variables. Happily, typeset() *ALWAYS* prefixes such names by attribute
    # "local": e.g.,
    #
    #    # Given three locals "Forlatt", "Skogslandskap", and "Vali",
    #    # "typeset +" outputs at least the following three lines:
    #    integer local i
    #    array local sim
    #    local yoz
    #
    # Since "local" need *NOT* be prefixed by another attribute, match "local"
    # both at the beginning of each such string and when prefixed by a space.
    :List.items.remove_^= "${list_name__sltvg}" (#s|*' ')'local '*

    # Remove all such attributes from each such string, reducing such list to
    # only names.
    :List.items.remove_prefix_^= "${list_name__sltvg}" '* '
}

:func.doc <<'/---'
void :set_list_to_vars_local(string list_name)

Set the passed list (ideally, list set) to the names of all local variables
accessible in the current context: e.g.,

.:set_list_to_vars_local()
==========================================
[source]
------------------------------------------
>>> :str on_prosperity=\
...    "Armaments, universal debt, and planned obsolescence – those are the
...     three pillars of Western prosperity. If war, waste, and moneylenders
...     were abolished, you'd collapse. And while you people are overconsuming
...     the rest of the world sinks more and more deeply into chronic disaster."
>>> :list locals
>>> :set_list_to_vars_local locals
>>> is_list_item locals on_prosperity and get_string_line "${on_prosperity}" 1
the rest of the world sinks more and more deeply into chronic disaster.
------------------------------------------
==========================================
/---
function :set_list_to_vars_local() {
    # See :set_list_to_vars_global() for further details, whose implementation
    # differs from that of this function only in calling
    # :List.items.remove_not_^=() rather than
    # :List.items.remove_^=().
    die_unless_arg 'Expected one list name.'
    :str list_name__sltvl="${1}"
    set_list_to_string_lines "${list_name__sltvl}" "$(typeset +)"
    :List.items.remove_not_^= "${list_name__sltvl}" (#s|*' ')'local '*
    :List.items.remove_prefix_^= "${list_name__sltvl}" '* '
}
