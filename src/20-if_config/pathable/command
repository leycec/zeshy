#!/usr/bin/env zsh

:parcel <<'/---'
Configure common external commands. Most such commands are POSIX-mandated
(e.g., `awk`, `sed`, `grep`); the remainder are merely sufficiently
commonplace to be effectively mandated (e.g., `less`, `mount`).
/---

#FIXME: This file has grown obscenely large. For sanity, it should be split on
#command name into one file per command (e.g., "option/grep", "option/mv").
#After doing so, the *ENTIRE* directory "00-core/option/" should be renamed to
#just "pathable/" -- which, happily, existing pathable commands use. Sweet, no?
#FIXME: Right. Let's adopt different nomenclature, please. (I know...) The
#current approach is increasingly pungent. Ideally, all options lists should be
#tabbable with prefix "${ZY_OPTIONS_". At the moment, they're not. Hence,
#globally rename "ZY_([A-Z]+)_OPTIONS" to "ZY_OPTIONS_\1". (Test first,
#naturally.)
#FIXME: Additionally, the whole "_IF" construct is... well, awkward. While it
#*DOES* meaningfully apply to actual conditions on shell state (e.g.,
#"_IF_INTERACTIVE"), it doesn't meaningfully apply to mere differences in which
#function was called (e.g., copy_path_recursive()). In the latter case, the
#"_IF" should simply be dropped. This gives a much more natural nomenclature
#directly relating to the underlying zeshy function: e.g., rename
#${ZY_OPTIONS_CP_IF_RECURSIVE} to ${ZY_OPTIONS_CP_RECURSIVE}.
#FIXME: What "_IF" constructs should be used for, actually, is selecting between
#different OS-specific options groups. Since pretty much *EVERYTHING* below is
#GNU-specific, append "_FROM_LINUX" (corresponding to existing tester
#:is_os_trait_gnu()) to *ALL* globals below. *YES, DO THIS*. As example, doing so then
#gives us list globals ${ZY_OPTIONS_GREP_FROM_LINUX} and
#${ZY_OPTIONS_GREP_IF_OS_BSD} (rather than simply the blatantly GNU-specific
#${ZY_OPTIONS_GREP}), which is not merely *ENTIRELY* sensible but absolutely
#necessary to sane zeshy use on non-GNU Unixes.

#FIXME: It's an enormous headache, but global definition should be shifted to
#the new style to reduce redundancy (and file length). See below.

#FIXME: Rename "_IF_INTERACTIVE" and "_IF_NONINTERACTIVE" to "_IF_CLI" and
#"_IF_NONCLI", respectively. Naturally, this requires similar changes to parcel
#"runnable/command/option". Defer such work until after migrating interactive
#aliases to the new CLI model, as a proof of concept.
#FIXME: I wouldn't second-guess this change. Examining below, it's clear we add
#options to "_IF_INTERACTIVE" lists only really intended to be used when called
#directly from the command line: as example,
#${ZY_OPTIONS_DIFF_IF_INTERACTIVE}. In that specific case, it'd be quite
#dangerous to apply such options *UNLESS* already at the CLI. Doing so
#generally, as we currently do, is an obscenely bad idea. Rectify it.
#FIXME: Note, however, that what we really want is to detect whether or not such
#*ALIAS* (and not the eventual function call such alias expands to) was expanded
#directly from the CLI. This wouldn't ordinarily be terribly difficult.
#Unfortunately, in this case, most such functions are evaluated under
#run_code_paged() (e.g., grep_path_recursive()). To handle such edge cases,
#run_code_with_options_configured() should simply ignore all functions prefixed
#by "run_code" on the call stack: they don't "count" when deciding whether such
#function was called directly from the command line or not. And no, we should
#*NOT* revise :context.is_cli_func() to handle such logic. We could, however,
#define a new :context.is_cli_function_ignoring_runners() alias for doing so.
#Contemplate. Whatever's most natural, as always.
#FIXME: Wait! While ${ZY_OPTIONS_DIFF_IF_INTERACTIVE} options should clearly
#only apply when called directly from the command line, this is hardly the case
#for most commands. In fact, for most, we expressly need to retain the current
#conception of "_IF_INTERACTIVE". Consider ${ZY_OPTIONS_RM_IF_INTERACTIVE},
#for example. For safety, we *NEED* to apply such options whenever called under
#an interactive shell -- regardless of whether such alias was expanded directly
#at the command line. All of this implies we need to carefully consider each
#command and whether or not the options we've currently broadly defined as
#"_IF_INTERACTIVE" should actually only be applied when "_IF_CLI".

#FIXME: I'm unconvinced we need most ${ZY_OPTIONS_*_IF_NONINTERACTIVE}
#lists. Power users can define them explicitly if they like. But there's little
#point in doing so for *EVERY* possible command. After all, if we're going to do
#so, then (rationally speaking) we also need to define
#${ZY_OPTIONS_*_IF_NONCLI} lists -- which is really just extreme. So, retain
#current internal support for non-interactive and non-CLI options lists, but
#don't bother declaring them here as we currently do.

# ....................{ CHMOD                              }....................
:list.global ZY_OPTIONS_CHMOD <<'/---'
`chmod` options specific to the change_path_permissions*() functions.
/---
ZY_OPTIONS_CHMOD=()

:list.global ZY_OPTIONS_CHMOD_IF_INTERACTIVE <<'/---'
`chmod` options if run interactively.
/---
ZY_OPTIONS_CHMOD_IF_INTERACTIVE=(
    --changes
)

:list.global ZY_OPTIONS_CHMOD_IF_NONINTERACTIVE <<'/---'
`chmod` options if run non-interactively.
/---
ZY_OPTIONS_CHMOD_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_CHMOD_IF_RECURSIVE <<'/---'
`chmod` options if run recursively.
/---
ZY_OPTIONS_CHMOD_IF_RECURSIVE=(
    --preserve-root
    --recursive
)

# ....................{ CHOWN                              }....................
:list.global ZY_OPTIONS_CHOWN <<'/---'
`chown` options specific to the change_path_ownership*() functions.
/---
ZY_OPTIONS_CHOWN=()

:list.global ZY_OPTIONS_CHOWN_IF_INTERACTIVE <<'/---'
`chown` options if run interactively.
/---
ZY_OPTIONS_CHOWN_IF_INTERACTIVE=(
    --changes
)

:list.global ZY_OPTIONS_CHOWN_IF_NONINTERACTIVE <<'/---'
`chown` options if run non-interactively.
/---
ZY_OPTIONS_CHOWN_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_CHOWN_IF_RECURSIVE <<'/---'
`chown` options if run recursively.
/---
ZY_OPTIONS_CHOWN_IF_RECURSIVE=(
    --preserve-root
    --recursive
)

# ....................{ CP                                 }....................
:list.global ZY_OPTIONS_CP <<'/---'
`cp` options specific to the copy_path*() functions.
/---
ZY_OPTIONS_CP=(
    --archive
)

:list.global ZY_OPTIONS_CP_IF_INTERACTIVE <<'/---'
`cp` options if run interactively.
/---
ZY_OPTIONS_CP_IF_INTERACTIVE=(
    --interactive
    --verbose
)

:list.global ZY_OPTIONS_CP_IF_NONINTERACTIVE <<'/---'
`cp` options if run non-interactively.
/---
ZY_OPTIONS_CP_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_CP_IF_RECURSIVE <<'/---'
`cp` options if run recursively.
/---
ZY_OPTIONS_CP_IF_RECURSIVE=(
    --recursive
    --update
)

:list.global ZY_OPTIONS_CP_IF_DEEP <<'/---'
`cp` options if copying deeply (i.e., copying the targets of source symbolic
links rather than such links).
/---
ZY_OPTIONS_CP_IF_DEEP=(
    --dereference
)

# ....................{ DIFF                               }....................
:list.global ZY_OPTIONS_DIFF <<'/---'
`diff` options specific to the difference_files*() and *_file_text_patch*()
functions.
/---
ZY_OPTIONS_DIFF=(
    --new-file
    --speed-large-files
    --unified
)

:list.global ZY_OPTIONS_DIFF_IF_INTERACTIVE <<'/---'
`diff` options if run interactively.
/---
# Ignoring whitespace is nice when run interactively but
# otherwise dangerous.
ZY_OPTIONS_DIFF_IF_INTERACTIVE=(
    --ignore-all-space
    --ignore-blank-lines
    --ignore-space-change
)

:list.global ZY_OPTIONS_DIFF_IF_NONINTERACTIVE <<'/---'
`diff` options if run non-interactively.
/---
ZY_OPTIONS_DIFF_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_DIFF_IF_RECURSIVE <<'/---'
`diff` options if run recursively.
/---
ZY_OPTIONS_DIFF_IF_RECURSIVE=(
    --recursive
)

# ....................{ DU                                 }....................
:list.global ZY_OPTIONS_DU <<'/---'
`du` options specific to the print_path_size*() functions.
/---
ZY_OPTIONS_DU=(
    --one-file-system
)

:list.global ZY_OPTIONS_DU_IF_INTERACTIVE <<'/---'
`du` options if run interactively.
/---
ZY_OPTIONS_DU_IF_INTERACTIVE=(
    --human-readable
    --total
)

:list.global ZY_OPTIONS_DU_IF_NONINTERACTIVE <<'/---'
`du` options if run non-interactively.
/---
ZY_OPTIONS_DU_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_DU_IF_GETTING_DIR_SIZE <<'/---'
`du` options if getting the size in bytes of a single directory.
/---
ZY_OPTIONS_DU_IF_GETTING_DIR_SIZE=(
    --summary
    --block-size=1
)

# ....................{ DU ~ sort                          }....................
:list.global ZY_OPTIONS_DU_SORT <<'/---'
`sort` options specific to the print_path_size_sorted*() functions.
/---
ZY_OPTIONS_DU_SORT=(
    --human-numeric-sort
    --reverse
)

# ....................{ FILE                               }....................
:list.global ZY_OPTIONS_FILE <<'/---'
`file` options specific to the *_file_*() functions.
/---
ZY_OPTIONS_FILE=()

:list.global ZY_OPTIONS_FILE_IF_PRINTING_METADATA_SYNOPSIS <<'/---'
`file` options if printing a human-readable synopsis of file metadata.
/---
ZY_OPTIONS_FILE_IF_PRINTING_METADATA_SYNOPSIS=(
    --dereference
)

# ....................{ GREP                               }....................
# Avoid defining global ${GREP_OPTION}. Doing so coerces such options on *ALL*
# invocations of "grep", including invocation by shell scripts expecting
# machine- rather than human-readable output (e.g., no line numbers or colors).
# To avoid breaking the entire system, avoid such global like the plague it is.

:list.global ZY_OPTIONS_GREP <<'/---'
`grep` options specific to the grep*() functions.
/---
ZY_OPTIONS_GREP=(
    --binary-files=without-match
    --exclude-dir='.bzr'
    --exclude-dir='.cvs'
    --exclude-dir='.git'
    --exclude-dir='.hg'
    --exclude-dir='.svn'
    --no-messages
    --perl-regexp
)

:list.global ZY_OPTIONS_GREP_IF_INTERACTIVE <<'/---'
`grep` options if run interactively.
/---
ZY_OPTIONS_GREP_IF_INTERACTIVE=(
    --color=always
    --line-number
    --with-filename
)

:list.global ZY_OPTIONS_GREP_IF_NONINTERACTIVE <<'/---'
`grep` options if run non-interactively.
/---
ZY_OPTIONS_GREP_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_GREP_IF_CASELESS <<'/---'
`grep` options if run case-insensitively.
/---
ZY_OPTIONS_GREP_IF_CASELESS=(
    --ignore-case
)

:list.global ZY_OPTIONS_GREP_IF_RECURSIVE <<'/---'
`grep` options if run recursively.
/---
ZY_OPTIONS_GREP_IF_RECURSIVE=(
    --recursive
)

:list.global ZY_OPTIONS_GREP_IF_SILENT <<'/---'
`grep` options if run silently.
/---
ZY_OPTIONS_GREP_IF_SILENT=(
    --silent
)

# ....................{ LESS                               }....................
:str.global LESS="${LESS---LONG-PROMPT --RAW-CONTROL-CHARS --shift=.05}" <<'/---'
Whitespace-delimited `less` options. Such options apply to all `less`
invocations, including those by external commands (e.g., `man`), and hence are
_not_ `zeshy`-specific.
/---

:list.global ZY_OPTIONS_LESS_IF_INTERACTIVE <<'/---'
`less` options specific to the page_safely() function.
/---
ZY_OPTIONS_LESS_IF_INTERACTIVE=(
    # Display the current pager position in the 'prompt' (i.e., the last line).
    --LONG-PROMPT

    # Display raw control characters, excluding ANSI escape sequences.
    --RAW-CONTROL-CHARS

    # Avoid clearing the screen on initialization.
    --no-init

    # When scrolling horizontally, 'shift' the screen by a number of columns
    # equal to %5 of the current terminal width.
    --shift=.05
)

# ....................{ LN ~ symbolic                      }....................
:list.global ZY_OPTIONS_LN_SYMBOLIC <<'/---'
`ln` options specific to the make_link_symbolic*() functions.
/---
ZY_OPTIONS_LN_SYMBOLIC=(
    --symbolic
)

:list.global ZY_OPTIONS_LN_SYMBOLIC_IF_INTERACTIVE <<'/---'
`ln` options if run interactively.
/---
ZY_OPTIONS_LN_SYMBOLIC_IF_INTERACTIVE=(
    --interactive
    --verbose
)

:list.global ZY_OPTIONS_LN_SYMBOLIC_IF_NONINTERACTIVE <<'/---'
`ln` options if run non-interactively.
/---
ZY_OPTIONS_LN_SYMBOLIC_IF_NONINTERACTIVE=()

# ....................{ LS                                 }....................
:list.global ZY_OPTIONS_LS <<'/---'
`ls` options specific to the list_path*() functions.
/---
ZY_OPTIONS_LS=()

:list.global ZY_OPTIONS_LS_IF_INTERACTIVE <<'/---'
`ls` options if run interactively.
/---
ZY_OPTIONS_LS_IF_INTERACTIVE=(
    --all
    --color=always
    --group-directories-first
    --human-readable
    --indicator-style=classify
    --quoting-style=shell
    --sort=version
    --time-style=long-iso
)

:list.global ZY_OPTIONS_LS_IF_NONINTERACTIVE <<'/---'
`ls` options if run non-interactively.
/---
ZY_OPTIONS_LS_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_LS_IF_CONCISE <<'/---'
`ls` options if run concisely (i.e., non-verbosely).
/---
ZY_OPTIONS_LS_IF_CONCISE=(
    --format=vertical
)

:list.global ZY_OPTIONS_LS_IF_RECURSIVE <<'/---'
`ls` options if run recursively.
/---
ZY_OPTIONS_LS_IF_RECURSIVE=(
    --format=long
    --recursive
)

:list.global ZY_OPTIONS_LS_IF_VERBOSE <<'/---'
`ls` options if run verbosely.
/---
ZY_OPTIONS_LS_IF_VERBOSE=(
    --format=long
)

# ....................{ MKDIR                                 }....................
:list.global ZY_OPTIONS_MKDIR <<'/---'
`zeshy`-specific `mkdir` options (e.g., for make_dir()).
/---
ZY_OPTIONS_MKDIR=()

:list.global ZY_OPTIONS_MKDIR_IF_INTERACTIVE <<'/---'
`zeshy`-specific `mkdir` options when run from the interactive command line.
/---
ZY_OPTIONS_MKDIR_IF_INTERACTIVE=(
    --parent
    --verbose
)

:list.global ZY_OPTIONS_MKDIR_IF_NONINTERACTIVE <<'/---'
`zeshy`-specific `mkdir` options when run from a non-interactive script.
/---
ZY_OPTIONS_MKDIR_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_MKDIR_IF_NOT_FOUND <<'/---'
`zeshy`-specific `mkdir` options when ignoring nonextant directories.
/---
ZY_OPTIONS_MKDIR_IF_NOT_FOUND=(
    --parent
)

# ....................{ MV                                 }....................
:list.global ZY_OPTIONS_MV <<'/---'
`mv` options specific to the move_path*() functions.
/---
ZY_OPTIONS_MV=()

:list.global ZY_OPTIONS_MV_IF_INTERACTIVE <<'/---'
`mv` options if run interactively.
/---
ZY_OPTIONS_MV_IF_INTERACTIVE=(
    --interactive
    --verbose
)

:list.global ZY_OPTIONS_MV_IF_NONINTERACTIVE <<'/---'
`mv` options if run non-interactively.
/---
ZY_OPTIONS_MV_IF_NONINTERACTIVE=()

# ....................{ NL                                 }....................
:list.global ZY_OPTIONS_NL <<'/---'
`nl` options specific to the number_string_lines*() functions.
/---
ZY_OPTIONS_NL=(
    -ba
)

:list.global ZY_OPTIONS_NL_IF_INTERACTIVE <<'/---'
`nl` options if run interactively.
/---
ZY_OPTIONS_NL_IF_INTERACTIVE=()

:list.global ZY_OPTIONS_NL_IF_NONINTERACTIVE <<'/---'
`nl` options if run non-interactively.
/---
ZY_OPTIONS_NL_IF_NONINTERACTIVE=()

# ....................{ NM                                 }....................
:list.global ZY_OPTIONS_NM <<'/---'
`nm` options specific to the print_binary_executable_symbols() function.
/---
ZY_OPTIONS_NM=()

:list.global ZY_OPTIONS_NM_IF_INTERACTIVE <<'/---'
`nm` options if run interactively.
/---
ZY_OPTIONS_NM_IF_INTERACTIVE=(
    --demangle
    --line-numbers
    --print-armap
    --print-size
)

:list.global ZY_OPTIONS_NM_IF_NONINTERACTIVE <<'/---'
`nm` options if run non-interactively.
/---
ZY_OPTIONS_NM_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_NM_IF_BINARY_EXECUTABLE_DYNAMIC <<'/---'
`nm` options if passed a dynamically linked executable binary.
/---
ZY_OPTIONS_NM_IF_BINARY_EXECUTABLE_DYNAMIC=(
    --dynamic
)

# ....................{ PATCH                               }....................
:list.global ZY_OPTIONS_PATCH <<'/---'
`patch` options specific to the apply_file_patch*() functions.
/---
ZY_OPTIONS_PATCH=(
    --no-backup-if-mismatch
    --remove-empty-files
)

:list.global ZY_OPTIONS_PATCH_IF_INTERACTIVE <<'/---'
`patch` options if run interactively.
/---
ZY_OPTIONS_PATCH_IF_INTERACTIVE=()

:list.global ZY_OPTIONS_PATCH_IF_NONINTERACTIVE <<'/---'
`patch` options if run non-interactively.
/---
ZY_OPTIONS_PATCH_IF_NONINTERACTIVE=()

# ....................{ RM                                 }....................
:list.global ZY_OPTIONS_RM <<'/---'
`rm` options for `zeshy`-specific path removers (e.g., remove_path_recursive()).
/---
ZY_OPTIONS_RM=(
    --one-file-system
    --preserve-root
)

:list.global ZY_OPTIONS_RM_IF_INTERACTIVE <<'/---'
`rm` options if run interactively.
/---
ZY_OPTIONS_RM_IF_INTERACTIVE=(
    --dir
    --verbose
)

#FIXME: The distinction between this options list and
#${ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_4_OR_MORE} will cease to be
#interesting, after we add dry run capability to remove_path() and friends. In
#such case, shift option "-i" to ${ZY_OPTIONS_RM_IF_INTERACTIVE} and excise
#these two lists.
:list.global\
    ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_1_TO_3 <<'/---'
`rm` options if run interactively and passed only one to three paths to remove.
/---
ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_1_TO_3=(
    -i
)

:list.global\
    ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_4_OR_MORE <<'/---'
`rm` options if run interactively and passed at least four paths to remove.
/---
ZY_OPTIONS_RM_IF_INTERACTIVE_AND_ARGS_4_OR_MORE=(
    -I
)

:list.global ZY_OPTIONS_RM_IF_NONINTERACTIVE <<'/---'
`rm` options if run non-interactively.
/---
ZY_OPTIONS_RM_IF_NONINTERACTIVE=()

:list.global ZY_OPTIONS_RM_IF_RECURSIVE <<'/---'
`rm` options if run recursively.
/---
ZY_OPTIONS_RM_IF_RECURSIVE=(
    --recursive
)

:list.global\
    ZY_REMOVE_PATH_RECURSIVE_BLACKLIST_DIRNAMES <<'/---'
List of absolute paths of directories to be blacklisted from recursive removal.
Specifically, when at least one such path is passed to a `zeshy`-specific
recursive path remover (e.g., remove_path_recursive()):

* If the current shell is interactive _and_ `rm` option `-i` is set (e.g., by
  ${ZY_OPTIONS_RM_IF_INTERACTIVE}), such remover interactively confirms such
  removal with the current user. Given the severity of such removal,
  sufficiently strong confirmation is required (e.g., typing `YES`). If such
  confirmation is _not_ received, such removal fails.
* Else, such removal fails.

Hence, blacklisted directories _cannot_ be removed non-interactively.
/---
# Since the "rm" command already supports blacklisting the "/" directory with
# option "--preserve-root", this list excludes such directory by default.
ZY_REMOVE_PATH_RECURSIVE_BLACKLIST_DIRNAMES=(
    '/bin'
    '/boot'
    '/dev'
    '/etc'
    '/home'
    '/lib32'
    '/lib64'
    '/opt'
    '/proc'
    '/root'
    '/sbin'
    '/sys'
    '/usr'
    '/usr/bin'
    '/usr/include'
    '/usr/lib32'
    '/usr/lib64'
    '/usr/libexec'
    '/usr/local'
    '/usr/local/bin'
    '/usr/local/sbin'
    '/usr/sbin'
    '/usr/share'
    '/usr/src'
    '/var'
)

# ....................{ RMDIR                                 }....................
:list.global ZY_OPTIONS_RMDIR <<'/---'
`rmdir` options specific to the remove_dir*() functions.
/---
ZY_OPTIONS_RMDIR=()

:list.global ZY_OPTIONS_RMDIR_IF_INTERACTIVE <<'/---'
`rmdir` options if run interactively.
/---
ZY_OPTIONS_RMDIR_IF_INTERACTIVE=(
    --verbose
)

:list.global ZY_OPTIONS_RMDIR_IF_NONINTERACTIVE <<'/---'
`rmdir` options if run non-interactively.
/---
ZY_OPTIONS_RMDIR_IF_NONINTERACTIVE=()
