#!/usr/bin/env zsh

:parcel <<'/---'
Configure default `zeshy` *text styles* (i.e., mappings from styles to string
literals, permitting human-readable customization of strings output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.

== See Also ==

* https://en.wikipedia.org/wiki/Box-drawing_character[Box-drawing characters] in
  a variety of popular encodings, including UTF-8.
/---

# ....................{ TEXT                               }....................
#FIXME: Manually attempting to keep this synchronizing with
#${ZY_STYLE_TO_TEXT_UTF8} below is a fool's errand. If the current digest is
#the debug digest, we *NEED* to make sure that ${ZY_STYLE_TO_TEXT_UTF8}
#contains the exact same keys as this map. This should be a fairly simple
#algorithm: get the keys for both maps into two lists, then perform a list
#difference (in whatever arbitrary direction produces the most readable output).
#If such difference is empty, the two maps are synchronized; else, print a
#warning containing listing all keys which differ between the two.

:map.global ZY_STYLE_TO_TEXT_UTF8 <<'/---'
Map styles to UTF-8-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal support such encoding. If such locale and terminal do _not_ support
such encoding, `zeshy` reverts to the ASCII-encoded string literals mapped by
${ZY_STYLE_TO_TEXT_ASCII}.

Such strings contain only *printable UTF-8-encoded characters* (i.e., any
Unicode character in UTF-8 encoding excluding control characters). Since ANSI
escape codes contain control characters, such strings contain no such codes.

See ${ZY_STYLE_TO_COLOR_NAMES} for further details on styles.
/---
() {
    #FIXME: Right. Since 7-bit "bold:black" (i.e., "grey") is an issue, such
    #color should simply be automatically replaced by a non-problematic
    #equivalent in whichever of the 88- or 256-color spaces is available when
    #running under such terminals. This really goes for all of the strictly
    #greyscale colors as well: "white", "grey", and so on.

    # Strings commonly referenced below. Caveats include:
    #
    # * Terminal "rxvt-unicode" under font "DejaVu Sans Mono" fails to display
    #   numerous characters properly (e.g., "※") or at all (e.g., "≪") under the
    #   7-bit bold black color. Since such terminal-font combination appears to
    #   properly display such characters under all other colors, avoid such
    #   color when displaying such characters. Of course, since "rxvt-unicode"
    #   always supports at least 88 colors and hence a proper bold black color,
    #   this is typically not an issue.
    string\
        dot_mid='·'\
        ellipsis='…'\
        ellipsis_mid='⋯'\
        quote_double_left='“'\
        quote_double_right='”'\
        quote_single_left='‘'\
        quote_single_right='’'\
        border_top='┈'\
        border_bottom='┈'\
        border_left='┋ '\
        border_right=' ┋'\
        corner_top_left='┎'\
        corner_top_right='┒'\
        corner_bottom_left='┖'\
        corner_bottom_right='┚'\
        joiner_left='• '\
        joiner_midst='•'\
        joiner_right=' •'\
        parens_left='❰'\
        parens_right='❱'\
        angler_left='≪'\
        angler_right='≫'\
        arrow_left_head=' ≪'\
        arrow_left_body='⋯'\
        arrow_left_tail='· '\
        item_line_first_border_left='╏ '\
        item_line_first_border_right='╏'\
        item_line_first_suffix_right=' '\
        item_line_midst_border_left='┇ '\
        item_line_midst_border_right='┇'\
        item_line_midst_suffix_right=' '\
        runner_eval_prefix='('\
        runner_eval_suffix=')'\
        runner_function_prefix=''\
        runner_function_suffix='()'\
        runner_filename_prefix='“'\
        runner_filename_suffix='”'
#FIXME: Awesome for use as the arrow above, but requires better greyscale color
#support. For now, merely a mildly pretty painting: ≪⋯※
#   '≪⋯≫ «⋯» «—» ≪⋯¤ ≪⋯• ≪⋯⋯· ≪··⋯ «⋯• •⚫⬤ ●  ≪⋯» ◀——● ◀—— ◂— ◀⋯⋯ ◂▪ ●—— ⚫┈┈ ⚫⋯ ●⋯ ⬤── ⚫── ≪─'

    #FIXME: Rename "_continued" to "_nonfirst" everywhere.
    ZY_STYLE_TO_TEXT_UTF8=(
        # Pseudo-styles mapped to the corresponding characters.
        text.ellipsis           "${ellipsis}"
        text.quote_double_left  "${quote_double_left}"
        text.quote_double_right "${quote_double_right}"
        text.quote_single_left  "${quote_single_left}"
        text.quote_single_right "${quote_single_right}"

        # output_line().
        output_line.border_left  "${border_top}"
        output_line.border_right "${border_top}"

        #FIXME: Copy below, after working.
        # print_call_stack(), printing output resembling:
        #
        #    ┎┈┈┈•
        #    ┖┰┈┈•
        #     ┖┰┈•
        #      ┖┈•
        #
        #   ┇┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
        #   ┖┰┈┈•
        #    ┖┰┈•
        #     ┖┈•
        print_call_stack.frame_first.corner_left '┎'
        print_call_stack.frame_first.forker_left ''
        print_call_stack.frame_first.border_left "${border_top}"
        print_call_stack.frame_first.joiner_left "${joiner_left}"
        print_call_stack.frame_midst.corner_left '┖'
        print_call_stack.frame_midst.forker_left '┰'
        print_call_stack.frame_midst.border_left "${border_top}"
        print_call_stack.frame_midst.joiner_left "${joiner_left}"
        print_call_stack.frame_last.corner_left  '┖'
        print_call_stack.frame_last.forker_left  ''
        print_call_stack.frame_last.border_left  "${border_top}"
        print_call_stack.frame_last.joiner_left  "${joiner_left}"
        print_call_stack.callee.eval_prefix      "${runner_eval_prefix}"
        print_call_stack.callee.eval_suffix      "${runner_eval_suffix}"
        print_call_stack.callee.function_prefix  "${runner_function_prefix}"
        print_call_stack.callee.function_suffix  "${runner_function_suffix}"
        print_call_stack.callee.filename_prefix  "${runner_filename_prefix}"
        print_call_stack.callee.filename_suffix  "${runner_filename_suffix}"
        print_call_stack.caller.corner_left      "${arrow_left_head}"
        print_call_stack.caller.border_left      "${arrow_left_body}"
        print_call_stack.caller.joiner_left      "${arrow_left_tail}"
        print_call_stack.caller.filename_prefix  "${runner_filename_prefix}"
        print_call_stack.caller.filename_suffix  "${runner_filename_suffix}"
        print_call_stack.caller.line_prefix      " ${joiner_midst} "
        print_call_stack.caller.line_suffix      ''

        #FIXME: Copy below.
        # print_exception(), printing output resembling:
        #
        #   ┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• mount_disk() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
        #   ┇ mount_boot_dir_writable() failed with 1:     ┇
        #   ┇ Expected no arguments.                       ┇
        #   ┇┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
        #   ┖┰┈┈•
        #    ┖┰┈•
        #     ┖┈•
        print_exception.heading.corner_left              "${corner_top_left}"
        print_exception.heading.corner_right             "${corner_top_right}"
        print_exception.heading.border_left              "${border_top}"
        print_exception.heading.border_right             "${border_top}"
        print_exception.heading.joiner_left              "${joiner_left}"
        print_exception.heading.joiner_right             "${joiner_right}"
        print_exception.heading.runnable.eval_prefix     "${runner_eval_prefix}"
        print_exception.heading.runnable.eval_suffix     "${runner_eval_suffix}"
        print_exception.heading.runnable.function_prefix "${runner_function_prefix}"
        print_exception.heading.runnable.function_suffix "${runner_function_suffix}"
        print_exception.heading.runnable.filename_prefix "${runner_filename_prefix}"
        print_exception.heading.runnable.filename_suffix "${runner_filename_suffix}"
        print_exception.failure.runnable.eval_prefix     "${runner_eval_prefix}"
        print_exception.failure.runnable.eval_suffix     "${runner_eval_suffix}"
        print_exception.failure.runnable.function_prefix "${runner_function_prefix}"
        print_exception.failure.runnable.function_suffix "${runner_function_suffix}"
        print_exception.failure.runnable.filename_prefix "${runner_filename_prefix}"
        print_exception.failure.runnable.filename_suffix "${runner_filename_suffix}"
        print_exception.failure.footing.border_left      "${border_top}"
        print_exception.failure.footing.border_right     "${border_top}"
        print_exception.failure.status_suffix            '.'
        print_exception.content.border_left              "${border_left}"
        print_exception.content.border_right             "${border_right}"
        print_exception.footing.corner_left              '┠'
        print_exception.footing.corner_right             "${corner_bottom_right}"
        print_exception.footing.border_left              "${border_bottom}"
        print_exception.footing.border_right             "${border_bottom}"
        print_exception.stack.frame_first.corner_left    '┖'
        print_exception.stack.frame_first.forker_left    '┰'
        print_exception.stack.frame_first.border_left    "${border_top}"
        print_exception.stack.frame_first.joiner_left    "${joiner_left}"
        print_exception.stack.frame_midst.corner_left    '┖'
        print_exception.stack.frame_midst.forker_left    '┰'
        print_exception.stack.frame_midst.border_left    "${border_top}"
        print_exception.stack.frame_midst.joiner_left    "${joiner_left}"
        print_exception.stack.frame_last.corner_left     '┖'
        print_exception.stack.frame_last.forker_left     ''
        print_exception.stack.frame_last.border_left     "${border_top}"
        print_exception.stack.frame_last.joiner_left     "${joiner_left}"
        print_exception.stack.callee.eval_prefix         "${runner_eval_prefix}"
        print_exception.stack.callee.eval_suffix         "${runner_eval_suffix}"
        print_exception.stack.callee.function_prefix     "${runner_function_prefix}"
        print_exception.stack.callee.function_suffix     "${runner_function_suffix}"
        print_exception.stack.callee.filename_prefix     "${runner_filename_prefix}"
        print_exception.stack.callee.filename_suffix     "${runner_filename_suffix}"
        print_exception.stack.caller.corner_left         "${arrow_left_head}"
        print_exception.stack.caller.border_left         "${arrow_left_body}"
        print_exception.stack.caller.joiner_left         "${arrow_left_tail}"
        print_exception.stack.caller.filename_prefix     "${runner_filename_prefix}"
        print_exception.stack.caller.filename_suffix     "${runner_filename_suffix}"
        print_exception.stack.caller.line_prefix         " ${joiner_midst} "
        print_exception.stack.caller.line_suffix         ''

        # print_message().
        print_message.heading.runnable.eval_prefix     "${runner_eval_prefix}"
        print_message.heading.runnable.eval_suffix     "${runner_eval_suffix}"
        print_message.heading.runnable.function_prefix "${runner_function_prefix}"
        print_message.heading.runnable.function_suffix "${runner_function_suffix}"
        print_message.heading.runnable.filename_prefix "${runner_filename_prefix}"
        print_message.heading.runnable.filename_suffix "${runner_filename_suffix}"
        print_message.heading.corner_left              "${corner_top_left}"
        print_message.heading.corner_right             "${corner_top_right}"
        print_message.heading.border_left              "${border_top}"
        print_message.heading.border_right             "${border_top}"
        print_message.heading.joiner_left              "${joiner_left}"
        print_message.heading.joiner_right             "${joiner_right}"
        print_message.content.border_left              "${border_left}"
        print_message.content.border_right             "${border_right}"
        print_message.footing.corner_left              "${corner_bottom_left}"
        print_message.footing.corner_right             "${corner_bottom_right}"
        print_message.footing.border_left              "${border_bottom}"
        print_message.footing.border_right             "${border_bottom}"

        # print_message_heading().
        print_message_heading.corner_left  '┃'
        print_message_heading.corner_right '┃'
        print_message_heading.border_left  "${border_top}"
        print_message_heading.border_right "${border_top}"
        print_message_heading.joiner_left  "${joiner_left}"
        print_message_heading.joiner_right "${joiner_right}"

        # print_message_item().
        print_message_item.line_first.border_left  "${item_line_first_border_left}"
        print_message_item.line_first.border_right "${item_line_first_border_right}"
        print_message_item.line_first.suffix_right "${item_line_first_suffix_right}"
        print_message_item.line_first.joiner_right "${joiner_midst}"
        print_message_item.line_first.padder_right "${border_top}"
        print_message_item.line_midst.border_left  "${item_line_midst_border_left}"
        print_message_item.line_midst.border_right "${item_line_midst_border_right}"
        print_message_item.line_midst.suffix_right "${item_line_midst_suffix_right}"
        print_message_item.line_midst.joiner_right "${joiner_midst}"
        print_message_item.line_midst.padder_right "${border_top}"

        # print_warning().
        print_warning.heading.runnable.eval_prefix     "${runner_eval_prefix}"
        print_warning.heading.runnable.eval_suffix     "${runner_eval_suffix}"
        print_warning.heading.runnable.function_prefix "${runner_function_prefix}"
        print_warning.heading.runnable.function_suffix "${runner_function_suffix}"
        print_warning.heading.runnable.filename_prefix "${runner_filename_prefix}"
        print_warning.heading.runnable.filename_suffix "${runner_filename_suffix}"
        print_warning.heading.corner_left              "${corner_top_left}"
        print_warning.heading.corner_right             "${corner_top_right}"
        print_warning.heading.border_left              "${border_top}"
        print_warning.heading.border_right             "${border_top}"
        print_warning.heading.joiner_left              "${joiner_left}"
        print_warning.heading.joiner_right             "${joiner_right}"
        print_warning.content.border_left              "${border_left}"
        print_warning.content.border_right             "${border_right}"
        print_warning.footing.corner_left              "${corner_bottom_left}"
        print_warning.footing.corner_right             "${corner_bottom_right}"
        print_warning.footing.border_left              "${border_bottom}"
        print_warning.footing.border_right             "${border_bottom}"

        # :print_warning_item().
        :print_warning_item.line_first.border_left  "${item_line_first_border_left}"
        :print_warning_item.line_first.border_right "${item_line_first_border_right}"
        :print_warning_item.line_first.suffix_right "${item_line_first_suffix_right}"
        :print_warning_item.line_first.joiner_right "${joiner_midst}"
        :print_warning_item.line_first.padder_right "${border_top}"
        :print_warning_item.line_midst.border_left  "${item_line_midst_border_left}"
        :print_warning_item.line_midst.border_right "${item_line_midst_border_right}"
        :print_warning_item.line_midst.suffix_right "${item_line_midst_suffix_right}"
        :print_warning_item.line_midst.joiner_right "${joiner_midst}"
        :print_warning_item.line_midst.padder_right "${border_top}"

        # set_string_to_query_character(), printing output resembling:
        # ┗╸❰n·N┃y·Y❱
        set_string_to_query_character.prompt.border_left      '┗╸'
        set_string_to_query_character.prompt.joiner_left      ''    # •
        set_string_to_query_character.prompt.parens_left      "${parens_left}"   # ⦃⟦
        set_string_to_query_character.prompt.parens_right     "${parens_right} "  # ⦄⟧
        set_string_to_query_character.prompt.choice_separator '•'   # •·
        set_string_to_query_character.prompt.choice_fork      '┃'   # ⋰⚕┋╏/
    )
}

# ....................{ STYLES ~ ascii                     }....................
:map.global ZY_STYLE_TO_TEXT_ASCII <<'/---'
Map styles to ASCII-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal do _not_ support any richer encoding. For example, if such locale and
terminal support the UTF-8 encoding, `zeshy` prefers the UTF-8-encoded string
literals mapped by ${ZY_STYLE_TO_TEXT_UTF8} to those of this map. See such
map for further details.
/---
() {
    # Strings commonly referenced below.
    string\
        border_top='-'\
        border_bottom='-'\
        border_left='| '\
        border_right=' |'\
        corner_top_left='/'\
        corner_top_right='\'\
        corner_bottom_left='\'\
        corner_bottom_right='/'\
        joiner_left='{ '\
        joiner_right=' }'

    ZY_STYLE_TO_TEXT_ASCII=(
        # Pseudo-styles. See ${ZY_STYLE_TO_TEXT_UTF8} above.
        text.quote_double_left  '"'
        text.quote_double_right '"'
        text.quote_single_left  "'"
        text.quote_single_right "'"

        # output_line_horizontal().
        output_line_horizontal.border "${border_top}"

        # print_message().
        print_message.heading.corner_left  "${corner_top_left}"
        print_message.heading.corner_right "${corner_top_right}"
        print_message.heading.border_left  "${border_top}"
        print_message.heading.border_right "${border_top}"
        print_message.heading.joiner_left  "${joiner_left}"
        print_message.heading.joiner_right "${joiner_right}"
        print_message.content.border_left     "${border_left}"
        print_message.content.border_right    "${border_right}"
        print_message.footing.corner_left  "${corner_bottom_left}"
        print_message.footing.corner_right "${corner_bottom_right}"
        print_message.footing.border_left  "${border_bottom}"
        print_message.footing.border_right "${border_bottom}"

        # print_warning().
        print_warning.heading.corner_left  "${corner_top_left}"
        print_warning.heading.corner_right "${corner_top_right}"
        print_warning.heading.border_left  "${border_top}"
        print_warning.heading.border_right "${border_top}"
        print_warning.heading.joiner_left  "${joiner_left}"
        print_warning.heading.joiner_right "${joiner_right}"
        print_warning.content.border_left  "${border_left}"
        print_warning.content.border_right "${border_right}"
        print_warning.footing.corner_left  "${corner_bottom_left}"
        print_warning.footing.corner_right "${corner_bottom_right}"
        print_warning.footing.border_left  "${border_bottom}"
        print_warning.footing.border_right "${border_bottom}"

        # print_error().
#        print_error.heading.corner_left  "${corner_top_left}"
#        print_error.heading.corner_right "${corner_top_right}"
#        print_error.heading.border_left  "${border_top}"
#        print_error.heading.border_right "${border_top}"
#        print_error.heading.joiner_left  "${joiner_left}"
#        print_error.heading.joiner_right "${joiner_right}"
#        print_error.content.border_left  "${border_left}"
#        print_error.content.border_right "${border_right}"
#        print_error.footing.corner_left  "${corner_bottom_left}"
#        print_error.footing.corner_right "${corner_bottom_right}"
#        print_error.footing.border_left  "${border_bottom}"
#        print_error.footing.border_right "${border_bottom}"

        # print_message_heading().
        #   |===================================={ hello }:catch================================|
        #   |------------------------------------{ hello }---------------------------------|
        #   -------------------------------------{ hello }----------------------------------
        #   ====================================={ hello }:catch=================================
        #   _____________________________________[ hello ]__________________________________
        print_message_heading.corner_left  "${border_top}"
        print_message_heading.corner_right "${border_top}"
        print_message_heading.border_left  "${border_top}"
        print_message_heading.border_right "${border_top}"
        print_message_heading.joiner_left  "${joiner_left}"
        print_message_heading.joiner_right "${joiner_right}"

        # print_message_item().
        print_message_item.border_left            '[ '
        print_message_item.border_right           ']'
        print_message_item.border_left_continued  '( '
        print_message_item.border_right_continued ')'
        print_message_item.padder_right           "${border_top}"

        # set_string_to_query_character().
        set_string_to_query_character.prompt.border_left      '| '
        set_string_to_query_character.prompt.joiner_left      ''
        set_string_to_query_character.prompt.parens_left      ' ['
        set_string_to_query_character.prompt.parens_right     '] '
        set_string_to_query_character.prompt.choice_separator ','
        set_string_to_query_character.prompt.choice_fork      '/'
    )
}
