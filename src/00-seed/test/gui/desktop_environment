#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *desktop environment testers* (i.e., high-level functions testing whether
the current desktop environment either is a particular such environment _or_
belongs to a particular category of such environments).
/---

# ....................{ GLOBALS                            }....................
# Note that @{inspect} sets string global ${ZY_DESKTOP_ENVIRONMENT_NAME} at
# the beginning of digest compilation.

:str.global ZY_DESKTOP_ENVIRONMENT_ID <<'/---'
Machine-readable name of the *current desktop environment*. Such string is
guaranteed to be nonempty, but may contain both whitespace and capitalized
letters and hence is _not_ human-readable.
/---

# ....................{ DEFINERS                           }....................
# To add support for a new desktop environment:
#
# * Add a test detecting such server to @{inspect}, setting string global
#   ${ZY_DISPLAY_SERVER_NAME} to such server's human-readable name.
# * Add such server's machine-readable name to local list ${desktop_environment_ids}.
# * Match such server's human-readable name below, setting string global
#   ${ZY_DISPLAY_SERVER_ID} to such server's machine-readable name.
# * Document :is_os_${ZY_DISPLAY_SERVER_ID}(), which this function defines.

:func.doc <<'/---'
void ::define_desktop_environment_testers()

Define all desktop environment testers to unconditionally report either success or
failure.
/---
function ::define_desktop_environment_testers() {
    # Validate sanity.
    die_if_args

    # List of all machine-readable desktop environment names.
    :list desktop_environment_ids; desktop_environment_ids=(
        # GNOME.
        cinammon gnome_2 gnome_shell mate

        # Other.
        kde lxde unity xfce
    )

    # True if the current desktop environment is explicitly recognized by zeshy.
    # (Defaults to true.)
    :bool is_desktop_environment_recognized=1

    # If the current desktop environment was previously identified by
    # @{inspect}, map from human- to machine-readable desktop environment names
    # (e.g., from "XFCE 5" to "xfce"). Technically, such names are also settable
    # by copying the corresponding @{inspect} tests here (e.g.,
    # "(( ${+KDE_SESSION_VERSION} ))", implying the current desktop environment
    # to be KDE).  Since such tests are liable to change with time, however,
    # centralizing such tests in @{inspect} is preferable to repeating them.
    if is -n "${ZY_DESKTOP_ENVIRONMENT_NAME}" si {
        # Define a tester implying the current shell to be running under a
        # desktop environment to report success.
        :define_func_to_report_success :is_desktop_environment

        # Convert such human- to machine-readable desktop environment name.
        case "${ZY_DESKTOP_ENVIRONMENT_NAME}" {
        # Match versioned desktop environments.
        ('GNOME 2')
            ZY_DESKTOP_ENVIRONMENT_ID='gnome_2'
            :case.break
        ('GNOME Shell')
            ZY_DESKTOP_ENVIRONMENT_ID='gnome_shell'
            :case.break
        # Unlike GNOME, major revisions of KDE tend to maintain backward
        # compatibility. Hence, ignore such version for testing purposes.
        ('KDE'*)
            ZY_DESKTOP_ENVIRONMENT_ID='kde'
            :case.break
        # Unlike GNOME, major revisions of Xfce tend to maintain backward
        # compatibility. Hence, ignore such version for testing purposes.
        ('Xfce'*)
            ZY_DESKTOP_ENVIRONMENT_ID='xfce'
            :case.break
        # Match unversioned desktop environments.
        ('Cinammon')
            ZY_DESKTOP_ENVIRONMENT_ID='cinammon'
            :case.break
        ('LXDE')
            ZY_DESKTOP_ENVIRONMENT_ID='lxde'
            :case.break
        ('MATE')
            ZY_DESKTOP_ENVIRONMENT_ID='mate'
            :case.break
        ('Unity')
            ZY_DESKTOP_ENVIRONMENT_ID='unity'
            :case.break
        # Else, the current desktop environment is unrecognized.
        (*)
            # Note such fact.
            is_desktop_environment_recognized=0

            # Convert such human- to machine-readable name, resembling that
            # @{identify} applies to ${ZY_SYSTEM_ID} in addition to
            # lowercasing such name.
            ZY_DESKTOP_ENVIRONMENT_ID="${(L)ZY_DESKTOP_ENVIRONMENT_NAME//[^[:alpha:]]##/_}"

            # Since zeshy is likely to perform poorly under unrecognized display
            # servers, print a nonfatal warning.
            :warning.output\
                "Desktop environment \"${ZY_DESKTOP_ENVIRONMENT_NAME}\" unrecognized."
        }
    # Else, the current desktop environment was *NOT* previously identified. Assuming
    # the tests performed by @{inspect} to be reliable, this implies the current
    # shell to *NOT* be running under a desktop environment. Define the corresponding
    # tester to report failure.
    } else {
        :define_func_to_report_failure :is_desktop_environment
    }

    # If the current desktop environment was recognized, define the corresponding
    # tester to report success.
    if (( is_desktop_environment_recognized )) {
        :define_func_to_report_success\
            ":is_desktop_environment_${ZY_DESKTOP_ENVIRONMENT_ID}"
    }

    # Define all other such testers to report failure by iterating over all
    # possible desktop environments excluding the current such environment. See
    # remove_list_items() for further details.
    :str desktop_environment_id_other
    for     desktop_environment_id_other (
        "${desktop_environment_ids[@]:#${ZY_DESKTOP_ENVIRONMENT_ID}}") {
        :define_func_to_report_failure\
            ":is_desktop_environment_${desktop_environment_id_other}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_desktop_environment()

Report success if the current windowing system provides a *desktop environment*
(i.e., the third-party component of such system implementing the so-called
``desktop metaphor,'' reinterpreting the computer display as a physical desktop
of movable objects such as documents and document folders).
/---

# ....................{ TESTERS ~ gnome                    }....................
:func.doc <<'/---'
[status: bool] :is_desktop_environment_gnome_2()

Report success if the current desktop environment is *GNOME 2.x* (i.e., the
GTK+-based GNU Project implementing the traditional desktop metaphor). The most
prominent component of such environment was (arguably) *GNOME Panel*, a
configurable GNOME application launcher and taskbar.
/---

:func.doc <<'/---'
[status: bool] :is_desktop_environment_gnome_shell()

Report success if the current desktop environment is *GNOME 3.x or newer* (i.e.,
a GTK+-based GNU Project implementing a document-centric rather than traditional
desktop metaphor). The most prominent component of such environment is
(arguably) *GNOME Shell*, a widget engine and graphical user interface (GUI) for
application launching and window switching.
/---

:func.doc <<'/---'
[status: bool] :is_desktop_environment_cinammon()

Report success if the current desktop environment is *Cinammon* (i.e., a
GTK+-based desktop enviroment forked from GNOME 3.x but still implementing the
traditional desktop metaphor).
/---

:func.doc <<'/---'
[status: bool] :is_desktop_environment_mate()

Report success if the current desktop environment is *MATE* (i.e., a GTK+-based
desktop enviroment forked from GNOME 2.x and hence implementing the traditional
desktop metaphor).
/---

# ....................{ TESTERS ~ maximal                  }....................
:func.doc <<'/---'
[status: bool] :is_desktop_environment_kde()

Report success if the current desktop environment is *KDE Plasma Workspaces*
(i.e., the set of all Qt-based graphical environments first introduced by KDE
Software Compilation 4), also referred to as *Plasma* or *Plasma Desktop*.
/---

:func.doc <<'/---'
[status: bool] :is_desktop_environment_unity()

Report success if the current desktop environment is *Ubuntu Unity* (i.e., the
graphical user interface (GUI) for Ubuntu Linux implementing a document-centric
desktop metaphor, previously developed as a shell interface for the GNOME
desktop environment under the X.Org display server but redeveloped in Unity 8 as
a standalone desktop environment under the Mir display server).
/---

# ....................{ TESTERS ~ minimal                  }....................
:func.doc <<'/---'
[status: bool] :is_desktop_environment_lxde()

Report success if the current desktop environment is the *Lightweight X11
Desktop Environment (LXDE)* (i.e., an energy-efficient implementation of the
traditional desktop metaphor based on either the GTK+ or Qt graphical toolkits).
/---

:func.doc <<'/---'
[status: bool] :is_desktop_environment_xfce()

Report success if the current desktop environment is *Xfce* (i.e., a lightweight
implementation of the traditional desktop metaphor based on GTK+).
/---

# --------------------( WASTELANDS                         )--------------------
    # Define testers corresponding to booleans set above accordingly.
    # :define_func_to_report_bool\
    #     :is_desktop_environment_trait_x "${is_desktop_environment_trait_x}"

# ....................{ TESTERS ~ trait                    }....................
#FUXME: Is this honestly useful at all? Doubt remains.
# :func.doc <<'/---'
# [status: bool] :is_desktop_environment_trait_gnome()
# 
# Report success if the current desktop environment is *GNOME* (i.e., a GTK+-
# based GNU Project implementing a desktop metaphor), regardless of major version
# and hence including both GNOME 2 and GNOME 3 desktop environments. This does
# _not_ include GNOME forks (e.g., Cinammon, MATE), which typically deviate too
# heavily from their derived codebases to usefully categorize as ``GNOME.''
# /---
 # Such manager is often abbreviated as *KDE* or *Plasma*.

#-- the component of the current windowing system
# implementing the desktop metaphor for the current display of the current display
# server -- 
#function :is_desktop_environment_kde() {
#    die_if_args
#}
