#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *windowing system testers* (i.e., high-level functions testing whether
the current windowing system -- consisting of display server, windowing manager,
related protocols -- either is a particular windowing system _or_ belongs to a
particular category or lineage of windowing systems).

== Nomenclature ==

For convenience, `zeshy` often uses the terms *windowing system* and *display
server* (i.e., the core component of windowing systems, defining the
communications protocol with which client GUI applications both receive input
and render output) interchangeably. In most cases, the two terms _are_ fairly
synonymous and hence interchangeable: X11 is both a windowing system _and_
display server, as is Wayland.
/---

# --------------------( WASTELANDS                         )--------------------
# ....................{ TESTERS                            }....................
# :func.doc <<'/---'
# [status: bool] :is_ws_x()
# 
# Report success if the current windowing system is the *X Window System*. For
# brevity, such name is often abbreviated to:
# 
# * *X*.
# * *X11*, the current (and hopefully last) version of the X display server
#   protocol.
# * *X.Org*, the current reference implementation for such system, developed by
#   the X.Org Foundation.
# /---
# function :is_ws_x() {
#     # X *ALWAYS* exports global variable ${DISPLAY} to a string describing the
#     # connection to the current X display server, formatted as a ":"-delimited
#     # optional hostname followed by mandatory display number. In any case, the
#     # existence of such global unambiguously implies the current shell to be
#     # running under X. Indeed, setting such variable in an environment *NOT*
#     # running under X provokes calamity, suggesting that should never happen.
#     #
#     # To corroborate such test, we could also test the existence of at least one
#     # process running "${commands[X]}" *AND* listening to the current value of
#     # ${DISPLAY}. However, since this function is called comparatively early in
#     # zeshy startup, inlining process testing functionality here would both be
#     # somewhat burdensome and inefficient. In the immortal words of Malcolm
#     # Reynolds, "Frack that."
#     die_if_args
#     (( ${+DISPLAY} ))
# }
