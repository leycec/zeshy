#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle top-level testers specific to *pathables* (i.e., external commands in the
current shell's command hash table, effectively derived from the commands in the
current user's ${PATH}).
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :pathable.is(+:str command_names)

Report success if all passed commands are *pathable* (i.e., in the current
shell's command hash table), typically synonymous with ``...in the current
user's ${PATH}'').
/---
function :pathable.is() {
    # For posterity, this condition is also (less efficiently) testable with:
    #
    #     # Either this...
    #     >>> is "${1:t:c}" == '/'* si
    #     # Or this.
    #     >>> run_code_silent get_pathable_path_if_found "${1}"
    #
    # Validate sanity.
    die_unless_args 'Expected one or more command names.'

    #FIXME: There's probably an even more efficient implementation for the
    #latter condition, based on get_pathable_path_if_found_first():
    #
    #     list  command_filenames; command_filenames=( ${${^@:t:c}:#[^/]*} )
    #     (( ${#command_filenames} ))
    #
    #Pretty brutally clever. See such function for further details. And test!

    # If passed only one command, test such condition efficiently. Since this
    # function is called frequently during digest compilation, this minor
    # optimization should be fairly useful.
    if { is_arg } {
        { (( ${+commands[${1}]} )) } =status.report
    # Else, test such condition iteratively. While we could do so with explicit
    # iteration, implicit iteration provides a substantially more efficient
    # implementation. For each passed command name ${command_name}, replace such
    # name with "\${+commands[${(q)command_name}]} +", quote-protected such name
    # to ensure proper handling of command names containing shell-reserved
    # characters. For example, when passed names "import" and "scrot", such
    # replacement expands to the following dynamic test:
    #
    #     (( ${+commands[import]} + ${+commands[scrot]} + 0 == # ))
    #
    # Since "${+...}" expands to 1 if such map key and hence command exists and
    # 0 otherwise, such test is true if and only if all such commands exist.
    #
    # Obscenely over-engineered pablum? Yes. But it's efficient pablum.
    } else {
        eval '{
            (( '${@//(#m)*/\${+commands[${(q)MATCH}]} +}' 0 == # ))
        } =status.report'
    }
}

:func.doc <<'/---'
[status: bool] is_pathable_gnu(string command_name)

Report success if the passed command is in the current ${PATH} _and_ the GNU
implementation of such command. Such implementations often implement helpful, if
non-standard, long-form options either unavailable in non-GNU implementations
(e.g., `grep --perl-regexp`) or available only via short-form options (e.g.,
`ls -v` rather than `ls --version`).
/---
function is_pathable_gnu() {
    # Validate sanity.
    die_unless_arg 'Expected one command name.'
    :str command_name="${1}"

    # Report success if the following conditions are all true:
    #
    # * Such command is in the current ${PATH}.
    # * Such command successfully returns its version given a GNU-style option.
    # * Such version contains "GNU".
    :pathable.is "${command_name}" and {
        string output
        output="$(command "${command_name}" --version 2>&/dev/null)" and
            is "${output}" == *'GNU'* si
    }
}

# --------------------( WASTELANDS                         )--------------------
        # eval "(( ${@//(#m)*/\${+commands[${MATCH}]\} +} 0 == # ))"
    #FUXME: Actually, there's a far simpler (and probably slightly more
    #efficient) implementation:
    #
    #    (( ${+commands[${1}]} ))
    #
    #Nice! Note this needs module "zsh/parameter" to have been loaded at this
    #point. This *SHOULD* be the case, but check this.

    # See get_pathable_path_if_found() for further details. Were that function
    # accessible at this early time, this would be implementable as follows:
    #
    #   run_code_silent get_pathable_path_if_found "${1}"
#   is "${1:t:c}" == '/'* si
