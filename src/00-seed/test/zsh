#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *top-level testers* (i.e., tester functions intended to be called from
a top-level shell script context).
/---

# ....................{ TESTERS ~ math                     }....................
:func.document <<'/---'
[status: bool] is_math_function_rand48()

Report success if `zsh` was compiled with support for erand48(), an optional C
function defined by the current system's mathematical library (e.g., `libm`).
/---
function is_math_function_rand48() {
    # Sadly, zsh provides no direct means of testing for such math support.
    # Happily, a venerate hack exists. If defined, rand48() always returns a
    # float in [0.0, 1.0). Hence, the test "(( rand48() >= 0.0 ))" only fails
    # under shells not providing such function. Since zsh prints an ignorable
    # error to standard error in such case, squelch such error.
    die_if_args
    eval '(( rand48() >= 0.0 ))' 2>/dev/null
}

# --------------------( WASTELANDS                         )--------------------
    # Test such function, squelching errors should such function not exist.

    # Since this function is often called prior to calling startup_zeshy(),
    # which autoloads zsh modules, load the module defining rand48() here.
    # zmodload zsh/mathfunc

#FUXME: Shift somewhere more appropriate. Perhaps we want a new component
#"runnable/pathable/gnu", for example. Ah; right. Such functions must be
#available early. Hence, shift to component "00-startup/15-pathable/gnu".
#FUXME: Replace with a more general function -- say, is_pathable_gnu().
#FUXME: Replace the call to is_pathable() with its underlying implementation.
