#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *operating system testers* (i.e., high-level functions testing whether
the current operating system either is a particular operating system _or_
belongs to a particular category of operating systems).
/---

# ....................{ GLOBALS                            }....................
#FIXME: List *ALL* common CPU architecture names here.

:str.global ZY_OS_NAME <<'/---'
Human-readable name of the *current operating system*. Such string is guaranteed
to be nonempty, but may contain both whitespace and capitalized letters and
hence is _not_ machine- readable.
/---

:str.global ZY_OS_ID <<'/---'
Machine-readable name of the *current operating system*. Such string is
guaranteed to be nonempty, but contains only underscores and uncapitalized
letters and hence is _not_ human-readable.
/---

# ....................{ DEFINERS                           }....................
# Note that canonical string global ${OSTYPE} is set during zsh compilation by
# autotools script "configure.ac" to the autotools-specific string global
# $host_os. Unfortunately, there appears to exist no definitive list of all
# $host_os values, necessitating the ad-hoc approach. Fortunately, reliable
# third-party sources matching a subset of such values do exist -- including:
#
# * "http://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob_plain;f=build-aux/config.rpath;hb=HEAD",
#   a shell script outputting variables setting the shared library runtime
#   search path in the GNU gnulib library. See also the files
#   "build-aux/config.library" and "m4/host-os.m4" in such library. Given that
#   GNU also maintains autotools, this approximates a definitive list.
# * "https://ftp.samba.org/pub/unpacked/ctdb/lib/replace/libreplace_ld.m4", the
#   suite of autotools macro definitions for SAMBA's libreplace.
# * "http://git.savannah.gnu.org/cgit/grub.git/plain/configure.ac", the
#   autotools configuration for GRUB2.
#
# We intentionally exclude operating systems no longer under active development
# (e.g., SunOS, SGI's IRIX, Hewlett Packard's Tru64 UNIX). Since zeshy requires
# zsh >= 5.0.0, such systems are unlikely to run zeshy reliably (if at all).
#
# To add support for a new OS:
#
# * Add such OS' zeshy-specific machine-readable name to local list ${os_names}.
# * Match such OS's autotools-specific name and convert such name to:
#   * The zeshy-specific machine-readable string global ${ZY_OS_ID}.
#   * The zeshy-specific human-readable string global ${ZY_OS_NAME}.
# * Document :is_os_${ZY_OS_ID}(), which this function defines.
# * If such OS supports no canonical display servers out-of-the-box (e.g., X11),
#   explicitly detect such OS' stock display server in @{inspect}.

:func.doc <<'/---'
void ::define_os_testers()

Define all operating system testers to unconditionally report either success or
failure.
/---
function ::define_os_testers() {
    # Validate sanity.
    die_if_args

    # List of all zeshy-specific machine-readable OS names.
    :list os_ids; os_ids=(
        # BSD.
        dragonfly_bsd freebsd netbsd openbsd pcbsd

        # Darwin.
        ios os_x

        # GNU.
        gnu_hurd gnu_kfreebsd gnu_kopensolaris

        # Linux.
        linux_android linux_gnu

        # Unix System V.
        aix hpux solaris

        # Other.
        aros haiku qnx_neutrino windows
    )

    # True if the current OS is explicitly recognized by zeshy. (Defaults to
    # true.)
    :bool is_os_recognized=1

    # True if the current OS is GNU/Linux. (Defaults to false.)
    :bool is_os_linux_gnu=0

    # True if the current OS is a BSD derivative. (Defaults to false.)
    :bool is_os_trait_bsd=0

    # True if the current OS has a Darwin core. (Defaults to false.)
    :bool is_os_trait_darwin=0

    # True if the current OS supports the GNU userland. (Defaults to
    # false.)
    :bool is_os_trait_gnu=0

    # True if the current OS is Linux. (Defaults to false.)
    :bool is_os_trait_linux=0

    # True if the current OS is a Unix System V derivative. (Defaults to false.)
    :bool is_os_trait_sysv=0

    # Convert versioned autotools- to unversioned zeshy-specific machine-
    # readable OS names (e.g., from "aix9" to "aix").
    # Map from autotools- to zeshy-specific OS names. The latter tend to
    # correspond more to the human-readable OS name than the former (e.g.,
    # "gnu_hurd" rather than "gnu", a patently unfortunate choice of identifier)
    # and, arguably more importantly, lack the OS versions frequently suffixing
    # the latter (e.g., "aix" rather than "aix9").
    case "${OSTYPE}" {
    # Map recognized autotools- to zeshy-specific OS names.
    ('aix'*)
        ZY_OS_ID='aix'
        ZY_OS_NAME='AIX'
        is_os_trait_sysv=1
        :case.break
    ('aros'*)
        ZY_OS_ID='aros'
        ZY_OS_NAME='AROS'
        :case.break
    ('dragonfly'*)
        ZY_OS_ID='dragonfly_bsd'
        ZY_OS_NAME='DragonFly BSD'
        is_os_trait_bsd=1
        :case.break
    ('freebsd'*)
        ZY_OS_ID='freebsd'
        ZY_OS_NAME='FreeBSD'
        is_os_trait_bsd=1
        :case.break
    ('haiku'*)
        ZY_OS_ID='haiku'
        ZY_OS_NAME='Haiku'
        :case.break
    ('hpux'*)
        ZY_OS_ID='hpux'
        ZY_OS_NAME='HP-UX'
        is_os_trait_sysv=1
        :case.break
    ('gnu'*)
        ZY_OS_ID='gnu_hurd'
        ZY_OS_NAME='GNU/Hurd'
        is_os_trait_gnu=1
        :case.break
    ('kfreebsd'*'-gnu')
        ZY_OS_ID='gnu_kfreebsd'
        ZY_OS_NAME='GNU/Hurd'
        is_os_trait_gnu=1
        is_os_trait_bsd=1
        :case.break
    ('kopensolaris'*'-gnu')
        ZY_OS_ID='gnu_kopensolaris'
        ZY_OS_NAME='GNU/kOpenSolaris'
        is_os_trait_gnu=1
        is_os_trait_sysv=1
        :case.break
    ('linux-android'*)
        ZY_OS_ID='linux_android'
        ZY_OS_NAME='Android'
        is_os_trait_linux=1
        :case.break
    ('linux-gnu'*)
        ZY_OS_ID='linux_gnu'
        ZY_OS_NAME='GNU/Linux'
        is_os_linux_gnu=1
        is_os_trait_gnu=1
        is_os_trait_linux=1
        :case.break
    ('netbsd'*)
        ZY_OS_ID='netbsd'
        ZY_OS_NAME='NetBSD'
        is_os_trait_bsd=1
        :case.break
    ('nto-qnx'*)
        ZY_OS_ID='qnx_neutrino'
        ZY_OS_NAME='QNX Neutrino'
        :case.break
    ('openbsd'*)
        ZY_OS_ID='openbsd'
        ZY_OS_NAME='OpenBSD'
        is_os_trait_bsd=1
        :case.break
    ('solaris'*)
        ZY_OS_ID='solaris'
        ZY_OS_NAME='Solaris'
        is_os_trait_sysv=1
        :case.break
    (('cygwin'|'mingw')*)
        ZY_OS_ID='windows'
        ZY_OS_NAME='Windows'
        :case.break
    # In contrast to *ALL* other operating systems, autotools ambiguously
    # prefixes $os_host by the name of the set of shared components underlying
    # such system (e.g., "darwin") rather than the fairly unambiguous name of
    # such system (e.g., "ios"). For disambiguity, correct this.
    ('darwin'*)
        is_os_trait_darwin=1

        # At present, only two distinct operating systems leverage Darwin:
        # desktop- and server-oriented OS X and mobile-oriented iOS. Since the
        # latter only run on ARM architecture and the former never do, the two
        # are distinguishable by whether the current architecture is ARM. This
        # is all Apple's fault.
        if { :is_isa_arm } {
            ZY_OS_ID='ios'
            ZY_OS_NAME='iOS'
        } else {
            ZY_OS_ID='os_x'
            ZY_OS_NAME='OS X'
        }

        :case.break
    # Else, the current operating system is unrecognized. This. Should. Not. Be.
    (*)
        # Note such fact.
        is_os_recognized=0

        # Convert such OS's autotools- to zeshy-specific machine-readable name,
        # similar to that @{identify} applies to ${ZY_SYSTEM_ID} in addition
        # to lowercasing such name.
        ZY_OS_ID="${(L)OSTYPE//[^[:alpha:]]##/_}"

        # Set such OS' human-readable name to its autotools-specific name,
        # capitalizing the first letter of such name.
        ZY_OS_NAME="${(C)OSTYPE}"

        # Since zeshy is likely to perform poorly under unrecognized OSes, print
        # a nonfatal warning.
        :warning.output "Operating system \"${OSTYPE}\" unrecognized."
    }

    # If the current OS was recognized, define the corresponding tester to
    # always report success.
    if (( is_os_recognized )) {
        :define_func_to_report_success ":is_os_${ZY_OS_ID}"
    }

    # Define all other individual OS testers to always report failure. For
    # efficiency, remove the current OS from the list of all possible OSes and
    # iterate such list. See remove_list_items() for further details.
    :str os_id_other
    for     os_id_other ("${os_ids[@]:#${ZY_OS_ID}}") {
        :define_func_to_report_failure ":is_os_${os_id_other}"
    }

    # Define testers corresponding to booleans set above accordingly.
    :define_func_to_report_bool :is_os_trait_bsd       "${is_os_trait_bsd}"
    :define_func_to_report_bool :is_os_trait_darwin    "${is_os_trait_darwin}"
    :define_func_to_report_bool :is_os_trait_gnu       "${is_os_trait_gnu}"
    :define_func_to_report_bool :is_os_trait_gnu_linux "${is_os_linux_gnu}"
    :define_func_to_report_bool :is_os_trait_linux     "${is_os_trait_linux}"
    :define_func_to_report_bool :is_os_trait_sysv      "${is_os_trait_sysv}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_os_aros()

Report success if the current operating system is an *AROS distribution* (i.e.,
a distribution of the AROS Research Operating System, an open-source
implementation of the AmigaOS 3.1 APIs).
/---

:func.doc <<'/---'
[status: bool] :is_os_haiku()

Report success if the current operating system is *Haiku* (i.e., an open-source
operating system compatible at both the source and binary level with the long-
defunct BeOS).
/---

:func.doc <<'/---'
[status: bool] :is_os_qnx_neutrino()

Report success if the current operating system is *QNX Neutrino* (i.e., a Unix-
like real-time operating system popular in the embedded systems market).
/---

:func.doc <<'/---'
[status: bool] :is_os_windows()

Report success if the current operating system is Microsoft Windows.
/---

# ....................{ TESTERS ~ darwin                   }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_darwin()

Report success if the current operating system has an Apple Darwin core. This
implies such system to provide both the *XNU kernel* (i.e., hybrid kernel
combining the Mach 3 microkernel and BSD 4.4 kernel subsystems) and well-known
low-level open-source components (e.g., `launchd`, `mDNSResponder`). While both
the OS X and iOS platforms leverage Darwin, this does _not_ necessarily imply
the current system to also provide high-level closed-source components commonly
associated with either platform (e.g., Carbon, Cocoa).
/---

:func.doc <<'/---'
[status: bool] :is_os_ios()

Report success if the current operating system is Apple iOS. This typically
implies such system to be running on an Apple mobile device (e.g., iPhone, iPod,
iPad).
/---

:func.doc <<'/---'
[status: bool] :is_os_os_x()

Report success if the current operating system is Apple OS X.
/---

# ....................{ TESTERS ~ bsd                      }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_bsd()

Report success if the current operating system is a *Berkeley Software
Distribution (BSD) derivative* (i.e., a Unix-like operating system comprising a
BSD kernel but _not_ necessarily the customary BSD userland). This includes:

* Debian GNU/kFreeBSD.
* DragonFly BSD.
* FreeBSD.
* NetBSD.
* OpenBSD.
/---

:func.doc <<'/---'
[status: bool] :is_os_dragonfly_bsd()

Report success if the current operating system is *DragonFly BSD* (i.e., a Unix-
like operating system forked from FreeBSD 4.8).
/---

:func.doc <<'/---'
[status: bool] :is_os_freebsd()

Report success if the current operating system is FreeBSD. This excludes Debian
GNU/kFreeBSD, an offshoot which only provides the FreeBSD kernel (rather than
both the FreeBSD kernel and corresponding userland).
/---

:func.doc <<'/---'
[status: bool] :is_os_netbsd()

Report success if the current operating system is NetBSD.
/---

:func.doc <<'/---'
[status: bool] :is_os_openbsd()

Report success if the current operating system is *OpenBSD* (i.e., a security-
focused Unix-like operating system forked from NetBSD.
/---

# ....................{ TESTERS ~ linux                    }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_linux()

Report success if the current operating system is a *Linux distribution* (i.e.,
a Unix-like operating system providing the Linux kernel), including but _not_
limited to conventional GNU/Linux distributions.
/---

:func.doc <<'/---'
[status: bool] :is_os_linux_android()

Report success if the current operating system is *Google Android* (i.e., a
Unix-like operating system providing the Linux kernel but _not_ GNU userland,
targetting touchscreen mobile devices).
/---

:func.doc <<'/---'
[status: bool] :is_os_linux_gnu()

Report success if the current operating system is a *GNU/Linux distribution*
(i.e., Unix-like operating system providing both the Linux kernel _and_ GNU
userland).
/---

# ....................{ TESTERS ~ gnu                      }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_gnu()

Report success if the current operating system supports the *GNU userland*
(i.e., suite of operating system utilities produced by the GNU Project). This
excludes operation systems unaffiliated with GNU supporting an optional subset
of such userland (e.g., via MacPorts under Apple Darwin).
/---

:func.doc <<'/---'
[status: bool] :is_os_gnu_hurd()

Report success if the current operating system is *GNU/Hurd* (i.e., the official
GNU operating system, providing the GNU Mach microkernel).
/---

:func.doc <<'/---'
[status: bool] :is_os_gnu_kfreebsd()

Report success if the current operating system is *Debian GNU/kFreeBSD* (i.e., a
FreeBSD variant providing both the GNU userland and core Debian package set).
/---

:func.doc <<'/---'
[status: bool] :is_os_gnu_kopensolaris()

Report success if the current operating system is *GNU/kOpenSolaris* (i.e., an
OpenSolaris variant providing the GNU userland).
/---

# ....................{ TESTERS ~ sysv                     }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_sysv()

Report success if the current operating system is a Unix System V derivative.
This implies such system to have a System V kernel, typically either Release 3
or 4. Currently, this includes:

* All Solaris variants (e.g., OpenSolaris, Oracle Solaris, illumos).
* Hewlett Packard's HP-UX.
* IBM's AIX.
/---

:func.doc <<'/---'
[status: bool] :is_os_aix()

Report success if the current operating system is IBM's AIX.
/---

:func.doc <<'/---'
[status: bool] :is_os_hpux()

Report success if the current operating system is Hewlett Packard's HP-UX.
/---

#FIXME: Should probably be generalized to :is_os_trait_solaris(), yes?
#Unfortunately, it's unclear how to efficiently differentiate such variants.

:func.doc <<'/---'
[status: bool] :is_os_solaris()

Report success if the current operating system is a Solaris variant (e.g.,
Oracle Solaris, Sun Solaris, OpenSolaris, illumos).
/---

# ....................{ MAIN                               }....................
::define_os_testers

# --------------------( WASTELANDS                         )--------------------
        # Set such OS' machine-readable name to its autotools-specific name,
        # converting all dashes and contiguous runs of one or more spaces into
        # underscores.
        # ZY_OS_ID="${${(L)OSTYPE// ##/_}//-/_}"

# For
# efficiency, this function defines such testers to unconditionally report either
# success or failure (rather than to conditionally perform runtime tests).
#  if such operating system
# was recognized at digest compile time or the empty string otherwise

    # zeshy-specific machine-readable name of the current architecture.
    # :str os_name

#FUXME: Actually set such global. See below.
#FUXME: Such function should set a new string global (presumably declared at the
#top of this parcel) like so:
#
#    ZY_OS_NAME="${os_name}"
#
#In fact, we should probably simply excise ${os_name} below and use
#${ZY_OS_NAME} everywhere.
#FUXME: Ah; I see. We *DO* need to retain ${os_name}, as such local is non-
#human-readable. The above case statement should then set *BOTH* ${os_name} and
#${ZY_OS_NAME}, and the latter to the human-readable name of such OS (e.g.,
#"ZY_OS_NAME='Debian GNU/kFreeBSD'" for such OS). Nice!

        #FUXME: Compare "${ZY_CPU_ARCH_NAME}" instead, which already accounts
        #for such disparity.

        # At present, only two distinct operating systems leverage Darwin:
        # desktop- and server-oriented OS X and mobile-oriented iOS. Since the
        # latter only run on ARM architecture and the former never do, the two
        # are distinguishable by whether the current architecture is ARM.
        #
        # Canonical string global ${MACHTYPE} is set during zsh compilation by
        # autotools script "configure.ac" to the autotools-specific string
        # global $host_cpu. After casually grepping about, there appear to be
        # numerous possible ARM-related values for such global all prefixed by
        # "arm" (e.g., "arm", "armsa1", "armv4"). For safety, test for such
        # prefix rather than simply for "arm".
        #
        # This is all Apple's fault.
        # if [[ "${MACHTYPE}" == 'arm'* ]] {
        #     os_name='ios'
        # } else {
        #     os_name='os_x'
        # }

# * Match such OS' autotools-specific name and convert such name to the desired
#   zeshy-specific name. This function then implicitly defines a tester for such
#   OS named :is_os_${os_name}().
# * Document :is_os_${os_name}(), where "${os_name}" is the same zeshy-specific
#   name.

# ....................{ SETTERS                            }....................
# :func.doc <<'/---'
# void :set_string_to_os(string string_name)
# 
# Set the passed string to the current OS name.
# /---

#FUXME: Rename all functions testing attributes rather than the exact name of
#the current OS from ":is_os_" to ":is_os_trait_" (e.g., from :is_os_trait_sysv() to
#:is_os_trait_sysv()). The reason is fairly clear: there *WILL*, at some point,
#exist an OS with the same name as its trait shared between several OSes. In
#fact, this is already the case for Linux distributions (e.g., there exists both
#a specific distribution "Gentoo" *AND* a trait "Gentoo" shared between multiple
#distributions, and the two describe entirely separate conditions). If "trait"
#doesn't quite suite us, there exist a number of reasonable alternatives:
#
#* :is_os_trait_sysv(). (Excellent. Contemplate!)
#* :is_os_like_sysv(). (Quite good. Better than :is_os_trait_sysv(), however?
#  Probably not. After all, Android Linux isn't simply *LIKE* Linux: it *IS*
#  Linux. Hence, a tester :is_os_like_linux() makes little sense. In many cases,
#  the verb "like" is completely inapplicable and in fact erroneous.)
#* :is_os_type_sysv(). (Probably the worst, honestly. Consider a related tester
#  :is_distro_type_gentoo(). Is an OS X machine running Gentoo Prefix really of
#  type Gentoo? No, not really. It's "type," if it could be said to have any, is
#  Darwin -- not Gentoo. Gentoo, in this case, would merely be an ancillary
#  "trait" layered on top of the core OS type. In which case, the phrase "type"
#  fails to generally apply.)

    #FUXME: Terrible definition. Wherever this function is actually called, you
    #can guarantee proper zeshy functions (e.g., :Str.set()) are
    #available for calling.
    #FUXME: But that's hardly the worst complaint. I'm unconvinced we even
    #*REQUIRE* this setter. In all honesty, we probably don't. @{inspect}
    #already maintains globals for most other system-related metadata, including
    #Linux distribution.

    # Define a setter setting the passed string to the current OS name.
    # :func.define :set_string_to_os\
    #    '# Validate sanity.
    #     die_unless_arg "Expected one string name."
    #     :str string_name__ssto="${1}"

    #     # If such string is undefined or not of the expected type, throw an
    #     # exception. See :Str.is() for further details.
    #     [[ "${(tP)string_name__ssto-}" == "scalar"* ]] || :die\
    #         ''${''${string_name__ssto}''} undefined or not a string.''

    #     # Set such string. See :Str.set() for further details.
    #     : "${(P)string_name__ssto::='${os_name}'}"'

    # If the current OS is a Linux distribution, define the corresponding tester
    # to always report success; else, define such tester to always report failure.
    # Since the autotools-specific names for all such OSes are prefixed by
    # "linux", match such names with a plain glob.
    # if is "${OSTYPE}" == 'linux'* si { :func.define :is_os_trait_linux 'die_if_args; :success.report'
    # } else                           { :func.define :is_os_trait_linux 'die_if_args; :failure.report' }

    # If the current OS is a BSD or Unix System V derivative or supports the GNU
    # toolchain, define the corresponding tester to always report success; else,
    # define such tester to always report failure.
    # if (( is_os_trait_bsd ))  { :func.define :is_os_trait_bsd  'die_if_args; :success.report'
    # } else              { :func.define :is_os_trait_bsd  'die_if_args; :failure.report' }
    # if (( is_os_trait_gnu ))  { :func.define :is_os_trait_gnu  'die_if_args; :success.report'
    # } else              { :func.define :is_os_trait_gnu  'die_if_args; :failure.report' }
    # if (( is_os_trait_sysv )) { :func.define :is_os_trait_sysv 'die_if_args; :success.report'
    # } else              { :func.define :is_os_trait_sysv 'die_if_args; :failure.report' }

    # If such OS is GNU/Linux.
    # if is "${os_name}" == 'linux_gnu' si {
    # }

#, automatically (rather than manually) define a new
# tester for each such OS by
# For efficiency, define OS testers to statically report either success or
# failure (rather than conditionally performing a test). See below for
# function documentation.
#
#FUXME: Should probably give this function a name to permit us to call it
#elsewhere at will, should the need ever arise.
#This implies
# such system to have a BSD kernel but _not_ necessarily the standard BSD
# toolchain. 
# and hence are preferable.
#FUXME: Define a setter :set_string_to_os() setting such string to ${ZY_OS}.
#Incidentally, if such function is defined dynamically in the above anonymous
#function, then we can (and should!) reduce ${ZY_OS} to a local string of
#such function. Sensible, no? The fewer globals the better.

#FUXME: Given the likelihood of calling such functions frequently during digest
#compilation, such functions should be strongly optimized. Fortunately, this is
#more or less simple: if the current OS is such os, such function should be
#defined to report success without performing a conditional test; else, be
#defined to report failure. Simple. So, we'll need something resembling:
#
#:str.global ZY_OS <<'/---'
#Name of the current operating system as exactly one lowercase word.
#/---
#
#() {
#   :bool is_bsd="${ZY_BOOLEAN_FALSE}"
#
#   # Map from autotools- to zeshy-specific OS names. The latter tend to
#   # correspond more to the human-readable OS name than the former (e.g.,
#   # "gnu_hurd" rather than "gnu") and hence are preferable.
#   case "${OSTYPE}" {
#   dragonfly*) ZY_OS='dragonfly_bsd'; is_bsd="${ZY_BOOLEAN_TRUE}";;
#   *) ZY_OS="${OSTYPE//[[:space:]]##/_}";;
#   }
#
#   if (( is_bsd )) {
#       :func.define :is_os_trait_bsd 'die_if_args; :success.report'
#   }
#
#   #FUXME: Define all *OTHER* testers to report failure.
#   :func.define ":is_os_${ZY_OS}" 'die_if_args; :success.report'
#}
#
#The core idea is that we first convert ${OSTYPE} to ${ZY_OS}, then define
#is_os_${ZY_OS}() to report success and all other such testers to report
#failure. Simple, no?

    #FUXME: Define all *OTHER* testers to report failure. We'll probably need to
    #perform list or map item deletion or differencing to do so reasonably.
    #(Ideally the former, yes?)

    # If the current OS is a BSD, define such tester to report success.
    # if (( is_os_trait_bsd )) {
    #     :func.define :is_os_trait_bsd 'die_if_args; :success.report'
    # # Else, define such tester to report failure.
    # } else {
    #     :func.define :is_os_trait_bsd 'die_if_args; :failure.report'
    # }

#function :is_os_aros() {
#    die_if_args
#    is "${OSTYPE}" == 'aros'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_trait_darwin()
#
#Report success if the current operating system has an Apple Darwin core. This
#implies such system to provide both the *XNU kernel* (i.e., hybrid kernel
#combining the Mach 3 microkernel and BSD 4.4 kernel subsystems) and well-known
#low-level open-source components (e.g., `launchd`, `mDNSResponder`). While both
#the OS X and iOS platforms leverage Darwin, this does _not_ necessarily imply
#the current system to also provide high-level closed-source components commonly
#associated with either platform (e.g., Carbon, Cocoa).
#/---
#function :is_os_trait_darwin() {
#    die_if_args
#    is "${OSTYPE}" == 'darwin'* si
#}
#
## ....................{ TESTERS ~ bsd                      }....................
#:func.doc <<'/---'
#[status: bool] :is_os_trait_bsd()
#
#Report success if the current operating system is a BSD derivative. This implies
#such system to have a BSD kernel but _not_ necessarily the customary BSD
#toolchain. Currently, this includes:
#
#* DragonFly BSD.
#* FreeBSD.
#* GNU/kFreeBSD.
#* NetBSD.
#* OpenBSD.
#/---
#function :is_os_trait_bsd() {
#    die_if_args
#    is "${OSTYPE}" == ('dragonfly'|'freebsd'|'netbsd'|'openbsd'|'kfreebsd'*'-gnu')* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_dragonfly_bsd()
#
#Report success if the current operating system is DragonFly BSD.
#/---
#function :is_os_dragonfly_bsd() {
#    die_if_args
#    is "${OSTYPE}" == 'dragonfly'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_freebsd()
#
#Report success if the current operating system is FreeBSD. This does _not_
#include GNU/kFreeBSD, which only provides the FreeBSD kernel (rather than both
#the FreeBSD kernel and corresponding userland toolchain).
#/---
#function :is_os_freebsd() {
#    die_if_args
#    is "${OSTYPE}" == 'freebsd'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_netbsd()
#
#Report success if the current operating system is NetBSD.
#/---
#function :is_os_netbsd() {
#    die_if_args
#    is "${OSTYPE}" == 'netbsd'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_openbsd()
#
#Report success if the current operating system is OpenBSD.
#/---
#function :is_os_openbsd() {
#    die_if_args
#    is "${OSTYPE}" == 'openbsd'* si
#}
#
## ....................{ TESTERS ~ linux                    }....................
#:func.doc <<'/---'
#[status: bool] :is_os_trait_linux()
#
#Report success if the current operating system is a Linux distribution,
#including but _not_ limited to GNU/Linux distributions.
#/---
#function :is_os_trait_linux() {
#    die_if_args
#    is "${OSTYPE}" == 'linux'* si
#}
#
## ....................{ TESTERS ~ gnu                      }....................
#:func.doc <<'/---'
#[status: bool] :is_os_trait_gnu()
#
#Report success if the current operating system supports the entirety of the *GNU
#toolchain* (i.e., suite of programming tools produced by the GNU Project). This
#excludes operation systems not affiliated with GNU but nonetheless supporting a
#subset of such toolchain (e.g., Apple Darwin).
#/---
#function :is_os_trait_gnu() {
#    die_if_args
#    is "${OSTYPE}" == ('gnu'*|*'-gnu') si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_trait_gnu_hurd()
#
#Report success if the current operating system is GNU/Hurd.
#/---
#function :is_os_trait_gnu_hurd() {
#    # Yes, GNU/Hurd's choice of identifier is... unfortunate.
#    die_if_args
#    is "${OSTYPE}" == 'gnu'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_trait_gnu_kfreebsd()
#
#Report success if the current operating system is GNU/kFreeBSD.
#/---
#function :is_os_trait_gnu_kfreebsd() {
#    die_if_args
#    is "${OSTYPE}" == 'kfreebsd'*'-gnu' si
#}
#
#:func.doc <<'/---'
#[status: bool] is_os_linux_gnu()
#
#Report success if the current operating system is GNU/Linux.
#/---
#function is_os_linux_gnu() {
#    die_if_args
#    is "${OSTYPE}" == 'linux-gnu' si
#}
#
## ....................{ TESTERS ~ sysv                     }....................
#:func.doc <<'/---'
#[status: bool] :is_os_trait_sysv()
#
#Report success if the current operating system is a Unix System V derivative.
#This implies such system to have a System V kernel, typically either Release 3
#or 4. Currently, this includes:
#
#* All Solaris variants (e.g., Oracle Solaris, illumos).
#* Hewlett Packard's HP-UX.
#* IBM's AIX.
#/---
#function :is_os_trait_sysv() {
#    die_if_args
#    is "${OSTYPE}" == ('aix'|'hpux'|'solaris')* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_aix()
#
#Report success if the current operating system is IBM's AIX.
#/---
#function :is_os_aix() {
#    die_if_args
#    is "${OSTYPE}" == 'aix'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_hpux()
#
#Report success if the current operating system is Hewlett Packard's HP-UX.
#/---
#function :is_os_hpux() {
#    die_if_args
#    is "${OSTYPE}" == 'hpux'* si
#}
#
#:func.doc <<'/---'
#[status: bool] :is_os_solaris()
#
#Report success if the current operating system is a Solaris variant (e.g.,
#Oracle Solaris, Sun Solaris, OpenSolaris, illumos).
#/---
#function :is_os_solaris() {
#    die_if_args
#    is "${OSTYPE}" == 'solaris'* si
#}
#
## ....................{ TESTERS ~ windows                  }....................
#:func.doc <<'/---'
#[status: bool] :is_os_windows()
#
#Report success if the current operating system is Microsoft Windows.
#/---
#function :is_os_windows() {
#    die_if_args
#    is "${OSTYPE}" == ('cygwin'|'mingw32'|'windows')* si
#}
