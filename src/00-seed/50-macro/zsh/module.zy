#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *module-specific runners* (i.e., functions temporarily loading one or
more otherwise unsafe `zsh` modules while dynamically evaluating the passed
strings as commands).
/---

# ....................{ ALIASES                            }....................
#FIXME: Uncomment when macro support goes live.

# :macro\
#     ':full @with_module_mapfile()'\
#     'load_module zsh/mapfile
#     {
#         ${INSERT_CODE_HERE_NO_IDEA_WHAT_THE_API_LOOKS_LIKE_YET}
#     } always {
#         unload_module zsh/mapfile
#     }' <<'/---'
# Run all code nested between this alias and }:with_mapfile() in the current
# lexical context (e.g., function, script) with temporary access to map global
# ${mapfile}, exported by `zsh` module `mapfile`.
#
# == Caveats ==
#
# *${mapfile} is the most dangerous global in the `zsh` cannon.* While such map
# _does_ provide more efficient read-write access to text file contents than
# simpler, arguably safer techniques (e.g., `$(< "${filename}")`,
# `$(cat "${filename}")`), unsetting ${mapfile} keys has the non-idempotent side
# effect of silently and permanently deleting the corresponding files.
#
# *Yes, you read that right: merely unsetting map keys deletes files.* Whoever
# concocted that design idiom should probably be the first up against the wall
# when the Revolution comes.
#
# Suffixing alias }:with_mapfile() mitigates such risks by guaranteeably
# unloading `mapfile` (and hence undefining ${mapfile}) immediately after such
# code completes, even in the event of fatal errors and thrown exceptions.
#
# This alias pair safely handles such lifecycle issues on your behalf and
# hence remains moderately safer than cruder alternatives (e.g., zmodload(),
# :load_module()). Yet, the possibility of permanent filesystem derangement
# remains -- rendering _all_ ${mapfile}-related functionality inherently unsafe
# at best. Tread lightly on, bold zeshier.
#
# == Examples ==
#
# .@with_module_mapfile()
# ==========================================
# [source]
# ------------------------------------------
# >>> @with_module_mapfile {
# ...     :str filename="/culture/is/not/your/friend" on_culture=\
# ...        "What civilization is, is six billion people trying to make
# ...         themselves happy by standing on each other's shoulders and kicking
# ...         each others' teeth in. It's not a pleasant situation. And yet, you
# ...         can stand back and look at this planet and see that we have the
# ...         money, the power, the medical understanding, the scientific know-
# ...         how, the love and the community to produce a kind of human paradise.
# ...         But we are led by the least among us: the least intelligent, the
# ...         least noble, the least visionary. We are led by the least among us
# ...         and we do not fight back against the dehumanizing values that are
# ...         handed down as control icons."
# ...     mapfile[${filename}]=${on_culture}
# ...     get_string_line "${mapfile[${filename}]}" 1
# ...     :remove_map_key mapfile "${filename}"
# ...     die_unless_file "${filename}"
# ... }
# What civilization is, is six billion people trying to make
# ┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• die_unless_file() Exception •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
# ┋ :die() failed with exit status 1.                                              ┋
# ┋ ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ ┋
# ┋ File "/culture/is/not/your/friend" not found or not a file.                                     ┋
# ┠┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
# >>> :is_module_loaded zsh/mapfile or :str.output '"zsh/mapfile" unloaded.'
# "zsh/mapfile" unloaded.
# ------------------------------------------
# ==========================================
#
# /---

# --------------------( WASTELANDS                         )--------------------
# ....................{ RUNNERS                            }....................
#FUXME: Replace all calls to this function by expansions of the
#@with_module_mapfile macro defined above; then excise this function.

# :func.doc <<'/---'
# :full run_code_with_mapfile:(*:str command_words)
#
# Run the passed code with temporary access to map global ${mapfile} exported by
# `zsh` module `mapfile`.
#
# While this function _is_ moderately safer than cruder alternatives (e.g.,
# zmodload(), :load_module_mapfile()), the possibility of permanent filesystem
# derangement remains -- rendering this function inherently unsafe at best. See
# :load_module_mapfile() for further details on the plausible risks of the
# ${mapfile} global and the `zsh/mapfile` module.
# /---
# function run_code_with_mapfile:() {
#     die_unless_args 'Expected one or more shell words.'
#     :load_module_mapfile
#     {
#         run_code "${@}"
#     } always {
#         :unload_module_mapfile
#     }
# }

#FUXME: I have... an idea. It's fairly clear that this sort of
#"run_code_with_mapfile: '...'" style of code declaration is clumsy,
#difficult to read, and excessively error-prone. But I believe such
#clumsiness can be obviated away entirely -- and not merely for
#run_code_with_mapfile:() but for all similar functions. Ideally, we should
#be able to call run_code_with_mapfile: like so:
#
#     :run_code_with_mapfile :{
#        :str.output "${mapfile[/etc/passwd]}"
#    }:run_code_with_mapfile
#
#So how do we achieve such functionality, example? Well, it should be fairly
#simple. O.K., O.K.; it's not simple at all! But it *IS* decently clever and
#overly complex, and that certainly counts for something.
#
#We want the prior code to dynamically expand inplace to:
#
#    ::unload_module_mapfile
#    :try{
#        :str.output "${mapfile[/etc/passwd]}"
#    :} always {
#        ::unload_module_mapfile
#    :}
#
#Can we actually achieve this? The answer, perhaps surprisingly, is yes.
#First, note the following behavior:
#
#    >>> alias tamp='alias simp="print ok"'
#    >>> function libo() {
#    ...    tamp
#    ...    simp
#    ... }
#    >>> libo
#    ok
#
#Pretty intense, eh? Alias tamp() expands to an alias definition of alias simp()
#at the point at which function libo() is called, ensuring the expansion of
#alias simp() succeeds. Since this works, we extend this concept to dynamically
#define alias ":}".
#
#Note that we no longer need ":{", since such brace should *ALWAYS* be prefixed
#by another zeshy-specific alias. (This reduces both verbosity and complexity,
#an essential here.) Then consider the following first draft:
#
#    alias :try='...
#        alias :}:catch"} always {
#           alias :}:catch''::exception.print_if_uncaught
#    }''"
#    '
#    alias :run_code_with_mapfile='
#       alias :}:catch":} always {
#           ::unload_module_mapfile
#       :}"
#       ::load_module_mapfile
#       :try{
#    '
#
#Hence, this:
#
#    :run_code_with_mapfile :{
#        :str.output "${mapfile[/etc/passwd]}"
#    :}
#
#...iteratively expands to this:
#
#    alias :}:catch":} always {
#        ::unload_module_mapfile
#    :}"
#    ::load_module_mapfile
#    :try{
#        :str.output "${mapfile[/etc/passwd]}"
#    :} always {
#        ::unload_module_mapfile
#    :}
#
#...iteratively expands to this:
#
#    ::unload_module_mapfile
#    ...
#    alias :}:catch"} always {
#        alias :}:catch'::exception.print_if_uncaught
#    }'"
#    {
#        :str.output "${mapfile[/etc/passwd]}"
#    } always { always {
#        alias :}:catch'::exception.print_if_uncaught
#    }'
#        ::unload_module_mapfile
#        ::exception.print_if_uncaught
#    }}
#
#Fairly dark voodoo. In particular, note the redundant "always { always {". That
#probably won't work (not to mention being fairly inefficient), so just do:
#
#    alias :try='
#        alias :}:catch"} always {
#           alias :}:catch''::exception.print_if_uncaught
#    }''"
#        typeset -ag ZY__TRY_LEVEL; ZY__TRY_LEVEL[${SHLVL}]=$(( ${ZY__TRY_LEVEL[${SHLVL}]-0} + 1 ))
#    '
#    alias catch=''
#    alias :run_code_with_mapfile='
#       alias :}:catch":} catch {
#           ::unload_module_mapfile
#       :}"
#       ::load_module_mapfile
#       :try'
#
#Given this, the new style of exception handling is as follows:
#
#    :try{
#        ...
#    :} catch {
#        ...
#    :}
#
#This has the extreme benefit of proper IDE syntax highlighting as well as
#greater readability for those already familiar with exception handling under
#conventional programming languages.
#
#Of course, the whole point of zeshy *IS* dark zsh voodoo. This is right in line
#with that mandate... I'm *FAIRLY* sure the above will work, but it's all a
#matter of whether or not zeshy dynamically expands such aliases as expected.
#
#Note that we'll need to remove our existing definitions of ":{" and "}:". After
#renaming the latter to ":{", we should continue to *DOCUMENT* such alias but
#leave it otherwise undefined. (Easy to do, happily.)
#FUXME: Oh, wait. That doesn't quite work, as :try() defines :}(), overwriting
#the prior definition of :}() for :run_code_with_mapfile(). So...
#
#Oh, bother. This probably won't work. If the code to be evaluated by
#:run_code_with_mapfile() calls, say, :run_code_under_dir(), then the latter's
#definition of :}() will obviously overwrite the former's. Well, it was a
#valiant effort! Simply a wee too much dynamism, I'm afraid. Be a shame to
#jettison *ALL* of this, however. Hmm... Right. I don't see a choice but the
#following:
#
#    alias :module.load_mapfile_start='::load_module_mapfile
#    :try'
#    alias :module.load_mapfile_stop='always :{
#        ::unload_module_mapfile
#    :}'
#
#Called like this:
#
#      :module.load_mapfile_start {
#        :str.output "${mapfile[/etc/passwd]}"
#    } :module.load_mapfile_stop
#
#No change to existing aliases :try(), :{(), or :}(), then. It's certainly not
#perfect, but it beats the *HECK* out of the existing approach. In the immortal
#words of the mustachioed plumber: "Let's a-go!" Excise the existing
#run_code_with_mapfile:() function in favor of the above.
#FUXME: Incidentally, as the prior examples demonstrate, rename "}:" to ":}"
#to ensure conformance with zeshy namespace prefix ":".
#FUXME: Add examples.

# :parcel <<'/---'
# Handle *module-specific runners* (i.e., functions temporarily loading one or
# more otherwise unsafe `zsh` modules while dynamically evaluating the passed
# strings as commands).
# /---

#    alias :always='always {
#        alias :}:catch"...
#        }}"
#    '

# a pall spectre.
# for the
#duration of such execution.
