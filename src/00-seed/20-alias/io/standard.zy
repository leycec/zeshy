#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Standard file descriptors* (i.e., standard input, output, and error) aliases.
/---

#FIXME: Refactor most getters -- excluding those for which efficiently elides
#away such subshells (e.g., :stdin()) -- into setters.

# ....................{ GETTERS                            }....................
# On Linux, prefer canonicalizing ${ZY_STDIN_FILE_DESCRIPTOR_PATH} to
# ${ZY_STDIN_PATH}. The former tends to be a direct symbolic link to the
# desired device file; the latter tends to only indirectly link to that file.
# While both would suffice here, canonicalizing the former should prove
# (marginally) more efficient.
#
# To ensure this canonicalization is performed in the current shell, avoid
# calling :path.canonicalize() or any other zeshy functions here. See
# :stdout.Mtime() for further details.
:alias_command ':str :stdin.path()'\
    ':stdout.echo "'${ZY_STDIN_FILE_DESCRIPTOR_PATH}'"(:A)' <<'/---'
Canonicalized absolute path of the device file associated with standard input
(e.g., `/dev/pts/6`).
/---


:alias_command ':str :stdout.path()'\
    ':stdout.echo "'${ZY_STDOUT_FILE_DESCRIPTOR_PATH}'"(:A)' <<'/---'
Canonicalized absolute path of the device file associated with standard output
(e.g., `/dev/pts/9`).
/---


:alias_command ':str :stderr.path()'\
    ':stdout.echo "'${ZY_STDERR_FILE_DESCRIPTOR_PATH}'"(:A)' <<'/---'
Canonicalized absolute path of the device file associated with standard error
(e.g., `/dev/pts/7`).
/---

# ....................{ SETTERS                            }....................
# Sadly, the only safe means of canonicalizing these paths is as below.
# Replacing the first pipeline subcommand with a call to :path.canonicalize()
# uselessly returns "/dev/fd/0" without resolving the desired path. Likewise,
# replacing the second pipeline subcommand with a process substitution has the
# same effect. While these results are odd, their underlying reasons are simple:
# in both cases, zsh performs this canonicalization in a subshell attached to a
# different standard input file descriptor. Mercifully, zsh appears to perform
# pipeline subcommands consisting of only low-level builtin print() and history
# modifier "(:A)" in the current shell, ensuring as expected that the standard
# input file descriptor for the current shell is canonicalized.
#
# Since this feature is obscurely undocumented, this could change at any
# time. If it does, another (perhaps more reliable) method remains:
# coprocesses. In theory, we could redirect the result of that output to the
# identity coprocess and then copy that result from that coprocess into this
# variable. In fact, this is precisely how we currently capture standard
# output and error from commands evaluated by the current shell.
:alias_command ':void :stdin.Path(:Str path_name)'\
    ':stdin.path | :Str.from_stdin' <<'/---'
Set the string variable with the passed name to the canonicalized absolute path
of the device file associated with standard input.

== See Also ==

* :stdin.path().
/---


:alias_command ':void :stdout.Path(:Str path_name)'\
    ':stdout.path | :Str.from_stdin' <<'/---'
Set the string variable with the passed name to the canonicalized absolute path
of the device file associated with standard output.

== See Also ==

* :stdout.path().
/---


:alias_command ':void :stderr.Path(:Str path_name)'\
    ':stderr.path | :Str.from_stdin' <<'/---'
Set the string variable with the passed name to the canonicalized absolute path
of the device file associated with standard error.

== See Also ==

* :stderr.path().
/---

# ....................{ SETTERS ~ float                    }....................
#FIXME: We need to note that, for security purposes (e.g., to discourage
#password brute-forcing by malicious users), the Linux kernel annoyingly munges
#these times in reasonably unpredictable ways. Hence, they're somewhat useless.

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Synchronize with :stderr.Mtime().
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
:alias_command ':void :stdout.Mtime(:Float mtime_name)' '{
    # Validate sanity. Avoid calling :Float.die_unless(), as
    # :stdin.Float() already does so below.
    :str float_name__sftom stdout_filename__sftom
    float_name__sftom="$(:stdin)"

    # Get the canonicalized absolute path of the standard output device file.
    # Assuming the current shell to be a pseudo-terminal, this file is usually a
    # symbolic link to the device file for such terminal (e.g., "/dev/pts/7").
    # Referring to standard output by such resolved rather than symbolic
    # path is essential; we run the command getting standard output''s mtime
    # from a pipeline subcommand and hence subshell in which such symbolic link
    # refers to a pipeline rather than the expected pseudo-terminal. While we
    # work around such issue by piping :path.mtime() output to an identity
    # coprocess, this is dramatically simpler (and probably more efficient).
    :stdout.Path stdout_filename__sftom

    #FIXME: Silly. We should just define a new :path.Mtime() function
    #implementing this on our behalf.

    # Set such float to such path''s mtime.
    :path.mtime "${stdout_filename__sftom}" |
        :stdin.Float "${float_name__sftom}"
#   :stderr.echo "stdout: ${stdout_filename__sftom}; mtime: ${(P)float_name__sftom}"
} <<<' <<'/---'
Set the float variable with the passed name to the *mtime* (i.e., modification
time) in high-resolution fractional seconds since the Unix epoch of the most
recent write to standard output by the current shell.

See get_time() for further details.
/---


# See :stdout.Mtime() above.
:alias_command ':void :stderr.Mtime(:Float mtime_name)' '{
    :str float_name__sftem stderr_filename__sftem
    float_name__sftem="$(:stdin)"
    :stderr.Path stderr_filename__sftem
    :path.mtime "${stderr_filename__sftem}" |
        :stdin.Float "${float_name__sftem}"
} <<<' <<'/---'
Set the float variable with the passed name to the *mtime* (i.e., modification
time) in high- resolution fractional seconds since the Unix epoch of the most
recent write to standard error by the current shell.

See get_time() for further details.
/---

# ....................{ REDIRECTORS                        }....................
:alias_command ':str :stdin[stdin=(:str input)]'\
    '< "'${ZY_STDIN_PATH}'"' <<'/---'
Redirect all standard input to the current context if this input exists _or_
block indefinitely and silently until this input is written to this context.

Since blocking is strongly undesirable, this alias should _always_ be preceded
by tests ensuring this input exists (e.g., :stdin.is_nonempty(),
die_unless_stdin_readable_sans_blocking()). Due to `zsh` optimization, this
alias behaves as expected even when expanded via command substitution (e.g.,
`$(:stdin)`).

.:stdin()
==========================================
[source]
------------------------------------------
>>> :str on_propaganda=\
...    "All war propaganda consists, in the last resort, in substituting
...     diabolical abstractions for human beings. Similarly, those who defend
...     war have invented a pleasant sounding vocabulary of abstractions in
...     which to describe the process of mass murder."
>>> { get_string_line "$(:stdin)" -1 } <<<"${on_propaganda}"
which to describe the process of mass murder.
------------------------------------------
==========================================
/---

# ....................{ CLOSERS                            }....................
:alias_command ':void :stdin.close()'\
    "exec ${ZY_STDIN_FILE_DESCRIPTOR}<&-" <<'/---'
Close the standard input file descriptor (i.e., 0) and corresponding named pipe
(i.e., `/dev/stdin`).
/---


:alias_command ':void :stdout.close()'\
    "exec ${ZY_STDOUT_FILE_DESCRIPTOR}>&-" <<'/---'
Close the standard output file descriptor (i.e., 1) and corresponding named pipe
(i.e., `/dev/stdout`).
/---


:alias_command ':void :stderr.close()'\
    "exec ${ZY_STDERR_FILE_DESCRIPTOR}>&-" <<'/---'
Close the standard error file descriptor (i.e., 2) and corresponding named pipe
(i.e., `/dev/stderr`).
/---
