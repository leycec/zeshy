#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle aliases writing strings to standard output and error.
/---

# For efficiency, implement low-level outputters as aliases and not functions.
# While refactoring these ouputters into functions would be trivial, doing so
# would also reduce the efficiency of functions expanding these aliases.

# ....................{ OUTPUTTERS                         }....................
:alias_command ':str :stdout.echo(*:str text)' 'print -r --' <<'/---'
Output the passed strings (defaulting to the empty string) to standard output
suffixed by a newline.

This low-level alias is principally intended for non-interactive use (e.g.,
returning strings from getter functions called from process substitutions).
Consider calling the higher-level :str.print() function instead for interactive
uses (e.g., printing strings to the current terminal).  Such function properly
maintains `zeshy` globals monitoring interactive output; this alias does not.

== Comparisons ==

Unlike builtins echo() and print(), this alias prints embedded escape sequences
as is rather than converting such sequences to the corresponding characters
(e.g., `\n` sequences to newlines). While convenient, such conversions silently
mangle arbitrary strings and hence are _not_ general-purpose. Consider calling
:str.unescape() instead to convert such sequences.

Avoid calling such builtins, which behave unsafely when passed arbitrary and
hence possibly hyphen-prefixed strings.

== Examples ==

.:stdout.echo() versus print()
==========================================
[source]
------------------------------------------
$$$ :str lammoth="-z" morgoth="rm -rf *"
# Bad! Never do this, unless guaranteed no hyphens prefix such string.
# If hyphens do prefix such string, zsh treats the first word of such
# string as options to print(). This can be extremely unsafe, as this
# example demonstrates. Do *NOT* try this example at home. We mean it.
$$$ print "${lammoth}" "${morgoth}"
$$$ rm -rf *   # Don't accidentally hit <Enter> here. WHAT, YOU JUST DID!?!
# Good. Always do this, instead.
$$$ :stdout.echo "${lammoth}" "${morgoth}"
-z rm -rf *    # That's more like it.
------------------------------------------
==========================================
/---

:alias_command '[stderr=:str] :stderr.echo(:str text)'\
    '{
        print -r -- "$(:stdin)"\
            '${ZY_STDOUT_FILE_DESCRIPTOR}'>&'${ZY_STDERR_FILE_DESCRIPTOR}'
    } <<<' <<'/---'
Output the passed string to standard error suffixed by a newline. Unlike
:stdout.echo() and related aliases, this alias accepts only one mandatory
argument _not_ defaulting to the empty string.

== See Also ==

* :stdout.echo().
/---

# ....................{ OUTPUTTERS ~ newline               }....................
:alias_command ':str :stdout.echo_newline()' "print -- ''" <<'/---'
Output a blank line to standard output.
/---

:alias_command ':str :stdout.echo_newlined(*:str text="")'\
    'print -lr --' <<'/---'
Output the passed strings (defaulting to the empty string) to standard output,
each delimited by a trailing newline. See :stdout.echo() for further details.
/---

:alias_command ':str :stdout.echo_sans_newline(*:str text="")'\
    'print -nr --' <<'/---'
Output the passed strings (defaulting to the empty string) to standard output
suffixed by _no_ newline. See :stdout.echo() for further details.
/---
