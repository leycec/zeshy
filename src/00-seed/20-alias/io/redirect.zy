#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *redirection* (i.e., operations redirecting command output to and from
file handles and files) aliases.
/---

#FIXME: Actually *USE* these aliases. They verifiably work and are worthy of
#widespread distribution. In particular, hunt down all instances of "1>", "2>",
#and "run_code_to_" in the codebase and replace with aliases below.
#FIXME: Actually, these command aliases should be replaced by similarly named
#word aliases. When implemented as command aliases, all of the following
#redirections *MUST* be preceded by a "{"- and "}"-delimited block and (arguably
#more importantly) cannot be readably combined without nesting such blocks.
#Which, of course, no one would ever do. Hence, word aliases.
#FIXME: Add examples.

# ....................{ REDIRECTORS                        }....................
:alias_word ':str :=stdout()'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>&'${ZY_STDOUT_FILE_DESCRIPTOR} <<'/---'
Redirect all standard error from the preceding `{...}` block to standard output.
/---

:alias_word '[stderr=:str] ::=stderr()'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>&'${ZY_STDERR_FILE_DESCRIPTOR} <<'/---'
Redirect all standard output from the preceding `{...}` block to standard error.
/---

# ....................{ REDIRECTORS ~ file                 }....................
:alias_command ':void :to_file(:str filename)' '&>!' <<'/---'
Redirect all standard output and error from the preceding `{...}` block to the
passed file, silently overwriting such file if already extant.
/---

:alias_command ':void :to_file_if_not_found(:str filename)' '&>' <<'/---'
Redirect all standard output and error from the preceding `{...}` block to the
passed file if such file does _not_ already exist or throw an exception
otherwise.
/---

:alias_command ':void :to_file.from_stdout(:str filename)'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>!' <<'/---'
Redirect all standard output from the preceding `{...}` block to the passed
file, silently overwriting such file if already extant.
/---

:alias_command ':void :to_file.from_stderr(:str filename)'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>!' <<'/---'
Redirect all standard error from the preceding `{...}` block to the passed
file, silently overwriting such file if already extant.
/---

:alias_command ':void :to_file_if_not_found.from_stdout(:str filename)'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>' <<'/---'
Redirect all standard output from the preceding `{...}` block to the passed
file if such file does _not_ already exist or throw an exception otherwise.
/---

:alias_command ':void :to_file_if_not_found.from_stderr(:str filename)'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>' <<'/---'
Redirect all standard error from the preceding `{...}` block to the passed file
if such file does _not_ already exist or throw an exception otherwise.
/---

# ....................{ REDIRECTORS ~ silent               }....................
:alias_command ':str =silent()' '&>"'${ZY_BIT_BUCKET_PATH}'"' <<'/---'
Redirect all standard output and error from the preceding `{...}` block to the
*bit bucket* (i.e., the null device, typically `/dev/null`).
/---

:alias_command ':str :silent_stdout()'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>"'${ZY_BIT_BUCKET_PATH}'"' <<'/---'
Redirect all standard output from the preceding `{...}` block to the *bit
bucket* (i.e., the null device, typically `/dev/null`).
/---

:alias_command ':str :silent_stderr()'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>"'${ZY_BIT_BUCKET_PATH}'"' <<'/---'
Redirect all standard error from the preceding `{...}` block to the *bit bucket*
(i.e., the null device, typically `/dev/null`).
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: I'm contemplating a suite of new global aliases for redirection. I know;
#I know. But the current run_code_*() approach imposes too much of a burden on
#the caller (principally, requiring arguments be quote protected) to be of
#general practical use.
#FUXME: Wait! I've verified that normal aliases actually suffice for this
#purpose *IF AND ONLY IF* preceded by a "}" delimeter. Brilliant! This
#reasonably novel technique might actually scale up to other core functionality
#as well. Consider an alias implementing redirection from standard output to
#standard error:
#
#    # All there is too it. Really!
#    >>> alias to_stderr='1>&2'
#
#    # This doesn't work, as expected.
#    >>> print ok to_stderr
#    ok to_stderr
#
#    # This actually works. (I know, right!)
#    >>> { print ok } to_stderr
#    ok
#
#    # Proof the above *REALLY* does work.
#    >>> { { print ok } to_stderr } 1>/dev/null
#    ok
#
#While we could adopt longer nomenclature (e.g., redirect_to_stderr()), the
#brevity of "to_stderr"-type nomenclature lends itself better to widespread
#adoption. After all, we want to minimize -- not maximize -- the caller burden.
#FUXME: Nomenclature is a tricky question, actually. Consider: what do we call
#the redirection from stdout to a file? This is certainly feasible, as the
#filename suffixes such alias. How about:
#
#    >>> alias redirect_stdout_to_file="1>!"
#    >>> alias redirect_stdout_to_file_if_not_found="1>"
#
#Alternatively, invert such nomenclature as follows:
#
#    >>> alias to_file_from_stdout="1>!"
#    >>> alias to_file_from_stdout_if_not_found="1>"
#
#The latter is quite a bit briefer *AND* allows us to retain the prior succinct
#to_stderr() nomenclature. For file redirection, we then have something
#resembling:
#
#    >>> alias to_file="&>!"
#    >>> alias to_file_if_not_found="&>"
#    >>> alias to_file_from_stdout="1>!"
#    >>> alias to_file_from_stdout_if_not_found="1>"
#    >>> alias to_file_from_stderr="2>!"
#    >>> alias to_file_from_stderr_if_not_found="2>"
#
#How about silencing aliases? Let's see. How about the following:
#
#    >>> alias sans_output="&>/dev/null"
#    >>> alias sans_stdout="1>/dev/null"
#    >>> alias sans_stderr="2>/dev/null"
#
#Since zeshy leverages "sans" elsewhere, it'd be a bit nonsensical to forgoe
#such usage here as well. It's all good, in other words.

#FUXME: After implementing such aliases, consider eliminating the prior
#run_code_*() redirection functions in favor of such aliases. Such functions
#impose far more caller and computational burden than is warranted by simple
#redirection, in almost all cases. (Most likely *ALL* cases, really.)
#FUXME: Wait. Perhaps not. Consider run_code_silent() and cohorts, for example.
#While sans_output() defined below clearly replaces run_code_silent(), I have
#doubts we could replace the entire panoply of such functions with equivalent
#aliases. Consider run_code_silent_stdout_and_write_file_with_stdout(), for
#example. Are we *REALLY* going to replace such function with a single alias?
#It might be nice, but I'm unsure it's feasible in the general case. Which
#means we'll probably end up with at least one function prefixed by
#"run_code_silent", which would inevitably beg the question: why isn't there a
#run_code_silent() function? So, just leave such functions, I should think. I
#mean, they're already working and well-documented. Why muck up a good thing?

#FUXME: Note that chaining two or more redirections directly simply requires
#multiple "{...}" embeddings, which is quite sensible. In the handful of cases
#where redirections are complicated enough to require being interpreted at the
#same time and hence embedded in the same context, we'll simply forgoe aliases
#altogether and write them out as is; this is actually what one wants, though,
#since the complexity of such redirections is likely to render any attempt to
#use even global aliases more bug-prone and overly complex than is warranted.
#FUXME: Wo! Wait. zsh actually appears to get the following right, suggesting
#redirections can simply be chained together as is. While I honestly harbour
#doubts as to whether this works in the general case, it does appear to work at
#least here:
#
#    >>> { { print ok } to_stderr } sans_stdout
#    ok
#    >>> { print ok } to_stderr sans_stdout
#    ok
#    >>> { print ok } sans_stdout to_stderr
#    ok
#    >>> { print ok } 1>/dev/null 1>&2
#    ok
#
#Wild, eh? No errors. Sensible output. More testing required, of course...
