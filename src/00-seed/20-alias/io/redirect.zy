#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *redirection* (i.e., operations redirecting command output to and from
file handles and files) aliases.
/---

#FIXME: Actually *USE* these aliases. They verifiably work and are worthy of
#widespread distribution. In particular, hunt down all instances of "1>", "2>",
#and "run_code_to_" in the codebase and replace with aliases below.
#FIXME: Actually, these command aliases should be replaced by similarly named
#word aliases. When implemented as command aliases, all of the following
#redirections *MUST* be preceded by a "{"- and "}"-delimited block and (arguably
#more importantly) cannot be readably combined without nesting such blocks.
#Which, of course, no one would ever do. Hence, word aliases.
#FIXME: Add examples.

# ....................{ REDIRECTORS                        }....................
:alias_word ':str :=stdout()'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>&'${ZY_STDOUT_FILE_DESCRIPTOR} <<'/---'
Redirect all standard error from the preceding command to standard output.
/---

:alias_word '[stderr=:str] :=stderr()'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>&'${ZY_STDERR_FILE_DESCRIPTOR} <<'/---'
Redirect all standard output from the preceding command to standard error.
/---

# ....................{ REDIRECTORS ~ file                 }....................
:alias_command ':void :to_file(:str filename)' '&>!' <<'/---'
Redirect all standard output and error from the preceding `{...}` block to the
passed file, silently overwriting such file if already extant.
/---

:alias_command ':void :to_file_if_not_found(:str filename)' '&>' <<'/---'
Redirect all standard output and error from the preceding `{...}` block to the
passed file if such file does _not_ already exist or throw an exception
otherwise.
/---

:alias_command ':void :to_file.from_stdout(:str filename)'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>!' <<'/---'
Redirect all standard output from the preceding `{...}` block to the passed
file, silently overwriting such file if already extant.
/---

:alias_command ':void :to_file.from_stderr(:str filename)'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>!' <<'/---'
Redirect all standard error from the preceding `{...}` block to the passed
file, silently overwriting such file if already extant.
/---

:alias_command ':void :to_file_if_not_found.from_stdout(:str filename)'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>' <<'/---'
Redirect all standard output from the preceding `{...}` block to the passed
file if such file does _not_ already exist or throw an exception otherwise.
/---

:alias_command ':void :to_file_if_not_found.from_stderr(:str filename)'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>' <<'/---'
Redirect all standard error from the preceding `{...}` block to the passed file
if such file does _not_ already exist or throw an exception otherwise.
/---

# ....................{ REDIRECTORS ~ silent               }....................
:alias_word '[status=:int] :=silent()' '&>"'${ZY_BIT_BUCKET_PATH}'"' <<'/---'
Redirect all standard output and error from the preceding command to the *bit
bucket* (i.e., null device, typically `/dev/null`).
/---

:alias_word '[stderr=:str status=:int] :=stdout.silent()'\
    ${ZY_STDOUT_FILE_DESCRIPTOR}'>"'${ZY_BIT_BUCKET_PATH}'"' <<'/---'
Redirect all standard output from the preceding command to the *bit bucket*
(i.e., null device, typically `/dev/null`).
/---

:alias_word ':str :=stderr.silent()'\
    ${ZY_STDERR_FILE_DESCRIPTOR}'>"'${ZY_BIT_BUCKET_PATH}'"' <<'/---'
Redirect all standard error from the preceding command to the *bit bucket*
(i.e., null device, typically `/dev/null`).
/---
