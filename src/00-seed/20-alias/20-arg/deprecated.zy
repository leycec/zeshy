#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *argument count testers* (i.e., aliases testing the number of arguments
passed to the current runnable).
/---

#FIXME: This entire parcel is *REALLY* horrible. When zeshy supports proper
#function prototype syntax and validation thereof, we should:
#
#* Convert all existing uses of aliases defined below to use function prototypes
#  instead.
#* Excise this entire parcel.
#
#For now, this parcel *MUST* remain to permit the codebase to merely function.

# For efficiency, declare optimized aliases handling common argument counts.

# ....................{ EXCEPTIONS                         }....................
() {
    # Current argument count as a human-readable string to be interpolated into
    # documentation for such aliases (e.g., "no arguments").
    :string label_arg_count_equals label_arg_count_in_range

    # Minimum and maximum argument counts on which to define such aliass.
    :int arg_count_min=0 arg_count_max=6 arg_count arg_count_at_most

    # Declare and define all such aliases.
    for arg_count ({${arg_count_min}..${arg_count_max}}) {
        # If such count is 0, document such aliases specific to such count.
        if (( arg_count == 0 )) {
            # Declare and define aliases testing all ranges bounded below by 0.
            for arg_count_at_most ({$(( arg_count + 1 ))..${arg_count_max}}) {
                # If such count is 1, document such aliases in the singular.
                if (( arg_count == 1 )) {
                    label_arg_count_in_range='1 argument'
                # Else, such count is greater than 1. Document such aliases in
                # the plural.
                } else {
                    label_arg_count_in_range="${arg_count} arguments"
                }

                # Declare and define such aliases.
                :alias_command\
    ':void die_unless_args_'${arg_count}'_to_'${arg_count_at_most}'(:string error_message="")'\
    "(( # <= ${arg_count_at_most} )) || :die" <</---
Throw an exception with the passed message unless the caller passed at most
${label_arg_count_in_range}.
/---
                :alias_command\
    "[status=:bool] is_args_${arg_count}_to_${arg_count_at_most}()"\
    "(( # <= ${arg_count_at_most} ))" <</---
Report success if the the caller passed at most ${label_arg_count_in_range}.
/---
            }

            label_arg_count_equals='no arguments'
        # Else, such count is positive. Document such aliases generically.
        } else {
            # Declare and define aliases testing whether the current count is at
            # most such count. (If such count is 0, such aliases reduce to
            # testing whether the caller passed at least 0 arguments. Since this
            # condition is always true, such tests are inherently nonsensical and
            # best left undefined.)
            :alias_command\
    ':void die_unless_args_'${arg_count}'_or_more(:string error_message="")'\
    "(( # >= ${arg_count} )) || :die" <</---
Throw an exception with the passed message unless the caller passed at least ${arg_count}
arguments.
/---
            :alias_command\
    "[status=:bool] is_args_${arg_count}_or_more()"\
    "(( # >= ${arg_count} ))" <</---
Report success if the the caller passed at least ${arg_count} arguments.
/---

            # If there exists an argument count greater than the current
            # argument and less than the "maximum" established above, declare
            # and define aliases testing whether such count is either. Since
            # such test benefits from both a distinct implementation and
            # documentation, do so separately from aliases testing contiguous
            # ranges of three or more counts (e.g., :is_args_1_to_3()).
            arg_count_at_most=$(( arg_count + 1 ))
            if (( arg_count_at_most <= arg_count_max )) {
                # Declare and define such aliases.
                :alias_command\
    ':void die_unless_args_'${arg_count}'_to_'${arg_count_at_most}'(:string error_message="")'\
    "(( # == ${arg_count} || # == ${arg_count_at_most} )) || :die" <</---
Throw an exception with the passed message unless the caller passed either ${arg_count} or
${arg_count_at_most} arguments."
/---
                :alias_command\
    "[status=:bool] is_args_${arg_count}_to_${arg_count_at_most}()"\
    "(( # == ${arg_count} || # == ${arg_count_at_most} ))" <</---
Report success if the the caller passed either ${arg_count} or ${arg_count_at_most} arguments.
/---

                # Declare and define aliases testing all possible ranges bounded
                # below by the current count and above by the maximum count.
                # Due to the (somewhat) awkward range such loop iterates over,
                # such loop is easiest implemented as a tripartite loop rather
                # than the custmary range loop (e.g., "({...})").
                for ((arg_count_at_most++;
                      arg_count_at_most <= arg_count_max;
                      arg_count_at_most++)) {
                    # Declare and define such aliases.
                    :alias_command\
    ':void die_unless_args_'${arg_count}'_to_'${arg_count_at_most}'(:string error_message="")'\
    "(( ${arg_count} <= # && # <= ${arg_count_at_most} )) || :die" <</---
Throw an exception with the passed message unless the caller passed between
${arg_count} and ${arg_count_at_most} arguments.
/---
                    :alias_command\
    "[status=:bool] is_args_${arg_count}_to_${arg_count_at_most}()"\
    "(( ${arg_count} <= # && # <= ${arg_count_at_most} ))" <</---
Report success if the the caller passed between ${arg_count} and ${arg_count_at_most} arguments.
/---
                }
            }

            label_arg_count_equals="exactly ${arg_count} arguments"
        }

        # Declare and define such aliases.
        :alias_command\
    ':void die_unless_args_'${arg_count}'(:string error_message="")'\
    "(( # == ${arg_count} )) || :die" <</---
Throw an exception with the passed message unless the caller passed
${label_arg_count_equals}.
/---
        :alias_command\
    '[status=:bool] is_args_'${arg_count}'()'\
    "(( # == ${arg_count} ))" <</---
Report success if the the caller passed ${label_arg_count_equals}.
/---
    }
}

# ....................{ EXCEPTIONS                         }....................
:alias_command ':void die_if_args()'\
    '(( # == 0 )) || :die "Expected no arguments."' <<'/---'
Throw an exception with a stock message if the caller passed _any_ arguments.
/---

:alias_command ':void die_unless_arg(:string error_message="")'\
    '(( # == 1 )) || :die' <<'/---'
Throw an exception with the passed message unless the caller passed exactly one
argument.
/---

:alias_command ':void die_unless_args(:string error_message="")'\
    '(( # )) || :die' <<'/---'
Throw an exception with the passed message unless the caller passed at least one
argument.
/---

# ....................{ TESTERS                            }....................
:alias_command '[status=:bool] is_arg()' '(( # == 1 ))'  <<'/---'
Report success if the caller passed exactly one argument.
/---

:alias_command '[status=:bool] is_args()' '(( # ))'  <<'/---'
Report success if the caller passed at least one argument.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: O.K.; a couple things:
#
#* Now that we have an actual distinction between debug and release digest
#  files, we have a sane mechanism for reducing *ALL* aliases this parcel
#  defines to simply "#", the comment prefix, under release digest files.
#  (Actually, just reduce them to a newline, which zsh will entirely elide out.)
#* To manage such a transition sanely, we'll need to adopt a similar
#  implementation as @{variable/type/type}: in an anonymous top-level function,
#  programmatically declare and define all aliases this parcel currently
#  manually declares and defines.
#* To automate reduction of alias definitions to "#" under release digests, we
#  probably want to implement a new alias and function attribute "debug_only".
#  (Since debug functionality is always a strict superset of release
#  functionality, I can't envision ever desiring a comparable attribute
#  "release_only".) Usage is as usual: e.g.,
#
#    :alias_command\
#       '<debug_only> void die_unless_args_0_to_1(string error_message = "")'\
#       '(( # <= 1 )) || :die' <<'/---'
#    Throw an exception with the passed message unless the caller passed at most one
#    argument.
#    /---
#FUXME: Err, "debug_only" reads fairly awkwardly. "if_debugging" is a *MUCH*
#more consistent attribute name, given current nomenclature.
#FUXME: Actually, unoptimized release builds will probably want such
#functionality as well. Where we *WON'T* want such functionality is in optimized
#release builds, so we'll need to distinguish between the two. This suggests an
#attribute name of "unless_optimized" and corresponding alias :is_optimized(),
#yes?
#FUXME: Wait. While reducing to the comment prefix "#" would be preferable, that
#would also require the passed message always be situated on the same line,
#which (of course) cannot be reliably guaranteed. Hence, just reduce to the noop
#operator ":" for safety.
#FUXME: Actually, the above no longer applies: we currently elide away all
#prototype-based argument handling automatically. Swag! 

                # arg_count_at_most+=1
                # for arg_count_at_most (
                #     {${arg_count_at_most}..${arg_count_max}}) {

                # for ((arg_count_at_most++;
                #       arg_count_at_most <= ${arg_count_max};
                #       arg_count_at_most++)) {

                # for ((arg_count_at_most++;
                #       arg_count_at_most <= ${arg_count_max};
                #       arg_count_at_most++)) {

    # for ((arg_count=${arg_count_min};
    #       arg_count <= ${arg_count_max};
    #       arg_count++)) {
        # If such count is 0, document such aliases specific to such count.
        # if (( arg_count == 0 )) {
        #     # Also declare and define aliases testing all argument count ranges
        #     # bounded below by 0 -- necessitating special handling.
        #     for ((arg_count_at_most=$(( ${arg_count} + 1 ));
        #           arg_count_at_most <= ${arg_count_max};
        #           arg_count_at_most++)) {

#FUXME: Excise *EVERYTHING* below. Now obseleted by the above.

# ....................{ EXCEPTIONS                         }....................
# :alias_command <<'/---'
# void die_unless_args_0(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed no
# arguments.
# /---
# alias die_unless_args_0='(( # == 0 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_0_to_1(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at most one
# argument.
# /---
# alias die_unless_args_0_to_1='(( # <= 1 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_0_to_2(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at most two
# arguments.
# /---
# alias die_unless_args_0_to_2='(( # <= 2 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_0_to_3(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at most
# three arguments.
# /---
# alias die_unless_args_0_to_3='(( # <= 3 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_0_to_4(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at most four
# arguments.
# /---
# alias die_unless_args_0_to_4='(( # <= 4 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_1(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly one
# argument.
# /---
# alias die_unless_args_1='(( # == 1 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_1_or_more(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at least one
# argument.
# /---
# alias die_unless_args_1_or_more='(( # >= 1 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_1_to_2(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed either one
# or two arguments.
# /---
# alias die_unless_args_1_to_2='(( # == 1 || # == 2 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_1_to_3(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed between one
# to three arguments.
# /---
# alias die_unless_args_1_to_3='(( 1 <= # && # <= 3 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_1_to_4(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed between one
# to four arguments.
# /---
# alias die_unless_args_1_to_4='(( 1 <= # && # <= 4 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_2(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly two
# arguments.
# /---
# alias die_unless_args_2='(( # == 2 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_2_or_more(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at least two
# arguments.
# /---
# alias die_unless_args_2_or_more='(( # >= 2 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_2_to_3(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed either two
# or three arguments.
# /---
# alias die_unless_args_2_to_3='(( # == 2 || # == 3 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_2_to_4(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed between two
# to four arguments.
# /---
# alias die_unless_args_2_to_4='(( 2 <= # || # <= 4 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_3(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly
# three arguments.
# /---
# alias die_unless_args_3='(( # == 3 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_3_or_more(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at least
# three arguments.
# /---
# alias die_unless_args_3_or_more='(( # >= 3 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_3_to_4(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed three or
# four arguments.
# /---
# alias die_unless_args_3_to_4='(( # == 3 || # == 4 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_3_to_5(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed between
# three to five arguments.
# /---
# alias die_unless_args_3_to_5='(( 3 <= # && # <= 5 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_4(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly four
# arguments.
# /---
# alias die_unless_args_4='(( # == 4 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_4_or_more(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed at least
# four arguments.
# /---
# alias die_unless_args_4_or_more='(( # >= 4 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_4_to_5(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed either
# four or five arguments.
# /---
# alias die_unless_args_4_to_5='(( # == 4 || # == 5 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_4_to_6(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed between
# four to six arguments.
# /---
# alias die_unless_args_4_to_6='(( 4 <= # && # <= 6 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_5(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly five
# arguments.
# /---
# alias die_unless_args_5='(( # == 5 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_6(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly six
# arguments.
# /---
# alias die_unless_args_6='(( # == 6 )) || :die'
# 
# :alias_command <<'/---'
# void die_unless_args_7(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly
# seven arguments.
# /---
# alias die_unless_args_7='(( # == 7 )) || :die'
# 
# # ....................{ TESTERS                            }....................
# :alias_command <<'/---'
# [status: boolean] is_arg()
# 
# Report success if the caller passed exactly one argument.
# /---
# alias is_arg='(( # == 1 ))'
# 
# :alias_command <<'/---'
# [status: boolean] is_args()
# 
# Report success if the caller passed at least one argument.
# /---
# alias is_args='(( # ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_0()
# 
# Report success if the caller passed no arguments.
# /---
# alias is_args_0='(( # == 0 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_0_to_1()
# 
# Report success if the caller passed at most one argument.
# /---
# alias is_args_0_to_1='(( # <= 1 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_0_to_2()
# 
# Report success if the caller passed at most two arguments.
# /---
# alias is_args_0_to_2='(( # <= 2 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_0_to_3()
# 
# Report success if the caller passed at most three arguments.
# /---
# alias is_args_0_to_3='(( # <= 3 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_1()
# 
# Report success if the caller passed exactly one argument.
# /---
# alias is_args_1='(( # == 1 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_1_to_2()
# 
# Report success if the caller passed either one or two arguments.
# /---
# alias is_args_1_to_2='(( # == 1 || # == 2 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_1_to_3()
# 
# Report success if the caller passed between one to three arguments.
# /---
# alias is_args_1_to_3='(( # >= 1 && # <= 3 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_2()
# 
# Report success if the caller passed exactly two arguments.
# /---
# alias is_args_2='(( # == 2 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_2_or_more()
# 
# Report success if the caller passed at least two arguments.
# /---
# alias is_args_2_or_more='(( # >= 2 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_3()
# 
# Report success if the caller passed exactly three arguments.
# /---
# alias is_args_3='(( # == 3 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_3_or_more()
# 
# Report success if the caller passed at least three arguments.
# /---
# alias is_args_3_or_more='(( # >= 3 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_3_to_4()
# 
# Report success if the caller passed either three or four arguments.
# /---
# alias is_args_3_to_4='(( # == 3 || # == 4 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_4()
# 
# Report success if the caller passed exactly four arguments.
# /---
# alias is_args_4='(( # == 4 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_4_to_5()
# 
# Report success if the caller passed either four or five arguments.
# /---
# alias is_args_4_to_5='(( # == 4 || # == 5 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_5()
# 
# Report success if the caller passed exactly five arguments.
# /---
# alias is_args_5='(( # == 5 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_5_to_6()
# 
# Report success if the caller passed either five or six arguments.
# /---
# alias is_args_5_to_6='(( # == 5 || # == 6 ))'
# 
# :func.document <<'/---'
# [status: boolean] is_args_6()
# 
# Report success if the caller passed exactly six arguments.
# /---
# alias is_args_6='(( # == 6 ))'

                    # If the upper count is only one greater than the lower count,
                    # document such aliases as a binary decision.
                    # if (( arg_count == 1 )) {
                    #     label_arg_count_in_range="either ${arg_count} or ${arg_count_at_most} arguments"
                    # # Else, document such aliases as a ranged decision.
                    # } else {
                    #     label_arg_count_in_range="between ${arg_count} and ${arg_count_at_most} arguments"
                    # }

#all argument count ranges
                # bounded below by the current argument count.

            # label_arg_count_at_least="at least ${arg_count} arguments"
        # If such count is positive, also declare and define "at least"-style
        # aliases. (If such count is 0, such aliases 

    # String list of alias names to be declared.
    # :string\
    #     alias_name_die_unless_arg_count_equals\
    #     alias_name_die_unless_arg_count_at_least\
    #     alias_name_die_unless_arg_count_in_range\
    #     alias_name_is_arg_count_equals

#         alias_name_die_unless_arg_count_equals="die_unless_args_${arg_count}"
#         alias_name_is_arg_count_equals="is_args_${arg_count}"
# 
#         # If such count is 0, document such aliases specific to such count.
#         if (( arg_count == 0 )) {
#             :alias_command <</---
# void ${alias_name_die_unless_arg_count_equals}(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed no
# arguments.
# /---
#             :alias_command <</---
# [status: bool] ${alias_name_is_arg_count_equals}()
# 
# Report success if the the caller passed no arguments.
# /---
#         # Else, such count is positive. Document such aliases generically.
#         } else {
#             :alias_command <</---
# void ${alias_name_die_unless_arg_count_equals}(string error_message = "")
# 
# Throw an exception with the passed message unless the caller passed exactly ${arg_count}
# arguments.
# /---
#             :alias_command <</---
# [status: bool] ${alias_name_is_arg_count_equals}()
# 
# Report success if the the caller passed exactly ${arg_count} arguments.
# /---
#         }
# 
#         # Define such aliases.
#         :alias_command.define "${alias_name_die_unless_arg_count_equals}"\
#             "(( # == ${arg_count} )) || :die"
#         :alias_command.define "${alias_name_die_unless_arg_count_equals}"\
#             "(( # == ${arg_count} )) || :die"

 # See ${function_name_is_arg_count_equals} for further details.

#:alias_command\
#    'void :arg_index.die_unless(integer arg_index)'\
#    '{
#        string arg_index__duai; arg_index__duai="$(:stdin.get)"
#        :args.is_index "${arg_index__duai}" or
#            :die "Argument index ${arg_index__duai} invalid (i.e., not in [1, ${#}])."
#    } <<<' <<'/---'
#Throw an exception with a stock message unless the passed integer is a valid
#index into the current argument list. See :args.is_index() for further details.
#/---

#:alias_command\
#    '[status: boolean] :args.is_index(integer arg_index)'\
#    '{
#        # Validate sanity.
#        string arg_index__iai; arg_index__iai="$(:stdin.get)"
#        :int.die_unless "${arg_index__iai}"
#
#        # Test such index.
#        (( 1 <= arg_index__iai && arg_index__iai <= # ))
#    } <<<' <<'/---'
#Report success if the passed integer is a valid index into the current argument
#list (i.e., is in the range `[1, ${#}]`).
#/---

#FUXME: Woooops. Had I only discovered herestring-driven aliases earlier, we
#might have *VASTLY* simplified these. It's extremely silly to explicitly define
#one alias for each possible number of arguments. But that's exactly what we've
#done, sadly. Happily, we can correct this now before we do any more inelegant
#damage. Here's an example alias obseleting *ALL* of the "_or_more"-suffixed
#tester aliases below:
#
#alias :args.is_count_at_least='{
#   (( # <= $(< /dev/stdin) ))
#} <<<'
#
#That's not *QUITE* right, of course. We'd want to :die unless a positive integer
#was passed. But you gather the idea, yes? Since such approach does *NOT* apply
#to exception throwers (which would need to accept two arguments and hence not
#be implementable with herestring-driven aliases), we should split this file
#into two components: "arg/exception" and "arg/arg".

#FUXME: Sweet. I finally figured out how to implement general argument count
#exception handlers. Fairly simple, once I reasoned it through:
#
#alias die_unless_args_in_range='die_unless_args_in_range ${#}'
#function die_unless_args_in_range() {
#    die_unless_args_4\
#        'expected one argument count, one lower bound, one upper bound, and one message'
#    (( ${2} <= ${1} && ${1} <= ${3} )) or :die "${4}"
#}
#
#Clever, no? Dead simple, too! That said, continue to retain the efficient
#versions for, well... efficiency's sake.

#:alias_command <<'/---'
#[status: boolean] is_args_at_most(integer arg_count)
#
#Report success if the caller passed at most the passed number of arguments.
#/---
#alias is_args_at_most=':is_int_at_most ${#}'

#alias :args.is_count_at_least='{
#    string count__iaal; set_string_to_stdin_pipe count__iaal
#    :int.die_unless_positive "${count__iaal}"
#    (( # <= count__iaal ))
#} <<<'
#alias is_args_at_most='{
#    string count__iaam; set_string_to_stdin_pipe count__iaam
#    :int.die_unless_positive "${count__iaam}"
#    (( # >= count__iaam ))
#} <<<'
#alias die_unless_args_in_range='die_unless_args_in_range ${#}'
#function :args.is_count_in_range() {
#    die_unless_args_4\
#        'expected one argument count, one lower bound, one upper bound, and one message'
#    (( ${2} <= ${1} && ${1} <= ${3} )) or :die "${4}"
#}
#alias :args.is_count_equals='{
#    string count__iae; set_string_to_stdin_pipe count__iae
#    :int.die_unless_positive "${count__iae}"
#    (( # == count__iae ))
#} <<<'
# The above aliases suffice to test against all possible single argument counts.
# For testing against pairs of such counts *AND* parity with exception handling
# nomenclature (e.g., die_unless_args_3_or_more()), declare additional such
# testers with the same nomenclature.

# While component "arg" defines aliases accepting at most one argument and hence
# implementable via herestrings, this component defines aliases (generally)
# accepting two arguments (i.e., argument count and exception message) and hence
# implementable only by explicitly defining aliases specific to all common
# argument counts. While horrible, there are subtle benefits to such an
# approach: principally, efficiency.
