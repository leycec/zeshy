#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *argument lists* (i.e., lists of all arguments passed to functions and
scripts).
/---

# ....................{ [AP|PRE]PENDERS                    }....................
#FIXME: Also implement an insertion method (i.e., inserting a string into an
#arbitrary argument index, pushing all subsequent indices down by one), which
#it turns out is efficiently implementable ala:
#
#    # For all argument indices excluding the first. Unfortunately, inserting
#    # to the first argument index requires reassigning the entire argument
#    #list. (See below.)
#    '{ argv[$(( arg_index - 1 ))]+="${arg_value}" } <<<'
#
#Alas, such alias expects two arguments and hence must be implemented as a
#split alias expandable as follows:
#
#    :arg.insert_at_index:: "my new arg" 3 ::
#FIXME: The above approach works for inserting to all indices *EXCEPT* the
#first, which requires a slightly more convoluted approach (i.e., shift all
#arguments down by 1 index, then set the first index). Of course, this is
#easiest (and probably most efficiently) implemented as:
#
#    :args.set "${arg_value}" "${@}"
#
#Oh, right. Such implementation should simply defer to :arg.prepend() for the
#edge case of the first argument index. Done!

:alias_command ':void {:arg.prepend :arg.unshift}(:str arg)'\
    '{ :args.set "$(:stdin)" "${@}" } <<<' <<'/---'
Prepend the passed argument to the beginning of the current argument list.

This alias sets this list's first item to the passed argument, its second item
to this list's (previously) first item, and so forth.

== Caveats ==

Due to `zsh` constraints, this alias accepts only a single argument. While there
exists no variant accepting multiple arguments at this time, a macro-based
variant that does so should be implemented... sometime.
/---

:alias_command ':void {:arg.append :arg.push}(:str arg)'\
    '{ argv+="$(:stdin)" } <<<' <<'/---'
Append the passed argument to the end of the current argument list.

This alias sets this list's last item to the passed argument, its second-to-last
item to this list's (previously) last item, and so forth.

== Caveats ==

Due to `zsh` constraints, this alias accepts only a single argument. To append
two or more arguments at a time, consider calling either :args.append() or
:args.push() instead.
/---

:alias_command ':void {:args.append :args.push}(+:str args)'\
    ':args.set "${@}"' <<'/---'
Append all passed arguments to the end of the current argument list.

== Caveats ==

Due to `zsh` constraints, this alias inefficiently copies such list on each
expansion. To avoid such inefficiency, consider calling either :arg.append() or
:arg.push() instead.
/---

# ....................{ REMOVERS                           }....................
:alias_command ':void :args.shift(:int arg_count=1)' 'shift --' <<'/---'
Remove the passed number of arguments (defaulting to 1) from the beginning of
the current argument list.
/---

:alias_command ':void :args.pop(:int arg_count)'\
    '{
        # Validate sanity.
        :str count__pa; count__pa="$(:stdin)"
        :args.index.die_unless "${count__pa}"

        # Pop these arguments.
        argv[-${count__pa},-1]=()
    } <<<' <<'/---'
Remove the passed number of arguments from the end of the current argument
list.
/---
