#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *argument lists* (i.e., lists of all arguments passed to functions and
scripts).
/---

# ....................{ [AP|PRE]PENDERS                    }....................
#FIXME: Also implement an insertion method (i.e., inserting a string into an
#arbitrary argument index, pushing all subsequent indices down by one), which
#it turns out is efficiently implementable ala:
#
#    # For all argument indices excluding the first. Unfortunately, inserting
#    # to the first argument index requires reassigning the entire argument
#    #list. (See below.)
#    '{ argv[$(( arg_index - 1 ))]+="${arg_value}" } <<<'
#
#Alas, such alias expects two arguments and hence must be implemented as a
#split alias expandable as follows:
#
#    :arg.insert_at_index:: "my new arg" 3 ::
#FIXME: The above approach works for inserting to all indices *EXCEPT* the
#first, which requires a slightly more convoluted approach (i.e., shift all
#arguments down by 1 index, then set the first index). Of course, this is
#easiest (and probably most efficiently) implemented as:
#
#    :args.set "${arg_value}" "${@}"
#
#Oh, right. Such implementation should simply defer to :arg.prepend() for the
#edge case of the first argument index. Done!

:alias_command ':void {:arg.prepend :arg.unshift}(:str arg)'\
    '{ :args.set "$(:stdin)" "${@}" } <<<' <<'/---'
Prepend the passed argument to the beginning of the current argument list.

== Caveats ==

Due to `zsh` constraints, this alias accepts only a single such argument.
/---

:alias_command ':void {:arg.append :arg.push}(:str arg)'\
    '{ argv+="$(:stdin)" } <<<' <<'/---'
Append the passed argument to the end of the current argument list.

== Caveats ==

Due to `zsh` constraints, this alias accepts only a single such argument. To
append two or more arguments at a time, consider calling either :args.append()
or :args.push() instead.
/---

:alias_command ':void {:args.append :args.push}(+:str args)'\
    ':args.set "${@}"' <<'/---'
Append all passed arguments to the end of the current argument list.

== Caveats ==

Due to `zsh` constraints, this alias inefficiently copies such list on each
expansion. To avoid such inefficiency, consider calling either :arg.append() or
:arg.push() instead.
/---

# ....................{ REMOVERS                           }....................
:alias_command ':void :args.shift(:int arg_count=1)' 'shift --' <<'/---'
Remove the passed number of arguments (defaulting to 1) from the beginning of
the current argument list.
/---

:alias_command ':void :args.pop(:int arg_count)'\
    '{
        # Validate sanity.
        :str count__pa; count__pa="$(:stdin)"
        :arg_index.die_unless "${count__pa}"

        # Pop such arguments.
        argv[-${count__pa},-1]=()
    } <<<' <<'/---'
Remove the passed number of arguments from the end of the current argument
list.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Given function preamble generation, we probably no longer require
#these. Contemplate excising.

# :alias_command 'void pop_arg()' 'argv[-1]=()' <<'/---'
# Remove the last argument from the current argument list.
# /---
# 
# :alias_command 'void pop_args_2()' 'argv[-2,-1]=()' <<'/---'
# Remove the last two arguments from the current argument list.
# /---
# 
# :alias_command 'void pop_args_3()' 'argv[-3,-1]=()' <<'/---'
# Remove the last three arguments from the current argument list.
# /---

#FUXME: Rename to :args.shift().

#FUXME: Given function preamble generation, we probably no longer require
#these. Contemplate excising.

# :alias_command ':void shift_arg()' 'argv[1]=()' <<'/---'
# Remove the first argument from the current argument list.
# /---
# 
# :alias_command 'void shift_args_2()' 'argv[1,2]=()' <<'/---'
# Remove the first two arguments from the current argument list.
# /---
# 
# :alias_command 'void shift_args_3()' 'argv[1,3]=()' <<'/---'
# Remove the first three arguments from the current argument list.
# /---

#FUXME: Rename to :arg.shift().

#FUXME: Excise *ALL* of the following. Honestly, they're probably less
#efficient than simply calling the shift() builtin.

#FUXME: Actually, isn't this significantly more efficiently implementable as
#follows?
#
#   '{ argv+="$(:stdin)" } <<<'
#
#Looks good to us. (Test us up, please...)

# ':args.set "${@}"' <<'/---'

#FUXME: Also define a new generalized remove_args() function 
