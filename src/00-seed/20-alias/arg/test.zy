#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Argument count testers* (i.e., aliases testing the number of arguments passed
to the current callable).
/---

# ....................{ TESTERS ~ count                    }....................
#FIXME: Add examples!
:alias_command '[status=:bool] ":args.count.is_=="(:int arg_count)'\
    ':int.== ${#}' <<'/---'
Report success if the caller passed the passed number of arguments.
/---

:alias_command '[status=:bool] ":args.count.>="(:int arg_count)'\
    ':int.">=" ${#}' <<'/---'
Report success if the caller passed at least the passed number of arguments.
/---

:alias_command '[status=:bool] ":args.count.>=<"(
    :int minimum_arg_count :int maximum_arg_count)'\
    ':int.">=<" ${#}' <<'/---'
Report success if the caller passed a number of arguments in the passed range
(i.e., greater than or equal to the passed minimum and less than or equal to the
passed maximum).
/---

# ....................{ TESTERS ~ count : parity           }....................
:alias_command '[status=:bool] :args.count.is_even()'\
    ':int.is_even ${#}' <<'/---'
Report success if the caller passed an even number of arguments to the current
function or script.
/---

:alias_command '[status=:bool] :args.count.is_odd()'\
    ':int.is_odd ${#}' <<'/---'
Report success if the caller passed an odd number of arguments to the current
function or script.
/---

# ....................{ TESTERS ~ match                    }....................
:alias_command '[status=:bool] ":arg.is_=="(:str arg)'\
    '{ (( ${@[(ie)$(:stdin)]} <= ${#} )) } <<<' <<'/---'
Report success if the caller passed the passed argument.
/---

:alias_command '[status=:bool] :arg.is_^=(:str/:glob glob)'\
    '{ (( ${@[(i)$(:stdin)]} <= ${#} )) } <<<' <<'/---'
Report success if the caller passed an argument matching the passed glob.
/---
