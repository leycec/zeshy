#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core list aliases.
/---

# ....................{ CONVERTERS                         }....................
# While *NOT* an alias and hence otherwise inapplicable to this component, this
# function's implementation is inseparable from that of :List.from_stdin(). For
# the insufferable love of the Elder Gods, both are defined together.

:func.doc <<'/---'
:str :List.as_string(:List list_name)

Get a string losslessly encapsulating the contents of the list variable with the
passed name.

Call :List.from_stdin() to losslessly restore this list from this string.

== See Also ==

* :List.from_stdin().
* :List.return().
/---
function :List.as_string() {
    die_unless_arg 'Expected one list name.'
    :str list_name__clts=${1}
    :List.die_unless "${list_name__clts}"

    # Convert such list. Dismantled, this is:
    #
    # * '1:-list' expands to the passed list name or 'list' if no such name
    #   was passed.
    # * 'P' transitively expands this name to the actual name of the desired
    #   associative list in the caller's scope.
    # * '@' interprets this expansion as a list rather than scalar.
    # * 'qq' protectively embeds all reserved shell characters in such names
    #   and values in single quotes.
    :stdout.echo "${(qq@P)list_name__clts}"
}

# ....................{ SETTERS                            }....................
#FIXME: Rename to :List.set_to_stdin_words().
#FIXME: Implement a comparable :set_map_to_stdin_words().
#FIXME: Fix now-broken examples in "README.dev". Actually, consider removing
#these examples and associated caveats altogether. zeshy has progressed _far_
#beyond this simplistic alias.
#FIXME: Actually, I'm unconvinced we still require this alias. Sure, if it works
#reliably (and it appears to), we suppose there's little benefit in eliminating
#it entirely. But given macros, this alias should probably *NEVER* be expanded
#in the core zeshy codebase.

:alias_command ':void :List.from_stdin(:List list_name)'\
    '{
        # If standard input contains no newline, throw an exception. Avoid
        # calling :str.contains(), performing two implicit string copies.
        :str list_string__sltsp; list_string__sltsp="$(:stdin)"
        :is  "${list_string__sltsp}" == *"${ZY_ASCII_NEWLINE}"* :si :or
            :die "Expected piped standard input."

        # For efficiency, remove the suffixing herestring zsh appended to
        # standard input "in-place". Hereafter, ${list_string__sltsp} contains
        # the piped stringified list and ${match[1]} the target list name.
        # Dismantled, this is:
        #
        # * "%", non-greedily removing such suffix.
        # * "(#b)", enabling group capturing.
        # * "(*)", matching the passed list name into ${match[1]}.
        list_string__sltsp=${list_string__sltsp%(#b)${ZY_ASCII_NEWLINE}(*)}
        :str list_name__sltsp=${match[1]}
        :List.die_unless "${list_name__sltsp}"

        # Convert such string to such list.
    #   :stdout.echo "list: ${list_string__sltsp}"
        eval ${list_name__sltsp}''=( "${(z)list_string__sltsp}" )''
    } <<<' <<'/---'
Convert the string piped on standard input into the passed list.

This string must be of the same format output by :List.as_string() and
:List.return() (e.g., parameter expansion flags `(qq)`). While this string must
be piped into this alias, this list name must be passed after this alias.

== Examples ==

==========================================
[source]
------------------------------------------
>>> function get_minerals() {
...     :list asbestos; asbestos=( nephrite porphyry glauconite mafic )
...     :List.return asbestos
... }
>>> get_minerals | :List.from_stdin asbestos_copy
>>> :stdout.echo "${asbestos_copy[1]}"
nephrite
------------------------------------------
==========================================
/---

#FIXME: Absurdly helpful "unit tests". Preserve until implementing proper tests.
#function get_minerals() {
#    list asbestos; asbestos=( nephrite 'porph yry' "\"glauc\" 'o' ni\"te" mafic )
#    :List.return asbestos
#}
#function test_minerals() {
#    get_minerals | :List.from_stdin asbestos_copy
#    :stdout.echo "asbestos (1): ${asbestos_copy[1]}"
#    :stdout.echo "asbestos (2): ${asbestos_copy[2]}"
#    :stdout.echo "asbestos (3): ${asbestos_copy[3]}"
#}

# ....................{ RETURNERS                          }....................
:alias_command ':str :List.return(:List list_name)'\
    '{
        :List.as_string "$(:stdin)"
        :success.report
    } <<<' <<'/---'
Return the passed list from the current function or script.

Specifically, this function:

* Losslessly converts such list into a string.
* Outputs such string to standard output.
* Returns from such function or script with zero exit status (i.e., success).

Callers of such function or script may consider calling
:List.from_stdin() to convert such string back into the original list.

[CAUTION]
=========================================
This alias performs at least two three complete list copies assuming subsequent
calling of :List.from_stdin() and two copies otherwise. Such copies and
hence this alias are inefficient on large lists. Where efficiency is a concern,
consider instead implementing list functions to accept list names as passed
arguments and expand such lists with parameter expansion flags `(@P)`.
=========================================
/---

# ....................{ APPENDERS                          }....................
#FIXME: Refactor into a new macro @List.localize(). The current alias-based
#approach requires embedding multiple list names in a single string argument.
#*shakes head ruefully*

:alias_command ':void :List.localize(
    :List target_list_name +:List source_list_names)' '{
    :list  args__aplwll; set_list_to_stdin_words args__aplwll
    (( ${#args__aplwll} >= 2 )) :or :die "Expected two or more list names."
    :list list__aplwll

    # Make a temporary local list containing all passed list items.
    :str list_name__aplwll
    for list_name__aplwll ("${args__aplwll[@]}") {
        :List.die_unless "${list_name__aplwll}"
        list__aplwll+=( "${(@P)list_name__aplwll}" )
    }

    # Shadow the first passed list with such temporary list.
    :list "${args__aplwll[1]}"
    set_list_to_list "${args__aplwll[1]}" list__aplwll
#   print "list__aplwll: ${list__aplwll[@]}"
#   print "target list: ${(@P)args__aplwll[1]}"
#   print "target list name: ${args__aplwll[1]}"

    # Delete such temporary list to avoid polluting the current namespace.
    :Var.undefine list__aplwll
} <<<' <<'/---'
Declare a new local list with the first passed list name containing all passed
lists (including the first) in the same order.

If the first passed list has not already been locally declared in the current
function or script, this alias shadows such list with a local list containing
all elements of all passed lists (e.g., to temporarily append a global list with
function-specific elements). Due to `zsh` constraints, list names must be passed
whitespace-delimited in a single shell word (e.g., single- or double-quoted
string).

== Examples ==

==========================================
[source]
------------------------------------------
# Define a GNU/Hurd-specific path listing function deferring to list_path().
>>> function list_path_on_gnu_hurd() {
...     :List.localize\
...         "ZY_OPTIONS_LS ZY_OPTIONS_LS_FROM_LINUX_HURD"
...     list_path "${@}"
... }
------------------------------------------
==========================================
/---
