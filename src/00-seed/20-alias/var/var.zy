#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Core variable aliases.
/---

# ....................{ UNDEFINERS                         }....................
#FIXME: This alias currently fails to apply to constant variables, rendering it
#effectively ineffectual for general-purpose use. Reliability takes absolute
#precedence over efficiency. Given that:
#
#1. Refactor :Var_constant.undefine() into a new macro named @Var.undefine().
#   This macro should support both multiple variable names (unlike
#   :Var_constant.undefine()) *AND* constant variables (unlike :Var.undefine()).
#3. Remove :Var.undefine().

:alias_command ':void :Var.undefine(+:Var var_names)'\
    'unset --' <<'/---'
Undefine the passed variables in the caller's context. If this is either the
command line or the top level of a shell script, undefine such variables
globally; else, undefine such variables locally. Undefining globals thus
requires expanding this alias from a global context (i.e., _not_ from within a
function body).

.:Var.undefine()
==========================================
[source]
------------------------------------------
>>> :str\
...     on_rules="Any fool can make a rule"\
...     on_fools="And any fool will mind it."
>>> :Var.undefine on_rules on_fools
>>> :stdout.echo "${on_rules}"
zsh: on_rules: parameter not set
------------------------------------------
==========================================

== Caveats ==

Avoid passing *constant variables* (e.g., variables declared with
string_global()) to this alias. By `zsh` constraints, this alias throws an
exception on attempting to undefine such variables. Consider passing such
variables to :Var_constant.undefine(), instead.
/---

:alias_command ':void :Var_constant.undefine(:Var var_name)'\
    '{
        # Validate sanity.
        :str variable_name__uvc; variable_name__uvc=$(:stdin)
        :die_unless_var_name "${variable_name__uvc}"

        # Destructively redeclare such variable as a non-constant string local
        # *BEFORE* undefining such variable. (Yes, this is overly circuitous.)
        typeset +r -- "${variable_name__uvc}"

        # Undefine such variable.
        unset -- "${variable_name__uvc}"
    } <<<' <<'/---'
Undefine the passed constant variable in the caller's context. Due to `zsh`
constraints, constant variables _cannot_ be undefined by calling
:Var.undefine() or unset(). Unlike such functions, however, this function
accepts only one variable name. See :Var.undefine() for further details:
e.g.,

.:Var_constant.undefine()
==========================================
[source]
------------------------------------------
>>> :str_constant on_allegiance=\
...    "If a thousand men were not to pay their tax-bills this year, that would
...     not be a violent and bloody measure, as it would be to pay them, and
...     enable the State to commit violence and shed innocent blood. This is, in
...     fact, the definition of a peaceable revolution, if any such is possible.
...     If the tax-gatherer, or any other public officer, asks me, as one has
...     done, \"But what shall I do?\" my answer is, \"If you really wish to do
...     anything, resign your office.\" When the subject has refused allegiance,
...     and the officer has resigned his office, then the revolution is
...     accomplished."
>>> :Var_constant.undefine on_allegiance
>>> :stdout.echo "${on_allegiance}"
zsh: on_allegiance: parameter not set
------------------------------------------
==========================================
/---
