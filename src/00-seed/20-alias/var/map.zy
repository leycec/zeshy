#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core map aliases.
/---

# ....................{ LOCALIZERS                         }....................
#FIXME: Alias requires heavy revision, both externally and internally. Honestly,
#is this even widely useful? If it is, we should probably refactor this into a
#macro to permit the caller to specify a caller-specific local variable suffix
#(if any). We currently coerce the name of every local variable created by this
#alias to be suffixed by "_lm", which seems rather unhelpful.
#FIXME: Overly long example. Dissolve into a singificantly smaller example.

:alias_command ':void :Map.localize_as_strings(:Map map_name)' '{
    # Validate standard input, preferring suffix "__lma" to "__lm" to avoid
    # conflict with string locals defined below.
    :str map_name__lma; map_name__lma=$(:stdin)
    :Map.die_unless "${map_name__lma}"

    # Localize each map key. Avoid calling for_map_keys(), as that would
    # localize such keys in the context of such function rather than the caller.
    :str key__lma
    for     key__lma ("${(k@)map_name__lma}") {
        # If such key is not a valid variable name, throw an exception. For
        # efficiency, inline such test. See :is_var_name(). Since previously
        # defined parcel zy://00-startup/00-declare/*-global declares such
        # global, its expansion here is inherently safe.
        :is ${key__lma} =~ ${ZY_VAR_NAME_PCRE} :si :or
            :die_unless_var_name "${key__lma}"

        # If such key is already an existing variable, throw an exception. For
        # efficiency, inline this test. See :Var.is().
        :is -n ${(P)key__lma+x} :si :or
            :Var.die_unless "${key__lma}"

        # Declare such key as a string local.
        :str "${key__lma}"
    }
} <<<' <<'/---'
Localize the passed map into local string variables in the caller's context.

For each key of this map, a local string variable whose name is that key
suffixed by `__lm` and whose value is that key's value will be defined.

Since keys are arbitrary strings and variable names are not (i.e., such names
must match ${ZY_VAR_NAME_PCRE}), keys are not necessarily valid variable
names. An exception is thrown if any key is _not_ a valid variable name: e.g.,

.:Map.localize_as_strings()
==========================================
[source]
------------------------------------------
>>> :map on_decentralization; on_decentralization=\
...    "Well"         "to begin with we don't fight wars or prepare for them."
...    "Consequently" "we have no need for conscription, or military"
...    "hierarchies"  "or a unified command. Then there's our economic system:"
...    "it"           "doesn't permit anybody to become more than four or five times"
...    "as"           "rich as the average. That means that we don't have any captains"
...    "of"           "industry or omnipotent financiers. Better still, we have no"
...    "omnipotent"   "politicians or bureaucrats. Pala's a federation of self-"
...    "governing"    "units, geographical units, professional units, economic"
...    "units"        "— so there's plenty of scope for small-scale initiative and"
...    "democratic"   "leaders, but no place for any kind of dictator at the"
...    "head"         "of a centralized government. Another point: we have no"
...    "established"  "church, and our religion stresses immediate experience"
...    "and"          "deplores belief in unverifiable dogmas and the emotions which"
...    "that"         "belief inspires. So we're preserved from the plagues of popery,"
...    "on"           "the one hand, and fundamentalist revivalism, on the other. And"
...    "along"        "with transcendental experience we systematically cultivate"
...    "skepticism"   "Discouraging children from taking words too seriously,"
...    "teaching"     "them to analyse whatever they hear or read — this is an"
...    "integral"     "part of the school curriculum. Result: the eloquent"
...    "rabble"       "rouser, like Hitler or our neighbour across the Strait,"
...    "Colonel"      "Dipa, just doesn't have a chance here in Pala." )
>>> :Map.localize_as_strings on_decentralization
>>> :str.output "${omnipotent__lm}"
politicians or bureaucrats. Pala's a federation of self-
>>> :str.output "${skepticism__lm}"
Discouraging children from taking words too seriously,
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
