#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core string aliases.
/---

# ....................{ UNESCAPERS                         }....................
# Unescape strings with print() rather than echo(). The former unescapes a
# proper superset of the latter
:alias_command\
    'string unescape_string(string text1 = "", string text2, ...)'\
    'print --' <<'/---'
Output the passed strings (defaulting to the empty string) to standard output
with trailing newline and recognizing all escape sequences recognized by low-
level builtins echo() and print(). These include:

* `\a`, a bell character.
* `\b`, a backspace.
* `\c`, suppressing the trailing newline.
* `\e` and `E`, an escape.
* `\f`, a form feed.
* `\n`, a newline.
* `\r`, a carriage return.
* `\t`, a horizontal tab.
* `\v`, a vertical tab.
* `\\`, a backslash.
* `\0hhh`, the ASCII character with octal codepoint `hhh`.
* `\xhh`, the ASCII character with hexadecimal codepoint `hh`.
* `\C-x`, the control character <Ctrl-x>, where `x` is any ASCII character
  (e.g., `\C-@`, null; `\C-?`, delete).
* `\M-x`, the meta character <Alt-x>, where `x` is any ASCII character.
* `\x`, the ASCII character `x` as is, where `x` is any such character _not_
  listed above.

For example:

.unescape_string()
==========================================
[source]
------------------------------------------
>>> string morning_window="\nTHEY are rattling breakfast plates...\n"
>>> unescape_string "${morning_window}"

THEY are rattling breakfast plates...

>>> :string.output "${morning_window}"
\nTHEY are rattling breakfast plates...\n
------------------------------------------
==========================================

See :string.output() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
