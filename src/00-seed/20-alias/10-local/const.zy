#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *constant local declarers* (i.e., aliases declaring constant local
variables).
/---

#FIXME: Rename each alias declared below by replacing the "_" prefixing each
#"const" in such alias name by ".": e.g.,
#
#* Rename ":float_const" to ":float.const".
#* Rename ":listset_const" to ":listset.const".

# ....................{ DECLARERS                          }....................
# Nonscalar variables (i.e., lists, maps) *CANNOT* be initialized at
# declaration time and hence *CANNOT* be declared to be read-only.

:alias_command ':void :float_const(+:string float_names_and_values)'\
    'local -Fr --' <<'/---'
Locally declare all float constants, initialized to the `=`-prefixed value
suffixing each if any or 0.0 otherwise.

If any such variable is subsequently redefined, an exception will be thrown.

== See Also ==

* :float().
/---

:alias_command ':void :int_const(+:string int_names_and_values)'\
    'integer -r --' <<'/---'
Locally declare all integer constants, initialized to the `=`-prefixed value
suffixing each if any or 0 otherwise.

If any such variable is subsequently redefined, an exception will be thrown.

== See Also ==

* :int().
/---

:alias_command ':void :string_const(+:string string_names_and_values)'\
    'local -r --' <<'/---'
Locally declare all passed string constants, initialized to the `=`-prefixed
value suffixing each if any or the empty string otherwise.

If any such variable is subsequently redefined, an exception will be thrown.

== See Also ==

* :string().
/---

# ....................{ DECLARERS ~ sub                    }....................
:alias_command ':void :bool_const(+:string bool_names_and_values)'\
    'integer -r --' <<'/---'
Locally declare all passed boolean constants, initialized to the `=`-prefixed
value suffixing each if any or ${false} otherwise.

If any such variable is subsequently redefined, an exception will be thrown.

== See Also ==

* :bool().
/---

:alias_command ':void :char_const(+:string char_names_and_values)'\
    'local -r --' <<'/---'
Locally declare all passed character constants, initialized to the `=`-prefixed
value suffixing each if any or the empty string otherwise.

If any such variable is subsequently redefined, an exception will be thrown.

== See Also ==

* :char().
/---

:alias_command ':void :file_descriptor_const(+:string fd_names_and_values)'\
    'integer -r --' <<'/---'
Locally declare all file descriptor constants, initialized to the `=`-prefixed
value suffixing each if any or 0 otherwise.

If any such variable is subsequently redefined, an exception will be thrown.

== See Also ==

* :file_descriptor().
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Shift all constant local declarers here.
#FUXME: Move to ={*-start/*-alias/*-core/*-var}.

# :alias_command 'void character_global(string var_name1, ...)'\
#     'string_global' <<'/---'
# Declare the passed character variables globally _not_ exported to the calling
# shell. See :char() for further details.
# /---
# 
# :alias_command\
#     'void character_global_export(string var_name1, ...)'\
#     'string_global_export' <<'/---'
# Declare the passed character variables globally exported to the calling shell.
# See :char() for further details.
# /---

#FUXME: Rename "character" to "char".

#FUXME: Excise after replacing with the prior alias everywhere.
# :alias_command 'void character(string var_name1, ...)'\
#     'string' <<'/---'
# Declare
# /---

# :alias_command\
#     ':void :char_const_global_export(:string var_name1, ...)'\
#     ':string_const_global_export' <<'/---'
# Declare the passed character constants globally exported to the calling shell.
# See :char_const() for further details.
# /---
