#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *indirect local declarers* (i.e., aliases declaring local variables
indirectly referring to other variables).

Under `zsh`, other variables are indirectly referred to by name. Hence, _all_
indirect local variables are necessarily of type `:str`. This implies that
indirect local variables may safely be declared to be of type `:str` rather
than the indirect type specific to the direct type being referred to (e.g.,
`:str` rather than `:Int` for local variables indirectly referring to other
integer variables). Nonetheless, indirect types are often preferred for
readability and _always_ required for declaring indirect arguments in callable
prototypes (e.g., `:void :Int.is(:Int int_name)`, the prototype for a function
accepting one indirect integer argument).
/---

# ....................{ DECLARERS                          }....................
:alias_command ':void :Float(+:str declarations)'\
    ':str' <<'/---'
Locally declare all passed *indirect float variables* (i.e., whose values are
the names of existing float variables), initialized to the `=`-prefixed string
suffixing each if any or the empty string otherwise.

== See Also ==

* :float().
/---

:alias_command ':void :Int(+:str declarations)'\
    ':str' <<'/---'
Locally declare all passed *indirect integer variables* (i.e., whose values are
the names of existing integer variables), initialized to the `=`-prefixed string
suffixing each if any or the empty string otherwise.

== See Also ==

* :int().
/---

:alias_command ':void :Str(+:str declarations)'\
    ':str' <<'/---'
Locally declare all passed *indirect string variables* (i.e., whose values are
the names of existing string variables), initialized to the `=`-prefixed string
suffixing each if any or the empty string otherwise.

== See Also ==

* :str().
/---

# ....................{ DECLARERS ~ derived                }....................
:alias_command ':void :Bool(+:str declarations)'\
    ':str' <<'/---'
Locally declare all passed *indirect boolean variables* (i.e., whose values are
the names of existing boolean variables), initialized to the `=`-prefixed string
suffixing each if any or the empty string otherwise.

== See Also ==

* :bool().
/---

:alias_command ':void :Char(+:str declarations)'\
    ':str' <<'/---'
Locally declare all passed *indirect character variables* (i.e., whose values
are the names of existing character variables), initialized to the `=`-prefixed
string suffixing each if any or the empty string otherwise.

== See Also ==

* :char().
/---

:alias_command ':void :Var(+:str declarations)'\
    ':str' <<'/---'
Locally declare all passed *indirect generic variables* (i.e., whose values are
the names of existing variables of arbitrary type), initialized to the
`=`-prefixed string suffixing each if any or the empty string otherwise.

== See Also ==

* :var.is().
/---

# --------------------( WASTELANDS                         )--------------------
