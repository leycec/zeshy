#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *caller* (i.e., the runnable calling the current runnable) aliases.
/---

#FIXME: Actually, all such aliases should be reimplemented as functions.
#Aliases are extremely problematic for a number of reasons, the most
#significant of which is reliability: aliases remain unloaded until
#startup_zeshy_aliases() is called. In the interim, any function attempting to
#expand such an alias in a subshell (e.g., "$(:caller.get)") will fail with a
#fatal exception, as such alias will not yet have been defined. Indeed, there
#exists no compelling reason to define the following runnables as aliases
#except simplicity of implementation, which is no real justification at all.

# Avoid calling functions in alias expansions to avoid polluting the call stack.

# ....................{ EXCEPTIONS                         }....................
:alias_command ':void :caller.die_unless()'\
    ':caller.is :or :die\
        "No runnable called the current runnable (e.g., due to being called directly from the command line)."' <<'/---'
Throw an exception with a stock message if the current runnable was called
directly from the command line (i.e., unless such runnable was called by another
runnable). See :caller.is() for further details.
/---

:alias_command ':void :caller.die_unless_equals(:str caller_name)'\
    '{
        :str caller_name__duce="$(:stdin)"
        :caller.is_equals "${caller_name__duce}" :or :die\
            "Caller \"$(:caller.get)\" not \"${caller_name__duce}\"."
    } <<<' <<'/---'
 <<'/---'
Throw an exception with the passed message unless the name of the caller's
caller is the passed name. See :caller.is_equals() for further details.
/---

# ....................{ TESTERS                            }....................
#FIXME: Great example, but overlang. Split up.
:alias_command '[status=:bool] :caller.is()'\
    '(( ${#funcstack} >= 2 ))' <<'/---'
Report success if the current runnable was _not_ called directly from the
command line (i.e., if such runnable was called by another runnable): e.g.,

.:caller.is()
==========================================
[source]
------------------------------------------
>>> :str on_defeat_in_detail=\
...    "It's our differences. That's all the media and the politicians are ever
...     talking about – the things that separate us, things that make us
...     different from one another. That's the way the ruling class operates in
...     any society. They try to divide the rest of the people. They keep the
...     lower and the middle classes fighting with each other so that they, the
...     rich, can run off with all the fucking money. Fairly simple thing.
...     Happens to work. You know? Anything different – that's what they're
...     gonna talk about – race, religion, ethnic and national background, jobs,
...     income, education, social status, sexuality, anything they can do to
...     keep us fighting with each other, so that they can keep going to the
...     bank. You know how I define the economic and social classes in this
...     country? The upper class keeps all of the money, pays none of the taxes.
...     The middle class pays all of the taxes, does all of the work. The poor
...     are there just to scare the shit out of the middle class. Keep 'em
...     showing up at those jobs."
>>> :caller.is or get_string_line "${on_defeat_in_detail}" -1
showing up at those jobs.
------------------------------------------
==========================================
/---

#FIXME: Add examples.
:alias_command '[status=:bool] :caller.is_equals(:str caller_name)'\
    '{
        :caller.die_unless

        #FIXME: Process substitutions are inefficient. Substitute the former by
        #${funcstack[2]}, after verifying that to work as expected. Or would it
        #rather be ${funcstack[1]} is this context? We rather think so.
        :is $(:caller.get) == $(:stdin) :si
    } <<<' <<'/---'
Report success if the caller's name equals the passed string. See :caller.get()
for further details on such name.
/---

# ....................{ GETTERS                            }....................
#FIXME: Refactor into a setter function.

:alias_command ':str :caller.get()' '{
    :caller.die_unless
    :stdout.echo "${funcstack[2]}"
}' <<'/---'
Get the name of the *caller* (i.e., runnable that called the current runnable). This alias is intended to be expanded from command substitutions: e.g.,

.:caller.get()
==========================================
[source]
------------------------------------------
>>> :str on_going_away=\
...    "The planet isn't going anywhere. We are. We're going away. Pack your
...     shit, folks. We're going away and we won't leave much of a trace,
...     either. Thank God for that. Maybe a little styrofoam. The planet'll be
...     here and we'll be long gone. Just another failed mutation. Just another
...     closed-end biological mistake, an evolutionary cul-de-sac. The planet'll
...     shake us off like a bad case of fleas, a surface nuisance."
>>> function "${on_going_away}" () { on_the_big_electron }
>>> function on_the_big_electron() { get_string_line "$(:caller.get)" 1 }
>>> "${on_going_away}"
The planet isn't going anywhere. We are. We're going away. Pack your
------------------------------------------
==========================================

See :Caller.set() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
# ....................{ EXCEPTIONS                         }....................
# While function implementations are complicated by needing to avoid modifying
# the call stack under examination, reimplementing such functions as aliases
# introduces worse issues (e.g., inability to pass optional exception messages).

#:func.doc <<'/---'
#void :caller.die_unless(
#    string error_message =
#        "No runnable called the current runnable (e.g., due to being called directly from the command line).")
#
#Throw an exception with the passed message unless this function's caller was
#itself called by a runnable. See :caller.is() for further details.
#/---
#function :caller.die_unless() {
#    # Validate sanity.
#    die_unless_args_0_to_1 'Expected optional error message.'
#
#    # Test such name. To avoid modifying the call stack, inline such
#    # implementation. See :caller.is() for further details.
#    (( ${#funcstack} >= 3 )) or
#        :die "${2:-No runnable called the current runnable (e.g., due to being called directly from the command line).}"
#}
#
#:func.doc <<'/---'
#void :caller.die_unless_equals(
#    string caller_name,
#    string error_message = "\"${caller_name}\" not this runnable\'s caller.")
#
#Throw an exception with the passed message unless the name of the caller's
#caller is the passed name. See :caller.is_equals() for further details.
#/---
#function :caller.die_unless_equals() {
#    # Validate sanity.
#    die_unless_args_1_to_2\
#        'Expected one caller name and optional error message.'
#    string caller_name="${1}"
#
#    # Test such name. To avoid modifying the call stack, inline such
#    # implementation. See :caller.is_equals() for further details.
#    (( ${#funcstack} >= 3 )) and is "${funcstack[3]}" == "${caller_name}" si or
#        :die "${2:-Caller \"${caller_name}\" not \"${caller_name}\" not this runnable\'s caller.}"
#}
#
## ....................{ TESTERS                            }....................
#:func.doc <<'/---'
#[status: boolean] :caller.is()
#
#Return success if this function's caller was itself called by a runnable. Hence,
#return success if neither this function or this function's caller was called
#directly from the command line: e.g.,
#
#.:caller.is()
#==========================================
#[source]
#------------------------------------------
#>>> string on_defeat_in_detail=\
#...    "It's our differences. That's all the media and the politicians are ever
#...     talking about – the things that separate us, things that make us
#...     different from one another. That's the way the ruling class operates in
#...     any society. They try to divide the rest of the people. They keep the
#...     lower and the middle classes fighting with each other so that they, the
#...     rich, can run off with all the fucking money. Fairly simple thing.
#...     Happens to work. You know? Anything different – that's what they're
#...     gonna talk about – race, religion, ethnic and national background, jobs,
#...     income, education, social status, sexuality, anything they can do to
#...     keep us fighting with each other, so that they can keep going to the
#...     bank. You know how I define the economic and social classes in this
#...     country? The upper class keeps all of the money, pays none of the taxes.
#...     The middle class pays all of the taxes, does all of the work. The poor
#...     are there just to scare the shit out of the middle class. Keep 'em
#...     showing up at those jobs."
#>>> :caller.is or get_string_line "${on_defeat_in_detail}" -1
#showing up at those jobs.
#------------------------------------------
#==========================================
#/---
#function :caller.is() {
#    # ${funcstack[1]} is always ":caller.is", ${funcstack[2]} the name of the
#    # function or script calling this function, and ${funcstack[3]} that of the
#    # function or script calling the function or script calling this function
#    # (i.e., the desired caller), if such function or script exists. Test for
#    # the latter. Avoid calling get_list_size(), which increments the size of
#    # such stack.
#    die_if_args
#    (( ${#funcstack} >= 3 ))
#}
#
#:func.doc <<'/---'
#[status: boolean] :caller.is_equals(string caller_name)
#
#Return success if the name of the *caller's caller* (i.e., the function or
#script calling the function or script calling this function) is equal to the
#passed name.
#/---
#function :caller.is_equals() {
#    # Validate sanity.
#    die_unless_arg 'Expected one caller name.'
#    string caller_name="${1}"
#    :caller.die_unless
#
#    # Test such name. Avoid calling :caller.is(), :caller.get(), or
#    # is_string_equals().
#    (( ${#funcstack} >= 3 )) and is "${funcstack[3]}" == "${caller_name}" si
#}
#
## ....................{ GETTERS                            }....................
##FUXME: Rename to simply :caller.get().
#:func.doc <<'/---'
#[status: boolean] :caller.get()
#
#Get the name of the *caller's caller* (i.e., the function or script calling the
#function or script calling this function). If no such function or script exists,
#this function was called directly from the command line or by a function or
#script called directly from the command line, in which case an exception is
#thrown.
#
#Interestingly, this function returns the correct name when called from a
#subshell capturing output by process substitution: e.g.,
#
#.:caller.get()
#==========================================
#[source]
#------------------------------------------
#>>> string on_going_away=\
#...    "The planet isn't going anywhere. We are. We're going away. Pack your
#...     shit, folks. We're going away and we won't leave much of a trace,
#...     either. Thank God for that. Maybe a little styrofoam. The planet'll be
#...     here and we'll be long gone. Just another failed mutation. Just another
#...     closed-end biological mistake, an evolutionary cul-de-sac. The planet'll
#...     shake us off like a bad case of fleas, a surface nuisance."
#>>> function "${on_going_away}" () { on_the_big_electron }
#>>> function on_the_big_electron() { get_string_line "$(:caller.get)" 1 }
#>>> "${on_going_away}"
#The planet isn't going anywhere. We are. We're going away. Pack your
#------------------------------------------
#==========================================
#/---
#function :caller.get() {
#    # Validate sanity. Avoid calling :caller.die_unless(), for obvious reasons.
#    die_if_args
#    (( ${#funcstack} >= 3 )) or
#        :die 'no caller (due to being called directly from the command line)'
#
#    # Get such name.
#    :str.return "${funcstack[3]}"
#}

#FUXME: This is insanity. While such runnables *CAN* be implemented as
#functions, that is cleary the wrong approach. Reimplement as aliases and
#briefly discuss why.
#if the current call stack contains at least one function or
#script, excluding the current call to this function and this function's caller.
#This function returns success unless called directly from the command line _or_
#by a function or script called directly from the command line: e.g.,

#>>> function timbered() { choir }
#>>> function choir() { :stdout.echo "caller: $(:caller.get)()" }
#>>> timbered
#caller: timbered()

#Report success if the *caller's name* (i.e., the function name for functions,
#absolute or relative filename for scripts, and "(eval)" for evaluations) is the
#passed string. See :caller.get() for further details on such names.

#Interestingly, this alias returns the correct name when expanded from a subshell
#capturing output by process substitution: e.g.,

#If no such function or script exists,
#this function was called directly from the command line or by a function or
#script called directly from the command line, in which case an exception is
#thrown.
#
#Get the name of the *caller's caller* (i.e., the function or script calling the
#function or script calling this function). If no such function or script exists,
#this function was called directly from the command line or by a function or
#script called directly from the command line, in which case an exception is
#thrown.

#caller of the current runnable was itself called by
#another runnable (i.e., if this function's caller was called directly from the command line: e.g.,
    # Avoid calling :caller.die_unless(), for obvious reasons.
#   (( ${#funcstack} >= 3 )) or
#       :die 'no caller (due to being called directly from the command line)'

#function :caller.is() {
#    # ${funcstack[1]} is always ":caller.is", ${funcstack[2]} the name of the
#    # function or script calling this function, and ${funcstack[3]} that of the
#    # function or script calling the function or script calling this function
#    # (i.e., the desired caller), if such function or script exists. Test for
#    # the latter. Avoid calling get_list_size(), which increments the size of
#    # such stack.
#    die_if_args
#    (( ${#funcstack} >= 3 ))
#}

#if the current call stack contains at least one function or
#script, excluding the current call to this function and this function's caller.
#This function returns success unless called directly from the command line _or_
#by a function or script called directly from the command line: e.g.,

#>>> function timbered() { choir }
#>>> function choir() { :stdout.echo "caller: $(:caller.get)()" }
#>>> timbered
#caller: timbered()
