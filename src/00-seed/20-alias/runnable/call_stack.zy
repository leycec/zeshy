#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle call stack aliases. The call stack is the list of all *runnables* (i.e.,
called `zsh` functions, sourced `zsh` scripts, and evaluated eval() statements)
on the call path to the current runnable from the initial runnable originating
such runnable -- typically, the runnable called directly by the current user
from the CLI.
/---

# Avoid calling functions in alias expansions to avoid polluting the call stack.

# ....................{ EXCEPTIONS                         }....................
:alias_command ':void :call_stack.die_unless_index(:int index)'\
    '{
        # Validate sanity. See die_unless_list_index() for further details.
        :str index__ducsi=$(:stdin)
        :call_stack.is_index "${index__ducsi}" :or {
            :int size__ducsi=$(:call_stack.get_size)
            :die "Call stack index \"${index__ducsi}\" invalid (i.e., not in [-${size__ducsi}, ${size__ducsi}])."
        }
    } <<<' <<'/---'
Throw an exception with a stock message unless the passed integer is a valid
index of the current call stack.

See :call_stack.is_index().
/---

# ....................{ TESTERS                            }....................
# See is_list_contains() for further details.
:alias_command '[status=:bool] call_stack.contains(:str runnable_name)'\
    '(( ${funcstack[(ie)${1}]} <= ${#funcstack} ))' <<'/---'
Report success if the current call stack contains the passed *runnable* (e.g.,
`zsh` function or script).

Equivalently, report success if such runnable is either the current runnable or
transitively called such runnable.
/---

# ....................{ TESTERS ~ index                    }....................
# See is_list_index() for further details.
:alias_command '[status=:bool] :call_stack.is_index(:int index)'\
    '{
        :str index__icsi=$(:stdin)
        :int.die_unless "${index__icsi}"
        (( (1 <= index__icsi && index__icsi <= ${#funcstack}) ||
           (-${#funcstack} <= index__icsi && index__icsi <= -1) ))
    } <<<' <<'/---'
Report success if the passed integer is a valid 1-based positive or negative
index into the current call stack.
/---

:alias_command '[status=:bool] :call_stack.is_index_script(:int index)'\
    '{
        # See die_unless_list_index() for further details.
        :str index__icsis=$(:stdin)
        :call_stack.die_unless_index "${index__icsis}"
    #   print "function: ${1}\nfuncstack: ${funcstack[*]}"

        is_call_stack_item_script "${funcsourcetrace[${index__icsis}]}"
    } <<<' <<'/---'
Report success if the runnable at the passed 1-based positive or index index
into the current call stack was a sourced `zsh` script (i.e., was _not_ a called
`zsh` function or evaluated eval() statement).

== Caveats ==

*While reliable, this alias is _not_ infallible.* Unfortunately, `zsh` currently
offers no general-purpose means of differentiating files from non-files in the
call stack. The reasonably reliable heuristic this alias implements is as follows:
/---

# ....................{ GETTERS                            }....................
#FIXME: Refactor into a setter.
:alias_command ':int :call_stack.get_size()'\
    ':stdout.echo ${#funcstack}' <<'/---'
Get the size of the current call stack.
/---

# --------------------( WASTELANDS                         )--------------------
#       die_unless_list_index funcsourcetrace "${index__icsis}"
        #
        # Unfortunately, there 
        #
        # If such runnable was a sourced file, the corresponding
        # element of ${funcsourcetrace} is suffixed by `:0`; else, such element is
        # suffixed by `:${line_number}`, where `${line_number}` is a strictly
        # positive integer. (Witchery -- and not the gentle sort, either!)
#        is "${funcsourcetrace[${index__icsis}]}" == *":0" si

#FUXME: Is this *REALLY* needed? It's fairly trivial and rarely ever called. I'm
#inclined to excise this everywhere, honestly.
# Although the call stack should *ALWAYS* be nonempty, provide a sane fallback.
#:alias_command 'string get_call_stack_root()'\
#    ':stdout.echo "${funcstack[-1]-zeshy}"' <<'/---'
#Get the current *call stack root* (i.e., last runnable on such stack and hence
#originating all calls on such stack). The format for such string depends on the
#type of such runnable. Specifically, if such runnable was a:
#
#* Function, this is the name of such function.
#* Script, this is the path (either absolute or relative and hence _not_
#  necessarily canonical) that such script was originally run as.
#/---
#}

#function call_stack.contains() {
#    # Validate sanity.
#    die_unless_arg 'Expected one runnable name.'
##   print "function: ${1}\nfuncstack: ${funcstack[*]}"
#
#    # Test such stack. Avoid calling additional functions (e.g.,
#    # is_list_contains(), get_list_size()) to avoid polluting the call stack
#    # being tested. See is_list_contains() for further details.
#}
#
#:alias_command <<'/---'
#[status: boolean] :call_stack.is_index_script(integer index)
#
#Report success if the runnable corresponding to the passed 1-based index of the
#current call stack was a sourced `zeshy` script (rather than, say, a called
#`zeshy` function or evaluated eval() statement).
#/---
#function :call_stack.is_index_script() {
#    # Validate sanity.
#    die_unless_arg 'Expected one index.'
#    string index="${1}"
#    die_unless_list_index funcsourcetrace "${index}"
##   print "function: ${1}\nfuncstack: ${funcstack[*]}"
#
#    # Test such stack. If such runnable was a sourced file, the corresponding
#    # element of ${funcsourcetrace} is suffixed by `:0`; else, such element is
#    # suffixed by `:${line_number}`, where `${line_number}` is a strictly
#    # positive integer. (Witchery -- and not the gentle sort, either!)
#    is "${funcsourcetrace[${index}]}" == *':0' si
#}
#
## ....................{ GETTERS                            }....................
#:alias_command <<'/---'
#integer :call_stack.get_size()
#
#Get the size of the current call stack, excluding the call to this function.
#/---
#function :call_stack.get_size() {
#    # Validate sanity.
#    die_if_args
#
#    # Get such size. Avoid calling additional functions (e.g.,
#    # get_list_size()) to avoid polluting the call stack being examined.
#    :stdout.echo $(( ${#funcstack} - 1 ))
#}

#FUXME: Convert to aliases. As functions, the implicit risk of such calls
#modifying the call stack are unreasonably unavoidable. For example, as
#functions, ":call_stack.is_index_script 1" *ALWAYS* reports false (since
#:call_stack.is_index_script() is of course a function), which is silly.

#   :List.die_unless funcstack
#   :List.die_unless funcstack

# ....................{ GETTERS ~ root                     }....................
#:alias_command <<'/---'
#string get_call_stack_root()
#
#Get the current *call stack root* (i.e., last runnable on such stack and hence
#originating all calls on such stack). The format for such string depends on the
#type of such runnable. Specifically, if such runnable was a:
#
#* Function, this is the name of such function.
#* Script, this is the path (either absolute or relative and hence _not_
#  necessarily canonical) that such script was originally run as.
#/---
#function get_call_stack_root() {
#    # Validate sanity.
#    die_if_args
#    :List.die_unless funcstack
#
#    # Get such root. Although the call stack should *ALWAYS* be nonempty,
#    # provide a sane fallback default.
#    :stdout.echo "${funcstack[-1]-zeshy}"
#}

    # Get such basename. To reduce dependency on external functions, inline such
    # implementation. See get_path_basename() for further details.
#   :stdout.echo 

    #FUXME: Insufficient. Function names can contain path separators, but this
    #function should only reduce a runnable name to its basename if such
    #runnable signifies a script rather than function. To discriminate between
    #the two, see output_call_stack_with_lists() -- necessarily implementing
    #similar logic.

#FUXME: Rename to is_call_stack_runnable().
    # If the call stack is nonempty, return the first runnable on such stack;
    # else, return "zeshy". (The latter should *NEVER* trigger, but is provided
    # as a failsafe backup.)

    #FUXME: Poor implementation. 
#   command basename -- "$(get_call_stack_root)"
#FUXME: Rename to is_call_stack_runnable().
