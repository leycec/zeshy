#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *`zsh` context* (i.e., lowercase strings describing the current shell
execution environment) aliases.
/---

# ....................{ GLOBALS                            }....................
:str.global ZY__CONTEXT_ROOT='toplevel' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables run under
*root context* (i.e., run either by the current user directly at an interactive
command line _or_ at the top-level of a non-interactive shell script).

== See Also ==

* :context.is_root().
/---

# ....................{ GLOBALS ~ builtin                  }....................
:str.global ZY__CONTEXT_EVALUATION='eval' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables are
*evaluated* (i.e., run by a call to builtin eval()).
/---

:str.global ZY__CONTEXT_SCHEDULED='sched' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables are
*scheduled* (i.e., run by a prior call to builtin sched()).
/---

:str.global ZY__CONTEXT_TRAP='trap' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables are *traps*
(i.e., triggered by a signal ``trapped'' by a prior call to builtin trap()).

This excludes trap functions, which `zsh` classifies as functions and hence
confers a context of ${ZY__CONTEXT_FUNCTION}.
/---

# ....................{ GLOBALS ~ command substitution     }....................
:str.global ZY__CONTEXT_COMMAND_SUBSTITUTION='cmdsubst' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables are *command
substitutions* (i.e., `\``- _or_ `$(`- and `$)`-delimited commands substituted
with the output of such commands).
/---

:str.global ZY__CONTEXT_ROOT_COMMAND_SUBSTITUTION="${ZY__CONTEXT_ROOT}:${ZY__CONTEXT_COMMAND_SUBSTITUTION}" <<'/---'
Prefix of ${ZSH_EVAL_CONTEXT} strings whose corresponding runnables are command
substitutions called under root context.

== See Also ==

* ${ZY__CONTEXT_ROOT}.
/---

# ....................{ GLOBALS ~ function                 }....................
:str.global ZY__CONTEXT_FUNCTION='shfunc' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables are `zsh`
*functions*, including *trap functions* (i.e., traps implemented as functions
rather than through a call to builtin trap()).
/---

:str.global ZY__CONTEXT_FUNCTION_AUTOLOAD='loadautofunc' <<'/---'
Value of ${zsh_eval_context} elements whose corresponding runnables are the
*autoloading* of `zsh` functions from digest files or function scripts in the
current user's ${fpath}.

This value follows rather than replaces ${ZY__CONTEXT_FUNCTION} in
${zsh_eval_context} (e.g., autoloaded functions called directly from the CLI
have a scalar context of
`${ZY__CONTEXT_ROOT}:${ZY__CONTEXT_FUNCTION}:${ZY__CONTEXT_FUNCTION_AUTOLOAD}`
rather than `${ZY__CONTEXT_ROOT}:${ZY__CONTEXT_FUNCTION_AUTOLOAD}`).
/---

() {
    # Glob matching function contexts, including subsequent autoloading.
    # Localizing this glob permits use of proper single quotations below. This
    # is *NOT* merely an aesthetic decision: since zsh treats adjacent single
    # quotes as a single single quote, attempting to globalize this glob as
    # ${ZY__CONTEXT_FUNCTION_GLOB} and expand this global into the definitions
    # of globals defined below results in unmatchable glob expressions.
    :str function_glob_unprefixed="${ZY__CONTEXT_FUNCTION}'(|':${ZY__CONTEXT_FUNCTION_AUTOLOAD}')"

    :str.global ZY__CONTEXT_FUNCTION_GLOB="'${function_glob_unprefixed}" <<'/---'
Glob expression matching ${zsh_eval_context} elements whose corresponding
runnables are `zsh` functions. Since `zsh` assigns autoloaded and non-autoloaded
functions a different context, simple string literals do _not_ suffice to match
${zsh_eval_context} elements whose runnables are `zsh` functions. This glob thus
matches both autoloaded and non-autoloaded functions, eliminating such largely
irrelevant low-level distinctions.

== See Also ==

* ${ZY__CONTEXT_FUNCTION}.
* ${ZY__CONTEXT_FUNCTION_AUTOLOAD}.
/---

    :str.global ZY__CONTEXT_CURRENT_FUNCTION_GLOB="(|*':')'${function_glob_unprefixed}" <<'/---'
Glob expression matching ${ZSH_EVAL_CONTEXT} strings suffixed by substrings
whose corresponding runnables are `zsh` functions, indicating the current
context to be a `zsh` function.

== See Also ==

* ${ZY__CONTEXT_FUNCTION_GLOB}.
/---

    :str.global ZY__CONTEXT_ROOT_FUNCTION_GLOB="'${ZY__CONTEXT_ROOT}:${function_glob_unprefixed}" <<'/---'
Glob expression matching ${ZSH_EVAL_CONTEXT} strings whose corresponding
runnables are `zsh` functions called under root context.

== See Also ==

* ${ZY__CONTEXT_ROOT}.
* ${ZY__CONTEXT_FUNCTION_GLOB}.
/---

    :str.global ZY__CONTEXT_ROOT_FUNCTION_FUNCTION_GLOB="${ZY__CONTEXT_ROOT_FUNCTION_GLOB}':${function_glob_unprefixed}" <<'/---'
Glob expression matching ${ZSH_EVAL_CONTEXT} strings whose corresponding
runnables are `zsh` functions called by other `zsh` functions themselves called
under root context.

== See Also ==

* ${ZY__CONTEXT_ROOT}.
* ${ZY__CONTEXT_FUNCTION_GLOB}.
/---
}

# ....................{ TESTERS                            }....................
#FIXME: Add examples.
:alias_command '[status=:bool] :context.is_in_func()'\
    ':is ${ZSH_EVAL_CONTEXT} == '${ZY__CONTEXT_CURRENT_FUNCTION_GLOB}' :si' <<'/---'
Report success if the current shell context is a function (i.e., if this alias
was expanded directly within a function).

This is largely useful in other aliases, to determine whether or not such alias
is being expanded from within a function or some other shell construct.
/---

:alias_command '[status=:bool] :context.is_root()'\
    ':is ${ZSH_EVAL_CONTEXT} == "'${ZY__CONTEXT_ROOT}'" :si' <<'/---'
Report success if the current shell context is the *root context* (i.e., if this
alias was expanded either by the current user directly at an interactive command
line _or_ at the top-level of a non-interactive shell script).

== Examples ==

.:context.is_root()
==========================================
[source]
------------------------------------------
>>> :str on_demagoguery=\
...    "One Folk, One Realm, One Leader. Union with the unity of an insect
...     swarm. Knowledgeless understanding of nonsense and diabolism. And then
...     the newsreel camera had cut back to the serried ranks, the swastikas,
...     the brass bands, the yelling hypnotist on the rostrum. And here once
...     again, in the glare of his inner light, was the brown insectlike column,
...     marching endlessly to the tunes of this rococo horror-music. Onward Nazi
...     soldiers, onward Christian soldiers, onward Marxists and Muslims, onward
...     every chosen People, every Crusader and Holy War-maker. Onward into
...     misery, into all wickedness, into death!"
>>> :context.is_root :and get_string_line "${on_demagoguery}" 1
One Folk, One Realm, One Leader. Union with the unity of an insect
------------------------------------------
==========================================
/---

# ....................{ TESTERS ~ cli                      }....................
:alias_command '[status=:bool] :context.is_cli()'\
    ':shell.is_interactive :and
        :is ${ZSH_EVAL_CONTEXT} == "'${ZY__CONTEXT_ROOT}'" :si' <<'/---'
Report success if the current shell context is the *CLI* (i.e., this alias was
interactively expanded by the current user directly from the command line).

== Examples ==

.:context.is_cli()
==========================================
[source]
------------------------------------------
>>> :str on_golden_ages=\
...    "We may not appreciate the fact; but a fact nevertheless it remains: we
...     are living in a Golden Age, the most gilded Golden Age of human history
...     — not only of past history, but of future history. For, as Sir Charles
...     Darwin and many others before him have pointed out, we are living like
...     drunken sailors, like the irresponsible heirs of a millionaire uncle. At
...     an ever accelerating rate we are now squandering the capital of metallic
...     ores and fossil fuels accumulated in the earth’s crust during hundreds
...     of millions of years. How long can this spending spree go on? Estimates
...     vary. But all are agreed that within a few centuries or at most a few
...     millennia, Man will have run through his capital and will be compelled
...     to live, for the remaining nine thousand nine hundred and seventy or
...     eighty centuries of his career as Homo sapiens, strictly on income."
>>> :context.is_cli :and get_string_line "${on_golden_ages}" -1
eighty centuries of his career as Homo sapiens, strictly on income.
------------------------------------------
==========================================
/---

:alias_command '[status=:bool] :context.is_cli_command_substitution()'\
    ':shell.is_interactive :and
        :is ${ZSH_EVAL_CONTEXT} == "'${ZY__CONTEXT_ROOT_COMMAND_SUBSTITUTION}'" :si' <<'/---'
Report success if the current shell context is a *command substitution* (i.e.,
`\``- _or_ `$(`- and `$)`-delimited commands substituted with the output of such
commands) substituted directly from the CLI. See :context.is_cli() for further
details.

== Examples ==

.:context.is_cli_command_substitution()
==========================================
[source]
------------------------------------------
>>> :str on_ministry=\
...    "The Ministry of Truth, which concerned itself with news, entertainment,
...     education and the fine arts. The Ministry of Peace, which concerned
...     itself with war. The Ministry of Love, which maintained law and order.
...     And the Ministry of Plenty, which was responsible for economic affairs."
>>> $(if { :context.is_cli_command_substitution }
...       :stdout.echo 'get_string_line "${on_ministry}" -1'
...   } else {
...       :stdout.echo 'get_string_line "${on_ministry}" 1'
...   })
And the Ministry of Plenty, which was responsible for economic affairs.
------------------------------------------
==========================================
/---

:alias_command '[status=:bool] :context.is_cli_func()'\
    ':shell.is_interactive :and {
        if (( ${ZY__CONTEXT_IS_IGNORING_FUNCTION_CALL-0} )) {
            :is ${ZSH_EVAL_CONTEXT} == '${ZY__CONTEXT_ROOT_FUNCTION_FUNCTION_GLOB}' :si
        } else {
            :is ${ZSH_EVAL_CONTEXT} == '${ZY__CONTEXT_ROOT_FUNCTION_GLOB}' :si
        }
    }' <<'/---'
Report success if the current shell context is a `zsh` function called directly
from the CLI.

For generality, this includes calls to *autoloaded functions* (i.e., previously
undefined functions ``autoloaded'' by such calls from digest files or function
scripts in the current user's ${fpath}).

== Recognized Variables ==

This alias also internally references the following variables, which callers may
optionally set (ideally locally) to alter alias behavior:

* ${ZY__CONTEXT_IS_IGNORING_FUNCTION_CALL}, a boolean variable. If enabled,
  this alias instead returns success if the current shell context is a `zsh`
  function called by another `zsh` function called directly from the CLI. For
  simplicity, consider calling :context.ignore_func_current() to locally enable
  such boolean. See grep_path_caseless_with_options() for example usage.

== See Also ==

* :context.is_cli().

== Examples ==

.:context.is_cli_func()
==========================================
[source]
------------------------------------------
>>> :str on_animality=\
...    "\"Animals don't behave like men,\" he said. \"If they have to fight,
...     they fight; and if they have to kill they kill. But they don't sit down
...     and set their wits to work to devise ways of spoiling other creatures'
...     lives and hurting them. They have dignity and animality.\""
>>> function on_dignity() {
...     :context.is_cli_func :and get_string_line "${on_animality}" 1
... }
>>> on_dignity
"Animals don't behave like men," he said. "If they have to fight,
------------------------------------------
==========================================
/---

# ....................{ IGNORERS                           }....................
:alias_command ':void :context.ignore_func_current()'\
    ':bool ZY__CONTEXT_IS_IGNORING_FUNCTION_CALL='${ZY_BOOLEAN_TRUE} <<'/---'
Locally enable the ${ZY__CONTEXT_IS_IGNORING_FUNCTION_CALL} boolean, instructing
:context.is_cli_func() to ignore the current function call and hence report
success if the current shell context is a `zsh` function called by another `zsh`
function called directly from the CLI.

This alias should _only_ be expanded from within function bodies.
/---

# --------------------( WASTELANDS                         )--------------------
    # Duplicate the prior definition to provide proper single quotations. This is
    # *NOT* merely an aesthetic decision: since zsh treats adjacent single quotes as
    # a single single quote, attempting to interpolate
    # ${ZY__CONTEXT_FUNCTION_GLOB} directly into this definition results in a glob
    # expression that never matches.
    # See above.
#Instead, a
#glob expression 
#`zsh` functions in such elements.
#
#such low-level
#distinctions are generally unhelpful in practice
#
#While `zsh` declares autoloaded and
#non-autoloaded functions to have a different context, such low-level
#distinctions are generally unhelpful in practice. This glob matches both
#autoloaded and non-autoloaded functions, obviating
#these distinctions. See ${ZY__CONTEXT_FUNCTION} and
#${ZY__CONTEXT_FUNCTION_AUTOLOAD} for further details.

#           print "zsh context: ${ZSH_EVAL_CONTEXT}"
# ....................{ GLOBALS ~ root                     }....................
# Define root context globals *AFTER* all other context globals, as the former
# depends on the latter.
#Since this excludes
#autoloaded `zsh` functions, consider expanding
#${ZY__CONTEXT_ROOT_FUNCTION_GLOB} instead. 

# See such global for further details.

#String assigned to ${zsh_eval_context} elements whose corresponding runnables
#run under *root context*. See :context.is_root() for further details.
#String assigned to ${zsh_eval_context} elements whose corresponding runnables
#are `zsh` functions.
#Value of ${zsh_eval_context} elements signifying `zsh` functions.

#>>> :context.is_root and :stdout.echo\
#...     "Facts do not cease to exist because they are ignored."
#Facts do not cease to exist because they are ignored.
#(i.e., either directly by the current user from an
#interactive command line or by top-level of a non-interactive shell script).
