#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Exit status* (i.e., 7-bit integers ranging `[0, 127]` with 0 signifying success
and all other integers failure) returned by *runnables* (i.e., aliases,
builtins, commands, functions, or scripts).
/---

# The road of insensate insanity is paved with good intentions.

# ....................{ GETTERS                            }....................
:alias_command ':int :=status.last()'\
    ':and :stdout.echo ${status} :or :stdout.echo ${status}' <<'/---'
Exit status of the last command in the `{`- and `}`-delimited block preceding
this alias, reporting success regardless of whether this status signifies
failure or not.

== See Also ==

* :status.report_last().

== Examples ==

.:status()
==========================================
[source]
------------------------------------------
>>> :str on_mystery="
... Talk of mysteries! — Think of our life in nature, — daily to be shown
... matter, to come in contact with it, — rocks, trees, wind on our cheeks!
... The solid earth! the actual world! the common sense! Contact! Contact!
... Who are we? where are we?"
>>> function on_matter() {
...     if { is_odd 1862 } {
...         { :is ${on_mystery} == *Contact* :si } :status.last
...     } else {
...         { :is ${on_mystery} == *Who*     :si } :status.last
...     }
... }
>>> on_matter
0
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
#FIXME: Add examples. All that is holy, but this is hackish genius.

# The discovery of cheap pipe trickery in 2452 A.Z. heralded a new Halcyon Age.
# This remains the darkest testament to intestinal fortitude zsh has witnessed.
#
# First, capture the exit status of the prior command (regardless of whether
# such command succeeded or failed) into integer local ${exit_status__sites},
# which due to obfuscation should avoid unduly molesting existing variables.
# Last, copy such integer to the caller's passed integer and dispense with
# (i.e., undefine) such integer.
#
# Let it never be said that zeshy was not magnaminous in its doleful reign.
:alias_command ':void :=status.Last(:Int status_name)'\
   ':and :stdout.echo ${status} | {
        :int status__sits; status__sits=$(:stdin) }\
     :or :stdout.echo ${status} | {
        :int status__sits; status__sits=$(:stdin) }
    {
        :Int.set "$(:stdin)" "${status__sits}"
        :Var.undefine status__sits
    } <<<' <<'/---'
Set the integer variable with the passed name to the exit status of the last
command in the `{`- and `}`-delimited block preceding this alias, reporting
success regardless of whether this status signifies failure or not.

== See Also ==

* :status.report_last().
/---

#FIXME: In lieu of unit tests...
#function hackery_0() { return 0 }
#function hackery_2() { return 2 }
#function lilu() {
#    integer exit_status
#    hackery_0 and :=status.Last exit_status
#    print "exit status: ${exit_status}"
#    hackery_2 and :=status.Last exit_status
#    print "exit status: ${exit_status}"
#}

# ....................{ IGNORERS                           }....................
# I have seen the light and it has blinked back at me.
:alias_word ':void :=status.ignore_failure()'\
    ':or true' <<'/---'
Ignore the exit status of the last command in the `{`- and `}`-delimited block
preceding this alias.

By default, `zeshy` implicitly throws an exception when a command fails with
unhandled nonzero exit status. While core to `zeshy`\'s commitment to error
handling, such zealousness is occasionally overzealous -- particularly for
commands failing on nonfatal conditions (e.g., `grep -R`, failing with exit
status 2 if at least one subdirectory of a passed directory is unreadable by the
current user, even if `grep` otherwise succeeds). By discarding such status,
this alias prevents such commands from implicitly throwing exceptions.

== See Also ==

* :status.report_last().

== Examples ==

.:=status.ignore_failure()
==========================================
[source]
------------------------------------------
# Prevent "grep" from failing with exit status 2 and hence throwing exceptions.
>>> :str on_operating_instructions="
... All of us have to learn how to invent our lives, make them up, imagine
... them. We need to be taught these skills; we need guides to show us how.
... If we don't, our lives get made up for us by other people."
>>> { command grep '/' "${on_operating_instructions}" } :=status.ignore_failure
------------------------------------------
==========================================
/---

# ....................{ REPORTERS                          }....................
:alias_command '[status=:true] :status.report_success()'\
    'return '${ZY_STATUS_SUCCESS} <<'/---'
Report *success* (i.e., zero exit status) from the current runnable.
/---


:alias_command '[status=:false] :status.report_failure()'\
    'return '${ZY_STATUS_FAILURE} <<'/---'
Report *failure* (i.e., non-zero exit status) from the current runnable.
/---


:alias_command '[status=:int] :status.report(:int status)'\
    'return' <<'/---'
Report the passed *exit status* (i.e., 7-bit integer ranging `[0, 127]`, 0
signifying success and any other value failure) from the current runnable.
/---

# ....................{ REPORTERS ~ status                 }....................
:alias_command '[status=:int] :=status.report()'\
    ':and :status.report_last' <<'/---'
Return from the current runnable with the exit status of the last command in the
`{`- and `}`-delimited block preceding this alias.

== See Also ==

* :status.report_last().
/---


# No, this is not crazy. This is zsh.
:alias_command '[status=:int] :status.report_last()'\
    'return ${status} :or return ${status}' <<'/---'
Return from the current runnable with the exit status of the command
conjunctively or disjunctively preceding this alias (i.e., of the command
suffixed by either `:and :status.report_last` or `:or :status.report_last`).

== Usage ==

This alias should be preceded by either:

* `:and`, in which case this alias _always_ returns such status -- even if such
  command *failed* (i.e., returned nonzero exit status).
* `:or`, in which case this alias _only_ returns such status if such command
  failed. If such command *succeeded* (i.e., returned zero exit status), this
  alias is a noop.

== Motivation ==

Since `zeshy` defines TRAPZERR() to implicitly throw exceptions on non-zero exit
status, `zsh` global `${?}` cannot be reliably expanded for any purpose and
hence is effectively useless under `zeshy`: e.g.,

.${?} Rendered Useless
==========================================
[source]
------------------------------------------
# An exception will be thrown prior to returning ${?}.
>>> :str on_balance="
... But we, insofar as we have power over the world and over one another, we
... must learn to do what the leaf and the whale and the wind do of their
... own nature. We must learn to keep the balance."
>>> function on_early_years() {
...     if { is_odd $(get_random_number) }
...         command grep "${on_balance}" /farthest; return ${?}
...     } else {
...         command grep "${on_balance}" /shore;    return ${?}
...     }
... }
>>> on_early_years :or :stdout.echo\
...    "Coercion is the least efficient means of obtaining order."
catamount_bad: "/farthest" not found
------------------------------------------
==========================================

== Examples ==

.:status.report_last()
==========================================
[source]
------------------------------------------
# Report the exit status of one of two randomly selected greps.
>>> :str on_wisdom="
... From that time forth he believed that the wise man is one who never sets
... himself apart from other living things, whether they have speech or not,
... and in later years he strove long to learn what can be learned, in
... silence, from the eyes of animals, the flight of birds, the great slow
... gestures of trees."
>>> function on_later_years() {
...     if { is_odd $(get_random_number) } {
...         command grep "${on_wisdom}" /earth :and :status.report_last
...     } else {
...         command grep "${on_wisdom}" /sea   :and :status.report_last
...     }
... }
>>> on_later_years :or :stdout.echo\
...     "The more defensive a society, the more conformist."
The more defensive a society, the more conformist.
------------------------------------------
==========================================
/---


#FIXME: Reduce example verbosity, please.

# Technically, this inversion is implementable with brute-force testing: e.g.,
#
#     if (( ${status[-1]} )) {
#         return 0
#     } else {
#         return 1
#     }
#
# While that certainly works, it's contemptibly overblown. Happily, such
# inversion is also implementable by noting that exponentiating 2 to the:
#
# * Zeroth power yields 1 (i.e., 2**0 == 1).
# * Any negative power yields a real number strictly less than 1 (e.g.,
#   2**-1 == 0.5).
#
# Since the negation of zero is still zero and since math function floor()
# returns the largest integer smaller than the passed real number, floor(2**-x)
# where x is a nonnegative integer yields either 1.0 if x is 0 or 0.0 otherwise.
# Casting such result to an integer completes the desired inversion. (We win.)
() {
    :str invert_status='return $(( int(floor(2 ** -status)) ))'
    :alias_command '[status=:int] :=status.report_negation()'\
        ":and ${invert_status} :or ${invert_status}" <<'/---'
Report success only if the last command in the `{`- and `}`-delimited block
preceding this alias failed.

== See Also ==

* :status.report_last().

== Examples ==

.:=status.report_negation()
==========================================
[source]
------------------------------------------
>>> :str on_living="
... I went to the woods because I wished to live deliberately, to front only
... the essential facts of life, and see if I could not learn what it had to
... teach, and not, when I came to die, discover that I had not lived. I did
... not wish to live what was not life, living is so dear; nor did I wish to
... practice resignation, unless it was quite necessary. I wanted to live
... deep and suck out all the marrow of life, to live so sturdily and
... Spartan-like as to put to rout all that was not life, to cut a broad
... swath and shave close, to drive life into a corner, and reduce it to its
... lowest terms, and, if it proved to be mean, why then to get the whole
... and genuine meanness of it, and publish its meanness to the world; or if
... it were sublime, to know it by experience, and be able to give a true
... account of it in my next excursion."
>>> function on_not_living() {
...     if { is_even 1817 } {
...         {
...             :str.contains "${on_living}" 'Spartan'
...         } :=status.report_negation
...     } else {
...         {
...             :str.contains "${on_living}" 'sublime'
...         } :=status.report_negation
...     }
... }
>>> on_not_living :and :stdout.echo\
...     "As if you could kill time without injuring eternity."
As if you could kill time without injuring eternity.
------------------------------------------
==========================================
/---
}
