#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *shell option* (i.e., shell properties set and unset by calling such
builtins as set(), setopt(), and unseptopt()) aliases.
/---

# ....................{ [EN|DIS]ABLERS                     }....................
# To allow shell options specific to the current context to be enabled and
# disabled (e.g., "local_options", "local_patterns", "local_traps"), the
# following callables *MUST* be defined as aliases rather than functions.
# Hypothetically speaking, if these callables were defined as functions, the
# following less efficient implementation would probably suffice:
#
#    function :option.enable() {
#        (( # >= 1 )) || :die 'Expected one or more option names.'
#        :str option_name
#        for  option_name ("${@}") {
#            :die_unless_option "${option_name}"
#            options[${option_name}]='on'
#        }
#    }

#FIXME: Add examples.
:alias_command ':void :option.enable(+:str option_names)'\
    'setopt' <<'/---'
Globally enable all passed `zsh` options in the current shell.
/---

:alias_command 'void :option.disable(+:str option_names)'\
    'unsetopt' <<'/---'
Globally disable all passed `zsh` options in the current shell.
/---

# ....................{ ENABLERS ~ local                   }....................
#FIXME: The following aliases *MUST* throw exceptions before enabling or
#disabling such options when *NOT* expanded from within a function. Why? Because
#option "local_options" is ignored when not applied within a function, in which
#case such options would erroneously be globally enabled or disabled. How about
#expanding a new alias:
#
#:alias_command 'void die_unless_context_function()'\
#   'is_context_function or :die\
#       "die_unless_context_function() not expanded within a function."'

:alias_command ':void :option.enable_local(+:str option_names)'\
    'setopt -- local_options' <<'/---'
Locally enable all passed shell options in the current context (e.g., block,
script, function).

These options will revert to their current global values on leaving this
context.

== Examples ==

.:option.enable_local()
==========================================
[source]
------------------------------------------
>>> @func :void :risky.non_business() {
...     :option.enable_local no_warn_create_global
...     a_new_hopelessness="None shall pass."
... }
>>> :risky.non_business                   # This will not print a warning.
>>> an_old_cheerfulness="One must fall."  # This will!
zsh: scalar parameter an_old_cheerfulness created globally in function
------------------------------------------
==========================================
/---

:alias_command ':void :option.disable_local(+:str option_names)'\
    'setopt -- local_options
     unsetopt -- ' <<'/---'
Locally disable all passed shell options in the current context (e.g., block,
script, function).

These options will revert to their current global values on leaving this
context.

== See Also ==

* :option.enable_local().
/---

# --------------------( WASTELANDS                         )--------------------
# ....................{ SETTERS                            }....................
# :alias_command ':void :option.States_as_chars(:Str states_name)'\
#     '{ :Str.set "$(:stdin)" ${-} } <<<' <<'/---'
# Set the string variable with the passed name to the subset of all currently
# enabled shell options assigned a unique character (e.g., `m`, assigned the state
# of the `monitor` shell option) as an undelimited string of such characters.
#
# This callable is implemented as an alias rather than a function, to ensure that
#
# == Examples ==
#
# .get_shell_options_enabled_as_characters()
# ==========================================
# [source]
# ------------------------------------------
# >>> get_shell_options_enabled_as_characters
# 4679CEGHJNRXZgikmsu
# >>> disable_shell_option monitor
# >>> get_shell_options_enabled_as_characters
# 4679CEGHJNRXZgiksu
# ------------------------------------------
# ==========================================
# /---

#FUXME: Remove the "_shell" everywhere below.

# ....................{ TESTERS                            }....................
# Avoid expanding such alias to "is_shell_option_enabled interactive". While
# correct, such expansion is markedly slower than merely testing such option
# directly. This alias is expanded frequently enough to warrant optimization.
#:alias_command '[status: bool] :shell.is_interactive()'\
#    'is -o interactive si' <<'/---'
#Report success if standard input to the current shell _was_ attached to a
#terminal device on initial execution of such shell. When testing whether
#standard input to the current shell is _currently_ attached to a terminal
#device, consider calling :stdin.is_terminal() instead. Standard input
#to the current shell could have been initially attached to a terminal device
#but since closed, in which case relying on the return value from this function
#would be problematic.
#/---
#
#:alias_command '[status: bool] is_shell_login()'\
#    'is -o login si' <<'/---'
#Report success if the first argument passed to the current shell was `-'. The
#startup process running the `login` command typically passes such argument to
#startup shells on successful login.
#/---

#Localize the passed `zsh` options to the current context (e.g., block, script,
#function). Such options revert to their global values on leaving such context:
#e.g.,
