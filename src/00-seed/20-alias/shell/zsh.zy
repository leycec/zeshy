#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core `zsh` aliases.
/---

# ....................{ TESTERS                            }....................
# Integer global ${ZSH_SUBSHELL} expands to the current subshell depth or 0 if
# the current shell is *NOT* a subshell. Hence, the current shell is a subshell
# if and only if such global is nonzero.
:alias_command '[status=:bool] :shell.is_subshell()'\
    '(( ZSH_SUBSHELL ))' <<'/---'
Report success if the current shell is a *subshell* (i.e., child `zsh` process
forked from a parent `zsh` process).

Success typically implies the current shell to have been invoked as either a:

* `(`- and `)`-delimited subshell.
* `$(`- and `)`-delimited command substitution.
* `<(`-, `>(`, _or_ `=(`- and `)`-delimited process substitution.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to :case.break(), which is considerably more evocative of what
#such alias accomplishes. (Also, we prefer "stop" to "end" in zeshy
#nomenclature. Using "stop" here, however, would imply such alias to
#syntactically terminate the entire case() block, which isn't the case.)

# :alias_command\
#     'void :for_string(string string_name, string code1, ...)'\
#     '{
#         # Localize such string.
#         :str string_name__fs; string_name__fs="$(:stdin)"
#         :str "${string_name__fs}"
#     } <<<' <<'/---'
# Terminate the current `case` statement. Expand this alias _only_ in `case`
# statement conditions, typically as the last command in such conditions: e.g.,
# /---

#Break from the currently matched condition of the current `case` statement. This
#is typically the last command in every such condition of most : e.g.,

# *`zsh` subshell* (i.e., child shells forked from other shells, typically
# using `(...)` and `$(...)` syntax) aliases.
