#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `zsh` exception aliases.
/---

#FIXME: As the new "}:catch{...}:catch" nomenclature implies, such blocks need
#never actually be used *EXCEPT* where specifically calling a catcher in such
#block. Hence, customary "{...} always {...}" should always be preferred for
#general exception handling. Grep the codebase for all instances of ":catch"
#and refactor *MOST* (but probably not all) to use "{...} always {...}"
#instead.

# ....................{ CATCHERS                           }....................
:alias_command ':void ":try{"()'\
   'typeset -ag ZY__TRY_LEVEL
    ZY__TRY_LEVEL[${SHLVL}]=$(( ${ZY__TRY_LEVEL[${SHLVL}]-0} + 1 ))
    {' <<'/---'
`zeshy`-specific prefix for `:try{...}:catch{...}:catch` blocks. While plain
`zsh` requires no such prefix, `zeshy` provides improved exception handling
requiring initialization by this alias prior to entering such blocks.
Specifically, while plain `zsh` fails to print uncaught exceptions or provide
user-configurable hooks for programmatically doing so, `zeshy` always handles
such exceptions.

== Implementation Details ==

This alias increments ${ZY__TRY_LEVEL[${SHLVL}]}, the *try level* for the
current shell (i.e., the number of `:try{...}:catch{...}:catch` blocks on such
shell's call path), subsequently decremented by alias `}:catch` to detect the
topmost `}:catch{...}:catch` block on such path and hence whether uncaught
exceptions should be handled immediately or allowed to propagate back up to a
parent `}:catch{...}:catch` block.
/---

:alias_command ':void "}:catch{"()'\
    '} always {' <<'/---'
`zeshy`-specific brace suffixing keyword `always` in `}:catch{...}:catch` blocks.
While plain `zsh` requires no such brace, `zeshy` exception handling implements
additional functionality requiring initialization prior to entering such blocks.

== Implementation Details ==

This alias currently expands to `{` and hence (technically) performs no
initialization at the moment. Since this alias will probably be revised to
initialize something at some future date, prefer this alias to merely `{`.
/---

# Sadly, zsh prohibits use of the preferred terminator ":}" with errors
# resembling: "zsh: parse error near `}'".
:alias_command ':void "}:catch"()'\
    '::exception.print_if_uncaught
}' <<'/---'
`zeshy`-specific brace terminating `}:catch{...}:catch` blocks. While plain `zsh`
requires no such brace, `zeshy` exception handling implements additional
functionality requiring finalization prior to leaving such blocks. Specifically,
this alias guarantees handling of uncaught exceptions.

== Implementation Details ==

This alias currently defers to ::exception.print_if_uncaught(), if defined. See
such function for further details.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Actually, "={" and "}:catch" are terrible. They don't comply with zeshy
#syntax or nomenclature at all. Rather, consider:
#
#* "}:catch{", expanding to "} always {" (at the moment), and
#  "}:catch", expanding to what "}:catch" currently expands to. As the example
#  below demonstrates, this suggests we should *ALSO* define ":try{" in lieu of
#  merely ":try": e.g.,
#  :try{
#      ...
#  }:catch{
#      ...
#  }:catch
#
#Such syntax (arguably) makes sense, as there should *ALWAYS* be an "always"
#block whenever there's a "try" block. It looks quite a bit more aesthetic and
#is less verbose than the current approach, complies with zeshy nomenclature,
#and provides a bit more room for future generalization.
#
#The downside, of course, is that we might need to manually crawl through the
#zeshy codebase and adjust each example accordingly. (Actually, isn't this
#entirely automatable?) In any case, the above is almost certainly the way to
#go. So... go, go, go!

#FUXME: Such aliases should probably be defined in @{main}. While relegating
#such aliases here *IS* preferable, doing so prohibits their use in earlier
#parcels (e.g., @{compile}), which could occassionally come in handy.

#FUXME: Contemplate switching to an alternative syntactic style:
#
#* "always ={...}:catch".
#
#* "always %{...}%".
#
#* "always ={...}:catch". (Yes! This is the one. "=" produces quote a pleasing
#  aesthetic when delimited by whitespace but a correspondingly poor
#  aesthetic when *NOT* delimited by whitespace, implying "={" and "}:catch" to only
#  be of use for such "always" blocks.)

#FUXME: Excise after replacing all existing expansions with :try().
# :alias_command 'void try()'\
#     'typeset -ag ZY__TRY_LEVEL; ZY__TRY_LEVEL[${SHLVL}]=$(( ${ZY__TRY_LEVEL[${SHLVL}]-0} + 1 ))
# ' <<'/---'
# `zeshy`
# /---

#FUXME: We currently litter the codebase with code resembling:
#
#    store_dir "${dirname}"
#    try {
#       ...
#    }:catch{
#       restore_dir
#    }:
#
#While only a slight improvement, we could replace such duplication with the
#more compact and readable equivalent (assuming we define a new alias
#always_restore_dir() in the trivial way):
#
#    store_dir "${dirname}"
#    try {
#       ...
#    } always_restore_dir
#
#Likewise for similar logic elsewhere.


#FUXME: Correct example. Namely, wrap the printed warning in a proper box.
#:alias_command 'void always_catch_exception_as_warning()'\
#    'always :{
#        if { catch_exception_if_found "*" } {
#            :warning.print "${CAUGHT}"
#        }
#    }:' <<'/---'
#Catch any exception thrown by the prior `try {...}` block and print such
#exception as a nonfatal warning to standard error: e.g.,
#
#.always_catch_exception_as_warning()
#==========================================
#[source]
#------------------------------------------
#>>> string on_respectable_murder=\
#...    "Political language — and with variations this is true of all political
#...     parties, from Conservatives to Anarchists — is designed to make lies
#...     sound truthful and murder respectable, and to give an appearance of
#...     solidity to pure wind."
#>>> { throw "${on_respectable_murder}" } always_catch_exception_as_warning
#Political language — and with variations this is true of all political
#parties, from Conservatives to Anarchists — is designed to make lies
#sound truthful and murder respectable, and to give an appearance of
#solidity to pure wind.
#------------------------------------------
#==========================================
#/---

#If an exception was thrown (i.e., if ${EXCEPTION} is set), catch and print such
#exception as a nonfatal warning. This alias is intended to be expanded in place
#of a customary `always :{...}:` block (i.e., after the closing `}` for the prior
#`try {...}` block): e.g.,

#FUXME: Do we actually require any "always" blocks at the top-level? I suspect
#*NOT*, in which case this, ":{", and "}:" should be shifted to
#@{15-alias/exception}.
#   } or :=failure.ignore' <<'/---'

#FUXME: Actually, this shouldn't be the case. If no exception was thrown, then
#${TRY_BLOCK_ERROR} (containing the exit status of the "try {...}" block) should
#be zero indicating success; else, ${TRY_BLOCK_ERROR} should be nonzero
#indicating failure, in which case catch() should catch such error and set
#"(( TRY_BLOCK_ERROR = 0 ))" (according to the implementation of catch()). If
#this isn't happening, I suspect "(( TRY_BLOCK_ERROR = 0 ))" itself is failing
#(since such assignment returns nonzero exit status when assigned to zero --
#oddball, we know). Investigate, in any case.

# Curiously, it does *NOT* suffice to simply catch such exception. Since zsh
# implicitly returns non-zero exit status from "always" blocks prematurely
# entered due to a thrown exception, such status *MUST* be ignored to prevent
# such block from implicitly throwing another exception.
