#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Operators* (i.e., syntactic constructs semantically resembling but
syntactically differing from conventional functions).
/---

# Since `zsh` expands aliases in function definitions at the time of such
# definitions (rather than the time of calls to such functions), all aliases
# referenced by function definitions in the official `zeshy` codebase must be
# defined before such functions.

# ....................{ DEPRECATED                         }....................
#FIXME: Excise me *AFTER* the codebase has (more or less) entirely been excised
#of such raggle-taggle riffraff.
() {
    local operator_name
    for   operator_name (is si noop not or and) {
        alias -g ${operator_name}=$'\n'':die "Deprecated operator '${operator_name}'() referenced."'
    }
}

# ....................{ OPERATORS                          }....................
:alias_command '[status=:int] :noop(*:str args)' ':' <<'/---'
Perform parameter expansion on the passed arguments but otherwise ignore these
arguments.

== Exit Status ==

Since this alias explicitly runs no commands, success is typically reported.
Since this alias can implicitly run commands (e.g., for arguments subject to
parameter expansion flag `(e)`), however, failure can be reported under obscure
edge cases.
/---

# ....................{ OPERATORS ~ bool                   }....................
:alias_command '[status=:bool] :is(+:str tests)' '[[' <<'/---'
Report success if all passed test operators succeed.

Due to `zsh` constraints, the last argument _must_ be :si().

== Examples ==

==========================================
[source]
------------------------------------------
$$$ :str on_the_people="
^^^      Vimes had spent his life on the streets, and had met decent men and
^^^      fools and people who'd steal a penny from a blind beggar and people who
^^^      performed silent miracles or desperate crimes every day behind the
^^^      grubby windows of little houses, but he'd never met The People. People
^^^      on the side of The People always ended up disappointed, in any case.
^^^      They found that The People tended not to be grateful or appreciative or
^^^      forward-thinking or obedient. The People tended to be small-minded and
^^^      conservative and not very clever and were even distrustful of
^^^      cleverness. And so the children of the revolution were faced with the
^^^      age-old problem: it wasn't that you had the wrong kind of government,
^^^      which was obvious, but that you had the wrong kind of people. As soon
^^^      as you saw people as things to be measured, they didn't measure up."
$$$ :is "${on_the_people}" == *things* :si :and :stdout.echo\
^^^     "Stories of imagination tend to upset those without one."
Stories of imagination tend to upset those without one.
------------------------------------------
==========================================
/---

:alias_word ':void :si()' ']]' <<'/---'
Terminate the prior expansion of :is().

This alias _must_ be the last argument passed to that alias.

== See Also ==

* :is().
/---

#FIXME: Add scrumptuous examples, both here and below.
:alias_word '[status=:bool] :not(+:str command_words)' '!' <<'/---'
Report success if the passed command fails.
/---

:alias_word '[status=:bool] :or(+:str command_words)' '||' <<'/---'
Report success if either the passed or preceding commands succeed.

If this alias is _not_ both preceded and followed by a command, an exception is
thrown.
/---

:alias_word '[status=:bool] :and(+:str command_words)' '&&' <<'/---'
Report success if both the passed and preceding commands succeed.

If this alias is _not_ both preceded and followed by a command, an exception is
thrown.
/---
