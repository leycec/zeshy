#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *`zsh` trap* (i.e., code run on `zsh` receiving the ``trapped'' signal)
aliases.

== Caveats ==

*Only trap signals with the run_hook_on_signal*() family of runnables* (e.g.,
:on_signal.local(), run_hook_on_signal_interrupt()). While the trap()
builtin and `TRAP${signal_name}()` functions (e.g., TRAPINT()) offer a simple
means of trapping signals globally, doing so silently removes all prior traps
for such signals. By compare, all runnables in the run_hook_on_signal*() family
preserve existing global traps by either trapping signals locally _or_ appending
traps to global lists of traps specific to such signals.

For similar reasons, there exist no functions named run_hook_on_signal(),
run_hook_on_signal_interrupt(), and so on. Presumably, such functions would
replace all prior global traps for the corresponding signal with the passed trap
-- an insane proposition at best, given `zeshy`\'s dependence on global traps
(e.g., to sanely respond to nonzero exit status).

== See Also ==

* http://zsh.sourceforge.net/Doc/Release/Functions.html[Reference documentation]
  for `zsh` trap functions.
* `info zsh` followed by `i trap`, a helpful reference on *`zsh` signals* (i.e.,
  non-POSIX signals handled only by and hence specific to `zsh` itself).
* `man 7 signal`, the definitive Linux reference on *standard signals* (i.e.,
  signals mandated by POSIX and hence common to all POSIX-compliant systems).
/---

# ....................{ RUNNERS                            }....................
#FIXME: Reimplement as macros.
#FIXME: Add examples.

:alias_command\
    ':void :on_signal.local(:str code :str signal_id)'\
    'setopt -- local_traps
    trap' <<'/---'
Run the passed code on the current shell receiving the passed signal during
subsequent execution of the function expanding this alias.

By `zsh` design, this temporarily replaces any prior global or local trap for
such signal with such trap, which may be undesirable.

== Signals ==

For convenience, such signal may be specified as either a nonnegative integer
_or_ the capitalized name of such signal including or excluding prefix `SIG`
(e.g., as either `1`, `HUP`, or `SIGHUP` for the hangup signal). Where such
signal is known beforehand (as is typical), consider calling the specific
function in the run_hook_on_signal_*_local() family for such signal instead
(e.g., :on_signal_interrupt.local()).

*Prefer specifying signals with names rather than numbers.* While some signal
numbers are cross-platform portable (e.g., 1, portably identifying the hangup
signal), others are strictly platform-specific (e.g., 18, non-portably
identifying the continue signal on x86 architecture, the child halted signal on
MIPS architecture, and the interactive stop signal on Alpha and SPARC
architecture). Signal names circumvent such portability concerns.

== Caveats ==

*Only expand this alias within functions.* While this alias does technically run
without error when expanded outside of functions (e.g., at the command line or
script level), it does so by trapping such signal _globally_ -- permanently and
silently replacing any prior trap for such signal with such trap. (Otherwise
known as *"strongly undesirable"*.)
/---

:alias_command 'void :on_signal_interrupt.local(:str code)'\
    '{ :on_signal.local "$(:stdin)" INT } <<<' <<'/---'
Run the passed code on the current shell receiving the *interrupt signal* (i.e.,
SIGINT, typically sent by the terminal receiving keyboard shortcut `<Ctrl-c>`
from the current user) during subsequent execution of the function expanding
this alias.

See :on_signal.local().
/---

:alias_command ':void :on_signal_user1.local(:str code)'\
    '{ :on_signal.local "$(:stdin)" USR1 } <<<' <<'/---'
Run the passed code on the current shell receiving the *first user-defined
signal* (i.e., SIGUSR1, a signal reserved for application-specific use) during
subsequent execution of the function expanding this alias.

See :on_signal.local().
/---

:alias_command ':void :on_signal_user2.local(:str code)'\
    '{ :on_signal.local "$(:stdin)" USR2 } <<<' <<'/---'
Run the passed code on the current shell receiving the *second user-defined
signal* (i.e., SIGUSR2, a signal reserved for application-specific use) during
subsequent execution of the function expanding this alias.

See :on_signal.local().
/---

# ....................{ RESETTERS                          }....................
:alias_command ':void :signal.ignore(+:str signal_ids)'\
    "trap ''" <<'/---'
Ignore the passed signals (defaulting to all possible signals) by replacing all
current traps for such signals with the empty string.

See :on_signal.local().
/---

:alias_command ':void :signal_interrupt.ignore()'\
    ":signal.ignore INT
" <<'/---'
Ignore the interrupt signal by replacing the current trap for such signal with
the empty string.

See :on_signal_interrupt.local().
/---

# ....................{ RESETTERS                          }....................
:alias_command ':void :signal.reset(+:str signal_ids)'\
    'trap -' <<'/---'
Reset the traps handling the passed signals (defaulting to all possible signals)
to the defaults for such signals. See :on_signal.local() for further
details.
/---

:alias_command ':void :signal_interrupt.reset()'\
    ':signal.reset INT
' <<'/---'
Reset the trap handling the interrupt signal to the default for such signal
(typically to terminate the current process). See run_hook_on_signal_interrupt()
for further details.
/---

:alias_command ':void :signal_user1.reset()'\
    ':signal.reset USR1
' <<'/---'
Reset the trap handling the first user-defined signal to the default for such
signal (typically to terminate the current process). See
run_hook_on_signal_user1() for further details.
/---

:alias_command ':void :signal_user2.reset()'\
    ':signal.reset USR2
' <<'/---'
Reset the trap handling the second user-defined signal to the default for such
signal (typically to terminate the current process). See
run_hook_on_signal_user2() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename "run_hook_on_signal" to "run_hook_on_signal" globally. They're
#hooks. Simple nomenclature is of the essence, here.

#or  (theoretically replacing all prior global traps for the interrupt passed
#signal with the passed trap).
#
#to be run  _never_ remove 
#    
#registered in this way or through the corresponding function
#TRAP${signal_name}() (e.g., TRAPINT()) for such trap and thus comes discouraged. 
#
#Such aliases provide _no_
#
# Since globally trapping signals through builtin trap() silently overwrites any
# prior signal trapped in both this way and through the corresponding function
# TRAP${signal_name}() (e.g., TRAPINT()), signals should instead be globally
# trapped through the run_hook_on_signal_*() family of functions (e.g.,
# run_hook_on_signal_interrupt()). Hence, there exists no corresponding
# run_hook_on_signal() function.

#Reset the code run on the current shell receiving the passed signals (defaulting
#to all possible signals) to the default `zsh` traps for such signals. See
#:on_signal.local() for further details.
        # Validate sanity.
#       string code; code="$(:stdin)"

        # Locally Register such trap.
#       setopt -- local_options
#       unsetopt -- 
