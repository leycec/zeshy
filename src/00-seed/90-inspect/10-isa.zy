#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *instruction set architecture (ISA) testers* (i.e., high-level functions
testing whether the current ISA either is a particular ISA _or_ belongs to a
particular category of such ISAs).
/---

# ....................{ GLOBALS                            }....................
#FIXME: List *ALL* common CPU architecture names here.

:str.global ZY_ISA_NAME <<'/---'
Human-readable name of the *current instruction set architecture (ISA)* (i.e.,
the interface between hardware and software for the current system, comprising
the machine language and native commands implemented by the processor(s) for
such system). Such string is guaranteed to be nonempty, but may contain both
whitespace and capitalized letters and hence is _not_ machine-readable.
/---

:str.global ZY_ISA_ID <<'/---'
Machine-readable name of the *current instruction set architecture (ISA)*. Such
string is guaranteed to be nonempty, but may contain both whitespace and
capitalized letters and hence is _not_ human-readable.
/---

:int.global ZY_ISA_BIT_WIDTH <<'/---'
*Bit width* of the current instruction set architecture (ISA). Typically, this
implies the following to all share the same size in such ISA:

* *Words* (i.e., fixed-sized binary strings used as the ``natural'' units of
  data in such ISA).
* *Memory addresses* (i.e., non-negative integers uniquely identifying physical
  addresses in main memory).
* *Native integers* (e.g., C variables of type `int`).
* All registers in the *datapath* (i.e., the processor core typically consisting
  of at least the program counter and instruction, memory address, and memory
  data registers).
/---

# ....................{ DEFINERS                           }....................
# Note that canonical string global ${MACHTYPE} is set during zsh compilation by
# autotools script "configure.ac" to the autotools-specific string global
# $host_cpu. Unfortunately, there appears to exist no definitive list of all
# $host_cpu values, necessitating the ad-hoc approach. Fortunately, reliable
# third-party sources matching a subset of such values do exist. See @{*-os} for
# further details.
#
# * "http://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob;f=m4/host-cpu-c-abi.m4",
#   setting the HOST_CPU_C_ABI variable with the M4 macro language in the GNU
#   gnulib library. Given that GNU also maintains autotools, this approximates a
#   definitive list.
#
# We intentionally exclude ISAs no longer under active deployment (e.g.,
# DEC Alpha, Motorola 68000, PA-RISC, RS/6000). Since zeshy requires zsh >=
# 5.0.0, such ISAs are unlikely to run zeshy reliably (if at all).
#
# To add support for a new ISA:
#
# * Add such ISA's zeshy-specific machine-readable name to local list
#   ${isa_ids}.
# * Match such ISA's autotools-specific name and convert such name to:
#   * The zeshy-specific machine-readable string local ${isa_name}.
#   * The zeshy-specific human-readable string global ${ZY_ISA_NAME}.
# * Document :is_isa_${isa_name}(), which this function defines.

:func.doc <<'/---'
:void ::define_isa_testers()

Define all instruction set architecture testers to unconditionally report either
success or failure.
/---
function ::define_isa_testers() {
    # Validate sanity.
    die_if_args

    # List of all zeshy-specific machine-readable ISA names.
    :list isa_ids; isa_ids=( arm ia64 mips power sparc x86 )

    # True if the current ISA is explicitly recognized by zeshy.
    # (Defaults to true.)
    :bool is_isa_recognized=1

    # True if the current ISA performs 32-bit addressing. (Defaults to false.)
    :bool is_isa_bit_width_32=0

    # # True if the current ISA performs 64-bit addressing. (Defaults to false.)
    :bool is_isa_bit_width_64=0

    # Convert versioned autotools- to unversioned zeshy-specific machine-
    # readable ISA names (e.g., from "armsa1" to "arm").
    case "${MACHTYPE}" {
    ('arm'*)
        ZY_ISA_ID='arm'
        ZY_ISA_NAME='ARM'

        # While there do exist both 32- and 64-bit ARM ISAs *AND* multiple
        # $host_os values for such ISAs (e.g., "arm", "armel", "armsa1"), no
        # such values appear to cleanly imply an addressing bit width. Since
        # most ARM ISAs perform 32-bit addressing, assume that for now.
        ZY_ISA_BIT_WIDTH=32
        :case.break
    ('i'<3-7>'86')
        ZY_ISA_ID='x86'
        ZY_ISA_NAME='x86-32'
        ZY_ISA_BIT_WIDTH=32
        :case.break
    ('ia64'*)
        ZY_ISA_ID='ia64'
        ZY_ISA_NAME='IA-64'
        ZY_ISA_BIT_WIDTH=64
        :case.break
    ('mips'*)
        ZY_ISA_ID='mips'
        ZY_ISA_NAME='MIPS'

        if :is "${MACHTYPE}" == 'mips64' :si {
            ZY_ISA_BIT_WIDTH=64
        } else {
            ZY_ISA_BIT_WIDTH=32
        }

        :case.break
    ('powerpc'*)
        ZY_ISA_ID='power'
        ZY_ISA_NAME='Power'

        if :is "${MACHTYPE}" == 'powerpc64' :si {
            ZY_ISA_BIT_WIDTH=64
        } else {
            ZY_ISA_BIT_WIDTH=32
        }

        :case.break
    ('sparc'*)
        ZY_ISA_ID='sparc'
        ZY_ISA_NAME='SPARC'

        if :is "${MACHTYPE}" == 'sparc64' :si {
            ZY_ISA_BIT_WIDTH=64
        } else {
            ZY_ISA_BIT_WIDTH=32
        }

        :case.break
    ('x86_64')
        ZY_ISA_ID='x86'
        ZY_ISA_NAME='x86-64'
        ZY_ISA_BIT_WIDTH=64
        :case.break
    # Else, the current ISA is unrecognized.
    (*)
        # Note such fact.
        is_isa_recognized=0

        # Convert such ISA's autotools- to zeshy-specific machine-readable name,
        # similar to that @{identify} applies to ${ZY_SYSTEM_ID} in addition
        # to lowercasing such name.
        ZY_ISA_ID="${(L)MACHTYPE//[^[:alpha:]]##/_}"

        # Set such ISA's human-readable name to its autotools-specific name,
        # capitalizing the first letter of such name.
        ZY_ISA_NAME="${(C)MACHTYPE}"

        # Since zeshy is likely to perform poorly under unrecognized ISAs,
        # print a nonfatal warning.
        :warning.output\
            "Instruction set architecture \"${MACHTYPE}\" unrecognized."
    }

    # Convert the current ISA bit width to equivalent local booleans.
    case "${ZY_ISA_BIT_WIDTH}" {
    (32)
        is_isa_bit_width_32=1
        :case.break
    (64)
        is_isa_bit_width_64=1
        :case.break
    # Else, such bit width is unrecognized. Print a nonfatal warning.
    (*)
        :warning.output\
            "Instruction set architecture \"${MACHTYPE}\" bit width unrecognized."
    }

    # If the current ISA was recognized, define the corresponding tester to
    # always report success.
    if (( is_isa_recognized )) {
        :define_func_to_report_success ":is_isa_${ZY_ISA_ID}"
    }

    # Define all other ISA testers to always report failure. For efficiency,
    # remove the current ISA from the list of all possible ISAs and iterate such
    # list. See remove_list_items() for further details.
    :str isa_id_other
    for  isa_id_other ("${isa_ids[@]:#${ZY_ISA_ID}}") {
        :define_func_to_report_failure ":is_isa_${isa_id_other}"
    }

    # If the current ISA is x86, define testers testing specific bit widths.
    # To avoid combinatorial explosion, do *NOT* do so for other ISAs. Due to
    # the extreme commonality of such ISA, such testers are only x86-specific.
    if :is "${ZY_ISA_ID}" == 'x86' :si {
        :define_func_to_report_bool :is_os_x86_32 "${is_isa_bit_width_32}"
        :define_func_to_report_bool :is_os_x86_64 "${is_isa_bit_width_64}"
    # Else, the current ISA is non-x86. Define such testers to report failure.
    } else {
        :define_func_to_report_failure :is_os_x86_32
        :define_func_to_report_failure :is_os_x86_64
    }

    # Define testers corresponding to booleans set above accordingly.
    :define_func_to_report_bool\
        :is_isa_bit_width_32 "${is_isa_bit_width_32}"
    :define_func_to_report_bool\
        :is_isa_bit_width_64 "${is_isa_bit_width_64}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_isa_arm()

Report success if the current instruction set architecture (ISA) is *ARM* (i.e.,
a reduced instruction set computing (RISC) ISA designed by ARM Holdings).
/---

:func.doc <<'/---'
[status=:bool] :is_isa_ia64()

Report success if the current instruction set architecture (ISA) is *IA-64*
(i.e., if the current CPU is a 64-bit Intel Itanium CPU).
/---

:func.doc <<'/---'
[status=:bool] :is_isa_power()

Report success if the current instruction set architecture (ISA) is *Power*
(i.e., a family of reduced instruction set computing (RISC) ISAs managed by
Power.org), formerly referred to as *PowerPC* and *PPC*.
/---

:func.doc <<'/---'
[status=:bool] :is_isa_mips()

Report success if the current instruction set architecture (ISA) is *MIPS*
(i.e., Microprocessor without Interlocked Pipeline Stages, a reduced instruction
set computing (RISC) ISA designed by MIPS Technologies).
/---

:func.doc <<'/---'
[status=:bool] :is_isa_sparc()

Report success if the current instruction set architecture (ISA) is *SPARC*
(i.e., Scalable Processor Architecture, a reduced instruction set computing
(RISC) ISA first designed by Sun Microsystems).
/---

# ....................{ TESTERS ~ x86                      }....................
:func.doc <<'/---'
[status=:bool] :is_isa_x86()

Report success if the current instruction set architecture (ISA) is *x86* (i.e.,
a family of backward-compatible ISAs derived from the Intel 8086 CPU). Since x86
comprises 16-, 32-, and 64-bit variants, success does _not_ imply such ISA to
perform either 32- or 64-bit addressing. To test either condition, consider
calling :is_isa_x32() or :is_isa_x64() instead.
/---

:func.doc <<'/---'
[status=:bool] :is_isa_x86_32()

Report success if the current instruction set architecture (ISA) is *x86-32*
(i.e., the 32-bit version of the x86 instruction set), also referred to as
*x32*, *x86_32*, and *IA-32*. This tester is shorthand for the equivalent test
`:is_isa_x86() and :is_isa_bit_width_32()`.
/---

:func.doc <<'/---'
[status=:bool] :is_isa_x86_64()

Report success if the current instruction set architecture (ISA) is *x86-64*
(i.e., the 64-bit version of the x86 instruction set), also referred to as
*x64*, *x86_64*, and *amd64*. This tester is shorthand for the equivalent test
`:is_isa_x86() and :is_isa_bit_width_64()`.
/---

# ....................{ TESTERS ~ bit width                }....................
:func.doc <<'/---'
[status=:bool] :is_isa_bit_width_32()

Report success if the current instruction set architecture (ISA) is *32-bit*
(i.e., if such ISA performs 32-bit addressing and hence has a bit width of 32).
/---

:func.doc <<'/---'
[status=:bool] :is_isa_bit_width_64()

Report success if the current instruction set architecture (ISA) is *64-bit*
(i.e., if such ISA performs 64-bit addressing and hence has a bit width of 64).
/---

# ....................{ MAIN                               }....................
::define_isa_testers
