#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *display server testers* (i.e., high-level functions testing whether the
current display server either is a particular such server _or_ belongs to a
particular category of such servers).
/---

# ....................{ GLOBALS                            }....................
# Note that @{inspect} sets string global ${ZY_DISPLAY_SERVER_NAME} at the
# beginning of digest compilation.

:str.global ZY_DISPLAY_SERVER_ID <<'/---'
Machine-readable name of the *current display server* (i.e., the core component
of the current windowing system if any, defining the communications protocol
with which client GUI applications receive input and render output). Such
string is guaranteed to be nonempty, but may contain both whitespace and
capitalized letters and hence is _not_ human-readable.
/---

# ....................{ DEFINERS                           }....................
# To add support for a new display server:
#
# * Add a test detecting such server to @{inspect}, setting string global
#   ${ZY_DISPLAY_SERVER_NAME} to such server's human-readable name.
# * Add such server's machine-readable name to local list ${display_server_ids}.
# * Match such server's human-readable name below, setting string global
#   ${ZY_DISPLAY_SERVER_ID} to such server's machine-readable name.
# * Document :is_os_${ZY_DISPLAY_SERVER_ID}(), which this function defines.

:func.doc <<'/---'
void ::define_display_server_testers()

Define all display server testers to unconditionally report either success or
failure.
/---
function ::define_display_server_testers() {
    # Validate sanity.
    die_if_args

    # List of all machine-readable display server names.
    :list display_server_ids
          display_server_ids=(
        # Linux.
        mir wayland x

        # Other.
        cygwin_x quartz surface_flinger
    )

    # True if the current display server is explicitly recognized by zeshy.
    # (Defaults to true.)
    :bool is_display_server_recognized=1

    # True if the current display server supports the X11 protocol. Technically,
    # this boolean is also settable by matching human-readable display server
    # names as below (e.g., enabling this boolean if such name is "XQuartz").
    # Unlike tests for other display servers, however, this test is unlikely to
    # change with time *AND* the most efficient means of setting this boolean.
    :bool is_display_server_trait_x
          is_display_server_trait_x=$(( ${+DISPLAY} ))

    # If the current display server was previously identified by @{inspect}, map
    # from human- to machine-readable display server names (e.g., from "XQuartz"
    # to "quartz"). Technically, such names are also settable by copying the
    # corresponding @{inspect} tests here (e.g., "(( ${+MIR_SOCKET} ))",
    # implying the current display server to be Mir). Since such tests are
    # liable to change with time, however, centralizing such tests in @{inspect}
    # is preferable to repeating such tests here.
    if :is -n "${ZY_DISPLAY_SERVER_NAME}" :si {
        # Define a tester implying the current shell to be running under a
        # display server to report success.
        :define_func_to_report_success :is_display_server

        # Convert such human- to machine-readable display server name.
        case "${ZY_DISPLAY_SERVER_NAME}" {
        ('X')
            ZY_DISPLAY_SERVER_ID='x'
            :case.break
        ( ('X'|)'Quartz')
            ZY_DISPLAY_SERVER_ID='quartz'
            :case.break
        ( ('X'|)'Wayland')
            ZY_DISPLAY_SERVER_ID='wayland'
            :case.break
        ('Cygwin/X')
            ZY_DISPLAY_SERVER_ID='cygwin_x'
            :case.break
        ('Surface Flinger')
            ZY_DISPLAY_SERVER_ID='surface_flinger'
            :case.break
        # Else, the current display server is unrecognized.
        (*)
            # Note this fact.
            is_display_server_recognized=0

            # Convert this human- to machine-readable name, resembling that
            # @{identify} applies to ${ZY_SYSTEM_ID} in addition to
            # lowercasing this name.
            ZY_DISPLAY_SERVER_ID="${(L)ZY_DISPLAY_SERVER_NAME//[^[:alpha:]]##/_}"

            # Since zeshy is likely to perform poorly under unrecognized display
            # servers, print a nonfatal warning.
            :warning.output\
                'Display server "'${ZY_DISPLAY_SERVER_NAME}'" unrecognized.'
        }
    # Else, the current display server was *NOT* previously identified. Assuming
    # the tests performed by @{inspect} to be reliable, this implies the current
    # shell to *NOT* be running under a display server. Define the corresponding
    # tester to report failure.
    } else {
        :define_func_to_report_failure :is_display_server
    }

    # If the current display server was recognized, define the corresponding
    # tester to report success.
    if (( is_display_server_recognized )) {
        :define_func_to_report_success\
            ":is_display_server_${ZY_DISPLAY_SERVER_ID}"
    }

    # Define all other such testers to report failure by iterating over all
    # possible display servers excluding the current such server. See
    # remove_list_items() for further details.
    :str display_server_id_other
    for  display_server_id_other (
        "${display_server_ids[@]:#${ZY_DISPLAY_SERVER_ID}}") {
        :define_func_to_report_failure\
            ":is_display_server_${display_server_id_other}"
    }

    # Define testers corresponding to booleans set above accordingly.
    :define_func_to_report_bool\
        :is_display_server_trait_x "${is_display_server_trait_x}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_display_server()

Report success if the current process is a child of a *terminal window* (i.e.,
GUI terminal emulator). If this is the case, such window _must_ be a client of
the current windowing system's display server, implying unredirected output from
the current shell to be displayed by such server.
/---

:func.doc <<'/---'
[status: bool] :is_display_server_cygwin_x()

Report success if the current display server is *Cygwin/X* (i.e., a Microsoft
Windows-specific port of the X.Org display server running under the Unix-like
Cygwin environment).
/---

:func.doc <<'/---'
[status: bool] :is_display_server_mir()

Report success if the current display server is *Mir* (i.e., the compositing
display server underlying recent versions of Ubuntu's Unity UI).
/---

:func.doc <<'/---'
[status: bool] :is_display_server_quartz()

Report success if the current display server is the *Quartz Compositor* (i.e.,
the core renderer for Apple OS X, serving as both display server _and_
compositing window manager).
/---

:func.doc <<'/---'
[status: bool] :is_display_server_surface_flinger()

Report success if the current display server is *Surface Flinger* (i.e., the
core renderer for Google Android).
/---

:func.doc <<'/---'
[status: bool] :is_display_server_wayland()

Report success if the current display server is a *Wayland compositor* (i.e., a
display server supporting the Wayland communication protocol).
/---

:func.doc <<'/---'
[status: bool] :is_display_server_x()

Report success if the current display server is *X.Org* (i.e., the current
reference implementation of a display server supporting the X11 communication
protocol forked from the prior reference implementation *XFree86*, managed by
the X.Org Foundation), also referred to as *X*.

== Caveats ==

*This function does returns failure if the current display server supports the
X11 protocol but is _not_ X.Org.* Since the former condition is typically more
interesting than the latter, consider calling :is_display_server_trait_x()
instead.
/---

# ....................{ TESTERS ~ trait                    }....................
:func.doc <<'/---'
[status: bool] :is_display_server_trait_x()

Report success if the current display server supports *X11* (i.e., the core
communications protocol of the X Window System). Such protocol is also referred
to as *X* or *X.Org* (i.e., the current reference implementation of an X11
display server developed by the X.Org Foundation).

== Caveats ==

*Success implies only that X11 applications may be reliably run.* Success does
_not_ imply that CLI utilities commonly bundled with the X.Org Server (e.g.,
"xauth", "xrdb") are pathable or otherwise available. Rephrased, success only
implies the current display server to _support_ X11 rather than to _be_ the
X.Org Server -- a significantly stronger claim. Indeed, several windowing
systems unaffiliated with the X.Org Foundation provide optional display servers
supporting the X11 protocol but _not_ such CLI utilities (e.g., XWayland, XMir).
/---

# ....................{ MAIN                               }....................
::define_display_server_testers
