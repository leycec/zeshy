#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *window manager testers* (i.e., high-level functions testing whether the
current window manager -- the component of the current windowing system managing
window appearance and placement -- is or is compatible with various well-known
window managers).
/---

#FIXME: Define appropriate testers (e.g., :is_window_manager_quartz()) in the
#conventional way. See @{*-display_server} for implementation details.

# ....................{ SETTERS                            }....................
#FIXME: The list of Linux window managers is woefully incomplete. Improve!

:func.doc <<'/---'
void :set_string_to_window_manager(string string_name)

Set the passed string to exactly one lowercase word uniquely identifying the
*current window manager* (i.e., the component of the current windowing system
managing windows for the current display of the current display server) if the
current display is managed by a display server or throw an exception otherwise:
e.g.,

.:set_string_to_window_manager()
==========================================
[source]
------------------------------------------
>>> :str window_manager
>>> :set_string_to_window_manager window_manager
>>> :stdout.echo "${window_manager}"
fvwm
------------------------------------------
==========================================

== Implementation ==

Under OSes supporting only a single monolithic window manager (e.g., iOS,
Windows), this function unconditionally sets such string to a constant
identifying such manager (e.g., `quartz`, `windows`).

Under all other OSes (e.g., BSD and Linux derivatives), this function
conditionally sets such string to the result of running either reliable window
management commands if pathable (e.g., `wmctrl`, `xprop`) or unreliable process
finders otherwise (e.g., `pgrep`).

== Window Managers ==

This function identifies common window managers as follows (in lexicographic
order grouped by operating system):

.Linux (and Sometimes BSD) Window Managers
[cols=">strong,^,^,<emphasis",options="header"]
|===============================================================================
| Name    | Window Manager | Desktop Environment
| awesome | awesome        | N/A
| compiz  | Compiz         | N/A
| fvwm    | FVWM           | N/A
| kwin    | KWin           | KDE 4
| marco   | Marco          | MATE
| metacity| Metacity       | GNOME 2
| mutter  | Mutter         | GNOME 3
| xfwm4   | Xfwm4          | Xfce4

.OS-specific Window Managers
[cols=">strong,^,^,<emphasis",options="header"]
|===============================================================================
| Name    | Window Manager    | Operating System
| quartz  | Quartz Compositor | OS X
| windows | Windows           | Windows
/---
function :set_string_to_window_manager() {
    # Validate sanity.
    die_unless_arg 'Expected one string name.'
    :str string_name__sstwm="${1}" wm_name__sstwm

    # If such name is either undefined or the empty string, throw an exception.
    :is -n "${ZY_WINDOW_MANAGER_NAME-}" :si :or :die\
        'Window manager unrecognized (i.e., ${ZY_WINDOW_MANAGER_NAME} undefined or empty).'

    # Set such string to such name munged. Specifically:
    #
    # * Strip the prefixing property name and '"' from such name.
    # * Strip the suffixing '"' from such name.
    # * Lowercase such name.
    # * Convert all spaces in such name to underscores. (Though rare, window
    #   manager names can technically contain spaces.)
    :Str.set "${string_name__sstwm}" "${(L)${ZY_WINDOW_MANAGER_NAME##*\"}[1,-2]// /_}"
}
