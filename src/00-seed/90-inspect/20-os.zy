#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *operating system testers* (i.e., high-level functions testing whether
the current operating system either is a particular operating system _or_
belongs to a particular category of operating systems).
/---

# ....................{ GLOBALS                            }....................
#FIXME: List *ALL* common CPU architecture names here.

:str.global ZY_OS_NAME <<'/---'
Human-readable name of the *current operating system*. Such string is guaranteed
to be nonempty, but may contain both whitespace and capitalized letters and
hence is _not_ machine- readable.
/---

:str.global ZY_OS_ID <<'/---'
Machine-readable name of the *current operating system*. Such string is
guaranteed to be nonempty, but contains only underscores and uncapitalized
letters and hence is _not_ human-readable.
/---

# ....................{ DEFINERS                           }....................
# Note that canonical string global ${OSTYPE} is set during zsh compilation by
# autotools script "configure.ac" to the autotools-specific string global
# $host_os. Unfortunately, there appears to exist no definitive list of all
# $host_os values, necessitating the ad-hoc approach. Fortunately, reliable
# third-party sources matching a subset of such values do exist -- including:
#
# * "http://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=blob_plain;f=build-aux/config.rpath;hb=HEAD",
#   a shell script outputting variables setting the shared library runtime
#   search path in the GNU gnulib library. See also the files
#   "build-aux/config.library" and "m4/host-os.m4" in such library. Given that
#   GNU also maintains autotools, this approximates a definitive list.
# * "https://ftp.samba.org/pub/unpacked/ctdb/lib/replace/libreplace_ld.m4", the
#   suite of autotools macro definitions for SAMBA's libreplace.
# * "http://git.savannah.gnu.org/cgit/grub.git/plain/configure.ac", the
#   autotools configuration for GRUB2.
#
# We intentionally exclude operating systems no longer under active development
# (e.g., SunOS, SGI's IRIX, Hewlett Packard's Tru64 UNIX). Since zeshy requires
# zsh >= 5.0.0, such systems are unlikely to run zeshy reliably (if at all).
#
# To add support for a new OS:
#
# * Add such OS' zeshy-specific machine-readable name to local list ${os_names}.
# * Match such OS's autotools-specific name and convert such name to:
#   * The zeshy-specific machine-readable string global ${ZY_OS_ID}.
#   * The zeshy-specific human-readable string global ${ZY_OS_NAME}.
# * Document :is_os_${ZY_OS_ID}(), which this function defines.
# * If such OS supports no canonical display servers out-of-the-box (e.g., X11),
#   explicitly detect such OS' stock display server in @{inspect}.

:func.doc <<'/---'
void ::define_os_testers()

Define all operating system testers to unconditionally report either success or
failure.
/---
function ::define_os_testers() {
    # Validate sanity.
    die_if_args

    # List of all zeshy-specific machine-readable OS names.
    :list os_ids; os_ids=(
        # BSD.
        dragonfly_bsd freebsd netbsd openbsd pcbsd

        # Darwin.
        ios os_x

        # GNU.
        gnu_hurd gnu_kfreebsd gnu_kopensolaris

        # Linux.
        linux_android linux_gnu

        # Unix System V.
        aix hpux solaris

        # Other.
        aros haiku qnx_neutrino windows
    )

    # True if the current OS is explicitly recognized by zeshy. (Defaults to
    # true.)
    :bool is_os_recognized=1

    # True if the current OS is GNU/Linux. (Defaults to false.)
    :bool is_os_linux_gnu=0

    # True if the current OS is a BSD derivative. (Defaults to false.)
    :bool is_os_trait_bsd=0

    # True if the current OS has a Darwin core. (Defaults to false.)
    :bool is_os_trait_darwin=0

    # True if the current OS supports the GNU userland. (Defaults to
    # false.)
    :bool is_os_trait_gnu=0

    # True if the current OS is Linux. (Defaults to false.)
    :bool is_os_trait_linux=0

    # True if the current OS is a Unix System V derivative. (Defaults to false.)
    :bool is_os_trait_sysv=0

    # Convert versioned autotools- to unversioned zeshy-specific machine-
    # readable OS names (e.g., from "aix9" to "aix").
    # Map from autotools- to zeshy-specific OS names. The latter tend to
    # correspond more to the human-readable OS name than the former (e.g.,
    # "gnu_hurd" rather than "gnu", a patently unfortunate choice of identifier)
    # and, arguably more importantly, lack the OS versions frequently suffixing
    # the latter (e.g., "aix" rather than "aix9").
    case "${OSTYPE}" {
    # Map recognized autotools- to zeshy-specific OS names.
    ('aix'*)
        ZY_OS_ID='aix'
        ZY_OS_NAME='AIX'
        is_os_trait_sysv=1
        :case.break
    ('aros'*)
        ZY_OS_ID='aros'
        ZY_OS_NAME='AROS'
        :case.break
    ('dragonfly'*)
        ZY_OS_ID='dragonfly_bsd'
        ZY_OS_NAME='DragonFly BSD'
        is_os_trait_bsd=1
        :case.break
    ('freebsd'*)
        ZY_OS_ID='freebsd'
        ZY_OS_NAME='FreeBSD'
        is_os_trait_bsd=1
        :case.break
    ('haiku'*)
        ZY_OS_ID='haiku'
        ZY_OS_NAME='Haiku'
        :case.break
    ('hpux'*)
        ZY_OS_ID='hpux'
        ZY_OS_NAME='HP-UX'
        is_os_trait_sysv=1
        :case.break
    ('gnu'*)
        ZY_OS_ID='gnu_hurd'
        ZY_OS_NAME='GNU/Hurd'
        is_os_trait_gnu=1
        :case.break
    ('kfreebsd'*'-gnu')
        ZY_OS_ID='gnu_kfreebsd'
        ZY_OS_NAME='GNU/Hurd'
        is_os_trait_gnu=1
        is_os_trait_bsd=1
        :case.break
    ('kopensolaris'*'-gnu')
        ZY_OS_ID='gnu_kopensolaris'
        ZY_OS_NAME='GNU/kOpenSolaris'
        is_os_trait_gnu=1
        is_os_trait_sysv=1
        :case.break
    ('linux-android'*)
        ZY_OS_ID='linux_android'
        ZY_OS_NAME='Android'
        is_os_trait_linux=1
        :case.break
    ('linux-gnu'*)
        ZY_OS_ID='linux_gnu'
        ZY_OS_NAME='GNU/Linux'
        is_os_linux_gnu=1
        is_os_trait_gnu=1
        is_os_trait_linux=1
        :case.break
    ('netbsd'*)
        ZY_OS_ID='netbsd'
        ZY_OS_NAME='NetBSD'
        is_os_trait_bsd=1
        :case.break
    ('nto-qnx'*)
        ZY_OS_ID='qnx_neutrino'
        ZY_OS_NAME='QNX Neutrino'
        :case.break
    ('openbsd'*)
        ZY_OS_ID='openbsd'
        ZY_OS_NAME='OpenBSD'
        is_os_trait_bsd=1
        :case.break
    ('solaris'*)
        ZY_OS_ID='solaris'
        ZY_OS_NAME='Solaris'
        is_os_trait_sysv=1
        :case.break
    (('cygwin'|'mingw')*)
        ZY_OS_ID='windows'
        ZY_OS_NAME='Windows'
        :case.break
    # In contrast to *ALL* other operating systems, autotools ambiguously
    # prefixes $os_host by the name of the set of shared components underlying
    # such system (e.g., "darwin") rather than the fairly unambiguous name of
    # such system (e.g., "ios"). For disambiguity, correct this.
    ('darwin'*)
        is_os_trait_darwin=1

        # At present, only two distinct operating systems leverage Darwin:
        # desktop- and server-oriented OS X and mobile-oriented iOS. Since the
        # latter only run on ARM architecture and the former never do, the two
        # are distinguishable by whether the current architecture is ARM. This
        # is all Apple's fault.
        if { :is_isa_arm } {
            ZY_OS_ID='ios'
            ZY_OS_NAME='iOS'
        } else {
            ZY_OS_ID='os_x'
            ZY_OS_NAME='OS X'
        }

        :case.break
    # Else, the current operating system is unrecognized. This. Should. Not. Be.
    (*)
        # Note such fact.
        is_os_recognized=0

        # Convert such OS's autotools- to zeshy-specific machine-readable name,
        # similar to that @{identify} applies to ${ZY_SYSTEM_ID} in addition
        # to lowercasing such name.
        ZY_OS_ID="${(L)OSTYPE//[^[:alpha:]]##/_}"

        # Set such OS' human-readable name to its autotools-specific name,
        # capitalizing the first letter of such name.
        ZY_OS_NAME="${(C)OSTYPE}"

        # Since zeshy is likely to perform poorly under unrecognized OSes, print
        # a nonfatal warning.
        :warning.output "Operating system \"${OSTYPE}\" unrecognized."
    }

    # If the current OS was recognized, define the corresponding tester to
    # always report success.
    if (( is_os_recognized )) {
        :define_func_to_report_success ":is_os_${ZY_OS_ID}"
    }

    # Define all other individual OS testers to always report failure. For
    # efficiency, remove the current OS from the list of all possible OSes and
    # iterate such list. See remove_list_items() for further details.
    :str os_id_other
    for     os_id_other ("${os_ids[@]:#${ZY_OS_ID}}") {
        :define_func_to_report_failure ":is_os_${os_id_other}"
    }

    # Define testers corresponding to booleans set above accordingly.
    :define_func_to_report_bool :is_os_trait_bsd       "${is_os_trait_bsd}"
    :define_func_to_report_bool :is_os_trait_darwin    "${is_os_trait_darwin}"
    :define_func_to_report_bool :is_os_trait_gnu       "${is_os_trait_gnu}"
    :define_func_to_report_bool :is_os_trait_gnu_linux "${is_os_linux_gnu}"
    :define_func_to_report_bool :is_os_trait_linux     "${is_os_trait_linux}"
    :define_func_to_report_bool :is_os_trait_sysv      "${is_os_trait_sysv}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_os_aros()

Report success if the current operating system is an *AROS distribution* (i.e.,
a distribution of the AROS Research Operating System, an open-source
implementation of the AmigaOS 3.1 APIs).
/---

:func.doc <<'/---'
[status: bool] :is_os_haiku()

Report success if the current operating system is *Haiku* (i.e., an open-source
operating system compatible at both the source and binary level with the long-
defunct BeOS).
/---

:func.doc <<'/---'
[status: bool] :is_os_qnx_neutrino()

Report success if the current operating system is *QNX Neutrino* (i.e., a Unix-
like real-time operating system popular in the embedded systems market).
/---

:func.doc <<'/---'
[status: bool] :is_os_windows()

Report success if the current operating system is Microsoft Windows.
/---

# ....................{ TESTERS ~ darwin                   }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_darwin()

Report success if the current operating system has an Apple Darwin core. This
implies such system to provide both the *XNU kernel* (i.e., hybrid kernel
combining the Mach 3 microkernel and BSD 4.4 kernel subsystems) and well-known
low-level open-source components (e.g., `launchd`, `mDNSResponder`). While both
the OS X and iOS platforms leverage Darwin, this does _not_ necessarily imply
the current system to also provide high-level closed-source components commonly
associated with either platform (e.g., Carbon, Cocoa).
/---

:func.doc <<'/---'
[status: bool] :is_os_ios()

Report success if the current operating system is Apple iOS. This typically
implies such system to be running on an Apple mobile device (e.g., iPhone, iPod,
iPad).
/---

:func.doc <<'/---'
[status: bool] :is_os_os_x()

Report success if the current operating system is Apple OS X.
/---

# ....................{ TESTERS ~ bsd                      }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_bsd()

Report success if the current operating system is a *Berkeley Software
Distribution (BSD) derivative* (i.e., a Unix-like operating system comprising a
BSD kernel but _not_ necessarily the customary BSD userland). This includes:

* Debian GNU/kFreeBSD.
* DragonFly BSD.
* FreeBSD.
* NetBSD.
* OpenBSD.
/---

:func.doc <<'/---'
[status: bool] :is_os_dragonfly_bsd()

Report success if the current operating system is *DragonFly BSD* (i.e., a Unix-
like operating system forked from FreeBSD 4.8).
/---

:func.doc <<'/---'
[status: bool] :is_os_freebsd()

Report success if the current operating system is FreeBSD. This excludes Debian
GNU/kFreeBSD, an offshoot which only provides the FreeBSD kernel (rather than
both the FreeBSD kernel and corresponding userland).
/---

:func.doc <<'/---'
[status: bool] :is_os_netbsd()

Report success if the current operating system is NetBSD.
/---

:func.doc <<'/---'
[status: bool] :is_os_openbsd()

Report success if the current operating system is *OpenBSD* (i.e., a security-
focused Unix-like operating system forked from NetBSD.
/---

# ....................{ TESTERS ~ linux                    }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_linux()

Report success if the current operating system is a *Linux distribution* (i.e.,
a Unix-like operating system providing the Linux kernel), including but _not_
limited to conventional GNU/Linux distributions.
/---

:func.doc <<'/---'
[status: bool] :is_os_linux_android()

Report success if the current operating system is *Google Android* (i.e., a
Unix-like operating system providing the Linux kernel but _not_ GNU userland,
targetting touchscreen mobile devices).
/---

:func.doc <<'/---'
[status: bool] :is_os_linux_gnu()

Report success if the current operating system is a *GNU/Linux distribution*
(i.e., Unix-like operating system providing both the Linux kernel _and_ GNU
userland).
/---

# ....................{ TESTERS ~ gnu                      }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_gnu()

Report success if the current operating system supports the *GNU userland*
(i.e., suite of operating system utilities produced by the GNU Project). This
excludes operation systems unaffiliated with GNU supporting an optional subset
of such userland (e.g., via MacPorts under Apple Darwin).
/---

:func.doc <<'/---'
[status: bool] :is_os_gnu_hurd()

Report success if the current operating system is *GNU/Hurd* (i.e., the official
GNU operating system, providing the GNU Mach microkernel).
/---

:func.doc <<'/---'
[status: bool] :is_os_gnu_kfreebsd()

Report success if the current operating system is *Debian GNU/kFreeBSD* (i.e., a
FreeBSD variant providing both the GNU userland and core Debian package set).
/---

:func.doc <<'/---'
[status: bool] :is_os_gnu_kopensolaris()

Report success if the current operating system is *GNU/kOpenSolaris* (i.e., an
OpenSolaris variant providing the GNU userland).
/---

# ....................{ TESTERS ~ sysv                     }....................
:func.doc <<'/---'
[status: bool] :is_os_trait_sysv()

Report success if the current operating system is a Unix System V derivative.
This implies such system to have a System V kernel, typically either Release 3
or 4. Currently, this includes:

* All Solaris variants (e.g., OpenSolaris, Oracle Solaris, illumos).
* Hewlett Packard's HP-UX.
* IBM's AIX.
/---

:func.doc <<'/---'
[status: bool] :is_os_aix()

Report success if the current operating system is IBM's AIX.
/---

:func.doc <<'/---'
[status: bool] :is_os_hpux()

Report success if the current operating system is Hewlett Packard's HP-UX.
/---

#FIXME: Should probably be generalized to :is_os_trait_solaris(), yes?
#Unfortunately, it's unclear how to efficiently differentiate such variants.

:func.doc <<'/---'
[status: bool] :is_os_solaris()

Report success if the current operating system is a Solaris variant (e.g.,
Oracle Solaris, Sun Solaris, OpenSolaris, illumos).
/---

# ....................{ MAIN                               }....................
::define_os_testers
