#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

# *Indirect variable type validators* (i.e., functions validating the types of
# variables indirectly referring to other variables).
#
# == See Also ==
#
# * zy:../../*-test/*-scalar.zy, providing direct variable type validators.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under zy://help.zy in the main codebase.

#FIXME: For uniformity of implementation, public variable type validators (e.g.,
#:Int.is()) should also be defined below in a dynamic manner. Currently, such
#validators are defined manually in the main codebase -- which is quite
#cumbersome and error-prone.

#FIXME: Incidentally, optional arguments to exception handlers are silly. Do
#other high-level languages permit customization of core exception messages? No.
#Of course not. (Well, (O.K.: some do via inheritance, duck typing, and so on.
#But not *REALLY*.) If the caller *REALLY* wants a custom exception message, all
#they have to do is call the corresponding tester followed by ":die" and the
#desired message. Right? Nothing could be simpler.
#
#This is also sensible from an orthogonality perspective. Since exception
#handlers testing variadic argument lists cannot, by definition, accept optional
#exception messages, no exception handlers should.
#
#So, sadly, we *REALLY* need to excise this pattern of accepting optional error
#messages from the codebase. (We know; we know.)

# ....................{ GLOBALS                            }....................
# Glob matching float variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_FLOAT='float*'

# Glob matching integer variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_INT='integer*'

# Glob matching list variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_LIST='(array|list)*'

# Glob matching map variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_MAP='association*'

# Glob matching string variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_STR='scalar*'

# ....................{ GLOBALS ~ zeshy                    }....................
# Globs matching zeshy-specific types depending on the prior canonical types.

# Glob matching boolean variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_BOOL=${ZY__VAR_TYPE_GLOB_INT}

# Glob matching character variable type strings.
typeset -g ZY__VAR_TYPE_GLOB_CHAR=${ZY__VAR_TYPE_GLOB_STR}

# ....................{ GLOBALS ~ plural                   }....................
# Globs matching two or more of the prior canonical types.

# Glob matching type strings of *numeric variables* (i.e., floats and integers).
typeset -g ZY__VAR_TYPE_GLOB_NUMBER='(float|integer)*'

# Glob matching type strings of *scalar variables* (i.e., floats, integers, and
# strings).
typeset -g ZY__VAR_TYPE_GLOB_SCALAR='(float|integer|scalar)*'

# Glob matching type strings of *nonscalar variables* (i.e., lists and maps).
typeset -g ZY__VAR_TYPE_GLOB_NONSCALAR='(array|association|list)*'

# ....................{ MAIN                               }....................
() {
    local tester_code thrower_code

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with similar testers in zy://*-root/var/type.zy.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # For each zeshy-specific variable type and zsh-specific variable type glob
    # (i.e., glob matching zsh-specific variable type strings for all variables
    # of that type), define one or more exception handlers validating variables
    # of that type.
    local var_type_zeshy var_type_zsh_glob 
    for   var_type_zeshy var_type_zsh_glob (
        Bool       ${ZY__VAR_TYPE_GLOB_BOOL}
        Char       ${ZY__VAR_TYPE_GLOB_CHAR}
        Float      ${ZY__VAR_TYPE_GLOB_FLOAT}
        Int        ${ZY__VAR_TYPE_GLOB_INT}
        List       ${ZY__VAR_TYPE_GLOB_LIST}
        Map        ${ZY__VAR_TYPE_GLOB_MAP}
        Nonscalar  ${ZY__VAR_TYPE_GLOB_NONSCALAR}
        Number     ${ZY__VAR_TYPE_GLOB_NUMBER}
        Scalar     ${ZY__VAR_TYPE_GLOB_SCALAR}
        Str        ${ZY__VAR_TYPE_GLOB_STR}
    ) {
        # Function body for the tester validating the variables with the passed
        # names to both exist and be of the same type.
        tester_code='(( # )) || :die "Expected one or more variable names."
    # If only one variable name was passed, test this name without iteration.
    if (( # == 1 )) {
        [[ ${(tP)1-} == '${var_type_zsh_glob}'("-"*|) ]]
    # Else, multiple variable names were passed, requiring an iterative test.
    } else {
        # Temporarily clear the internal field separator (IFS). Failing to do
        # so here causes each string substitution performed below to be
        # delimited by whitespace; since matching such whitespace is
        # cumbersome, sidestep the issue entirely.
        local IFS=

        # Test such names iteratively. For efficiency, avoid explicit iteration
        # by condensing all such tests into a single dynamically evaluated
        # test. Dismantled, this is:
        #
        # * "${(e)...}", dynamically expanding the result of such expansion
        #   (e.g., "${(t)my_string1-}:${(t)my_string2-}:").
        # * "${...//.../...}", replacing each passed variable name with a string
        #   delimiting such name by "${(t)" and "-}:" (e.g., replacing a passed
        #   variable name "my_int" with "${(t)my_int-}:"), which zsh then expands
        #   to a ":"-delimited string of the types of such variables.
        # * "(#m)*", capturing the current variable name to ${MATCH}.
        # * "(...)(#c{#})", matching as many "scalar"-prefixed type strings as
        #   were passed variables, implying all such variables to be strings.
        #
        # Note that expansion "${(e)...}" *MUST* be double-quoted to permit
        # sane escaping of embedded expansion-reserved characters.
        [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
           ('${var_type_zsh_glob}'("-"[^:]#|)":")(#c${#}) ]]
    }'

        # Function body for the thrower validating the variables with the passed
        # names to both exist and be of the same type.
        thrower_code=${tester_code}' || {
        # Tailor the exception message to the first invalid variable.
        local var_name__vdut
        for   var_name__vdut ("${@}") {
            # If this variable does *NOT* exist, throw an exception. See
            # :var.is().
            (( ${+parameters[${var_name__vdut}]} )) || :die\
                ''Variable ${''${var_name__vdut}''} not found.''

            # If this variable is *NOT* of the appropriate type (as tested by
            # replicating the above test), throw an exception.
            [[ ${(tP)var_name__vdut-} == '${var_type_zsh_glob}'("-"*|) ]] || {
                :die ''Variable ${''${var_name__vdut}''} type ''${(tP)var_name__vdut-}'' not '${var_type_zsh_glob}' (i.e., :'${(L)var_type_zeshy}').''
            }
        }
    }'

        # Define the default such tester and thrower. Since the variable type
        # validation performed by these functions is optimized to *NOT* require
        # validation of variable existence *AND* since all public variable type
        # testers of the form :${var_type_zeshy}.is() necessarily perform such
        # validation, only private variable type testers of the form
        # ::${var_type_zeshy}.is() performing no such validation are defined
        # here. (While a blatantly minor optimization, we takes what we gets.)
        functions[::${var_type_zeshy}.is]=${tester_code}
        functions[:${var_type_zeshy}.die_unless]=${thrower_code}
    }
}
