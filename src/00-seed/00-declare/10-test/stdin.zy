#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under ={help} in the main codebase.

#FIXME: Manually rename all *CALLS* in the codebase:
#
#* From :stdin.die_unless_nonempty() to :stdin.die_unless_noninteractive().
#* From :stdin.is_nonempty() to :stdin.is_noninteractive().

# ....................{ EXCEPTIONS                         }....................
ZY__HELP_FUNCS+='
:void :stdin.die_unless_noninteractive()

Throw an exception unless standard input to the current context is
*non-interactively open* (i.e., attached to neither an interactive terminal or
the bit bucket).

See :stdin.is_noninteractive() for further details.
'
function :stdin.die_unless_noninteractive() {
    (( # == 0 )) || :die 'Expected no arguments.'

    :stdin.is_noninteractive ||
        :die 'Standard input closed or unreadable without blocking (e.g., attached to either an interactive terminal or the bit bucket).'
}

# ....................{ TESTERS                            }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# CAUTION: Ideally, a hypothetical :stdin.is_nonempty() function
# non-destructively testing whether at least one byte of standard input is
# readable in a non-blocking manner would be implemented here and then called
# widely throughout the codebase. Sadly, doing so deterministically and hence
# reliably is infeasible in *ALL* languages. This includes zsh. Why? Because of
# the following conflicting requirements:
#
# * Non-blocking testing requires immediacy.
# * Deterministic testing requires delaying indefinitely until the context on
#   the left-hand side of the pipe writing bytes to standard input has done. On
#   a system under:
#   * No load, this write typically consumes (0, 1] seconds.
#   * Heavy load, this write *COULD* consume (1, 10] seconds.
#
# Technically, there appears to be an edge-case exception to this
# non-deterministic behaviour: if standard input derives from a here-document or
# here-string, then zsh appears to synchronously and hence deterministically
# write the entirety of this input *BEFORE* running the context reading this
# input. In particular, the following code snippet *ALWAYS* succeeds in a
# deterministic, non-blocking, and non-destructive manner:
#
#     >>> { read -t 0 -k 1 -u 0 && print 'stdin: '$(:stdin) } <<< 'I am stdin.' 
#     stdin: I am stdin.
#
# Unfortunately, this fails to scale to standard input from any other source.
# Even if it did, the "-k 1" option destructively reads and hence consumes a
# character for all sources *EXCEPT* here-documents and here-strings.
#
# The only sane alternative is to simply test whether standard input is
# non-interactive and assume that, if this is the case, at least one byte of
# standard input is readable in a non-blocking manner.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ZY__HELP_FUNCS+='
[status=:bool] :stdin.is()

Report success if standard input to the current context is *open* (i.e.,
attached to either an existing pipe _or_ file other than the bit bucket).

This function typically reports failure only if the current process is
*headless* (i.e., _not_ running under a terminal process) and hence attached to
the bit bucket (e.g., `/dev/null`).
'
function :stdin.is() {
    (( # == 0 )) || :die 'Expected no arguments.'

    # If standard input is attached to either a terminal or pipe, this input is
    # by definition open. This is *NOT* merely an optimization. See the body of
    # :is_stdin_file_simple() for further details.
    :stdin.is_terminal || :stdin.is_pipe || {
        # Else, this input is open only if the target file to which this
        # input's symbolic link points both exists and is *NOT* the bit bucket.

        # Absolute path of this input's symbolic link.
        local stdin_target='/dev/stdin'

        # Absolute path of this input's transitive target. If this symbolic link
        # does not exist or does but this target does not, this assignment
        # silently reduces to a noop. In this case, that's fine.
        #
        # See the :set_string_to_symlink_target_last() function for details.
        stdin_target="${stdin_target:A}"

        # Report success only if:
        #
        # * This target exists.
        # * This target is *NOT* a directory (i.e., is a possibly special file).
        # * This target is *NOT* the bit bucket.
        [[ -e ${stdin_target} && ! -d ${stdin_target} &&
              ${stdin_target} != '/dev/null' ]]
    }
}


ZY__HELP_FUNCS+='
[status=:bool] :stdin.is_noninteractive()

Report success if standard input to the current context is *non-interactively
open* (i.e., attached to neither an interactive terminal or the bit bucket).

Success suggests (but, due to improbable but possible edge cases, does _not_
guarantee) that the caller may typically read this input without silently
blocking on interactive input. See :stdin.is_terminal() and :stdin.is() for
further details.
'
function :stdin.is_noninteractive() {
    (( # == 0 )) || :die 'Expected no arguments.'

    #FIXME: In theory, the following compound test should be efficiently
    #compressible into a single "[["- and "]]"-delimited test. This would have
    #the distinct advantages of:
    #
    #* Extreme optimization. This function appears to be called at least once
    #  per function definition, suggesting tangible benefits to optimizing.
    #* Permitting us to shift *ALL* other tester functions in this parcel back
    #  into the zy://10-root/ directory.

    # Standard input to the current context is non-interactively open if and
    # only if this input is:
    #
    # * *NOT* attached to an interactive terminal.
    # * Currently open, but *NOT* to the bit bucket.
    ! :stdin.is_terminal && :stdin.is
}


ZY__HELP_FUNCS+='
[status=:bool] :stdin.is_terminal()

Report success if standard input to the current context is an *interactive
terminal*.

== Blocking Behaviour ==

If standard input to the current context is an interactive terminal, attempting
to read this input will block the current process until the current user
interactively types either one character _or_ zero or more characters followed
by a newline (depending on the type of read performed).

Else, standard input is probably either a pipe or file, in which case reading
this input will block the current process only when this pipe or file has unread
bytes _and_ is still open for reading.

In either case, this function does _not_ provide a reliable means of testing
whether or not attempting to read standard input will block the current process.
To test this condition reliably, consider either iteratively calling
:stdin.is_nonempty() or non-iteratively calling
:is_stdin_pipe_or_file_simple() instead.
'
function :stdin.is_terminal() {
    (( # == 0 )) || :die 'Expected no arguments.'
    [[ -t 0 ]]
}


ZY__HELP_FUNCS+='
[status=:bool] :stdin.is_pipe()

Report success if standard input to the current context is a *pipe* (i.e., if
this context is any subcommand of a pipeline -- excluding the first such
subcommand, which receives no piped input).
'
function :stdin.is_pipe() {
    (( # == 0 )) || :die 'Expected no arguments.'
    [[ -p '/dev/stdin' ]]
}
