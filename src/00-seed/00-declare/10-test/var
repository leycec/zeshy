#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under @{help} in the main codebase.

#FIXME: Incidentally, optional arguments to exception handlers are silly. Do
#other high-level languages permit customization of core exception messages? No.
#Of course not. (Well, (O.K.: some do via inheritance, duck typing, and so on.
#But not *REALLY*.) If the caller *REALLY* wants a custom exception message, all
#they have to do is call the corresponding tester followed by ":die" and the
#desired message. Right? Nothing could be simpler.
#
#This is also sensible from an orthogonality perspective. Since exception
#handlers testing variadic argument lists cannot, by definition, accept optional
#exception messages, no exception handlers should.
#
#So, sadly, we *REALLY* need to excise this pattern of accepting optional error
#messages from the codebase. (We know; we know.)

# ....................{ MAIN                               }....................
() {
    local tester_code thrower_code

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with similar testers in ={*-main/var/type}.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # For each zeshy-specific variable type, human-readable label, and
    # zsh-specific variable type glob (i.e., glob matching zsh-specific
    # variable type strings for all variables of such type), define one or more
    # exception handlers validating variables of such type.
    local var_type_zeshy var_type_label var_type_zsh_glob 
    for   var_type_zeshy var_type_label var_type_zsh_glob (
        bool   boolean   'integer'
        char   character 'scalar'
        float  float     'float'
        int    integer   'integer'
        list   list      '(array|list)'
        map    map       'association'
        number number    '(integer|float)'
        scalar scalar    '(scalar|integer|float)'
        string string    'scalar'
    ) {
        # Function body for such tester.
        tester_code='(( # )) || :die "Expected one or more variable names."
    # If only one variable name was passed, test such name without iteration.
    if (( # == 1 )) {
        [[ ${(tP)1-} == '${var_type_zsh_glob}'("-"*|) ]]
    # Else, multiple variable names were passed, requiring an iterative test.
    } else {
        # Temporarily clear the internal field separator (IFS). Failing to do
        # so here causes each string substitution performed below to be
        # delimited by whitespace; since matching such whitespace is
        # cumbersome, sidestep the issue entirely.
        local IFS=

        # Test such names iteratively. For efficiency, avoid explicit iteration
        # by condensing all such tests into a single dynamically evaluated
        # test. Dismantled, this is:
        #
        # * "${(e)...}", dynamically expanding the result of such expansion
        #   (e.g., "${(t)my_string1-}:${(t)my_string2-}:").
        # * "${...//.../...}", replacing each passed variable name with a string
        #   delimiting such name by "${(t)" and "-}:" (e.g., replacing a passed
        #   variable name "my_int" with "${(t)my_int-}:"), which zsh then expands
        #   to a ":"-delimited string of the types of such variables.
        # * "(#m)*", capturing the current variable name to ${MATCH}.
        # * "(...)(#c{#})", matching as many "scalar"-prefixed type strings as
        #   there were passed variables, implying all such variables to be strings.
        #
        # Note that expansion "${(e)...}" *MUST* be double-quoted to permit
        # sane escaping of embedded expansion-reserved characters.
        [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
           ('${var_type_zsh_glob}'("-"[^:]#|)":")(#c${#}) ]]
    # Unless all such variables exist and are of such type, throw an exception.
    }'

        # Function body for such thrower.
        thrower_code=${tester_code}' || {
        # Tailor such exception message to the first invalid variable.
        local var_name__vdut
        for   var_name__vdut ("${@}") {
            # If such variable does *NOT* exist, throw an appropriate
            # exception. See :var_is().
            (( ${+parameters[${var_name__vdut}]} )) || :die\
                ''Variable ${''${var_name__vdut}''} not found.''

            # Else, such variable exists. If such variable is *NOT* of such
            # type (as tested by replicating the above test), throw an
            # appropriate exception.
            [[ "${(tP)var_name__vdut-}" == '${var_type_zsh_glob}'("-"*|) ]] || {
                :die ''Variable ${''${var_name__vdut}''} a ''${(tP)var_name__vdut-}'' rather than '${var_type_label}'.''
            }
        }
    }'

        # Define the default such tester and thrower. Since the variable type
        # validation performed by functions is optimized to *NOT* require
        # validation of variable existence *AND* since all :var.is_type_*()
        # functions necessarily perform such validation, instruct the caller to
        # call private ::var.is_type_*() functions performing no such
        # validation. (While a minor optimization, we takes what we gets.)
        functions[::var.is_type_${var_type_zeshy}]=${tester_code}
        functions[:var.die_unless_type_${var_type_zeshy}]=${thrower_code}
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: We're no longer entirely content with such nomenclature. For example,
#rather than ::var.is_type_int() and :var.die_unless_type_int(), we'd much
#rather have ::int_var.is() and :int_var.die_unless(). Naturally, we should
#adjust should nomenclature sooner than later. *sigh*
#FUXME: Actually, ":int_var"-style nomenclature is equally horrid, as we hardly
#intend to name every function whose first argument is an integer variable
#similarly. Instead, we accept that the current approach suffices.

    #FUXME: We no longer require such variables. Instead, embed the strings
    #initialized to such variables directly in the sole place where such
    #variables are expanded below.

# ....................{ TESTERS                            }....................
#FUXME: Arguably, the :is_var_*() variants should throw exceptions if any such
#variable does not exist. That's certainly how we implemented such functions
#before; unfortunately, refactoring such functions in such manner will require
#shifting both :var.die_unless() and :var.is() here. But, perhaps we'll
#eventually want to do so anyway? (Probably not an issue, considering how much
#other functionality we've shifted here already.)
#FUXME: However, note that tests for variable existence needn't be performed by
#the above exception handlers, for obvious reasons. For efficiency, then:
#
#* Rename all current :is_var_*() testers to ::is_var_*() (e.g., from
#  :var.is_type_list() to ::var.is_type_list()).
#* Make new :is_var_*() testers calling (in order):
#  * :var.die_unless().
#  * ::is_var_*().
#* Call ::is_var_*() rather than :is_var_*() from the corresponding exception
#  handlers.
#* Shift the new public :is_var_*() testers back into ={*-main/var}.
#FUXME: Given the triviality of such ::is_var_*() functions, it would probably
#be preferable to render them aliases rather than functions. (Again, for the
#*NERY* slight efficiency boost.) This probably will necessitate creating a new
#function ::var_type_zsh_glob.matches_args().

# # [status = :bool] :var.is_type_float(^:string var_name1, ...)
# function :var.is_type_float() {
#     (( # )) || :die 'Expected one or more variable names.'
#     :var.is_type_matches_glob "${@}" 'float'
# }
# 
# # [status = :bool] {:var.is_type_int, :var.is_type_bool}(
# #     ^:string var_name1, ...)
# function :var.is_type_int :var.is_type_bool() {
#     (( # )) || :die 'Expected one or more variable names.'
#     :var.is_type_matches_glob "${@}" 'integer'
# }
# 
# # [status = :bool] {:var.is_type_list, :list.is}(^:string var_name1, ...)
# function :var.is_type_list :list.is() {
#     (( # )) || :die 'Expected one or more variable names.'
#     :var.is_type_matches_glob "${@}" '(array|list)'
# }
# 
# # [status = :bool] {:var.is_type_map, :map.is}(^:string var_name1, ...)
# function :var.is_type_map :map.is() {
#     (( # )) || :die 'Expected one or more variable names.'
#     :var.is_type_matches_glob "${@}" 'association'
# }
# 
# # [status = :bool] {:var.is_type_string, :var.is_type_char}(^:string var_name1, ...)
# function :var.is_type_string :var.is_type_char() {
#     (( # )) || :die 'Expected one or more variable names.'
#     :var.is_type_matches_glob "${@}" 'scalar'
# }

#FUXME: Possibly globally rename:
#
#* :var.die_unless_type_*() to :var.die_unless_*().
#* :var.is_type_*() to :var.is_*().
#
#Consider the matter somewhat further -- namely, by examining code calling such
#functions.

        # If such type is non-scalar, also define succinctly named variants.
        # Avoid doing so for scalar types. Since scalar variables may be passed
        # directly to functions, the corresponding handlers for such variables
        # test values rather than variables (e.g., :int.die_unless() throws an
        # exception if the passed string is an integer value rather than if
        # such string is the name of an integer variable).
        # if [[ ${var_type_zeshy} == ('list'|'map') ]] {
        #     functions[:${var_type_zeshy}.is]=${tester_code}
        #     functions[:${var_type_zeshy}.die_unless]=${thrower_code}
        # }

        #FUXME: Insufficient. Clearly, such validation code *MUST* be
        #generalized to support arbitrarily many arguments: e.g.,
        #
        # [[ "${(e)${@//(#m)*/\${+${MATCH}\}}}" ==\
        #    1(#c${#}) ]]
        #
        #And don't neglect to apply such optimization to :var.is().
        #FUXME: Wait. O.K.; while the real :var.is_*() functions do require
        #such validation, we really want to call variants named ::var.is_*() in
        #function preambles, as such variants do *NOT* require such validation.
        #Hence, define only the ::var.is_*() functions below; then, in
        #={*-main/var}, define the :var.is_*() functions to defer to the
        #former. Simple, purportedly.

#:var.die_unless_type_*() function 
    # # Code prefixing the bodies of all functions defined below.
    # func_preamble='(( # )) || :die "Expected one or more variable names."
    # '

        # Prefix such tester by code validating all passed variables to exist
        # *AFTER* interpolating such code into such thrower. Since such thrower
        # need *NOT* perform such validation, omit such validation from such
        # thrower for efficiency.
    #     tester_code=${func_preamble}'
    # (( ${+parameters[${1}]} )) || :die\
    #     ''Variable ${''${1}''} not found.''
    # '${tester_code}

        #Honestly, we really just want to define :var.is() above.
    #FUXME: Also define all functions formerly calling
    #:var.is_type_matches_glob() here.

    # Unless all such variables exist and are of such type, throw an exception.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :var.is_type_matches_glob().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# ....................{ SHIFT ELSEWHERE                    }....................
#FUXME: O.K.; we *REALLY* want to revert to the prior technique of
#programmatically defining such functions. Yes, we know: this is rather
#unfortunate. But there it is. Optimizing with aliases is simply silly, overly
#fragile, and overkill, in this case; just go straight for the elegant
#solution. Then, shift *ALL* other content to ={*-main/var} (namely, the
#testers below).

# # :void :var.die_unless_type_bool(^:string var_name1, ...)
# function :var.die_unless_type_bool() {
#     :var.is_type_bool "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_bool 'boolean'
# }
# 
# # :void :var.die_unless_type_char(^:string var_name1, ...)
# function :var.die_unless_type_char() {
#     :var.is_type_char "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_char 'character'
# }
# 
# # :void :var.die_unless_type_float(^:string var_name1, ...)
# function :var.die_unless_type_float() {
#     :var.is_type_float "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_float 'float'
# }
# 
# # :void :var.die_unless_type_int(^:string var_name1, ...)
# function :var.die_unless_type_int() {
#     :var.is_type_int "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_int 'integer'
# }
# 
# # :void {:var.die_unless_type_list, :list.die_unless}(^:string var_name1, ...)
# function :var.die_unless_type_list :list.die_unless() {
#     :var.is_type_list "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_list 'list'
# }
# 
# # :void {:var.die_unless_type_map, :map.die_unless}(^:string var_name1, ...)
# function :var.die_unless_type_map :map.die_unless() {
#     :var.is_type_map "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_map 'map'
# }
# 
# # :void :var.die_unless_type_string(^:string var_name1, ...)
# function :var.die_unless_type_string() {
#     :var.is_type_string "${@}" || ::var.die_unless_tester_succeeds_of_label "${@}"\
#         :var.is_type_string 'string'
# }
# 
# # ....................{ EXCEPTIONS ~ private               }....................
# #FUXME: Document me.
# # :void ::var.die_unless_tester_succeeds_of_label(
# #     ^:string var_name1, ...,
# #     :string/func tester_name,
# #     :string var_type_label)
# function ::var.die_unless_tester_succeeds_of_label() {
#     (( # >= 3 )) || :die\
#         'Expected one or more variable names, one function name, and one variable label.'
#     ::var.die_unless_tester_succeeds_of_label,cause "${@}" ''
# }
# 
# #FUXME: Document me.
# # :void ::var.die_unless_tester_succeeds_of_label,cause(
# #     ^:string var_name1, ...,
# #     :string/func tester_name,
# #     :string var_type_label,
# #     :string exception_message_suffix)
# function ::var.die_unless_tester_succeeds_of_label,cause() {
#     # Validate sanity.
#     (( # >= 4 )) || :die\
#         'Expected one or more variable names, one function name, one variable label, and one exception message suffix.'
#     local\
#         tester_name__duvteovlc="${@[-3]}"\
#         var_label__duvteovlc="${@[-2]}"\
#         exception_message_suffix__duvteovlc="${@[-1]}"\
#         var_label_capped__duvteovlc\
#         var_label_lowered__duvteovlc\
#         exception_message__duvteovlc
#     :func.die_unless "${tester_name__duvteovlc}"
# 
#     # Pop such arguments. See pop_args_3() for further details.
#     argv[-3,-1]=()
# 
#     # If such function reports failure for any such variable, throw an
#     # exception with such variable's name and type label.
#     local var_name__duvteovlc
#     for   var_name__duvteovlc ("${@}") {
#         "${tester_name__duvteovlc}" "${var_name__duvteovlc}" || {
#             # Capitalized and lowercase variants of such variable type label.
#             # While demanding the caller pass a strictly lowercase type label
#             # would simplify such logic, this remains more robust.
#             var_label_capped__duvteovlc="${(C)var_label__duvteovlc[1]}${var_label__duvteovlc[2,-1]}"
#             var_label_lowered__duvteovlc="${(L)var_label__duvteovlc}"
# 
#             # Default exception message thrown below.
#             exception_message__duvteovlc=${var_label_capped__duvteovlc}' ${'${var_name__duvteovlc}'} not found or not a '${var_label_lowered__duvteovlc}'.'
# 
#             # If such exception message suffix is nonempty, throw the default
#             # exception message suffixed by such suffix.
#             if [[ -n "${exception_message_suffix__duvteovlc}" ]] {
#                 :die "${exception_message__duvteovlc} ${exception_message_suffix__duvteovlc}"
#             # Else, such exception message is empty. In such case, throw only
#             # the default exception message.
#             } else {
#                 :die "${exception_message__duvteovlc}"
#             }
#         }
#     }
# }

# # [status = :bool] :var.is_type_matches_glob(
# #     ^:string var_name1, ..., :glob type_glob)
# function :var.is_type_matches_glob() {
#     # Validate sanity.
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one type glob.'
#     :var.die_unless "${@[1,-2]}"
# 
#     # If only one variable name was passed, test such name without iteration.
#     if (( # == 2 )) {
#         [[ "${(tP)1-}" == ${~2}('-'*|) ]]
#     # Else, multiple variable names were passed.
#     } else {
#         # Temporarily clear the internal field separator (IFS). Failing to do
#         # so here causes each string substitution performed below to be
#         # delimited by whitespace; since matching such whitespace is
#         # cumbersome, sidestep the issue entirely.
#         local IFS=
# 
#         # Test such names iteratively. For efficiency, avoid explicit iteration
#         # by condensing all such tests into a single dynamically evaluated
#         # test. Dismantled, this is:
#         #
#         # * "${(e)...}", dynamically expanding the result of such expansion
#         #   (e.g., "${(t)my_string1-}:${(t)my_string2-}:").
#         # * "${...//.../...}", replacing each passed variable name with a string
#         #   delimiting such name by "${(t)" and "-}:" (e.g., replacing a passed
#         #   variable name "my_int" with "${(t)my_int-}:"), which zsh then expands
#         #   to a ":"-delimited string of the types of such variables.
#         # * "(#m)*", capturing the current variable name to ${MATCH}.
#         # * "(...)(#c{#})", matching as many "scalar"-prefixed type strings as
#         #   there were passed variables, implying all such variables to be strings.
#         [[ "${(e)${@[1,-2]//(#m)*/\${(t)${MATCH}-\}:}}" ==\
#             (${~@[-1]}('-'[^:]#|)':')(#c${#}) ]]  # quiet vim: "}"
#     }
# }

        # Capitalized variant of such variable label.
        # var_type_label_capped=${(C)var_type_label[1]}${var_type_label[2,-1]}

# # [status = :bool] :var.is_type_matches_glob(
# #     ^:string var_name1, ..., :glob type_glob)
# function :var.is_type_matches_glob() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one type glob.'
#     ::var.is_type_matches_glob "${@}"
# }

        #FUXME: Great! However, it'd be great to be able to extract the test
        #portion of such code into a function resembling
        #:var.is_type_matches_glob(). Hmm...

# (To test this, copy the
            # above test.)
        # # Space-delimited list of the names of all exception handlers
        # # validating variables of such type.
        # func_names=':var.die_unless_type_'${type}

        # # If such type is non-scalar, also define succinct exception handlers.
        # # Avoid doing so for scalar types. Since scalar variables may be passed
        # # directly to functions, the corresponding handlers for such variables
        # # test values rather than variables (e.g., :int.die_unless() throws an
        # # exception if the passed string is an integer value rather than if
        # # such string is the name of an integer variable).
        # if [[ ${type} == ('list'|'map') ]] {
        #     func_names+=':'${type}'.die_unless'
        # }

#FUXME: Actually, we'd probably just want optimized exception handlers --
#implying

    #FUXME: Call :var.die_unless() here.

#FUXME: Inefficient implementations. Due to the frequency with which such
#functions are called (think :string.set()), avoid the intermediate
#calls to *_of_cause() functions by inlining such implementations. Moreover,
#embedding such type globs directly in such calls when we have already have
#testers already doing so is both redundant and silly. Instead, refactor: e.g.,
#
# function :var.die_unless_type_bool() {
#     :var.is_type_bool "${@}" ||\
#         ::var.die_unless_tester_succeeds_of_label\
#             "${@}" :var.is_type_bool 'boolean'
# }
#FUXME: Naturally, globally rename all such handlers per above.

# ....................{ EXCEPTIONS ~ cause                 }....................
# #FUXME: While technically nice, we *NEVER* call such exception handlers
# #anywhere under @{*-start}. (Yes, we verified this.) Since they could be of use
# #nonetheless, shift such handlers elsewhere.
# 
# #FUXME: Document me.
# # :void :die_unless_var_bool_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_bool_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_bool "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" bool 'boolean' "${@[-1]}"
# }
# 
# #FUXME: Document me.
# # :void :die_unless_var_char_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_char_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_char "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" char 'character' "${@[-1]}"
# }
# 
# #FUXME: Document me.
# # :void :die_unless_var_float_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_float_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_float "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" float 'float' "${@[-1]}"
# }
# 
# #FUXME: Document me.
# # :void :die_unless_var_int_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_int_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_int "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" int 'integer' "${@[-1]}"
# }
# 
# #FUXME: Document me.
# # :void :die_unless_var_list_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_list_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_list "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" list 'list' "${@[-1]}"
# }
# 
# #FUXME: Document me.
# # :void :die_unless_var_map_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_map_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_map "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" map 'map' "${@[-1]}"
# }
# 
# #FUXME: Document me.
# # :void :die_unless_var_string_of_cause(
# #     ^:string var_name1, ...,
# #     :string exception_message)
# function :die_unless_var_string_of_cause() {
#     (( # >= 2 )) || :die\
#         'Expected one or more variable names and one exception message.'
#     :var.is_type_string "${@[1,-2]}" ||\
#         ::var.die_unless_tester_succeeds_of_label,cause\
#             "${@[1,-2]}" string 'string' "${@[-1]}"
# }

#         ::var.die_unless_type_equals_of_var_label\
#             "${@[1,-2]}" bool 'boolean'
    #FUXME: We're seeing such functionality repeated a bit. Perhaps we want to
    #shift :func.die_unless() and :func.is() here as well?

#FUXME: The additional nice thing about the above approach is that we can then
#shift the front-end :is_var_*() testers, which are no longer required here
#(and should never be) to @{*-main/var/type}.

#FUXME: Honestly, we should probably just excise the shorthand :is_list(),
#:is_map(), and :is_string() variants entirely. Such variants contribute little
#to nothing, particularly as we're pretty much using them *WRONG* wherever we
#currently call them. (Since we generally want exceptions to be thrown if such
#variables do *NOT* exist, we want to be calling the longhand :var.is_type_list(),
#:var.is_type_map(), and :is_vap_string() variants instead.)

    # If such function does *NOT* exist, throw an exception. See
    # :func.die_unless() for further details.
    # (( ${+functions[${var_tester_func_name}]} )) || :die\
    #     'Variable type "'${var_type__duvteovlc}'" unrecognized (i.e., function '${var_tester_func_name}'() undefined).'

    # :var.is_type_bool "${@}" ||
    #     ::var.die_unless_tester_succeeds_of_label "${@}" bool 'boolean'
#FUXME: Implement me, and refactor the prior function to call this function.
#FUXME: Document me.

# # :void ::die_unless_var_type_equals_of_cause(
# #    ^:string var_name1, ...,
# #    :string var_type_zeshy,
# #    :string exception_message)
# function ::die_unless_var_type_equals_of_cause() {
#     # Validate sanity.
#     (( # >= 3 )) || :die\
#         'Expected one or more variable names, one variable type, and one exception message.'
#     local\
#         var_type__duvteoc="${@[-2]}"\
#         exception_message__duvteoc="${@[-1]}"\
#         var_tester_func_name
# 
#     # Pop such arguments. See pop_args_2() for further details.
#     argv[-2,-1]=()
# 
#     #FUXME: We're seeing such functionality repeated a bit. Perhaps we want to
#     #shift :func.die_unless() and :func.is() here as well?
# 
#     # If such function does *NOT* exist, throw an exception. See
#     # :func.die_unless() for further details.
#     var_tester_func_name=":is_var_${var_type__duvteoc}"
#     (( ${+functions[${var_tester_func_name}]} )) || :die\
#         'Variable type "'${var_type__duvteoc}'" unrecognized (i.e., function '${var_tester_func_name}'() undefined).'
# 
#     # If such function reports failure for any such variable, throw an
#     # exception with such variable's name and type label.
#     local var_name__duvteoc
#     for   var_name__duvteoc ("${@}") {
#         "${var_tester_func_name}" "${var_name__duvteoc}" || {
#             # Capitalized and lowercase variants of such variable type label.
#             # While demanding the caller pass a strictly lowercase type label
#             # would simplify such logic, this remains more robust.
#             local\
#                 var_type_label_capped__duvteoc="${(C)var_type_label__duvteoc[1]}${var_type_label__duvteoc[2,-1]}"
# .
#                 var_type_label_lowered__duvteoc="${(L)var_type_label__duvteoc}"
# 
#             # Throw such exception.
#             :die ${var_type_label_capped__duvteoc}' ${'${var_name__duvteoc}'} not found or not a '${var_type_label_lowered__duvteoc}'.'
#         }
#     }
# }

#FUXME: Define a new utility function
#
# :void :die_unless_func_succeeds(
#    :string:func func_name,
#    :string func_arg1, ...,
#    :string )

    # :var.is_type_float "${@}" || {
    #     local var_name
    #     for   var_name ("${@}") {
    #         :var.is_type_float "${var_name}" || :die\
    #             'Float ${'${var_name}'} not found or not a float.'
    #     }
    # }

 # In such documentation, note the passed label should be
#strictly lowercase.
#FUXME: Document all functions below.

    # See :is_string() for further details.
    # (( # )) || :die 'Expected one or more variable names.'
    # (( # == 1 )) && [[ "${(tP)1-}" == ('array'|'list')* ]] || {
    #     local IFS= [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
    #         (('array'|'list')[^:]#':')(#c${#}) ]]  # quiet vim: "}"
    # }

    # See :is_string() for further details.
    # (( # )) || :die 'Expected one or more variable names.'
    # (( # == 1 )) && [[ "${(tP)1-}" == 'association'* ]] || {
    #     local IFS=
    #     [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
    #         ('association'[^:]#':')(#c${#}) ]]  # quiet vim: "}"
    # }

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with testers above and below.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate sanity.
    # (( # )) || :die 'Expected one or more variable names.'

    # # If only one variable name was passed, test such name without iteration.
    # (( # == 1 )) &&
    #     [[ "${(tP)1-}" == 'scalar'* ]] ||
    # # Else, multiple variable names were passed.
    # {
    #     # Temporarily clear the internal field separator (IFS). Failing to do
    #     # so here causes each string substitution performed below to be
    #     # delimited by whitespace; since matching such whitespace is
    #     # cumbersome, sidestep the issue entirely.
    #     local IFS=

    #     # Test such names iteratively. For efficiency, avoid explicit iteration
    #     # by condensing all such tests into a single dynamically evaluated
    #     # test. Dismantled, this is:
    #     #
    #     # * "${(e)...}", dynamically expanding the result of such expansion
    #     #   (e.g., "${(t)my_string1-}:${(t)my_string2-}:").
    #     # * "${@//.../...}", replacing each passed variable name with a string
    #     #   delimiting such name by "${(t)" and "-}:" (e.g., replacing a passed
    #     #   variable name "my_int" with "${(t)my_int-}:"), which zsh then expands
    #     #   to a ":"-delimited string of the types of such variables.
    #     # * "(#m)*", capturing the current variable name to ${MATCH}.
    #     # * "(...)(#c{#})", matching as many "scalar"-prefixed type strings as
    #     #   there were passed variables, implying all such variables to be strings.
    #     [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
    #         ('scalar'[^:]#':')(#c${#}) ]]  # quiet vim: "}"
    # }

    # See :is_string() for further details.
    # (( # )) || :die 'Expected one or more variable names.'
    # (( # == 1 )) && [[ "${(tP)1-}" == 'float'* ]] || {
    #     local IFS=
    #     [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
    #         ('float'[^:]#':')(#c${#}) ]]  # quiet vim: "}"
    # }

    # See :is_string() for further details.
    # (( # )) || :die 'Expected one or more variable names.'
    # (( # == 1 )) && [[ "${(tP)1-}" == 'integer'* ]] || {
    #     local IFS=
    #     [[ "${(e)${@//(#m)*/\${(t)${MATCH}-\}:}}" ==\
    #         ('integer'[^:]#':')(#c${#}) ]]  # quiet vim: "}"
    # }

#type_glob="${@[-1]}" 
#FUXME: Too much repetition below. Define a new private utility function
# [status = :bool] :var.is_type_matches_glob(
#     ^:string var_name1, ..., :glob glob)

#FUXME: Unconvinced the multiple-argument variant of these functions actually
#works! Fairly certain we require parameter expnasion flag "(e)". Contemplate.
#FUXME: Awesome. Replicate below for lists and maps *AFTER* we double-check
#this as working as intended.

#FUXME: Now that we basically no longer need to manually call such low-level
#handlers, there's little reason to retain the shorthand of :var.is_type_list(),
#:is_map(), and :is_string().

    # if { zselect -t 0 -a zselect_status -r 0 } {
    #     exit_status="${status}"
    # }
