#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *exported global variable declarers* (i.e., functions declaring global
variables exported to the parent shell or script).
/---

# ....................{ DECLARERS                          }....................
# Since nonscalar globals cannot be exported (by POSIX mandate) *AND* since
# unconditionally exporting scalar globals would introduce unwanted side
# effects (e.g., implicit inheritance of such globals by children shells,
# conflicting with discovery of zeshy-specific globals at digest compilation
# time), declare only scalar export declarers.

:alias_command ':void :float_global_export(:string var_names_and_value)'\
    "::global :float 'export -F --'" <<'/---'
Globally declare all passed `=`-delimited float variables to be exported to the
parent shell or script, initialized to the `=`-prefixed value suffixing such
string if any or 0 otherwise. See :float() and :string_global_export().
/---

:alias_command ':void :int_global_export(:string var_names_and_value)'\
    "::global :int 'export -i --'" <<'/---'
Globally declare all passed `=`-delimited integer variables to be exported to
the parent shell or script, initialized to the `=`-prefixed value suffixing
such string if any or 0 otherwise. See :int() and :string_global_export().
/---

# ....................{ DECLARERS ~ string                 }....................
:alias_command ':void :string_global_export(:string var_names_and_value)'\
    "::global :string 'export --'" <<'/---'
Globally declare all passed `=`-delimited string variables to be exported to
the parent shell or script, initialized to the `=`-prefixed value suffixing
such string if any or the empty string otherwise. See :string().
/---

#FIXME: Redefine such alias in terms of ::global() or a new function similar to
#::global() specific to tied variables. For now, the following suffices.

:alias_command ':void ":string_global_export,list_global_tied_on_char"(
    :string string_name_and_value,
    :string list_name,
    :char separator = ":")'\
    'export -T --' <<'/---'
Globally declare the passed string variable to be exported to the parent shell
or script and the passed list variable to _not_ be exported to such shell or
script ``tied'' on the passed separating character (defaulting to `:`),
overwriting any prior values for either variables if previously declared. See
:string,list_tied_on_char() and :string_global_export().
/---

# ....................{ DECLARERS ~ sub                    }....................
:alias_command ':void :char_global_export(:string var_names_and_value)'\
    "::global :char 'export --'" <<'/---'
Globally declare all passed `=`-delimited character variables to be exported to
the parent shell or script, initialized to the `=`-prefixed value suffixing
such string if any or ${false} otherwise. See :char() and
:string_global_export().
/---

:alias_command ':void :bool_global_export(:string var_names_and_value)'\
    "::global :bool 'export -i --'" <<'/---'
Globally declare all passed `=`-delimited boolean variables to be exported to
the parent shell or script, initialized to the `=`-prefixed value suffixing
such string if any or ${false} otherwise. See :bool() and
:string_global_export().
/---

:alias_command ':void :file_descriptor_global_export(
    :string var_names_and_value)'\
    "::global :file_descriptor 'export -i --'" <<'/---'
Globally declare all passed `=`-delimited file descriptor variables to be
exported to the parent shell or script, initialized to the `=`-prefixed value
suffixing such string if any or 0 otherwise. See :file_descriptor() and
:string_global_export().
/---

# --------------------( WASTELANDS                         )--------------------
