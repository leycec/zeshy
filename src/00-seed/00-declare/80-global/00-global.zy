#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Global variable declarers* (i.e., functions declaring global variables).
/---

# ....................{ GLOBALS ~ private                  }....................
:global.doc <<'/---'
:str ZY__GLOBAL_TYPE_ZESHY

*`zeshy` type* (i.e., `zeshy`-specific `:`-prefixed variable type) for the
currently declared global.

This private global is intended to be referenced _only_ by ::global() and
cohort.
/---
typeset -g ZY__GLOBAL_TYPE_ZESHY


:global.doc <<'/---'
:str ZY__GLOBAL_TYPE_ZSH

*`zsh` type* (i.e., `zsh`-specific builtin name and zero or more arguments
declaring variables of such type) for the currently declared global.

This private global is intended to be referenced _only_ by ::global() and
cohort.
/---
typeset -g ZY__GLOBAL_TYPE_ZSH


:global.doc <<'/---'
:str ZY__GLOBAL_PROTOTYPE

*Prototype* (i.e., `=`-delimited list of one or more variable names and
optional value) for the currently declared global.

This private global is intended to be referenced _only_ by ::global() and
cohort.
/---
typeset -g ZY__GLOBAL_PROTOTYPE


:global.doc <<'/---'
:str ZY__GLOBAL_NAME

Currently parsed name for the currently declared global.

This private global is intended to be referenced _only_ by ::global() and
cohort.
/---
typeset -g ZY__GLOBAL_NAME


:global.doc <<'/---'
:str ZY__GLOBAL_VALUE

Initial value the currently declared global, parsed from such global's
prototype.

This private global is intended to be referenced _only_ by ::global() and
cohort.
/---
typeset -g ZY__GLOBAL_VALUE

# ....................{ DECLARERS                          }....................
:func_ ':void ::global[
    args=( :str global_type_zeshy
           :str global_type_zsh
           :str global_names_and_value)
    stdin=(:str global_asciidoc)] [is_args_unhandled]' :func{
    (( # == 3 )) || :die\
        'Expected one zeshy global type, one zsh global type, and one global declaration.'
    ZY__GLOBAL_TYPE_ZESHY=${1}
    ZY__GLOBAL_TYPE_ZSH=${2}
    ZY__GLOBAL_PROTOTYPE=${3}

    #FIXME: Generalize this exception handling into a new function
    #::global.die_of_cause() defined in a new parcel :{die}.

    # If this prototype is syntactically invalid, throw an exception.
    [[ ${ZY__GLOBAL_PROTOTYPE} == ${~ZY__GLOBAL_DECLARATION_GLOB} ]] || :die\
        $(:parcel.label)'global prototype invalid:'$'\n\n'${ZY__GLOBAL_TYPE_ZESHY}' '${ZY__GLOBAL_PROTOTYPE}
    # Else, this prototype is syntactically valid.

    #FIXME: Consider excising both ${ZY__GLOBAL_NAME} and ${ZY__GLOBAL_VALUE},
    #replacing all references to such globals below by simply ${match[1]} and
    #${match[2]} respectively. They're mostly just vestiges of the awful prior
    #approach in which we attempted to accept multiple global names.

    # Global name declared by this prototype, guaranteed to be non-empty.
    ZY__GLOBAL_NAME="${match[1]}"

    # Global value declared by this prototype, possibly empty.
    ZY__GLOBAL_VALUE="${match[2]}"

    # If this prototype also declared an initial value *AND* this zeshy-specific
    # type is nonscalar, throw an exception. Nonscalar variables *CANNOT* be
    # initialized at declaration time.
    if (( ${#ZY__GLOBAL_VALUE} )) &&
        [[ ${ZY__GLOBAL_TYPE_ZESHY} == ':'('list'|'map') ]] {
        :die $(:parcel.label)${ZY__GLOBAL_TYPE_ZESHY}' global ${'${ZY__GLOBAL_NAME}'} nonscalar and hence uninitializable at declaration time:'$'\n\n'${ZY__GLOBAL_TYPE_ZESHY}' '${ZY__GLOBAL_PROTOTYPE}
    }

    # Declare this global. Since the declarator is typically an alias rather
    # than function or pathable, zsh requires evaluating rather than running
    # this declarator. While acceptable, this is somewhat... annoying.
    #
    # Before doing so, we should ideally test whether this global already exists
    # and if so either throw an exception or print a warning. Unfortunately,
    # there exists no efficient means of implementing this test. While there do
    # exist efficient means of testing whether a variable either local or global
    # exists and whether this variable in the *CURRENT* scope is local or global,
    # the only means of testing whether a global exists is to parse the output
    # of "typeset -gx +" for a line matching this global's name. While this
    # parsing could conceivably be efficient for infrequent purposes, declaring
    # globals is hardly infrequent.
    #
    # Declare this global initialized to the default value for this type.
    # Dismantled, this is:
    #
    # * "${(z)...}", splitting this type declarator command on whitespace,
    #   as required by the "zsh" interpreter (e.g., splitting "typeset -g"
    #   into "typeset" and "-g").
    # print 'declaring: '${(z)ZY__GLOBAL_TYPE_ZSH}' '${ZY__GLOBAL_NAME}
    ${(z)ZY__GLOBAL_TYPE_ZSH} ${ZY__GLOBAL_NAME}

    # If initializing this global to any value other than the empty string,
    # do so. Regardless of variable type, there exists no qualitative
    # difference between explicitly initializing a global to the empty
    # string and performing no such initialization; in the latter case,
    # this global will be implicitly initialized to the empty string.
    # Hence, we need not distinguish between these cases here.
    if (( ${#ZY__GLOBAL_VALUE} )) {
        # Initialize this global to this value. See :Str.set().
        #
        # If this value is a single- or double-quoted string containing
        # format-specific escapes (e.g., "''" escapes in single-quoted
        # strings, '\"' escapes in double-quoted strings), these escapes
        # *MUST* be expanded as if this value had been defined as a zsh
        # string literal. Assuming the above glob captures such prefixing
        # and suffixing quote delimiters (which it currently does),
        # removing one level of quotes from this value suffices to both
        # remove these delimiters *AND* expands these escapes (while
        # preserving unquoted numeric values as is).
        : "${(P)ZY__GLOBAL_NAME::=${(Q)ZY__GLOBAL_VALUE}}"
    }

    #FIXME: Fairly lame. See @{*-alias} for commentary.
    # Add this global to the current parcel.
    :parcel.add_global "${ZY_PARCEL_NAME}" "${ZY__GLOBAL_NAME}"

    #FIXME: Can this function benefit from similar optimization? The answer is
    #almost certainly *YES*.
    #FIXME: Simplify this function to no longer accept a variadic argument list
    #of global names but rather only a single global name. (Well... we sure
    #overkilled that one, didn't we?)

    # Document these globals *AFTER* successfully defining these globals.
    ::global.doc_prototype_from_stdin_if_nonempty\
        "${ZY__GLOBAL_NAME}" "${ZY__GLOBAL_PROTOTYPE}"

#FIXME: Documentation largelly outdated. *sigh*
}:func <<'/---'
Declare the passed global contained by the current parcel and documented by the
passed help string, where such variable is specified by either:

* The passed variable type and name arguments, if such arguments are passed.
* The variable declaration prefixing the passed help string, otherwise.

If a variable name is passed, a `zeshy`-specific variable type must also be
passed (e.g., `boolean`, `string`). If this name contains a `=` delimiter _and_
such type is:

* *Scalar* (e.g., `integer`, `string`), the (possibly empty) substring of such
  name following such delimiter defines the *initial value* to initialize such
  global to: e.g.,
+
.::global() Scalar Initialization
==========================================
[source]
------------------------------------------
>>> ::global :str on_industry=\
...     "If a man walk in the woods for love of them half of each day, he is in
...      danger of being regarded as a loafer; but if he spends his whole day as
...      a speculator, shearing off those woods and making Earth bald before her
...      time, he is esteemed an industrious and enterprising citizen. As if a
...      town had no interest in its forests but to cut them down!"\
...     "Most men would feel insulted if it were proposed to employ them in
...      throwing stones over a wall, and then in throwing them back, merely
...      that they might earn their wages. But many are no more worthily
...      employed now."
>>> get_string_line "${on_industry}" -1
town had no interest in its forests but to cut them down!
------------------------------------------
==========================================
* *Nonscalar* (e.g., `list`, `map`), an exception is thrown. As with customary
  `zsh` variable declarations, nonscalar globals may only be initialized to an
  initial value _after_ rather than when declaring such globals: e.g.,
+
.::global() Nonscalar Initialization
==========================================
[source]
------------------------------------------
>>> ::global "
...     list on_anarchism
...
...     Anarchism is not a romantic fable but the hardheaded realization, based
...     on five thousand years of experience, that we cannot entrust the
...     management of our lives to kings, priests, politicians, generals, and
...     county commissioners."
>>> on_anarchism=(
...     "Anarchism is founded on the observation that since few men are wise"
...     "enough to rule themselves, even fewer are wise enough to rule others."
... )
>>> :stdout.echo "${on_anarchism[1]}"
Anarchism is founded on the observation that since few men are wise
------------------------------------------
==========================================

== Variable Type ==

A global's type may be any alphanumeric string for which an alias of the same
name suffixed by `_global_export` exists. Hence, `file_descriptor` is a valid
global type but `order_of_the_blackened_denarius` is not, since
file_descriptor_global_export() is an existing alias but
order_of_the_blackened_denarius_global_export() is (hopefully) not.

`zeshy` provides numerous such aliases and hence variable types, including:
:bool(), :char(), :float(), :int(), :list(), :listset(), :map(), and :str().

== Variable Documentation ==

Global help strings consist of:

. A *variable declaration* in `zeshy`-specific C-like syntax consisting of one
  variable type and name (e.g., `list DOG_EAT_DOG_WORLD`), if such type and name
  were _not_ passed as arguments already.
. A *variable description* in http://asciidoc.org[AsciiDoc] syntax, augmented
  with `zeshy`-specific markup for cross-referencing other `zeshy` documentation.
  Since single- and double-quoted `zsh` string syntax conflicts with such syntax,
  consider passing such description to declare_global_with_stdin() as a
  here-document on standard input instead.

For completeness, we specify such syntax as a
http://en.wikipedia.org/wiki/Parsing_expression_grammar[Parser Expression Grammar (PEG)]:
See the <<:func.peg,function documentation PEG>> from which this PEG
derives for all productions not listed here (e.g., AsciiDoc, Type, Whitespace):

.Variable Documentation Grammar
[cols=">strong,^,<"]
|===============================================================================
| GlobalDocumentation   | <- | GlobalDeclaration Whitespace+ AsciiDoc
| GlobalDeclaration     | <- | Whitespace* Type Whitespace+ GlobalName
| GlobalName            | <- | AlphanumericString
|===============================================================================
/---

#FIXME: Test the above ::global() function.
# () {
#     ::global :str  'typeset -g  --' muh_str='I am a string.'
#     ::global :list 'typeset -ga --' muh_list
#     print '!!!!!!!!!!!!!!!!!!!!'
#     print 'muh_str: '${muh_str}
#     print 'muh_list: '${muh_list[@]}
#     print '!!!!!!!!!!!!!!!!!!!!'
#     # :die
# }
