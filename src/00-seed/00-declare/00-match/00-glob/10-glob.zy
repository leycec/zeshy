#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Convert into parcel documentation.
# --------------------( SYNOPSIS                           )--------------------
# Define documentation-specific globs.

# ....................{ GLOBALS                            }....................
ZY__HELP_GLOBALS+='
:str ZY__GLOBAL_DECLARATION_GLOB

Extended glob expression matching the mandatory name and optional initial value
from a global variable declaration.

This glob does *not* match the mandatory type from such declarations, as that is
trivially matched by shell word splitting.
'
typeset -g ZY__GLOBAL_DECLARATION_GLOB


ZY__HELP_GLOBALS+='
:str ZY__HELP_GLOB

Extended glob expression matching high-level features in alias, function, and
global documentation.

== Match Groups ==

This glob captures the following substrings from this documentation:

* `${match[1]}`, the prototype prefixing this documentation suffixed by a
  *blank line* (i.e., two consecutive newlines, optionally delimited by zero or
  more tab or space characters).
* `${match[2]}`, the non-prototype remainder of this documentation --
  presumably in AsciiDoc format.

This glob attempts to match _no_ low-level syntax in this documentation.
'
typeset -g ZY__HELP_GLOB


ZY__HELP_GLOBALS+='
:str ZY__VAR_NAME_GLOB

Extended glob expression matching POSIX-compliant shell variable names.

== See Also ==

* ${ZY__VAR_NAME_PCRE}, the equivalent PCRE matching the same set of strings.
'
typeset -g ZY__VAR_NAME_GLOB=${ZY__VAR_NAME_CLASS_FIRST}${ZY__VAR_NAME_CLASS_REST}'#'

# ....................{ MAIN                               }....................
# Define such globs in an anonymous block to permit definition of locals. Since
# subsequent locals often depend on prior locals, only define one local a line.
() {
    # Enable group capturing for the remainder of the current glob.
    local enable_capturing='(#b)'

    # Disable group capturing for the remainder of the current glob.
    local disable_capturing='(#B)'

    # Global variable name.
    #
    # Note that the ${ZY__VAR_NAME_CLASS_FIRST} and ${ZY__VAR_NAME_CLASS_REST}
    # global variables are previously declared by
    # zy:if_compile/*.macro/*-pcre.zy for reusability elsewhere (e.g., here).
    local global_name=${ZY__VAR_NAME_GLOB}
    local global_name_grouped=${enable_capturing}'('${global_name}')'

    # Global scalar variable type, comprising all remaining "="-prefixed text if
    # any. By zsh constraint, global declarations prohibit global nonscalar
    # variables (e.g., lists) from being initialized.
    local global_type_grouped=${enable_capturing}'=(*)'
    local global_type_optional_grouped=${disable_capturing}'('${global_type_grouped}'|)'

    # Glob matching the mandatory name and optional initial value -- but *NOT*
    # the mandatory type, which is matched with simple shell word splitting --
    # from a global variable declaration 
    ZY__GLOBAL_DECLARATION_GLOB=${global_name_grouped}${global_type_optional_grouped}

    # Glob matching a blank line (i.e., two consecutive newlines optionally
    # delimited by zero or more tab or space characters).
    local blank_line_glob=$'\n''[ '$'\t'']#'$'\n'

    # Glob capturing the prototype and non-prototype portions of documentation.
    ZY__HELP_GLOB='[[:space:]]#(#b)(^(#B)(*'${blank_line_glob}'*))'${blank_line_glob}'(#b)(*)'
}

#FIXME: In lieu of unit tests...
# function zuzu() {
#     local yamy='
# [status: int] TRAPZERR(int signal_number = SIGZERR)
# 
# Trap SIGZERR, a `zsh`-specific signal triggered by `zsh` on any.
# 
# Command reporting *unhandled failure* (i.e., nonzero exit status _not_.
# 
# '
#     if [[ "${yamy}" == ${~ZY__HELP_GLOB} ]] {
#         print "match[1]: ${match[1]}"
#         print "match[2]: ${match[2]}"
#     } else {
#         print 'Ugh!'
#     }
# }
