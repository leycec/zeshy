#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Convert into parcel documentation.
# --------------------( SYNOPSIS                           )--------------------
# Debug PCREs (e.g., with a trace of the matching process).

# ....................{ EXCEPTIONS                         }....................
ZY__HELP_FUNCS+='
:void :pcre.die_unless_debuggable()

Throw an exception unless PCREs are debuggable on the current system.

== See Also ==

* :pcre.is_debuggable().
'
function :pcre.die_unless_debuggable() {
    (( ! # )) || :die 'Expected no arguments.'
    :pcre.is_debuggable || :die\
        'PCREs not debuggable; "pcretest" not in the current ${PATH}.'
}

# ....................{ TESTER                             }....................
ZY__HELP_FUNCS+='
[status=:bool] :pcre.is_debuggable()

Report success only if PCREs are debuggable on the current system.

PCREs are only considered to be ``debuggable'' if the external `pcretest`
command bundled by default with `libpcre` is in the current `${PATH}`. Since
the `zsh/pcre` module requires `libpcre`, this command will almost always be
available when PCRE functionality is available.
'
function :pcre.is_debuggable() {
    # Dismantled, this is:
    #
    # * "${:-...}", expanding to the string "pcretest".
    # * "${...:c}", expanding to the absolute path of "pcretest" if in the
    #   current $PATH or only "pcretest" otherwise.
    # * "-x", returning true if such path is executable and hence installed.
    #   Unless the current directory contains an executable "pcretest", this
    #   returns true only if ":c" expanded to an absolute path.
    (( ! # )) || :die 'Expected no arguments.'
    [[ -x "${${:-pcretest}:c}" ]]
}

# ....................{ DEBUGGER                           }....................
ZY__HELP_FUNCS+='
:void :pcre.debug(:str pcre :str subject)

Debug the passed subject string against the passed PCRE.

This function prints an iterative trace of the matching process to stdout.
'
function :pcre.debug() {
    (( # == 2 )) || :die 'Expected one PCRE and one subject string.'
    local pcre=${1} subject=${2} pcretest_input
    :pcre.die_unless_debuggable

    # Unfortunately, the "pcretest" command was designed with interactive rather
    # than non-interactive use in mind. Complications include:
    #
    # * While "pcretest" does accept input from stdin, this input is interleaved
    #   with output and hence expected to be interactive. Instead (in order):
    #   1. A temporary file containing this input must be written.
    #   2. The absolute path of this file must be passed to "pcretest".
    #   3. This file must be deleted.
    # * "pcretest" requires this file to contain the PCRE *AND* subject string.
    # * This PCRE must be delimited by any arbitrary ASCII characters excluding
    #   "\" (e.g., "/"). Any such character in this PCRE must be explicitly
    #   escaped (e.g., "\/"). Unlike the subject string, this PCRE may span
    #   multiple lines without issue.
    # * The subject string must span only a single line. To support multiline
    #   subject strings, all newlines in such string must be explicitly
    #   converted from true newline characters to the corresponding
    #   PCRE-specific substring matching such characters. For sanity, all
    #   newlines in the subject string are assumed to be Unix rather than
    #   Windows newlines. In this case, all Unix newlines in such string must be
    #   explicitly converted to "\n" substrings.
    #
    # While this is mildly horrible, there appears to exist no CLI-based
    # alternative to "pcretest". (All comparable utilities are GUI-based.)

    # Contents of the temporary file to be passed to "pcretest" below.
    # Dismantled, this is:
    #
    # * "~", an arbitrary character delimiting such PCRE from subject
    #   string. While any character would do, "~" is fairly rare punctuation
    #   _not_ reserved by PCRE syntax and hence unlikely to appear in such
    #   PCRE. The suffixing delimiter is followed by the following PCRE
    #   compilation options:
    #   * "+", printing the unmatched remainder of the subject string.
    #   * "C", printing a trace of the matching process.
    #   * "I", printing additional metadata about such PCRE.
    # * "${pcre...}", escaping all delimiter characters in such PCRE.
    # * "${subject...}", converting all Unix newlines in such subject string
    #   to literal "\n" substrings.
    pcretest_input='~'${pcre//~/\\~}'~+CI'$'\n'${subject//$'\n'/\\n}
    # print -r '"pcretest" input: '$'\n'${pcretest_input}

    # Create this temporary file with these contents by passing the absolute
    # path of the temporary file created by a "=("-prefixed process
    # substitution to an anonymous function, which guarantees such file to
    # be deleted on such function returning. While obscure, this is well-
    # known to be the most robust means of cross-portably writing a string
    # to a temporary file. To quote the official zsh news:
    #
    #    "=(<<<...) is optimised to eliminate the need for an external
    #     process. It writes the given string to a file and substitutes the
    #     name on the command line."
    #
    # Moreover:
    #
    #    "A general workaround to ensure a process substitution endures for
    #     an appropriate length of time is to pass it as a parameter to an
    #     anonymous shell function (a piece of shell code that is run
    #     immediately with function scope)... The temporary file created by
    #     the process substitution will be deleted when the function exits."
    () {
        # Absolute path of the temporary file created by the "=("-prefixed
        # process substitution passed to this anonymous function.
        local pcretest_input_filename=${1}
        # print '"pcretest" input file:'$'\n'; cat "${pcretest_input_filename}"

        # Append "pcretest" output to the exception message to be thrown.
        # Dismantled, this is:
        #
        # * "-q", quietly suppressing the current version of this command.
        command pcretest -q "${pcretest_input_filename}"
    } =(<<<${pcretest_input})
}
