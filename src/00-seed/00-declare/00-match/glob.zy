#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Convert into parcel documentation.
# --------------------( SYNOPSIS                           )--------------------
# Define documentation-specific globs.

# ....................{ GLOBALS                            }....................
#FIXME: *UGH*. Clearly, there's no need for such globs, wich derive from a
#significantly earlier design specification in which *ALL* help strings were
#formatted as a blank line-delimited pair of prototype and non-prototype
#portions. Since prototypes are now formally recognized in an unquoted manner,
#there exists *NO* demonstrable reason for the prior logic to exist at all.
#Excise this and comment out and/or refactor all other parcel code leveraging
#globals defined below.
#
#Note that early-time functionality (e.g., after the definition of core
#documentation functions but before the definition of macro :func() and hence
#unquoted function prototypes) will still need some trivial mechanism for
#associating function prototypes with documentation. Fortunately, this is indeed
#trivial and requires *NO* PCREs or globs: simply define a help function
#resembling:
#
#    void :func.doc[
#        args = (:str func_prototype),
#        stdin = (:str func_documentation)]
#
#We're fairly certain such a function already exists. In either case, simply
#call such function from early-time functionality to document functions. Yay!

# Glob globals defined below.
typeset -g\
    ZY__GLOBAL_DECLARATION_GLOB\
    ZY_HELP_GLOB

# ....................{ MAIN                               }....................
# Define such globs in an anonymous block to permit definition of locals. Since
# subsequent locals often depend on prior locals, only define one local a line.
() {
    # Enable group capturing for the remainder of the current glob.
    local enable_capturing='(#b)'

    # Disable group capturing for the remainder of the current glob.
    local disable_capturing='(#B)'

    # Global variable name.
    #
    # Note that the ${ZY__VAR_NAME_CLASS_FIRST} and ${ZY__VAR_NAME_CLASS_REST}
    # global variables are previously declared by
    # zy:if_compile/*.macro/*-pcre.zy for reusability elsewhere (e.g., here).
    local global_name=${ZY__VAR_NAME_CLASS_FIRST}${ZY__VAR_NAME_CLASS_REST}'#'
    local global_name_grouped=${enable_capturing}'('${global_name}')'

    # Global scalar variable type, comprising all remaining "="-prefixed text if
    # any. By zsh constraint, global declarations prohibit global nonscalar
    # variables (e.g., lists) from being initialized.
    local global_type_grouped=${enable_capturing}'=(*)'
    local global_type_optional_grouped=${disable_capturing}'('${global_type_grouped}'|)'

    # Glob matching the mandatory name and optional initial value -- but *NOT*
    # the mandatory type, which is matched with simple shell word splitting --
    # from a global variable declaration 
    ZY__GLOBAL_DECLARATION_GLOB=${global_name_grouped}${global_type_optional_grouped}

    # Glob matching a blank line (i.e., two consecutive newlines optionally
    # delimited by zero or more tab or space characters).
    local blank_line_glob=$'\n''[ '$'\t'']#'$'\n'

    # Glob capturing the prototype and non-prototype portions of documentation.
    ZY_HELP_GLOB='[[:space:]]#(#b)(^(#B)(*'${blank_line_glob}'*))'${blank_line_glob}'(#b)(*)'
}

#FIXME: In lieu of unit tests...
# function zuzu() {
#     local yamy='
# [status: int] TRAPZERR(int signal_number = SIGZERR)
# 
# Trap SIGZERR, a `zsh`-specific signal triggered by `zsh` on any.
# 
# Command reporting *unhandled failure* (i.e., nonzero exit status _not_.
# 
# '
#     if [[ "${yamy}" == ${~ZY_HELP_GLOB} ]] {
#         print "match[1]: ${match[1]}"
#         print "match[2]: ${match[2]}"
#     } else {
#         print 'Ugh!'
#     }
# }
