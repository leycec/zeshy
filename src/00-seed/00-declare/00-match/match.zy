#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

# ....................{ GLOBALS                            }....................
ZY__HELP_GLOBALS+='
:str ZY__MATCH

Substring of the match group in the canonical `${match}` list global currently
being matched.

This private global negligibly improves the efficiency of frequently called
functions performing matching, permitting this variable to be reused rather
than redeclared in each such call.
'
typeset -g ZY__MATCH

# ....................{ EXCEPTIONS                         }....................
ZY__HELP_FUNCS+='
:void ::pcre.die_of_subject_not_matching(
    :str pcre :str subject :str label)

Throw an exception stating the passed subject string to _not_ match the passed
PCRE of the passed human-readable type (e.g., "function prototype").

If debugging is currently enabled _and_ the external `pcretest` command is in
the current ${PATH}, this output of that command will be grafted onto this
exception''s message for PCRE debugging. Since this command is installed along
with the `libpcre` dependency required by the stock `zsh/pcre` module, this
command will almost always be available.
'
function ::pcre.die_of_subject_not_matching() {
    (( # == 3 )) ||
        :die 'Expected one PCRE, one subject string, and one label.'
    local\
        pcre=${1}\
        subject=${2}\
        label=${3}\
        message

    # Sanitize this label. Dismantled, this is:
    #
    # * "${(U)...}", capitalizing the first character of this label.
    # * "${...%% #}, stripping all trailing spaces from this label.
    label=${(U)label[1]}${label[2,-1]%% #}

    # If the ::Str.indent() function exists, indent this subject string.
    typeset -f ::Str.indent &>/dev/null && ::Str.indent subject

    # Exception message to be thrown.
    message=${label}' invalid:'$'\n\n'${subject}

    #FIXME: Excise "false &&" *AFTER* adding a new
    #${ZY_IS_EXCEPTIONS_PCRE_DEBUG} boolean global defaulting to false. For
    #now, such debugging is far too verbose to be enabled by default.

    # If zeshy is being debugged *AND* PCREs are debuggable on the current
    # system, append a detailed trace of the matching process with such subject
    # against such PCRE.
    if { false && :debug.is && :pcre.is_debuggable } {
        message+=$'\n\n''PCRE match failure trace:'$'\n\n'$(
            :pcre.debug "${pcre}" "${subject}")
    }

    # Throw this exception.
    :die "${message}"
}
