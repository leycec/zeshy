#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*High-level function declarers* (i.e., callables declaring and hence also
defining functions).
/---

# Due to a chicken-and-the-egg problem, all functions and globals defined below
# are subsequently documented under ={help} in the main codebase.

#FIXME: Partially obsolete by recent changes to ={old}. Resynchronize, please.

#FIXME: Intriguing. There *IS* a use case for function prototypes accepting two
#or more variadic argument lists -- namely, functions accepting arguments
#strictly partitioned into "-"-prefixed arguments and non-"-"-prefixed
#arguments: e.g.,
#
#    :void make_dir_if_not_found_with_options(
#        :str... mkdir_options?,
#        :str... dirnames)
#
#Obviously, attempting to declare these prototypes currently fails with an
#exception. That said, perhaps we don't *NEED* to explicitly support this (at
#least, not initially). In most cases, these arguments will simply be passed as
#is to external commands. Hence, we need to at least permit prototypes
#resembling the following to be declared:
#
#    :void make_dir_if_not_found_with_options(
#        `:str... `mkdir_options?,
#        `:str... `dirnames)
#
#Ultimately, however, we *WILL* need to sanely support such partitioning of
#variadic argument lists. Contemplate the following prototype syntax:
#
#    :void make_dir_if_not_found_with_options(
#        :arg_option... mkdir_options?,
#        :str... dirnames)
#
#That requires no changes to existing syntax, but doesn't quite get us there. To
#go the distance, we'd really need to:
#
#* Define some sort of setter function :arg_options.set_from_strs()
#  setting the passed list of options to all options in the remaining passed
#  arguments.
#* Improve function prototyping to call such function during variable
#  localization if such function exists.
#* The second variadic list ${dirnames} would then be set to all remaining
#  arguments.
#
#Non-trivial, but certainly feasible. We have to go there anyway, so we'd might
#as well go there sooner than later. (Well, after a working first draft,
#anyway.)

#FIXME: We currently employ PCRE-based iteration to parse apart prototype lists 
#(e.g., attributes, names, arguments). However, an unexpected alternative
#exists: "=~"-style PCRE-based iteration. While requiring PCRE recompilation on
#each call to "=~" and hence mildly inefficient, such approach has the profound
#benefit of *NOT* overwriting the internally cached PCRE resulting from calls to
#pcre_compile(). (Yes, we have manually verified this at the CLI.) That means we
#may iteratively call "=~" as much as we like while preserving the compilation
#of "${ZY__MACRO_PCRE}".
#
#The question remains, however: is iterating with "=~" feasible? Yes, if
#somewhat cumbersomely. Consider:
#
#     >>> :str digits='091827' digit_pair
#     >>> :str pcre_pair='^(\d\d)'
#     >>> :while :is -n ${digits} :and ${digits} =~ ${pcre_pair} :si {
#     ...     digit_pair=${match[1]}
#     ...     :str.print "${digit_pair}"
#     ...     digits=${digits[$(( ${#digit_pair} + 1 )),-1]}
#     ... }
#     09
#     18
#     27
#
#This works. Of course, it destroys the source string in the process.  But,
#hey... Let's see you do better on only twelve hours of sleep.  It's somewhat
#clumsy, but it works. And that's all that really matters. The mild
#inefficiencies introduced by such approach are dramatically overshadowed by the
#massive efficiency gain of *NOT* recompiling the core PCRE every preprocessor
#iteration.
#
#For safety, PCREs iterated in this way should be anchored to the string with
#"^" or prior match start with "\G". Awesome, eh?

#FIXME: Remove all reference to {prepend,append,set}_args_with_stdin() from the
#zeshy codebase, excluding set_args_with_stdin() where called from herestring-
#style aliases. In all other cases, such calls are highly dangerous and should
#be eliminated.
#FIXME: Wait. I believe we *MIGHT* be able to resuscitate such function *IF* we
#can augment them as follows (...no idea if this works, but it seems worth a
#try):
#
#* If standard input is an open pipe *AND* if list global ${pipestatus} is of
#  size larger than one, then doesn't that definitively suggest the current
#  function is directly piped standard input? Naturally, we should extensively
#  test this in vanilla zsh before running around like a mad badger attempting
#  to implement this in zeshy. Ah; perhaps not. For example, for the first
#  function called in such a pipe, wouldn't ${pipestatus} be the empty list?

# ....................{ DECLARERS                          }....................
#FIXME: Refactor to accept prototype string arguments (see ={backend}); then,
#register such macro by calling here at the top-level:
#    :macro_command_prototyped :func
#FIXME: Document me.

# :void :func(:str func_prototype, :str func_body)
function :func() {
    :die 'Call :func_ instead, for now. This function should frankly be refactored into a macro.'

    (( # == 2 )) || :die\
        'Expected one function prototype and one function body.'

    # Canonical string global ${ZPCRE_OP}, localized to avoid overwriting
    # either global or caller-specific versions of such variable.
    local ZPCRE_OP

    # For efficiency, validate only string global ${ZY__FUNC_PROTOTYPE} to
    # both exist and be set to the empty string. While the remaining globals
    # declared above could also be validated, orthogonality would then demand
    # we also validate all globals declared by both this parcel and ={stop} --
    # clearly exceeding the bounds of rational discourse. Since
    # ${ZY__FUNC_PROTOTYPE} is arguably the most significant of such
    # globals, validate this global as a proxy for those.
    [[ -z ${ZY__FUNC_PROTOTYPE-x} ]] || :die\
        '":func_" not preceded by "}:func" (i.e., ${ZY__FUNC_PROTOTYPE} undefined or non-empty).'
    ZY__FUNC_PROTOTYPE="${1}"
    print -r 'prototype: '${ZY__FUNC_PROTOTYPE}

    # Clear such map. Ordinarily, orthogonality would suggest also clearing
    # such list here. Unlike such map, however, such list need only be
    # conditionally cleared. It's complicated. And boring. (Be gone!)
    ZY__FUNC_ATTRS=()

    #FIXME: Completely insufficient. In any reasonable language, the specific
    #cause of such invalidity would be printed. "prototype invalid" does *NOT*
    #suffice. Unfortunately, printing finer-grained errors will require
    #finer-grained parsing specific to such errors. While we *COULD* implement
    #a full-bore generalized prototype parser for such purpose, such parser
    #would clearly be overkill. Instead, we believe the following to be a
    #middle-ground leveraging prior PCRE work:
    #
    #* In ={*-pcre}, define PCRE globals incrementally matching each prototype
    #  component in left-to-right fashion: e.g.,
    #    ZY_CALLABLE_PROTOTYPE_ERROR_ATTRS_PCRE=${pcre_start}${pcre_attrs}
    #    ZY_CALLABLE_PROTOTYPE_ERROR_RETURN_PCRE=${ZY_CALLABLE_PROTOTYPE_ERROR_ATTRS_PCRE}${pcre_return_type_or_channels}
    #    ZY_CALLABLE_PROTOTYPE_ERROR_NAMES_PCRE=${ZY_CALLABLE_PROTOTYPE_ERROR_RETURN_PCRE}${pcre_runnable_name_or_names}
    #  ...and so on, until matching all prototype components.
    #* Define a new function in ={die} iteratively attempting to match
    #  ${ZY__FUNC_PROTOTYPE} by each of the above such PCREs in the above
    #  order until one fails to match. The PCRE that fails to match clearly
    #  identifies the erroneous syntactic component.
    #* Given such component, we could then iterate the subcomponents of such
    #  component (e.g., attributes of the attribute list, names of the name
    #  list) until identifying the specific erroneous subcomponent.
    #
    #In other words, it's all quite feasible. So, please make it so.
    #FIXME: Alternately, consider the following integrated approach:
    #dramatically reduce ${ZY__CALLABLE_PROTOTYPE_PCRE} to the absolute
    #minimum required for matching such syntactic constructs; at the moment,
    #such PCRE does that as well as validate the entirety of runnable prototype
    #syntax. It's the latter part we'd luck to cut. And while doing so is
    #certainly feasible and would certainly improve matching efficiency, doing
    #so would also require we perform validation elsewhere. Is this feasible?
    #Probably, but we'll need to look into it in greater detail.
    #
    #Before we consider an example, however, we should note that extracting
    #validation out of such PCRE has the extreme benefit of permitting us to print
    #human-readable parse errors. At the moment, all we can do is print a single
    #unhelpful blanket message (e.g., "zeshy: Function prototype invalid:"). Since
    #that's essentially unacceptable, we'll need to extract such validation out
    #*ANYWAY*. It *WILL* happen.
    #
    #As example of how one might do so, consider validation of "<"- and
    #">"-delimited runnable attributes. Since this function iteratively matches
    #each such attribute, we would need such iteration to *ALSO* perform
    #validation. But this should be no terrible burden; simple keep track of the
    #current match indices and throw an exception if the start index for the
    #current match is *NOT* one character after the end index for the prior match.
    #Additionally, after matching, throw an exception if the the end index for the
    #prior match is *NOT* the last character of such attributes string.
    #
    #And that's it. Since this is clearly efficiently implementable and clearly
    #improves both efficiency and exception readability, we have the green light.

    # If such prototype is syntactically invalid, throw an exception.
    [[ ${ZY__FUNC_PROTOTYPE} =~\
       ${ZY__CALLABLE_PROTOTYPE_PCRE} ]] || ::func.die 'prototype invalid.'
    integer match_index; for match_index ({1..${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND_ARGS}}) { print -r 'match '${match_index}': '${match[${match_index}]-} }

    # If such match failed to capture either such callable's attributes or
    # names, throw an exception.
    (( ${#match} >= ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS )) || ::func.die\
        'attributes, names, and/or arguments unparsable from prototype.'

    # Preserve such matches *BEFORE* attempting attribute matching, which
    # unavoidably overwrites list global ${match}.
    ZY__MATCH=( "${match[@]}" )

    # If such prototype specifies at least one attribute, parse such attributes
    # and optional suffixing values into such map. Since single- and
    # double-quoted values may contain commas, such attributes must be
    # iteratively matched with a PCRE rather than split on commas.
    if [[ -n ${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ATTRS}]} ]] {
        # Compile such PCRE.
        :pcre.compile "${ZY_CALLABLE_PROTOTYPE_ATTRS_NEXT_PCRE}"

        # Match all attributes, mapping each to the colon-prefixed value
        # suffixing such attribute if such attribute is suffixed by such a
        # value or to the empty string otherwise.
        ZPCRE_OP='0 0'
        while {
            pcre_match -b -n ${ZPCRE_OP[(w)2]} --\
                "${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ATTRS}]}"
        } {
            ZY__FUNC_ATTRS[${match[1]}]="${match[2]-}"
        }
    }

    # If such prototype only declares one name, set such list to such name.
    if [[ -n ${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME}]} ]] {
        ZY__FUNC_NAMES=(
            "${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME}]}"
        )
    # Else, such prototype declares multiple comma-delimited names. Since
    # single- and double-quoted callable names may contain commas, such names
    # must be iteratively matched with a PCRE rather than split on commas.
    } else {
        # Clear such list.
        ZY__FUNC_NAMES=()

        # Compile such PCRE. See above for further details.
        pcre_compile -- "${ZY_CALLABLE_PROTOTYPE_NAMES_NEXT_PCRE}"

        # Match all names, appending each to such list.
        ZPCRE_OP='0 0'
        while {
            pcre_match -b -n ${ZPCRE_OP[(w)2]} --\
                "${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAMES}]}"
        } {
            ZY__FUNC_NAMES+="${match[1]}"
        }
    }

    #FIXME: For efficiency, inline such logic above. In fact, we should
    #(arguably) shift such function back to the main codebase.

    # If any such function already exists, throw an exception.
    :func.die_if "${ZY__FUNC_NAMES[@]}"

    # Clear such standard input argument list. Since both branches of the
    # conditional below set such customary argument list, avoid doing so here.
    ZY__FUNC_STDIN=

    # If such prototype declared no first argument channel, such prototype
    # either declared:
    #
    # * An empty argument channel list (e.g., ":void :empty_channels[]").
    # * An empty argument list (e.g., ":void :empty_args()").
    # * A non-empty argument list (e.g., ":void :nonempty_args(:str here)").
    #
    # While syntactically different, the former two cases signify the same
    # semantics of empty standard and standard input argument lists. In either
    # case, the standard input argument list is empty.
    #
    # While the latter case differs both syntactically and semantically, such
    # case also implies the standard input argument list to be empty.
    #
    # All three cases may be efficiently handled by setting the possibly
    # non-empty standard list -- ignoring the empty standard input list.
    if [[ -z ${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_ARGS}]-} ]] {
        ZY__FUNC_ARGS=${ZY__MATCH[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS}]}
    # Else, such prototype declared at least a first argument channel. Parse
    # the argument lists for such channel and the following optional second
    # channel into the corresponding strings.
    } else {
        # For each match index of the name of the first and second channels... (if
        for ZY__FUNC_MATCH_INDEX (
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_NAME}
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND_NAME}
        ) {
            # If such channel is either the customary or standard
            # input-specific argument list, set the corresponding string.
            case ${ZY__MATCH[${ZY__FUNC_MATCH_INDEX}]-} {
            ('args')
                ZY__FUNC_ARGS=${ZY__MATCH[$(( ZY__FUNC_MATCH_INDEX + 1 ))]} ;;
            ('stdin')
                ZY__FUNC_STDIN=${ZY__MATCH[$(( ZY__FUNC_MATCH_INDEX + 1 ))]} ;;
            # Else if such channel name is empty, such channel *MUST* be an
            # unspecified second channel. Since such channel is optional, this
            # is *NOT* an error. (Simply ignore this.)
            ('') ;;
            # Else, such channel is unrecognized. Throw an exception!
            (*)
                ::func.die\
                    'argument channel '${ZY__MATCH[${ZY__FUNC_MATCH_INDEX}]}' unrecognized.'
            }
        }
    }
    print -r 'arg list: '${ZY__FUNC_ARGS}
}
