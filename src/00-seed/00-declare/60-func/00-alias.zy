#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Function prototype parser aliases* (i.e., alieses specific to functions parsing
function prototypes).
/---

# ....................{ ALIASES ~ debug                    }....................
# To debug function definitions with low-level print statements, uncomment the
# alternate definition of the ::func.line.run_if_debug() alias below and
# recompile zeshy's digest (e.g., by restarting zeshy).

#FIXME: Uncomment once :alias.doc() is available here. It... really should be.
# :alias.doc <<'/---'
# :full ::func.line.run_if_debug(:str line)
#
# Uncomment and hence enable all subsequent text on the same line as this alias if
# function definition debugging is desired _or_ reduce to a noop otherwise.
#
# This private alias is intended to be expanded _only_ by ::func_.start() and
# ::func_.stop().
# /---
alias ::func.line.run_if_debug='# [DEBUG]'
# alias ::func.line.run_if_debug=''


#FIXME: Uncomment once :alias.doc() is available here. It... really should be.
# :alias.doc <<'/---'
# :str ::func.stdout.echo_if_debug(:str line)
#
# Print all subsequent text on the same line as this alias to standard output if
# function definition debugging is enabled _or_ reduce to a noop otherwise.
#
# If function definition debugging is enabled, this alias conditionally enables
# low-level debugging output disabled by default in ::func_.start() and
# ::func_.stop(). Doing so dramatically increases the verbosity of function
# definition output with a corresponding increase in time costs (i.e., slowdown)
# associated with function definition.
#
# This private alias is intended to be expanded _only_ by ::func_.start() and
# ::func_.stop().
# /---
alias ::func.stdout.echo_if_debug='::func.line.run_if_debug [[ -o interactive ]] && print -r -- "zeshy (func):"'
