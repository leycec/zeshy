#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Low-level function definers* (i.e., functions defining functions with bodies
passed as arbitrary strings).
/---

# ....................{ DEFINERS                           }....................
# :void :func.redefine(:str@nonempty func_name :str func_body)
#
# (Re)define the passed function as the passed function body, regardless of
# whether such function has been previously defined.
# 
# == See Also ==
# 
# * :func.define().
# 
# == Examples ==
# 
# .:func.redefine()
# ==========================================
# [source]
# ------------------------------------------
# >>> :func.redefine "The Age of Decreasing Numbers" ':stdout.echo\
# ...    "Civilization is a subset of nature even if we're not aware of it, and
# ...     the dark side of our recent increase was a decrease in topsoil and
# ...     forests and fossil fuels and the Earth's capacity to absorb industrial
# ...     waste without catastrophic change. Now these things have decreased so
# ...     far that our habit of increase can no longer feed itself."'
# >>> get_string_line $("The Age of Decreasing Numbers") 1
# Civilization is a subset of nature even if we're not aware of it, and
# >>> :func.redefine "The Age of Decreasing Numbers" ':stdout.echo\
# ...    "With the housing crash, the falling dollar, and the decline in middle
# ...     class income, we're already tasting the coming age of numbers getting
# ...     smaller. Next: the stock market, easy credit, the GNP, energy
# ...     production, energy consumption, and human population."
# >>> get_string_line $("The Age of Decreasing Numbers") 1
# With the housing crash, the falling dollar, and the decline in middle
# ------------------------------------------
# ==========================================
# /---
function :func.redefine() {
    (( # == 2 )) || :die 'Expected one function name and one function body.'
    local func_name=${1} func_body=${2} func_declaration
#   :stdout.echo_if_debug "zeshy: defining ${func_name}()..."

    # Function to be redefined. For obscure error handling reasons, we
    # interpolate this function into several eval() calls below. Dismantled,
    # this is:
    #
    # * "(q)", quote protecting the name of this function. Since zsh permits
    #   such name to contain arbitrary shell-reserved characters (e.g., "("),
    #   this protection avoids obscure errors on names with these characters.
    #
    # Technically, this redefinition is also implementable with the following
    # efficient alternative avoiding these eval() statements:
    #
    #    { unfunction "${func_name}" } :=stderr.silent or :=failure.ignore
    #    { functions[${func_name}]="${func_body}" } :=stderr.silent
    #    (( ${+functions[${func_name}]} )) or {
    #         :str func_error; func_error="$({
    #             functions[${func_name}]="${func_body}"
    #         } :=stdout)"
    #
    # This alternative *DOES* work but omits line numbers in parse errors,
    # preventing zeshy from throwing human-readable parse exceptions. For
    # example, on syntactic errors, this alternative prints errors resembling
    # "zsh: parse error near `}'" rather than
    # "(eval):2: parse error near `}'". Since human-readability of exception
    # messages is considerably more important than either efficiency or
    # simplicity of implementation, we retain the current eval()-based approach.
    func_declaration='function '${(q)func_name}' () {'$'\n'${func_body}$'\n''}'

    # Redefine this function. If this redefinition fails, zsh emits an error to
    # standard error and reports failure, inducing zeshy to throw an exception
    # resembling "(eval):2: parse error near `]]'". For readability, capture
    # and convert this error into a human-readable exception message.
    { eval "${func_declaration}" } 2>/dev/null || {
        local func_error

        # Temporarily enable shell option "EVAL_LINENO", ensuring the line
        # number zsh embeds in the error captured below will be relative to
        # such function body rather than to this function redefine_error(). See
        # :option.enable_local() for further details.
        setopt -- local_options eval_lineno

        # Capture this output, ignoring the expected failure.
        func_error="$({ eval "${func_declaration}" } 1>2 || true)"
        # :stderr.echo "error: ${func_error}"

        # If this error message is in canonical zsh format (e.g.,
        # "(eval):244: parse error near `()'"), convert this message to
        # human-readable form. In particular, append the actual line of code in
        # this function body inducing this error. Dismantled, this is:
        #
        # * "(#b)", enabling match group capturing.
        # * "(<->##)", matching such line as one or more digits into
        #   ${match[1]}. See :int.is() for further details.
        # * "(*)", matching the actual error message into ${match[2]}.
        if [[ ${func_error} == (#b)'(eval):'(<->##)': '(*) ]] {
            integer line_number line_number_start line_number_stop
            local func_error_message func_context
            local -a func_lines

            # Line number of such error.
            line_number=${match[1]}

            # Parse error emitted by zsh, stripped of delimiting whitespace.
            func_error_message=${${match[2]##[[:space:]]##}%%[[:space:]]##}

            # Capitalize the first character of such error. (Unfortunately,
            # parameter expansion flag "(C)" capitalizes the first character of
            # all words of such parameter.)
            func_error_message[1]=${(C)func_error_message[1]}

            # Line number of the second lines preceding and succeeding such
            # error, for textual context.
            line_number_start=$(( line_number - 2 ))
            line_number_stop=$((  line_number + 2 ))

            # List of all function body lines. See :str.Lines().
            func_lines=( "${(@f)func}" )

            # Constrain such numbers to [1, ${max_line_number}], where
            # ${max_line_number} is the number of lines in such function body.
            if (( line_number_start < 1 )) {
                  line_number_start=1
            }
            if (( line_number_stop > ${#func_lines} )) {
                  line_number_stop=${#func_lines}
            }

            # Constrain such start to be less than or equal to such stop.  While
            # this shouldn't be necessary, a wee caution never hurts.
            if (( line_number_start > line_number_stop )) {
                  line_number_start=${line_number_stop}
            }

            #FIXME: Hardly an ideal implementation. Ideally, we should implement
            #a function leveraging color styles printing such textual context
            #with decent aesthetics. To do so, we'll need test here whether such
            #function exists; if it does, call it, passing such call
            #"${func_body}" and the desired function line; else, defer
            #to the default implementation below. (Actually, don't we have an
            #existing function for numbering arbitrary code lines? I recall such
            #function requiring a bit of touch-up, as well...)

            # Append each such line prefixed by its line number to such string.
            # print 'ok'
            # print "line_number: ${line_number}"
            # print "line_number_start: ${line_number_start}"
            # print "line_number_stop: ${line_number_stop}"
            # print "#func_lines: ${#func_lines}"
            # print "func:"
            # :stdout.echo "${func}" | command nl
            integer line_number
            for     line_number ({${line_number_start}..${line_number_stop}}) {
                # print "i: ${i}"
                func_context+="${ZY_ASCII_NEWLINE} [${line_number}]  ${func_lines[${line_number}]}"
            }
            # print 'ko'

            # Set such error message.
            func_error="${func_error_message} on line ${line_number} of function ${func_name}():${ZY_ASCII_NEWLINE}${func_context}"
        }

        # Throw such exception.
        :die "${func_error}"
    }
#    print -r -- "function \"${func_name}\" () {
#    ${func_body}
#}"

    # If prior logic succeeded but this function remains undefined, throw a
    # custom exception. Technically, this should never happen. Since it
    # occasionally does, avoid silent regressions with efficient precautions.
    (( ${+functions[${func_name}]} )) || :die\
        'Function '${func_name}'() undefinable:'$'\n\n'${func_body}
}
