#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *function declarers* (i.e., callables declaring and hence necessarily
defining functions).
/---

# Due to a chicken-and-the-egg problem, all functions and globals defined below
# are subsequently documented under zy://help in the main codebase.

#FIXME: Remove all reference to {prepend,append,set}_args_with_stdin() from the
#zeshy codebase, excluding set_args_with_stdin() where called from herestring-
#style aliases. In all other cases, such calls are highly dangerous and should
#be eliminated.
#FIXME: Wait. I believe we *MIGHT* be able to resuscitate such function *IF* we
#can augment them as follows (...no idea if this works, but it seems worth a
#try):
#
#* If standard input is an open pipe *AND* if list global ${pipestatus} is of
#  size larger than one, then doesn't that definitively suggest the current
#  function is directly piped standard input? Naturally, we should extensively
#  test this in vanilla zsh before running around like a mad badger attempting
#  to implement this in zeshy. Ah; perhaps not. For example, for the first
#  function called in such a pipe, wouldn't ${pipestatus} be the empty list?

# ....................{ ALIASES                            }....................
#FIXME: Document me.
alias -g ':func{'='
    [[ -n ${ZY__FUNC_NAMES-} ]] || :die\
        ''":func{" not preceded by ":func_" (i.e., ${ZY__FUNC_NAMES} undefined or empty).''
    function "${ZY__FUNC_NAMES[@]}" () {'

#FIXME: Document me.
alias '}:func'='}
    ::func_.stop'

# ....................{ DECLARERS                          }....................
# :void {:func_ ::func_.start}(:str func_prototype)
function :func_ ::func_.start() {
    (( # == 1 )) || :die 'Expected one function prototype.'

    # For efficiency, validate only the ${ZY__FUNC_PROTOTYPE} string global
    # to both exist and be set to the empty string. While the remaining globals
    # declared in :{globals} could also be validated, orthogonality would then
    # demand we also validate all globals declared by both this parcel and
    # :{stop} -- clearly exceeding the threshold of sanity. Since
    # ${ZY__FUNC_PROTOTYPE} is arguably the most significant of such
    # globals, that global is validated as a proxy for the remainder.
    [[ -z ${ZY__FUNC_PROTOTYPE-x} ]] || :die\
        '":func_" not preceded by "}:func" (i.e., ${ZY__FUNC_PROTOTYPE} undefined or non-empty).'
    ZY__FUNC_PROTOTYPE=${1}
    # print -r 'prototype: '${ZY__FUNC_PROTOTYPE}

    # ..................{ INITIALIZATION                     }..................
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # For efficiency, captured match groups are expanded directly from the
    # canonical ${match} list global. Hence, this global must be preserved for
    # the duration of function prototype parsing. To ensure this, the following
    # *MUST* be avoided:
    #
    # * Calls to pcre_match() or use of the "=~" test operator, except where
    #   explicitly designed to avoid unintended consequences (e.g., function
    #   prototype argument parsing).
    # * Globs containing the "(b)" specifier enabling match group capturing.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Compile the PCRE matching all callable prototype syntax.
    :pcre.compile "${ZY__CALLABLE_PROTOTYPE_PCRE}"

    #FIXME: Completely insufficient. In any reasonable language, the specific
    #cause of this invalidity would be printed. "prototype invalid" does *NOT*
    #suffice. Unfortunately, printing finer-grained errors will require
    #finer-grained parsing specific to such errors. While we *COULD* implement
    #a full-bore generalized prototype parser for such purpose, such parser
    #would clearly be overkill. Instead, we believe the following to be a
    #middle-ground leveraging prior PCRE work:
    #
    #* In ={*-pcre}, define PCRE globals incrementally matching each prototype
    #  component in left-to-right fashion: e.g.,
    #    ZY_CALLABLE_PROTOTYPE_ERROR_ATTRS_PCRE=${pcre_start}${pcre_attrs}
    #    ZY_CALLABLE_PROTOTYPE_ERROR_RETURN_PCRE=${ZY_CALLABLE_PROTOTYPE_ERROR_ATTRS_PCRE}${pcre_return_type_or_channels}
    #    ZY_CALLABLE_PROTOTYPE_ERROR_NAMES_PCRE=${ZY_CALLABLE_PROTOTYPE_ERROR_RETURN_PCRE}${pcre_runnable_name_or_names}
    #  ...and so on, until matching all prototype components.
    #* Define a new function in ={die} iteratively attempting to match
    #  ${ZY__FUNC_PROTOTYPE} by each of the above such PCREs in the above
    #  order until one fails to match. The PCRE that fails to match clearly
    #  identifies the erroneous syntactic component.
    #* Given such component, we could then iterate the subcomponents of such
    #  component (e.g., attributes of the attribute list, names of the name
    #  list) until identifying the specific erroneous subcomponent.
    #
    #In other words, it's all quite feasible. So, please make it so.
    #FIXME: Alternately, consider the following integrated approach:
    #dramatically reduce ${ZY__CALLABLE_PROTOTYPE_PCRE} to the absolute
    #minimum required for matching such syntactic constructs; at the moment,
    #such PCRE does that as well as validate the entirety of callable prototype
    #syntax. It's the latter part we'd luck to cut. And while doing so is
    #certainly feasible and would certainly improve matching efficiency, doing
    #so would also require we perform validation elsewhere. Is this feasible?
    #Probably, but we'll need to look into it in greater detail.
    #
    #Before we consider an example, however, we should note that extracting
    #validation out of such PCRE has the extreme benefit of permitting us to
    #print human-readable parse errors. At the moment, all we can do is print a
    #single unhelpful blanket message (e.g., "zeshy: Function prototype
    #invalid:"). Since that's essentially unacceptable, we'll need to extract
    #such validation out *ANYWAY*. It *WILL* happen.
    #FIXME: As example of how one might do so, consider validation of "<"- and
    #">"-delimited runnable attributes. Since this function iteratively matches
    #each such attribute, we would need such iteration to *ALSO* perform
    #validation. But this should be no terrible burden; simply keep track of the
    #current match indices and throw an exception if the start index for the
    #current match is *NOT* one character after the end index for the prior match.
    #Additionally, after matching, throw an exception if the the end index for the
    #prior match is *NOT* the last character of such attributes string.
    #
    #And that's it. Since this is clearly efficiently implementable and clearly
    #improves both efficiency and exception readability, we have the green light.

    # Match such prototype into the canonical ${match} list global, containing
    # all groups captured from such prototype by such PCRE. If such prototype
    # is syntactically invalid, throw an exception.
    pcre_match -- "${ZY__FUNC_PROTOTYPE}" || ::func.die_of_prototype

    # If debugging function definition, print prototype metadata.
    ::func.stdout.echo_if_debug $'\n''prototype: '${ZY__FUNC_PROTOTYPE}
    ::func.line.run_if_debug integer match_index; for match_index ({1..${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND_ARGS}}) { print -r 'zeshy (func): match '${match_index}': '${match[${match_index}]-} }

    # If such match failed to capture such callable's attributes, names, or
    # arguments, throw an exception. While this should *NEVER* happen, human-
    # readable exceptions demand we ensure this.
    (( ${#match} >= ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS )) ||
        ::func.die 'attributes, names, and/or arguments unparsable.'

    # ..................{ PARSE ~ attrs                      }..................
    # Raw string of all attributes matched from this prototype.
    ZY__FUNC_ATTRS_STR=${match[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ATTRS}]-}

    # Map from attribute name to value parsed from this string below.
    ZY__FUNC_ATTRS=()

    # If debugging function definition, print attribute metadata.
    ::func.stdout.echo_if_debug 'attrs (raw): '${ZY__FUNC_ATTRS_STR}

    # If this prototype declares at least one attribute...
    if (( ${#ZY__FUNC_ATTRS_STR} )) {
        # For each attribute split on shell words from the matched substring of
        # all attributes, map this attribute's name to this attribute's value
        # if any or the empty string otherwise.
        #
        # By PCRE design, attribute syntax corresponds to shell word syntax.
        # Hence, attributes are efficiently matchable with built-in shell word
        # splitting rather than more costly and complex alternatives (e.g.,
        # PCRE- or glob-based matching). Dismantled, this is:
        #
        # * "${(Z~n~)...}", splitting shell words in a manner treating unquoted
        #   newlines as equivalent to unquoted spaces. By default, the "(z)"
        #   flag splits shell words in a manner converting unquoted newlines to
        #   semicolons -- which, while sensible for actual shell code, is *NOT*
        #   at all what we want. See "Z:opts:" in "man zshexpn" for details.
        for ZY__MATCH ("${(Z~n~)ZY__FUNC_ATTRS_STR}") {
            # Split this attribute into its name and dequoted "="-prefixed
            # value if any (excluding that "="). Dismantled, this is:
            #
            # * "%%=*", removing everything after the first "=".
            # * "#*=", removing everything before the first "=".
            # * "(Q)", stripping one level of either single or double quotes
            #   from this string if any.
            #
            # See set_strings_to_string_split_on_string() for details.
            ZY__FUNC_ATTR_NAME=${ZY__MATCH%%=*}
            ZY__FUNC_ATTR_VALUE=${(Q)ZY__MATCH#*=}

            # If this attribute's name is unrecognized, throw an exception.
            # See the :Map.is_key() function.
            (( ${+ZY__FUNC_ATTR_NAMES_VALID[${ZY__FUNC_ATTR_NAME}]} )) ||
                ::func.die_of_attr 'unrecognized. Recognized attribute names include: '${(k@)ZY__FUNC_ATTR_NAMES_VALID}

            # Map this attribute's name to value for the duration of this
            # function definition's parsing.
            ZY__FUNC_ATTRS[${ZY__FUNC_ATTR_NAME}]=${ZY__FUNC_ATTR_VALUE}

            # If debugging function definition, print attribute metadata.
            ::func.stdout.echo_if_debug 'attr "'${ZY__MATCH%%=*}'" -> '${(Q)ZY__MATCH#*=}
        }
    }
    # print -r 'attrs (list): '${ZY__FUNC_ATTRS}

    # ..................{ PARSE ~ names                      }..................
    # Callable name matched from such prototype for prototypes declaring only
    # one such name. Since this is the common case, this name is localized.
    ZY__MATCH=${match[
        ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME}]-}

    # If such prototype declares only one name, set such list to this name
    # *AFTER* stripping both single- and double-quotes from this name. If this
    # name is unquoted, note that flag "(Q)" safely reduces to a noop.
    if (( ${#ZY__MATCH} )) {
        ZY__FUNC_NAMES=( "${(Q)ZY__MATCH}" )
    # Else, such prototype declares multiple names. In such case, set such list
    # to all shell words split from the substring of these names. By PCRE
    # design, name syntax corresponds to shell word syntax.
    } else {
        ZY__FUNC_NAMES=( "${(QZ~n~)match[
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAMES}]-}" )
    }

    # If debugging function definition, print function names.
    ::func.stdout.echo_if_debug 'names: '${ZY__FUNC_NAMES}

    # ..................{ PARSE ~ args                       }..................
    #FIXME: For efficiency:
    #
    #* Inline the body of the :func.die_if() function here.
    #* Shift such function back to the main codebase.

    # If any such function already exists, throw an exception.
    :func.die_if "${ZY__FUNC_NAMES[@]}"

    # Clear the stdin argument list. Since both branches of the conditional
    # below set the non-stdin argument list, avoid doing so here.
    ZY__FUNC_ARGS_STDIN=()

    # If this prototype declared no first argument channel, this prototype
    # either declared:
    #
    # * An empty argument channel list (e.g., ":void :empty_channels[]").
    # * An empty argument list (e.g., ":void :empty_args()").
    # * A non-empty argument list (e.g., ":void :nonempty_args(:str here)").
    #
    # While syntactically different, the former two cases signify the same
    # semantics of empty non-stdin and stdin argument lists. In both cases,
    # the stdin argument list is empty. The third case differs syntactically
    # and semantically but also implies the stdin argument list to be empty.
    # All three cases are efficiently implementable by setting the possibly
    # non-empty non-stdin list while ignoring the empty stdin list.
    #
    # Note that:
    #
    # * By PCRE design, argument syntax is whitespace-delimited and hence
    #   efficiently matchable via built-in shell word splitting.
    # * For unknown reasons, performing such matching on an empty argument list
    #   produces a non-empty list containing exactly one empty string (rather
    #   than the empty list). Surprisingly, this is *NOT* necessarily a bad
    #   thing. Why? Because spurious issues in underlying zsh operators strongly
    #   encourage the use of non-empty rather than empty lists. In particular,
    #   the following line in ::func_prototype.parse_args() raises the following
    #   error when this list is empty: e.g.,
    #
    #   $ ZY__FUNC_ARGS_RAW=()
    #   $ ZY__FUNC_ARG_COUNT_OPTIONAL=${(M)#ZY__FUNC_ARGS_RAW:#${~ZY__CALLABLE_PROTOTYPE_ARG_OPTIONAL_GLOB}}
    #   ZY__FUNC_ARGS_RAW: parameter not set
    #
    # The error message suggesting this list to be unset is, of course,
    # inaccurate; the list is set but empty, which the "(M)" appears to
    # currently be intolerant of. *shrug*
    if (( ! ${#match[
        ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_ARGS}]-} )) {
        ZY__FUNC_ARGS_RAW=( "${(Z~n~)match[
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS_RAW}]-}" )
    # Else, such prototype declared one or two argument channels. Parse the
    # argument lists for the first such channel and the following optional
    # second such channel into the corresponding globals.
    } else {
        # For each match index of the name of the first and second channels...
        for ZY__FUNC_MATCH_INDEX (
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_NAME}
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND_NAME}
        ) {
            # If this channel is either the customary or standard
            # input-specific argument list, set the corresponding string.
            case ${match[${ZY__FUNC_MATCH_INDEX}]-} {
            ('args')
                ZY__FUNC_ARGS_RAW=( "${(Z~n~)match[
                    $(( ZY__FUNC_MATCH_INDEX + 1 ))]}" )
                ;;
            ('stdin')
                ZY__FUNC_ARGS_STDIN=( "${(Z~n~)match[
                    $(( ZY__FUNC_MATCH_INDEX + 1 ))]}" )
                ;;
            # Else if such channel name is empty, such channel *MUST* be an
            # unspecified second channel. Since such channel is optional, this
            # is *NOT* an error. (Simply ignore this.)
            ('') ;;
            # Else, such channel is unrecognized. Throw an exception!
            (*)
                ::func.die 'argument channel '${match[
                    ${ZY__FUNC_MATCH_INDEX}]}' unrecognized.'
            }
        }
    }

    # If debugging function definition, print argument list metadata.
    ::func.stdout.echo_if_debug 'arg list (raw) [length '${#ZY__FUNC_ARGS_RAW[@]}']: '${ZY__FUNC_ARGS_RAW[@]}
    # print -r 'arg list (origi): '${match[${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_ARGS}]}
    # print -r 'arg list 1: '${ZY__FUNC_ARGS_RAW[1]}
    # print -r 'arg list 2: '${ZY__FUNC_ARGS_RAW[2]}
    # print -r 'arg list 3: '${ZY__FUNC_ARGS_RAW[3]}
}

#FIXME: In lieu of unit tests...
# :func_ 'string :sami(string yimlo = "hello")'
# :func{
#     local yimlo="${1}"
#     print -r "yolo: ${yimlo}"
# }:func <<'/---'
# Sami says, "Yimlo!"
# /---
# () {
#     :sami 'YumYumEugh'
# }
