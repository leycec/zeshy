#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Function prototype parser globals* (i.e., globals specific to functions parsing
function prototypes).
/---

# ....................{ GLOBALS                            }....................
# For efficiency, globalize all variables specific to functions :func_.start()
# and :func_.stop(). Typically, such variables would simply be localized to
# such functions; since such functions are inarguably called more frequently
# than any other function in the zeshy codebase during digest compilation,
# globalizing such variables improves efficiency (i.e., by eliminating
# repetitious memory allocations and deallocations on each call to such
# function). While such costs are less negligible for non-scalar than scalar
# variables declared below, globalize all such variables for orthogonality.

# ....................{ GLOBALS ~ start                    }....................
# All globals specific to :{start}.

:global.doc <<'/---'
:str ZY__FUNC_PROTOTYPE

Prototype for the currently declared function.

This private global is intended to be referenced _only_ by :func_() and cohorts.
/---
typeset -g ZY__FUNC_PROTOTYPE

:global.doc <<'/---'
:map ZY__FUNC_ATTRS

Map from attribute name to value for the currently declared function, parsed
from such function's prototype.

This private global is intended to be referenced _only_ by :func_() and cohorts.
/---
typeset -gA ZY__FUNC_ATTRS

:global.doc <<'/---'
:list ZY__FUNC_NAMES

List of all function names for the currently declared function, parsed from
such function's prototype.

This private global is intended to be referenced _only_ by :func_() and cohorts.
/---
typeset -ga ZY__FUNC_NAMES

:global.doc <<'/---'
:list ZY__FUNC_ARGS_RAW

List of all traditional argument types and names (in that order) for the
currently declared function, parsed from such function's prototype.

List items with odd indices are argument types. List items with even indices are
argument names optionally suffixed by a "="-prefixed default value. For both
efficiency and simplicity, such strings are subsequently parsed via brute-force
string indexing.

This private global is intended to be referenced _only_ by :func_() and cohorts.
/---
typeset -ga ZY__FUNC_ARGS_RAW

#FIXME: Actually use such global in :func_.stop().
:global.doc <<'/---'
:list ZY__FUNC_ARGS_STDIN

List of all standard input-specific argument types and names (in that order) for
the currently declared function, parsed from such function's prototype.

This private global is intended to be referenced _only_ by :func_() and cohorts.
/---
typeset -ga ZY__FUNC_ARGS_STDIN

:global.doc <<'/---'
:str ZY__MATCH

Substring of the match group in the canonical `${match}` list global currently
being parsed.

This private global is intended to be referenced _only_ by ::func_.start().
/---
typeset -g ZY__MATCH

:global.doc <<'/---'
:int ZY__FUNC_MATCH_INDEX

1-based index of the match group in the canonical `${match}` list global
currently being parsed.

This private global is intended to be referenced _only_ by ::func_.start().
/---
integer -g ZY__FUNC_MATCH_INDEX

# All subsequent globals are specific to :{stop}.

# ....................{ GLOBALS ~ bool                     }....................
:global.doc <<'/---'
:bool ZY__FUNC_ARGS_IS_GLOB

1 if at least one function argument is a *glob* (i.e., has major subtype `glob`)
_or_ 0 otherwise.

In the former case, such function will be shadowed by an alias of the same name
prefixing the call to such function by `noglob` -- forcing `zsh` to pass such
function such argument as is rather than expanding such argument to all existing
paths matching such argument as a file glob.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARGS_IS_GLOB

:global.doc <<'/---'
:bool ZY__FUNC_ARG_IS_OPTIONAL

1 if the current argument is *missable* (i.e., need _not_ be passed) _or_ 0
otherwise.

This includes *defaultable arguments* (i.e., arguments defaulting to a value if
unpassed), missable variadic arguments, and missable non-variadic arguments.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_IS_OPTIONAL

:global.doc <<'/---'
:bool ZY__FUNC_ARG_IS_VARIADIC

1 if the current argument is variadic _or_ 0 otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_IS_VARIADIC

:global.doc <<'/---'
:bool ZY__FUNC_ARG_IS_VARIADIC_MANDATORY

1 if the current argument is a *mandatory variadic argument* (i.e., a pseudo-
argument comprising one or more arguments) _or_ 0 otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_IS_VARIADIC_MANDATORY

:global.doc <<'/---'
:bool ZY__FUNC_ARG_IS_VARIADIC_OPTIONAL

1 if the current argument is a *missable variadic argument* (i.e., a pseudo-
argument comprising zero or more arguments) _or_ 0 otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_IS_VARIADIC_OPTIONAL

:global.doc <<'/---'
:int ZY__FUNC_ARG_WAS_VARIADIC

1 if a prior argument was variadic _or_ 0 otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_WAS_VARIADIC

# ....................{ GLOBALS ~ int                      }....................
:global.doc <<'/---'
:int ZY__FUNC_ARG_INDEX

1-based index of the current argument in the current argument list.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_INDEX

:global.doc <<'/---'
:int ZY__FUNC_ARG_TYPE_INDEX

1-based index of the current argument type in the
`${ZY__FUNC_ARGS_RAW}` list of all argument types and names.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_TYPE_INDEX

# ....................{ GLOBALS ~ int : arg count          }....................
:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_CURR

*Current argument count* (i.e., number of mandatory plus the number of passed
optional arguments such function accepts), guaranteed to be inclusively between
the minimum and maximum argument counts.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_CURR

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_CURR_DEFAULTED

*Defaulted argument count* (i.e., number of unpassed defaultable arguments
assigned default values for the current argument count).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_CURR_DEFAULTED

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_PREV_DEFAULTED

Number of both passed arguments _and_ unpassed defaultable arguments assigned
default values for the previous argument count.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_PREV_DEFAULTED

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_CURR_OPTIONAL_PASSED

*Passed optional argument count* (i.e., the number of remaining optional
arguments treated as passed by the current argument count).

This count is decremented by 1 for each optional argument parsed for the current
argument count; on decrementing this count to 0, all subsequent optional
arguments will be treated as unpassed for the current argument count. If this
function accepts no optional arguments, this count is 0.

This private global is intended to be referenced _only_ by ::func_.stop().

== Example ==

For example, if the minimum, current, and maximum argument counts are 2, 3, and
4 respectively, the current function accepts two mandatory and two optional
arguments. Since the current argument count is 3 and hence permits only one of
the two optional arguments to be passed, the passed optional argument count is
initialized to 1. After parsing the first optional argument, such count is
decremented by 1 to 0, at which point all subsequent optional arguments are
treated as unpassed.
/---
integer -g ZY__FUNC_ARG_COUNT_CURR_OPTIONAL_PASSED

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_MAX

*Maximum argument count* (i.e., the number of mandatory plus the number of
optional arguments this function accepts), equivalent to the number of `,`
characters in this function prototype's argument list plus one.

Such count excludes all optional arguments in a variadic argument list except
the first; since there exists no maximum number of such optional arguments, such
arguments must be counted manually at function call time. This private global is
intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_MAX

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_MIN

*Minimum argument count* (i.e., the number of strictly mandatory arguments this
function accepts), equivalent to the maximum argument count minus the number of
`?` and `=` characters in this function prototype's list plus one.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_MIN

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_DEFAULTABLE

*Defaultable scalar argument count* (i.e., the number of scalar arguments
assigned default values this function accepts).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_DEFAULTABLE

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_OPTIONAL

*Optional argument count* (i.e., the number of non-mandatory arguments this
function accepts), equivalent to the maximum minus minimum argument count.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_OPTIONAL

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_OPTIONAL_SCALAR

*Optional scalar argument count* (i.e., the number of non-mandatory scalar
arguments this function accepts).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_OPTIONAL_SCALAR

:global.doc <<'/---'
:int ZY__FUNC_ARG_COUNT_VARIADIC

Number of variadic arguments, both mandatory and optional.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
integer -g ZY__FUNC_ARG_COUNT_VARIADIC

# ....................{ GLOBALS ~ map                      }....................
:global.doc <<'/---'
:map ZY__FUNC_ARG_DECLARER_TO_DECLARATIONS

Map from the name of an alias defining variables of some type (e.g., `:str`)
to the space-delimited string assigning one local variable to each argument of
such type (e.g., `my_string="${1}"`).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -Ag ZY__FUNC_ARG_DECLARER_TO_DECLARATIONS

:global.doc <<'/---'
:map ZY__FUNC_ARG_TESTER_TO_EXPANSIONS

Map from the name of the function testing the values of certain passed arguments
(e.g., :int.is()) to the space-delimited string expanding these arguments to
these values (e.g., `"${1}" "${@[2,-2]}`).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -Ag ZY__FUNC_ARG_TESTER_TO_EXPANSIONS

# ....................{ GLOBALS ~ str                      }....................
:global.doc <<'/---'
:str ZY__FUNC_DEFAULT_VALUE

Default value for the current argument if this argument is defaultable _or_ the
empty string otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_DEFAULT_VALUE

:global.doc <<'/---'
:str ZY__FUNC_ARG_PARAM

String with which to expand the current argument if this argument is expandable
_or_ the empty string otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().

== Format ==

This string is guaranteed to be formatted as either:

* A positive integer (e.g., the `1` in `${1}`), expanding any argument
  preceding the first variadic argument (if any).
* A negative integer (e.g., the `@[-1]` in `${@[-1]}`), expanding any argument
  preceding the first variadic argument (if any).
* A range of integers (e.g., the `@[2,-2]` in `${@[2,-2]}`), expanding any
  variadic argument.
/---
typeset -g ZY__FUNC_ARG_PARAM

:global.doc <<'/---'
:str ZY__FUNC_ARG_SUBTYPE_LOCAL

Current argument's mandatory *local subtype* (e.g., the `:str` in
`^:str/file+readable`).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARG_SUBTYPE_LOCAL

:global.doc <<'/---'
:str ZY__FUNC_ARG_SUBTYPE_MAJOR

Current argument's optional *major subtype* (e.g., the `file` in
`^:str/file+readable`).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARG_SUBTYPE_MAJOR

:global.doc <<'/---'
:str ZY__FUNC_ARG_SUBTYPE_MINOR

Current argument's optional *minor subtype* (e.g., the `readable` in
`^:str/file+readable`).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARG_SUBTYPE_MINOR

:global.doc <<'/---'
:str ZY__FUNC_ARG_NAME

Current argument's localization-specific name if localizing such argument or
the empty string otherwise.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARG_NAME

:global.doc <<'/---'
:str ZY__FUNC_ARGS_EXPANSIONS

Space-delimited string of all argument expansions to be validated by the
current iteration (e.g., `${1} ${@[3,-3]} ${-1}`).

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARGS_EXPANSIONS

:global.doc <<'/---'
:str ZY__FUNC_CALLABLE_NAME

Name of an alias or function to be manipulated for various purposes during
function declaration.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_CALLABLE_NAME

:global.doc <<'/---'
:str ZY__FUNC_ARGS_CODE_VALIDATE_LOCALIZE

Code localizing and/or validating all arguments passed to this function for all
possible argument counts.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARGS_CODE_VALIDATE_LOCALIZE

:global.doc <<'/---'
:str ZY__FUNC_ARGS_CODE_DEFAULT

Code defaulting all arguments _not_ passed to this function for all possible
argument counts.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARGS_CODE_DEFAULT

:global.doc <<'/---'
:str ZY__FUNC_ARG_CODE_VALIDATE_LOCALIZE

Code localizing and/or validating all arguments passed to this function for the
current argument count.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARG_CODE_VALIDATE_LOCALIZE

#FIXME: Improve documentation, now that we've generalized such code to also
#possibly initialize a previously declared local list to such arguments.

:global.doc <<'/---'
:str ZY__FUNC_ARG_CODE_VARIADIC

Code localizing variadic arguments passed to such function, removing all
non-variadic arguments from the current argument list and hence reducing this
list to only variadic arguments.

Since non-variadic arguments may only be removed from this list _after_
localizing these arguments, this code is separated into different string locals.
This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_ARG_CODE_VARIADIC

:global.doc <<'/---'
:str ZY__FUNC_LINE_PREFIX

String prefixing each line of programmatically generated code.

Since `zsh` unconditionally internally reindents _all_ functions, this prefix
omits indentation. This private global is intended to be referenced _only_ by
::func_.stop().
/---
typeset -g ZY__FUNC_LINE_PREFIX=$'\n'' '

:global.doc <<'/---'
:str ZY__FUNC_NAME

Current function name for the currently declared function being declared.

This private global is intended to be referenced _only_ by :func_.stop().
/---
typeset -g ZY__FUNC_NAME

:global.doc <<'/---'
:str ZY__FUNC_PREAMBLE

Code generated from this function's prototype to prepend this function's body.

Such code ensures such body defaults, localizes, and validates all prototyped
arguments _before_ performing user-defined logic. This private global is
intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_PREAMBLE

:global.doc <<'/---'
:str ZY__FUNC_VAR_NAME_SUFFIX

Substring suffixing all local variable names declared by this function's
preamble, commonly used to guarantee variable name uniqueness for functions
leveraging dynamic scope to dynamically set values of variables with arbitrary
passed names.

This private global is intended to be referenced _only_ by ::func_.stop().
/---
typeset -g ZY__FUNC_VAR_NAME_SUFFIX
