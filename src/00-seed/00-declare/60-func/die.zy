#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *function declarer exception handlers* (i.e., functions throwing
exceptions resulting from functions declaring other functions).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void ::func.die(:str exception_message)

Throw an exception with the passed message, presumably detailing a syntactic or
semantic error in the currently declared function prototype. This private
exception handler is intended to be called _only_ by :func().

== Message Format ==

The passed message should be formatted as a lowercase sentence fragment (e.g.,
`prototype invalid`), which this function then:

* Prefixes by `Parcel +{${parcel_name}} function ${func_name}() `, where:
** `${parcel_name}` is the name of the parcel containing such alias.
** `${func_name}` is the first function name such prototype declares. (For
   simplicity, any subsequent function name such prototype declares is ignored.)
* Suffixes by such prototype.
/---
function ::func.die() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with ::alias.die().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    (( # == 1 )) || :die 'Expected one exception message.'
    local exception_message
    exception_message=$(::func.label)${1}

    # If such prototype has been declared, append such prototype.
    if (( ${#ZY__FUNC_PROTOTYPE-} )) {
        local func_prototype=${ZY__FUNC_PROTOTYPE}
        ::Str.indent func_prototype
        exception_message+=$'\n\n''Function prototype:'$'\n'${func_prototype}
    }

    # Throw such exception.
    :die ${exception_message}
}

# ....................{ EXCEPTIONS ~ prototype             }....................
:func.doc <<'/---'
:void ::func.die_of_prototype()

Throw an exception detailing a syntactic error in the currently declared
function prototype.

This private exception handler is intended to be called _only_ by :func().
/---
function ::func.die_of_prototype() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with ::func.die_of_prototype().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    (( ! # )) || :die 'Expected no arguments.'
    ::pcre.die_of_subject_not_matching\
        "${ZY__CALLABLE_PROTOTYPE_PCRE}"\
        "${ZY__FUNC_PROTOTYPE}"\
        "$(::func.label)prototype "
}

# ....................{ EXCEPTIONS ~ arg                   }....................
:func.doc <<'/---'
:void ::func.die_of_arg(:str exception_message)

Throw an exception with the passed message, presumably detailing a syntactic or
semantic error in the currently parsed argument in the currently declared
function prototype.

This private exception handler is intended to be called _only_ by :func().
/---
function ::func.die_of_arg() {
    (( # == 1 )) || :die 'Expected one exception message.'
    local arg_name

    # Such argument's current name.
    ::func_arg_current.Name arg_name

    # Throw such exception.
    ::func.die 'argument ${'${arg_name}'} '${1}
}

# ....................{ EXCEPTIONS ~ arg : type            }....................
:func.doc <<'/---'
:void ::func.die_of_arg_type(:str exception_message)

Throw an exception with the passed message, presumably detailing a syntactic or
semantic error in the currently parsed argument type in the currently declared
function prototype.

This private exception handler is intended to be called _only_ by :func().
/---
function ::func.die_of_arg_type() {
    (( # == 1 )) || :die 'Expected one exception message.'
    local arg_type

    # Such argument's current type.
    ::func_arg_current.Type arg_type

    # Throw such exception.
    ::func.die_of_arg 'type '${arg_type}' '${1}
}

:func.doc <<'/---'
:void ::func.die_of_arg_type_direct(:str exception_message)

Throw an exception with the passed message, presumably detailing a semantic
error in the currently parsed argument type in the currently declared function
prototype correctable by revising such argument to refer to a variable by name.

This private exception handler is intended to be called _only_ by :func().
/---
function ::func.die_of_arg_type_direct() {
    (( # == 1 )) || :die 'Expected one exception message.'
    local arg_type_source arg_type_target

    # Current argument type.
    ::func_arg_current.Type arg_type_source

    # If such argument has a major subtype of "var", the caller guaranteed such
    # argument to also have a minor subtype. Recommend such argument be
    # refactored to refer to a variable of such minor subtype prefixed by ":"
    # (e.g., from ":str/var+int" to "^:int").
    if [[ ${match[
        ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR}]} == 'var' ]] {
        # If this argument has a minor subtype (declaring the type of the
        # variable referred to), this type is truncatable via variable type
        # indirection (e.g., from ":str/var@int" to ":Int"). Do so.
        if (( ${#match[
            ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]-} )) {
            local arg_subtype_minor=${match[
                ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]}
            arg_type_target=':'${arg_subtype_minor[1]}${(U)arg_subtype_minor[2]-}${arg_subtype_minor[3,-1]-}
        # Else, this argument refers to variables of any type and hence must be
        # refactored as follows.
        } else {
            arg_type_target=':str'${ZY__CALLABLE_PROTOTYPE_ARG_SUBTYPE_MAJOR_PREFIX}'var'
        }
    # Else, recommend this argument be refactored to refer to a variable of
    # this argument's local subtype (e.g., from ":list" to ":List").
    } else {
        arg_type_target=${ZY__FUNC_ARG_SUBTYPE_LOCAL[1]}${(U)ZY__FUNC_ARG_SUBTYPE_LOCAL[2]-}${ZY__FUNC_ARG_SUBTYPE_LOCAL[3,-1]-}

        # If this argument has a minor subtype, append that type.
        (( ! ${#match[
            ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]-} )) ||
            arg_type_target+=${ZY__CALLABLE_PROTOTYPE_ARG_SUBTYPE_MINOR_PREFIX}${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]}
    }

    # Throw an exception reflecting such argument's current type.
    ::func.die_of_arg_type\
        ${1}' Consider refactoring this argument into a string referring to a variable via type indirection (e.g., from "'${arg_type_source}'" to "'${arg_type_target}'").'
}

# ....................{ EXCEPTIONS ~ arg : variadic        }....................
:func.doc <<'/---'
:void ::func.die_of_arg_variadic(:str exception_message)

Throw an exception with the passed message, presumably detailing a semantic
error in the variadicity of the currently parsed argument in the currently
declared function prototype.

This private exception handler is intended to be called _only_ by :func().
/---
function ::func.die_of_arg_variadic() {
    (( # == 1 )) || :die 'Expected one exception message.'
    local\
        arg_variadicity_source\
        arg_type_source\
        arg_type_target\
        arg_name_source\
        arg_name_target

    # Current argument variadicity, type, and name.
    ::func_arg_current.Variadicity arg_variadicity_source
    ::func_arg_current.Name arg_name_source
    ::func_arg_current.Type arg_type_source

    # Argument type and name to recommend such argument be refactored as.
    arg_type_target=':List'
    arg_name_target=${arg_name_source}

    # If such argument is mandatory, constrain such list to be non-empty.
    [[ ${arg_variadicity_source} ==\
       ${ZY__CALLABLE_PROTOTYPE_ARG_VARIADIC_MISSABLE_PREFIX} ]] ||
        arg_type_target+=${ZY__CALLABLE_PROTOTYPE_ARG_SUBTYPE_MAJOR_PREFIX}'nonempty'

    # Throw an exception reflecting such argument's current type and name.
    ::func.die\
        ${1}' Consider converting variadic argument ${'${arg_name_source}'} into a non-variadic string indirectly referring to a list (e.g., from "'${arg_variadicity_source}${arg_type_source}' '${arg_name_source}'" to "'${arg_type_target}' '${arg_name_target}'").'
}

# ....................{ EXCEPTIONS ~ arg : count           }....................
:func.doc <<'/---'
:void ::func.die_of_arg_count(
    *:str func_args
    :str exception_message)

Throw an exception due to the passed argument list (presumably, the same list
passed to the calling function) containing an unexpected number of arguments
detailed by the passed exception message. This private exception handler is
intended to be called _only_ by higher-level argument count exception handlers
(e.g., ::func.die_of_arg_count_not_equaling()).
/---
function ::func.die_of_arg_count() {
    (( # >= 1 )) || :die\
        'Expected zero or more arguments and one exception message.'
    local\
        exception_message=${@[-1]}\
        func_name\
        func_prototype\
        func_args
    integer func_arg_index=1
    (( ${#funcstack} >= 3 )) || :die 'Called directly from the command line.'

    # Such function's name.
    func_name=${funcstack[3]}

    # Such function's prototype, indented for readability.
    :func.Prototype "${func_name}" func_prototype
    ::Str.indent func_prototype

    # Such function's arguments, reformatted for readability.
    local func_arg
    for   func_arg (${@[1,-2]}) {
        func_args+='['${func_arg_index}'] '${func_arg}$'\n'
        func_arg_index+=1
    }

    #FIXME: For readability, prefix such message by the name of the parcel
    #containing such function.

    # Throw such exception message, appropriately prefixed and suffixed.
    :die 'Function '${func_name}'() expected '${exception_message}$'\n\n''Function prototype:'$'\n'${func_prototype}$'\n\n''Arguments passed:'$'\n'${func_args}' '
}

:func.doc <<'/---'
:void ::func.die_of_arg_count_not_equaling(
    *:str func_args
    :int+nonnegative func_arg_count_expected)

Throw an exception due to the passed argument list (presumably, the same list
passed to the calling function) _not_ containing the passed number of arguments
(presumably, required by such function's prototype). This private exception
handler is intended to be programmatically prefixed to function bodies _only_
by :func().
/---
function ::func.die_of_arg_count_not_equaling() {
    (( # )) || :die\
        'Expected one or more arguments and one expected argument count.'
    ::func.die_of_arg_count "${@[1,-2]}"\
        "${@[-1]} arguments but received ${#@[1,-2]}."
}

:func.doc <<'/---'
:void ::func.die_of_arg_count_not_exceeding(
    *:str func_args
    :int+nonnegative func_arg_count_min)

Throw an exception due to the passed argument list (presumably, the same list
passed to the calling function) _not_ containing at least the passed number of
arguments (presumably, required by such function's prototype). This private
exception handler is intended to be programmatically prefixed to function
bodies _only_ by :func().
/---
function ::func.die_of_arg_count_not_exceeding() {
    (( # )) || :die\
        'Expected one or more arguments, one actual argument count, and one minimum argument count.'
    ::func.die_of_arg_count "${@[1,-3]}"\
        "at least ${@[-1]} arguments but received only ${#@[1,-2]}."
}

:func.doc <<'/---'
:void ::func.die_of_arg_count_not_ranging(
    *:str func_args
    :int+nonnegative func_arg_count_min
    :int+nonnegative func_arg_count_max)

Throw an exception due to the passed argument list (presumably, the same list
passed to the calling function) containing fewer than the passed minimum number
of arguments or more than the passed maximum number of arguments (presumably,
required by such function's prototype). This private exception handler is
intended to be programmatically prefixed to function bodies _only_ by
:func().
/---
function ::func.die_of_arg_count_not_ranging() {
    (( # >= 2 )) || :die\
        'Expected one or more arguments, one minimum argument count, and one maximum argument count.'
    ::func.die_of_arg_count "${@[1,-3]}"\
        "between ${@[-2]} and ${@[-1]} arguments but received ${#@[1,-3]}."
}

# ....................{ EXCEPTIONS ~ arg type              }....................
:func.doc <<'/---'
:void ::func.die_unless_args_pass_tester(
    +:str func_arg_values
    :str func_arg_expansions
    :str/:func tester_name)

Throw an exception unless the passed function reports success when passed the
subset of passed arguments indicated by the passed space-delimited string of
argument expansions (e.g., `"${1}" "${@[-2]}"`, indicating only the first and
second-to-last arguments to be passed to the passed function).

Ideally, these arguments should be the same arguments originally passed to the
calling function. While awkward, these calling conventions automate and hence
simplify exception handling of erroneous arguments in synthesized functions.

== Function Prototype ==

This exception handler expects the passed function to be prototyped as follows:
`[status=:bool] ${tester_name}(${arg_type} arg1 ...)`, where `${arg_type}`
is the argument type expected by such function (e.g., `:str`).
/---
function ::func.die_unless_args_pass_tester() {
    (( # >= 3 )) || :die\
        'Expected one or more argument values, one argument indices string, and one type tester function name.'
    local\
        arg_expansions=${@[-2]}\
        arg_tester_name=${@[-1]}\
        arg_index\
        arg_index_min\
        arg_index_max\
        arg_value\
        error_message\
        func_prototype

    # Pop such arguments off the current argument list. See pop_args_2() for
    # further details.
    argv[-2,-1]=()

    # Validate sanity.
    :func.die_unless "${arg_tester_name}"
    (( ${#funcstack} >= 2 )) || :die 'Called directly from the command line.'

    # List of all argument indices to be tested. While the passed space-
    # delimited string contains only "@["- and "]"-delimited integers and
    # innteger ranges, this list contains only actual integers.
    local -a arg_indices

    # Such function's prototype, indented for readability.
    :func.Prototype "${func_name}" func_prototype
    ::Str.indent func_prototype

    # For each argument expansion split from such string on whitespace...
    local arg_expansion
    for   arg_expansion ("${(z)arg_expansions}") {
        # Argument index split from such expansion by stripping such expansion
        # of its "${@[" prefix and "]}" suffix.
        arg_index=${${arg_expansion#\$\{@\[}%]\}}

        # If such index is comma-separated, such index is actually a comma-
        # delimited range of argument indices and must be split into the latter.
        if [[ ${arg_index} == (#b)([^,]##),(*) ]] {
            # Capture such bounds from such string.
            arg_index_min=${match[1]}
            arg_index_max=${match[2]}

            #FIXME: Shift such function to ={*-test/var}.
            :int.die_unless "${arg_index_min}" "${arg_index_max}"

            # If such upper bound is a negative index, convert such bound into
            # a positive index to ensure the enumeration below behaves sanely.
            ((  arg_index_max >= 0 )) ||
                arg_index_max=$(( # + arg_index_max + 1 ))

            # Append all such indices to such list.
            arg_indices+=( {${arg_index_min}..${arg_index_max}} )
        # Else, such result is a single index. Append such index to such list.
        } else {
            :int.die_unless "${arg_index}"
            arg_indices+=${arg_index}
        }
    }

    # Iterate arguments by index until finding the first failing argument.
    # Such indices encompass both index ranges (e.g., "@[3,-1]") and negative
    # indices (e.g., "@[-1]" and hence are *NOT* strictly integers.
    for arg_index ("${arg_indices}") {
        # If such argument index is not an integer *OR* is not a valid index
        # for the passed argument list, throw an exception. Curiously,
        # attempting the latter test with "@" rather than "argv" results in a
        # parse error of "zsh: bad substitution". *shrug*
        :int.die_unless "${arg_index}"
        (( ${+argv[${arg_index}]} )) || :die\
            'Argument '${arg_index}' referenced, but only '${#}' arguments passed.'

        # Such argument's value.
        arg_value="${@[${arg_index}]}"

        # If such value fails such test, throw an exception.
        "${arg_tester_name}" "${arg_value}" || {
            # Exception message to be thrown.
            error_message='Function '${funcstack[2]}'() expected argument '${arg_index}' '

            # If such tester tests variable types rather than variable values,
            # tailor such exception message to the former.
            if [[ ${arg_tester_name} == (#b)':'[A-Z][a-z_]#'.is' ]] {
                # Continue such message.
                error_message+='to reference variable of type :'${match[1]}', but variable ${'${arg_value}'} '

                #FIXME: The type printed above is a high-level zeshy-specific type;
                #The type printed below is a low-level zsh-specific type.
                #Naturally, the latter should be converted to the former; this
                #will probably require a map from zsh- to zeshy-specific types.

                # If such variable exists, such variable cannot be of the
                # expected type. Tailor such message. See :Var.is().
                if (( ${+parameters[${arg_value}]} )) {
                    error_message+='is of type "'${(tP)arg_value}'".'
                # Else, such variable does not exist. Tailor such message.
                } else {
                    error_message+='not found.'
                }
            # ELse if such tester tests variable values, tailor such message.
            } elif [[ "${arg_tester_name}" == (#b)':'([^.]##)'.is'('_'*|) ]] {
                # Such argument's type, reconstructed from such tester name.
                # Specifically, assume the "."-prefixed portion of such name to
                # supply the major subtype such argument was prototyped with.
                local arg_type=${match[1]}

                # If such tester name implies such argument to have been
                # prototyped with a minor subtype, append such subtype.
                (( ! ${#match[2]-} )) || arg_type+='/'${match[2]}

                # Tailor such message to such argument's type and value.
                error_message+='of type "'${arg_type}'" but received:'$'\n'${arg_value}
            # Else such function is of unexpected form. Throw an exception.
            } else {
                :die 'Argument tester function '${arg_tester_name}'() unrecognized (i.e., name unmatched by glob ":*.is*").'
            }

            # Throw such exception, suffixed by such function prototype.
            :die ${error_message}$'\n\n''Function prototype:'$'\n'${func_prototype}
        }
    }
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str ::func.label()

Get a human-readable string describing the function being currently defined.
/---
function ::func.label() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with ::alias.label().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    (( ! # )) || :die 'Expected no arguments.'
    local func_label
    func_label=$(:parcel.label)'function '

    # If such prototype declares one name, prepend this label by this name.
    if (( ${#ZY__FUNC_NAMES-} == 1 )) {
        func_label+=${ZY__FUNC_NAMES[1]}'() '
    # Else if such prototype declares multiple names, prepend this label by all
    # such names.
    } elif (( ${#ZY__FUNC_NAMES-} > 1 )) {
        func_label+='{'${ZY__FUNC_NAMES[*]}'}() '
    # Else, such prototype has not yet been parsed. Ignore such names.
    }

    # Get such label.
    print -r -- "${func_label}"
}

# ....................{ LETTERS                            }....................
    #FIXME: For simplicity, we currently assume missable variadicity (e.g.,
    #"*:list"). This is terrible, as non-missable variadicity exists (e.g.,
    #"+:list"). This function thus needs to reconstruct the variadicity prefix
    #given the global boolean
    #${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_TYPE_IS_VARIADIC_MANDATORY}. If
    #
:func.doc <<'/---'
:void ::func_arg_current.Variadicity(:Str arg_type_name)

Set the passed string variable to the the current argument's variadicity.

Specifically, set this variable to:

* `+`, if this argument is a mandatory variadic argument.
* `*`, if this argument is a missable variadic argument.
* ``, otherwise.

This private setter is intended to be called _only_ by exception handlers called
by :func().
/---
function ::func_arg_current.Variadicity() {
    (( # == 1 )) || :die 'Expected one string name.'
    local arg_variadicity__facv=${1}

        if (( ${ZY__FUNC_ARG_IS_VARIADIC_MANDATORY} )) {
        :Str.set "${arg_variadicity__facv}" '+'
    } elif (( ${ZY__FUNC_ARG_IS_VARIADIC_MISSABLE} )) {
        :Str.set "${arg_variadicity__facv}" '*'
    } else {
        :Str.set "${arg_variadicity__facv}" ''
    }
}

:func.doc <<'/---'
:void ::func_arg_current.Type(:Str arg_type_name)

Set the passed string variable to the the current argument's *full type* (i.e.,
`/`- and `+`-delimited concatenation of such argument's subtypes and related
syntactic constructs) as declared by the current function prototype (e.g.,
`:str/var+scalar` for an argument with local, major, and minor subtypes
`:str`, `var`, and `scalar`).

This private setter is intended to be called _only_ by exception handlers called
by :func().
/---
function ::func_arg_current.Type() {
    (( # == 1 )) || :die 'Expected one string name.'
    local arg_type_type__fact=${1} arg_type__fact

    # Argument type reconstructed from argument subtypes.
    arg_type__fact=${match[
        ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_LOCAL}]}
    (( ! ${#match[
        ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR}]-} )) ||
        arg_type__fact+=${ZY__CALLABLE_PROTOTYPE_ARG_SUBTYPE_MAJOR_PREFIX}${match[
            ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR}]}
    (( ! ${#match[
        ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]-} )) ||
        arg_type__fact+=${ZY__CALLABLE_PROTOTYPE_ARG_SUBTYPE_MINOR_PREFIX}${match[
            ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]}

    # Set such type.
    :Str.set "${arg_type_type__fact}" "${arg_type__fact}"
}

:func.doc <<'/---'
:void ::func_arg_current.Name(:Str arg_name_name)

Set the passed string variable to the current argument's *full name* (i.e.,
`+`-delimited concatenation of such argument's mandatory documentation-specific
name and optional major and minor subnames) as declared by the current function
prototype (e.g., `the/trinity+test` for the argument with name `the`, major
subname `trinity`, and minor subname `test`).

This private setter is intended to be called _only_ by exception handlers called
by :func().
/---
function ::func_arg_current.Name() {
    (( # == 1 )) || :die 'Expected one string name.'
    local arg_name_name__facn=${1} arg_name__facn

    # Argument name reconstructed from argument subnames.
    arg_name__facn=${match[
        ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_LOCAL}]}
    (( ! ${#match[
        ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_PARAM}]-} )) ||
        arg_name__facn+=${ZY__CALLABLE_PROTOTYPE_ARG_SUBNAME_PARAM_PREFIX}${match[
            ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_PARAM}]}

    # Set such name.
    :Str.set "${arg_name_name__facn}" "${arg_name__facn}"
}

# --------------------( WASTELANDS                         )--------------------
    # 1 if this type is indirectable (i.e., convertable from an direct to
    # indirect type) and 0 otherwise. For example:
    #
    # * ":str/var@int" is convertable to merely ":Int".
    # local arg_type_is_indirectable=0

    # arg_name__fsan=${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_HELP}]}
    # (( ! ${#match[
    #     ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_MAJOR}]-} )) ||
    #     arg_name__fsan+='/'${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_MAJOR}]}
    # (( ! ${#match[
    #     ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_MINOR}]-} )) ||
    #     arg_name__fsan+='+'${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_MINOR}]}

    # String suffixing such exception message. If this function's prototype has
    # been already declared, this is such prototype (indented for readability).
    # If such function's prototype has been parsed, one or more function names
    # have been parsed from such prototype. In such case, prepend this label by
    # the first such name.

    # # String prefixing such exception message.
    # exception_prefix=$(:parcel.label)'function '
    #
    # # If such prototype has been parsed, at least one function name has been
    # # matched from such prototype. In such case, prepend such exception by the
    # # first such name.
    # if [[ -n ${ZY__FUNC_NAMES[1]-} ]] {
    #     exception_prefix+=${ZY__FUNC_NAMES[1]-}'() '
    # }

# == Message Format ==
#
# For convenience, such message is expected to be a lowercase sentence fragment:
#
# * Prefixed by `Function ${func_name}() `, where `${func_name}` is the first
#   function name such prototype declares. (For simplicity, any subsequent
#   function name such prototype declares is currently ignored.)
# * Suffixed by such prototype.

    # If such function was declared in a parcel, prefix such exception message
    # by such parsel.
    # exception_prefix=$(:parcel.label)
    # if [[ -n ${exception_prefix} ]] {
    #     exception_prefix+='function '
    # } else {
    #     exception_prefix+='Function '
    # }

# Handle *function declarer exception handlers* (i.e., functions throwing
# exceptions resulting from validation errors in declared functions).

# Due to a chicken-and-the-egg problem, all functions and globals defined below
# are subsequently documented under @{help} in the main codebase.

    # Note that, due to zsh obscurities, the suffixing " " is *REQUIRED* to
    # ensure such exc

    # local arg_type_name__fsat=${1} arg_type__fsat

    # # Reconstruct such type from such subtypes.
    # arg_type__fsat=${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPES}]}

    # # Set such type.
    # :Str.set "${arg_type_name__fsat}" "${arg_type__fsat}"

    # Argument type and name to recommend such argument be refactored as,
    # stripping all suffixing digits from such name.  Dismantled, this is:
    #
    # * "%%", greedily removing the longest matching suffix.
    # * "<->##", matching one or more digits.
    # arg_type_target='^:list'
    # arg_name_target=${arg_name_source%%<->##}

    # # Reconstruct such type from such subtypes.
    # arg_type__fsat=${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_TYPE_IS_INDIRECT}]}${ZY__FUNC_ARG_SUBTYPE_LOCAL}
    # if [[ -n ${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR}]} ]] {
    #     arg_type__fsat+='/'${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR}]}
    # }
    # if [[ -n ${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]} ]] {
    #     arg_type__fsat+='/'${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR}]}
    # }

    # Obtain such name from such subnames.
    # ${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME}]}
    # if [[ -n ${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME_SUFFIX}]} ]] {
    #     arg_name__fsan+='+'${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME_SUFFIX}]}
    # }

            # } else {
            #     # Such argument's current type.
            #     local arg_type
            #     ::func_arg_current.Type arg_type

            # } elif [[ "${arg_tester_name}" == (#b)(':'[^.]##)'.is'('_'*|) ]] {
            #     error_message+='of type '${match[1]}' but received:'$'\n'${arg_value}

# into such argument's original type
# string, as matched by the current PCRE-based iteration (e.g., from local,
# major, and minor subtypes `:str`, `var`, and `scalar` to original type
# string `:str/var+scalar). This private setter is intended to be called
# _only_ by exception handlers called by ::func_.stop().

                    # error_message+='is of type '${(tP)arg_value}' and value:'$'\n'${(P)arg_value}

# the `+`-delimited concatenation of the
# current argument's mandatory name and optional name suffix (if any), as matched
# by the current PCRE-based iteration (e.g., from name `trinity` and suffix
# `test` to `trinity+test`). Such concatenation reconstructs such argument's
# original name as declared by the current function's prototype. This private
# setter is intended to be called _only_ by exception handlers called by
# ::func_.stop().

                # if { :Var.is } {
    # arg_name_source=${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME}]}
    #FUXME: Such local references are now broken due to recent optimizations.
    #Repair, please.

    # local arg_type_target='*'

    # # If such argument has a major subtype of "var", the caller guaranteed such
    # # argument to also have a minor subtype. Recommend such argument be
    # # refactored to refer to a variable of such minor subtype prefixed by ":"
    # # (e.g., from ":float/var+int" to "*:int").
    # if [[ "${arg_subtype_major}" == 'var' ]] {
    #     arg_type_target+=':'${arg_subtype_minor}

    # Argument type to recommend such argument be refactored as.

        # 'argument ${'${arg_name}'} type '${match[${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPES}]}' '${1}
#FUXME: Consider renaming to merely ::func.die().

#invalid, as 
#     local arg_type_label=${arg_type}
# 
#     # If such argument is subtyped, append such label by such types.
# [[ -z "${arg_subtype}" ]] || print -r -- '+'${arg_subtype}
# 
#     ::func.die\
#         'argument ${'${arg_name}'} type '${arg_type_label}' invalid, as '${1}

#FUXME: Consider renaming to merely ::func_.die_of(). Indeed, we can profitably
#drop the redundant "_cause" elsewhere. Exception handlers leverage somewhat
#different nomenclature than the remainder of the codebase -- and that's good.
#In the case of *.die_of*() handlers, the preposition "of" already implies such
#function to accept an exception message; so, we needn't ever state that.
#Indeed, attempting to add "_cause" induces trouble. As example, which would we
#prefer: ::func_.die_of_arg_type_cause() or ::func.die_of_arg_type()?
#For orthogonality, probably the latter; 

            # If either such string is not an integer, throw an exception.

#FUXME: Why pass the actual argument count? Since we also pass the argument
#list, we already know such argument count. Refactor. Simplify.

    # :int_nonnegative func_arg_count_actual,

# Throw an exception due to the passed argument list (ideally, the same list
# passed to the calling function) _not_ containing exactly as many arguments as
# required by such function's prototype. This private exception handler is
# intended to be programmatically prepended onto function bodies _only_ by
# ::func_.stop() and cohorts.
