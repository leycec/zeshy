#!/usr/bin/env zeshy
# --------------------( LICENSE                           )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under ={help} in the main codebase.

#FIXME: Honestly, this parcel is increasingly irrelevant. Since all remaining
#functionality is only used for documentation purposes, this functionality
#should simply be inlined directly into zy://help/ and this parcel excised.

# ....................{ SETTERS ~ global                  }....................
# :void ::global_prototype.Names(:str global_prototype :List names_name)
#
# Set the passed list to the list of all global names declared by the passed
# global prototype of the passed human-readable type.
function ::global_prototype.Names() {
    (( # == 2 )) || :die 'Expected one global prototype and one list name.'
    local\
        prototype__gpsn=${1}\
        names_name__gpsn=${2}\
        names_and_optional_value__gpsn
    :List.die_unless "${names_name__gpsn}"

    # If this prototype is syntactically invalid, throw an exception.
    [[ ${prototype__gpsn} =~ ${ZY__GLOBAL_PROTOTYPE_PCRE} ]] || :die\
        $(:parcel.label)' global prototype invalid:'$'\n\n'${prototype__gpsn}

    # If this prototype only specifies one name, set this list to this name.
    if (( ${#match[1]-} )) {
        # Set such list. See :List.items().
        set -A ${names_name__gpsn} "${match[1]}"
    # Else, this prototype specifies multiple "="-delimited names. Since
    # variable names may *NOT* themselves contain "=" characters, these names
    # may be efficiently split on these characters.
    } else {
        # If this match failed to capture these names, throw an exception.
        (( ${#match} == 2 )) || :die\
            'Global names unparsable from prototype:'$'\n\n'${prototype__gpsn}

        # Set this list to these names split on "=" characters. See
        # :list.set_to_string_split_on_string().
        set -A ${global_names_list_name__slsbtgnviv} "${(s:=:)match[2]}"
    }
}

# ....................{ SETTERS ~ callable                }....................
# :void ::callable_prototype.Names(
#     :str callable_prototype :List names_name :str callable_label)
#
# Set the passed list to the list of all callable names declared by the passed
# callable prototype of the passed human-readable type.
function ::callable_prototype.Names() {
    (( # == 3 )) || :die\
        'Expected one callable prototype, one list name, and one callable label.'
    local\
        prototype__cpolsn=${1}\
        names_name__cpolsn=${2}\
        label__cpolsn=${3}
    :List.die_unless "${names_name__cpolsn}"

    #FIXME: *THIS SHOULD THROW EXCEPTIONS ON SYNTAX ERRORS.* It currently
    #doesn't, due to the extremely large number of nonconformant prototypes we
    #currently have hanging around. Fix this as soon as feasible, please.

    # If such prototype is syntactically invalid, throw an exception.
    [[ ${prototype__cpolsn} =~ ${ZY__CALLABLE_PROTOTYPE_PCRE} ]] || {
        :warning.output ${label__cpolsn}' prototype "'${prototype__cpolsn}' invalid.'
        set -A ${names_name__cpolsn} 'INVALID_PROTOTYPE'
        return 0
    }
        # ::pcre.die_of_subject_not_matching\
        #     "${ZY__CALLABLE_PROTOTYPE_PCRE}"\
        #     "${prototype__cpolsn}"\
        #     ${label__cpolsn}' prototype'

    # ..................{ PARSE ~ names                      }..................
    # Callable name matched from such prototype for prototypes declaring only
    # one such name. Since this is the common case, this name is localized.
    ZY__MATCH=${match[
        ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME}]-}

    # If such prototype declares only one name, set such list to this name
    # *AFTER* stripping both single- and double-quotes from this name. If this
    # name is unquoted, note that flag "(Q)" safely reduces to a noop.
    if (( ${#ZY__MATCH} )) {
        # Set such list. See :List.items().
        set -A ${names_name__cpolsn} "${(Q)ZY__MATCH}"
    # Else, such prototype declares multiple names. In such case, set such list
    # to all shell words split from the substring of these names. By PCRE
    # design, name syntax corresponds to shell word syntax.
    } else {
        set -A ${names_name__cpolsn} "${(QZ~n~)match[
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAMES}]-}"
    }
}
