#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under ={string} in the main codebase.

# ....................{ SETTERS                            }....................
#FIXME: Excessive example. Split in twain, please.
ZY__HELP_FUNCS+='
:void :Str.set(:Str str_name +:str texts)

Set the string variable with the passed name to the undelimited concatenation of
all passed strings (i.e., without separation between these strings).

== Examples ==

.:Str.set()
==========================================
[source]
------------------------------------------
>>> :str on_dmt on_entelechy=\
... "There''s this feeling which comes over your body: half arousal, half
...  anaesthesia. The air appears to suddenly have been sucked out of the
...  room because all the colors brighten visibly, as though some intervening
...  medium has been removed. And then there''s a sound, like a piece of bread
...  wrapper or cellophane being scrunched up and thrown away. A friend of
...  mine says this is radio-entelechy leaving the anterior fontanelle at the
...  top of your head."
>>> :str on_mundanity=\
... "I''m not sure I want to line up with that, but a membrane is being
...  ripped; something is being torn. And then there is a total – what
...  Mircea Eliade called in a wonderful phrase – \"a complete rupture of
...  the mundane plane.\" You know? That''s like a hit and run accident except
...  the car came from hyperspace."
>>> :Str.set on_dmt "${on_entelechy}" "${on_mundanity}"
>>> get_string_line "${on_dmt}" 1
There''s this feeling which comes over your body: half arousal, half
>>> get_string_line "${on_dmt}" -1
the car came from hyperspace.
------------------------------------------
==========================================
'
function :Str.set() {
    (( # >= 2 )) || :die 'Expected one string name and one or more strings.'
    local str_name__Ss=${1}
    :Str.die_unless "${str_name__Ss}"

    # If only one such string was passed, no concatenation is required. In this
    # case, set this variable via assignment indirection.
    if (( # == 2 )) {
        : "${(P)str_name__Ss::=${2}}"
    # Else, two or more such strings were passed, in which case concatenation
    # is required. Set this variable to the undelimited concatenation of all
    # such strings.
    } else {
        # Locally clear canonical string global ${IFS} (i.e., the internal
        # field separator). Since zsh implicitly delimits strings concatenated
        # with "*" by this global's value, clearing this global guarantees
        # undelimited concatenation. This incantation was surprisingly arduous
        # to unearth. In particular, note that if "*" is *NOT* double-quoted,
        # zsh ignores the value of ${IFS} during concatenation and hence
        # delimits these strings by single spaces. (Ugh.)
        local IFS=

        # Set this string with undelimited concatenation.
        : "${(P)str_name__Ss::=${*[2,-1]}}"
    }
}

# ....................{ SETTERS ~ stdin                    }....................
ZY__HELP_FUNCS+='
:void :Str.from_stdin[
    args=( :Str str_name)
    stdin=(:str input)]

Set the string variable with the passed name to all standard input to the
current context if such input is non-empty or throw an exception otherwise.

See :Str.from_stdin_if_nonempty().

== Examples ==

.:Str.from_stdin()
==========================================
[source]
------------------------------------------
>>> :str chrome_yellow on_indignation=\
... "The surest way to work up a crusade in favor of some good cause is to
...  promise people they will have a chance of maltreating someone. To be
...  able to destroy with good conscience, to be able to behave badly and
...  call your bad behavior \"righteous indignation\" — this is the height of
...  psychological luxury, the most delicious of moral treats."
>>> :Str.from_stdin chrome_yellow <<<"${on_indignation}"
>>> get_string_line "${chrome_yellow}" -1
psychological luxury, the most delicious of moral treats.
------------------------------------------
==========================================
'
function :Str.from_stdin() {
    :Str.from_stdin_if_nonempty "${@}" || :die 'Standard input empty.'
}


#FIXME: Add example.
ZY__HELP_FUNCS+='
[status=:bool] :Str.from_stdin_if_nonempty[
    args=( :Str str_name)
    stdin=(:str input)]

Set the string variable with the passed name to all standard input to the
current context if such input is non-empty or report failure otherwise.

Since this function indefinitely silently blocks until receiving *EOF* (end of
file) from such input, call this function _only_ where such input is known to
succinctly terminate (e.g., here-documents and -strings). See
:stdin.is_nonempty() for further details on ``non-empty'''' standard input.
'
function :Str.from_stdin_if_nonempty() {
    (( # == 1 )) || :die 'Expected one string name.'

    # If standard input is readable without blocking, set this string to all
    # this input. Ideally, this would be implementable as follows:
    #
    #    IFS= read -r -t 0 -d '' "${1}"
    #
    # Unfortunately, option "-d" requires a nonempty character, implying read()
    # to only read in an explicitly delimited manner. Hence, we defer to the
    # more convoluted logic of this tester instead.
    :stdin.is_noninteractive && :Str.set "${1}" "$(< /dev/stdin)"
}

# ....................{ SETTERS ~ stdin                    }....................
#FIXME: Add example.
ZY__HELP_FUNCS+='
:void ::Str.indent(:Str str_name)

Indent each line of the string variable with the passed name by four spaces.

This function is intended to be called principally by exception handlers (e.g.,
::func.die()).
'
function ::Str.indent() {
    (( # == 1 )) || :die 'Expected one string name.'
    local str_name__si=${1}
    :Str.die_unless ${str_name__si}

    # Indent this string.
    :Str.set ${str_name__si} '    '${(P)str_name__si//$'\n'/$'\n'    }
}
