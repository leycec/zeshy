#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *typed alias declarers* (i.e., functions declaring aliases of specific
type).
/---

# ....................{ DECLARERS                          }....................
# To permit previously declared callable (e.g., @func()) to call the following
# the following callables, such callables are defined as functions rather than
# aliases. The latter would otherwise suffice!

:func_ ':void :alias_command[
    args=( :str alias_prototype
           :str alias_expansion)
    stdin=(:str alias_doc)] [is_args_unhandled]' :func{
    (( # == 2 )) || :die 'Expected one alias prototype and one alias expansion.'
    ::alias 'command' 'aliases' "${@}"
}:func <<'/---'
Declare one or more *command aliases* (i.e., aliases expanded only in command
position) identified by the passed prototype, expanding to the passed expansion
and documented by the documentation passed on standard input (e.g., as a
here-document or -string).

If any such aliases have already been declared or defined, an exception is
thrown.

== See Also ==

* ::alias().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :alias_command ':void :str.preserve(:str text)'\
...    '{ :str in_memoria; in_memoria="$(:stdin)" } <<<' <<'/---'
... It is not enough to fight for the land; it is even more important to
... enjoy it. While you can. While it's still here.
... /---
>>> :str.preserve\
...    "So get out there and hunt and fish and mess around with your friends,
...     ramble out yonder and explore the forests, climb the mountains, bag the
...     peaks, run the rivers, breathe deep of that yet sweet and lucid air,
...     sit quietly for a while and contemplate the precious stillness, the
...     lovely, mysterious, and awesome space."
>>> get_string_line "${in_memoria}"
It is not enough to fight for the land; it is even more important to
------------------------------------------
==========================================
/---

:func_ ':void :alias_word[
    args=( :str alias_prototype
           :str alias_expansion)
    stdin=(:str alias_doc)] [is_args_unhandled]' :func{
    (( # == 2 )) || :die 'Expected one alias prototype and one alias expansion.'
    ::alias 'word' 'galiases' "${@}"
}:func <<'/---'
Declare one or more *word aliases* (i.e., aliases expanded in both command
position *and* all command argument positions and hence for all shell words)
identified by the passed prototype, expanding to the passed expansion and
documented by the documentation passed on standard input (e.g., as a
here-document or -string).

If any such aliases have already been declared or defined, an exception is
thrown.

== See Also ==

* ::alias().

== Examples ==

.:alias_word()
==========================================
[source]
------------------------------------------
>>> :alias_word ':void :str.compensate(:str text)'\
...    '
...     { :str.global in_honoraria; in_honoraria="$(:stdin)" } <<<' <<'/---'
... Enjoy yourselves, keep your brain in your head and your head firmly
... attached to the body, the body active and alive, and I promise you this
... much; I promise you this one sweet victory over our enemies, over those
... desk-bound men and women with their hearts in a safe deposit box, and
... their eyes hypnotized by desk calculators.
... /---
>>> :stdout.echo "I promise you this; " :str.compensate\
...    "You will outlive the bastards."
>>> :stdout.echo "${in_honoraria}"
You will outlive the bastards.
------------------------------------------
==========================================
/---

:func_ ':void :alias_command_filetype[
    args=( :str alias_prototype
           :str alias_expansion)
    stdin=(:str alias_doc)] [is_args_unhandled]' :func{
    (( # == 2 )) || :die 'Expected one alias prototype and one alias expansion.'
    ::alias 'command_filetype' 'saliases' "${@}"
}:func <<'/---'
Declare one or more *command filetype aliases* (i.e., aliases expanded when
filenames with such filetype are in command position) identified by the passed
prototype, expanding to the passed expansion and documented by the documentation
passed on standard input (e.g., as a here-document or -string).

If any such aliases have already been declared or defined, an exception is
thrown.

== See Also ==

* ::alias().

== Examples ==

.:alias_command_filetype()
==========================================
[source]
------------------------------------------
>>> :alias_command_filetype ':str :file.stabilize(:str pdf_filename)'\
...    ':stdout.echo\
...       "But the profoundest implications of the decreased work week were
...        philosophical and ecological: mankind, the Ecotopians assumed, was
...        not meant for production, as the 19th and 20th centuries believed.
...        Instead, humans were meant to take their modest place in the
...        seamless, stable-state web of living organisms, disturbing that web
...        as little as possible."
...
...     {
...         :str pdf_filename="$(:stdin)" pdf_media_type
...         :set_string_to_file_media_type pdf_media_type "${pdf_filename}"
...         :stdout.echo "${pdf_filename}: ${pdf_media_type}"
...     } <<<' <<'/---'
... This would mean sacrifice of present consumption, but it would ensure
... future survival.
... /---
>>> :file.stabilize "Ernest Callenbach.epub"
>>> get_string_line "$(Ernest Callenbach.pdf)" -1
Ernest Callenbach.pdf: application/pdf
------------------------------------------
==========================================
/---
