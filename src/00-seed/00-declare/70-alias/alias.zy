#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *untyped alias declarers* (i.e., functions declaring aliases of
arbitrary type).
/---

#FIXME: Alias expansions containing macro expansions pose a slight issue,
#though certainly solvable. Consider a macro :some_macro and alias :some_alias
#expanding as follows:
#
#    alias ":some_alias"="@some_macro"
#
#Simple, right? Right. Unfortunately, the current approach expands macros
#*BEFORE* evaluating the result and hence expands such macro. Thus, this
#approach fails to preprocess macros embedded in aliases. Fortunately, there
#exists a simple alternative:
#
#* Before preprocessing, define a temporary singleton function (e.g.,
#  ::preprocess.code()) whose body is *EXACTLY* the code to be preprocessed:
#  e.g.,
#     functions[::preprocess.code]=${preprocessed_code}
#* After definition, this function's body is such code with all aliases expanded
#  to their results.
#* Preprocess this function's body rather than the original code: e.g.,
#     ::preprocess ${functions[::preprocess.code]}
#* Undefine this function to avoid unexpected side effects.
#
#Inefficient? Yes. But, again, *ALL* digest compilations except the first will
#be backgrounded. Hence, we generally don't care *TOO* much about compilation
#times -- so long as they're not apallingly horrific, anyway.
#FIXME: There's only one (minor) issue with the above approach: shadowing
#order. Namely, macros are supposed to shadow aliases, which shadow functions;
#given the above approach... Actually, the above approach fundamentally falls
#down. Valid zeshy code is expressly *NOT* valid zsh code, and is frequently
#blatantly invalid zsh code; attempting to unconditionally interpret the former
#as the latter is guaranteed to fail (very horribly).
#
#Consider instead expanding macros in alias expansions at alias definition
#time. Such an approach is trivial to implement given current preprocessor
#design *AND* equitably supports macro expansions in aliases without the
#syntactic conflicts or extreme inefficiencies of the above approach. There's
#pretty much no other way to do it, anyway.
#
#This shouldn't be terribly ardous. We'll want to simply ignore macro
#expansions in low-level zsh-specific alias definers (e.g., the alias()
#builtin), which is an acceptable tradeoff for our purposes. It's then
#transparently simple to support macro expansion in alias expansions: simply
#define our high-level alias definers (e.g., :alias_command()) in the same
#exact way that we do our high-level function definer :func(). That is to say,
#our alias definers should all accept an alias prototype as their first
#argument and a "{"- and "}"- delimited block of code as their second argument.
#Given that, the zeshy preprocessor will simply preprocess such code much as it
#does function code. Done, and with maximal laziness on our part.

# ....................{ GLOBALS ~ private                  }....................
:global.doc <<'/---'
:str ZY__ALIAS_TO_EXPANSION_NAME

Name of the canonical map global mapping from enabled aliases of the currently
declared alias' type (i.e., command, general, suffix) to the strings such
aliases expand to for such alias, parsed from such alias' prototype. This
private global is intended to be referenced _only_ by ::alias(). 

== Valid Values ==

Such name _must_ be either:

* `alias`, signifying a command alias.
* `galias`, signifying a general alias.
* `salias`, signifying a suffix alias.
/---
typeset -g ZY__ALIAS_TO_EXPANSION_NAME

:global.doc <<'/---'
:str ZY__ALIAS_TO_EXPANSION_NAME_KEY

Name of the canonical map global mapping from enabled aliases of the currently
declared alias' type (i.e., command, general, suffix) to the strings such
aliases expand to for such alias, indexed by the name of the currently parsed
alias. Dynamically expanding this global under parameter expansion flag `(P)`
yields the expansion of the currently parsed alias if any. This private global
is intended to be referenced _only_ by ::alias().
/---
typeset -g ZY__ALIAS_TO_EXPANSION_NAME_KEY

:global.doc <<'/---'
:str ZY__ALIAS_TYPE

Type of the currently declared alias. This private global is intended to be
referenced _only_ by ::alias().

== Valid Types ==

Such type _must_ be one of the following enumeration-style string literals:

* `command`, signifying a command alias.
* `general`, signifying a general alias.
* `suffix`, signifying a suffix alias.
/---
typeset -g ZY__ALIAS_TYPE

:global.doc <<'/---'
:str ZY__ALIAS_PROTOTYPE

Prototype for the currently declared alias. This private global is intended to
be referenced _only_ by ::alias().
/---
typeset -g ZY__ALIAS_PROTOTYPE

:global.doc <<'/---'
:str ZY__ALIAS_EXPANSION

Expansion for the currently declared alias. This private global is intended to
be referenced _only_ by ::alias().
/---
typeset -g ZY__ALIAS_EXPANSION

:global.doc <<'/---'
:list ZY__ALIAS_NAMES

List of all function names for the currently declared alias, parsed from such
alias' prototype. This private global is intended to be referenced _only_ by
::alias().
/---
typeset -ga ZY__ALIAS_NAMES

:global.doc <<'/---'
:str ZY__ALIAS_NAME

Current name for the currently declared alias, parsed from such alias'
prototype. This private global is intended to be referenced _only_ by
::alias().
/---
typeset -g ZY__ALIAS_NAME

# ....................{ DECLARERS ~ private                }....................
# Manually handle arguments passed to this function, as the aliases defining the
# types of these arguments (e.g., :str()) have yet to be defined.
:func_ ':void ::alias[
    args=( :str alias_type
           :Map aliases_name
           :str alias_prototype
           :str alias_expansion)
    stdin=(:str alias_doc)] [is_args_unhandled]' :func{
    # Localize arguments. Since
    # ::alias.document_prototype,stdin_of_type_if_found_or_noop() already
    # validates this type, avoid doing so here.
    (( # == 4 )) || :die 'Expected one alias type, one aliases map name, one alias prototype, and one alias expansion.'
    ZY__ALIAS_TYPE=${1}
    ZY__ALIAS_TO_EXPANSION_NAME=${2}
    ZY__ALIAS_PROTOTYPE=${3}
    ZY__ALIAS_EXPANSION=${4}

    # If such aliases map is *NOT* a canonical zsh-specific map global, throw
    # an exception.
    [[ ${ZY__ALIAS_TO_EXPANSION_NAME} == ([gs]|)'aliases' ]] || :die\
        'Aliases map ${'${ZY__ALIAS_TO_EXPANSION_NAME}'} unrecognized (i.e., neither "aliases", "galiases", nor "saliases").'

    # Compile the PCRE matching all callable prototype syntax.
    :pcre.compile "${ZY__CALLABLE_PROTOTYPE_PCRE}"

    # Match such prototype into the canonical ${match} list global, containing
    # all groups captured from such prototype by such PCRE. If such prototype
    # is syntactically invalid, throw an exception.
    pcre_match -- "${ZY__ALIAS_PROTOTYPE}" || ::alias.die_of_prototype

    # If such match failed to capture such callable's attributes, names, or
    # arguments, throw an exception. While this should *NEVER* happen, human-
    # readable exceptions demand we ensure this.
    (( ${#match} >= ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS )) ||
        ::func.die 'attributes, names, and/or arguments unparsable.'

    # ..................{ PARSE ~ names                      }..................
    #FIXME: Clearly, ${ZY__MATCH} should be renamed to something like
    #${ZY__SCRATCH}. This is a useful enough global to warrant widespread
    #reuse.

    # Callable name matched from such prototype for prototypes declaring only
    # one such name. Since this is the common case, this name is localized.
    ZY__MATCH=${match[
        ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME}]-}

    # If such prototype declares only one name, set such list to this name
    # *AFTER* stripping both single- and double-quotes from this name. If this
    # name is unquoted, note that flag "(Q)" safely reduces to a noop.
    if (( ${#ZY__MATCH} )) {
        ZY__ALIAS_NAMES=( "${(Q)ZY__MATCH}" )
    # Else, such prototype declares multiple names. In such case, set such list
    # to all shell words split from the substring of these names. By PCRE
    # design, name syntax corresponds to shell word syntax.
    } else {
        ZY__ALIAS_NAMES=( "${(QZ~n~)match[
            ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAMES}]-}" )
    }

    # ..................{ DECLARE                            }..................
    # For each such alias...
    for ZY__ALIAS_NAME ("${ZY__ALIAS_NAMES[@]}") {
        # Such aliases map keyed by such alias name (e.g., "aliases[:str]"),
        # escaping all map-reserved characters in such name (i.e., "[", "]").
        # Dismantled, this is:
        #
        # * "(#m)", capturing each matched "[" and "]" character to ${MATCH}.
        ZY__ALIAS_TO_EXPANSION_NAME_KEY=${ZY__ALIAS_TO_EXPANSION_NAME}'['${ZY__ALIAS_NAME//(#m)[\[\]]/\\${MATCH}}']'

        #FIXME: Arguably, we should also check the canonical list global of the
        #same name prefixed by "dis_" (e.g., ${dis_galiases}). However, this
        #requires redefining ${ZY__ALIAS_TO_EXPANSION_NAME_KEY}; since we
        #need to reuse the current value of such string, we should probably
        #define ${ZY__ALIAS_TO_EXPANSION_NAME_KEY} to the "dis_"-prefixed
        #version of such map key and test such key *BEFORE* redefining such
        #string to its intended map key as above. Currently, laziness previals.

        # If such alias already exists, throw an exception. See :map.is_key().
        (( ${(P)+ZY__ALIAS_TO_EXPANSION_NAME_KEY} == 0 )) ||
            ::alias.die_of_redefinition ${(P)ZY__ALIAS_TO_EXPANSION_NAME_KEY}

        # Declare such alias by assigning to the appropriate key of such map.
        # See :Str.set().
        #
        # Since aliases are unconditionally expanded at their point of use,
        # such declaration performs no parsing or syntactic validation of such
        # expansion and hence *ALWAYS* succeed.  Since *ALL* assignments
        # succeed and hence ignore errors incurred during such assignment, this
        # is a good thing. (For the same reason, functions *CANNOT* be reliably
        # declared by assigning to the appropriate key of canonical map global
        # ${functions}. Why? Because function declaration only succeeds on the
        # condition such function contains no syntactic errors, implying such
        # assignment to ignore erroneous function declarations.)
        : "${(P)ZY__ALIAS_TO_EXPANSION_NAME_KEY::=${ZY__ALIAS_EXPANSION}}"

        #FIXME: This is fairly lame. For one, such function fails to
        #distinguish between alias types; for another, a new function
        #:add_parcel_current_alias_command() should probably be defined passing
        #canonical global "${ZY_PARCEL_NAME}" to a new function
        #:add_parcel_alias_command().

        # Append such alias to the current parcel *AFTER* defining such alias.
        :parcel.add_alias_command "${ZY_PARCEL_NAME}" "${ZY__ALIAS_NAME}"
    }

    #FIXME: Optimize this away by inlining such logic above.

    # Document such aliases with such documentation *AFTER* successfully
    # defining such aliases above.
    ::alias.doc_prototype_from_stdin_if_nonempty\
        "${ZY__ALIAS_NAMES[@]}"\
        "${ZY__ALIAS_TYPE}"\
        "${ZY__ALIAS_PROTOTYPE}"

    # Clear globals declared above. Since clearing *ALL* such globals would be
    # needlessly inefficient, clear only that subset of globals inviting issues
    # elsewhere when left uncleared. See ::func_.stop() for similar logic.
    ZY__ALIAS_NAMES=()
    ZY__ALIAS_PROTOTYPE=

#FIXME: Update hideously obsolete documentation.
#FIXME: Add examples.
}:func <<'/---'
Declare all aliases specified by the passed alias prototype, documented by
http://asciidoc.org[AsciiDoc]-formatted standard input if passed or
undocumented otherwise. For convenience, consider passing such documentation as
a single- or double-quoted here-document: e.g.,

== Caveats ==

This function is a low-level helper intended to be called only by high-level
alias declarators (e.g., :alias_command.define()). For forwards compatibility
with future revisions, call such functions rather than this function.

== Aliases Map ==

The passed name of the canonical map global mapping aliases of the desired type
_must_ be one of the following strings:

* `aliases`, mapping command aliases. See :alias_command().
* `galiases`, declaring general aliases. See :alias_word()
* `saliases`, declaring suffix aliases. See :alias_command_filetype().

=== Builtin Alternatives ===

Technically, alias declaration is also implementable by calling the alias()
builtin rather than setting keys of canonical map globals. Indeed, global
declaration is implemented by calling the export(), float(), integer(), and
typeset() builtins as needed.

However, builtin-based alias declaration is both less efficient _and_ more
fragile than the map-based approach taken here. The former requires _all_
*alias-reserved characters* (i.e., characters reserved for use in `=`-delimited
alias declarations, including `"`, `=`, and whitespace) in alias names to be
explicitly escaped: e.g.,

.Alias-reserved Character Escaping
==========================================
[source]
------------------------------------------
>>> :str on_surety='ONLY[THE"MADMAN=IS"ABSOLUTELY]SURE.'
>>> on_surety="${on_surety//(#m)([\"=[:space:]])/\\${MATCH}}"
>>> alias -- "${on_surety}"=':stdout.echo\
...     "I don't believe anything, but I have many suspicions."'
>>> 'ONLY[THE"MADMAN=IS"ABSOLUTELY]SURE.'
I don't believe anything, but I have many suspicions.
------------------------------------------
==========================================

== Alias Type ==

The passed type _must_ be one of the following strings:

* `command`, declaring command aliases. See :alias_command().
* `general`, declaring general aliases. See :alias_word()
* `suffix`, declaring suffix aliases. See :alias_command_filetype().

== Alias Name ==

The name(s) for such alias is parsed from (in order):

* If an optional prototype is passed, such prototype (e.g., the `:la_ss_az` in
  `:void :la_ss_az(:str lsz)`).
* Else if a prototype prefixes the passed non-optional documentation, such
  prototype (e.g., the `:5_meo_dmt` in
  `:void :5_meo_dmt(:str dmt)
  +
  Among the many mysteries and insults presented by DMT, it offers a final
  mockery of our drug laws: Not only have we criminalized naturally occurring
  substances, like cannabis; we have criminalized one of our own
  neurotransmitters.`).
* Else, an exception is thrown.

=== Alias Synonyms ===

As with function prototypes, such prototype may declare one or more names for
such alias (e.g., the `:ska_maria_pastora` and `:hojas_de_maria` in
`string {:ska_maria_pastora,:hojas_de_maria}()`)). If an optional expansion
is passed, all such names will be synonymously defined as aliases of the passed
type expanding to such expansion.

== Alias Documentation ==

The passed documentation consists of:

. An optional *alias prototype* in `zeshy`-specific C-like syntax consisting of
  one or more alias return types, one alias name, and zero or more alias
  arguments (e.g.,
  `string parable_of_the_box(integer derrick, character jensen)`), if such
  prototype was _not_ passed as an argument already.
. An *alias description* in http://asciidoc.org[AsciiDoc] syntax, augmented with
  `zeshy`-specific markup for cross-referencing other `zeshy` documentation
  (e.g., `The *box* is +full+ of salmon, and a *man* sits +atop+ the box.`).
  Since single- and double-quoted `zsh` string syntax conflicts with such syntax,
  consider passing such description to :alias_command() as a
  here-document on standard input instead.

For completeness, we specify such syntax as a
http://en.wikipedia.org/wiki/Parsing_expression_grammar[Parser Expression Grammar (PEG)].
See the <<declare_function.peg,function documentation PEG>> from which this PEG
derives for all productions not listed here (e.g., ReturnTypes, Whitespace):

.Alias Documentation Grammar
[cols=">strong,^,<"]
|===============================================================================
| AliasDocumentation    | <- | AliasPrototype Whitespace+ AsciiDoc
| AliasPrototype        | <- | Whitespace* ReturnTypes
                               Whitespace+ AliasName
                               Whitespace* AliasArgs
| AliasName             | <- | AlphanumericString
| AliasArgs             | <- | ArgumentList | ArgumentChannels
| AliasArgChannels      | <- | ``['' Whitespace* ( AliasArgChannel Whitespace*
                               ``,'' Whitespace*)* AliasArgChannel Whitespace*
                               ``]''
| AliasArgChannel       | <- | AliasArgChannelName Whitespace* ``:'' Whitespace*
                               (Argument | ArgumentList)
| AliasArgChannelName   | <- | ``args'' | ``argstring'' | ``stdin''
|===============================================================================

== Alias Prototypes and AsciiDoc ==

With only minor exception, alias prototypes and AsciiDoc support the same
syntax as that supported by function prototypes and AsciiDoc. See
:func_() for further details.
/---
