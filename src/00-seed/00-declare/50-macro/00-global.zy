#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Macro globals* (i.e., globals specific to functions defining and declaring
macros).
/---

# ....................{ GLOBALS                            }....................
# For efficiency, globalize all variables specific to functions :func_.start()
# and :func_.stop(). Typically, such variables would simply be localized to
# such functions; since such functions are inarguably called more frequently
# than any other function in the zeshy codebase during digest compilation,
# globalizing such variables improves efficiency (i.e., by eliminating
# repetitious memory allocations and deallocations on each call to such
# function). While such costs are less negligible for non-scalar than scalar
# variables declared below, globalize all such variables for orthogonality.

# ....................{ LISTS                              }....................
:global.doc <<'/---'
:list ZY__MACRO_ARGS

List of all scalar arguments passed to the currently expanded macro.
/---


:global.doc <<'/---'
:list ZY__MACROS_FUNC_NAME

Stack of the names of all low-level functions implementing high-level macros,
such that the last stack item is the name of the function implementing the
currently expanded macro.

This private global is intended to be referenced _only_ by low-level macro
callables (e.g., the global `]:` alias).
/---
typeset -ga ZY__MACROS_FUNC_NAME

# ....................{ MAPS                               }....................
:global.doc <<'/---'
:map ZY__MACRO_FUNC_NAME_TO_CODE

Map mapping from the name of each low-level function implementing a high-level
macro to a string of arbitrary zsh code to be dynamically evaluated for that
macro.

This private global is intended to be referenced _only_ by low-level macro
callables (e.g., the global `]:` alias).
/---
typeset -gA ZY__MACRO_FUNC_NAME_TO_CODE


:global.doc <<'/---'
:map ZY__MACRO_NAME_TO_FUNC_NAME

Map mapping from the name of each high-level macro to the name of the low-level
function implementing that macro.

This private global is intended to be referenced _only_ by low-level macro
callables (e.g., the global `]:` alias).
/---
typeset -gA ZY__MACRO_NAME_TO_FUNC_NAME
