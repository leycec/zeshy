#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Macro functions* (i.e., functions defining and declaring macros).
/---

# ....................{ MACROS                             }....................
#FIXME: Document us up.
#FIXME: Implement us up.
:func.doc <<'/---'
:void :macro(:str macro_name :str/:func macro_func_name)

Declare the macro with the passed name to be implemented by the function with
the passed name.

For orthogonality, this macro's name _must_ be manually suffixed by an `[`
character. If this is _not_ the case, an exception is thrown.

== Design ==

Like command aliases, macros are expanded *only* when in command position (i.e.,
beginning at the first shell word of a command). Whereas command aliases may
accept only no arguments or a single argument (passed by a here-string), however,
macros may accept an arbitrary number of:

* *Scalar arguments,* strings or values losslessly reducible to strings (e.g.,
  booleans, characters, integers, floats).
* *Block arguments,* blocks of arbitrary zsh code. Each such block is internally
  evaluated by the zsh parser as an effectively anonymous function subject to
  conventional alias expansion.

== Throws Exceptions ==

If either:

* This macro's name is _not_ manually suffixed by an `[` character.
* This function is undefined.
/---
function :macro() {
    # To avoid premature optimization, these local variables have intentionally
    # *NOT* been refactored into equivalent global variables -- unlike variables
    # referenced within functions declaring and defining operables (e.g.,
    # functions, aliases, globals), The codebase declares substantially fewer
    # macros than it does operables, obviating incentives to optimize here.
    (( # == 2 )) || :die 'Expected one macro name and one function name.'
    local macro_name=${1} macro_func_name=${2}

    # If this macro is already defined, throw an exception.
    (( ${+ZY__MACRO_NAME_TO_FUNC_NAME[${macro_name}]} == 0 )) || :die\
        'Macro '${macro_name}'] already defined to call function '${ZY__MACRO_NAME_TO_FUNC_NAME[${macro_name}]}'().'

    # If this macro's name is *NOT* suffixed by "]", throw an exception.
    [[ ${macro_name} == *']' ]] || :die\
        'Macro name "'${macro_name}'" not suffixed by "]".'

    # If a command alias or function with this macro's name is already defined,
    # throw an exception.
    (( ${+functions[${macro_name}]} == 0 )) || :die\
        'Macro '${macro_name}'() already defined as function:'$'\n\n'${functions[${macro_name}]}
    (( ${+aliases[${macro_name}]} == 0 )) || :die\
        'Macro '${macro_name}'() already defined as command alias:'$'\n\n'${aliases[${macro_name}]}

    # If this macro's function is undefined, throw an exception.
    (( ${+functions[${macro_func_name}]} == 0 )) || :die\
        'Macro function '${macro_func_name}'] undefined.'

    # Map this macro to this macro's function.
    ${+ZY__MACRO_NAME_TO_FUNC_NAME[${macro_name}]}=${macro_func_name}

    # Synthesize the command alias initiating this macro.
    alias "${macro_name}"='
    # Push the name of the function implementing this macro onto the global
    # stack of these names, quote-protected for safety.
    ZY__MACROS_FUNC_NAME+='${(q)macro_func_name}'
 
    # Store all passed scalar arguments for subsequent use by the "]:" alias.
    noglob :List.items ZY__MACRO_ARGS'
}
