#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Macro aliases* (i.e., aliases defining and declaring macros).
/---

#FIXME: Generalize to support stdin-style arguments -- notably, docstrings
#passed to function declarations. For example, leveraging macro structure,
#functions should now be declarable as follows:
#
#    :func :void :world.hello(:str message) <<<'/---'
#    Print the passed string as a "Hello, world!"-prefixed message.
#    /--- :{
#       :stdout.echo "Hello, world!\n${message}"
#    }:
#
#To accomplish this, we'll need to define a new private macro-specifi
#::macro.Args() function similar to the existing :List.items() function but with
#the following differences:
#
#* This function should be defined in the "10-func.zy" parcel.
#* This function should internally convert all passed stdin into a scalar string
#  global external to this list -- say, ${ZY__MACRO_ARG_STDIN}. Naturally, this
#  global will need to be declared by the "00-global.zy" parcel.
#
#The :macro() declarator defined in the "10-func.zy" parcel will then need to
#call that function rather than :List.items().

# ....................{ ALIASES                            }....................
#FIXME: Properly document these aliases.

# Begin to pass a block argument to the current block alias.
alias -g ':{'='
   # Append the name of a function dynamically synthesized to implement
   # the passed block argument to this list.
   ZY__MACRO_ARGS+="::macro.block:${#ZY__MACROS_FUNC_NAME}"

   # Synthesize this function, effectively storing this block argument
   # in a convenient manner for subsequent calling.
   function "${ZY__MACRO_ARGS[-1]}"() {'


# Finish passing a block argument to the current block alias.
alias -g '}:'='
   # Close the previously synthesized function.
   }

   # Append all subsequently passed scalar arguments if any.
   noglob :List.append ZY__MACRO_ARGS'


#FIXME: The ${ZY__MACRO_FUNC_NAME_TO_CODE} map is ambiguously and hence poorly
#named. Consider renaming to ${ZY__MACRO_FUNC_NAME_TO_POSTAMBLE}.

# Finish passing all arguments to the current block alias.
alias -g ']:'='
   #FIXME: For safety, throw a human-readable exception if this
   #dictionary key is undefined.
   "${ZY__MACRO_FUNC_NAME_TO_CODE[${ZY__MACROS_FUNC_NAME[-1]}}"

   # Pop the name of this function off this stack, preserving
   # context-freeness. See :List.pop().
   ZY__MACROS_FUNC_NAME[-1]=()'
