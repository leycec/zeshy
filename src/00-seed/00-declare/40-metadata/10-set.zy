#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Document such parcel.

# Due to a chicken-and-the-egg problem, all functions and globals defined below
# are subsequently documented under ={help} in the main codebase.

# ....................{ SETTERS ~ func                     }....................
# Define this function *BEFORE*:
#
# * Documenting this function, as :func.doc() transitively calls this
#   function. Yes, this is fragile. No, there exists no simpler means.
# * Defining and documenting all subsequent functions -- for the same reason.

function ::operable.Metadata_setter() {
    (( # == 4 )) || :die\
        'Expected one operable name, one operable type, one string name, and one metadata type.'
    local\
        operable_name=${1}\
        operable_type=${2}\
        setter_name=${3}\
        metadata_type=${4}
    (( ${#operable_name} )) || :die 'Operable name empty.'
    (( ${#operable_type} )) || :die 'Operable type empty.'
    (( ${#setter_name} )) || :die 'Setter name empty.'
    (( ${#metadata_type} )) || :die 'Metadata type empty.'
    :Str.set "${3}" "::${2}.set_${4}:${1}"
}


:func.doc <<'/---'
:void ::operable.Metadata_setter(
    :str operable_name
    :str operable_type
    :Str setter_name
    :str metadata_type
)

Set the string variable with the passed name to the name of the function setting
a passed string variable to the metadata of the passed type of the passed
operable of the passed type (e.g., `::func.Prototype:Str.set()` for the
prototype for function :Str.set()).

Try saying that several times fast. Double-dog dare you!

== Motivation ==

This function serves as an ad-hoc means of persisting static *RTTI* (run-time
type information) on arbitrary *operables* (i.e., aliases, functions, globals).
By dynamically associating such operables with typed metadata in the guise of
global string constants, this function is at the core of several other `zeshy`
subsystems requiring run-time metadata -- in particular, the help subsystem.

== Types ==

If such metadata type is:

* `prototype`, such function sets such variable to such operable's prototype.
* `asciidoc`, such function sets such variable to such operable's AsciiDoc.

If such operable type is:

* `alias_command`, such function sets such variable to such simple alias'
  metadata.
* `alias_general`, such function sets such variable to such global alias'
  metadata.
* `alias_suffix`, such function sets such variable to such suffix alias'
  metadata.
* `func`, such function sets such variable to such function's metadata.
* `global`, such function sets such variable to such global's metadata.
/---

# ....................{ SETTERS ~ func                     }....................
:func.doc <<'/---'
:void :func.Doc(:str/:func func_name :Str doc_name)

Set the string variable with the passed name to all previously declared
AsciiDoc-formatted documentation for the function with the passed name.
/---
function :func.Doc() {
    (( # == 2 )) || :die 'Expected one function name and one string name.'
    ::operable.Metadata "${1}" 'func' "${2}" 'doc'
}


:func.doc <<'/---'
:void :func.Prototype(:str/:func func_name :Str prototype_name)

Set the string variable with the passed name to the previously declared
prototype for the function with the passed name.
/---
function :func.Prototype() {
    (( # == 2 )) || :die 'Expected one function name and one string name.'
    ::operable.Metadata "${1}" 'func' "${2}" 'prototype'
}

# ....................{ SETTERS ~ operable                 }....................
:func.doc <<'/---'
:void ::operable.Metadata(
    :str operable_name
    :str operable_type
    :Str metadata_name
    :str metadata_type
)

Annotate the passed operable of the passed type with the passed metadata of the
passed type, subsequently retrievable by calling
::operable.Metadata_setter().

See such function.
/---
function ::operable.Metadata() {
    (( # == 4 )) || :die\
        'Expected one operable name, one operable type, one string name, and one metadata type.'
    local\
        operable_name__ootsmot="${1}"\
        operable_type__ootsmot="${2}"\
        metadata_name__ootsmot="${3}"\
        metadata_type__ootsmot="${4}"\
        metadata_setter__ootsmot

    # Name of this setter function.
    ::operable.Metadata_setter\
        "${operable_name__ootsmot}"\
        "${operable_type__ootsmot}"\
        metadata_setter__ootsmot\
        "${metadata_type__ootsmot}"

    # Set this string.
    :func.die_unless "${metadata_setter__ootsmot}"
    "${metadata_setter__ootsmot}" "${metadata_name__ootsmot}"
}
