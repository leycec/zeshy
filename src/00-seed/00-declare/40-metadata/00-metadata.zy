#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Document such parcel.

# Due to a chicken-and-the-egg problem, all functions and globals defined below
# are subsequently documented under ={help} in the main codebase.

#FIXME: Shift all functions declared below to zy:./*-set.zy that can reasonably
#be shifted to such parcel. (Perhaps no such functions remain?)
#FIXME: We *ABSOLUTELY* need to declare this parcel earlier -- at least before
#zy:../*-set. Assuming we need to call any functions from such parcel, we'll
#have to split zy:../*-set.zy into two new subdirectories -- say:
#
#1. zy:../30-set defining only the small subset of setters required by this
#   parcel. How large of a subset is this, anyway?
#2. zy:../50-set defining the remainder.
#FIXME: Actually, see zy://main.zy. We've decided that this parcel should be
#declared as early as possible -- which, ideally, means the first subdirectory
#of zy://*-soil/if_compile. In turn, of course, this means that this parcel will
#have to be rewritten in terms of low-level zsh rather than high-level zeshy.
#That's clearly feasible, if annoying. No alternative, we're afraid, thanks to
#the chicken-and-egg nature of documentation setters.

#FIXME: For efficiency, declaration functions in this and other parcels should
#only define help functions when actually compiling help documentation and
#hence utilizing such functions. (Or do we *ALWAYS* compile such
#documentation?) Contemplate.

#FIXME: We're certain we've documented this elsewhere, but the correct approach
#to documentation is to segregate *EACH* bit of documentation into its own
#setter function setting a passed string variable to the documentation for the
#desired object: e.g.,
#
#    # Set such string variable to the help string for function
#    # ::func.define().
#    void ::set_string_to_help:func::func.define(void string_name)
#
#Naturally, *ALL* such setters should be compiled into a *NEW, SEPARATE* digest
#file (e.g., "~/.zeshy/cache/digest/help.zwc"), which doesn't depend on whether
#or not this is a debug or release build of zeshy and hence applies to *ALL*
#possible main zeshy digests.
#
#How does segregating such setters to such digest help us? Simple. By default,
#such digest is *NOT* listed in the function path ${fpath}. In fact, *ONLY* low-
#level helper functions (e.g., :print_help_function()) internally and only
#temporarily prepend such digest to a local shadowing of ${fpath}. Indeed, such
#functions should probably temporarily reduce ${fpath} to *ONLY* such digest.
#
#Such technique provides a memorable means of implementing highly efficient
#pure-zeshy read-only key-value stores, as I believe we've remarked elsewhere.

# See @{global} for help strings for all globals defined below. Likewise, see
# the end of this parcel for help strings for all functions defined below.

# ....................{ SETTERS                            }....................
#FIXME: Document me.

# :void ::Doc.from_stdin[
#     args=( :Str doc_name),
#     stdin=(:str doc)]
function ::Doc.from_stdin() {
    (( # == 1 )) || :die 'Expected one string name.'

    # If standard input is either the empty string *OR* unreadable without
    # blocking, throw an exception; else, set the passed string to such input.
    :Str.from_stdin_if_nonempty "${1}" || :die\
        'Documentation empty or not passed on standard input (e.g., as a here-document or -string).'
}

#FIXME: Document me.

# :void ::doc.Prototype_Docstring(
#     :str doc
#     :Str prototype_name
#     :Str asciidoc_name)
function ::doc.Prototype_Docstring() {
    (( # == 3 )) || :die\
        'Expected one help string, one prototype string, and one AsciiDoc string name.'
    local\
        help__ssthp=${1}\
        prototype_name__ssthp=${2}\
        asciidoc_name__ssthp=${3}
    # print -r "help string: ${help__ssthp}"

    # If such documentation contains a blank line (i.e., "\n\n"), assume the
    # substring preceding such line to be the expected prototype. Else, throw
    # an exception.
    [[ ${help__ssthp} == ${~ZY_HELP_GLOB} ]] || :die\
        'Documentation invalid (i.e., contains no blank line separating prototype from AsciiDoc):'$'\n\n'${help__ssthp}

    # Set such strings.
    :Str.set "${prototype_name__ssthp}" "${match[1]}"
    :Str.set "${asciidoc_name__ssthp}"  "${match[2]}"
}

# ....................{ DOCUMENTERS ~ alias                }....................
#FIXME: Document me.

# :void :alias_command.doc[stdin=(:str doc)]
function :alias_command.doc() {
    (( ! # )) || :die 'Expected no arguments.'
    ::callable.doc 'alias_command' 'Command alias'
}

#FIXME: Document me.

# :void :alias_command_filetype.doc[stdin=(:str doc)]
function :alias_command_filetype.doc() {
    (( ! # )) || :die 'Expected no arguments.'
    ::callable.doc 'alias_suffix' 'Suffix alias'
}

#FIXME: Document me.

# :void :alias_word.doc[stdin=(:str doc)]
function :alias_word.doc() {
    (( ! # )) || :die 'Expected no arguments.'
    ::callable.doc 'alias_general' 'General alias'
}

#FIXME: Document me.

# :void ::alias.doc_prototype_from_stdin_if_nonempty[
#     args=(+:str/alias alias_names
#            :str alias_type
#            :str alias_prototype)
#     stdin=(:str alias_asciidoc)]
function ::alias.doc_prototype_from_stdin_if_nonempty() {
    (( # >= 3 )) || :die\
        'Expected one or more alias names, one alias type, and one alias prototype.'
    local alias_type=${@[-2]} alias_prototype=${@[-1]}

    # If such type is unrecognized, throw an exception.
    [[ ${alias_type} == ('command'|'command_filetype'|'word') ]] || :die\
        'Alias type "'${alias_type}'" unrecognized (i.e., neither "command", "command_filetype", or "word").'

    # If such documentation was passed, document such aliases.
    ::operable.doc_prototype_from_stdin_if_nonempty\
        "${@[1,-3]}" "alias_${alias_type}" "${alias_prototype}"
}

# ....................{ DOCUMENTERS ~ func                 }....................
#FIXME: Document me.

# :void :func.doc[stdin=(:str func_help)]
function :func.doc() {
    (( ! # )) || :die 'Expected no arguments.'
    ::callable.doc 'func' 'Function'
}

#FIXME: Document me.

# :void ::func.doc_prototype_from_stdin_if_nonempty[
#    args=(+:str/func func_names
#           :str func_prototype)
#    stdin=(:str func_asciidoc)]
function ::func.doc_prototype_from_stdin_if_nonempty() {
    (( # >= 2 )) || :die\
        'Expected one or more function names and one function prototype.'
    ::operable.doc_prototype_from_stdin_if_nonempty\
        "${@[1,-2]}" 'func' "${@[-1]}"
}

# ....................{ DOCUMENTERS ~ global               }....................
#FIXME: Document me.

# :void :global.doc[stdin=(:str doc)]
function :global.doc() {
    (( ! # )) || :die 'Expected no arguments.'
    local global_help__dg global_prototype__dg global_asciidoc__dg
    local -a global_names__dg

    # Documentation passed on standard input.
    ::Doc.from_stdin global_help__dg

    # Split such documentation into prototype and non-prototype portions.
    ::doc.Prototype_Docstring\
        "${global_help__dg}" global_prototype__dg global_asciidoc__dg

    # Global name declared by such documentation's prototype.
    ::global_prototype.Names "${global_prototype__dg}" global_names__dg 

    # Document such names.
    ::operable.doc\
        "${global_names__dg[@]}"\
        'global'\
        "${global_prototype__dg}"\
        "${global_asciidoc__dg}"
}

#FIXME: Document me.

# :void ::global.doc_prototype_from_stdin_if_nonempty[
#    args=(+:str/global global_names
#           :str global_prototype)
#    stdin=(:str global_asciidoc)]
function ::global.doc_prototype_from_stdin_if_nonempty() {
    (( # >= 2 )) || :die\
        'Expected one or more globaltion names and one globaltion prototype.'
    ::operable.doc_prototype_from_stdin_if_nonempty\
        "${@[1,-2]}" 'global' "${@[-1]}"
}

# ....................{ DOCUMENTERS ~ callable             }....................
#FIXME: Document me.

# :void ::callable.doc[
#     args=( :str callable_type :str callable_label)
#     stdin=(:str callable_help)]
function ::callable.doc() {
    (( # == 2 )) || :die 'Expected one callable type and one callable label.'
    local\
        callable_type=${1}\
        callable_label=${2}\
        callable_doc\
        callable_prototype\
        callable_docstring
    local -a callable_names

    # Documentation passed on standard input.
    ::Doc.from_stdin callable_doc

    # Split such documentation into prototype and non-prototype portions.
    ::doc.Prototype_Docstring\
         "${callable_doc}" callable_prototype callable_docstring

    # List of all callable names declared by such documentation's prototype.
    ::callable_prototype.Names\
        "${callable_prototype}" callable_names "${callable_label}"

    # Document such names.
    ::operable.doc\
        "${callable_names[@]}"\
        "${callable_type}"\
        "${callable_prototype}"\
        "${callable_docstring}"
}

# ....................{ DOCUMENTERS ~ operable             }....................
#FIXME: Document me.

# :void ::operable.doc_prototype_from_stdin_if_nonempty[
#     args=(+:str operable_names
#            :str operable_type
#            :str operable_prototype)
#     stdin=(:str operable_help)]
function ::operable.doc_prototype_from_stdin_if_nonempty() {
    (( # >= 3 )) || :die\
        'Expected one or more operable names, one operable type, and one operable prototype.'
    local operable_asciidoc__dotpwsifon

    # If documentation was passed on standard input, document such operables
    # with such documentation.
    if { :Str.from_stdin_if_nonempty operable_asciidoc__dotpwsifon } {
        ::operable.doc\
            "${@}" "${operable_asciidoc__dotpwsifon}"
    }
}

#FIXME: Document me.

# :void ::operable.doc(
#    +:str operable_names
#     :str operable_type
#     :str operable_prototype
#     :str operable_docstring)
function ::operable.doc() {
    # Validate sanity. Since globals are operables and hence must *NOT* be
    # shadowed by locals declared below, mangle the names of such locals.
    (( # >= 4 )) || :die\
        'Expected one or more operable names, one prototype, one docstring, and one operable type.'
    local\
        operable_type__odpaot=${@[-3]}\
        prototype__odpaot=${@[-2]}\
        docstring__odpaot=${@[-1]}\
        prototype_setter__odpaot\
        docstring_setter__odpaot

    # For each such operable name, define:
    #
    # * A setter setting a passed string variable to such prototype.
    # * A setter setting a passed string variable to such AsciiDoc.
    #
    # To avoid quoting issues with reserved characters in such documentation,
    # set such variable via a here-document.
    local operable_name__odpaot
    for   operable_name__odpaot ("${@[1,-4]}") {
        # Name of the prototype setter function defined below.
        ::operable.Metadata_setter\
            "${operable_name__odpaot}"\
            "${operable_type__odpaot}"\
            prototype_setter__odpaot\
            'prototype'

        # Name of the AsciiDoc setter function defined below.
        ::operable.Metadata_setter\
            "${operable_name__odpaot}"\
            "${operable_type__odpaot}"\
            docstring_setter__odpaot\
            'docstring'

        # If either such function is already defined, throw an exception.
        :func.die_if "${prototype_setter__odpaot}" "${docstring_setter__odpaot}"

        # Define such functions.
        functions[${prototype_setter__odpaot}]='
    (( # == 1 )) || :die "Expected one string name."
    :Str.set "${1}" '${(qq)prototype__odpaot}
        functions[${docstring_setter__odpaot}]='
    (( # == 1 )) || :die "Expected one string name."
    :Str.set "${1}" '${(qq)docstring__odpaot}
    }
}
