#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `zeshy` startup in a manner analogous to `zsh` startup (e.g., `.zshenv`).
/---

# ....................{ GLOBALS                            }....................
:list.global ZY__HOOKS_STARTUP <<'/---'
List of code to be run unconditionally on `zeshy` startup.

== See Also ==

* :hook.startup.add().
/---

print -r 'ZY__HOOKS_STARTUP (yam): '${ZY__HOOKS_STARTUP[*]}
typeset -p ZY__HOOKS_STARTUP


:list.global ZY__HOOKS_SHELL_INTERACTIVE_STARTUP <<'/---'
List of code to be run on `zeshy` startup under interactive shells.

== See Also ==

* :hook.shell_interactive.startup.add().
/---


:list.global ZY__HOOKS_SHELL_LOGIN_STARTUP <<'/---'
List of code to be run on `zeshy` startup under login shells.

== See Also ==

* :hook.shell_login.startup.add().
/---

# ....................{ SETTERS                            }....................
:func_ ':void ::Hook.startup.munge(:Str str_name) [
    var_name_suffix="__Hsm"]' :func{
    # If debugging, prepend verbose debug logic to this hook code.
    #
    # Avoid calling print_message() or other high-level functions transitively
    # referencing aliases and globals undefined until *AFTER* zeshy starts up.
    #
    # While we would ideally call :line.run_if_debug() here, that alias assumes
    # only a single line of output. This function accepts an arbitrary string
    # and hence cannot guarantee such assumption. In practice, since the amount
    # of startup code is fairly constrained *AND* since this function is only
    # called during digest compilation, such inefficiency is acceptable.
    if { :debug.is } {
        :Str.set "${str_name__Hsm}"\
            ':stdout.echo_if_debug "Calling '${(P)str_name__Hsm}'()..."'$'\n'${(P)str_name__Hsm}
    }
}:func <<'/---'
Sanitize the hook code defined by the string variable with the passed name for
user-friendliness (e.g., debuggability, usability).
/---

# ....................{ RUNNERS                            }....................
:func_ ':void :hook.startup.add(:str hook_code)' :func{
    ::Hook.startup.munge hook_code
    ZY__HOOKS_STARTUP+=${hook_code}
}:func <<'/---'
Run the passed code immediately _after_ `zeshy` startup autoloads the user
digest and hence on every such startup.
/---


:func_ ':void :hook.startup.add_first(:str hook_code)' :func{
    # Avoid calling :List.items.prepend(), which has yet to be defined.
    ::Hook.startup.munge hook_code
    ZY__HOOKS_STARTUP=( "${hook_code}" "${ZY__HOOKS_STARTUP[@]}" )
}:func <<'/---'
Run the passed code immediately _after_ `zeshy` startup autoloads the user
digest file and hence _before_ running all other startup logic.

Specifically, this function prepends the passed code to the beginning of the
definition of the core startup_zeshy() function.
/---

# ....................{ RUNNERS ~ shell                    }....................
:func_ ':void :hook.shell_interactive.startup.add(:str hook_code)' :func{
    ::Hook.startup.munge hook_code
    ZY__HOOKS_SHELL_INTERACTIVE_STARTUP+=${hook_code}
}:func <<'/---'
Run the passed code immediately _after_ `zeshy` startup autoloads the user
digest file under interactive shells.

== See Also ==

* :shell.is_interactive().
/---


:func_ ':void :hook.shell_login.startup.add(:str hook_code)' :func{
    ::Hook.startup.munge hook_code
    ZY__HOOKS_SHELL_LOGIN_STARTUP+=${hook_code}
}:func <<'/---'
Run the passed code immediately _after_ `zeshy` startup autoloads the user
digest file under login shells.

== See Also ==

* is_shell_login().
/---
