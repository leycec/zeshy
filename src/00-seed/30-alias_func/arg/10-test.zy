#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Argument testers* (i.e., functions testing `-`-prefixed arguments passed to the
current callable).
/---

# ....................{ TESTERS ~ index                    }....................
#FIXME: This should account for negative indices, which it currently does *NOT*.
#Or does it? Is that what the call to :int.">=<"() below does?

:alias_command '[status=:bool] :args.index.is(:int arg_index)'\
    '::args.index.is ${#}' <<'/---'
Report success if the passed integer is a valid index into the current argument
list (i.e., is in the range `[1, ${#}]`).
/---

# This implementation may appear inefficient but *IS* fairly reasonable,
# given the subtleties involved in accounting for negative indices.
:func_ '[status=:bool] ::args.index.is(:int arg_count :int arg_index)' :func{
    :int.'>=<' "${arg_index}" 1 "${arg_count}"
}:func <<'/---'
This private function is intended to be called _only_ by :args.index.is().
/---

# ....................{ TESTERS ~ option                   }....................
:alias_command '[status=:bool] ":args.count.nonoptions.>=<"(
    :int minimum_arg_count :int maximum_arg_count)'\
    '::args.count.nonoptions.">=<" "${@}"' <<'/---'
Report success if the caller passed a number of non-option arguments in the
passed range (i.e., greater than or equal to the passed minimum and less than or
equal to the passed maximum).

== See Also ==

* :args.Nonoption_count().
/---

# Localize the passed argument list to the canonical ${argv} list, ensuring the
# :args.Nonoption_count() alias expanded below accesses this list.
:func_ '[status=:bool] "::args.count.nonoptions.>=<"(
    *:str argv :int minimum_arg_count :int maximum_arg_count)' :func{
    # Number of non-options passed to the caller alias expansion.
    local arg_nonoption_count
    :args.Nonoption_count arg_nonoption_count

    # Test this number against the passed range.
    :int.'>=<' ${arg_nonoption_count} ${minimum_arg_count} ${maximum_arg_count}
}:func <<'/---'
This private function is intended to be called _only_ by
":args.count.nonoptions.>=<"().
/---
