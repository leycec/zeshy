#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *filetype globbers* (i.e., functions globbing `.`-prefixed filename
suffixes).
/---

#FIXME: Refactor all getters to setters.

# ....................{ TESTERS                            }....................
:func_ '<globbable> [status = :bool] is_file_type_matches_glob(
    :str filename, :str glob)' :func{
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with get_file_type_if_matches_glob().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Localize arguments.
    :str filename="${1}" filetype_glob="${2}" filetype

    # Test such filetype.
    :set_string_to_file_type_if_found filetype "${filename}" and
        :is_string_matches_glob "${filetype}" "${filetype_glob}"
}:func <<'/---'
Report success if the passed filename has a filetype matching the passed glob:
e.g.,

.is_file_type_matches_glob()
==========================================
[source]
------------------------------------------
>>> :str on_democracy=\
...    "Democracy is a rare thing, Pete. You hear how democracies are all over
...     the place, but it isn't really true. They call it democracy. They use
...     the vocabulary, the props, but it's theater. What your Founding Fathers
...     did was the real thing. But the problem with democracies is they're hard
...     to maintain. Especially in the face of high technology. How do you
...     preserve your freedom when the powerful can use software bots to detect
...     dissent and deploy drone aircraft to take out troublemakers? Human
...     beings are increasingly unnecessary to wield power in the modern world."
>>> is_file_type_matches_glob "sebeck.out" (in|to) or
...     get_string_line "${on_democracy}" -1
beings are increasingly unnecessary to wield power in the modern world.
------------------------------------------
==========================================
/---

# ....................{ GETTERS                            }....................
:func_ '<globbable> [stdout = :str, status = :bool]
    get_file_type_if_matches_glob(:str filename, :str glob)'
:func{
    # Localize arguments.
    :str filename="${1}" filetype_glob="${2}" filetype

    # Get such filetype if matching such glob or return false. See
    # is_file_type_matches_glob() for further details.
    :set_string_to_file_type_if_found filetype "${filename}" and
        :is_string_matches_glob "${filetype}" "${filetype_glob}" and
        return_string "${filetype}"
}:func <<'/---'
Get the filetype of the passed filename if such filetype matches the passed
glob or report failure if such filename either has no filetype or a filetype
_not_ matching such glob. See get_file_type() for further details: e.g.,

.get_file_type_if_matches_glob()
==========================================
[source]
------------------------------------------
>>> :str on_ether=\
...    "We had two bags of grass, seventy-five pellets of mescaline, five sheets
...     of high-powered blotter acid, a salt shaker half full of cocaine, and a
...     whole galaxy of multi-colored uppers, downers, screamers, laughers and
...     also a quart of tequila, a quart of rum, a case of Ballantine ale, a
...     pint of raw ether and two dozen amyls. Not that we needed all that for
...     the trip, but once you get locked into a serious drug-collection, the
...     tendency is to push it as far as you can. The only thing that really
...     worried me was the ether. There is nothing in the world more helpless
...     and irresponsible and depraved than a man in the depths of an ether
...     binge. And I knew we'd get into that rotten stuff pretty soon.txt"
>>> make_file "${on_ether}"
>>> get_file_type_if_matches_glob "${on_ether}" "txt" and :str.output\
...    "After West Point and the Priesthood, LSD must have seemed entirely logical to him."
After West Point and the Priesthood, LSD must have seemed entirely logical to him.
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
#   filetype="$(get_file_type_if_found "${filename}")" or
#       :die "\"${filename}\" has no filetype"
#   return_string "${filetype}"
#>>> :is_file_type_equals "saverin.in" "out" or :str.output "Othello says, \"Hi.\""
#Othello says, "Hi."

#. Since this
#function tests only such filename, no such file need actually exist
#FUXME: Rename to get_path_sans_file_type:(). It makes little sense to speak of
#anything but files in regards to file types and, anyway, breaks nomenclature.
