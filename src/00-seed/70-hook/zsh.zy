#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*`zsh` hooks* (i.e., functions called by `zsh` when the corresponding events
occur).

== See Also ==

* `man zshmisc`, discussing canonical hook lists (e.g., ${chpwd_functions}).
/---

#FIXME: Rename "run_hook_" to "run_hook_function_".

# ....................{ RUNNERS                            }....................
:func.doc <<'/---'
:void run_hook_after_dir_set_interactively(:str/:func func_name)

Call the function with the passed name immediately _after_ changing the current
working directory (CWD).

The passed function is called _after_ any `zsh` builtin excluding popd() that
internally changes the CWD  is called (e.g., cd(), pushd()). This differs from
the stock `auto_pushd` option, whose corresponding pushd() action is performed
after only cd() is called.
/---
function run_hook_after_dir_set_interactively() {
    die_unless_arg 'Expected one function name.'
    :func.die_unless "${1}"
    :list.use_global chpwd_functions; chpwd_functions+=${1}
}


:func.doc <<'/---'
:void run_hook_before_zsh_exit(:str/:func func_name)

Call the function with the passed name immediately _before_ exiting the
*top-level shell* (i.e., parent shell process, thus excluding child subshell
processes forked by this parent).

Note that the passed function ``...is not called by exiting subshells, nor when
the exec precommand modifier is used before an external command. Also, unlike
TRAPEXIT, it is not called when functions exit.'' In other words, `zsh` does
_not_ guarantee that function to be called on all possible shell exits -- only
exits from the top-level shell excluding implicit exits induced by the `exec`
precommand modifier.
/---
function run_hook_before_zsh_exit() {
    die_unless_arg 'Expected one function name.'
    :func.die_unless "${1}"
    :list.use_global zshexit_functions; zshexit_functions+="${1}"
}

# ....................{ RUNNERS ~ command                  }....................
#FIXME: Rename to :run_hook_before_prompt().
:func.doc <<'/---'
:void run_hook_before_prompt_printed(:str/:func func_name)

Call the function with the passed name immediately _before_ printing a command
prompt for the current shell if *interactive* (i.e., if standard input to this
shell is attached to a terminal device).
/---
function run_hook_before_prompt_printed() {
    die_unless_arg 'Expected one function name.'
    :func.die_unless "${1}"
    :list.use_global precmd_functions; precmd_functions+="${1}"
}


#FIXME: Rename to :run_hook_before_prompt_input_stored().
:func.doc <<'/---'
:void run_hook_before_input_historied(:str/:func func_name)

Call the function with the passed name immediately _before_ appending a command
interactively input by the current user to the history file and _before_ running
that command.

Note that the passed function is:

* Passed that command as a single string argument.
* Subject to "special" history-specific handling.

== See Also ==

* `zshaddhistory` in `man zshmisc`.
/---
function run_hook_before_input_historied() {
    die_unless_arg 'Expected one function name.'
    :func.die_unless "${1}"
    :list.use_global zshaddhistory_functions; zshaddhistory_functions+="${1}"
}


#FIXME: Rename to :run_hook_before_prompt_input_run().
#FIXME: Actually, consider renaming to :run_hook_after_prompt_input_stored().
#Hmm. Both strike us as useful. Synonyms are probably in order here.

:func.doc <<'/---'
:void run_hook_before_input_run(:str/:func func_name)

Call the function with the passed name immediately _before_ running a command
input by the current user and _after_ appending this command to the history file
(i.e., _after_ running all run_hook_before_input_historied() hooks).

Note that the passed function is passed an argument list with the signature
`(:str history_line :str readable_line :str command)`, where:

* `history_line`, the pre-processed history line. If the current shell is
  recording history and the history buffer recorded this input, this is that
  input; else, this is the empty string.
* `readable_line`, a human-readable line. This is that input truncated to one
  terminal line in a manner preserving readability (e.g., eliding block bodies).
* `command`, the post-processed command to be run. This is that input with all
  embedded aliases expanded.
/---
function run_hook_before_input_run() {
    die_unless_arg 'Expected one function name.'
    :func.die_unless "${1}"
    :list.use_global preexec_functions; preexec_functions+="${1}"
}
