#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Glob replacers* (i.e., functions replacing substrings matching globs).
/---

#FIXME: It's unclear just how to extend this function to a new function
#:str.Str.replace_^=.eval() supporting expansions depending on the passed
#glob: e.g., "${match[1]}".  Does parameter expansion prefix "~" suffice or do
#we need a genuine "eval" statement? I suspect the latter, in which case such
#function should be named :replace_string_matches_with_expansion(), but
#investigate.Incidentally, try parameter expansion flag "(e)" as well.
#FIXME: Actually, this is trivial. See @{glob/var/list/replace}.

# ....................{ REPLACERS                          }....................
:func_ ':void :str.Str.replace_^=(
    :str text :Str str_name :str/:glob glob :str replacement) [
    var_name_suffix="__sSrg"]' :func{
    :Str.set\
        "${str_name__sSrg}" "${text__sSrg//${~glob__sSrg}/${replacement__sSrg}}"
}:func <<'/---'
Set the string variable with the passed name to the passed string with all
substrings matching the passed glob replaced by the passed replacement
substring.

== Examples ==

==========================================
[source]
------------------------------------------
$$$ :str on_society on_sin="
^^^ Seven social sins: politics without principles, wealth without work,
^^^ pleasure without conscience, knowledge without character, commerce
^^^ without morality, science without humanity, and worship without
^^^ sacrifice."
$$$ :str.Str.replace_^= "${on_social_sins}" on_society\
^^^      w[^ ]t([[:space:]]) 'sans${MATCH[1]}'
Seven social sins: politics sans principles, wealth sans work,
pleasure sans conscience, knowledge sans character, commerce
sans morality, science sans humanity, and worship sans
sacrifice.
------------------------------------------
==========================================
/---
