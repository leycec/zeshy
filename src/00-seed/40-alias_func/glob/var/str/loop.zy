#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Glob iterators* (i.e., functions iterating glob matches).
/---

#FIXME: Refactor into macros.

# ....................{ ITERATORS                          }....................
:func_ ':full :str.for_^=(
    :str text :str/:glob+nonempty glob :str+nonempty code) [
    var_name_suffix="__sfg"]' :func{
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with functions below.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Set scalar globals on successful matches (e.g., ${MATCH}).
    :Glob.enable_capturing_ungrouped glob__sfg

    # Localize string and list match globals, in case this glob enables "(#b)".
    :str  MATCH MBEGIN MEND
    :list match mbegin mend

    #FIXME: This is close but still probably not quite right. Specifically, we
    #at least need to escape "}" characters in the passed command
    #${code__sfg} to prevent the inner eval() call below from failing with
    #syntactic errors.

    # Iterate these matches. While zsh provides no explicit mechanism for doing
    # so, cleverly misusing parameter expansion replacement suffices to do so.
    # Since expansions in the passed command must be expanded during each glob
    # replacement (rather than after all such replacements), such command must
    # be expanded *BEFORE* the passed string and glob. Hence, two evaluations
    # are required. The outer evaluation expands such command and executes the
    # inner evaluation, which first produces a string consisting of repeated
    # expansions of such command and then executes such string: e.g.,
    #
    #   # Assume the following values:
    #   #
    #   # * string text__sfg=\
    #   #       "The ideally non-violent state will be an ordered anarchy. That
    #   #        State is the best governed which is governed the least."
    #   # * string glob__sfg="${ZY__GLOB_ENABLE_CAPTURING_UNGROUPED}[aoeui][^ ]#"
    #   # * string command_sfg=':stdout.echo "${MATCH}"'
    #   #
    #   # Then the outer evaluation executes the following statement:
    #   eval "${text__sfg//\${~glob__sfg}/:stdout.echo "${MATCH}"; }"
    #
    #   # Then the inner evaluation executes the following statement:
    #   eval :stdout.echo "ideally"; :stdout.echo "an"; :stdout.echo "ordered"; :stdout.echo "anarchy"; :stdout.echo "is"; :stdout.echo "is";
    #
    #   # This execution outputs the following string:
    #   ideally an ordered anarchy is is
    eval 'eval "${text__sfg//\${~glob__sfg}/'${code__sfg}'; }"'
}:func <<'/---'
Run the passed command for each substring of the passed string matching the
passed glob, capturing this substring into the ${MATCH} string local and
this substring's start and end index in this string into the ${MBEGIN} and
${MEND} integer locals.

This function does _not_ implicitly capture parenthetical groups in such glob
into local list variable ${match} _or_ such groups' start and end indices in
such string into local list variables ${mbegin} and ${mend}, as such capturing
slightly reduces match efficiency. To capture groups, either call
:str.for_^=_grouped() or explicitly prefix the first group
to be captured from such glob with `(#b)`.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_proprietary_software="
...     I could have made money this way and perhaps amused myself writing code.
...     But I knew that at the end of my career, I would look back on years of
...     building walls to divide people, and feel I had spent my life making the
...     world a worse place."
>>> :str.for_^= "${on_proprietary_software}"\
...     I\ (#b)([[:WORD:]]##) ':stdout.echo "${MATCH}" ("${match[1]}")'
I could (could)
I knew (knew)
I would (would)
I had (had)
------------------------------------------
==========================================
/---

:func_ ':full :str.for_^=_nongreedy(
    :str text :str/:glob+nonempty glob :str+nonempty code) [
    var_name_suffix="__sfgn"]' :func{
    # Specifying parameter expansion flag "(S)" enables non-greedy matching.
    # Sadly, this requires reimplementing :str.for_^=().
    :str text__sfgn="${1}" glob__sfgn="${2}" command__sfgn="${3}"
    :Glob.enable_capturing_ungrouped glob__sfgn
    :str  MATCH MBEGIN MEND
    :list match mbegin mend
    eval 'eval "${(S)text__sfgn//\${~glob__sfgn}/'${code__sfgn}'; }"'
}:func <<'/---'
Run the passed command for each substring of the passed string matching the
passed glob *non-greedily* (i.e., matching shortest rather than longest possible
substrings), capturing this substring into the ${MATCH} string local and this
substring's start and end index in this string into the ${MBEGIN} and ${MEND}
integer locals.

This function coerces the glob quantifiers `*`, `#`, and `##` to match
non-greedily.

== See Also ==

* :str.for_^=().
/---

# ....................{ ITERATORS ~ group                  }....................
:func_ ':full :str.for_^=_grouped(
    :str text :str/:glob+nonempty glob :str+nonempty code)' :func{
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with functions below.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Set nonscalar globals on successful matches (e.g., ${match}).
    :Glob.enable_capturing_grouped glob__sfgg

    # Iterate these matches.
    :str.for_^= "${text__sfgg}" "${glob__sfgg}" "${command__sfgg}"
}:func <<'/---'
Run the passed command for each substring of the passed string matching the
passed glob.

This function provides this command access to the canonical
${MATCH}, ${MBEGIN}, ${MEND}, ${match}, ${mbegin}, and ${mend} match globals.

== See Also ==

* :str.for_^=().
/---

:func_ ':full :str.for_^=_grouped_nongreedy(
    :str text :str/:glob+nonempty glob :str+nonempty command)' :func{
    :Glob.enable_capturing_grouped glob__sfggn
    :str.for_^=_nongreedy "${text__sfggn}" "${glob__sfggn}" "${command__sfggn}"
}:func <<'/---'
Run the passed command for each substring of the passed string matching the
passed glob non-greedily.

This function provides this command access to the canonical ${MATCH}, ${MBEGIN},
${MEND}, ${match}, ${mbegin}, and ${mend} match globals by prefixing this glob
with `(#m)(#b)` if not already.

== See Also ==

* :str.for_^=().
* :str.for_^=_nongreedy().
/---
