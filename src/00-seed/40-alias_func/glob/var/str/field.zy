#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Glob-matched fields* (i.e., substring-separated substrings on a line matched
with glob or glob character classes).
/---

#FIXME: Refactor into macros.

# ....................{ ITERATORS                          }....................
# While there exists a :str.for_fields_split_on_~=() generalizing
# :str.for_fields_split_on_~=_class(), there exists no
# :str.for_fields_split_on_^=() generalizing
# :str.for_fields_split_on_^=_class(). The simplest explanation why is
# that globs have no equivalent to PCRE multiline mode. Without such a mode,
# creating a column separator glob becomes an all but infeasible chore; and even
# where feasible risky, since such glob must be explicitly engineered to *NOT*
# match newlines. But that's not the only explanation why. Such a generalization
# requires some equivalent to PCRE negative lookahead assertions. While globs do
# support "(^...)"-driven glob negation, such negation consumes what it matches;
# hence, the closest glob equivalent for capturing a column would be
# "((^${~column_separator_glob})#)". However, notice the use of *TWO* capturing
# subpatterns. Since glob syntax provides no means of disabling match capturing,
# callers must ignore every other match. This becomes patently ridiculous
# quickly -- at which point it's difficult to justify the effort.

#FIXME: This has become slightly desynchronized with "pcre/field". In
#particular all fields should be optional and an explicit count need not be
#passed. Instead, just parse the first line for the field count.

:func_ ':full :str.for_fields_split_on_^=_class(
    :str text
    :int@positive column_count
    :str/:glob@nonempty column_separator_class
    :str@nonempty code
) [var_name_suffix="__sffsocg"]' :func{
    :str\
        glob_column__sffsocg\
        glob_column_separator__sffsocg\
        glob_column_separated__sffsocg\
        glob_columns__sffsocg\
        glob_columns_prior__sffsocg\
        glob_columns_sans_last__sffsocg\
        glob_columns__sffsocg\
        glob_remainder__sffsocg\
        glob_start__sffsocg

    # If this class matches newlines, throw an exception.
    :not :str.is_globbed\
        "${ZY_ASCII_NEWLINE}" '['${column_separator_class__sffsocg}']' :or :die\
        "Column separator character class \"${column_separator_class__sffsocg}\" matches newlines."

    # Glob expression matching any column prior to the desired column.
    glob_columns_prior__sffsocg='([^'${ZY_ASCII_NEWLINE}${column_separator_class__sffsocg}']#(|(#e)))'

    # Glob expression matching the desired column. Dismantled, this is:
    #
    # * "(#b)", enabling back references (i.e., match groups) for all
    #   subsequent groups. Do this as late as possible to avoid capturing
    #   columns preceding this column.
    glob_column__sffsocg='(#b)([^'${column_separator_class__sffsocg}']#)(['${column_separator_class__sffsocg}']|(#e))'

    # PCRE anchored to the beginning of either this string or each string line.
    glob_start__sffsocg='((#s)|'${ZY_ASCII_NEWLINE}')'

    # Construct a PCRE capturing all such columns on a single line. See
    # for_string_line_fields_split_on_pcre_class() for further details.
    glob_column__sffsocg='([^'${ZY_ASCII_NEWLINE}${column_separator_class__sffsocg}']#)'
    glob_column_separator__sffsocg='['${column_separator_class__sffsocg}']##'
    glob_column_separated__sffsocg=${glob_column__sffsocg}${glob_column_separator__sffsocg}
    glob_remainder__sffsocg='([^'${ZY_ASCII_NEWLINE}']#)'

    :Str.repeat_str\
        glob_columns_sans_last__sffsocg\
        "${glob_column_separated__sffsocg}"\
        "$(( column_count__sffsocg - 1 ))"

    # To avoid capturing the beginning of each string line and hence disrupting
    # the column order as perceived by callers, begin capturing only *AFTER*
    # matching such beginning. Likewise, to avoid capturing the optional
    # trailing column separator, stop capturing *AFTER* matching the last
    # column. To capture the unmatched remainder of the current line, begin
    # capturing *AFTER* matching such optional trailing column separator.
    #
    # Surprisingly, this mostly works.
    glob_columns__sffsocg=${glob_start__sffsocg}'(#b)'${glob_columns_sans_last__sffsocg}${glob_column__sffsocg}'(#B)('${glob_column_separator__sffsocg}'(#b)'${glob_remainder__sffsocg}'|)'

    # Iterate these matches with this glob.
    :str.for_^= "${text__sffsocg}" "${glob_columns__sffsocg}" "${code__sffsocg}"

#FIXME: Add examples, please.
}:func <<'/---'
Run the passed command for each line of the passed string containing at most the
passed number of columns separated by substrings matching the passed glob
character class (e.g., `[:alnum:]`, matching alphanumeric-delimited columns).

Avoid delimiting such class with `[` and `]` characters _unless_ such class is a
named character class (e.g., `a-zA-Z0-9` rather than `[a-zA-Z0-9]`).

== Examples ==

==========================================
[source]
------------------------------------------
------------------------------------------
==========================================

[WARNING]
If the passed glob character class matches newlines either explicitly (e.g.,
`\n\t\v `, `[:space:]`) or implicitly (e.g., `^a-z[:alpha:]`), an exception is
thrown. Permitting such classes would erroneously match a portion of the line
following the current line into the last column of this line.
/---
