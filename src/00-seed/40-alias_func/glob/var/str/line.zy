#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Line globs* (i.e., extended glob expressions matching newline-delimited strings
in a newline-aware manner).
/---

# ....................{ TESTERS                            }....................
:func_ '[status=:bool] :str.is_line_^=(:str text :str/:glob glob)' :func{
    # Split this string on newline. While inefficient, this is the only means of
    # reliably matching this glob. Unlike PCREs, globs have no equivalent of
    # multiline mode required for efficient line-oriented matching.
    :list lines
    :str.Lines "${text}" lines

    # Match these lines against this glob.
    :List.item.is_globbed lines "${glob}"
}:func <<'/---'
Report success if at least one line of the passed string matches the passed
glob.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str burnt_norton="
...     Dry the pool, dry concrete, brown edged,
...     And the pool was filled with water out of sunlight,
...     And the lotos rose, quietly, quietly,
...     The surface glittered out of heart of light,
...     And they were behind us, reflected in the pool.
...     Then a cloud passed, and the pool was empty.
...     Go, said the bird, for the leaves were full of children,
...     Hidden excitedly, containing laughter.
...     Go, go, go, said the bird: human kind
...     Cannot bear very much reality."
>>> is_string_line_matches "${burnt_norton}" *[Tt]ime*p(resen|as)t* :or
...     :stdout.echo "Shall we follow?"
Shall we follow?
------------------------------------------
==========================================

== Alternatives ==

While PCRE syntax explicitly supports such line matching with PCRE option "-m",
`zsh` glob syntax supports no such option. This function simulates such option
by splitting such string on newline into a temporary list and then performing
such glob on such list elements, a remarkably inefficient matching approach
(particularly for long strings). Happily, there exist two alternatives.

=== PCRE-based Line Matching ===

Consider calling is_string_matches_pcre_multiline() instead with the corresponding
PCRE. Since glob and PCRE patterns are similar in both form and function, this is
arguably the easiest course of action: e.g.,

.:str.is_line_^=() vs. is_string_matches_pcre_multiline()
==========================================
[source]
------------------------------------------
>>> is_string_matches_pcre_multiline\
...     "${burnt_norton}" ^.*[Tt]ime.*p(resen|as)t.*$ or
...     :stdout.echo "And all is always now."
And all is always now.
------------------------------------------
==========================================

=== Glob-based Line Matching ===

Consider calling :str.is_globbed() instead with the corresponding string-
oriented glob. While non-trivial, converting line- to string-oriented globs is
generally (but _not_ always) feasible -- namely, with the following heuristics:

* Prefix such glob with `((#s)|*${ZY_ASCII_NEWLINE})`, matching either the
  string start or a newline.
* Suffix such glob with `((#e)|${ZY_ASCII_NEWLINE}*)`, matching either the
  string end or a newline.
* Replace all internal instances of `*` with `[^${ZY_ASCII_NEWLINE}]#`,
  matching any substring of zero or more characters other than a newline.
* Replace all internal instances of `?` with `[^${ZY_ASCII_NEWLINE}]`,
  matching any character other than a newline.

Such complexity renders PCRE-based line matching the preferable alternative, in
most cases. For example:

.:str.is_line_^=() vs. :str.is_globbed()
==========================================
[source]
------------------------------------------
$$$ :str.is_globbed "${burnt_norton}"\
^^^     ((#s)|*${ZY_ASCII_NEWLINE})[Tt]ime[^${ZY_ASCII_NEWLINE}]#p(resen|as)t((#e)|${ZY_ASCII_NEWLINE}*) :or
^^^     :stdout.echo "At the still point of the turning world."
At the still point of the turning world.
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
:func_ ':str :str.Str.between_lines_^=(
    :str text :Str str_name :str/:glob start_glob :str/:glob end_glob) [
    var_name_suffix="__sSblg"]' :func{
    # List of all lines split from this string.
    :list lines__sSblg
    :str.Lines "${text__sSblg}" lines__sSblg

    # Remove non-matching lines.
    reduce_list_to_elements_after_match_inclusive_before_match_exclusive\
        lines__sSblg "${start_glob__sSblg}" "${end_glob__sSblg}"

    # Join all remaining lines into a newline-delimited string.
    :List.Join_on_newline lines__sSblg "${str_name__sSblg}"
}:func <<'/---'
Set the string variable with the passed name to the proper subset of all
continguous lines of the passed string:

* Following the first line matching the first passed glob, including such
  line. If no such line matches, throw an exception.
* Preceding the next line matching the second passed glob, including such
  line. If no such line matches, include all remaining lines, thus emulating
  get_string_lines_from_match_until_end().
/---
