#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Glob-based list removers* (i.e., functions removing list items matching
extended glob expressions).
/---

# ....................{ REMOVERS                           }....................
:func_ '<globbable> :void remove_list_items_matching_glob(
    :str:list? list_name, :str glob)' :func{
    set_list_to_list_items_not_matching_glob "${1}" "${1}" "${2}"
}:func <<'/---'
Remove all items matching the passed glob from the list variable with the
passed name.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :list on_secrecy; on_secrecy=(
...    "I began to sense faintly that secrecy is the keystone of all tyranny."
...    "Not force, but secrecy... censorship. When any government, or any"
...    'church for that matter, undertakes to say to its subjects, "This you'
...    'may not read, this you must not see, this you are forbidden to know,"'
...    "the end result is tyranny and oppression, no matter how holy the"
...    "motives. Mighty little force is needed to control a man whose mind has"
...    "been hoodwinked; contrariwise, no amount of force can control a free"
...    "man, a man whose mind is free. No, not the rack, not fission bombs, not"
...    "anything — you can't conquer a free man; the most you can do is kill"
...    "him." )
>>> remove_list_items_matching_glob on_secrecy *[aoeu]*
>>> print_list on_secrecy
1: him.
------------------------------------------
==========================================
/---

#FIXME: Split example at "Existence is random."
:func_ '<globbable> :void remove_list_items_not_matching_glob(
    :str:list? list_name, :str glob)' :func{
    set_list_to_list_items_matching_glob "${1}" "${1}" "${2}"
}:func <<'/---'
Remove all items _not_ matching the passed glob from the passed list (i.e.,
reduce such list to exactly the subset of items matching such glob).

.remove_list_items_not_matching_glob()
==========================================
[source]
------------------------------------------
>>> :list on_morality; on_morality=(
...    "Stood in firelight, sweltering. Bloodstain on chest like map of violent"
...    "new continent. Felt cleansed. Felt dark planet turn under my feet and"
...    "knew what cats know that makes them scream like babies in night."
...    ""
...    "Looked at sky through smoke heavy with human fat and God was not there."
...    "The cold, suffocating dark goes on forever and we are alone. Live our"
...    "lives, lacking anything better to do. Devise reason later. Born from"
...    "oblivion; bear children, hell-bound as ourselves, go into oblivion."
...    "There is nothing else."
...    ""
...    "Existence is random. Has no pattern save what we imagine after staring"
...    "at it for too long. No meaning save what we choose to impose. This"
...    "rudderless world is not shaped by vague metaphysical forces. It is not"
...    "God who kills the children. Not fate that butchers them or destiny that"
...    "feeds them to the dogs. It’s us. Only us. Streets stank of fire. The"
...    "void breathed hard on my heart, turning its illusions to ice,"
...    "shattering them. Was reborn then, free to scrawl own design on this"
...    "morally blank world."
...    ""
...    "Was Rorschach." )
>>> remove_list_items_not_matching_glob on_morality *[Ww]'as'*
>>> print_list on_morality
1: Looked at sky through smoke heavy with human fat and God was not there.
2: shattering them. Was reborn then, free to scrawl own design on this
3: Was Rorschach.
------------------------------------------
==========================================
/---

# ....................{ REMOVERS ~ range                   }....................
:func_ ':void :List.items_around_inclusive.remove_^=(
    :List list_name :str/:glob start_glob :str stop_glob) [
    var_name_suffix="__Lriaig"]' :func{
    :List.Items_between_inclusive.^=\
        "${list_name__Lriaig}"\
        "${list_name__Lriaig}"\
        "${start_glob__Lriaig}"\
        "${stop_glob__Lriaig}"

#FIXME: Documentation should be restated in form resembling "Remove all items
#around the..."
#FIXME: Add examples.
}:func <<'/---'
Reduce the passed list to only the subset of items both:

* Following the first item matching the first passed glob, including such
  item. If no such item matches, throw an exception.
* Preceding the next item matching the second passed glob, including such
  item. If no such item matches, include all remaining items, thus
  mimicking :List.Items_after_inclusive.^=().
/---

# ....................{ REMOVERS ~ prefix                  }....................
#FIXME: Add examples.
:func_ '<globbable> :void :remove_list_items_prefix_matching_glob(
    :str:list list_name, :str glob)' :func{
    :str list_name__rliplmg="${1}" glob__rliplmg="${2}"
    :List.eval\
        "${list_name__rliplmg}"\
        '${(X)'${list_name__rliplmg}'##${~glob__rliplmg}}'
}:func <<'/---'
Remove the longest prefix from all items of the passed list matching the passed
*greedy glob* (i.e., removing longest rather than shortest prefixes).
/---

:func_\
    '<globbable> :void :remove_list_items_prefix_matching_glob_nongreedy(
        :str:list list_name, :str glob)' :func{
    :str list_name__rlipsmg="${1}" glob__rlipsmg="${2}"
    :List.eval\
        "${list_name__rlipsmg}"\
        '${(X)'${list_name__rlipsmg}'#${~glob__rlipsmg}}'
}:func <<'/---'
Remove the shortest prefix from all items of the passed list matching the passed
*nongreedy glob* (i.e., removing shortest rather than longest prefixes).
/---
