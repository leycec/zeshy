#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *glob-based list item replacers* (i.e., functions replacing list items
substrings matching extended glob expressions).
/---

#FIXME: Add nongreedy versions of such functions.

# ....................{ REPLACERS                          }....................
#FIXME: Add examples.
:func_ '<globbable> :void
    :replace_list_item_text_matching_glob_with_string(
        :str:list list_name,
        :str glob,
        :str replacement)' :func{
    # Localize arguments.
    :str\
        list_name__rlitmgbs="${1}"\
        glob__rlitmgbs="${2}"\
        replacement__rlitmgbs="${3}"

    # Replace such list item substrings.
    :List.eval\
        "${list_name__rlitmgbs}"\
        '${(X)'${list_name__rlitmgbs}'//${~glob__rlitmgbs}/${replacement__rlitmgbs}}'
}:func <<'/---'
Replace all passed list item substrings matching the passed glob with the
passed replacement string: e.g.,

.:replace_list_item_text_matching_glob_with_string()
==========================================
[source]
------------------------------------------
------------------------------------------
==========================================
/---

#FIXME: Add examples.
:func_ '<globbable> :void
    :replace_list_item_text_matching_glob_with_expansion(
        :str:list list_name,
        :str glob,
        :str replacement_expansion)' :func{
    # Localize arguments.
    :str\
        list_name__rlitmgbe="${1}"\
        glob__rlitmgbe="${2}"\
        replacement_expansion__rlitmgbe="${3}"

    # Set scalar globals on successful matches (e.g., ${match}).
    :glob.enable_capturing_ungrouped glob__rlitmgbe

    # Replace such list item substrings.
    :List.eval\
        "${list_name__rlitmgbe}"\
        '${(X)'${list_name__rlitmgbe}'//${~glob__rlitmgbe}/'${replacement_expansion__rlitmgbe}'}'
}:func <<'/---'
Replace all passed list item substrings matching the passed glob with the
passed replacement string dynamically reexpanded in the context of each such
match. For convenience, this function implicitly enables *ungrouped glob
capturing* (i.e., sets scalar globals ${MATCH}, ${MEND}, and ${MBEGIN} on each
successful match): e.g.,

.:replace_list_item_text_matching_glob_with_expansion()
==========================================
[source]
------------------------------------------
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
#. To enable grouped capturing, consider calling
# :glob.enable_capturing_grouped() on such glob _before_ calling this function
