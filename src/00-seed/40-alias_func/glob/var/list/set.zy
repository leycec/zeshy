#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Globbable list setters* (i.e., functions setting lists and list items by
matching list items against glob expressions).
/---

#FIXME: Use parameter expansion flag "(X)" to force errors on glob errors.

# ....................{ SETTERS ~ item                     }....................
:func_ ':str :List.Item_first.^=(
    :List list_name :Str list_item_name :str/:glob list_item_glob) [
    var_name_suffix="__LIfg"]' :func{
    :List.Item_first.^=_if_found "${@}" :or
        :die "List \${${list_name____LIfg}} item matching \"\${list_item_glob__LIfg}\" not found."

#FIXME: Overlong example; split us up, please! Thunder ravens ride the wind!
}:func <<'/---'
Set the string variable with the passed name to the first item matching the
passed glob in the list with the passed name _or_ throw an exception otherwise
(i.e., if this list contains no such item).

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str list_item
>>> :list on_sectarianism; on_sectarianism=(
...    "Nevertheless this business of legislating religious beliefs into law"
...    "has never been more than sporadically successful in this country –"
...    "Sunday closing laws here and there, birth control legislation in spots,"
...    "the Prohibition experiment, temporary enclaves of theocracy such as"
...    "Voliva's Zion, Smith's Nauvoo, a few others. The country is split up"
...    "into such a variety of faiths and sects that a degree of uneasy"
...    "tolerance now exists from expedient compromise; the minorities"
...    "constitute a majority of opposition against each other. Could it be"
...    "otherwise here? Could any one sect obtain a working majority at the"
...    "polls and take over the country? Perhaps not – but a combination of a"
...    "dynamic evangelist, television, enough money, and modern techniques of"
...    "advertising and propaganda might make Billy Sunday's efforts look like"
...    "a corner store compared to Sears Roebuck. Throw in a depression for"
...    "good measure, promise a material heaven here on earth, add a dash of"
...    "anti-Semitism, anti-Catholicism, anti-Negroism, and a good large dose"
...    "of anti-\"furriners\" in general and anti-intellectuals here at home"
...    "and the result might be something quite frightening – particularly when"
...    "one recalls that our voting system is such that a minority distributed"
...    "as pluralities in enough states can constitute a working majority in"
...    "Washington... The capacity of the human mind for swallowing nonsense"
...    "and spewing it forth in violent and repressive action has never yet"
...    "been plumbed." )
>>> :List.Item_first.^= on_sectarianism list_item *'anti-'[[:WORD:]]*
>>> :stdout.echo "${list_item}"
anti-Semitism, anti-Catholicism, anti-Negroism, and a good large dose
------------------------------------------
==========================================
/---

:func_ '[status=:bool] :List.Item_first.^=_if_found(
    :List list_name :Str list_item_name :str/:glob list_item_glob) [
    var_name_suffix="__LIfgif"]' :func{
    # This implementation intentionally avoids use of array subscript flag
    # "(r)", which expands to the first list item matching the passed glob.
    # Unfortunately, this flag ambiguously expands to the empty string on
    # unsuccessful matches and hence is indistinguishable from successful
    # matches of the empty string (e.g., "*"). For safety, this flag must *NOT*
    # be used in general-purpose list matching.
    :int list_index__LIfgif
    :List.Item_first_index.^=_if_found\
        "${list_name__LIfgif}"\
        list_index__LIfgif\
        "${list_item_glob__LIfgif}" :and
        :List.Item.index\
            "${list_name__LIfgif}"\
            "${list_item_name__LIfgif}"\
            "${list_index__LIfgif}"
}:func <<'/---'
Set the string variable with the passed name to the first item matching the
passed glob in the list with the passed name _or_ report failure otherwise
(i.e., if this list contains no such item).

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str list_item
>>> :list on_testimony; :on_testimony=(
...    "In the Twentieth Century of my trespass on earth,"
...    "having exterminated one billion heathens,"
...    "heretics, Jews, Moslems, witches, mystical seekers,"
...    "black men, Asians, and Christian brothers,"
...    "every one of them for his own good,"
...    ""
...    "a whole continent of red men for living in unnatural community"
...    "and at the same time having relations with the land,"
...    "one billion species of animals for being sub-human,"
...    "and ready to take on the bloodthirsty creatures from the other planets,"
...    "I, Christian man, groan out this testament of my last will." )
>>> :List.Item_first.^=_if_found on_testimony list_item ?p?c?l?ps? :or
...     :stdout.echo "We shall not all sleep, but we shall be changed . . ."
We shall not all sleep, but we shall be changed . . .
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
:func_ ':void set_list_to_list_items_matching_glob(
    :List target_list_name
    :List source_list_name
    :str/:glob glob
) [var_name_suffix="__sltlimg"]' :func{
    # Remove non-matching items. Dismantled, this is:
    #
    # * "(M)" and ":#", removing all such source list items not matching...
    # * "${~glob__sltlimg}", such glob as a glob rather than literal.
    eval ${target_list_name__sltlimg}'=(
        "${(M)'${source_list_name__sltlimg}'[@]:#${~glob__sltlimg}}" )'
}:func <<'/---'
Set the target list with the passed name to all items in the source list with
the passed name matching the passed glob.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :list on_linearity on_cyclicity; on_cyclicity=(
...    "Catch! calls the Once-ler."
...    "He lets something fall."
...    "It's a Truffula Seed."
...    "It's the last one of all!"
...    "You're in charge of the last of the Truffula Seeds."
...    "And Truffula Trees are what everyone needs."
...    "Plant a new Truffula. Treat it with care."
...    "Give it clean water. And feed it fresh air."
...    "Grow a forest. Protect it from axes that hack."
...    "Then the Lorax"
...    "and all of his friends"
...    "may come back." )
>>> set_list_to_list_items_matching_glob on_linearity on_cyclicity *'last*'
>>> print_list on_linearity
1: It's the last one of all!
2: You're in charge of the last of the Truffula Seeds.
------------------------------------------
==========================================
/---

:func_ ':void set_list_to_list_items_not_matching_glob(
    :List target_list_name
    :List source_list_name
    :str/:glob glob
) [var_name_suffix="__sltling"]' :func{
    # Remove non-matching items. Dismantled, this is:
    #
    # * ":#", removing all source list items matching...
    # * "${~glob__sltling}", this glob as a glob rather than literal.
    eval ${list_name_target__sltling}'=(
        "${'${list_name_source__sltling}'[@]:#${~glob__sltling}}" )'
}:func <<'/---'
Set the target list with the passed name to all items in the source list with
the passed name _not_ matching the passed glob.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :list on_profit on_medicine; on_medicine=(
...    "When at last we are sure"
...    "You've been properly pilled,"
...    "Then a few paper forms"
...    "Must be properly filled"
...    "So that you and your heirs"
...    "May be properly billed." )
>>> set_list_to_list_items_not_matching_glob on_profit on_medicine *'o'*
>>> print_list on_profit
1: When at last we are sure
------------------------------------------
==========================================
/---

# ....................{ SETTERS ~ range                    }....................
:func_ ':void :List.Items_after_inclusive.^=(
    :List source_list_name
    :List target_list_name
    :str/:glob glob
) [var_name_suffix="__LIaig"]' :func{
    # Index of the first list item matching this glob.
    :int list_index__LIaig
    :List.Item_first_index.^=\
        "${source_list_name__LIaig}" list_index__LIaig "${glob__LIaig}"

    # Set this list to all list items after and including this index.
    :List.eval\
        "${target_list_name__LIaig}"\
        '"${'${source_list_name__LIaig}'[${list_index__LIaig},]}"'
}:func <<'/---'
Set the target list variable with the passed name to all items of the source
list variable with the passed name after and including the first item matching
the passed glob _or_ throw an exception otherwise (i.e., if no such item
matches).
/---

:func_ ':void :List.Items_between_inclusive.^=(
    :List source_list_name
    :List target_list_name
    :str/:glob list_item_start_glob
    :str/:glob list_item_stop_glob
) [var_name_suffix="__LIbig"]' :func{
    # Index of the first list item matching this starting glob.
    :int list_start_index__LIbig list_stop_index__LIbig
    :List.Item_first_index.^=\
        "${source_list_name__LIbig}"\
        list_start_index__LIbig\
        "${list_item_start_glob__LIbig}"

    # Next matching index if found.
    if { :List.Item_first_index.after_index.^=_if_found\
        "${source_list_name__LIbig}"\
        list_stop_index__LIbig\
        "${list_start_index__LIbig}"\
        "${list_item_stop_glob__LIbig}"
    } {
    # Else, default to the last index.
    } else {
        :List.Size "${source_list_name__LIbig}" list_stop_index__LIbig
    }

    # Set this list to all items between and including these indices.
    :List.eval\
        "${target_list_name__LIbig}"\
        '"${'${source_list_name__LIbig}'[${list_start_index__LIbig},${list_stop_index__LIbig}]}"'
}:func <<'/---'
Set the target list variable with the passed name to all items of the source
list variable with the passed name that:

* Follows the first item matching the first passed glob, including this item.
  If no such item matches, throw an exception.
* Precedes the next item matching the second passed glob, including this item.
  If no such item matches, include all remaining items, thus mimicking
  :List.Items_after_inclusive.^=().
/---

# ....................{ SETTERS ~ index : first            }....................
#FIXME: Add examples.
:func_ ':void :List.Item_first_index.^=(
    :List list_name :Int list_item_index_name :str/:glob list_item_glob) [
    var_name_suffix="__LFig"]' :func{
    :List.Item_first_index.^=_if_found "${@}" :or
        die_unless_list_item_matches_glob\
            "${list_name__LFig}" "${list_item_glob__LFig}"

#FIXME: Fantastic example, but overlong. Split up, please.
}:func <<'/---'
Set the integer with the passed name to the 1-based index of the first item in
the list with the passed name matching the passed glob _or_ throw an exception
otherwise (i.e., if no such item matches).

== See Also ==

* :List.Item_first_index.^=_if_found().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :int list_index
>>> :list on_tumescence; :on_tumescence=(
...     "I give my blood fifty parts polystyrene,"
...     "twenty-five parts benzene, twenty-five parts good old gasoline,"
...     "to the last bomber pilot aloft, that there shall be one acre"
...     "in the dull world where the kissing flower may bloom,"
...     "which kisses you so long your bones explode under its lips."
...     ""
...     "My tongue goes to the Secretary of the Dead"
...     'to tell the corpses, "I'm sorry, fellows,'
...     "the killing was just one of those things"
...     "difficult to pre-visualize — like a cow,"
...     'say, getting blown up by lightning."'
...     ""
...     "My stomach, which has digested"
...     "four hundred treaties giving the Indians"
...     "eternal right to their land, I give to the Indians,"
...     "I throw in my lungs full of tumors, from faithfully"
...     "smoking the peace pipe before every massacre."
...     ""
...     "My soul I leave to the bee"
...     "that he may sting it and die, my brain"
...     "to the fly, his back the hysterical green color of slime,"
...     "that he may suck on it and die, my flesh to the advertising man,"
...     "the anti-prostitute, who loathes human flesh for money." )
>>> :List.Item_first_index.^= on_tumescence list_index *'to the'[[:blank:]]*
>>> :stdout.echo "${list_index}"
3
------------------------------------------
==========================================
/---

:func_ '[status=:bool] :List.Item_first_index.^=_if_found(
    :List list_name :Int list_item_index_name :str/:glob list_item_glob) [
    var_name_suffix="__LFigif"]' :func{
    :int list_index__LFigif list_size__LFigif

    # 1-based index of the first matching item. Dismantled, this is:
    #
    # * '@P', expanding to the passed list.
    # * 'i', expanding to the index of the matching first item.
    # * "${~glob__LFigif}", treating such glob as a glob rather than a raw
    #   string literal.
    list_index__LFigif=${${(@P)list_name__LFigif}[(i)${~list_item_glob__LFigif}]}

    # Size of this list.
    :List.Size "${list_name__LFigif}" list_size__LFigif

    # Set this index if found or report failure otherwise.
    (( list_index__LFigif <= list_size__LFigif )) :and
        :Int.set "${list_item_index_name__LFigif}" "${list_index__LFigif}"

#FIXME: Fantastic example, but overlong. Split up, please.
}:func <<'/---'
Set the integer with the passed name to the 1-based index of the first item in
the list with the passed name matching the passed glob _or_ report failure
otherwise (i.e., if no such item matches).

== Examples ==

==========================================
[source]
------------------------------------------
>>> :int list_index
>>> :list on_madness; :on_madness=(
...     "I assign my crooked backbone"
...     "to the dice maker, to chop up into dice,"
...     "for casting lots as to who shall see his own blood"
...     "on his shirt front and who his brother's,"
...     "for the race isn't to the swift but to the crooked."
...     ""
...     "To the last man surviving on earth"
...     "I give my eyelids worn out by fear, to wear"
...     "in his long nights of radiation and silence,"
...     "so that his eyes can't close, for regret"
...     "is like tears seeping through closed eyelids."
...     "
...     "I give the emptiness my hand: the pinkie picks no more noses,"
...     "slag clings to the black stick of the ring finger,"
...     "a bit of flame jets from the tip of the fuck-you finger,"
...     "the first finger accuses the heart, which has vanished,"
...     "on the thumb stump wisps of smoke ask a ride into the emptiness."
...     ""
...     "In the Twentieth Century of my nightmare"
...     "on earth, I swear on my chromium testicles"
...     "to this testament"
...     "and last will"
...     "of my iron will, my fear of love, my itch for money, and my madness." )
>>> :List.Item_first_index.^=_if_found on_madness list_index *'on_sanity'* :or
...     :stdout.echo "Lieutanant! This corpse will not stop burning!"
Lieutanant! This corpse will not stop burning!
------------------------------------------
==========================================
/---

# ....................{ SETTERS ~ index : first : after    }....................
:func_ '[status=:bool] :List.Item_first_index.after_index.^=_if_found(
    :List list_name
    :Int list_index
    :int list_start_index
    :str/:glob list_item_glob
) [var_name_suffix="__LIfigaiif"]' :func{
    # Begin searching at the next such index. Since zsh supplies no builtin
    # means of finding from some index (subscript flag "(i)" always matches from
    # index 1), consider the following clever alternative:
    #
    # * Copy the *ENTIRE* subset of such list after such index into a new list.
    # * Search such list with subscript flag "(i)".
    # * Offset the matching index if found by the passed index.
    #
    # In the worst case, this copy duplicates this list. While unfortunate, this
    # is considerably faster (if memory intensive) than manual iteration.
    :list sublist__LIfigaiify
    sublist__LIfigaiif=( "${${(@P)list_name__LIfigaiif}[
        $(( list_start_index__LIfigaiif + 1 )),]}" )

    # Set this index if found or report failure.
    :List.Item_first_index.^=_if_found\
        sublist__LIfigaiif\
        sublist_index__LIfigaiif
        "${glob__LIfigaiif}" :and :Int.set\
        list_index__LIfigaiif\
        $(( sublist_index__LIfigaiif + list_start_index__LIfigaiif ))

#FIXME: Add examples.
}:func <<'/---'
Set the integer variable with the passed name to the 1-based index of the first
item after the item with the passed index in the list variable with the passed
name matching the passed glob _or_ report failure otherwise (i.e., if no such
item matches).
/---
