#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Globbable list getters* (i.e., functions getting list items and indices by
matching such items against glob expressions).
/---

#FIXME: Refactor all getters to setters.

# ....................{ GETTERS ~ index                    }....................
:func_ ':int get_list_index_first_matching_glob(
    :List list_name :str/:glob glob) [
    var_name_suffix="__Lfig"]' :func{
    :str index__LFig
    :List.items.^=.first.Index "${list_name__LFig}" index__LFig "${glob__LFig}"
    :stdout.echo "${index__LFig}"

#FIXME: Overlong examples. Split us up, please.
}:func <<'/---'
Get the 1-based index of the first item in the passed list matching the passed
glob expression or throw an exception if no such item matches: e.g.,

.get_list_index_first_matching_glob()
==========================================
[source]
------------------------------------------
>>> :list on_tumescence; :on_tumescence=(
...     "I give my blood fifty parts polystyrene,"
...     "twenty-five parts benzene, twenty-five parts good old gasoline,"
...     "to the last bomber pilot aloft, that there shall be one acre"
...     "in the dull world where the kissing flower may bloom,"
...     "which kisses you so long your bones explode under its lips."
...     ""
...     "My tongue goes to the Secretary of the Dead"
...     'to tell the corpses, "I'm sorry, fellows,'
...     "the killing was just one of those things"
...     "difficult to pre-visualize â€” like a cow,"
...     'say, getting blown up by lightning."'
...     ""
...     "My stomach, which has digested"
...     "four hundred treaties giving the Indians"
...     "eternal right to their land, I give to the Indians,"
...     "I throw in my lungs full of tumors, from faithfully"
...     "smoking the peace pipe before every massacre."
...     ""
...     "My soul I leave to the bee"
...     "that he may sting it and :die, my brain"
...     "to the fly, his back the hysterical green color of slime,"
...     "that he may suck on it and :die, my flesh to the advertising man,"
...     "the anti-prostitute, who loathes human flesh for money." )
>>> get_list_index_first_matching_glob on_tumescence *'to the'[[:blank:]]*
3
------------------------------------------
==========================================
/---

:func_ '[stdout=:int status=:bool] get_list_index_first_matching_glob_if_found(
    :List list_name :str/:glob glob) [
    var_name_suffix="__Lfigif"]' :func{
    # Get such index if found or report failure.
    :str index__Lfigif
    :List.items.^=.first.Index_if_found\
        "${list_name__LFigif}" index__LFig "${glob__LFigif}" :and
        :stdout.echo "${index__Lfigif}"

#FIXME: Overlong examples. Split us up, please.
}:func <<'/---'
Get the 1-based index of the first item in the passed list matching the passed
glob expression or report failure if no such item matches: e.g.,

.get_list_index_first_matching_glob_if_found()
==========================================
[source]
------------------------------------------
>>> :list on_madness; :on_madness=(
...     "I assign my crooked backbone"
...     "to the dice maker, to chop up into dice,"
...     "for casting lots as to who shall see his own blood"
...     "on his shirt front and who his brother's,"
...     "for the race isn't to the swift but to the crooked."
...     ""
...     "To the last man surviving on earth"
...     "I give my eyelids worn out by fear, to wear"
...     "in his long nights of radiation and silence,"
...     "so that his eyes can't close, for regret"
...     "is like tears seeping through closed eyelids."
...     "
...     "I give the emptiness my hand: the pinkie picks no more noses,"
...     "slag clings to the black stick of the ring finger,"
...     "a bit of flame jets from the tip of the fuck-you finger,"
...     "the first finger accuses the heart, which has vanished,"
...     "on the thumb stump wisps of smoke ask a ride into the emptiness."
...     ""
...     "In the Twentieth Century of my nightmare"
...     "on earth, I swear on my chromium testicles"
...     "to this testament"
...     "and last will"
...     "of my iron will, my fear of love, my itch for money, and my madness." )
>>> get_list_index_first_matching_glob_if_found on_madness *'on_sanity'* or
...     :stdout.echo "Lieutanant! This corpse will not stop burning!"
Lieutanant! This corpse will not stop burning!
------------------------------------------
==========================================
/---

#FIXME: Add examples.
:func_ '<globbable> [stdout = :int, status = :bool]
    get_list_index_first_matching_glob_after_index_if_found(
        :str:list? list_name, :str glob, :int? start_index)' :func{
    # Validate sanity.
    :str\
        list_name__glmifafif="${1}"\
        glob__glmifafif="${2}"\
        index_start__glmifafif="${3}"\
        list_size__glmifafif
    :int index__glmifafif
    :list list_copy__glmifafify
    die_unless_list_index "${list_name__glmifafif}" "${index_start__glmifafif}"

    # Begin searching at the next such index. Since zsh supplies no builtin
    # means of finding from some index (subscript flag "(i)" always matches from
    # index 1), consider the following clever alternative:
    #
    # * Copy the *ENTIRE* subset of such list after such index into a new list.
    # * Search such list with subscript flag "(i)".
    # * Offset the matching index if found by the passed index.
    #
    # In the worst case, this copy duplicates such list. While unfortunate, this
    # is considerably faster (if memory intensive) than manual iteration.
    list_copy__glmifafif=(
        "${${(@P)list_name__glmifafif}[$(( index_start__glmifafif + 1 )),]}" )

    # Get such index if found or report failure.
    index__glmifafif=$(get_list_index_first_matching_glob_if_found\
        list_copy__glmifafif "${glob__glmifafif}") :and
        :stdout.echo $(( index__glmifafif + index_start__glmifafif ))
}:func <<'/---'
Get the 1-based index of the first item in the passed list matching the
passed glob _after_ the passed index or report failure if no such item matches.
/---
