#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Unconvinced this parcel has to reside here. While functions this parcel
#defines *ARE* called in the bodies of aliases defined by sibling parcels, this
#parcel itself defines no aliases. We see no reason this parcel can't simply be
#shifted into the main codebase.

:parcel <<'/---'
*Extended glob expressions* (i.e., `zsh`-specific string-matching patterns
roughly analogous to extended regular expressions).

== See Also ==

* Section ``FILENAME GENERATION'' of `man zshexpn`, documenting glob syntax.
/---

# Functions attributed as "<globbable>" must be declared *BEFORE* defining
# functions calling those functions. Since zeshy implements this attribute as
# aliases of the same names *AND* since zsh expands aliases at function
# definition rather than call time, these aliases should be declared *BEFORE*
# definitions expanding such aliases. While nonfatal, failure to do fails to
# disable filename globbing when calling such functions from other functions.

#FIXME: Insanity, but the good kind! Well, mostly. Turns out there's a flag to
#enable error-checking on parameter expansion globbing:
#
#X      With  this  flag,  parsing  errors occurring with the Q, e and # flags or the
#       pattern matching forms such as `${name#pattern}' are reported.   Without  the
#       flag, errors are silently ignored.
#
#Hence, whenever we perform such matching, use the "(X)" flag as well. (Perhaps
#confine such flag to only debug mode? Or does it not impact performance at all?
#I suspect not, in which case -- go flag crazy!)

# ....................{ GLOBALS                            }....................
#FIXME: Replace current magic strings with these everywhere.
:str.global ZY__GLOB_ENABLE_CAPTURING_UNGROUPED='(#m)' <<'/---'
Globbing flag enabling *ungrouped capturing* on successful matches with globs
containing this flag.

After such matches, the following canonical scalar globals will be defined:

* ${MATCH}, a string global expanding to the currently matched substring.
* ${MBEGIN}, an integer global expanding to the 1-based index of the matched
  string at which such substring starts.
* ${MEND}, an integer global expanding to the 1-based index of the matched
  string at which such substring ends.
/---

:str.global ZY__GLOB_ENABLE_CAPTURING_GROUPED='(#b)' <<'/---'
Globbing flag enabling *grouped capturing* on successful matches with globs
containing this flag.

Globbing flag capturing each subsequent parenthesised group into the
corresponding element of list global ${match}.

After such matches, the following canonical list globals will be defined:

* ${match}, a list global containing each match group captured within such
  substring (e.g., `${match[1]}`, the first match group).
* ${mbegin}, a list global containing each 1-based index of the matched string
  at which the corresponding match group starts (e.g., `${mbegin[1]}`, the index
  at which the first match group starts).
* ${mend}, a list global containing each 1-based index of the matched string
  at which the corresponding match group ends (e.g., `${mend[1]}`, the index
  at which the first match group ends).
/---

# ....................{ TESTERS                            }....................
# While trivial, this tester's existence is required by the low-level @func()
# macro on function prototypes accepting one or more arguments of major subtype
# ":glob" -- as is the case for subsequent functions.
:func_ ':void :glob.is(:str glob)' :func{
    :is -n ${glob} :si
}:func <<'/---'
Report success only if the passed string is a `zsh`-specific *extended glob*
(i.e., a non-empty string, presumably matching strings via PCRE-like extended
glob syntax).
/---


#FIXME: Rename to :str.is_globlike().
:func_ '[status=:bool] :str.contains_syntax_glob(:str text)' :func{
    :is ${text} == *['[]<>()|+*?#~^']* :si
}:func <<'/---'
Report success only if the passed string contains at least one *glob-reserved
character* (i.e., character with syntactic meaning in glob expressions and hence
_not_ interpreted as the corresponding raw character unless explicitly escaped).

Notably, this includes most ASCII punctuation (e.g., `[`, `<`, `(`, `|`).
/---

# ....................{ ENABLERS                           }....................
:func_ ':void :Glob.enable_capturing_ungrouped(:Str glob_name) [
    var_name_suffix="__Gecu"]' :func{
    # If this glob does *NOT* already contain the flag enabling ungrouped
    # capturing, prefix this glob by this flag.
    #
    # Since the lexical position of "(#m)" within a glob is irrelevant, this
    # glob may *ALWAYS* be safely prefixed by this flag (even if this glob
    # already contains this flag). Whereas the :Glob.enable_capturing_grouped()
    # function only prefixes its glob by its flag if the former does *NOT*
    # contain the latter, this function only prefixes this glob by this flag if
    # the former does *NOT* contain the latter at its start, a more specific and
    # hence less ambiguous test.
    :is ${(P)glob_name__Gecu} == "${ZY__GLOB_ENABLE_CAPTURING_UNGROUPED}"* :si :or
        :str.prefix "${glob_name__Gecu}" "${ZY__GLOB_ENABLE_CAPTURING_UNGROUPED}"
}:func <<'/---'
Modify the glob to which the passed string variable expands to enable
*ungrouped capturing* on successful string matches with this glob (i.e., to set
the scalar ${MATCH}, ${MBEGIN}, and ${MEND} globals on these matches).

This function prefixes this glob by the globbing flag `(#m)` only if this glob
does _not_ already contain this flag.

== See Also ==

* ${ZY__GLOB_ENABLE_CAPTURING_UNGROUPED}.
/---


:func_ ':void :Glob.enable_capturing_grouped(:Str glob_name) [
    var_name_suffix="__Gecg"]' :func{
    # If this glob does *NOT* already contain the flag enabling group capturing,
    # prefix this glob by this flag.
    #
    # Since the lexical position of "(#b)" within a glob is relevant, this glob
    # must *NOT* be prefixed by this flag if this glob already contains this
    # flag anywhere. See the :Glob.enable_capturing_ungrouped() function for
    # further discussion.
    :is ${(P)glob_name__Gecg} == *"${ZY__GLOB_ENABLE_CAPTURING_GROUPED}"* :si :or
        :str.prefix "${glob_name__Gecg}" "${ZY__GLOB_ENABLE_CAPTURING_GROUPED}"

    # In either case, unconditionally enable ungrouped capturing.
    :Glob.enable_capturing_ungrouped "${glob_name__Gecg}"
}:func <<'/---'
Modify the glob to which the passed string variable expands to enable both
*grouped* _and_ *grouped capturing* on successful string matches with this glob
(i.e., to set the scalar ${MATCH}, ${MBEGIN}, and ${MEND} globals _and_ the
nonscalar ${match}, ${mbegin}, and ${mend} globals on these matches).

This function prefixes this glob by whichever of the globbing flags `(#m)` and
`(#b)` this glob does _not_ already contain.

== See Also ==

* ${ZY__GLOB_ENABLE_CAPTURING_GROUPED}.
/---
