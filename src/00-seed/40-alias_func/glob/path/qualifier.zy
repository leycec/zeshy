#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Glob qualifiers* (i.e., `(#q`- and `)`-delimited expressions suffixing
path-specific globs).

== See Also ==

* Section ``Glob Qualifiers'' of `man zshexpn`, documenting these qualifiers.
* zy://*-root/path/qualifier.zy, a parcel handling path qualifiers _not_
  prefixed by path-specific globs and hence _not_ requiring the early-time
  compilation of function argument type `:str/:glob` required by this parcel.
/---

# ....................{ TESTERS                            }....................
#FIXME: Refactor to make the list of passed glob qualifiers optional. Revivify!

:func_ '[status=:bool] :path.is_^=(
    :str/:glob glob +:str glob_qualifiers)' :func{
    :list pathnames
    Paths.^= pathnames "${@}"
    :List.is_nonempty pathnames

#FIXME: Great example, but overlong. Split below.
}:func <<'/---'
Report success only if at least one existing path matches both the passed glob
_and_ all passed glob qualifiers.

== See Also ==

* Paths.^=().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_mondays="
... Both Plato and Xenophon attribute to Socrates and obviously share with
... him an awareness of the destructive effects of work on the worker as a
... citizen and a human being. Herodotus identified contempt for work as an
... attribute of the classical Greeks at the zenith of their culture. To
... take only one Roman example, Cicero said that \"whoever gives his labor
... for money sells himself and puts himself in the rank of slaves.\" His
... candor is now rare, but contemporary primitive societies which we are
... wont to look down upon have provided spokesmen who have enlightened
... Western anthropologists. The Kapauku of West Irian, according to
... Posposil, have a conception of balance in life and accordingly work only
... every other day, the day of rest designed \"to regain the lost power and
... health.\" Our ancestors, even as late as the eighteenth century when
... they were far along the path to our present predicament, at least were
... aware of what we have forgotten, the underside of industrialization.
... Their religious devotion to \"St. Monday\" – thus establishing a de
... facto five-day week 150-200 years before its legal consecration – was
... the despair of the earliest factory owners. They took a long time in
... submitting to the tyranny of the bell, predecessor of the time clock. In
... fact it was necessary for a generation or two to replace adult males
... with women accustomed to obedience and children who could be molded to
... fit industrial needs. Even the exploited peasants of the ancient regime
... wrested substantial time back from their landlord's work. According to
... Lafargue, a fourth of the French peasants' calendar was devoted to
... Sundays and holidays, and Chayanov's figures from villages in Czarist
... Russia – hardly a progressive society – likewise show a fourth or fifth
... of peasants' days devoted to repose. Controlling for productivity, we
... are obviously far behind these backward societies. The exploited muzhiks
... would wonder why any of us are working at all. So should we."
>>> :dir.make on_diversity
>>> :path.is_^= ?n_d?v?rs?t? '/^F' 'u'"$(get_user)" :and
...     get_string_line "${on_mondays}" -1
would wonder why any of us are working at all. So should we.
------------------------------------------
==========================================
/---

# ....................{ GETTERS                            }....................
:func_ '[status=:bool] :Path.^=_first_if_found(
    :Str path_name :str/:glob glob *:str glob_qualifiers) [
    var_name_suffix="__Pgfif"]' :func{
    :list paths__Pgfif
    Paths.^= paths__Pgfif "${glob__Pgfif}" "${glob_qualifiers__Pgfif[@]}"
    :List.is_nonempty paths__Pgfif :and
        :Str.set "${path_name__Pgfif}" "${paths__Pgfif[1]}"
}:func <<'/---'
Set the string variable with the passed name to the absolute or relative
pathname of the first existing path matching both the passed glob and all passed
glob qualifiers _or_ report failure if no such path exists.

There exists no corresponding :Path.^=_first_if_found() function. While
implementing that function is certainly feasible, any exceptions thrown by that
function would be unlikely to be human-readable (e.g.,
`No path matches glob "'imprimi_potest/'*(#q'w/')".`). Instead, simply call this
function and throw the expected human-readable exception on failure.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str pathname on_divinity="
... Confronted, when the weather is fine and I am in propitious emotional
... circumstances, with certain landscapes, certain works of art, certain
... human beings, I know, for the time being, that God's in his heaven and
... all's right with the world. On other occasions, skies and destiny being
... inclement, I am no less immediately certain of the malignant
... impersonality of an uncaring universe. Every human being has had similar
... experiences. This being so, the sensible thing to do would be to accept
... the facts and frame a metaphysic to fit them. But with that talent for
... doing the wrong thing, that genius for perversity, so characteristically
... human, men have preferred, especially in recent times, to take another
... course. They have either denied the existence of these psychological
... facts; or if they have admitted them, have done so only to condemn as
... evil all such experiences as cannot be reconciled in a logical system
... with whatever particular class of experiences they have chosen,
... arbitrarily, to regard as \"true\" and morally valuable. Every man tries
... to pretend that he is consistently one kind of person and does his best
... consistently to worship one kind of God. And this despite the fact that
... he experiences diversity and actually feels himself in contact with a
... variety of divinities."
>>> :Path.^=_first_if_found pathname /etc/[a-z]##tab ^u0 :or
...     get_string_line "${on_worship}" 1
Confronted, when the weather is fine and I am in propitious emotional
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
:func_ ':void Paths.^=(
    :List paths_name :str/:glob glob *:str glob_qualifiers) [
    var_name_suffix="__Pg"]' :func{
    # Qualify this glob with these glob qualifiers.
    :Glob.qualify glob__Pg "${glob_qualifiers__Pg[@]}"

    # Set this list to all matching pathnames.
    :List.eval "${paths_name__Pg}" '${~glob__Pg}'
}:func <<'/---'
Set the passed list to the absolute or relative pathnames of all existing paths
matching both the passed glob and all passed glob qualifiers.

For convenience, glob qualifiers may be formatted as any of the following:

* Undelimited strings (e.g., `^-U`, matching files _not_ owned by the current
  effective user after resolving symbolic links).
* `(`- and `)`-delimited strings (e.g., `(^-U)`).
* `(#q`- and `)`-delimited strings (e.g., `(#q^-U)`).

== Examples ==

==========================================
[source]
------------------------------------------
>>> :list pseudo_files
>>> Paths.^= pseudo_files /proc/[a-z]## -.L0
>>> :stdout.echo "${pseudo_files[1,3]}"
/proc/buddyinfo /proc/cgroups /proc/cmdline
------------------------------------------
==========================================
/---

# ....................{ QUALIFIERS                         }....................
:func_ ':void :Glob.qualify(:Str glob_name *:str glob_qualifiers) [
    var_name_suffix="__Gq"]' :func{
    # Glob qualifiers converted from a list of strings into a single string.
    :str glob_qualifiers_str__Gq

    # For efficiency, append to a local string rather than calling
    # :Str.suffix() each iteration.
    :str glob_qualifier__Gq
    for  glob_qualifier__Gq ("${glob_qualifiers__Gq[@]}") {
        # If this qualifier is not delimited by "(#q" and ")", this qualifier
        # may instead be delimited by "(" and ")". In any case, delimit this
        # qualifier by "(#q" and ")" instead.
        #
        # zsh requires each of a series of multiple qualifiers to be prefixed by
        # "(#q" rather than "(". While this is technically unnecessary for globs
        # suffixed by only one glob qualifier, the passed glob may already be
        # suffixed by glob qualifiers. For safety, we assume this is the case.
        if :is ${glob_qualifier__Gq} != '(#q'*')' :si {
            glob_qualifiers_str__Gq+='(#q'${${glob_qualifier__Gq#(}%)}')'
        # Else, this qualifier is delimited by "(#q" and ")" and hence is
        # safely appendable as is.
        } else {
            glob_qualifiers_str__Gq+=${glob_qualifier__Gq}
        }
    }

    # Suffix this glob by these glob qualifiers.
    :Str.suffix "${glob_name__Gq}" "${glob_qualifiers_str__Gq}"
}:func <<'/---'
Append the first passed string with the concatenation of all remaining passed
strings converted to *glob qualifiers* (i.e., `(#q`- and `)`-delimited strings
to be appended to pathname globs, filtering undesirable pathnames from the set
of all pathnames matching these globs).

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str glob='/etc/**/*.lisp'
>>> :Glob.qualify glob '-.' 'u0'
>>> :stdout.echo "${glob}"
/etc/**/*.lisp(#q-.)(#qu0)
>>> :list pathnames; pathnames=( ${~glob} )
>>> :stdout.echo_newlined "${pathnames[@]}"
/etc/gentoo-init.lisp
/etc/lisp-config.lisp
------------------------------------------
==========================================
/---
