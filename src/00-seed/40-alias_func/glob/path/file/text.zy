#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Text file globs* (i.e., extended glob expressions matching text file contents
in `grep` fashion).
/---

# ....................{ TESTERS                            }....................
:func_ '[status=:bool] :file.text.is_^=(:str filename :str/:glob glob)' :func{
    # Contents of this file.
    :str file_text
    :file.Text "${filename}" file_text

    # Force this glob to perform ungrouped capturing.
    :Glob.enable_capturing_ungrouped glob

    # Glob these contents.
    :is ${file_text} == ${~glob} :si
}:func <<'/---'
Report success if the contents of the passed text file match the passed glob.

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str on_jobs=\
...    "But modern work has worse implications. People don't just work, they
...     have \"jobs.\" One person does one productive task all the time on an
...     or-else basis. Even if the task has a quantum of intrinsic interest (as
...     increasingly many jobs don't) the monotony of its obligatory exclusivity
...     drains its ludic potential. A \"job\" that might engage the energies of
...     some people, for a reasonably limited time, for the fun of it, is just a
...     burden on those who have to do it for forty hours a week with no say in
...     how it should be done, for the profit of owners who contribute nothing
...     to the project, and with no opportunity for sharing tasks or spreading
...     the work among those who actually have to do it. This is the real world
...     of work: a world of bureaucratic blundering, of sexual harassment and
...     discrimination, of bonehead bosses exploiting and scapegoating their
...     subordinates who – by any rational-technical criteria – should be
...     calling the shots. But capitalism in the real world subordinates the
...     rational maximization of productivity and profit to the exigencies of
...     organizational control."
>>> write_file_with_string on_control "${on_jobs}"
>>> :file.text.is_^= on_control *'The Alienation of Labour'* :or
...     :stdout.echo "Workers of the world... relax!"
Workers of the world... relax!
------------------------------------------
==========================================
/---

# ....................{ SETTERS ~ group                    }....................
:func_ ':void :file.text.^=.Group(
    :str filename :str/:glob glob :Str group_name ?:int group_index=1) [
    var_name_suffix="__ftgG"]' :func{
    :file.text.^=.Group.if_found "${@}" :or
        :die "File \"${filename__ftgG}\" contents fail to match glob \"${glob__ftgG}\"."

#FIXME: Great example, but extremely overlong. Truncate significantly.
}:func <<'/---'
Set the string variable with the passed name to the match group with the passed
1-based index (defaulting to the first group) captured by matching the contents
of the passed text file with the passed glob _or_ throw an exception otherwise
(i.e., if this match fails or no such group exists).

== See Also ==

* :str.^=.Group().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str match_group on_liberation=\
...    "Love the quick profit, the annual raise,
...     vacation with pay. Want more
...     of everything ready-made. Be afraid
...     to know your neighbors and to die.
...
...     And you will have a window in your head.
...     Not even your future will be a mystery
...     any more. Your mind will be punched in a card
...     and shut away in a little drawer.
...
...     When they want you to buy something
...     they will call you. When they want you
...     to die for profit they will let you know.
...     So, friends, every day do something
...     that won't compute. Love the Lord.
...     Love the world. Work for nothing.
...     Take all that you have and be poor.
...     Love someone who does not deserve it.
...
...     Denounce the government and embrace
...     the flag. Hope to live in that free
...     republic for which it stands.
...     Give your approval to all you cannot
...     understand. Praise ignorance, for what man
...     has not encountered he has not destroyed.
...
...     Ask the questions that have no answers.
...     Invest in the millenium. Plant sequoias.
...     Say that your main crop is the forest
...     that you did not plant,
...     that you will not live to harvest.
...
...     Say that the leaves are harvested
...     when they have rotted into the mold.
...     Call that profit. Prophesy such returns.
...     Put your faith in the two inches of humus
...     that will build under the trees
...     every thousand years."
>>> write_file_with_string on_resurrection.txt "${on_liberation}"
>>> :file.text.^=.Group on_resurrection.txt *('And'[^$'\n']##)* match_group 1
>>> :stdout.echo "${match_group}"
And you will have a window in your head.
------------------------------------------
==========================================
/---

:func_ '[status=:bool] :file.text.^=.Group.if_found(
    :str filename :str/:glob glob :Str group_name :int group_index=1) [
    var_name_suffix="__ftgGif"]' :func{
    # Contents of this file.
    :str file_text__ftgGif
    :file.Text "${filename__ftgGif}" file_text__ftgGif

    # Set this string to this match group if found.
    :str.^=.Group_if_found\
        "${file_text__ftgGif}"\
        "${glob__ftgGif}"\
        "${group_name__ftgGif}"\
        "${glob_index__ftgGif}"

#FIXME: Great example, but extremely overlong. Truncate significantly.
}:func <<'/---'
Set the string variable with the passed name to the match group with the passed
1-based index (defaulting to the first group) captured by matching the contents
of the passed text file with the passed glob _or_ report failure otherwise
(i.e., if this match fails or no such group exists).

== See Also ==

* :str.^=.Group_if_found().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :str match_group on_resurrection=\
...    "Listen to carrion – put your ear
...     close, and hear the faint chattering
...     of the songs that are to come.
...     Expect the end of the world. Laugh.
...     Laughter is immeasurable. Be joyful
...     though you have considered all the facts.
...     So long as women do not go cheap
...     for power, please women more than men.
...
...     Ask yourself: Will this satisfy
...     a woman satisfied to bear a child?
...     Will this disturb the sleep
...     of a woman near to giving birth?
...
...     Go with your love to the fields.
...     Lie down in the shade. Rest your head
...     in her lap. Swear allegiance
...     to what is nighest your thoughts.
...
...     As soon as the generals and the politicos
...     can predict the motions of your mind,
...     lose it. Leave it as a sign
...     to mark the false trail, the way
...     you didn't go.
...
...     Be like the fox
...     who makes more tracks than necessary,
...     some in the wrong direction.
...     Practice resurrection."
>>> write_file_with_string on_liberation "${on_resurrection}"
>>> :file.text.^=.Group.if_found\
...     on_liberation *('And'[^$'\n']##)* match_group :or
...     :stdout.echo "We are living even now among punishments and ruins."
We are living even now among punishments and ruins.
------------------------------------------
==========================================
/---
