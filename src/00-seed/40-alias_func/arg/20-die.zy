#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *argument count exception handlers* (i.e., runnables throwing exceptions
unless the number of arguments passed to the current functions or script
satisifies one or more conditions).
/---

# ....................{ EXCEPTIONS ~ count                 }....................
# Since argument counts are always nonnegative, defining hypothetical functions
# die_unless_args_at_most() and is_args_at_most() would be unhelpful; functions
# :args.count.die_unless_>=<() and :args.count.is_>=<() with the first passed
# argument 0 already implement this functionality.

#FIXME: The following validators accepting only one argument are efficiently
#reimplementable as heredoc-driven aliases. Sabres of the blackest night erupt!
:alias_command ':void ":args.count.die_unless_=="(:int arg_count)'\
    '::args.count.die_unless_== ${#}' <<'/---'
Throw an exception unless the caller passed the passed number of arguments to
the current runnable.
/---

:func_ ':void "::args.count.die_unless_=="(
    :int arg_count_passed :int arg_count_expected)' :func{
    (( arg_count_passed == arg_count_expected )) :or
        :die "${arg_count_expected} arguments expected, but ${arg_count_passed} arguments passed."
}:func <<'/---'
This private function is intended to be called _only_ by
":args.count.die_unless_=="().
/---

:alias_command ':void ":args.count.die_unless_>="(:int arg_count_minimum)'\
    '::args.count.die_unless_">=" ${#}' <<'/---'
Throw an exception unless the caller passed at least the passed number of
arguments to the current runnable.
/---

:func_ ':void "::args.count.die_unless_>="(
    :int arg_count_passed :int arg_count_minimum)' :func{
    (( arg_count_passed >= arg_count_minimum )) :or
        :die "At least ${arg_count_expected} arguments expected, but only ${arg_count_passed} arguments passed."
}:func <<'/---'
This private function is intended to be called _only_ by
":args.count.die_unless_>="().
/---

:alias_command ':void ":args.count.die_unless_>=<"(
    :int arg_count_minimum :int arg_count_maximum)'\
    '::args.count.die_unless_">=<" ${#}' <<'/---'
Throw an exception unless the caller passed a number of arguments in the passed
range to the current runnable.

== See Also ==

* :args.count.">=<"().
/---

:func_ ':void "::args.count.die_unless_>=<"(
    :int arg_count_passed :int arg_count_minimum :int arg_count_maximum)' :func{
    ':int.is_>=<' "${@[1,3]}" :or
        :die "Between [${arg_count_minimum}, ${arg_count_maximum}] arguments expected, but only ${arg_count_passed} arguments passed."
}:func <<'/---'
This private function is intended to be called _only_ by
":args.count.die_unless_>=<"().
/---

# ....................{ EXCEPTIONS ~ count : parity        }....................
:alias_command 'void :args.count.die_unless_even()'\
    '::args.count.die_unless_even ${#}' <<'/---'
Throw an exception unless the caller passed an even number of arguments to the
current runnable.

== See Also ==

* ::args.count.is_even().
/---

:func_ 'void ::args.count.die_unless_even(:int arg_count)' :func{
    :int.is_even "${arg_count}" :or
        :die "Even argument count expected, but ${arg_count} arguments passed."
}:func <<'/---'
This private function is intended to be called _only_ by
:args.count.die_unless_even().
/---

# ....................{ EXCEPTIONS ~ index                 }....................
:alias_command ':void :args.index.die_unless(:int arg_index)'\
    '::args.index.die_unless ${#}' <<'/---'
Throw an exception unless the passed integer is a valid index into the list of
arguments passed to the current runnable.

== See Also ==

* :args.index.is().
/---

:func_ ':void ::args.index.die_unless(:int arg_count :int arg_index)' :func{
    ':int.is_>=<' "${arg_index}" 1 "${arg_count}" :or :die\
        "Argument index ${arg_index} invalid (i.e., not in [1, ${arg_count}])."
}:func <<'/---'
This private function is intended to be called _only_ by
:args.index.die_unless().
/---

# ....................{ EXCEPTIONS ~ match                 }....................
:alias_command ':void :arg.die_unless_==(:str arg)'\
    '::arg.die_unless_== "${@}"' <<'/---'
Throw an exception unless the caller passed at least one argument equal to the
passed string.

== See Also ==

* :arg.is_==().
/---

# Match this glob or throw an exception. Since :arg.is_==() is an alias that has
# yet to be defined, that alias cannot be expanded here. While this could be
# corrected by defining that alias before this function, that alias is
# simplistic enough that redefining it here imposes no appreciable burden.
:func_ ':void ::arg.die_unless_==(*:str args :str arg)' :func{
    (( ${@[(ie)${arg}]} <= ${#} )) :or :die "Argument \"${arg}\" not passed."
}:func <<'/---'
This private function is intended to be called _only_ by
:arg.die_unless_==().
/---

#FIXME: Replace low-level "noglob" with high-level prototype tag "<globbable>",
#once we enable alias support for that tag.

:alias_command ':void :arg.die_unless_^=(:str/:glob glob)'\
    'noglob ::arg.die_unless_^= "${@}"' <<'/---'
Throw an exception with a stock message unless the caller passed at least one
argument matching the passed glob.

== See Also ==

* :arg.is_^=().
/---

# To avoid circular definitions, this argument is intentionally typed as ":str"
# rather than ":str/:glob".
:func_ ':void ::arg.die_unless_==(*:str args :str glob)' :func{
    (( ${@[(i)${~glob}]} <= ${#} )) :or
        :die "Argument matching \"${glob}\" expected."
}:func <<'/---'
This private function is intended to be called _only_ by
:arg.die_unless_==().
/---
