#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Argument setters* (i.e., functions both setting the argument list _and_
variables corresponding to arguments in the argument list passed to the current
callable).
/---

# ....................{ SETTERS                            }....................
#FIXME: Add example.

:alias_command ':void :args.set(*:str args)'\
    'set --' <<'/---'
Set the current argument list to all passed arguments if any _or_ clear this
list otherwise (i.e., if no arguments are passed).

In the latter case, note that :args.clear() readably achieves the same effect.

== Examples ==

.:args.set()
==========================================
[source]
------------------------------------------
$$$ :str on_superiority1=\
^^^ "Your Honor, years ago I recognized my kinship with all living beings, and"
$$$ :str on_superiority2=\
^^^ "I made up my mind that I was not one bit better than the meanest on earth."
$$$ :str on_commonality1=\
^^^ "I said then, and I say now, that while there is a lower class, I am in it,"
$$$ :str on_commonality2=\
^^^ "and while there is a criminal element I am of it, and while there is a
^^^  soul in prison, I am not free."
$$$ :func_ ':void :args.munge(:str :arg1 :str :arg2)' :func{
^^^     :stdout.echo "arg 2: ${2}"
^^^     :args.set "${on_commonality1}" "${on_commonality2}"
^^^     :stdout.echo "arg 2: ${2}"
^^^ }:func
$$$ :args.munge "${on_superiority1}" "${on_superiority2}"
arg 2: I made up my mind that I was not one bit better than the meanest on earth.
arg 2: and while there is a criminal element I am of it, and while there is a
soul in prison, I am not free.
------------------------------------------
==========================================
/---

#FIXME: Add example.
:alias_command ':void :args.clear()'\
    'argv=()' <<'/---'
Clear the current argument list.
/---

# ....................{ SETTERS ~ index                    }....................
:alias_command ':void :args.==.first.Index(:str arg :Int arg_index_name)'\
    '::args.==.first.Index "${@}"' <<'/---'
Set the integer variable with the passed name to the 1-based index of the first
argument passed by the caller (to the current callable) equaling the passed
string if any _or_ throw an exception otherwise (i.e., if the caller passed no
such argument).
/---

:func_ ':void ::args.==.first.Index(
    *:str args :str arg :Int arg_index_name) [var_name_suffix="__aefI"]' :func{
    :List.item.==.first.Index args__aefI\
        "${arg__aefI}" "${arg_index_name__aefI}" 
}:func <<'/---'
This private function is intended to be called _only_ by :args.==.first.Index().
/---

#FIXME: Refactor to :args.First_index.==_if_found() and likewise above.
:alias_command '[status=:bool] :args.==.first.Index.if_found(
    :str arg :Int arg_index_name)'\
    '::args.==.first.Index.if_found "${@}"' <<'/---'
Set the integer variable with the passed name to the 1-based index of the first
argument passed by the caller (to the current callable) equaling the passed
string if any _or_ report failure otherwise (i.e., if the caller passed no such
argument).
/---

:func_ '[status=:bool] ::args.==.first.Index.if_found(
    *:str args :str arg :Int arg_index_name) [
    var_name_suffix="__aiefif"]' :func{
    :List.Item_first_index.==_if_found\
        args__aiefif "${arg_index_name__aiefif}" "${arg__aiefif}"
}:func <<'/---'
This private function is intended to be called _only_ by
:args.==.first.Index.if_found().
/---

# ....................{ ALIASES ~ glob                     }....................
# Declare aliases for corresponding functions declared below *BEFORE* defining
# these functions, ensuring these aliases exist at function definition time. Do
# so only for the subset of these functions incestuously calling each other.
#
# Declare aliases for corresponding glob functions declared below (and hence
# prefixed by "noglob" here) *BEFORE* defining these functions, as above.

#FIXME: Add examples.
:alias_command ':void :args.^=.first.Index(
    :str/:glob arg_glob :Int arg_index_name)'\
    'noglob ::args.^=.first.Index "${@}"' <<'/---'
Set the integer variable with the passed name to the 1-based index of the first
argument passed by the caller (to the current callable) matching the passed glob
if any _or_ throw an exception otherwise (i.e., if no such argument matches).

== See Also ==

* :args.^=.first.Index.if_found().
/---

# Ideally, this function would simply defer to :args.^=.first.Index.if_found().
# Unfortunately, since zsh expands aliases prior to calling functions, doing so
# would require temporarily disabling the alias of the same name before calling
# that function, calling that function, and then reenabling that alias. In
# short, it's more unreliable trouble than its worth.
#
# Due to chicken-and-the-egg circularities, the glob passed to this function
# must typed as the generic ":str" rather than the specific ":str/:glob". The
# latter erroneously shadows this function by an alias of the same name!
:func_ ':void :args.^=.first.Index(
    *:str args :str arg_glob :Int arg_index__name) [
    var_name_suffix="__aFig"' :func{
    :List.Item_first_index.^=_if_found\
        args__aFig "${arg_index_name__aFig}" "${arg_glob__aFig}" :or
        :die 'Argument matching "'${glob__aFig}'" not found.'
}:func <<'/---'
This private function is intended to be called _only_ by
:args.^=.first.Index().
/---

:alias_command '[status=:bool] :args.^=.first.Index.if_found(
    :str/:glob arg_glob :Int arg_index_name)'\
    'noglob ::args.^=.first.Index.if_found "${@}"' <<'/---'
Set the integer variable with the passed name to the 1-based index of the first
argument passed by the caller (to the current callable) matching the passed glob
if any _or_ report failure otherwise (i.e., if no such argument matches).
/---

:func_ ':void :args.^=.first.Index.if_found(
    *:str args :str arg_glob :Int arg_index_name) [
    var_name_suffix="__aFigif"]' :func{
    :List.Item_first_index.^=_if_found\
        args__aFigif "${arg_index_name__aFigif}" "${arg_glob__aFigif}"
}:func <<'/---'
This private function is intended to be called _only_ by
:args.^=.first.Index.if_found().
/---

# ....................{ ALIASES ~ nonoption                }....................
# Define this alias *BEFORE* all subsequent functions expanding this alias.
:alias_command ':void :args.nonoptions.Count,first_index(
    :Int int_name_count :Int int_name_index_first)'\
    '::args.nonoptions.Count,first_index "${@}"' <<'/---'
Set the first passed integer variable to the number of *non-option arguments*
(i.e., arguments _not_ prefixed by `-`) the caller passed and the second passed
integer to the 1-based index of the first such argument.

== See Also ==

* :args.nonoptions.Count().
* :args.Nonoption_first_index().
/---

:func_ ':void ::args.nonoptions.Count,first_index(
    *:str argv :Int int_name_count :Int int_name_index_first) [
    var_name_suffix="__ancfi"]' :func{
#   print "count: ${int_name_count__ancfi}\nindex_first: ${int_name_index_first__ancfi}"

    # If these arguments contain "-" or "--", this index is one after the index
    # of that argument.
    :int index_first__ancfi=${@[(i)-|--]}
    if (( index_first__ancfi <= # )) {
          index_first__ancfi+=1
    # Else, this index is the index of the first argument *NOT* prefixed by "-"
    # if that argument exists or the number of these arguments otherwise.
    } else {
        index_first__ancfi=${@[(i)[^-]*]}
    }

    # Set these integers.
    :Int.set "${int_name_count__ancfi}" $(( # - index_first__ancfi + 1 ))
    :Int.set "${int_name_index_first__ancfi}" ${index_first__ancfi}
#   print "arg count: ${#}"
#   print "arg nonoption first index \"${int_name_index__sitancaif}\": ${(P)int_name_index__sitancaif}"
#   print "arg nonoption count: $(( # - ${(P)int_name_index__sitancaif} + 1 ))"
#   print "count integer name: ${int_name_count__sitancaif}"
}:func <<'/---'
This private function is intended to be called _only_ by the
:args.nonoptions.Count,first_index() alias.
/---

:alias_command ':void :args.nonoptions.Count(:Int int_name)'\
    '::args.nonoptions.Count "${@}"' <<'/---'
Set the integer variable with the passed name to the number of *non-options
arguments* (i.e., arguments _not_ prefixed by `-`) the caller passed.

== See Also ==

* :args.Nonoption_first_index().
/---

# Localize the passed argument list to the canonical ${argv} list, ensuring the
# :args.nonoptions.Count,first_index() alias expanded below accesses this list.
:func_ ':void ::args.nonoptions.Count(*:str argv :Int int_name_count) [
    var_name_suffix="__anc"]' :func{
    # Defer to the function below, discarding the value of the second integer
    # variable passed to that function. Since the implementation of that
    # function is somewhat nontrivial, this provides a somewhat "cleaner"
    # solution than reimplementing that function.
    :int placeholder__anc
    :args.nonoptions.Count,first_index "${int_name__anc}" placeholder__anc
}:func <<'/---'
This private function is intended to be called _only_ by the
:args.nonoptions.Count() alias.
/---

:alias_command ':void :args.Nonoption_first_index(:Int int_name)'\
    '::args.Nonoption_first_index "${@}"' <<'/---'
Set the passed integer variable to the 1-based index of the first *non-option
argument* (i.e., argument _not_ prefixed by `-`) the caller passed.

== Implementation ==

Specifically, set this variable to:

* If the caller passed an argument equal to `-` or `--`, one greater than the
  index of this argument. By POSIX design, these arguments prematurely terminate
  option arguments.
* Else if the caller passed at least one argument _not_ prefixed by `-`, the
  index of the first such argument.
* Else, one greater than the number of arguments the caller passed. This
  corresponds to default `zsh` behavior for the builtin list index modifiers
  `(i)` and `(I)`.
/---

# Localize the passed argument list to the canonical ${argv} list, ensuring the
# :args.nonoptions.Count,first_index() alias expanded below accesses this list.
:func_ ':void ::args.Nonoption_first_index(*:str argv :Int int_name_count) [
    var_name_suffix="__anfi"]' :func{
    :int placeholder__anfi
    :args.nonoptions.Count,first_index placeholder__anfi "${int_name__anfi}"
}:func <<'/---'
This private function is intended to be called _only_ by the
:args.Nonoption_first_index() alias.
/---

# ....................{ ALIASES ~ option                   }....................
:alias_command ':void :args.Option_last_index(:Int int_name)'\
    '::args.Option_last_index "${@}"' <<'/---'
Set the passed integer variable to the 1-based index of the last *option
argument* (i.e., argument prefixed by `-`) the caller passed _or_ 0 if no such
argument was passed.

== See Also ==

* :args.Nonoption_first_index().
/---

# Localize the passed argument list to the canonical ${argv} list, ensuring the
# :args.nonoptions.Count,first_index() alias expanded below accesses this list.
:func_ ':void ::args.Option_last_index(*:str argv :Int int_name) [
    var_name_suffix="__aoli"]' :func{
    :int nonoption_first_index__aoli placeholder__aoli

    # Index of the first non-option argument. While we could also expand the
    # :args.Nonoption_first_index() alias here, doing so gains nothing at the
    # cost of a slightly less efficient implementation. Vertigo soldiers!
    :args.nonoptions.Count,first_index\
        placeholder__aoli nonoption_first_index__aoli

    # Index of the last option argument.
    :Int.set "${int_name__aoli}" $(( nonoption_first_index__aoli - 1 ))
}:func <<'/---'
Set the passed integer variable to the 1-based index of the last option argument
in the passed argument list _or_ 0 if no such argument was passed.

This private setter is intended to be called _only_ by the
:args.Option_last_index() alias.
/---

#FIXME: In lieu of unit tests...
#function tyam() {
#    integer count index_first index_last
#    :args.nonoptions.Count,first_index count index_first
#    :args.Option_last_index index_last
#    print "args: ${*}\narg nonoption count: ${count}\narg nonoption first index: ${index_first}\narg option last index: ${index_last}\n"
#}
#function tyim() {
#    tyam
#    tyam -a
#    tyam -a a
#    tyam -a -a y
#    tyam -a a z z z
#}

# ....................{ SETTERS ~ map                      }....................
#FIXME: zparseopts() documentation is rather... dense. It'd be helpful to
#synopsize the most commonly used option specifications syntax in documentation
#below.
#FIXME: Fix example below.

# The :args.Options,Nonoptions.map_with_helpparse_specs_or_warn() function accepts a variable
# number of both arguments and options specifications. Differentiating between
# the two requires the alias expanding this function prefix the former by the
# number of arguments being passed.

:alias_command '[stdout=:str status=:bool]\
    :args.Options,Nonoptions.map_with_help(
        :Map arg_options_map_name
        :List arg_nonoptions_list_name
        +:str option_specs
        :str help_message
    )'\
    '::args.Options,Nonoptions.map_with_helpparse_specs_or_warn ${#} "${@}"' <<'/---'
Set the passed map to all *options* (i.e., arguments prefixed by `-`) in the
current argument list and the passed list to all *non-options* (i.e., arguments
_not_ prefixed by `-`) in the current argument list if all options are valid
for the passed zparseopts()-formatted options specifications _or_ print the
passed help message and report failure otherwise.

For safety, this alias does _not_ modify the current argument list to do so.

== Map Options ==

For each unique option in the current argument list (e.g.,
`--thoughtcrime="is death"`), this alias adds a corresponding key-value pair
to the passed map such that such key is the option name including `-` or `--`
prefix (e.g., `--thoughtcrime`) and such value the option value excluding
separating `=` or whitespace if the caller defined such a value or the empty
string otherwise.

For convenience, this alias silently defines zparseopts()-formatted options
specifications for options `-h` and `--help` if _not_ defined by the passed
specifications. If either such option is passed, the passed help message will be
printed.

== See Also ==

* `info zsh` followed by `i` and `zparseopts`` for further details on option
  specification usage.

== Examples ==

.:args.Options,Nonoptions.map_with_help()
==========================================
[source]
------------------------------------------
# Set command-line arguments.
$$$ :args.set -d --ad --alive 42 "glass_arm.shattering"
# Parse these arguments.
$$$ :map arg_options
$$$ :list arg_nonoptions
$$$ :args.Options,Nonoptions.map_with_help\
^^^     arg_options arg_nonoptions 'd e -ad -or: -alive::' :or :die "
Usage: doa [OPTION]... [FILE]...

Run the passed FILEs as "Dead or Alive" modules under the passed OPTIONs.

Options:
  -h, --help          print this help text and exit
  -d                  return non-zero exit status if such files fail to run
  -e                  evaluate rather than run the passed files
  --ad                switch from a Julian to Gregorian calendar
  --or DEATHS         set the maximum number of DEATHS
  --alive [LIVES]     set the starting number of LIVES (default: 3)
"'
# Print parsed options.
$$$ :stdout.echo "option \"--alive\": ${arg_options[--alive]}"
option "--alive": 42
$$$ :map.is_key arg_options "-d" :and print "option \"-d\": enabled"
option "-d": enabled
# Print parsed non-options.
$$$ :stdout.echo "${arg_nonoptions[@]}"
42 glass_arm.shattering
------------------------------------------
==========================================
/---

# Define this function manually, as zeshy's function automation justifiably
# throws exceptions for functions accepting multiple variadic arguments. While
# accepting such arguments is infeasible in the general case, this function
# circumvents that by accepting the size of its first variadic argument as its
# first scalar argument.
:func_ '[stdout=:str status=:bool] ::args.Options,Nonoptions.map_with_help(
    :int arg_count
    *:str argv
    :Map arg_options_map_name
    :List arg_nonoptions_list_name
    +:str option_specs
    :str help_message
) [is_args_unhandled]' :func{
    (( # >= 5 )) || :die\
        "Expected one argument count, zero or more arguments, one map name, one list name, one or more option specifiers, and one help string."
    :str\
        arg_count__Aonpsow=${1}\
        arg_options_map_name__Aonpsow\
        arg_options_help__Aonpsow\
        arg_nonoptions_list_name__Aonpsow\
        help_message__Aonpsow=${@[-1]}
    :list args__Aonpsow option_specs__Aonpsow
    :int.die_unless_nonnegative "${arg_count__Aonpsow}"

    # Remove the passed argument count and help message from the argument list
    # *AFTER* localizing these arguments above.
    :args.shift 1
    :args.pop 1

    # Arguments to be parsed, shifted into a local list to simplify subsequent
    # argument localization.
    args__Aonpsow=( ${@[1,${arg_count__Aonpsow}]} )
    :args.shift ${arg_count__Aonpsow}

    # Names of the argument options map and non-options list variables to be
    # set, localized *AFTER* shifting off the preceding variadic argument.
    arg_options_map_name__Aonpsow=${@[1]}
    arg_nonoptions_list_name__Aonpsow=${@[2]}
    :Map.die_unless "${arg_options_map_name__Aonpsow}"
    :List.die_unless "${arg_nonoptions_list_name__Aonpsow}"

    # Option specifications with which to parse these arguments, comprising all
    # remaining arguments.
    option_specs__Aonpsow=( ${@[3,-2]} )

    #FIXME: Actually test whether or not these specifications have already been
    #explicitly passed by the user.

    # Add options specifications for options `-h` and `--help` if *NOT* defined
    # by the passed specifications.
    option_specs__Aonpsow+=( 'h' '-help=h' )

    # Set such map by parsing options via the passed (and canonical help) option
    # specifications, preserving unparsed options for subsequent parsing by the
    # caller. If such parsing fails, print the passed help text and return from
    # the caller or script with non-zero exit status. Dismantled, this is:
    #
    # * "-D", removing *ONLY* parsed options from the current argument list.
    # * "-E", *NOT* halting parsing at the first option *NOT* matching a passed
    #   option specification, thus ignoring all unspecified options.
    # * "-M", parsing "="-prefixed substrings in option specifications as the
    #   map key to parse such option into (e.g., "-help=h" parses long option
    #   "--help" into map key ${arg_options[-h]} rather than
    #   ${arg_options[--help]}). By default, "="-prefixed substrings denote the
    #   target list or map name to parse such option into.
    # * "-A arg_options", parsing passed options into the map with the passed
    #   name. Map keys are option names (e.g., "-c", "--iapropaganda"); map
    #   values are either the values of those options if passed or the empty
    #   string otherwise
    # * "-K", preserving rather than removing existing key-value pairs in this
    #   map. This allows the caller to add defaults for unpassed options to this
    #   map *BEFORE* calling this function, which will then be preserved.
    zparseopts -M -K -E -D -A "${arg_options_map_name__Aonpsow}" --\
        "${option_specs__Aonpsow[@]}" :or {
        #FIXME: Unsurprisingly, this looks completely awkward. Contemplate.
        :warning.print 'Invalid command-line argument(s).'
        :stdout.echo "${help_message__Aonpsow}"
        :failure.report
    }

    # Set this list to all unparsed and hence non-option arguments.
    arg_nonoptions_list_name__Aonpsow=( "${@}" )

    # If a help option was passed, print this help message.
    arg_options_help__Aonpsow=${arg_options_map_name__Aonpsow}'[-h]'
    (( ! ${(P)+arg_options_help__Aonpsow} )) ||
        :stdout.echo "${help_message__Aonpsow}"
}:func <<'/---'
This private function is intended to be called _only_ by the
:args.Options,Nonoptions.map_with_help() alias.
/---
