#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Integer value testers* (i.e., functions validating integer values).
/---

# ....................{ TESTERS                            }....................
:func_ '[status=:bool] :int.is(+:str values) [is_args_unhandled]' :func{
    (( # )) || :die 'Expected one or more scalar values.'

    # For efficiency, all passed strings are concatenated into a single string
    # and then tested with a single extended glob expression. Dismantled, this
    # is:
    #
    # * "${values[*]}", concatenating these strings (each delimited by a single
    #   space) into a single string.
    # * The first mandatory integer in this string is matched with:
    #   * "('-'|)", matching an optional prefixing negative sign.
    #   * "<->", matching one or more digits. An obscure, but helpful, zsh-ism.
    # * All additional optional integers in this string are matched with:
    #   * "(' '...)#", matching zero or more space-delimited integers.
    #
    # And... that's how the maximally optimum West was won.
    :is ${*} == ('-'|)<->(' '('-'|)<->)# :si
}:func <<'/---'
Report success only if all passed strings are syntactically valid *integers*
(i.e., consist of only one optional negative sign followed by one or more
mandatory digits).
/---

# ....................{ TESTERS ~ sign                     }....................
:func_ '[status=:bool] :int.is_positive(:int value)' :func{
    (( value > 0 ))
}:func <<'/---'
Report success if the passed integer is *positive* (i.e., `value > 0`).

If this argument is _not_ an integer, an exception is thrown.
/---


:func_ '[status=:bool] :int.is_negative(:int value)' :func{
    (( value < 0 ))
}:func <<'/---'
Report success if the passed integer is *negative* (i.e., `value < 0`).

If this argument is _not_ an integer, an exception is thrown.
/---


:func_ '[status=:bool] :int.is_nonnegative(:int value)' :func{
    (( value >= 0 ))
}:func <<'/---'
Report success if the passed integer is *nonnegative* (i.e., `value >= 0`).

If this argument is _not_ an integer, an exception is thrown.
/---


:func_ '[status=:bool] :int.is_nonpositive(:int value)' :func{
    (( value <= 0 ))
}:func <<'/---'
Report success if the passed integer is *nonpositive* (i.e., `value <= 0`).

If this argument is _not_ an integer, an exception is thrown.
/---
