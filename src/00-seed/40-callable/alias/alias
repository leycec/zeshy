#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *alias definers* (i.e., functions defining aliases with bodies passed as
arbitrary strings). Note that functions declaring aliases with bodies passed as
arbitrary strings (e.g., :alias_command(), :alias_word(), :alias_command_filetype())
have already been defined by ={*-declare/*-alias}.
/---

# ....................{ DEFINERS                           }....................
:func_ ':void :alias_command.define(
    :string alias_name, :string alias_expansion)' :func{
    # If such alias already exists, throw an exception. See
    # :alias_command.is().
    (( ${+aliases[${alias_name}]} +\
       ${+dis_aliases[${alias_name}]} == 0 )) || :die\
       'Command alias '${alias_name}'() already defined:'$'\n\n'${aliases[${alias_name}]-}${+dis_aliases[${alias_name}]-}

    # Define such alias.
    :alias_command.redefine "${alias_name}" "${alias_expansion}"
}:func <<'/---'
Define the passed command alias to expand to the passed expansion. If such
alias has already been defined, an exception is thrown. See :alias_command():
e.g.,

.:alias_command.define()
==========================================
[source]
------------------------------------------
>>> :alias_command.define "propaganda = explanation" ':string.output\
...    "Israel is an embattled country. They rely very heavily on U.S. support.
...     So they have developed a very sophisticated system of propaganda. They
...     don't call it propaganda. They call it hasbarah. It is the only country
...     I know of in the world that refers to propaganda as explanation. The
...     Ministry of Propaganda is the Ministry of Explanation. The idea being
...     that our position on everything is so obviously correct that if we only
...     explain it to people, they will see that it is right."'
>>> get_string_line "$("propaganda = explanation")" -1
explain it to people, they will see that it is right.
------------------------------------------
==========================================

== Motivation ==

`zsh`\'s otherwise intuitive `=`-delimited syntax for defining aliases requires
explicitly escaping *alias-reserved characters* (e.g., `"`, `=`, whitespace) in
alias names and hence does _not_ constitute a general-purpose solution. As the
prior example demonstrates, this function suffers no such deficiencies.
/---

:func_ ':void :alias_word.define(
    :string alias_name, :string alias_expansion)' :func{
    # If such alias already exists, throw an exception. See
    # :is_alias_general().
    (( ${+galiases[${alias_name}]} +\
       ${+dis_galiases[${alias_name}]} == 0 )) || :die\
       'General alias '${alias_name}'() already defined:'$'\n\n'${galiases[${alias_name}]-}${+dis_galiases[${alias_name}]-}

    # Define such alias.
    :alias_word.redefine "${alias_name}" "${alias_expansion}"
}:func <<'/---'
Define the passed general alias to expand to the passed expansion. If such
alias has already been defined, an exception is thrown. See :alias_word()
and :alias_command.define(): e.g.,

.:alias_word.define()
==========================================
[source]
------------------------------------------
>>> :alias_word.define "dominion = balance" '
...     :string.output\
...        "People were to be happy not to the extent they dominated their
...         fellow creatures on the earth, but to the extent they lived in
...         balance with them. As a basic philosophy, the idea of political
...         power is to put technology and social structure at the service of
...         humankind, rather than the other way around."'
>>> get_string_line "$(:string.output "dominion = balance")" 1
People were to be happy not to the extent they dominated their
------------------------------------------
==========================================
/---

:func_ ':void :alias_command_filetype.define(
    :string filetype, :string alias_expansion)' :func{
    # If such alias already exists, throw an exception. See :is_alias_suffix().
    (( ${+saliases[${filetype}]} +\
       ${+dis_saliases[${filetype}]} == 0 )) || :die\
       'Suffix alias '${filetype}'() already defined:'$'\n\n'${saliases[${filetype}]-}${+dis_saliases[${filetype}]-}

    # Define such alias.
    :alias_command_filetype.redefine "${filetype}" "${alias_expansion}"
}:func <<'/---'
Define the passed suffix alias to expand to the passed expansion. If such alias
has already been defined, an exception is thrown. See :alias_command_filetype() and
:alias_command.define(): e.g.,

.:alias_command_filetype.define()
==========================================
[source]
------------------------------------------
>>> :alias_command_filetype.define epub ':string.output\
...    "In a world threatened by disintegration, in which our grand inquisitors
...     run the risk of establishing forever the kingdom of death, it [my
...     generation] knows that it should, in an insane race against the clock,
...     restore among the nations a peace that is not servitude, reconcile anew
...     labour and culture, and remake with all men the Ark of the Covenant. It
...     is not certain that this generation will ever be able to accomplish
...     this immense task, but already it is rising everywhere in the world to
...     the double challenge of truth and liberty and, if necessary, knows how
...     to :die for it without hate."'
>>> make_file "Albert Camus.epub"
>>> get_string_line "$("Albert Camus.epub")" -1
to :die for it without hate.
------------------------------------------
==========================================
/---

# ....................{ REDEFINERS                         }....................
:func_ ':void :alias_command.redefine(
    :string+nonempty `alias_name, :string `alias_expansion)' :func{
    aliases[${1}]=${2}
#   print "redefine alias name: ${alias_name__ra}"
}:func <<'/---'
Define the passed command alias to expand to the passed string, regardless of
whether such alias has already been defined. See :alias_command(): e.g.,

.:alias_command.redefine()
==========================================
[source]
------------------------------------------
>>> :alias_command.redefine "separate = ego" ':string.output\
...    "The prevalent sensation of oneself as a separate ego enclosed in a bag
...     of skin is a hallucination which accords neither with Western science
...     nor with the experimental philosophy-religions of the East â€” in
...     particular the central and germinal Vedanta philosophy of Hinduism."
>>> get_string_line "$("separate = ego")" 1
The prevalent sensation of oneself as a separate ego enclosed in a bag
>>> :alias_command.redefine "separate = ego" ':string.output\
...    "This hallucination underlies the misuse of technology for the violent
...     subjugation of man's natural environment and, consequently, its eventual
...     destruction. We are therefore in urgent need of a sense of our own
...     existence which is in accord with the physical facts and which overcomes
...     our feeling of alienation from the universe."
>>> get_string_line "$("separate = ego")" -1
our feeling of alienation from the universe.
------------------------------------------
==========================================
/---

:func_ ':void :alias_word.redefine(
    :string+nonempty `alias_name, :string `alias_expansion)' :func{
    galiases[${1}]=${2}
#   print "redefine alias name: ${alias_name__ra}"
}:func <<'/---'
Define the passed general alias to expand to the passed string regardless of
whether such alias has already been defined. See :alias_word(): e.g.,

.:alias_word.redefine()
==========================================
[source]
------------------------------------------
>>> :alias_word.redefine "horizon = anarchism" '
...    :string.output\
...    "Therefore, the subject is not whether we accomplish Anarchism today,
...     tomorrow, or within ten centuries, but that we walk towards Anarchism
...     today, tomorrow, and always."'
>>> get_string_line "$(:string.output "horizon = anarchism")" -1
today, tomorrow, and always.
>>> :alias_word.redefine "horizon = anarchism" '
...    :string.output\
...    "Anarchism is the abolition of exploitation and oppression of man by
...     man, that is, the abolition of private property and government;
...    Anarchism is the destruction of misery, of superstitions, of hatred."'
>>> get_string_line "$(:string.output "horizon = anarchism")" -1
Anarchism is the destruction of misery, of superstitions, of hatred.
------------------------------------------
==========================================
/---

:func_ ':void :alias_command_filetype.redefine(
    :string+nonempty `filetype, :string `alias_expansion)' :func{
    saliases[${1}]=${2}
#   print "redefine alias name: ${filetype__ra}"
}:func <<'/---'
Define the passed suffix alias to expand to the passed string regardless of
whether such alias has already been defined. See :alias_command_filetype(): e.g.,

.:alias_command_filetype.redefine()
==========================================
[source]
------------------------------------------
>>> :alias_command_filetype.redefine mobi ':string.output\
...    "In reality very little was known about the proles. It was not necessary
...     to know much."'
>>> make_file "George Orwell.mobi"
>>> get_string_line "$("George Orwell.mobi")" 1
In reality very little was known about the proles. It was not necessary
>>> :alias_command_filetype.redefine mobi ':string.output\
...    "So long as they continued to work and breed, their other activities
...     were without importance. Left to themselves, like cattle turned loose
...     upon the plains of Argentina, they had reverted to a style of life
...     that appeared to be natural to them, a sort of ancestral pattern."'
>>> get_string_line "$("George Orwell.mobi")" 1
So long as they continued to work and breed, their other activities
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
    # See :alias_command.redefine().
    # [[ -n ${1} ]] || :die 'Suffix alias filetype empty for expansion:'$'\n\n'${2}

    # See :alias_command.redefine().
    # [[ -n ${1} ]] || :die 'Global alias filetype empty for expansion:'$'\n\n'${2}

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :alias_word.redefine() and :alias_command_filetype.redefine().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Declare such alias. Since zsh dynamically expands aliases at their point
    # of use, alias() attempts no parsing or syntactic validation of the
    # contents of such expansion. Such redefinition should *ALWAYS* succeed.
    #
    # Note such redefinition to also be implementable with the following
    # less efficient and considerably more fragile alternative, requiring
    # characters reserved for use in alias definitions (e.g., "=") to be
    # explicitly escaped rather than merely double- or single-quoted:
    #
    #    alias_name="${alias_name//(#m)([\"=[:space:]])/\\${MATCH}}"
    #    alias -- "${alias_name}"="${alias_code}"

    # Validate sanity.
    # [[ -n ${1} ]] || :die 'Command alias filetype empty for expansion:'$'\n\n'${2}

    #FUXME: Calling alias() is of course insufficient, both here and in similar definers below; all alias-reserved characters in such alias name would
    #need to be explicitly escaped. 

    # $(alias -- "${alias_name}")

    # Localize arguments.
    # local alias_name="${1}" alias_code="${2}"

#FUXME: All such definers or redefiners have been excised from use above and
#hence may be shifted to some later parcel -- probably under
#={*-start/*-alias}.
