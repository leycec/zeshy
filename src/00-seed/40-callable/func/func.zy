#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *function declarers and definers* (i.e., functions declaring and
defining functions with bodies passed as arbitrary strings).
/---

# ....................{ DECLARERS                          }....................
#FIXME: Add examples.

:func_ ':void :func.declare[
   args=( :str func_prototype :str func_body)
   stdin=(:str func_asciidoc)]' :func{
    # Parse such prototype into corresponding globals.
    ::func_.start "${func_prototype}"

    #FIXME: Silly. Instead, generalize :func.define() and hence
    #:func.redefine() to accept a variadic list of function names rather than
    #merely one function name. Then excise such iteration here.

    # Define such functions.
    :str func_name
    for  func_name ("${ZY__FUNC_NAMES__[@]}") {
        :func.define "${func_name}" "${func_body}"
    }

    # Declare such functions *AFTER* successfully defining such functions.
    ::func_.stop
}:func <<'/---'
Declare one or more functions identified by the passed function prototype,
defined to the passed function body and documented by the help string passed on
standard input (e.g., as a here-document or -string). If any such function has
already been declared or defined, an exception is thrown.
/---

# ....................{ DEFINERS                           }....................
:func_ ':void :func.define(:str func_name :str func_body)' :func{
    :func.die_if   "${func_name}"
    :func.redefine "${func_name}" "${func_body}"
}:func <<'/---'
Define the passed function as the passed *function body* (i.e., such function's
implementation excluding `function ${function_name} () {` prefix and `}`
suffix).

If this function has already been declared, an exception is thrown.

== Motivation ==

This function is principally useful for defining functions with *dynamic
implementations* (i.e., function bodies dynamically synthesized at runtime).

Since `zsh` allows functions with names containing shell-reserved characters to
be defined by double-quoting such names (e.g.,
`function "Fisheye Placebo"() { ::stdout.echo "You are free." }`), this
function does _not_ need to be called to define functions with such names.
Interestingly, this differs from the case of defining aliases with such names;
due to undocumented subtleties, ::alias_command.define() should _always_ be
called to define these aliases.

== Examples ==

.:func.define()
==========================================
[source]
------------------------------------------
>>> :func.define "moral = choice" ':stdout.echo\
...    "With the myth of the State out of the way, the real mutuality and
...     reciprocity of society and individuals became clear. Sacrifice might be
...     demanded of the individual, but never compromise: for though only the
...     society could give security and stability, only the individual, the
...     person, had the power of moral choiceâ€”the power of change, the essential
...     function of life. The Odonian society was conceived as a permanent
...     revolution, and revolution begins in the thinking mind."
>>> get_string_line $("moral = choice") 1
With the myth of the State out of the way, the real mutuality and
------------------------------------------
==========================================
/---

# ....................{ RENAMERS                           }....................
#FIXME: Rename to :callable.rename_prototype() and shift to a new callable
#parcel -- say, ={../callable}.

:func_ ':void :rename_runnable_prototype(
    ^:str prototype_name+__rrp, :str+nonempty runnable_name+__rrp)' :func{
    :str prototype__rrp

    # Value of such variable, hopefully signifying a runnable prototype.
    prototype__rrp="${(P)string_name__rrp}"

    # If such prototype is syntactically invalid, throw an exception.
    :is ${prototype__rrp} =~\
        ${ZY_CALLABLE_PROTOTYPE_NAME_SUFFIXED_PREFIXED_PCRE} :si :or :die\
        "Runnable prototype invalid or declares two or more runnable names:${ZY_ASCII_NEWLINE}${prototype__rrp}"

    # If either such name or prefixing and suffixing substrings were *NOT*
    # captured, throw an exception.
    (( ${#match} >= 3 )) :or :die\
        "Runnable name unparsable from prototype:${ZY_ASCII_NEWLINE}${prototype__rrp}"

    # Rename such prototype.
    :Str.set\
        "${string_name__rrp}"\
        "${match[1]}${runnable_name__rrp}${match[3]}"
}:func <<'/---'
Rename the single runnable name declared by the value (i.e., runnable
prototype) of the passed string variable to the passed name.

If this prototype declares two or more names (e.g., via `{...,...}` syntax), an
exception is thrown.

== See Also ==

* :set_string_to_runnable_prototype_name().
/---
