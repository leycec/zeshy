#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Conditional function definers* (i.e., functions dynamically defining other
functions with bodies depending on current system and/or user state).
/---

#FIXME: Evenything below should be refactored from functions into macros. Until
#macro support is available, these functions probably aren't worth repairing.

#FIXME: Given the increasing versatility of function prototype parsing, the
#declarers defined below benefit increasingly less from requiring a function
#body prefix be passed. Let's ponder excising such prefix entirely, shall we? 
#Requiring an empty string be passed is rendering the codebase increasingly
#difficult to read and hence maintain. However, do *NOT* consider rendering
#such prefix optional, as we *REALLY* need to be sure all remaining passed
#arguments compose key-value map pairs.
#
#If push came to shove and there *REALLY* exists a demonstrable need in some
#functions for such prefix, we could always either:
#
#* Have such functions be declared in an anonymous function declaring string
#  locals manually interpolated into the fore of each function body. Simple.
#* Define new declarers accepting such prefix (e.g.,
#  :declare_func_with_body_prefix_if_or_noop()).
#FIXME: Naturally, the above is best done *AFTER* adding support for function
#attribute "<localize>", eliminating the last demonstrable reason to want a
#function body prefix.

# ....................{ DECLARERS                          }....................
:func.doc <<'/---'
:void :declare_func_if_or_noop[
    args = (
        :str func_prototype,
        :str func_body_prefix,
        :str if_test1, :str then_func_body1, ...),
    stdin = (:str func_doc)]

Declare and define the function identified by the passed function prototype as
the first function body whose preceding condition succeeds, prefixed by the
passed function body prefix and documented by the help string passed on
standard input (e.g., as a here-document or -string).

If all such conditions fail, success is reported without declaring, defining, or
documenting this function.

== See Also ==

* :define_func_if_or_noop().

== Examples ==

==========================================
[source]
------------------------------------------
>>> :declare_func_if_or_noop :output_refusal\
...     'die_if_args'\
...     ':is despair == life :si' ':stdout.echo "
...         I refuse to accept despair as the final response to the ambiguities
...         of history."'\
...     ':is immorality == life :si' ':stdout.echo "
...         I refuse to accept the idea that the \"is-ness\" of man''s present
...         nature makes him morally incapable of reaching up for the eternal
...         \"ought-ness"\" that forever confronts him."'\
...     ':else' ':stdout.echo "
...         I refuse to accept the idea that man is mere flotsam and jetsam in
...         the river of life, unable to influence the unfolding events which
...         surround him."' <<'/---'
... I refuse to accept the view that mankind is so tragically bound to the
... midnight of racism and war that the bright daybreak of peace and
... brotherhood can never become a reality.
... /---
>>> :func.print :output_refusal
function :output_refusal() {
    (( # )) && :die "Expected no arguments."
    :stdout.echo "
        I refuse to accept the idea that man is mere flotsam and jetsam in
        the river of life, unable to influence the unfolding events which
        surround him."
}
------------------------------------------
==========================================
/---
function :declare_func_if_or_noop() {
    die_unless_args_4_or_more\
        'Expected one function prototype, one function body prefix, and one or more pairs of one test and one function body.'
    ::declare_func_if_defined_by_func_or_noop :define_func_if "${@}"
}

:func_ ':void ::declare_func_if_defined_by_func_or_noop[
    args=(
        :str definer_func_name
        :str func_prototype
        *:str definer_func_args)
    stdin=(:str func_doc)]' :func{
    shift_args_2
    :func.die_unless "${definer_func_name}"

    # Parse such prototype into corresponding globals, throwing an exception if
    # any function such prototype declares already exists.
    ::func_.start "${func_prototype}"

    # Attempt to define these functions or silently return.
    :str func_name
    for  func_name ("${ZY__FUNC_NAMES__[@]}") {
        "${definer_func_name}" "${func_name}" "${definer_func_args[@]}" :or
            :success.report
    }

    # Declare these functions *AFTER* successfully defining these functions.
    ::func_.stop
}:func <<'/---'
Declare and define the function identified by the passed function prototype by
passing all remaining arguments to the passed high-level definer function
(e.g., :define_func_if()), documented by the help string passed on standard
input (e.g., as a here-document or -string).

If this call fails to define this function, success is reported without
declaring, defining, or documenting such function. This low-level utility
function is intended to be called only by high-level declarers (e.g.,
:declare_func_if()).
/---

# ....................{ DEFINERS                           }....................
:func.doc <<'/---'
[status=:bool] :define_func_if(
    :str func_name,
    :str func_body_prefix,
    :str if_test1, string then_func_body1, ...)

Define the passed function as the first *function body* (i.e., arbitrary code
implementing such function) whose preceding *condition* (i.e., arbitrary code
interpretable as an `if` statement test implicitly delimited by `{` and `}`)
succeeds, prefixed by the passed *function body prefix* (i.e., arbitrary code
unconditionally prepended to such function's implementation). If all such
conditions fail, success is reported without defining such function: e.g.,

.:define_func_if()
==========================================
[source]
------------------------------------------
>>> :define_func_if :output_disorder\
...     'die_if_args'\
...     ':is heathen == cynic :si' ':stdout.echo\
...         "A benighted creature who has the folly to worship something that he
...          can see and feel."'\
...     ':is mad == cynic :si' ':stdout.echo\
...         "Affected with a high degree of intellectual independence."'\
...     ':is nihilist == cynic :si' ':stdout.echo\
...         "A Russian who denies the existence of anything but Tolstoi. The
...          leader of the school is Tolstoi."'\
...     ':else' ':stdout.echo\
...         "CYNIC, n. A blackguard whose faulty vision sees things as they are,
...          not as they ought to be."'
>>> :func.print :output_disorder
function :output_disorder() {
    (( # )) && :die "Expected no arguments."
    :stdout.echo\
       "CYNIC, n. A blackguard whose faulty vision sees things as they are,
        not as they ought to be."
}
------------------------------------------
==========================================

== Else Conditions ==

This function treats any condition equal to `:else` or `true` as an *else
condition* (i.e., fallback, such that if no prior condition succeeds, the passed
function will be defined as the function body following such condition). Any
conditions following such condition will be ignored. See the example above.
/---
function :define_func_if() {
    # Localize arguments, suffixed to protect code evaluated below.
    die_unless_args_4_or_more\
        'Expected one function name, one function body prefix, and one or more pairs of one test and one function body.'
    :str\
        func_name__dfion="${1}"\
        func_body_prefix__dfion="${2}"\
        func_body__dfion
    :map test_to_func_body__dfion
    shift_args_2

    # If the number of remaining arguments is *NOT* even and hence does *NOT*
    # constitute a map, throw an exception. See :args.count.die_unless_even()
    # for further details. (Such exception handler calls the currently undefined
    # tester :int.is_even() and hence cannot be called here.)
    (( # % 2 == 0 )) :or :die\
        'Expected each test to be paired with a function body.'

    # For each paired condition and function body, test if such condition
    # succeeds and, if so, define such function as such body.
    :str test__dfion func_body_then__dfion
    for  test__dfion func_body_then__dfion ("${@}") {
        # If this condition is "else", convert this condition to "true",
        # guaranteeing this condition to succeed as desired.
        :is "${test__dfion}" != ':else' :si :or test__dfion='true'

        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Synchronize with :define_func_if_pathable().
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        # If such condition fails, such test was either syntactically invalid
        # *OR* syntactically valid and genuinely failed. Discriminate between
        # the two. In the former case, throw an exception. In the latter case,
        # skip to the next condition.
        { eval "${test__dfion}" } :=stderr.silent :or {
            # Capture this output, ignoring the expected failure.
            :str test_error__dfion; test_error__dfion=$(
                { { eval "${test__dfion}" } :=stdout } :=failure.ignore)

            # If this test failed with no error, this test is syntactically
            # valid and genuinely failed. Skip to the next command.
            :is -n ${test_error__dfion} :si :or continue

            # Else, this test is syntactically invalid. Convert this
            # nonfatal error into a fatal exception. For readability, strip the
            # prefixing "zsh: " from this error message.
            :die 'Function '${func_name__dfion}'() test "'${test__dfion}'" invalid:'${ZY_ASCII_NEWLINE}${test_error__dfion#zsh: }
        }

        # Else, this condition succeeded. Enable the corresponding body.
        func_body__dfion=${func_body_then__dfion}

        # Cease iteration.
        break
    }

    # If this body was *NOT* defined above, report failure.
    :is -n "${func_body__dfion}" :si :or :failure.report

    # Else, define this function as this body.
    :func.define "${func_name__dfion}" \
"    ${func_body_prefix__dfion}
    ${func_body__dfion}"
}
