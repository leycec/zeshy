#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: This isn't right, of course. We're declaring documentation under the
#current parcel, currently. See ={parcel} for further discussion.

:parcel <<'/---'
Document all globals, functions, and aliases declared by ={*-pcre}.
/---

# ....................{ GLOBALS ~ index                    }....................
:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ATTRS

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *attributes*
(i.e., metadata annotating such prototype with `=`-delimited key-value pairs).
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *single runnable
name*. If unspecified, such prototype instead specifies two or more names
indexed by ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAMES}.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAMES

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *list of two or
more names*. If unspecified, such prototype instead specifies a single name
indexed by ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_NAME}.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *argument list*.
If unspecified, such prototype instead specifies one or two argument channels
indexed by ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST} and/or
${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND} respectively.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_NAME

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *first argument
channel name*. If unspecified, such prototype instead specifies an argument
list indexed by ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS}.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_FIRST_ARGS

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *first argument
channel's argument list*. If unspecified, such prototype instead specifies an
argument list indexed by ${ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARGS}.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND_NAME

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *second argument
channel name*.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_MATCH_INDEX_ARG_CHANNEL_SECOND_ARGS

When parsing runnable prototypes with ${ZY__CALLABLE_PROTOTYPE_PCRE}, the
${match} index for the currently parsed prototype's optional *second argument
channel's argument list*.
/---

# ....................{ GLOBALS ~ index : arg              }....................
:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_TYPE_IS_RELAXED

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *type relaxant* (i.e., character
signifying such type to _not_ require validation throwing an exception if such
argument's value violates such type in the body of such runnable). If
specified, such argument must be manually validated.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPES

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's complete *type* (i.e., comprising all subtypes,
prefixes, and suffixes for such type, excluding the ignorable prefixing type
relaxant). While such type is technically reconstructable from its constituent
parts, capturing such type renders parser logic both simpler and more reliable.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_TYPE_IS_INDIRECT

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *type indirective* (i.e., character
signifying such argument to be a string expanding to the name of a variable of
such type). Such character is convenient shorthand for the equivalent longhand
type `:str/var+${type}`, where `${type}` is the type of the variable such
argument refers to (e.g., `:str/var+char`, equivalent to `*:char`).
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_LOCAL

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's mandatory *local subtype* (i.e., name of the alias
locally declaring such argument in the body of such runnable).
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *major subtype* (i.e., implying the name
of the function validating such argument in the body of such runnable to be
`:${subtype_major}.die_unless_${subtype_minor}` if a minor subtype is also
specified or `:${subtype_major}.die_unless` otherwise). If unspecified, such
subtype defaults to such argument's type.

== Examples ==

As example, assuming such argument's type to be `:str` and:

* No major or minor subtype to be specified, such runnable validates such
  argument by passing such argument to function :str.die_unless().
* No major subtype to be specified and minor subtype to be `nonempty`, such
  runnable validates such argument by passing such argument to function
  :str.die_unless_nonempty().
* Major subtype to be `var` and no minor subtype to be specified, such runnable
  validates such argument by passing such argument to function :Var.die_unless().
* Major subtype to be `var` and minor subtype to be `char`, such runnable
  validates such argument by passing such argument to function
  :Char.die_unless().
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MINOR

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *minor subtype* (i.e., implying the name
of the function validating such argument in the body of such runnable to be
`:${subtype_major}.die_unless_${subtype_minor}` if a major subtype is also
specified or `:${type}.die_unless_${subtype_minor}` otherwise). See
${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBTYPE_MAJOR} for further details.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_TYPE_IS_VARIADIC

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *variadicity* (i.e., substring signifying
such argument and hence function to be variadic).
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME_IS_RELAXED

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *name relaxant* (i.e., character
signifying such argument to _not_ require copying into a local variable of the
same name in the body of such runnable). If specified, such argument must be
manually localized.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_LOCAL

When parsing callable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's mandatory *local subname* (i.e., of the local
variable to which this argument will be bound in this callable's preamble).
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_PARAM

When parsing callable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *parameter subname* (i.e., of the external
parameter this argument will be referred to as in this callable's
documentation).

== Application == 

Such name applies to various contexts, including:

* Such runnable's documentation. Since neither major or minor argument subnames
  are used in documentation, such name is often used to specify human-readable,
  documentation-specific argument names.
* Such runnable's body, depending on whether major and minor argument subnames
  are also specified. Specifically, such argument will be bound to a local
  variable in such body with variable name:
** `${arg_name}` if neither subnames are specified (e.g., `nbome` for the
   argument declared `:str nbome`).
** `${arg_subname_major}` if a major but _not_ minor subname is specified
   (e.g., `nbomb` for the argument declared `:str nbome/nbomb`).
** `${arg_name}${arg_subname_minor}` if a minor but _not_ major subname is
   specified (e.g., `nbome_smiles` for the argument declared
   `:str nbome+smiles`).
** `${arg_subname_major}${arg_subname_minor}` if both subnames are specified
   (e.g., `nbomb_smiles` for the argument declared
   `:str nbome/nbomb+_smiles`).
   In this case, simply suffixing the major subname by the minor subname yields
   the same result (e.g., `nbomb_smiles` for the argument declared
   `:str nbome/nbomb_smiles`). While technically superfluous, we support
   such case for orthogonality.

Hence, such name unconditionally applies to such runnable's documentation but
only conditionally to such runnable's body (depending on whether a major
argument subname is also specified).
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_IS_ABSENTABLE

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *absentability* (i.e., character
signifying such argument to be absentable, permitting such argument to be
unpassed without requiring such argument be initialized to a default value).

== Optional Arguments ==

Absentable arguments are a simple form of *optional argument* (i.e., argument
callers may elect _not_ to pass); defaultable arguments are another. While
absentable arguments have _no_ value when unpassed, defaultable arguments are
assigned a default value when passed and hence always have _some_ value.
Absentable arguments and defaultable arguments thus signify differing
semantics, necessitating syntactic distinction.

Most high-level languages support defaultable arguments; few, however, support
absentable arguments. Thanks to the generality of `zsh` functions, `zeshy`
transparently supports both.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_DEFAULT_VALUE_IS_RELAXED

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *default value relaxant* (i.e., character
signifying such argument's default value to _not_ require copying into a local
variable of the same name in the body of such runnable if unpassed). If
specified, such argument must be manually defaulted.
/---

:global.doc <<'/---'
:int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_DEFAULT_VALUE

When parsing runnable prototype arguments with
${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *default value* (i.e., to which such
argument is initialized in the body of such runnable if unpassed).
/---

# --------------------( WASTELANDS                         )--------------------
# If specified, such subname will be hidden from this callable's documentation;
# else, this subname defaults to this argument's name. See
# ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME}.

# :global.doc <<'/---'
# :int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_MAJOR
#
# When parsing runnable prototype arguments with
# ${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
# currently parsed argument's optional *major subname* (i.e., of the local
# variable to which such argument will be bound in such runnable's body). If
# specified, such subname will be hidden in such runnable's documentation; else,
# such subname defaults to such argument's name. See
# ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME}.
# /---
#
# :global.doc <<'/---'
# :int ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_SUBNAME_MINOR
#
# When parsing runnable prototype arguments with
# ${ZY_CALLABLE_PROTOTYPE_ARGS_NEXT_PCRE}, the ${match} index for the
# currently parsed argument's optional *minor subname* (i.e., suffixing the name
# of the local variable to which such argument will be bound in such runnable's
# body). If specified, such subname will be hidden in such runnable's
# documentation; else, such subname defaults to the empty string. See
# ${ZY__CALLABLE_PROTOTYPE_ARG_MATCH_INDEX_NAME}.
# /---

#either such argument list is empty _or_ 
# If specified, such suffix will be hidden in all external documentation
# for such prototype and hence principally serves to produce more human-readable
#     argument names in such documentation.

# == Example ==
# 
# For example, assuming such argument to be declared 's name to be `serenity_painted` and name
# suffix to be `__death`, such argument's:
# 
# * Internal name in such runnable's body would be `serenity_painted__death`.
# * External name in documentation would be merely `serenity_painted`.

# * If:
#   * A major argument subname was _not_ specified, such runnable's body. If:
#     * A minor argument subname was specified,
#     In such
#     case, such argument is bound to a local variable of such name in such body.
#     (If a major argument subname _was_ specified, such argument is bound to a
#     local variable of such subname instead.)
