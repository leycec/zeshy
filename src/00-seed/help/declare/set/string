#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *string setters* (i.e., functions setting string variables).
/---

# ....................{ SETTERS                            }....................
#FIXME: Excessive example. Split in twain, please.
:func.doc <<'/---'
:void :Str.set(^:str string_name, :str... strings)

Set the passed string variable to the undelimited concatenation of all passed
strings (i.e., without separation between such strings): e.g.,

.:Str.set()
==========================================
[source]
------------------------------------------
>>> :str on_dmt on_entelechy=\
... "There's this feeling which comes over your body: half arousal, half
...  anaesthesia. The air appears to suddenly have been sucked out of the
...  room because all the colors brighten visibly, as though some intervening
...  medium has been removed. And then there's a sound, like a piece of bread
...  wrapper or cellophane being scrunched up and thrown away. A friend of
...  mine says this is radio-entelechy leaving the anterior fontanelle at the
...  top of your head."
>>> :str on_mundanity=\
... "I'm not sure I want to line up with that, but a membrane is being
...  ripped; something is being torn. And then there is a total – what
...  Mircea Eliade called in a wonderful phrase – \"a complete rupture of
...  the mundane plane.\" You know? That's like a hit and run accident except
...  the car came from hyperspace."
>>> :Str.set on_dmt "${on_entelechy}" "${on_mundanity}"
>>> get_string_line "${on_dmt}" 1
There's this feeling which comes over your body: half arousal, half
>>> get_string_line "${on_dmt}" -1
the car came from hyperspace.
------------------------------------------
==========================================
/---

:func.doc <<'/---'
:void :Str.from_stdin[
    args = (^:str string_name),
    stdin = (:str input)]

Set the passed string variable to all standard input to the current context if
such input is non-empty or throw an exception otherwise. See
:Str.from_stdin_if_nonempty(): e.g.,

.:Str.from_stdin()
==========================================
[source]
------------------------------------------
>>> :str chrome_yellow on_indignation=\
... 'The surest way to work up a crusade in favor of some good cause is to
...  promise people they will have a chance of maltreating someone. To be
...  able to destroy with good conscience, to be able to behave badly and
...  call your bad behavior "righteous indignation" — this is the height of
...  psychological luxury, the most delicious of moral treats.'
>>> :Str.from_stdin chrome_yellow <<<"${on_indignation}"
>>> get_string_line "${chrome_yellow}" -1
psychological luxury, the most delicious of moral treats.
------------------------------------------
==========================================
/---

#FIXME: Add example.
:func.doc <<'/---'
[status = :bool] :Str.from_stdin_if_nonempty[
    args = (^:str string_name),
    stdin = (:str input)]

Set the passed string variable to all standard input to the current context if
such input is non-empty or report failure otherwise. Since this function
indefinitely silently blocks until receiving *EOF* (end of file) from such
input, call this function _only_ where such input is known to succinctly
terminate (e.g., here-documents and -strings). See :stdin.is_nonempty() for
further details on ``non-empty'' standard input.
/---

:func.doc <<'/---'
:void ::Str.indent(^:str prototype_name)

Indent each line of the passed string variable by four spaces. This function is
intended to be called principally by exception handlers (e.g., ::func.die()).
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Since such function is defined considerably earlier than
#:set_var_to_stdin(), the documentation for *THAT* function should defer to the
#documentation for *THIS* function rather than the other way around.
