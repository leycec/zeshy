#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Document all globals, functions, and aliases declared by @{*-test/var}.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :Bool.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing booleans. See
:Bool.is().
/---

:func.doc <<'/---'
:void :Char.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing characters. See
:Char.is().
/---

:func.doc <<'/---'
:void :Float.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing floats. See
:Float.is().
/---

:func.doc <<'/---'
:void :Int.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing integers. See
:Int.is().
/---

:func.doc <<'/---'
:void :List.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing lists. See
:list.is().
/---

:func.doc <<'/---'
:void :Map.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing maps. See
:map.is().
/---

:func.doc <<'/---'
:void :Str.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing strings. See
:Str.is().
/---

# ....................{ EXCEPTIONS ~ metatype              }....................
:func.doc <<'/---'
:void :Number.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing numbers. See
:Number.is().
/---

:func.doc <<'/---'
:void :Scalar.die_unless(^:str var_name1, ...)

Throw an exception unless all passed variables are existing scalars. See
:Scalar.is().
/---

# --------------------( WASTELANDS                         )--------------------
# # ....................{ TESTERS                            }....................
# :func.doc <<'/---'
# [status = :bool] ::Bool.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing booleans.
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Char.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing characters.
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Float.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing floats.
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Int.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing integers.
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::List.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing lists.
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Map.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing maps.
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Number.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing *numbers* (i.e., either
# integers or floats).
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Scalar.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing *scalars* (i.e., either
# booleans, characters, integers, floats, or strings).
# /---
#
# :func.doc <<'/---'
# [status = :bool] ::Str.is(^:str var_name1, ...)
#
# Report success if all passed variables are existing strings.
# /---

# Unlike
# ::Str.is(), if any such variable does _not_ exist, failure is
# reported.
