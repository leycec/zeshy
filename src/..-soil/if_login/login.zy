#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle login shells (i.e., shells passed a first argument of "-"). Under
# Linux, login shells are typically run:
#
# * After authenticating user login credentials by...
# * A process running command "login" executed by...
# * A process running command "getty" executed by...
# * A process running command "init" executed by...
# * The current kernel.

#FIXME: Eliminate all reference to ${ZY_CORE_HELP_FUNCTIONS} by shifting
#documentation to ={*-soil/help}.

#FIXME: If compiling zeshy, this component should be sourced if not already
#sourced to ensure such functions are compiled into zeshy. Of course, this gets
#a bit tricky:
#
#* The bottom of this script calls login_zeshy(), which we don't really want to
#  happen when compiling zeshy under non-login shells.
#* When compiling zeshy under login shells, such functions will have already
#  been defined and hence not recognized for compilation. *sigh*
#FIXME: Actually, the above discussion suggests that:
#
#* This entire parcel tree should be shifted under +{if_compile}.
#* This script should be conditionally sourced by +{if_compile/dependency}
#  *BEFORE* sourcing any additional scripts if a login shell.
#* This script should no longer be sourced by +{.main}.
#* :login() should be conditionally called by startup_zeshy() *BEFORE* such
#  function calls any other startup hooks.
#
#This resolves the prior concern, as well as streamlining and simplifying the
#zeshy codebase as a whole.

# ....................{ SETTERS                            }....................
ZY_CORE_HELP_FUNCTIONS+='
:void :login()

Configure the current shell with sane defaults appropriate for login shells.
If global list ${path} and hence global string ${PATH} is non-empty, either
the current user''s `.zprofile` or system-wide `/etc/zsh/zprofile` script has
already performed such configuration, in which case this function effectively
returns immediately. Else, no prior script has performed such configuration, in
which case this function:

* Sets a default command path (i.e., global list ${path} and string ${PATH}).
* Sets a default file creation mask (i.e., `umask`).
* If `/etc/profile.env` is an existing file, sources such script. (Specific
  to Gentoo Linux-based distributions and derivative friends.)
* If `/etc/profile.d/` is an existing directory, sources all scripts under
  such directory. (Supported by most Linux distributions excluding Debian-
  based distributions, whose
  http://www.debian.org/doc/debian-policy/ch-opersys.html#s9.9[justifications]
  are largely antiquated and in any case blatantly superfluous.)
'
function :login() {
    # Validate sanity.
    (( ! # )) || :die 'Expected no arguments.'
    :str.output_if_debug 'Performing login logic.'

    # Is ${path} is empty, no prior script has configured the current shell with
    # a default login profile. Do so now. See ".zprofile" for further details.
    if (( ${#path} )) {
        ::login.configure_profile
    # Otherwise, some prior script has configured the current shell with a
    # a login profile. Since this is no guarantee that such profile is sensible,
    # attempt to fix up such profile. Specifically, append sensible paths to the
    # current ${PATH} if not already.
    } else {
        ::login.configure_path
    }
}

ZY_CORE_HELP_FUNCTIONS+='
:void ::login.configure_profile()

Configure the current shell with sane defaults appropriate for login shells,
assuming such shell has not already been configured.
'
function ::login.configure_profile() {
    # Validate sanity.
    (( ! # )) || :die 'Expected no arguments.'

    #FIXME: Could be nice to extract this into a user configuration file.
    # If the current user is effectively the superuser, set a permissive file
    # creation mask.
    if (( EUID == 0 )) {
        umask u=rwx,g=rx,o=rx
    # Else, set a restrictive file creation mask.
    } else {
        umask u=rwx,g=rx,o=
    }

    #FIXME: Such script is a Bourne shell script and hence should be sourced
    #under emulation, as performed below. We probably want to create a new
    #*ALIAS* emulate_shell_sh_locally() as follows:
    #
    #    alias emulate_shell_sh_locally='{
    #        emulate -LR sh
    #        TRAPZERR() { return $(( 128 + ${1} )) }
    #    }'
    #
    #To expand such alias safely here, we'll need to segregate the following
    #logic into a new function as follows:
    #
    #    function ::login.profile_env() {
    #        # Validate sanity.
    #        (( # == 0 )) || :die 'expected no arguments'
    #        [[ -f '/etc/profile.env' ]] || return 0
    #        emulate_shell_sh_locally
    #        source '/etc/profile.env'
    #    }
    #
    #Simple, eh?

    # If "/etc/profile.env" exists, source such script. Avoid calling
    # source_shell_script(), which implicitly appends ${FPATH} to ${PATH} and in
    # this context permanently pollutes ${PATH}.
    if [[ -f '/etc/profile.env' ]] {
        ::script_zsh.source '/etc/profile.env'
    }

    # Configure global string ${PATH} and list ${path} *AFTER* sourcing all
    # scripts expected to set default values for such globals.
    ::login.configure_path

    # If "/etc/profile.d/" exists, source all Bourne shell scripts under such
    # directory *AFTER* configuring the command path.
    ::login.source_profile_scripts
}

ZY_CORE_HELP_FUNCTIONS+='
:void ::login.configure_path()

Configure list global ${path} and string global ${PATH} with sane defaults.
'
function ::login.configure_path() {
    # Validate sanity.
    (( ! # )) || :die 'Expected no arguments.'
#   print "PATH: ${PATH}"

    #FIXME: This helpfully allows us to cleanup hard-coded references to
    #"/sbin" (e.g., "/sbin/ifconfig"). All such references should be hunted down
    #and summarily extinguished. If one thinks about it, hard-coding such
    #references is clearly a *DEPLORABLY ABOMINABLE IDEA*.

    # Append user-specific prior to system-wide paths.
    ::dir.append_to_path_if_found_or_noop "${HOME}/bin"

    # If the current user is effectively the superuser (e.g., due to temporary
    # privelage escalation), append system-wide paths in a manner conducive to
    # superuser activities. Namely, append superuser-specific prior to general-
    # purpose paths.
    if (( EUID == 0 )) {
        ::dir.append_to_path_if_found_or_noop\
            '/usr/local/sbin'\
            '/usr/local/bin'\
            '/usr/sbin'\
            '/usr/bin'\
            '/sbin'\
            '/bin'\
            '/etc/init.d'
    # Otherwise, the current user is normal. Append system-wide paths in a
    # manner conducive to normal activities. Namely, append general-purpose
    # prior to superuser-specific paths. Since the latter contain numerous
    # commands callable by normal users in a read-only manner (e.g., "ip",
    # "ifconfig"), appending such paths is critical to sane zeshy function.
    } else {
        ::dir.append_to_path_if_found_or_noop\
            '/usr/local/bin'\
            '/usr/bin'\
            '/bin'\
            '/usr/local/sbin'\
            '/usr/sbin'\
            '/sbin'
    }
}

ZY_CORE_HELP_FUNCTIONS+='
:void ::login.source_profile_scripts()

Configure the current shell with the default system-wide login profile.
Specifically, source all shell scripts under `/etc/profile.d` if such directory
exists.
'
function ::login.source_profile_scripts() {
    # Validate sanity.
    (( ! # )) || :die 'Expected no arguments.'

    # If "/etc/profile.d/" does *NOT* exist, report success.
    [[ -d '/etc/profile.d' ]] || return 0

    # Emulate Bourne shell prior to sourcing Bourne shell scripts below by
    # temporarily enabling Bourne shell options and builtins and ignoring
    # rather than throwing exceptions on non-zero exit status. See
    # run_code_under_shell() for further details.
    emulate -LR sh
    TRAPZERR() { return $(( 128 + ${1} )) }

    # Source all Bourne shell scripts under "/etc/profile.d". Since most
    # distributions also bundle csh shell scripts under such directory not
    # readily sourceable by zsh, explicitly match only Bourne scripts: e.g.,
    #
    #     # Don't do this.
    #     for profile_script ('/etc/profile.d/'*.[^.]#sh(.)) {
    local shell_script
    for   shell_script ('/etc/profile.d/'*.sh) {
        ::script_zsh.source "${shell_script}"
    }
}

# ....................{ APPENDERS                          }....................
ZY_CORE_HELP_FUNCTIONS+='
:void ::dir.append_to_path_if_found_or_noop(:str... dirnames)

Append all passed directories that both exist _and_ have not yet been added to
canonical list global ${path} and hence canonical string global ${PATH},
'
function ::dir.append_to_path_if_found_or_noop() {
    # Validate sanity.
    (( # )) || :die 'Expected one or more dirnames.'

    # Append each existing passed directory. By virtue of the prior call to
    # "typeset -U path", this implicitly avoids appending duplicate directories.
    # Dismantled, this is:
    #
    # * "(-/)", excluding passed paths that are neither extant directories or
    #   symbolic links to extant directories.
    path+=( "${@}"(-/) )
}

# ....................{ MAIN                               }....................
:login

# --------------------( WASTELANDS                         )--------------------
# excluding all directories that either do not exist or do but have already been
# appended to such globals.
# || :die "\"${shell_script}\" not sourceable"

    # local dirname
    # for   dirname ( "${@}"(-/) ) {
    #   print "appending \"${dirname}\"..."
    #     path+="${dirname}"
    # }

    #FUXME: We should only set such umasks only if the current umask remains the
    #default. If the user has changed the umask, then we clearly shouldn't change it
    #out from under them. Alternately, this should arguably be a configurable
    #option in... hmmmmm; we'd probably want a new "if_config/login", no?

    #FUXME: source_shell_script() probably shouldn't implicitly append ${FPATH}
    #to ${PATH}, which induces subtle bugs as below. Was the only reason for
    #doing this to force searches for scripts to run against both ${FPATH} and
    #${PATH}. Silly; stop doing such appending and call source_shell_script()
    #below.

        #FUXME: I hope we don't really need source_shell_script() here...
        #but suspect we do. *sigh*
#       source_shell_script "${shell_script}"
    # Store the prior ${PATH} if any for subsequent interpolation.
#   list path_old
#   if (( EUID == 0 )) and [[ -n "${ROOTPATH-}" ]]
#   then path_old="${ROOTPATH}"
#   else path_old="${path}"
#   fi

    #FUXME: Since adding "/sbin" to non-superuser paths somewhat goes against
    #the conventional Linux grain, document why we've done so. Both arguments
    #substantiante such reasoning.
    #FUXME: I've decided the whole distinction between "/bin" and "/sbin" is
    #reprehensibly lame. I admit the underlying idea to be idealistically sound,
    #but it just falls down in the real world. In the real world, where we all
    #live, *MOST* "/sbin" commands are meaningfully executable by non-superusers
    #to read (but rarely write) system-wide metadata (e.g., IP address). Hence,
    #there's no meaningful reason to omit "/sbin" from a non-superuser ${PATH}.
    #Stop doing so.
    # Conditionally append system-wide paths.

    # If the superuser, conditionally append root-specific paths.
#   is_current_user_superuser and ::dir.append_to_path_if_found_or_noop\
#       '/usr/local/sbin'\
#       '/usr/sbin'\
#       '/sbin'\
#       '/etc/init.d'

    # Append the prior $PATH.
#   path+=( "${path_old}" )

#   list path_old
#   if (( EUID == 0 )) and [[ -n "${ROOTPATH-}" ]]
#   then path_old="${ROOTPATH}"
#   else path_old="${path}"
#   fi
    # Reset ${path} and hence ${PATH}. Avoid resetting ${PATH} directly via
    # "PATH=", which prefixes ${PATH} with an empty ":" on the first "path+=".
#   path=( )

#FUXME: We really want to perform this at the topmost level -- probably in
#"src/config".
    # Configure globals.
#   startup_zeshy_login_globals
#}

# void startup_zeshy_login_globals(void)
#
# Configure globals with sane defaults derived from canonical paths.
#function startup_zeshy_login_globals() {
    # Validate sanity.
#   die_if_args

# Unlike "/etc/env.d/" shell scripts performing simple variable
    # assignments, these scripts perform more complex (and therefore time- and space-consumptive)
    # functionality. Fortunately, however, there rarely tend to be many of them.
# Numerous Linux distributions
    # programmatically aggregate this file as follows:
    #
    # * Under Gentoo, "env-update" from the files in "/etc/env.d/".
    # * Under Exherbo, "eclectic env update" from the files in "/etc/env.d/".
    #FUXME: Hmm; shouldn't we execute all executable scripts under such
    #directory rather than merely Bourne shell scripts? .
# Configure sane user defaults appropriate to the current login shell.

#startup_zeshy_login_profile_defaults
#FUXME: Replace calls to "umask" with a new set_user_mask() function defaulting
#to calling "umask -S". Actually, detect whether the input is decimal or not and
#use the corresponding option. It just makes sense!
    #FUXME: Install "colorgcc", then test. Is this path current?
#       '/usr/lib/colorgcc/bin'\
#       is_dir "${dirname}" and is_path_readable "${dirname}" and
#       is not "${PATH}" =~ "(^|:)${dirname}($|:)" si and
    # Append Zeshy's "bin/".
#   string zeshy_bin_dir="${ZY_HOME}/bin"
#   ::dir.append_to_path_if_found_or_noop "${zeshy_bin_dir}"

    # Append each command in Zeshy's "bin/command/" installed on this machine,
    # matching all subdirectories of that directory via the "(/)" modifier.
#   string zeshy_bin_command_name
#   for zeshy_bin_command_dir ("${zeshy_bin_dir}/command"/*(/)) {
#       zeshy_bin_command_name="$(get_path_basename "${zeshy_bin_command_dir}")"
#       is_installed "${zeshy_bin_command_name}" and
#           ::dir.append_to_path_if_found_or_noop "${zeshy_bin_command_dir}"
#   }
# For each passed directory name, append such name onto ${PATH} if not already
# and for which the corresponding directory exists and is readable.
    #   string shell_options=${-}
    #   set -${shell_options}
    #   unset sh

    # Export!
#   export PATH

# ....................{ GLOBALS                            }....................
#set_profile_defaults_globals() {
#    # Maximum number of lines of zsh command-line history to persist.
#    integer_global_export HISTSIZE="${HISTSIZE:-1024}"
#
#    # Maximum number of lines of zsh command-line history to retain between logins.
#    integer_global_export SAVEHIST="${SAVEHIST:-1024}"
#
#    # Absolute path of the file persisting zsh command-line history.
#    string_global_export  HISTFILE="${HISTFILE:-${ZY_DOT_DIR}/history}"
#}
