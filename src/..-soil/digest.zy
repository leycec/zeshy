#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle the current digest file.

#FIXME: Add support for zeshy upgrading: namely, if upgrading zeshy, have
#:digest_zeshy.is_outdated() immediately report success.
#FIXME: The obvious question then becomes: how do we reliably detect upgrades?
#The answer is equally obvious:
#
#* Define a new global ${ZY_VERSION} in @{main}.
#* Redefine (or ideally remove) get_zeshy_version() in terms of such global.
#* Cache such global to ${ZY_USER_DIGEST_DEPENDENCIES_FILENAME} under the
#  name ${ZY_VERSION_PRIOR}, to avoid conflicts with the existing global of
#  the same name when sourcing such file. (See @{compile} function
#  ::precompile_zeshy_cache().)
#* Have :digest_zeshy.is_outdated() do the following:
#  * After sourcing such file, append the following math comparison to the
#    existing early test of whether or not core zeshy-specific files exist:
#    (( ZY_VERSION == ZY_VERSION_PRIOR ))
#  * This will induce such function to immediately report success, triggering
#    immediate digest recompilation.
#FIXME: Oh! Cache and check the current version of zsh as well, to ensure
#recompilation on zsh upgrades as well. To do so efficiently, simply compare:
#    [[ "${ZY_VERSION}${ZSH_VERSION}" ==\
#       "${ZY_VERSION_PRIOR}${ZSH_VERSION_PRIOR}" ]]
#FIXME: Actually, we *REALLY* want to properly generalize this to provide an
#easy means of defining additional scalar globals for
#:digest_zeshy.is_outdated() to depend on. How? Well, rather than caching
#simply ${ZY_VERSION_PRIOR} and ${ZSH_VERSION_PRIOR} to
#${ZY_USER_DIGEST_DEPENDENCIES_FILENAME}, instead:
#
#* Define a new list global ${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_NAMES}
#  initialized as follows (perhaps at the top of @{compile}?):
#    ZY_USER_DIGEST_DEPENDENCY_GLOBAL_NAMES=( ZY_VERSION ZSH_VERSION )
#* Define a new scalar global ${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_VALUES}.
#  Yes, *SCALAR*. The core idea here is that, given list
#  ${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_NAMES}, both
#  ::precompile_zeshy_cache() and :digest_zeshy.is_outdated() can dynamically
#  compute the scalar value of ${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_VALUES} by
#  concatenating the individual scalar values of each such global in the same
#  order as such list. Thanks to zsh global-string-search-and-replacement, such
#  concatenation can be efficiently computed as follows:
#
#    # And thanks to flag "(e)", we shouldn't even need to run an eval()!
#    # Note use of "-", ensuring undefined globals default to the empty string.
#    ZY_USER_DIGEST_DEPENDENCY_GLOBAL_VALUES="${(e)${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_NAMES//(#m)*/\${${MATCH}-\}}}"
#* In :digest_zeshy.is_outdated(), we then simply perform a scalar comparison
#  between the cached and newly computed values of such global! Bam. Efficiency
#  incarnate and fairly simple as well (considering the complexity of what we're
#  attempting to accomplish).
#
#Completely untested, of course. But this shouldn't be too far off the mark.
#FIXME: Actually, we don't need to serialize
#${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_NAMES} to disk. Since such list is
#unlikely to change anytime soon, just initialize such list as above in this
#parcel. Naturally, we'll still have to serialize the scalar global
#${ZY_USER_DIGEST_DEPENDENCY_GLOBAL_VALUES}, but that's no great trouble.
#FIXME: Name such string ${ZY_USER_DIGEST_DEPENDENCY_SCALAR_VALUES}.
#Comparing non-scalar globals should be feasible as well, but somewhat more
#involved.
#FIXME: Also persist string global ${PATH}, for obvious reasons. To generalize
#such logic and eliminate unwanted redundancy, define the following setter:
#
#function ::set_string_to_zeshy_user_digest_dependency_scalar_values() {
#    # Validate sanity.
#    (( # == 1 )) || :die 'Expected one string name.'
#    local string_name__sstzuddsv="${1}"
#
#    # If such variable does not exist or is not a string, throw an exception.
#    # See :die_unless_string() for further details.
#    [[ "${(tP)string_name__sstzuddsv-}" == 'scalar'* ]] || :die\
#        'Variable ${'${string_name__sstzuddsv}'} not found or not a string.'
#
#    # Set such string. See :set_string_to_string() for further details.
#    : "${(P)${string_name__sstzuddsv}::=${ZSH_VERSION}${ZY_VERSION}${PATH}}"
#}
#
#Great! Then call such setter from both :digest_zeshy.is_outdated() and
#::precompile_zeshy_cache(). (Done.)

#FIXME: O.K.; great! But we want to permit a second sort of upgrade path as
#well: github-based updates. Indeed, if github activity is any indicator, this
#will (at least initially) be the primary way that initial users interact with
#zeshy. So we need to support that. But how? It's not quite so simple, of
#course. But it shouldn't be *HIDEOUSLY* infeasible. Succinctly:
#
#* Add a new string global ${ZY_GIT_REVISION} to @{main}.
#* Add a new git commit hook on commits to branch "master". (Important! Only for
#  commits to such branch.) To do so both portably and reliably, we'll probably
#  want to implement such hook as a low-level zsh script performing the
#  following actions:
#  * Get the revision of such commit to string local ${current_revision}. (No
#    idea; git must supply such metadata to commit hooks, yes? Perhaps as passed
#    arguments or environment variables?)
#  * Run:
#    sed -ie 's~^\(ZY_GIT_REVISION=\)~\1'${current_revision} src/main
#  Indeed, such script appears simple enough to perhaps be a Bourne shell
#  script. *shrug*
#* Cache such global to ${ZY_USER_DIGEST_DEPENDENCIES_FILENAME} under the
#  name ${ZY_GIT_REVISION_PRIOR}.
#* Have :digest_zeshy.is_outdated() perform the following comparison:
#    [[ "${ZY_VERSION}${ZY_GIT_REVISION}" ==\
#       "${ZY_VERSION_PRIOR}${ZY_GIT_REVISION_PRIOR}" ]]
#  Note the single efficient comparison, which is nice.
#
#O.K.; so, that gets us all of the way. It still requires users to manually
#update git... but, hey! It works, anyway. As a first-draft implementation, we
#could certainly do worse.
#FIXME: Wait! We neither need nor want ${ZY_GIT_REVISION_PRIOR} and hence the
#above alteration, since :digest_zeshy.is_outdated() already (reasonably
#efficiently) tests the current zeshy codebase for changes. Indeed, the whole
#${ZY_GIT_REVISION_PRIOR} concept is fairly poor once you realize that zeshy
#developers will often be working on feature branches.
#FIXME: Fortunately, there *IS* a dramatically improved solution for
#accomplishing automatic git-based updates. We'll want to eventually have zeshy
#check at least daily (well, on a user-configurable schedule anyway) for
#updates. The first question that needs to be resolved before even *GETTING* to
#update automation and scheduling, however, is how to actually non-interactively
#update the git repository containing ${ZY_HOME}. While simple in the common
#case of the user *NOT* having made changes to such repository, in the general
#case such repository's "master" branch may have diverged from "origin/master".
#In such case, it would be incredibly rude to overwrite the former with the
#latter. The following google search terms were helpful in researching this:
#
#    "git check shell script update"
#
#Naturally, stackoverflow.com answers appear to be the most helpful. We want to
#adopt the solution minimizing the number of subshells required to (ideally)
#only one command substitution. The canonical answer appears to have been
#provided in 2010:
#
#    http://stackoverflow.com/questions/3258243/git-check-if-pull-needed
#
#The solution (which isn't precisely spelled out, as different scripts have
#different requirements) is as follows:
#
#* Temporarily "cd" to such such repository.
#* Run "command git fetch origin". This is *GUARANTEED* to be non-destructive;
#  it only fetches (*NOT* pulls, which both fetches and merges) remote changes
#  into the remote tracking branch "origin/master".
#* Save the name of the current local branch, as we're about to change it! We
#  have existing functionality to get such name, happily.
#* Switch to local branch "master", if not already. This shouldn't be terribly
#  hard; if we recall correctly, this should do it: command git checkout -b master
#* Capture the output of "command git status -s -u no". This is also
#  non-destructive. It simply prints a single line of output if and only if the
#  current and remote branches have diverged, requiring only a simple test for
#  emptiness.
#* Revert back to the prior branch. We stored the name above, so this is simple.
#
#So that gets us half the way there. If the "git status" command above succeeds,
#there's no need for a merge. Great! Else, we need to merge. I'm a bit fuzzier
#here on what the best way to proceed then is. More research, alas.
#FIXME: We might be able to avoid all of the branch switching for merely
#checking branch status with the following:
#
#    :str git_log
#    :store_dir "${ZY_HOME:h}"
#    :try{
#        :die_unless_git
#        # Note that "git remote update origin/master" and "git fetch origin master" are
#        # functionally synonymous, but that the former is increasingly
#        # considered obsolete, now that the latter subsumes all functionality
#        # previously relegated to the former. In any case, just use "fetch". :)
#        command git fetch origin master
#        git_log="$(command git log HEAD..origin/master --oneline)"
#        if { :is_string_nonempty "${git_log}" } {
#            # Temporarily switch to "master" here.
#            ...
#
#            # Test whether "master" is fast-forwardable.
#            :str revision_master revision_origin_master
#            revision_master="$(git rev-parse master)"
#
#            # If "master" is fast-forwardable, do so silently. This will be the
#            # common case for non-developers. Basically, this tests whether or
#            # the current local revision is a direct ancestor of the current
#            # remote revision.
#            if is "$(command git merge-base origin/master "${revision_master}")" ==\
#                "${revision_master}" si {
#                #FIXME: Actually, print out a message notifying the user that
#                #we're successfully upgrading zeshy.
#                command git merge
#            # Else, the local and remote repositories have diverged. Ask the
#            # the current user whether a merge should be attempted.
#            } elif { :is_query\
#                "Upgrade available, but zeshy has been changed locally. Merge such changes?" } {
#                #FIXME: So far so good, but how do we respond if such changes
#                #require manual merging? In such case, we should probably
#                #inform the user of a simple zeshy function to be called that
#                #destructively erases all changes and reverts HEAD to the HEAD
#                #of the remote tracking branch. (Useful for users who
#                #accidentally touch the zeshy codebase and need to get back to
#                #a working version.)
#                command git merge
#            }
#        }
#    }:always{
#       :restore_dir
#    }:
#
#We'll want to define a new :is_query() function, reporting success if the
#current user responds affirmatively. Dead simple! Probably just rename
#:is_query_char_yes() to :is_query(), we should think. Yes?
#
#Yes! The contents of the "if" is where things get tricky; that's where we'll
#need to temporarily switch branches (possibly?), run "command git merge", and
#go from there. But everything else above should work reliably. Ya! We should
#note that all the above functionality within the ":try{...}" should be shifted
#into a single new function :merge_git_origin_master().
#FIXME: [Ed. note: the method below is *GREAT* and should certainly be
#abstracted into a new function :is_git_mergeable_sans_conflict(), but really
#doesn't apply to the current situation. Why? Because developers should only
#ever work on feature branches -- *NEVER* on "master". That means that if we
#ever detect a situation in which the zeshy codebase has changed but the changes
#are not fast-forwardable, we should basically throw a fatal exception and
#inform the user that they're doing something terrible that's likely to result
#in merge conflicts and hence an unusable zeshy.]
#
#Sweet, as for the interior code above, we've obtained a concised method
#for determining whether a non-fast-forwardable merge is likely to produce
#conflicts. Check this awesomeness, run *AFTER* performing the fetch:
#
#    # If conflicts exist, print a warning.
#    :str revision_common
#    revision_common="$(git merge-base FETCH_HEAD master)"
#    if is "$(command git merge-tree "${revision_common}" FETCH_HEAD master)" ==\
#        (|*"${ZY_ASCII_NEWLINE}")"changed in both"* si {
#        :warning.print "Found merge conflicts! Really merge changes? If "yes", such conflicts must be manually resolved before restarting zeshy. If you are not a zeshy developer, consider responding \"no\" here and immediately running the following command:
#    :revert_zeshy_changes"
#    # Else, go ahead with the merge silently.
#    } else {
#        command git merge
#    }
#
#"git merge-tree" runs a non-destructive merge *IN MEMORY* and outputs a diff of
#all prospective changes to be applied. Awesome, no? Apparently, git prefixes
#all conflicting code with the canonical string "changed in both". Excellent.
#FIXME: Completely unrelated, but consider renaming ${ZY_ASCII_NEWLINE} to
#${Znewline}. Likewise for the other character constants.
#FIXME: Implement a new :is_string_line_prefix() function. Given that, then the
#above could be implemented as:
#
#    if { :is_string_line_prefix\
#        "$(command git merge-tree "${revision_common}" FETCH_HEAD master)"\
#        "changed in both" } {
#FIXME: Oh! Actually, it appears git outputs "changed in both" on a distinct
#line, reducing such conditional to:
#
#    if { :is_string_line\
#        "$(command git merge-tree "${revision_common}" FETCH_HEAD master)"\
#        "changed in both" } {
#FIXME: Incidentally, we probably want a new :is_zeshy_git() function reporting
#success if ${ZY_HOME} resides in a git repository. To implement this, recall
#that we've already implemented :is_path_git(), so just call:
#
#    function :is_zeshy_git() {
#        :is_path_basename_equals "${ZY_HOME}" src and
#           :is_path_git "${ZY_HOME}"
#    }
#
#Naturally, we'll need to implement :is_path_basename_equals(). Simple, though.
#FIXME: [Note: Old commentary, but probably still retains some applicability.]
#
#We really need to interactively usher the current user into the upgrade
#process on zeshy upgrades. To do so, consider a new difference_files() command
#invoking some underlying "vimdiff" (only if the current EDITOR == "vim"),
#"diff", and so on command to diff the user's current config against zeshy's
#new config. I have two thoughts on this:
#
# 1. We could avoid all diffing by having the user write into a "config.local"
#    or "config-local" file in "~/.zeshy" rather than "config". (Actually, why
#    not let it just be their choice?) O.K.; so, here's how we roll:
#    * When rewriting the zeshy version file, stamp the zeshy config file with
#      the same mtime.
#    * If the zeshy version file is ever outdated (i.e., zeshy was upgraded),
#      compare the mtime of that file with that of the zeshy config file. If
#      the latter is newer, the user modified it, so we need to run a diff;
#      otherwise, silently delete the zeshy config file and let zeshy re-
#      fabricate it for us.
#    * The user can opt to always have such config file silently deleted by
#      simply always using "config.local", instead. The downside is that
#      global variables may change names and they won't necessarily notice
#      immediately. (Or other such desynchronizations.) But probably worth it.
#    * zeshy Global will need to look for "config.local" and, if extant,
#      source it *AFTER* sourcing "config". Fairly simple, eh?
#
#Here's an existing function prototype for such upgrading:
#
#:func.doc <<'/---'
#void startup_zeshy_version(void)
#
#Ensure the cached zeshy version corresponds to the current zeshy version. If
#not, interactively usher the current user into the upgrade process.
#/---
#function startup_zeshy_version() {
#    # Validate sanity. If ignoring zeshy's user directory, return silently.
#    die_if_args
#}

#FIXME: It's not *IMMEDIATELY* pressing, but there probably exist race
#conditions in the event two zeshy shells startup at a similar time and the
#digest file requires recompilation. We should probably perform advisory file
#locking (see "path/database/kvs/dir", I believe, for relevant documentation) on
#the *DIGEST FILE* itself. Basically, if such file is locked, then some other
#zeshy shell is (hopefully) compiling zeshy. Such file should be locked... when?
#Well, for true atomicity, we'd probably need each zeshy shell to lock the
#digest immediately before calling :digest_zeshy.is_outdated() and unlock the
#digest immediately after either compiling such digest (or if not compiling such
#digest immediately after calling :digest_zeshy.is_outdated()). This effectively
#serves as a critical section -- and, yes, if you think about it, we do need to
#lock before calling :digest_zeshy.is_outdated(). Why? Because if the digest is
#in fact locked, we must check for such lock and hence determine whether or not
#the digest is currently locked and hence being compiled *BEFORE* testing such
#digest's mtime. (Fairly obvious, I suppose.)
#FIXME: Naturally, only lock the digest file if it actually exists. If it
#doesn't exist, then it's effectively "unlocked."
#FIXME: This means we'll need to shift file locking functionality to this
#parcel. *shrug*
#FIXME: Nice! We've already investigated how to implement such locking in zsh.
#See @{*-main/path/database/kvs/kvs}. (Great.)

#FIXME: The resolution of ${ZY_USER_DIGEST_FILE_DEPENDENCY_NEWEST_MTIME}
#should be improved from seconds to nanoseconds on systems supporting the latter
#(e.g., BSD, Linux). Happily, this can be efficiently obtained as a float from
#"date" with the command:
#
#   >>> date +'%s.%N'
#   1369342075.472940831
#
#Naturally, this is sufficiently useful to be generalized into a new function
#get_time_second_nanosecond() (whose name complies with "os/time" nomenclature).
#FIXME: Retrieving file modification time denominated in nanoseconds isn't quite
#as simple, unfortunately. We have an algorithm for doing so at "path/time",
#which we'll need to move here. Both implementations are (probably) Linux-
#specific. So, we'll also need to move the is_pathable_gnu() function here. I
#know, I know; but it's really quite unavoidable.
#FIXME: *UGH*. We *ALREADY* have the current time as a float in global
#${ZY_TIME_START}. Hence, replace our current calling of "date"
#below with simple expansion of such global.
#FIXME: We already implement get_time() to return fractional seconds, so no
#additional work needed there.
#FIXME: We will still need to shift functionality here for getting fractional
#file time. However, since zsh will (eventually) obsolete such functionality by
#improving zstat(), this isn't really a significant long-term concern.
#FIXME: Actually, it's sort of important. Who knows when, if ever, zsh will
#officially add such functionality. Shift such fuctionality into the new
#@{inspect} parcel.

# ....................{ DEPENDENCIES                       }....................
::script_zsh.source inspect

# ....................{ GLOBALS                            }....................
typeset -g\
    ZY_USER_DIGEST_FILENAME\
    ZY_USER_DIGEST_DEPENDENCIES_FILENAME
typeset -gUa ZY_USER_DIGEST_DEPENDENCY_PATHNAMES

# ....................{ ADDERS                             }....................
# void add_zeshy_digest_dependency_path(string pathname1, ...)
function add_zeshy_digest_dependency_path() {
    (( # )) || :die 'Expected one or more paths.'
    ZY_USER_DIGEST_DEPENDENCY_PATHNAMES+=( "${@}" )
}

# ....................{ TESTERS                            }....................
# [status = :bool] :digest_zeshy.is_outdated()
#
# Previously, this function implicitly set global
# ${ZY_USER_DIGEST_FILE_DEPENDENCY_NEWEST_MTIME} to the ctime (i.e., change
# time) of the newest path the current digest file depends upon.
# ::digest_zeshy_compile() then explicitly changed the ctime of such digest file
# after compiling such file. Why? We mistakenly believed that if the ctime of
# such file is *NOT* the exact ctime of the newest path such file depends upon,
# then :digest_zeshy.is_outdated() would report such file to be outdated.
# However, a cursory read of :digest_zeshy.is_outdated() shows this *NOT* to be
# the case. To ensure such function reports recently compiled digest files to be
# up-to-date, it merely suffices to ensure that the ctimes of such files are as
# or more recent than those of their dependencies.
#
# However, assuming system time and such ctimes to be sane, this is *ALWAYS*
# already the case. Compiling a digest file either creates a new file or
# modifies the contents of an existing file. In either case, the modification
# time of such file will effectively be the current system time and hence almost
# always more recent than those of its dependencies. Where this is *NOT* the
# case, either the current system was installing or uninstalling software *OR*
# the current user was editing one or more configuration files during digest
# compilation. In either case, such behavior will induce two unavoidably
# consecutive digest recompilations. Since this is hardly the worst thing that
# could happen and -- all things considered -- probably the best, current edge-
# case behavior is altogether acceptable.
#
# In summary: the best thing to do with respect to digest file ctime is nothing.
function :digest_zeshy.is_outdated() {
    # Validate sanity.
    (( # == 0 )) || :die 'Expected no arguments.'
    local   digest_dependency_ctimes
    integer digest_dependency_newest_ctime digest_file_ctime

    # List of ctimes (i.e., change times) of all paths such digest depends upon.
    local -a digest_dependency_pathnames

    # If the current digest file or one or more zeshy-specific files or
    # directories such file depends upon does *NOT* exist, report such digest
    # file to be outdated. This is *NOT* merely an optimization. In the latter
    # case, such missing files or directories will be implicitly recreated as a
    # beneficial side effect of digest compilation.
    #
    # To ensure empty configuration directories trigger recompilation, test for
    # the existence of a well-known non-optional subdirectory of the current
    # configuration directory rather than merely such directory.
    [[  -f "${ZY_USER_DIGEST_FILENAME}" &&
        -f "${ZY_USER_DIGEST_DEPENDENCIES_FILENAME}" &&
        -d "${ZY_USER_CONFIG_DIRNAME}/00-core" ]] || {
        digest_dependency_newest_ctime="$(command date +'%s')"
        :stdout.echo_if_debug "Digest ctime: ${digest_dependency_newest_ctime}"
        return 0
    }

    # Append all directories in the current user's ${PATH}, triggering
    # recompilation on installation and uninstallation of commands.
    digest_dependency_pathnames+=( "${path[@]}" )

    # Source the file to which zeshy previously cached the list of all
    # extraneous files and directories other parcels insist the current digest
    # file depends upon.
    ::script_zsh.source\
        "${ZY_USER_DIGEST_DEPENDENCIES_FILENAME}"

    # Append all such files and directories, triggering recompilation on
    # modification of such paths.
    digest_dependency_pathnames+=(
        "${ZY_USER_DIGEST_DEPENDENCY_PATHNAMES[@]}" )

    # Append the newest file or subdirectory of the current configuration
    # directory, triggering recompilation on configuration changes. Dismantled,
    # this is:
    #
    # * "${...}"/**/*, matching all configuration files and directories.
    # * "(#qoc...)", sorting such files and directories by descending ctime.
    # * "[1]", expanding to only the first and hence newest such path.
    digest_dependency_pathnames+=(
        "${ZY_USER_CONFIG_DIRNAME}"/**/*(#qoc[1]) )

    # Append the newest file or subdirectory of the current user overlay
    # directory, triggering recompilation on overlay changes.
    digest_dependency_pathnames+=(
        "${ZY_USER_OVERLAY_DIR}"/**/*(#qoc[1]) )

    # If CLI option "--compile-digest-if-zeshy-changed" was passed, append:
    #
    # * The path of the topmost directory of the current zeshy codebase.
    # * The path of the newest file or subdirectory in such directory.
    if (( ZY_USER_DIGEST_FILE_IS_DEPENDENT_ON_ZY_HOME )) {
        digest_dependency_pathnames+=(
            "${ZY_HOME}"
            "${ZY_HOME}"/**/*(#qoc[1])
        )
    }

    # Filter nonextant files and directories from such list. To preserve path
    # quoting, such operation *MUST* be performed in a list context and hence
    # *NOT* inlined below. Note such operation implicitly preserves path quoting
    # without requiring double quoting here.
    digest_dependency_pathnames=( ${^digest_dependency_pathnames}(#q) )

    # Newline-delimited string list of the ctimes of all such dependencies (in
    # arbitrary order). Dismantled, this is:
    #
    # * "-N", outputting only ctimes. By default, zstat() outputs a human-
    #   readable two-column table when passed multiple files: e.g.,
    #   "inconceivable        1386576475
    #    dread_pirate_roberts 1368426799"
    #   Passing this option reduces the above output to:
    #   "1386576475
    #    1368426799"
    digest_dependency_ctimes="$(zstat +ctime -N\
        "${digest_dependency_pathnames[@]}")"

    # ctime of the newest such dependency. Dismantled, this is:
    #
    # * "(Onf)", splitting such string list on newline and sorting the resulting
    #   words numerically in descending order.
    # * "(w)1", expanding to the first such word.
    #
    # While sorting such list is technically O(n lg(n)), such sort should be
    # approximately O(n) assuming non-pathological edge cases (e.g., ${PATH}
    # containing an absurd number of entries).
    digest_dependency_newest_ctime="${${(Onf)digest_dependency_ctimes}[(w)1]}"

    # ctime of such digest file, ensured to exist by above. To minimize race
    # conditions, delay such operation as long as possible.
    digest_file_ctime="$(zstat +ctime "${ZY_USER_DIGEST_FILENAME}")"

    # If either the current digest file or its newest dependency is newer than
    # the current time, print a nonfatal warning and (for safety) signify such
    # digest file to be outdated by reporting success. This usually only occurs
    # under hardware malfunction (e.g., lightning-based CMOS resets).
    if (( digest_file_ctime > EPOCHREALTIME ||\
          digest_dependency_newest_ctime > EPOCHREALTIME )) {
        # Print such warning depending on which error condition occurred.
        {
            if (( digest_file_ctime > EPOCHREALTIME )) {
                print "zeshy: Digest change time ${digest_file_ctime}s newer than current time ${EPOCHREALTIME}s."
            } else {
                print "zeshy: Newest digest dependency change time ${digest_dependency_newest_ctime}s newer than current time ${EPOCHREALTIME}s."
            }

            print "zeshy: Consider calling set_time_with_ntp() to properly set the current time."
        } 2>&1

        # Since the current time is in an indeterminate state, force digest
        # recompilation by reporting such digest file to be outdated.
        return 0
    }

    # If debugging, output such ctimes.
    :stdout.echo_if_debug "Digest ctime:                   ${digest_file_ctime}"
    :stdout.echo_if_debug "Digest newest dependency ctime: ${digest_dependency_newest_ctime}"

    # Such digest file is outdated if older than its newest dependency.
    (( digest_file_ctime < digest_dependency_newest_ctime ))
}

# ....................{ SETUP                              }....................
# :void ::digest_zeshy()
function ::digest_zeshy() {
    (( ! # )) || :die 'Expected no arguments.'

    # Inspect the current system for high-level metadata on which the choice of
    # current digest file depends (e.g., operating system, display server).
    ::digest_zeshy_inspect

    # If the current digest file is outdated or the caller requests such file
    # be recompiled regardless of whether it's outdated or not, compile all
    # zeshy functions applicable to the current user into such digest and
    # render such functions autoloadable. See "main" for declaration of the
    # latter condition, ${ZY_USER_DIGEST_FILE_IS_INDEPENDENT}.
    #print "detecting \"${ZY_USER_DIGEST_FILENAME}\"..."
    if { :digest_zeshy.is_outdated ||
        (( ZY_USER_DIGEST_FILE_IS_INDEPENDENT )) } {
        ::digest_zeshy_compile
    # Else, attempt to autoload the previously compiled digest for the current
    # user. If this fails, (re)compile such digest and try again.
    } elif { ! ::digest_zeshy_load_or_fail } {
        ::digest_zeshy_compile
#       print "autoloading \"${ZY_USER_DIGEST_FILENAME}\"..."
    }

    # Prefix the function path with the absolute path to such digest, ensuring
    # zsh searches such file first for definitions of undefined functions.
    fpath=( "${ZY_USER_DIGEST_FILENAME}" "${fpath[@]}" )
}

# void ::digest_zeshy_inspect(void)
function ::digest_zeshy_inspect() {
    (( ! # )) || :die 'Expected no arguments.'
    local digest_dirname

    # System-specific directory containing the current digest file, guaranteeing
    # digest recompilation on migration to new systems.
    digest_dirname=${ZY_USER_DIGEST_ROOT_DIRNAME}'/'${ZY_SYSTEM_ID}

    # The absolute paths of the current digest file depends on whether this is a
    # debug or release build of zeshy. Why? :line.run_if_debug() expands to
    # the passed code in the former case and to the comment prefix ignoring such
    # code in the latter. In either case, such alias' expansion directly depends
    # on corresponding CLI options. Since functions expand aliases at function
    # definition rather than call time, all functions expanding such alias
    # compiled into the current digest file (and hence such file itself) depend
    # on the exact same CLI options.
    #
    # Such complexity demonstrates why defining aliases in terms of CLI options
    # is generally a terrible idea. In this case, however, such aliases are
    # essential to optimizing away debug logic from release code.
    if { :debug.is } {
        ZY_USER_DIGEST_FILENAME=${digest_dirname}'/debug.zwc'
    } else {
        ZY_USER_DIGEST_FILENAME=${digest_dirname}'/release.zwc'
    }

    # System-specific file caching the list of all extraneous files and
    # directories such digest file depends upon.
    ZY_USER_DIGEST_DEPENDENCIES_FILENAME=${digest_dirname}'/dependencies.zsh'
}

# :void ::digest_zeshy_compile()
function ::digest_zeshy_compile() {
    (( ! # )) || :die 'Expected no arguments.'

    # Compile such digest. To permit recovery on compilation errors:
    #
    # * Call ::script_zsh.source_or_fail() rather than the customary call to
    #   ::script_zsh.source().
    # * Print a non-fatal warning.
    # * Attempt to autoload the previously compiled version of such digest (if 
    #   any). This requires no manual intervention on our part, happily.
    ::script_zsh.source_or_fail ${ZY_BOOTSTRAP_DIRNAME}'/if_compile/compile' ||
        :warning.output 'Digest "'${ZY_USER_DIGEST_FILENAME}'" uncompilable.'

    # Load such digest.
    ::digest_zeshy_load
}

# ....................{ LOADERS                            }....................
# :void ::digest_zeshy_load()
#
# Declare all functions defined by the digest file to be autoloadable.
function ::digest_zeshy_load() {
    (( ! # )) || :die 'Expected no arguments.'
    ::digest_zeshy_load_or_fail || :die\
        'Digest "'${ZY_USER_DIGEST_FILENAME}'" not found or not autoloadable.'
}

# :void ::digest_zeshy_load_or_fail()
#
# Declare all functions defined by the digest file to be autoloadable if
# feasible or report failure otherwise.
function ::digest_zeshy_load_or_fail() {
    (( ! # )) || :die 'Expected no arguments.'
#   print "autoloading \"${ZY_USER_DIGEST_FILENAME}\"..."
    autoload -w -- "${ZY_USER_DIGEST_FILENAME}" || return ${?}
}

# ....................{ MAIN                               }....................
::digest_zeshy
