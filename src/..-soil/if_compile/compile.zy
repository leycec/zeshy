#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# (Re)compile the `zeshy` codebase into the current user's `zeshy` digest file.

# ....................{ DEPENDENCIES ~ zsh                 }....................
# Load all zsh modules required by this parcel or parcels this parcel sources.
# Since this only applies to digest file compilation, we still retain autoload
# declarations for all such modules in @{zsh/module}.

# Bind "libpcre" functions to zsh builtins, thus exposing Perl-compatible
# Regular Expression (PCRE) functionality during digest file compilation. In
# particular, alias and function declarations require such functionality for
# matching the admittedly obtuse prototype syntax prefixing help strings.
zmodload zsh/pcre

# ....................{ DEPENDENCIES ~ zeshy               }....................
# Source all zeshy parcels *NOT* intended to be compiled into the digest file.
# For simplicity, this is exactly the set of all zeshy scripts in subdirectories
# of the current directory sourced in lexicographic order.
#
# Parcels intended to be compiled into the digest file (e.g., @{finalize}) are
# sourced below after cataloguing the set of all currently defined operables.
::script_zsh.source "${ZY_SCRIPT_DIRNAME}"/*/**/*.zy

# ....................{ GLOBALS                            }....................
# Lists of all zeshy-specific aliases, functions, and globals. Defining such
# lists globally:
#
# * Implicitly exports such lists to child shells, which on receiving such
#   globals may use their contents to undefine aliases, functions, and other
#   globals imported from the parent shell.
# * Permits us to undefine such globals in a global context below. See the
#   tail of this file.
#
# zsh treats suffix aliases differently from normal and global aliases, so
# differentiate the former from the latter.
typeset -gaU\
    ZY__ALIAS_NAMES\
    ZY__ALIAS_SUFFIX_NAMES\
    ZY__FUNCTION_NAMES\
    ZY__GLOBAL_NAMES\
    ZY__HOOKS_RUN_ON_ZY_PRECOMPILE


#FIXME: After renaming *ALL* zeshy scripts to have filetype ".zy", excluding
#non-zeshy scripts will become both considerably simpler and more reliable.
#Indeed, one pleasant side effect of doing so is that we may then litter the
#codebase with plaintext "README" files intended for developer eyes only.

ZY__HELP_GLOBALS+='
Extended glob expression matching the basenames of all zeshy scripts in the
current directory.
'
# Dismantled, this is:
#
# * "*", matching all paths except...
# * "~*.swp", excluding "vim"-specific cache files.
# * "(-.)", a glob qualifier such that:
#   * "-", transitively resolving all symbolic links to their targets.
#   * ".", matching only non-directory files *AFTER* resolving symbolic links.
typeset -g ZY__SCRIPT_FILENAME_GLOB='*~*.swp(-.)'

# ....................{ RUNNERS                           }....................
#FIXME: Excise such nonsensicality.
#FIXME: Hmm; why, again? As I dimly recall, we were going to eliminate the
#concept of "precompilation" entirely. Is that correct? If so, what did we
#intend to replace that concept with -- if anything?
#FIXME: Ah! Right. Thanks to zy://zz-end, we no longer need this hook. All
#functions previously passed to this function should instead be shifted into
#parcels residing in the zy://zz-end directory and then called directly as is
#in the same parcels. It is good.

# void :run_hook_on_zeshy_precompile(string code)
function :run_hook_on_zeshy_precompile() {
    (( # == 1 )) || :die 'Expected one code string.'
    ZY__HOOKS_RUN_ON_ZY_PRECOMPILE+="${1}"
#   print "registering precompilation hook \"${1}\""
}

# ....................{ COMPILERS                         }....................
# :void ::zeshy.compile()
function ::zeshy.compile() {
    (( # == 0 )) || :die 'Expected no arguments.'

    # List of all currently declared aliases, functions, and globals declared
    # *BEFORE* sourcing and compiling zeshy. See ::zeshy.compile_start().
    local -a\
        ZY__ALIAS_NAMES_OLD\
        ZY__ALIAS_SUFFIX_NAMES_OLD\
        ZY__FUNCTION_NAMES_OLD\
        ZY__GLOBAL_NAMES_OLD

    # List of all currently declared aliases, functions, and globals declared
    # *AFTER* sourcing and compiling zeshy. See ::zeshy.compile_stop_names().
    local -a\
        ZY__ALIAS_NAMES_NEW\
        ZY__ALIAS_SUFFIX_NAMES_NEW\
        ZY__FUNCTION_NAMES_NEW\
        ZY__GLOBAL_NAMES_NEW

    # Prepare to source the zeshy codebase.
    ::zeshy.compile_start

    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Do *NOT* expand zeshy aliases sourced by this function in any
    # subsequently called functions defined by this parcel. Since zsh expands
    # aliases at function definition rather than call time, these aliases will
    # *NOT* be expanded and hence induce "command not found" errors at call
    # time. The devil is in the obscura.
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #
    # Source all zeshy scripts applicable to the current system and user.
    ::zeshy.compile_source

    # Finalize which operables are to be compiled into the digest file.
    ::zeshy.compile_finalize

    # Compile all zeshy-specific functions (and hence aliases and globals) into
    # zeshy's user digest file *AFTER* the above finalization.
    ::zeshy.compile_digest
}


ZY__HELP_FUNCS+='
:void ::zeshy.compile_start()

Record the names of all existing aliases, functions, and globals (including both
those defined internally by the bootstrapped `zeshy` codebase and those defined
externally by the parent shell environment).

Due to already being defined and hence _not_ defined by the main `zeshy`
codebase, these aliases, functions, and globals should _not_ be subsequently
compiled into the main digest file.
'
function ::zeshy.compile_start() {
    (( # == 0 )) || :die 'Expected no arguments.'

    #FIXME: Technically, both alias and function names may contain newlines. If
    #even a single such alias or function exists, the line-splitting performed
    #below could fail spectacularly. It's unclear how to guard against this.
    #Perhaps calling "alias -m *$'\n'*" or some such and testing whether at
    #least one such alias or function exists before calling "alias +"?
    #FIXME: Forehead smacking time. Given canonical list global ${functions},
    #we can efficiently obtain the set of all newly defined functions by
    #capturing such list before sourcing the current script into a temporary
    #list, then differencing the current contents of ${functions} with such
    #temporary list after such sourcing. Super efficient! Indeed, such approach
    #can and should be used elsewhere in ={compile} to perform efficient names
    #differencing, and can and should be extended to both aliases and globals.

    # Record the names of all currently defined aliases, functions, and globals
    # *NOT* to be compiled into zeshy's user digest file. See
    # :set_list_to_aliases(), :set_list_to_functions(), and
    # :set_list_to_globals() for further details.
    ZY__ALIAS_NAMES_OLD=(        "${(@f)"$(alias +)"}" )
    ZY__ALIAS_SUFFIX_NAMES_OLD=( "${(@f)"$(alias +s)"}" )
    ZY__FUNCTION_NAMES_OLD=(     "${(@f)"$(typeset +f)"}" )
    ZY__GLOBAL_NAMES_OLD=(   ${${"${(@f)"$(typeset +g +)"}":#* local *}##* } )

    # Filter all non-zeshy-specific globals from this list. See
    # ::zeshy.compile_stop_names() for further details.
    ZY__GLOBAL_NAMES_OLD=( "${(M)ZY__GLOBAL_NAMES_OLD[@]:#ZY_*}" )
#   print -l "===ZY__GLOBAL_NAMES_OLD===" "${ZY__GLOBAL_NAMES_OLD[@]}"
#   { print 'old globals:'; typeset -g + } | less
}


# :void ::zeshy.compile_source()
function ::zeshy.compile_source() {
    (( # == 0 )) || :die 'Expected no arguments.'

    # Since function-based recursion is prohibitively expensive, implement such
    # recursion as a depth-first search (DFS) of overlays beginning at the
    # following tree roots (in order):
    #
    # * The system-wide root zeshy overlay.
    # * The user-specific root zeshy overlay, if found.
    ::zeshy.compile_overlay_root "${ZY_OVERLAY_DIR}"
    if [[ -d ${ZY_USER_OVERLAY_DIR} ]] {
        ::zeshy.compile_overlay_root "${ZY_USER_OVERLAY_DIR}"
    }
}


# :void ::zeshy.compile_digest()
function ::zeshy.compile_digest() {
    (( # == 0 )) || :die 'Expected no arguments.'
    :stdout.echo_if_debug 'Compiling "'${ZY_USER_DIGEST_FILENAME}'"...'

    # Make the directory containing such digest file, if needed. See
    # :set_string_to_path_dirname() for further details.
    command mkdir -p -- "${ZY_USER_DIGEST_FILENAME:h}"

    # Compile zeshy's current user digest file.
    zcompile -c --\
        "${ZY_USER_DIGEST_FILENAME}" "${ZY__FUNCTION_NAMES[@]}"
}

# ....................{ MAIN                              }....................
# Recompile zeshy's user digest file.
::zeshy.compile
