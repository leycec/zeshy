#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Convert into parcel documentation.
# --------------------( SYNOPSIS                           )--------------------
# Define PCREs common to both macro preprocessing and function declaration.

# ....................{ GLOBALS                            }....................
# PCRE matching zero or more macros *OR* syntactic constructs possibly
# containing macro-like substrings, reporting:
#
# * Success on matching each macro and capturing such macro's name and all
#   arguments passed to such macro.
# * Failure on reaching the end of the string.
#
# When iterated over via calls to pcre_match(), such PCRE iteratively ignores
# all text until matching the next macro, at which point control is returned to
# the code block associated with such call; if no such macro exists, the end of
# the string is reached, at which point control is returned to the code
# following such code block. In either case, Odium and efficiency reigns.
typeset -g ZY__PREPROCESS_PCRE

# ....................{ GLOBALS ~ var name                 }....................
#FIXME: Privatize such global. We can't ever imagine expanding it outside of
#the official zeshy codebase.

# PCRE matching POSIX and hence zsh variable names.
typeset -g ZY_VAR_NAME_PCRE

# Character class embeddable in both PCREs and globs matching the first
# character of a POSIX variable name.
typeset -g ZY__VAR_NAME_CLASS_FIRST

# Character class embeddable in both PCREs and globs matching any character
# *AFTER* the first of a POSIX variable name.
typeset -g ZY__VAR_NAME_CLASS_REST

# ....................{ CLEARERS                           }....................
# :void ::preprocessor_pcres.clear()
#
# Set ${ZY__PREPROCESS_PCRE} to the empty string, inducing a subsequent call to
# ::preprocessor_pcres.make_if_needed() to recreate such PCRE.
#
# == Motivation ==
#
# Various substrings of such PCRE dynamically depend on external shell state
# (e.g., the set of all currently defined macro names) and hence *MUST* be
# invalidated on changes to such state. This function performs such
# invalidation and hence *MUST* be explicitly called when such changes occur.
function ::preprocessor_pcres.clear() {
    (( ! # )) || :die 'Expected no arguments.'
    ZY__PREPROCESS_PCRE=
}

# ....................{ MAKERS                             }....................
# :void ::preprocessor_pcres.make_if_needed()
#
# Initialize ${ZY__PREPROCESS_PCRE} if currently set to the empty string,
# typically by a prior call to ::preprocessor_pcres.clear(). See such function.
function ::preprocessor_pcres.make_if_needed() {
    (( ! # )) || :die 'Expected no arguments.'
    [[ -n ${ZY__PREPROCESS_PCRE} ]] || ::preprocessor_pcres.make
}

# :void ::preprocessor_pcres.make()
#
# Initialize ${ZY__PREPROCESS_PCRE}.
function ::preprocessor_pcres.make() {
    (( ! # )) || :die 'Expected no arguments.'

    # If at least one macro exists, match all such macros.
    if (( ${#ZY__MACRO_TO_FUNC_NAME} )) {
        # Macro name, dynamically constructed from the current set of all
        # macro names. By design, such names are guaranteed to contain no
        # PCRE-reserved characters and hence require no escaping.
        #
        # For efficiency in matching macro arguments, the sentinel macro is
        # matched *BEFORE* all other macros. Since such macro's name is
        # prefixed by an unprintable character and hence unlikely to prefix
        # *ANY* shell words, this only imposes a slight cost on matching macros.
        local pcre_macro_command_name=${ZY__PREPROCESS_MACRO_SENTINEL_PCRE}

        # If one or more ":"-prefixed macros exist, match such macros.
        if (( ${#ZY__MACRO_NAMES_SEMICOLON_PREFIXED} )) {
            pcre_macro_command_name+='|:(?>'${(j:|:)ZY__MACRO_NAMES_SEMICOLON_PREFIXED}')'
        }

        # If one or more non-":"-prefixed macros exist, match such macros.
        if (( ${#ZY__MACRO_NAMES_SEMICOLON_UNPREFIXED} )) {
            pcre_macro_command_name+='|'${(j:|:)ZY__MACRO_NAMES_SEMICOLON_UNPREFIXED}
        }

        # Macro name grouped.
        local pcre_macro_command_name_grouped='('${pcre_macro_command_name}')'

        # Macros, replacing the static placeholder in such PCRE by the
        # dynamically constructed PCRE matching macro names grouped.
        ZY__PREPROCESS_PCRE=${ZY__PREPROCESS_PCRE_IF_NONEMPTY//${ZY__MACRO_COMMAND_NAME_PLACEHOLDER}/${pcre_macro_command_name_grouped}}
    # Else, no macros exist. To prevent spurious or scurrilous preprocessor
    # behaviour, induce such PCRE to *ALWAYS* report failure.
    } else {
        ZY__PREPROCESS_PCRE=${ZY__PREPROCESS_PCRE_IF_EMPTY}
    }
}

# ....................{ MAIN                               }....................
# Declare general-purpose PCRE globals *NOT* reinitialized on each call to
# ::preprocessor_pcres.make().
() {
    # ..................{ GLOBAL                             }..................
    # POSIX variable name. Dismantled, this is:
    #
    # * "[...]", matching the first character of such name.
    # * "[...]*+", matching all remaining characters of such name.
    ZY__VAR_NAME_CLASS_FIRST='[a-zA-Z_]'
    ZY__VAR_NAME_CLASS_REST='[a-zA-Z0-9_]'
    ZY_VAR_NAME_PCRE=${ZY__VAR_NAME_CLASS_FIRST}${ZY__VAR_NAME_CLASS_REST}'*+'
}
