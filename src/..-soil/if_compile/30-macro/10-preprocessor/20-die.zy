#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: Uncomment after shifting +{parcel} here.

# :parcel <<'/---'
# Handle *macro preprocessor exception handlers* (i.e., functions throwing
# exceptions resulting from macro preprocessing).
# /---

# ....................{ EXCEPTION                          }....................
# :void ::code.preprocess.die(:str exception_message)
#
# Throw an exception with the passed message detailing a fatal error resulting
# from preprocessing code to be preprocessed. This private exception handler is
# intended to be called _only_ by ::code.preprocess().
#
# == Message Format ==
#
# The passed message should be formatted as a lowercase sentence fragment (e.g.,
# `prototype invalid`), which this function then:
#
# * Prefixes by `Parcel +{${parcel_name}} preprocessing failed `, where:
# ** `${parcel_name}` is the name of the preprocessed parcel.
function ::code.preprocess.die() {
    # Validate sanity.
    (( # == 1 )) || :die 'Expected one exception message.'
    local exception_message=${1}
    [[ -n ${exception_message} ]] ||
        :die 'Expected non-empty exception message.'

    # Throw such exception.
    :die $(:parcel.label)'preprocessing failed '${exception_message}
}

# ....................{ EXCEPTION ~ byte                   }....................
# :void ::code.preprocess.die_at_byte_current(
#     :str exception_message,
#     :int error_byte_first)
#
# Throw an exception with the passed message detailing a fatal error occurring
# at or after the first byte of the current PCRE match of the code passed to the
# most recent call to ::code.preprocess(). This private exception handler is
# intended to be called _only_ by such function.
function ::code.preprocess.die_at_byte_current() {
    # Validate sanity.
    (( # == 1 )) || :die 'Expected one exception message.'
}

# :void ::code.preprocess.die_at_byte(
#     :str exception_message,
#     :int error_byte_first)
#
# Throw an exception with the passed message detailing a fatal error beginning
# at the passed byte index of the code to be preprocessed by the most recent
# call to ::code.preprocess(). This private exception handler is intended to be
# called _only_ by such function.
#
# == Message Format ==
#
# The passed message should be formatted as a lowercase sentence fragment (e.g.,
# `prototype invalid`), which this function then:
#
# * Prefixes by `at line ${line_number} character ${column_number}`, where:
# ** `${line_number}` is the line number in such parcel at which such error
#    began or was otherwise first identified.
# ** `${column_number}` is the character offset on such line at which such error
#    began or was otherwise first identified.
# * Suffixes by such line.
function ::code.preprocess.die_at_byte() {
    # Validate sanity.
    (( # == 2 )) || :die 'Expected one exception message and one byte index.'
    local\
        exception_message=${1}\
        error_byte_first=${2}\
        error_arrow\
        error_line\
        error_line_error_prefix\
        exception_prefix\
        exception_suffix
    integer\
        error_line_number\
        error_line_byte_first\
        error_line_error_byte_first\
        error_line_error_char_first

    # If such index is *NOT* a valid index into such code, throw an exception.
    {
        [[ ${error_byte_first} == <0-9>## ]] && ((
            error_byte_first >= 1 &&
            error_byte_first <= ${#ZY__PREPROCESS_CODE}
        ))
    } || :die 'Byte index '${error_byte_first}' not an integer in [1,'${#ZY__PREPROCESS_CODE}'].'

    # ..................{ UNIBYTE                             }..................
    # Index of the first byte of the line containing such error. Dismantled,
    # this is:
    #
    # * "%", removing the smallest matching string and hence the last line of
    #   the substring of such code preceding such error including prefixing
    #   newline. If such line is the first line and hence *NOT* prefixed by
    #   newline, no string will be matched or removed, implying such index will
    #   erroneously be reported as ${error_byte_first}. This is corrected below.
    error_line_byte_first=${#ZY__PREPROCESS_CODE[1,${error_byte_first}]%$'\n'*}

    # If such line is the first line, such index will erroneously be reported as
    # ${error_byte_first}. Correct this by coercing such index to 1.
    (( error_line_byte_first != error_byte_first )) ||
       error_line_byte_first=1

    # Line containing the first byte of such error. Dismantled, this is:
    #
    # * "%%", removing the longest matching string and hence all lines of the
    #   substring of such code following such line including prefixing newlines.
    error_line=${ZY__PREPROCESS_CODE[${error_line_byte_first},-1]%%$'\n'*}

    #FIXME: Clever. Unfortunately, we won't be using it. Why? Because such line
    #numbers are postprocessed and hence bear little relation to the
    #preprocessed line numbers expected by the user. Given that, we'll need to
    #convert the latter to the former -- probably by parsing a commented line
    #number following the offending byte.

    # Line number of the line containing such error. For efficiency, calculate
    # such number as follows:
    #
    # * Remove all non-newline characters in the substring of such code up to
    #   and including the first byte of such error.
    # * Count the byte length of the resulting string, Since the prior operation
    #   guarantees such string to contain only ASCII newline characters, such
    #   byte length is the number of such characters in the original string.
    error_line_number=${#ZY__PREPROCESS_CODE[1,${error_byte_first}]//[^$'\n']##}

    # Index of the first byte of such error relative to the first byte of such
    # line.
    error_line_error_byte_first=$((
        error_byte_first - error_line_byte_first + 1 ))

    # Substring up to and including the first byte of such error on such line.
    error_line_error_prefix=${error_line[1,${error_line_error_byte_first}}

    # ..................{ MULTIBYTE                           }..................
    # Human-readable multibyte length of such substring. Since prior code
    # operates under shell option "no_multiybyte" due to ${+backend}
    # requirements and hence in a unibyte manner, locally disable such option.
    setopt local_options multibyte
    error_line_error_char_first=${#error_line_error_prefix}

    # Number of ASCII characters preceding the multiline ASCII arrowhead below.
    error_arrow_padding_length=$(( error_line_error_char_first - 1 ))

    #FIXME: Colorize such output in a user-customizable manner.

    # Multiline ASCII arrow indicating the first character of such error in such
    # line. See :Str.repeat_str_ansiless_to_len().
    error_arrow=${(r:${error_arrow_padding_length}::-:):-}','$'\n'${(r:${error_arrow_padding_length}:: :):-}'v'

    # String prefixing such exception message.
    exception_prefix='at line '${error_line_number}' character '${error_line_error_char_first}' '

    # String suffixing such exception message.
    exception_suffix=':'$'\n\n'${error_arrow}${error_line}

    # Throw such exception.
    ::code.preprocess.die ${exception_prefix}${exception_message}${exception_suffix}
}

# ....................{ EXCEPTION ~ byte : cause           }....................
# :void ::code.preprocess.die_of_syntax_invalid()
#
# Throw an exception detailing an *invalidity* at the current match position
# (i.e., a syntax error in the most recently matched syntactic construct). This
# function implicitly detects such invalidity's type and hence requires no
# explicit message to be passed. This private exception handler is intended to
# be called _only_ by ::code.preprocess().
function ::code.preprocess.die_of_syntax_invalid() {
    # Validate sanity.
    (( ! # )) || :die 'Expected no arguments.'

    # Human-readable name of the type of such construct.
    local construct_type

    # Byte length of the prefix prefixing such construct (e.g., 2 for
    # "<<"-prefixed here-documents).
    integer construct_prefix_byte_length

    # Index of the byte at which to begin iterative globbing of such prefix.
    # Since syntactic prefixes are guaranteed to be between one to three
    # characters, compare only the three characters preceding the first byte of
    # the matched substring against an iterative series of simple globs. For
    # safety, clamp such index to 1.
    #
    # Note that the derivation of
    # ${ZY__PREPROCESS_SUBCODE_MACRO_BYTE_FIRST} assumed the character
    # preceding the current match to be unibyte. Is this reliably the case for
    # *ALL* invalid syntax? Happily, yes. By PCRE design, such syntax is
    # *ALWAYS* preceded by a syntactic prefix; by zsh design, *ALL* such
    # prefixes comprise only ASCII characters; hence, the character preceding a
    # match of invalid syntax is guaranteed to be unibyte. Should this ever
    # change, note the following calculation to efficiently yield the index of
    # the first byte of the current match and hence of the character
    # immediately following such syntactic prefix:
    #
    #    integer code_construct_sans_prefix_byte_first=$((
    #        ZY__PREPROCESS_CODE_BYTE_LENGTH - ${#MATCH} ))
    integer code_construct_prefix_byte_first=$((
        ZY__PREPROCESS_CODE_MACRO_BYTE_FIRST - 3 ))

    # Index of the byte at which to end iterative globbing of such prefix.
    integer code_construct_prefix_byte_last=$((
        ZY__PREPROCESS_CODE_MACRO_BYTE_FIRST - 1 ))

    # Clamp such 1-based indices to 1.
    ((  code_construct_prefix_byte_first > 0 )) ||
        code_construct_prefix_byte_first=1
    ((  code_construct_prefix_byte_last  > 0 )) ||
        code_construct_prefix_byte_last=1

    # Prefix prefixing such construct.
    local code_construct_prefix=${ZY__PREPROCESS_CODE[${code_construct_prefix_byte_first},${code_construct_prefix_byte_last}]}

    # Identify such construct.
    case ${code_construct_prefix} {
    # The "$'" prefixing print()-quoted strings overlaps the "'" prefixing
    # single-quoted strings and hence is matched first.
    (*'$''')
        construct_type='print()-quoted string'
        construct_prefix_byte_length=2
        ;;
    (*"'")
        construct_type='single-quoted string'
        construct_prefix_byte_length=1
        ;;
    (*'"')
        construct_type='double-quoted string'
        construct_prefix_byte_length=1
        ;;
    (*'\')
        construct_type='escaped character'
        construct_prefix_byte_length=1
        ;;
    (*'`')
        construct_type='"`"-delimited process substitution'
        construct_prefix_byte_length=1
        ;;
    (*'[[')
        construct_type='non-arithmetic test'
        construct_prefix_byte_length=2
        ;;
    (*'$[')
        construct_type='"$["-prefixed arithmetic substitution'
        construct_prefix_byte_length=2
        ;;
    # The "${" prefixing variable expansions overlaps the "{" prefixing blocks
    # and hence is matched first.
    (*'${')
        construct_type='variable expansion'
        construct_prefix_byte_length=2
        ;;
    # See above.
    (*'{')
        construct_type='block'
        construct_prefix_byte_length=1
        ;;
    # The "$((" prefixing arithmetic substitutions overlaps the "((" prefixing
    # arithmetic tests and hence is matched first.
    (*'$((')
        construct_type='"$(("-prefixed arithmetic substitution'
        construct_prefix_byte_length=3
        ;;
    # The "$((" prefixing arithmetic tests overlaps the "(" prefixing both lists
    # and process forks and hence is matched first.
    (*'((')
        construct_type='arithmetic test'
        construct_prefix_byte_length=2
        ;;
    (*'(')
        # If such construct is prefixed by "=(", such construct is either a
        # macro keyword argument, list assignment, *OR* "=("-prefixed process
        # substitution.
        if [[ ${code_construct_prefix} == *'=(' ]] {
            # If such "=(" is preceded by an ASCII character complying with
            # variable name syntax, such construct is either a macro argument
            # *OR* list assignment.
            if [[ ${code_construct_prefix[-3]} =~ ${ZY__VAR_NAME_CLASS_REST} ]] {
                # If a macro-specific variable name matched, such construct is a
                # macro keyword argument.
                if [[ -n ${match[${ZY__PREPROCESS_GROUP_INDEX_MACRO_COMMAND_ARG_LAST_VAR_NAME}]-} ]] {
                    construct_type='macro keyword argument'
                    construct_prefix_byte_length=1
                # Else if a zeshy-specific macro argument matched, such
                # construct is a macro nonscalar argument (e.g., list, map).
                } elif [[ -n ${match[${ZY__PREPROCESS_GROUP_INDEX_MACRO_COMMAND_ARG_LAST_ZESHY}]-} ]] {
                    construct_type='macro nonscalar argument'
                    construct_prefix_byte_length=1
                # Else, such construct is a list assignment.
                } else {
                    construct_type='list assignment'
                    construct_prefix_byte_length=1
                }
            # Else, such construct is a "=("-prefixed process substitution.
            } else {
                construct_type='"=("-prefixed process substitution'
                construct_prefix_byte_length=2
            }
        # Else, such construct is either a process fork if the first shell word
        # of such command *OR* a list in a complex command or passed to a macro.
        # Since disambiguating such cases is effectively infeasible, such
        # construct is ambiguously stated to be of either type.
        } else {
            construct_type='list or process fork'
            construct_prefix_byte_length=1
        }
        ;;
    (*(#b)(['$<>'])'(')
        construct_type='"'${match[1]}'"-prefixed process substitution'
        construct_prefix_byte_length=2
        ;;

    #FIXME: For disambiguity in exception messages, unsupported here-documents
    #(i.e., here-documents with non-literal delimiters) should be differentiated
    #from syntactically invalid here-documents: the former are *NOT* invalid in
    #general-purpose zsh code, merely unsupported in zeshy code.  Happily, doing
    #so should be more or less trivial. In fact, we've already done so; see
    #${ZY__MACRO_HERE_DOC_UNSUPPORTED_PCRE}. Yay!
    (*'<<')
        construct_type='here-document'
        construct_prefix_byte_length=2;;

    # Else, such construct was unidentifiable. Throw a general-purpose exception
    # located at the start of the current match in such code.
    (*)
        ::code.preprocess.die_at_byte\
            'syntax (of unknown type) invalid'\
            ${ZY__PREPROCESS_CODE_MATCH_CURRENT_BYTE_FIRST}
    }

    # Suffix such type by an adjective describing such failure (albeit weakly).
    construct_type+=' invalid'

    # If such construct's prefix is non-positive, throw an exception.
    (( construct_prefix_byte_length > 0 )) || ::code.preprocess.die_at_byte\
        ${construct_type}' with '\
        ${ZY__PREPROCESS_CODE_MATCH_CURRENT_BYTE_FIRST}

    # Throw such exception detailing a fatal error beginning at the byte index
    # of the current match offset negatively offset by the byte length of the
    # prefix prefixing the erroneous syntactic construct.
    ::code.preprocess.die_at_byte ${construct_type} $((
        ZY__PREPROCESS_CODE_MATCH_CURRENT_BYTE_FIRST -
        construct_prefix_byte_length
    ))
}
