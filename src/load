#!/usr/bin/env zsh
# ====================[ load                               ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Load, handling Zsh module loading and Zeshy function autoloading.
#
# --------------------( SEE ALSO                           )--------------------
# https://jgao.googlecode.com/svn/trunk/.shell/zsh_module
#   Comprehensive module autoload definitions inspiring those below.

#FIXME: This file is small enough as to be reasonably integrated into "main".
#That, in turn, could be a nice opportunity to truncate "main" a bit. I'd
#specifically like to see get_script_name() shifted into "shell/shell" and
#utter() and curse() shifted into "shell/output".

# ....................{ MAIN                               }....................
() {
    # ~~~~~~~~~~~~~~~~< ZSH                                >~~~~~~~~~~~~~~~~~~~~
    # Define autoloads for all autoloadable functions in ${fpath}, obsoleting
    # manual autoloading of such functions (e.g., "zsh-mime-setup" versus
    # "autoload -U zsh-mime-setup; zsh-mime-setup"). Dismantled, this is:
    #
    # * "fpath", the list of all directories with autoloadable files.
    # * "^", iteratively expanding to each such directory.
    # * "/*", each immediate file and subdirectory of such directory.
    # * "N", ignoring non-extant files and subdirectories.
    # * ".", including only plain files (e.g., excluding directories).
    # * ":t", the tail (i.e., basename) of such file.
    #
    # This matches all basenames of immediate files of directories in the function
    # path. (Since this is also the set of all autoloadable function names,
    # autoloading such basenames autoloads all autoloadable functions.) Oh!
#   for autoloadable_function_name in ${^fpath}/*(N.:t); do
    for function_name in ${^fpath}/*(.:t); do
        #   print "autoloading \"${autoload_function_name}\"..."
        # For safety, autoload this function under option "-U" to suppress alias
        # expansion. This prevents expansion of Zeshy- and user-specific aliases
        # under core Zsh functions implemented with no such aliases in mind.
        autoload -U "${function_name}"
    done

    # Define autoloads for all autoloadable functions defined by Zsh modules not
    # autoloaded above. Unlike above, this requires manually mapping such
    # functions to such modules -- an unctuous proposition. Avoid mapping:
    #
    # * Modules previously explicitly loaded by ZeshyInit Main.
    # * "mapfile", due to the risk it poses of permanent, silent file deletion.
    #
    # Dismantled, this is:
    #
    # * "-a", autoloading the following builtins ("b"), functions ("f"), or
    #   parameters ("p") from the immediately following module.
    # * "i", ignoring rather than failing when such builtins, functions, or
    #   parameters have already been loaded within such module.
    zmodload -abi zsh/cap cap getcap setcap
    zmodload -abi zsh/clone clone
    zmodload -abi zsh/compctl compctl compcall
    zmodload -abi zsh/computil comparguments compdescribe compfiles compgroups\
        compquote comptags comptry compvalues
    zmodload -abi zsh/datetime strftime
    zmodload -afi zsh/deltochar delete-to-char zap-to-char
    zmodload -afi zsh/mathfunc abs int float acos acosh asin asinh atan atanh\
        cbrt ceil cos cosh erf erfc exp expm1 fabs floor gamma j0 j1 lgamma log\
        log10 log1p logb sin sinh sqrt tan tanh y0 y1 ilogb signgam copysign\
        fmod hypot nextafter jn yn ldexp scalb rand48
    zmodload -abi zsh/pcre pcre_compile pcre_study pcre_match
    zmodload -abi zsh/sched sched
    zmodload -abi zsh/net/socket zsocket
    zmodload -abi zsh/net/tcp ztcp
    zmodload -abi zsh/system syserror sysread syswrite
    zmodload -api zsh/system errnos
    zmodload -abi zsh/termcap echotc
    zmodload -api zsh/termcap termcap
    zmodload -abi zsh/zftp zftp
    zmodload -api zsh/zleparameter keymaps widgets
    zmodload -abi zsh/zprof zprof
    zmodload -abi zsh/zpty zpty
    zmodload -abi zsh/zselect zselect

    # ~~~~~~~~~~~~~~~~< ZESHY                              >~~~~~~~~~~~~~~~~~~~~
    # The latest of the last modification times of
    #
    # * The user-specific Zeshy configuration file. (Changing theme settings
    #   requires changing theme autoloads.)
    # * The system-wide directory of user commands. (Installing or uninstalling
    #   such commands requires changing command autoloads.)
    integer\
          zeshy_mtime=$(zstat +mtime "${ZESHY_CONFIG_FILE}")\
            bin_mtime=$(zstat +mtime '/bin')\
        usr_bin_mtime=$(zstat +mtime '/usr/bin')
    ((     bin_mtime > zeshy_mtime )) and zeshy_mtime="${bin_mtime}"
    (( usr_bin_mtime > zeshy_mtime )) and zeshy_mtime="${usr_bin_mtime}"

    # If the current user is a Zeshy developer, obtain the last modification
    # time of the Zeshy codebase by sorting the set of all last modification 
    # times of all files and directories in this codebase and selecting the
    # largest such time. This is at best an O(n*lg(n)) operation, and hence
    # confined to developers.
    if is -n ${ZESHY_IS_DEBUG} si; then
        # Dismantled, this is:
        #
        # * "${...}"/**/*, all files and directories of this codebase.
        # * "om", sorting such files and directories by ascending mtime.
        # * "[1]", the first and hence newest such file or directory.
        integer zeshy_dev_mtime=$(zstat +mtime "${ZESHY_SOURCE_DIR}"/**/*(om[1]))

        # Find the maximum of this and the prior modification time.
        (( zeshy_dev_mtime > zeshy_mtime )) and zeshy_mtime="${zeshy_dev_mtime}"
    fi

    # If the digest file does not exist or does but is older than Zeshy's last
    # modification time, recompile this file to synchronize compiled function
    # definitions with newer Zeshy changes.
#   utter "detecting \"${ZESHY_DIGEST_FILE}\"..."
    { is -f "${ZESHY_DIGEST_FILE}" si and
        (( zeshy_mtime == $(zstat +mtime "${ZESHY_DIGEST_FILE}") )) } or
        source "${ZESHY_AUXILIARY_DIR}/compile"

    # Declare all functions compiled into the digest file to be autoloadable.
    autoload -w "${ZESHY_DIGEST_FILE}" or
        die "\"${ZESHY_DIGEST_FILE}\" cannot be compiled"

    # Prefix the function path with the absolute path to the digest file to
    # ensure Zsh searches such file for the definition of such functions first.
    # Oddly, Zsh has no means of directly associating the two.
    fpath=( "${ZESHY_DIGEST_FILE}" "${fpath[@]}" )
}

# ....................{ WASTELANDS                         }....................

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
