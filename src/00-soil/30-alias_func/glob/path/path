#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *path globs* (i.e., glob expressions matching existing paths).

== See Also ==

* Section ``FILENAME GENERATION'' of `man zshexpn`, documenting such globs.
/---

# ....................{ SETTERS                            }....................
:func_ '<globbable> :void set_list_to_paths_globbed(
    :string:list? list_name, :string glob)' :func{
    :string glob__sltpg="${2}"
    set_list_to_evaluation "${1}" '${~glob__sltpg}'
}:func <<'/---'
Set the passed list to all existing paths matching the passed glob: e.g.,

.set_list_to_paths_globbed()
==========================================
[source]
------------------------------------------
>>> :list terminal_devices
>>> set_list_to_paths_globbed terminal_devices /dev/tty<->##(#q%)
>>> :string.output "${terminal_devices[1,3]}"
/dev/tty0 /dev/tty1 /dev/tty2
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------

    # Set such list. Since such setting tends to return spurious non-zero exit
    # status (e.g., if any globbed path is not readable by the current user),
    # ignore the resulting status. Moreover, since such setting fails to return
    # non-zero exit status on genuine error (e.g., invalid glob qualifiers),
    # capture standard error into a string local to be subsequently tested.
#   :run_code_silent_and_set_string_to_stderr_by_coprocess\
#       ${list_name__sltpg}'=( ${~glob__sltpg} ) or ignore_failure'\
#       stderr__sltpg

    # If an error was output, throw an exception with such error.
#   if { is_string_nonempty "${stderr__sltpg}" } {
#       # If such error is prefixed by "zsh: ", remove such prefix.
#       stderr__sltpg="$(remove_string_prefix "${stderr__sltpg}" 'zsh: ')"
#       :die "glob \"${glob__sltpg}\" syntactically invalid:${ZESHY_ASCII_NEWLINE}${stderr__sltpg}"
#   }

#FUXME: If the passed glob qualifiers are syntactically invalid, zsh reports an
#error. We should catch and convert such errors to exceptions, I reck'n,
#suggesting we defer the conventional operation
#"pathnames=( ${~glob} ) or ignore_failure" to a separate function -- say,
#set_list_to_paths_globbed().

