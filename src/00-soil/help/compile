#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Document all globals, functions, and aliases declared by @{compile}.
/---

# ....................{ GLOBALS                            }....................
:listset_global ZESHY_HOOKS_RUN_ON_ZESHY_PRECOMPILE <<'/---'
List of commands to be run before compiling `zeshy`\'s user digest file.
/---

:string_global ZESHY_SCRIPT_NAME_GLOB <<'/---'
Glob expression strictly matching only *`zsh` scripts* (i.e., regular files or
symbolic links to such files, excluding ignorable temporary files).
/---

:string_global ZESHY_ZSH_GLOBAL_NAMES_GLOB <<'/---'
Glob expression matching the names of all canonical `zsh` global variables.
/---

# ....................{ GLOBALS ~ local                    }....................
# For safety, compile_zeshy_source() localizes rather than globalizes the
# following variables. Since such variables nonetheless behave as and are
# expanded throughout the zeshy codebase as globals, document such variables
# here.

#FIXME: Actually, we just want to document such global without declaring it as
#such. We probably want a new :global.document() function to be called here.
#FIXME: Also, whatever source_script*() functions we define should also use this
#global. Discovering the current shell script name is intolerably obtuse under
#both bash and zsh. This global cleanly solves that. Use it *EVERYWHERE*!

:string_global ZESHY_SCRIPT_NAME <<'/---'
Absolute path of the `zeshy` script currently sourced by compile_zeshy_source().
For safety, such function unsets this global immediately after sourcing all
`zeshy` scripts to be compiled into the current digest file.
/---

# ....................{ COMPILERS                          }....................
:func.document <<'/---'
void :compile_zeshy()

Compile the current digest file from all functions defined by all `zsh` scripts
residing in all `zeshy` overlays applicable to the current system and user.
/---

:func.document <<'/---'
void ::compile_zeshy_setup()

Prepare for sourcing the `zeshy` codebase. Specifically, record the names of all
currently defined aliases, functions, and globals. Due to already being defined
and hence _not_ defined by the `zeshy` codebase, such objects should _not_ be
subsequently compiled into the current digest file.
/---

:func.document <<'/---'
void ::compile_zeshy_source()

Source the `zeshy` codebase. Specifically, find which `zeshy` overlays apply to
the current system and user, then source all `zsh` scripts in such overlays.
registered listed by ${ZESHY_OVERLAY_FILENAMES}. The set difference between the
lists of functions defined before and after such sourcing is the subset of `zeshy`-
specific functions to be subsequently compiled into the current digest file.
/---

:func.document <<'/---'
void ::compile_zeshy_digest()

Compile the current digest file, given the names of all such functions.
/---

# ....................{ COMPILERS ~ overlay                }....................
:func.document <<'/---'
void ::compile_zeshy_overlay_root(string overlay_dirname)

Perform a depth-first search of the passed root overlay and all applicable
suboverlays of such overlay for all `zsh` scripts applicable to the current
system and user. For efficiency, search non-recursively in a stack-based manner.

== Root Overlay ==

Root overlays commonly include:

* The main system-wide `zeshy` overlay (e.g., `/usr/share/zeshy`).
* The main user-specific `zeshy` overlay (e.g., `~/.zeshy/src`).

Such roots typically contain additional suboverlays as subdirectories (e.g.,
`/usr/share/zeshy/if_pathable/X`), only a subset of which apply to the current
system and user. On discovering such a suboverlay, this function pushes such
suboverlay onto ${ZESHY_OVERLAY_DIRNAMES} (a local FIFO stack recording such
suboverlays in discovery order).
/---

#FIXME: Documentation requires *SIGNIFICANT* updating. In particular, we now
#support both ordered and unordered suboverlays.
:func.document <<'/---'
void ::compile_zeshy_overlay_container(string overlay_dirname)

Prepare the passed `zeshy` overlay directory for digest compilation, as detailed
above in "OVERLAYS". For each:

* `zsh` script in such overlay containing autoloadable functions to be compiled
  into the current digest file, append such script to the list of such files.
* Subdirectory in such overlay:
  * That is itself an overlay, append such subdirectory to the overlay stack.
  * Recursively containing `zsh` scripts containing autoloadable functions to be
    compiled into `zeshy`\'s digest file, append such subdirectory to the list of
    such subdirectories. (Subdirectories may either be overlays or directly
    contain `zsh` scripts, but not both.)
/---

:func.document <<'/---'
void ::compile_zeshy_overlay_scripts(string filename1?, ...)

Source all passed files as `zeshy` scripts. Doing so exports all aliases,
functions, and globals defined by such scripts to be subsequently compiled into
the current digest file.

== Script Pathname ==

Immediately before sourcing each such script, this function sets string local
${ZESHY_SCRIPT_NAME} to the absolute path of such script. Since `zsh` itself
provides no reliable means of obtaining the absolute path of the current script,
consider expanding such local to do so.
/---

:func.document <<'/---'
void ::compile_zeshy_overlay_dirs(string dirname1?, ...)

Push all passed directories to the top of the current overlay stack. Such
directories will be subsequently searched for `zeshy` scripts to be sourced and
compiled into the current digest file.
/---

# ....................{ COMPILERS ~ suboverlay             }....................
:func.document <<'/---'
void ::compile_zeshy_suboverlay_simple(string suboverlay_dirname)

Recursively compile all `zeshy` scripts in the passed directory into the current
digest file. Since such scripts are compiled unconditionally, such directory is
referred to as a *simple suboverlay*.
/---

:func.document <<'/---'
void ::compile_zeshy_suboverlay_if_config(string suboverlay_dirname)

Recursively compile all `zeshy` scripts in the passed directory into the current
digest file _and_ copy all such scripts _not_ already found in the current
configuration directory to such directory. Since such scripts are intended to be
configurable, such directory is referred to as a *configuration suboverlay*.
/---

:func.document <<'/---'
void ::compile_zeshy_suboverlay_if_pathable(string suboverlay_dirname)

Recurse into all immediate subdirectories of the passed directory whose
basenames match those of existing *pathables* (i.e., external commands in the
current command hash, typically in the current user's ${PATH}). Since such
subdirectories correspond to pathables, such directory is referred to as a
*pathable suboverlay*. Specifically, this function pushes all matching
subdirectories onto the front of the *overlay stack* (i.e., the FIFO stack of
all overlays to be compiled into the current digest file).
/---

# ....................{ COMPILERS ~ suboverlay : tester    }....................
:func.document <<'/---'
void ::compile_zeshy_suboverlay_if_display_server(string suboverlay_dirname)

Compile the passed display server-specific suboverlay as follows:

* If subdirectory `${suboverlay_dirname}/any` exists _and_ a display server is
  currently running (as tested by calling function :is_display_server()),
  compile such subdirectory as an overlay.
* If subdirectory `${suboverlay_dirname}/name` exists, for each immediate
  subdirectory of such subdirectory, if the current system provides a package
  manager identified by the basename of such subdirectory (as tested by calling
  function `:is_display_server_${basename}()`), compile such subdirectory.
* If subdirectory `${suboverlay_dirname}/trait` exists, for each immediate
  subdirectory of such subdirectory, if the current system provides a package
  manager having a trait identified by the basename of such subdirectory (as
  tested by calling function `:is_display_server_trait_${basename}()`), compile
  such subdirectory.
/---

:func.document <<'/---'
void ::compile_zeshy_suboverlay_if_package_manager(string suboverlay_dirname)

Compile the passed package manager-specific suboverlay as follows:

* If subdirectory `${suboverlay_dirname}/any` exists _and_ the current system
  provides at least one package manager (as tested by calling function
  :is_package_manager()), compile such subdirectory as an overlay.
* If subdirectory `${suboverlay_dirname}/name` exists, for each immediate
  subdirectory of such subdirectory, if the current system provides a package
  manager identified by the basename of such subdirectory (as tested by calling
  function `:is_package_manager_${basename}()`), compile such subdirectory.
/---

:func.document <<'/---'
void ::compile_zeshy_suboverlay_with_tester_prefix(
    string suboverlay_dirname, string tester_prefix)

Compile the passed suboverlay according to the passed tester function prefix.
This low-level utility function implements the logic required by all high-level
suboverlay compilers calling tester functions to conditionally decide which
subdirectories of such suboverlays should themselves be compiled as additional
overlays (e.g., ::compile_zeshy_suboverlay_if_package_manager()).
/---

:func.document <<'/---'
void ::compile_zeshy_suboverlay_subdir_with_tester_prefix(
    string suboverlay_dirname, string tester_prefix)

Compile the passed suboverlay subdirectory according to the passed tester
function prefix. This low-level utility function implements all subdirectory-
specific logic required by the slightly higher-level utility function
::compile_zeshy_suboverlay_subdir_with_tester_prefix().
/---

# ....................{ RUNNERS                            }....................
:func.document <<'/---'
void :run_hook_on_zeshy_precompile(string code)

Run the passed code immediately before compiling the current digest file.
/---

# ....................{ PRECOMPILERS                       }....................
:func.document <<'/---'
void ::precompile_zeshy_names()

Prepare for compiling the current digest file after sourcing the `zeshy`
codebase. Specifically, record the names of all currently defined aliases,
functions, and globals again, then difference such names with the names that
:compile_zeshy_setup() previously recorded. Their difference is exactly the set
of all such names defined by the `zeshy` codebase and hence to be compiled into
the current digest file.
/---

# --------------------( WASTELANDS                         )--------------------
# Recurse into all immediate subdirectories of the passed directory for which the
# function `:is_package_manager_$(get_path_basename "${suboverlay_dirname}")` both
# exists _and_ reports success (i.e., if the package management system identified
# by such subdirectory is available under the current system). Since such
# subdirectories correspond to package managers, such directory is referred to as
# a *package manager suboverlay*. Specifically, this function pushes all matching
# subdirectories onto the front of the *overlay stack* (i.e., the FIFO stack of
# all overlays to be compiled into the current digest file).

# To notify such scripts of their location,
# string local ${ZESHY_SCRIPT_NAME} is guaranteed to be set to the absolute path
# of the current script being sourced. 

# Compile the passed directory into the current digest file as a *distribution
# suboverlay* (i.e., containing Linux distribution-specific files).

# actively searched suboverlays , such
# 
# * Is a subdirectory, registers such subdirectory as a *`zeshy` overlay* (i.e.,
#   appends such subdirectory to the overlay stack) to be subsequently compiled.
# 
# into the current digest file.
# 
# Since such scripts are intended to be
# configurable, such directory is referred to as a *configuration suboverlay*.
# 
# Compile the `passed directory into the current digest file as a *pathable
# suboverlay* (i.e., containing files and subdirectories whose basenames are the
# names of external commands to be searched for in the current command hash).
# Specifically, this function filters the list of all files and subdirectories in
# such directory for paths whose basenames are external commands in the current
# user's *command hash* (e.g., in such user's ${PATH}) and for each path that:
# 
# * Is a file, registers such file as a `zsh` script to be subsequently sourced.
# * Is a subdirectory, registers such subdirectory as a *`zeshy` overlay* (i.e.,
#   appends such subdirectory to the overlay stack) to be subsequently compiled.
# /---

# Compile the passed directory into the current digest file as a *configuration
# suboverlay* (i.e., containing user-editable configuration files). Specifically:
# 
# * Register all files in such directory _and_ subdirectories of such directory as
#   `zsh` scripts to be subsequently sourced.
# * Copy all such scripts _not_ already found in the current user's `zeshy`
#   configuration directory to the latter directory.

# Compile the passed directory into the current digest file as a *simple
# suboverlay* (i.e., containing files and subdirectories unconditionally compiled
# into such digest regardless of pathname or content). Specifically, register all
# files in such directory _and_ subdirectories of such directory as `zsh` scripts
# to be subsequently sourced.

#FUXME: Correct and expand documentation once we properly refactor this.

# Compile the `if_config` subdirectory of the passed directory into the current
# digest file if such subdirectory exists or return immediately otherwise. In the
# former case, this function:

  # `startup_zeshy_`-prefixed functions.

# ....................{ APPENDERS                          }....................
# :func.document <<'/---'
# void :append_zeshy_digest_source_dir(string dirname)
# 
# Append all `zsh` scripts in the passed directory _and_ subdirectories of such
# directory to ${ZESHY_OVERLAY_FILENAMES}, the list of all such scripts to be
# subsequently sourced.
# /---

# ", performing last-minute functionality immediately
# before doing so. (Namely, dynamically synthesize all remaining functions to be
# compiled into such digest.)

# Prepare command-specific zsh scripts in the passed `zeshy` overlay directory.
# Namely, append:
# 
# * All `zsh` scripts in this overlay's command directory matching commands in
#   the current user's $PATH to the list of autoloadable files.
# * All subdirectories in this overlay's command directory matching such
#   commands to the overlay stack.

# Recursively copy all files from the `if_config` subdirectory of the passed
# overlay directory to `zeshy`\'s user configuration directory, if not already
# found in the latter.
