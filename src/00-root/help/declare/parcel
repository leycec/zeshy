#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

#FIXME: This isn't right, of course. We're declaring documentation under the
#current parcel, currently. To rectify this, a technique resembling the
#following should apply:
#
#    #FIXME: Define :set_parcel_to_path(), ideally renaming
#    set_parcel_as_script().
#
#    # Set the current parcel to that of @{05-parcel}.
#    :set_parcel_to_path "${ZESHY_HOME}/"*-core/*-declare/*-parcel
#
#    # Caller declare_*() functions here.
#    ...

:parcel <<'/---'
Document all globals, functions, and aliases declared by @{*-parcel}.
/---

# ....................{ GLOBALS                            }....................
:global.document <<'/---'
:string ZESHY_PARCEL_NAME

Current parcel name, identifying the most recently declared parcel (e.g., by a
call to declare_parcel_as_script() or :parcel()).
See such functions for further details.
/---

:global.document <<'/---'
:map ZESHY_PARCEL_NAME_TO_ALIAS_NAMES

Map each parcel name to an internally null-delimited string of the names of all
aliases contained in such parcel. Since such names can technically contain null
characters (although rare in practice), all actual nulls in such names are
escaped (i.e., prefixed with `\`) and must be ignored as delimiters.

Ideally, this would be structured as a *map of lists* (i.e., mapping each parcel
name to the list of the names of all aliases contained in such parcel). Since
`zsh` currently fails to support nested structures (along with all other popular
shells, to be fair), the desired map value instead joins each such list on the
null character into a string. The original list is losslessly retrievable from
such string value by:

* Splitting such string on nulls, ignoring *escaped nulls* (i.e., `\`-prefixed
  null characters).
* Removing the `\` character prefixing each escaped null in the resulting list.
/---

:map_global ZESHY_PARCEL_NAME_TO_FUNCTION_NAMES <<'/---'
Map each parcel name to an internally null-delimited string of the names of all
functions contained in such parcel. See ${ZESHY_PARCEL_NAME_TO_ALIAS_NAMES} for
further details.
/---

:map_global ZESHY_PARCEL_NAME_TO_GLOBAL_NAMES <<'/---'
Map each parcel name to an internally null-delimited string of the names of all
globals contained in such parcel. See ${ZESHY_PARCEL_NAME_TO_ALIAS_NAMES} for
further details.
/---

# ....................{ FUNCTIONS                          }....................
:func.document <<'/---'
:void add_parcel_alias(:string parcel_name, :string alias_name)

Add the passed alias to the passed parcel. Since parcels are `zeshy`-specific
abstractions, this only notes such parcel to ``contain'' such alias for
documentation and lookup purposes.
/---

:func.document <<'/---'
:void add_parcel_function(:string parcel_name, :string function_name)

Add the passed function to the passed parcel. See add_parcel_alias() for further
details.
/---

:func.document <<'/---'
:void add_parcel_global(:string parcel_name, :string global_name)

Add the passed global to the passed parcel. See add_parcel_alias() for further
details.
/---

:func.document <<'/---'
:void declare_parcel_with_stdin[
    args =  (:string parcel_name),
    stdin = (:string documentation)]

Declare a new parcel, uniquely identified with the passed absolute path and
documented with standard input (e.g., as a here-document). See :parcel.declare()
for further details.
/---

:func.document <<'/---'
:void declare_parcel_as_script(
    :string script_name = "${ZESHY_SCRIPT_FILENAME}",
    :string documentation)

Declare a new parcel, uniquely identified with the passed `zeshy` script
(defaulting to the currently sourced script, if compiling `zeshy`\'s user digest
file) and documented with the passed help string. See :parcel.declare() for
further details.
/---

:func.document <<'/---'
:void :parcel[
    args =  (:string script_name = "${ZESHY_SCRIPT_FILENAME}"),
    stdin = (:string documentation)]

Declare a new parcel, uniquely identified with the passed `zeshy` script
(defaulting to the currently sourced script, if compiling `zeshy`\'s user digest
file) and documented with standard input (e.g., as a here-document). See
:parcel.declare() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
