#!/usr/bin/env zsh
# ====================[ process                            ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Process, implementing supplementary process-handling functionality (over
# and above that already implemented in Zeshy Core).

# ....................{ ALIASES                            }....................
interactive_alias ka='killall'
interactive_alias ka9='killall -9'

# ....................{ TESTS                              }....................
# bool is_cronjob(void)
#
# Return true if the current process is the grandchild of a "cron" process.
is_cronjob() {
    die_unless_no_arguments
    is_nonempty "${ZESHY_IS_CRONJOB}"
}

# bool is_running(char *filename)
#
# Return true if some process is running the passed command.
is_running() {
    die_unless_one_argument 'expected exactly one filename'
    quietly get_pids_for_running "${@}"
}

# bool is_running_as(char *username, char *filename)
#
# Return true if some process is running the passed command under the passed
# user.
is_running_as() {
    die_unless_two_arguments 'expected exactly one username and filename'
    quietly get_pids_for_running_as "${@}"
}

# bool is_running_pid(int pid)
#
# Return success a process is running under the passed process ID: e.g.,
#
#     # sleep 10s &
#     # is_running_pid $! and echo "Awaken."  # prints "Awaken."
is_running_pid() {
    die_unless_one_argument 'expected exactly one process ID'
    quietly kill -0 "${1}"
}

# ....................{ GETTERS ~ id                       }....................
# int get_pid(void)
#
# Return the PID (i.e., process ID) of the current process.
get_pid() {
    die_unless_no_arguments
    print "${$}"
}

#FIXME: Generalize to not require "pgrep".
# char *get_pids_for_running(char *filename)
#
# Return a newline-delimited string of process IDs for all processes running the
# passed command. If no such process exists, return the empty string and fail.
get_pids_for_running() {
    die_unless_one_argument 'expected exactly one filename'
    die_unless_installed pgrep

    string command="${1}"
    if is_pathname_absolute "${command}"
    then pgrep -fx "${command}" 2>/dev/null
    else pgrep  -x "${command}" 2>/dev/null
    fi
}

#FIXME: Generalize to not require "pgrep".
# char *get_pids_for_running_as(char *username, char *filename)
#
# Return a newline-delimited string of process IDs for all processes having the
# passed command name running under the passed user. If no such process exists,
# return the empty string and a failure return code.
get_pids_for_running_as() {
    die_unless_two_arguments 'expected exactly one username and filename'
    die_unless_installed pgrep

    string username="${1}" command="${2}"
    if is_pathname_absolute "${command}"
    then pgrep -u "${username}" -fx "${command}" 2>/dev/null
    else pgrep -u "${username}"  -x "${command}" 2>/dev/null
    fi
}

# ....................{ GETTERS ~ path                     }....................
# char *get_process_command_name(int pid = PID)
#
# Get the name of the command run by the process with the passed PID, defaulting
# to that of the current process.
get_process_command_name() {
    string process_command_line="$(get_process_command_line "${@}")"
    
    # Array of strings split on null bytes from the above command-line string.
    # This is the Linux convention, and probably not applicable to other *nix.
    list process_command_line_parts
         process_command_line_parts=( "${(0)process_command_line}" )
    
    # If the current process is a Zsh script (and it better be!), then the path
    # to this process is given by the third string in this array: e.g.,
    #
    #   # For a Zeshy script "h3110", this array resembles...
    #   process_command_line_parts=( zsh /usr/bin/zeshy h3110 )
    string process_path
    if is "${process_command_line_parts[1]}" == *sh si
    then process_path="${process_command_line_parts[3]}"
    else process_path="${process_command_line_parts[1]}"
    fi

    # Return the basename of this command.
    basename -- "${process_path}"
}

# char *get_process_command_line(int pid = PID)
#
# Get the command line run by the process with the passed PID, defaulting to
# that of the current process. This is a string consisting of (in order):
#
# * Either the absolute or relative path to the command. In the latter case,
#   there is no reliable means of resolving this path into an absolute path.
# * Each command line argument passed to such command prefixed by a null
#   delimiter (i.e., "\x00").
#
# Due to such inconsistencies, use such strings *ONLY* for non-critical
# display purposes rather than critical functionality.
get_process_command_line() {
    die_unless_at_most_one_argument 'expected one optional process ID'
    integer pid=${1:-$(get_pid)}

    # Absolute path to the file with the command line for the passed process.
    string command_line_file="/proc/${pid}/cmdline"
    die_unless_file "${command_line_file}"
    cat "${command_line_file}"
}

# ....................{ PRIORITIZERS                       }....................
# char *deprioritize(
#   char *command_name, char *command_arg1, char *command_arg2, ...)
#
# Run the passed command under deprioritized CPU and I/O scheduling.
deprioritize() {
    # List of commands to be run, prefixed by commands deprioritizing the passed
    # command. All systems provide "nice" but not necessarily "ionice".
    list commands; commands=( nice -n${ZESHY_NICENESS_LO} )

    # If "ionice" is installed, append it to this list.
    if is_installed ionice; then
        commands+=( ionice
            -c${ZESHY_IONICENESS_CLASS_LO}
            -n${ZESHY_IONICENESS_LO}
        )
    fi

    # Append the passed command to the list of commands to be run and run.
    commands+=( "${@}" )
    run "${commands[@]}"
}

# ....................{ RUNNERS                            }....................
# void run_as_superuser(char *command)
#
# Run the passed command as the superuser.
run_as_superuser() {
    run_as root "${@}"
}

# void run_as(char *username, char *command)
#
# Run the passed command as the passed user.
run_as() {
    die_unless_at_least_two_arguments\
        'expected exactly one username and one command'

    # Locally set "${ZESHY_RUN_AS}". The run() function notes this variable as
    # set and behaves accordingly...
    string ZESHY_RUN_AS="${1}"; shift

    # Call run() with all remaining arguments: the command to be run.
#   print "running as ${ZESHY_RUN_AS}: ${@}"
    run "${(q)@}"
}

# void run(char *command_name, char *command_arg1, char *command_arg2, ...)
#
# Run the passed builtin or command, ideally quote-protected to avoid premature
# parsing of shell-specific syntax (e.g., pipes, redirections). Where passing a
# parameter expansion to this function, force such protection with "(q)": e.g.,
#
#   # This is good. Manually quote-protect with single or double quotes.
#   >>> run 'screen -list | grep --count eschaton'
#   969
#
#   # This is good. Automatically quote-protect with flag "(q)".
#   >>> string command=$(screen -list | grep --count singularity)
#   >>> run "${(q)command}"
#   696
#
#   # This is doubleplusungood. Zsh parses the pipe prior to calling run().
#   >>> run screen -list | grep --count eschaton
run() {
    die_unless_arguments

    # Command line to run, parsed from the passed parameters as follows:
    #
    # * "(Q)" strips one level of quote-protection from the passed parameters,
    #   and is largely safe. This helps undo prior "(q)" quote-protections.
    # * "(=)" splits these parameters into words: e.g., the string
    #   "ls ~/peak-oil" splits into 2 words, "ls" and "~/peak-oil".
    #   "ls ~/peak-oil" is not an executable command; "ls" is.
    list command; command=( "${(Q)=@}" )
    
    # Command name to run (i.e., first word of the passed command line).
    string command_name="${(Q)command[1]}"
    
    # Absolute path to the command to be run or the command name if this command
    # is a built-in, alias, or function rather than an external command. If this
    # command does not exist, fail.
    string command_path; command_path="$(whence "${command_name}")" or
        die "\"${command_name}\" not found in \$PATH"

    # If the passed command has not been overridden by a shell alias or
    # function, run it as a command. Do not call the customary is_installed()
    # function, as that does not test whether or not a command is overridden.
    if is_pathname_absolute "${command_path}"; then
        # If running this command under a different user, do so.
        if is_set_nonempty 'ZESHY_RUN_AS' and
           is "${ZESHY_RUN_AS}" != "${USER}" si; then
            # If the target user is the superuser, use "sudo" to take
            # advantage of password caching.
            #
            # Note that we do not use the "(@)" expansion in either of the
            # following two commands, as that would split the array into
            # discrete command arguments.
            if is "${ZESHY_RUN_AS}" == 'root' si and is_installed sudo; then
#               echo "sudoing as ${ZESHY_RUN_AS}: ${command}"
                sudo -E "${command}"
            # Otherwise, use "su".
            else
#               echo "suing as ${ZESHY_RUN_AS}: ${command}"
                su --preserve-environment\
                   --command "${command}" "${ZESHY_RUN_AS}"
        fi
        # Otherwise, run this command as the current user. Do use the "(@)"
        # expansion here, as calling the command manually requires we split the
        # array into discrete command arguments. Evaluate this command to ensure
        # the shell correctly handles shell constructs (e.g., "|").
        else eval "${command[@]}"
        fi
    # Otherwise, the passed command must be a shell built-in. Evaluate it!
    else
#       echo "evaling: ${command}"
        eval "${command[@]}"
    fi
}

# ....................{ REDIRECTORS                        }....................
# int one_if(char *command)
#
# Run the passed command quietly (i.e., squelching output) and, if exiting
# with success, return "1"; otherwise, return the empty string: e.g.,
#
#     >>> integer IS_MUTT_INSTALLED=$(one_if 'is_installed mutt')
#     >>> is_nonzero "${IS_MUTT_INSTALLED}" and print '"mutt" is installed'
#     "mutt" is installed
# 
# Note, commands should be passed as quoted strings to prevent the calling
# shell from evaluating pipes, redirections, et al. prior to passing the
# command. (See the run() function, above.)
one_if() {
    quietly "${@}" and print 1 or true
}

# void quietly_as(char *username, char *command)
#
# Run the passed command as the passed user quietly (i.e., squelching output).
quietly_as() {
    run_as "${@}" 1>/dev/null 2>&1
#   run_as "${@}"
}

# void quietly(char *command)
#
# Run the passed command quietly (i.e., squelching output).
quietly() {
    run "${(q)@}" 1>/dev/null 2>&1
}

# char *stderr_to_stdout(char *command)
#
# Divert standard error to standard output.
stderr_to_stdout() {
    run "${(q)@}" 2>&1
}

#FIXME: Obsolete.
    #FIXME: This only strips one dash. How to strip more?
    # Strip prefixing dashes from this string to prevent the "basename" command
    # from intepreting such dashes as options to that command. This is actually
    # a real-world concern. By convention, for example, Linux prefixes login
    # shell command lines with one dash.
#   string process_command_line="${$(get_process_command_line)#-}"
#   string process_command_line="$(get_process_command_line)"
#   process_command_line="${process_command_line#-}"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
