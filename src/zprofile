#!/usr/bin/env zsh
# ====================[ zprofile                           ]====================
#                     [ Time-stamp: "2009-04-18 19:23:19 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Run after "zshenv" but before "zshrc" and "zlogin", for login shells.
#
# --------------------( VARIABLES                          )--------------------
# This script aggregates all environment variables into one file. Note that many
# distros dis-aggregate such environment variables into separate files under
# "/etc/env.d/", which they then programmatically aggregate into a composite
# "/etc/profile.env" file, which this script then sources. Since this tends to
# make for a rather clumsy and overly abstract means of defining environment
# variables, Zeshy prefers to "simply" clump such variables together, here.

# ....................{ PREAMBLE                           }....................
# Absolute path to the current script.
local zprofile_path="$(readlink --canonicalize-existing "${0}")"

# Directory having the current script.
[[ -n "${ZESHY_HOME}" ]] ||
    export ZESHY_HOME=$(readlink --canonicalize-existing "$(dirname "${zprofile_path}")/..")

# Import Zeshy Core. Note that "source zeshy" is insufficient on the first
# logon. Hence, our usage of an absolute path for safety here.
if [[ $(whence -w zimport) =~ ': function' ]]
then zimport zeshy/core
else source "${ZESHY_HOME}/src/zeshy/core"
fi

# Inform the user that this script is being imported.
utter "loading \"${zprofile_path}\"..."

# ....................{ DEPENDENCIES                       }....................
# Import all Zeshy dependencies required by this file. (Surprisingly many.)
zimports zeshy/file/file zeshy/shell/shell

# ....................{ PROPERTIES                         }....................
# 077 would be more secure, but 022 is generally quite realistic.
umask 022

# ....................{ IMPORTS                            }....................
# Add Zeshy's "site-functions/" to the function path, if that directory exists.
is -n "${ZESHY_HOME}" && -d "${ZESHY_HOME}/site-functions" si and
    FPATH="${ZESHY_HOME}/site-functions:${FPATH}"

# Import all shell scripts under "/etc/profile.d/", if that directory exists.
# Unlike "/etc/env.d/" shell scripts, which perform simple variable assignments,
# these scripts perform more complex (and therefore time- and space-consumptive)
# functionality. Fortunately, however, there rarely tend to be many of them.
if is_dir '/etc/profile.d'; then
    string shell_options=${-}

    setopt nullglob
    string profile_script_path
    for profile_script_path in '/etc/profile.d/'*.sh; do
        is_dir "${profile_script_path}" and source "${profile_script_path}"
    done
    unsetopt nullglob

    set -${shell_options}
    unset sh
fi

# If "/etc/profile.env" exists, import it. Several popular Linux distributions
# programmatically aggregate this file as follows:
#
# * Under Gentoo, "env-update" from the files in "/etc/env.d/".
# * Under Exherbo, "eclectic env update" from the files in "/etc/env.d/".
is_file '/etc/profile.env' and source '/etc/profile.env'
export PATH

# ....................{ PATHS                              }....................
# Set the user-specific $PATH.
PATH_init

# Read X.Org application defaults from this path.
string global XAPPLRESDIR="${HOME}/.X"
make_directory_if_not_found "${XAPPLRESDIR}"

# ....................{ *NIX                               }--------------------
# Enable Unicode support, if not already enabled.
string global LANG="${LANG:-en_US.utf8}"
string global LC_ALL="${LC_ALL:-en_US.utf8}"

# Enable a default command-line editor and pager, if not already enabled.
string global EDITOR="${EDITOR:-"$(which_commands emacs vim nano ed)"}"
string global PAGER="${PAGER:-"$(which_commands less more)"}"

# ....................{ ZSH                                }....................
# Enable an in-memory cache of ZSH history; persist this history to some file.
integer global HISTSIZE=1024  # maintain this number of lines of history
integer global SAVEHIST=1024  # ..retain this number of lines of history between logins
string global HISTFILE="${ZESHY_CACHE_HOME}/history"

# ....................{ TERMINAL                           }--------------------
#FIXME: Shift to "zshrc" instead, yes?
# Several applications currently fail under long ${TERM} strings (e.g.,
# "rtorrent"). Convert such strings when matched to equivalent shorter strings.
if is "${TERM}" == rxvt-unicode-256color si; then
    utter 'truncating ${TERM} to "rxvt-unicode" for safety...'
    string global TERM=rxvt-unicode
fi

# ....................{ MAIN                               }--------------------
string global PATH

#FIXME: Obsolete.
#is_set 'EDITOR' or string global EDITOR=$(which_binaries_nonfatal emacs vim nano ed)
#is_set 'PAGER'  or string global PAGER=$(which_binaries_nonfatal less more)
#zimport zeshy/type/integer
#zimport zeshy/os

#FIXME: Only do so if Firefox is installed. Actually, this probably no longer
#matters, does it? (It's been just a few years...)
# Disable Firefox's Pango-enabled font antialiasing on low-end machines.
#export MOZ_DISABLE_PANGO=$(one_if is $(get_memory_total) -ge GB si)

# Lastly, export munged paths into our caller's shell environment.
#export MANPATH INFOPATH

#FIXME: Hmm; and what, prey tell, is this?
#export XUSERFILESEARCHPATH="${XAPPLRESDIR}/%N"
#make_directory_if_not_found "${XAPPLRESDIR}" "${XUSERFILESEARCHPATH}"

#!/bin/zsh
# ....................{ PREAMBLE                           }....................
# Absolute path to the current script.
#local zprofile_path="$(readlink --canonicalize-existing "${0}")"

# Directory having the current script.
#[[ -n "${ZESHY_HOME}" ]] ||
#    export ZESHY_HOME=$(readlink --canonicalize-existing "$(dirname "${zprofile_path}")/..")

# Import Zeshy Core.
#if [[ $(whence -w zimport) =~ ': function' ]]
#then zimport zeshy/core
#else source "${ZESHY_HOME}/src/zeshy/core"
#fi

# Inform the user that this script is being imported.
#utter_import "${zprofile_path}"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
