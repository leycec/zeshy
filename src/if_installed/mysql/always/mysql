#!/usr/bin/env zsh
# ====================[ mysql                              ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy MySQL.

# ....................{ ALIASES                            }....................
interactive_alias mysql=mysql_shell

# ....................{ MYSQL SHELL                        }....................
# void mysql(string username = 'root', string password, ...) --OR--
# void mysql(string password, ...)
#
# Run the interactive MySQL shell with sane option defaults under the passed
# username and password. Username defaults to "root", if not passed.
mysql_shell() {
    string username password

    if is_two_args; then
        username="${1}"; shift
        password="${2}"; shift
    elif is_declared '1'
    then username="${1}"; shift
    else username=root
    fi

    # Yes, the absence of a space after "-p" is intentional. Thanks, MySQL!
    utter "logging in as \"${username}\"..."
    mysql "${ZESHY_MYSQL_OPTIONS[@]}" -u "${username}" -p"${password}" "${@}"
}

#FIXME: Trivially silly as defined. Improve in accordance with Zeshy apache2.
# ....................{ PRINTERS                           }....................
# void mysql_info()
#
# Print MySQL-specific metadata, including:
#
# * Version.
print_mysql_info() {
    die_if_args
    mysql -V
}

#FIXME: Unsafe. Passwords should only be accepted as stdin -- not cached in the
#Zsh history as recallable commands.
# ....................{ SETTERS                            }....................
# void mysql_set_password(string username = 'root')
#
# Set the passed password for the passed MySQL username. Username defaults to
# "root", if not passed. Note that new users are best created via interactive
# "CREATE USER" SQL commands entered as the root user: e.g.,
#
#     # Enter the interactive MySQL shell.
#     mysql
#
#     # Create a new user and password.
#     CREATE USER 'new_username'@'localhost' IDENTIFIED BY 'password_for_new_username';
#
#     # Assign privileges to this user.
#     GRANT ALL ON *.* TO 'new_username'@'localhost';
#
#     # And... we're done.
#     exit
mysql_set_password() {
    # Validate passed arguments.
    die_unless_no_or_one_arg 'expected optional username'

    string username password
    if is_declared '2'; then
        username="${1}"
        password="${2}"
    else
        username="root"
    fi

    read password

    utter "setting \"${username}\" password..."
    try mysqladmin -u "${username}" password "${password}"
}

# ....................{ MAKERS                             }....................
# void make_mysql_database(string database_name, string username = 'root')
#
# Make a new database using the passed MySQL username. The username defaults to
# the "root" user and the password defaults to nothing, in which case MySQL
# interactively queries you for that user's password.
make_mysql_database() {
    # Validate passed arguments.
    die_unless_at_least_one_arg 'expected at least one database name'
    string database_name="${1}" username="${2:-root}"

    utter "creating database \"${database_name}\" as user \"${username}\"..."
    if is_nonempty password
    then mysqladmin -u "${username}" -p "${password}" create "${database_name}"
    else
}

# --------------------( WASTELANDS                         )--------------------
