#!/usr/bin/env zsh
# ====================[ screen                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle "screen"-driven shell multiplexing.

# ....................{ ALIASES                            }....................
interactive_substitution {sc}reen='screen -U'
interactive_abbreviation {sc}reen{r}estore='restore_screen_session'

# ....................{ GETTERS                            }....................
# integer get_screen_session_count(
#   string session_name, string username = "$(get_current_user)")
#
# Get the number of "screen" sessions with the passed name under the passed user
# (defaulting to the current user).
get_screen_session_count() {
    # Validate passed arguments.
    die_unless_one_or_two_args 'expected one session name and optional username'
    string session_name="${1}" username
    username="${2:-$(get_current_user)}"

    # Count matching sessions.
    run_as "${username}" 'screen -list' |
        get_string_pcre_line_match_count "^\.${session_name}[[:space:]]"
}

# ....................{ PRINTERS                           }....................
# string print_screen_sessions(void)
#
# Print all screen sessions attached to the current user.
print_screen_sessions() {
    die_if_args
    screen -list
}

# ....................{ MUNGERS                            }....................
# void remove_screen_dead_sessions(string username = "$(get_current_user)")
#
# Remove all dead (i.e., destroyed, killed, zombie) "screen" sessions under the
# passed user (defaulting to the current user).
remove_screen_dead_sessions() {
    # Validate passed arguments.
    die_unless_no_or_one_arg 'expected optional username'
    string username; username="${1:-$(get_current_user)}"

    # Remove dead sessions. Since "screen -wipe" returns non-zero exit status if
    # no such sessions exist, squelch such status with "or true".
    run_quietly_as "${username}" 'screen -wipe or true'
}

# void restore_screen_session(string session_name)
#
# Reattach the passed currently detached "screen" session.
restore_screen_session() {
    die_unless_one_arg 'expected one screen session name'
    screen -d -a -A -r -- "${1}"
}

# ....................{ RUNNERS                            }....................
# void screenify(string command, string username = "$(get_current_user)")
#
# Screenify the passed command. Specifically:
#
# * If no screen session named according to the basename of the passed command
#   has been attached to the passed user, then attach a new screen session
#   having this name to this user running the passed command.
# * Otherwise, reattach this existing screen session to this user.
#
# The username defaults to the current user, if not passed.
screenify() {
    # Validate passed arguments.
    die_unless_one_or_two_args 'expected one command and optional username'
    string screen_command="${1}" screen_username screen_session_name
    screen_username="${2:-$(get_current_user)}"
    screen_session_name="$(get_basename "${screen_command}")"

    # Locate "screen" and check whether or not a session already exists.
#   string screen=$(which_command screen)
    integer screen_session_count
    screen_session_count="$(get_screen_session_count "${screen_username}" "${screen_session_name}")"
    say "screen_session_count: ${screen_session_count}"

    # screen's argument passing engine is a wee faulty. Order is important in
    # the argument list below, therefore.
    if (( screen_session_count == 0 )); then
        say "attaching ${screen_session}..."
        run_as "${screen_username}"\
          screen -m -fa -U -S "${screen_session}" "${screen_command}"
    elif (( screen_session_count == 1 )); then
        say "reattaching ${screen_session}..."
        run_as "${screen_username}" screen -d -a -A -r "${screen_session}"
    else die "${screen_session_count} \"${screen_session}\" screen sessions already started"
    fi
}

# --------------------( WASTELANDS                         )--------------------
#       get_string_line_match_count "^.${session_name}[[:space:]]"
#   screen_session_count="$(run_as "${screen_username}" 'screen -list' | get_string_line_match_count ".${screen_session_name}[[:space:]]")"
    #FIXME: Call get_string_pcre_line_match_count() here rather than "grep".
#   screen_session_count="$(run_as "${screen_username}" "screen -list | grep --count '\.${screen_session}[[:space:]]'")"
