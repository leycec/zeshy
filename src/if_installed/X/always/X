#!/usr/bin/env zsh
# ====================[ X                                  ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle X11 and all forks thereof:
#       X.org, we're winking at you.

# ....................{ ALIASES                            }....................
interactive_substitution {s}tart{x}='start_x'

# ....................{ STARTERS                           }....................
# void start_x(string startx_option1, string startx_option2, ...)
#
# Start the X11 server and a client session connecting to such server under
# the passed "startx" options. This function is a helper wrapping the "startx"
# command, itself a helper wrapping the "xinit" command, supporting:
#
# * Implicit logging of X11 standard error and output to "~/.xsession",
#   silently overwriting any prior such log.
function start_x() {
    run_quietly_writing_standard_output_and_error_to_file startx "${@}"
}

get_xset_output_under_heading()
# ....................{ PRINTERS                           }....................
# string print_x(void)
#
# Print a human-readable synopsis of current X11 settings.
function print_x() {
    die_if_args
    print_x_keyboard
    print_x_screen
}

# string print_x_keyboard(void)
#
# Print a human-readable synopsis of current X11 keyboard settings.
function print_x_keyboard() {
    # Validate sanity.
    die_if_args

    # Print all "setxkbmap" information, as even the most verbose of the
    # information output by this utility is informatively brief.
    is_installed setxkbmap and {
        say_first_section 'setxkbmap'
        setxkbmap -print -verbose 10
    }

    #FIXME: Ugh. It'd be great to define a function get_xset_status_with_heading()
    #applicable to this and the next function.
    # Print all display-specific "xset" information.
    say_next_section 'xset'
    xset -q | grep '^Keyboard Control:$' --after-context=13
}

function get_xset_status_with_heading() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one heading'
    die_unless_installed xset
    string heading="${1}"
    list xset_status_lines

    # Split "xset" status output into lines.
    set_list_to_string_lines xset_status_lines "$(xset -q)"

    # Remove all lines preceding such heading.

#   for line ("${xset_status_lines[@]}") {
#
#   }
}

# string print_x_screen(void)
#
# Print a human-readable synopsis of current X11 display settings, including:
#
# * Current resolution.
# * Dots per inch (DPI).
function print_x_screen() {
    die_if_args

    # Print a subset of all "xdpyinfo" information, as most of the information
    # output by this utility is considerably more verbose than usually desired.
    say_first_section 'xdpyinfo'

    # Copy the output of "xdpyinfo" into a local variable.
    string display_info; display_info="$(xdpyinfo)"

    # Grep this variable for relevant lines.
    match_first_line ' *dimensions: ' "${display_info}"
    match_first_line ' *resolution: ' "${display_info}"
    match_first_line ' *depth of root window: ' "${display_info}"

    # Print all "xrandr" information, as most of the information output by this
    # utility is informatively brief enough to be of general use.
    say_next_section 'xrandr'
    xrandr

    # Print all display-specific "xset" information.
    say_next_section 'xset'
    _print_x_dpms_info
    #FIXME: Uhm.
    xset -q | grep '^Colors:$' --after-context=1
}

# ....................{ PRINTERS ~ dpms                    }....................
# string print_x_dpms_info(void)
#
# Print X11 Display Power Management Signaling (DPMS) and screen saver
# information.
function print_x_dpms_info() {
    die_if_args
    say 'displaying X11 DPMS settings...'
    _print_x_dpms_info
}

function _print_x_dpms_info() {
    die_if_args
    string xset_output="$(xset -q)"
    print "${xset_output}" | grep '^Screen Saver:$'       --after-context=2
    print "${xset_output}" | grep '^DPMS (Energy Star):$' --after-context=2
}

# ....................{ SETTERS                            }....................
# void disable_x_dpms(void)
#
# Disable screen blanking (i.e., DPMS-managed monitor shutdown on inactivity).
# This is particularly helpful while enjoying media but should be manually re-
# enabled when done.
function disable_x_dpms() {
    die_if_args
    interactively say 'disabling X11 DPMS...'
    xset s off
    xset -dpms
    print_x_dpms_info
}

# void enable_x_dpms(void)
#
# Enable screen blanking (i.e., DPMS-managed monitor shutdown on inactivity).
function enable_x_dpms() {
    die_if_args
    interactively say 'enabling X11 DPMS...'
    xset s on
    xset +dpms
    print_x_dpms_info
}

# ....................{ STARTUP                            }....................
#FIXME: Interesting, but not terribly relevant to most people. Still, it'd be
#nice to integrate... Right; just shift into a new "X"-specific config file.
#Done! I'm not convinced we need to create such directory if not found but such
#global is set, so just excise this function.

# void setup_x(void)
#
# Initialize Zeshy-specific X11 integration.
function setup_x() {
    #FIXME: "XAPPLRESDIR" now obsoleted by "XUSERFILESEARCHPATH". Delete the
    #former; retain the latter, after upgrading X11.
    # Absolute path of the user-specific directory with Xt-driven (e.g., Xaw,
    # Motif) configuration files containing application resources.
    string_global_export\
        XAPPLRESDIR\
        XUSERFILESEARCHPATH

    #FIXME: What's the *REAL* canonical name for such dir?
    XAPPLRESDIR="${HOME}/.Xt"
    XUSERFILESEARCHPATH="${XUSERFILESEARCHPATH:-${XAPPLRESDIR}/%N}"
#   make_dir_if_not_found "$(get_path_dirname "${XUSERFILESEARCHPATH}")"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Hmm; this really belongs in Fluviol, not here. By the time a shell has
#started up in X, you're already long past the point where you would have needed
    #FUXME: Be nice to encapsulate this functionality in a function.
    # ">!" truncates the log prior to writing.
#   run_with_unified_output startx "${@}" >! "${HOME}/.xsession"
#   string_global\
#       XUSERFILESEARCHPATH="${XUSERFILESEARCHPATH:-${HOME}/.Xt/%N}"
