#!/usr/bin/env zsh
# ====================[ cpufreq-set                        ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy cpufrequtils, handling CPU frequency scaling.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_processor_governor(string governor_name, string error_message = '')
#
# Throw an exception unless a processor governor with the passed name exists.
die_unless_processor_governor() {
    die_unless_one_or_two_args\
        'expected one governor name and optional error message'
    string processor_governor="${1}"
    is_processor_governor "${processor_governor}" or die\
        "${2:-\"${processor_governor}\" not an available governor}"
}

# ....................{ TESTS                              }....................
# bool is_processor_governor(string governor_name)
#
# Return true if a processor governor with the passed name exists (i.e., if the
# current kernel has builtin or module support for such governor).
is_processor_governor() {
   die_unless_one_arg 'expected one governor name'
   string governor_name="${1}" governor_names
   governor_names="$(cpufreq-info -g)"
   is_pcre_match "${governor_names}" "\b${governor_name}\b"
}

# ....................{ GETTERS                            }....................
# string get_processor_governor(string processor_index = 1)
#
# Get the frequency scaling governor currently assigned to the processor with
# the passed 1-based index (defaulting to 1, the first processor).
get_processor_governor() {
    # Validate passed arguments.
    die_unless_at_most_one_arg 'expected optional processor index'
    string processor_index="${1:-1}"
    die_unless_processor_index "${processor_index}"

    # Convert 1- to 0-based processor indices.
    (( processor_index-- ))

    #FIXME: It'd probably be slightly better to parse "cpufreq-info -o" instead.
    #Also, this is hideously Linux-specific.
    # Print the contents of the corresponding pseudo-file.
    print_text_file\
        "/sys/devices/system/cpu/cpu${processor_index}/cpufreq/scaling_governor"
}

# ....................{ SETTERS                            }....................
# string set_processor_governor(
#   string processor_index1, string processor_index2, ...,
#   string governor_name)
#
# Set the processors with the passed 1-based indices (defaulting to all
# available indices) to the passed processor governor (e.g., "ondemand"). Note
# set_processor_frequency() implicitly resets the governor for such processors
# to "userspace", when called.
set_processor_governor() {
    # Pop off the passed governor name from the passed arguments.
    die_unless_args 'expected optional processor indices and one governor name'
    string governor_name="${@[-1]}"
    die_unless_processor_governor "${governor_name}"
    pop_one_arg

    # Default indices to all available.
    is_no_args and set_args $(get_processor_indices)

    # Set governors.
    for processor_index ("${@}") {
        # Validate the current processor index.
        die_unless_processor_index "${processor_index}"
        interactively utter\
            "setting processor ${processor_index} to governor \"${governor_name}\"..."

        # Convert 1- to 0-based processor indices.
        (( processor_index-- ))
        cpufreq-set -c ${processor_index} -g ${governor_name}
    }

    # If interactive, show the truth of all things.
    is_interactive and sputter_blank_line and print_processor_scaling
}

# string set_processor_frequency(
#   string processor_index1, string processor_index2, ...,
#   string frequency)
#
# Set the processors with the passed 1-based indices (defaulting to all
# available indices) to the passed human-readable frequency (e.g., "1.8GHz")
# under the "userspace" governor.
set_processor_frequency() {
    # See set_processor_governor() for details.
    die_unless_args 'expected optional processor indices and one frequency'
    string frequency="${@[-1]}"
    is "${frequency}" =~ '\d+(\.\d+)?[TGMK]?Hz' si or
        die "\"${frequency}\" not a valid frequency (e.g., \"1.8GHz\")"
    pop_one_arg
    is_no_args and set_args $(get_processor_indices)

    for processor_index ("${@}") {
        die_unless_processor_index "${processor_index}"
        interactively utter\
            "setting processor ${processor_index} to frequency \"${frequency}\"..."
        (( processor_index-- ))
        cpufreq-set -c ${processor_index} -f ${frequency}
    }

    is_interactive and sputter_blank_line and print_processor_scaling
}

# ....................{ PRINTERS                           }....................
# string print_processor_scaling(string processor_index)
#
# Print a human-readable profile of frequency scaling (e.g., overclocking,
# underclocking) for the processor with the passed 1-based index (defaulting to
# all available indices).
print_processor_scaling() {
    # Validate sanity.
    die_unless_at_most_one_arg 'expected optional processor index'
    string processor_index="${1:-}"

    # If a processor index was passed, output "cpufreq-info" without
    # intermediate "cpufreq-info -o" output. The latter accepts no "-c" argument
    # and hence does not apply, here.
    if is_nonempty "${processor_index}"; then
        die_unless_processor_index "${processor_index}"
        cpufreq-info -c  "${processor_index}"
    # Capture "cpufreq-info" output. Since "cpufreq-info" sans options prefixes
    # output with a two-line header and since "cpufreq-info -o" yields a more
    # concise synopsis, sandwich the output of the latter between the header and
    # all remaining output of the former.
    else
        string output; output="$(cpufreq-info)"
#       get_lines "${output}" 1 2
        cpufreq-info -o
        get_lines "${output}" 3 -1
    fi
}

# --------------------( WASTELANDS                         )--------------------
#   is_no_args and {
#       integer processor_count; processor_count="$(get_processor_count)"
#       set_args "$(list_ranging_integers 1 ${processor_count})"
#   }
#   string filename="/sys/devices/system/cpu/cpu${processor_index}"
#   print_text_file "${filename}"
