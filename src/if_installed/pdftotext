#!/usr/bin/env zsh
# ====================[ pdftotext                          ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handling "pdftotext", convert PDF files to plaintext.

# ....................{ CONVERTERS                         }....................
#FIXME: "pdftotext" takes a large number of arguments. Add a new configuration
#file with such options and run "pdftotext" here under run_with_options().
#FIXME: If passed two arguments and the second such argument ends in anything
#other than ".pdf", interpret the latter as the target of a single conversion
#rather than a second PDF file to be converted.
#FIXME: After implementing all such improvements, enable:
#interactive_substitution {pdf}to{t}ext='convert_pdf_to_text_file'

# void convert_pdf_file_to_text(
#   string pathname1, string pathname2, ...)
#
# Convert the passed path (defaulting to the current directory) from PDF to
# plaintext. If such path is a:
#
# * File, convert such PDF file to plaintext.
# * Directory, convert all PDF files in such directory to plaintext.
function convert_pdf_file_to_text() {
    # Validate passed arguments.
    die_unless_args 'expected at least one filename'

    # Convert such arguments.
    for filename ("${@}") {
        die_unless_file_type "${filename}" pdf
        die_unless_file "${filename}"
        pdftotext "${filename}"
    }
}

# ....................{ GREP                               }....................
# void grep_pdf(string pattern, string pathname1, ..., string pathnameN)
#
# Grep the passed paths for PDF files with text matching the passed extended
# grep pattern.
function grep_pdf() {
    # Validate passed arguments.
    die_unless_args 'expected one grep expression and zero or more filenames'
    string pattern="${1}"
    shift_one_arg

    # Default such arguments to all PDF files in the current directory.
    is_args or set_args *.pdf

    #FIXME: Ugh. Not quite right. If passed directories, we want to non-
    #recursively search such directories for PDF files. *sigh* This suggests a
    #preliminary loop initializing a "list filenames" with such files prior to
    #actually grepping such files here.
    string basename
    for pathname ("${@}") {
        # Silently skip non-PDF files.
        is "${filename}" == *.pdf si or continue

        #FIXME: Not right. It'd be much more helpful to colorfully prefix "grep"
        #output with the PDF filename, mimicing actual "grep" output_string on files.
        basename="$(get_path_basename "${filename}")"
        say_next_section "${basename}"

        # Grep this PDF file for the passed pattern.
        pdftotext "${filename}" - | grep_path "${pattern}"
    } | output_paged
}

# --------------------( WASTELANDS                         )--------------------
#   list filenames; filenames=( "${@}" )
#   is_nonempty "${filenames[@]}" or filenames=( *.pdf )
#   echo "files: ${filenames[@]}"
        #FIXME: I'm fairly sure "pdftotext" outputs to a file in the current
        #directory rather than the parent directory as the passed file. If so,
        #default to:
        #
        #* If the parent directory of the passed file is writable, output_string to a
        #  file with the same basename excluding ".pdf" under such directory.
        #* Else, omit the second argument as we currently do.
#grep_pdf_page() {
#    page grep_pdf "${@}"
#}

#       say_banner #"==============================================================================="
#       say "grepping \"${filename:t}\"..."
#   string pathname; pathname="${1:-$(get_current_dir)}"
#   if is_file "${pathname}"
#   then pdftotext "${pathname}"
    #FIXME: This is demonstrably horrible. Zeshify.
#   else  # if is_dir "${pathname}"
#       interactively say "converting PDF files to plaintext in \"${dirname}\"..."
#       pushd "${dirname}"
#       find -iname '*.pdf' -exec pdftotext {} \;
#       popd
#   fi

#       interactively say "converting PDF files to plaintext in \"${dirname}\"..."
#       pushd "${dirname}"
#       find -iname '*.pdf' -exec pdftotext {} \;
#       popd

# ....................{ ALIASES                            }....................
#FIXME: It'd be far more elegant to rewrite grep_recursively() to manually
#recry over files rather than leverage the "--recry" option and, for each
#found PDF file, to call pdftotext() prior to calling grep on that file.
#Somewhat more work than I'm willing to invest in at the moment, however.
#alias grpdf="grep_pdf_page"

#   echo "grepping: ${filenames[@]}"
#FIXME: Obsolete.
#die "\"${filename}\" not a PDF file" #| "${PAGER}"
