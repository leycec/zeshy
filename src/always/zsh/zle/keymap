#!/usr/bin/env zsh
# ====================[ keymap                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle zsh line editor (ZLE) keymaps.

# ....................{ GETTERS                            }....................
#FIXME: "bindkey" supports an *ENORMOUS* list of options (e.g., for deleting,
#creating, and copying keymaps). It'd be great to eventually support them all.
declare_function_with_stdin <<'________________<heredoc?>________________'
void get_keymaps(void)

List all `zsh` line editor (ZLE) keymaps, delimited by newlines.
________________<heredoc?>________________
function get_keymaps() {
    die_if_args
    bindkey -l
}

declare_function_with_stdin <<'________________<heredoc?>________________'
void get_key_bindings(void)

List all `zsh` line editor (ZLE) key bindings, delimited by newlines.
________________<heredoc?>________________
function get_key_bindings() {
    die_if_args
    bindkey
}

# ....................{ STARTUP                            }....................
run_hook_on_zeshy_startup_if_shell_interactive startup_zeshy_key_bindings

#FIXME: It's a pretty bad first stab, but it'll have to do. Key bindings clearly
#warrant a new configuration file -- say, "if_config/keys". I'm thinking a
#simple list global resembling:
#
#ZESHY_KEY_BINDINGS=(
#   'C-R' history-incremental-search-backward
#   ...
#)
#
#Then, on startup, we just iterate such list and apply each such binding.

declare_function_with_stdin <<'________________<heredoc?>________________'
void startup_zeshy_key_bindings(void)

Set currently configured `zsh` line editor (ZLE) key bindings.
________________<heredoc?>________________
function startup_zeshy_key_bindings() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    # Bind:
    #
    # * <Ctrl-R> to search backward in shell history.
    # * <Ctrl-S> to search forward in shell history.
    bindkey 'C-R' history-incremental-search-backward
    bindkey 'C-S' history-incremental-search-forward
}

# --------------------( WASTELANDS                         )--------------------
