#!/usr/bin/env zsh
# ====================[ global                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle canonical shell globals, typically but not necessarily POSIX-mandated
# (e.g., ${EDITOR}, ${PAGER}).

# ....................{ GETTERS                            }....................
document_function '
string get_pager_path(void)

Get the absolute path of the pager preferred by the current user. Specifically,
get global ${PAGER}, which if unset set to the first command in the following
list installed in the current user''s ${PATH}: "less", "more".
'
function get_pager_path() {
    die_if_args
    print_string "${PAGER:=$(get_pathable_path_first less more)}"
}

document_function '
string get_list_colors(void)

Get the colon-delimited string with which "ls" colors output. Expand global
${LS_COLORS}, which if unset set to reasonable colors with "dircolors".
'
function get_list_colors() {
    # Validate sanity.
    die_if_args

    #FIXME: Probably Linux specific. I vaguely wonder what the BSD variant is...

    # If global ${LS_COLORS} has not yet been defined, do so by evaluating the
    # output of "dircolors" as a Bourne shell script. (While odd, this remains
    # the canonical method for doing so.)
    is_variable LS_COLORS or {
        die_unless_pathable dircolors
        run_command_under_shell "$(dircolors --sh)" 'sh'
    }

    # Get such colors.
    print_string "${LS_COLORS}"
}

# ....................{ GETTERS ~ editor                   }....................
document_function '
string get_editor_path(void)

Get the absolute path of the editor command preferred by the current user.
Specifically, get global ${EDITOR}, which if unset set to the first command in
the following list installed in the current user''s ${PATH}:
"emacs", "vim", "vi", "nano", "pico", "ed".
'
function get_editor_path() {
    # Emacs precedes Vi[M] not due to any personal preference on the part of
    # Zeshy developers (to the contrary, I largely prefer Vi[M]) but due to the
    # likelihood of only Emacs users installing Emacs. Since most *nix distros
    # package Vi[M] by default, the same cannot be said of Vi[M].
    die_if_args
    print_string "${EDITOR:=$(get_pathable_path_first\
        emacs vim vi nano pico ed)}"
}

document_function '
string get_editor_path_visual(void)

Get the absolute path of the visual editor command preferred by the current
user. Specifically, get global ${VISUAL}, which if unset set to the return value
of get_editor_path().
'
function get_editor_path_visual() {
    die_if_args
    print_string "${VISUAL:=$(get_editor_path)}"
}

# ....................{ PRECOMPILERS                       }....................
run_hook_on_zeshy_precompile precompile_zeshy_globals

document_function '
void precompile_zeshy_globals(void)

Define canonical shell globals, typically but not necessarily POSIX-mandated:

* ${LS_COLORS}, the ":"-delimited list of "ls"-specific color specifications.
  See get_list_command_colors().
* ${EDITOR}, the absolute path of the command-line editor preferred by the
  current user. See get_editor_path().
* ${PAGER}, the absolute path of the command-line "pager" preferred by the
  current user. See get_pager_path().
* ${VISUAL}, effectively synonymous with ${EDITOR}.
'
function precompile_zeshy_globals() {
    # Validate sanity.
    die_if_args

    # Set such globals as beneficial side effects of calling such functions,
    # discarding function output.
    run_command_silent get_pager_path
    run_command_silent get_editor_path
    run_command_silent get_editor_path_visual
}

# ....................{ STARTUP                            }....................
#FIXME: Actually, this can be shifted to precompilation time, yes? Hmm; except
#for "run_command_silent get_list_command_colors", which probably depends on
#underlying configuration file content. Look into it. Ideally, we could shift
#everything to precompilation time.
run_hook_on_zeshy_startup_if_shell_interactive\
    startup_zeshy_globals_if_shell_interactive

document_function '
void startup_zeshy_globals_if_shell_interactive(void)

Define interactive shell-specific globals. This includes:

* ${LS_COLORS}, the ":"-delimited list of "ls"-specific color specifications.
  See get_list_command_colors().
'
function startup_zeshy_globals_if_shell_interactive() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    # Set such globals as beneficial side effects of calling such functions,
    # discarding function output.
    run_command_silent get_list_colors
}

# --------------------( WASTELANDS                         )--------------------
# ${LS_COLORS} This function
#returns string global ${LS_COLORS} if set or , this function
#caches such string into string global ${LS_COLORS} as a side-effect.
#As a (hopefully) beneficial side effect, running "ls" in color terminals after
#calling this function implicitly colors all list output.

    # Absolute paths of the preferred command-line editor. Emacs precedes Vi[M]
    # not due to any personal preference on the part of Zeshy developers (to the
    # contrary, Sess strongly prefers Vi[M]) but due to the likelihood of only
    # Emacs users installing Emacs. Since most *nix distros bundle Vi[M] but not
    # Emacs by default, the same cannot be said for Vi[M].
#   string_global EDITOR
#   set_if_empty_to_evaluation EDITOR\
#       '$(get_pathable_path_first emacs vim vi nano ed)'
#   string_global_export VISUAL="${VISUAL:-${EDITOR}}"

#FUXME: This is no way needs to be here. What were we thinking? Right. Arguably,
#all getters wrapping canonical shell globals should be centralized into a new
#component -- say, "zsh/global". While possibly not the ideal long-term resting
#place for such component, it appears to beat most alternatives.

# Define generally applicable global variables specific to no other component.
# Many components define component-specific
# globals, this component defines globals specific
    # Call getter functions internally caching globals quietly. Since we just
    # want to cache such globals here, discard function output.
#   run_command_silent get_pager_command

    #FUXME: This now strikes me as overly heavyweight. Given the manner with
    #which we set ${EDITOR} and ${VISUAL} below, it's senseless to set
    #${PAGER} differently. That said, functions are nice. They guard against
    #silliness. But isn't that a bit overkill, here?

#FUXME: Not appropriate for this file. Perhaps create a new "01-global"
#directory with two files:
#
#* "constant", with the definitions above.
#* "global", wtih the definitions below.
