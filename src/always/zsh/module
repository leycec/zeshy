#!/usr/bin/env zsh
# ====================[ shell                              ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle zsh modules, C extensions typically compiled and installed with zsh.

# ....................{ TESTERS                            }....................
#FIXME: Uhm; how actually does one do this? The zsh manual explicitly suggests
#the best method is:
#
#    run_command_silent zmodload "${1}"
#
#But that's demonstrably silly. A test method shouldn't actually have non-
#idempotent side effects. In lieu of any builtin method, the best way might
#simply be to search the appropriate path under "/usr/share/zsh" for filenames
#corresponding to passed modules.

# void is_module(string module_name)
#
# Return true if zsh provides some module with the passed name.
#is_module() {
#    die_unless_arg 'expected one module name'
#    zmodload "${1}"
#}

# ....................{ LOADERS                            }....................
declare_function '
void load_zsh_module(string module_name)

Load the passed zsh module.
'
function load_zsh_module() {
    die_unless_arg 'expected one module name'
    zmodload -- "${1}"
}

declare_function '
void unload_zsh_module(string module_name)

Unload the passed zsh module.
'
function unload_zsh_module() {
    # Dismantled, this is:
    #
    # * "u", unloading this module.
    # * "i", a noop if this module is not currently loaded.
    die_unless_arg 'expected one module name'
    zmodload -ui -- "${1}"
}

# ....................{ LOADERS ~ mapfile                  }....................
declare_function '
void load_zsh_module_mapfile(void)

Load zsh module "mapfile". For safety, consider calling
run_command_with_mapfile() instead.
'
function load_zsh_module_mapfile() {
    die_if_args
    load_zsh_module zsh/mapfile
}

declare_function '
void unload_zsh_module_mapfile(void)

Unload zsh module "mapfile". For safety, consider calling
run_command_with_mapfile() instead.
'
function unload_zsh_module_mapfile() {
    die_if_args
    unload_zsh_module zsh/mapfile
}

# ....................{ RUNNERS                            }....................
declare_function '
string run_command_with_mapfile(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command with temporary access to canonical global map ${mapfile}.
Since zsh module "mapfile" exports such global, load such module immediately
before and unload such module immediately after running such command.

Leaving such module and hence such global permanently loaded inherently unsafe.
Unsetting map elements has the non-idempotent side effect of silently deleting
the file with such element name, if such file exists! Nonetheless, such global
does provide slightly more efficient access to file contents than safer
alternatives (e.g., "$(< "${filename}")"). This function renders such global
somewhat safer but *NOT* necessarily safe. Exercise caution when calling this
function. Never manually load such module!
'
function run_command_with_mapfile() {
    #FIXME: When enabled, this sporadically fails with an inscrutable error like:
    #    "(anon):82: bad math expression: operand expected at `/usr/share...'"
    #File a bug report if this is still the case under recent zsh versions.
    # Forcibly prevent harmful ${mapfile} and hence filesystem changes.
#   freeze_variable mapfile

    # Run such command with temporary access global map ${mapfile}.
    load_zsh_module_mapfile
    {
        run_command "${@}"
    } always {
        unload_zsh_module_mapfile
    }
}

# --------------------( WASTELANDS                         )--------------------
# void load_mapfile(void)
#
# Load zsh module "mapfile". This module is *INHERENTLY* dangerous; in
# particular, unsetting list elements permanently and silently deletes files
# with the same name as such elements. To prevent accidental calamity, either:
#
# * If possible, call run_command_with_mapfile() rather than this function, which safely
#   handles such lifecycle issues for you.
# * Otherwise, unload "mapfile" immediately after use via unload_mapfile().
#function load_mapfile() {
#    load_zsh_module zsh/mapfile
#}

# void unload_mapfile(void)
#
# Unload zsh module "mapfile". See load_mapfile().
#function unload_mapfile() {
#    unload_zsh_module zsh/mapfile
#}

