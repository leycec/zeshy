#!/usr/bin/env zsh
# ====================[ zsh                                ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle basic zsh functionality.

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_zsh_version_at_least(string zsh_version)

Return true if the current version of zsh is at least as recent as the passed
zsh version. See get_zsh_version() for further discussion: e.g.,

.is_zsh_version_at_least()
==========================================
[source]
------------------------------------------
>>> is_zsh_version_at_least 5.0.0 and print_string "Thank the Nordic Gods."
Thank the Nordic Gods.
------------------------------------------
==========================================
________________<heredoc?>________________
function is_zsh_version_at_least() {
    die_unless_arg 'expected one version string'
    is-at-least "${1}"
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string get_zsh_version(void)

Get the current version of `zsh` as an uncomparable string (e.g.,
`4.8.17-dev0`). Since this string is _not_ numeric, always call
is_zsh_version_at_least() rather than compare such string numerically. Hence,
such string is really only useful for logging or printing: e.g.,

.get_zsh_version()
==========================================
[source]
------------------------------------------
>>> print_string "zsh: version $(get_zsh_version)"
zsh: version 5.0.0
------------------------------------------
==========================================
________________<heredoc?>________________
function get_zsh_version() {
    die_if_args
    return_string "${ZSH_VERSION}"
}

# ....................{ RESTARTERS                         }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
void restart_zsh(void)

Reload `zsh`. Specifically:

* Revert to default `zsh` shell options and hooks.
* Source standard `zsh` startup scripts in the same order `zsh` sources such
  scripts (e.g., `.zprofile`, `.zshrc`, `.zlogin`).
* Reload Zeshy.
________________<heredoc?>________________
function restart_zsh() {
    # Validate sanity.
    die_if_args

    # List of canonical zsh startup scripts to be sourced in the listed order.
    # If the current shell is interactive, this includes the ".zprofile",
    # ".zshrc", and ".zlogin" dotfiles; otherwise, this includes only the
    # ".zshrc" dotfile.
    list zsh_startup_scripts
    if { is_shell_login } {
        zsh_startup_scripts=(
            "${ZDOTDIR}/.zprofile"
            '/etc/zsh/zprofile'
            "${ZDOTDIR}/.zshrc"
            '/etc/zsh/zshrc'
            "${ZDOTDIR}/.zlogin"
            '/etc/zsh/zlogin'
        )
    } else {
        zsh_startup_scripts=(
            "${ZDOTDIR}/.zshrc"
            '/etc/zsh/zshrc'
        )
    }

    # Revert to default zsh options, as customarily expected by startup scripts.
    emulate -LR zsh

    # Source startup scripts in the customary zsh order.
    for zsh_startup_script ("${zsh_startup_scripts[@]}") {
        #FIXME: Hmm; Zeshy appears to be failing under the above emulation.
        #Shouldn't it be setting shell options despite such emulation, or does
        #emulation lock-down all shell options? Hmmm; rather odd. If it is,
        #we'll need to tediously manually enable *ALL* zsh defaults. Ugh.
        #Certainly doable, but quite boring. Just see "man zshoptions".
        #FIXME; Hmm; right. We need to mimic a clean environment. That means
        #duplicating the functionality of "src/compile" (I believe), which
        #undefines all Zeshy-specific aliases, globals, and functions.
        [[ -f "${zsh_startup_script}" ]] && source -- "${zsh_startup_script}"
    }

    # Reload Zeshy *AFTER* reloading zsh.
    restart_zeshy

    # Force successful exit status. The prior loop appears to occasionally set
    # error exit status despite succeeding, which lacking the following command
    # then returns such error from this function.
    return_true
}

# ....................{ EXITERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
void exit_zsh(void)

Exit `zsh` with zero exit status (i.e., success).
________________<heredoc?>________________
function exit_zsh() {
    die_if_args
    exit ${ZESHY_EXIT_STATUS_SUCCESS}
}

declare_function_with_stdin <<'________________<heredoc?>________________'
void exit_zsh_with_failure(void)

Exit `zsh` with non-zero exit status (i.e., failure).
________________<heredoc?>________________
function exit_zsh_with_failure() {
    die_if_args
    exit ${ZESHY_EXIT_STATUS_FAILURE}
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Should obviously work for non-zsh shells as well, but unsure there's
#terribly much demand for that just yet. After
#This function is of principal use for
# Zeshy developers (making frequent changes to Zeshy itself) as well as zsh
# dot-file hackers (making frequent changes to zsh dot-files).
#
# Check the set of all parsed arguments for unknown options. If the caller
# passed at least one unknown option OR the "-h" or "--help" options, die with
# the passed help message. This function expects to be called immediately after
# calling the parse_arg_options() function: e.g.,
# Parse the current argument list according to the passed "zparseopts"-formatted
# argument specifications (e.g., "h", short option "-h" accepting no argument;
# "-count:", long option "--count" requiring a trailing argument) into local map
# ${arg_options}. See "zparseopts" under "man zshmodules" for argument specification details: e.g.,
#   # Set fake command-line arguments.
#   >>> set -- -d --ad --crest "glass arm shattering"
#
#   # Parse such arguments as:
#   #
#   # * "--ad", a long option followed by no value.
#   # * "--crest", a long option followed by some value.
#   # * "--wing", a long option optionally followed by some value.
#   >>> parse_arg_options d e -ad -crest: -wing::
#
#   # Validate such parsing.
#   >>> is_map_key arg_options '-d' and print 'option "-d" parsed'
#   option "-d" parsed
#   >>> print_string_with_escapes\
#   ...   "-d: ${arg_options[-d]}\n--ad: ${arg_options[--crest]}\n--wing: ${arg_options[--wing]}"
#   -d:
#   --crest: glass arm shattering
#   --wing:
#O.K.; that's pretty awesome. Last passed argument is the help string, since all
#other arguments should consume at most a line or two.
# void check_arg_options_with_help_string(string help_message)
#
# Check the set of all parsed arguments for unknown options. If the caller
# passed at least one unknown option OR the "-h" or "--help" options, die with
# the passed help message. This function expects to be called immediately after
# calling the parse_arg_options() function: e.g.,
#
#   >>> parse_arg_options d e -ad -crest: -wing:: |
#   ...   check_arg_options_with_help_string 'Help!'
#function check_arg_options_with_help_string() {
    # If the immediately prior command failed, assume that was a call to the
    # parse_arg_options() function and enable a boolean noting this fact.
#    is_ok and bool is_parse_arg_options_failed=1

    # Validate passed arguments.
#    die_unless_arg 'expected one help string'
#    string help_message="${1}"

    # If the caller passed the "-h" or "--help" options, die without error.
    # Dismantled, this is:
    #
    # * "+", expanding to 1 if such option was passed or 0 otherwise.
    # * "(( ... + ... ))", returning true if and hence at least one such option was passed.
#    if (( "${+arg_options[-h]}" + "${+arg_options[--help]}" )); then
#        print_string "${help_message}"
#        exit_with_success
    # If the caller passed unknown options, die without error.
#    elif (( "${+is_parse_arg_options_failed}" )); then
#        print_string "${help_message}"
#        exit_with_failure
#    fi
#}

#FUXME: This no longer works as intended, due to TRAPZERR(). Contemplate. Ah.
#Yes. The simple solution is to require the parse_arg_options() alias to feed into
#this command, as in the example below.
#
#Bit awkward, but nothing too onerous. Alternatively, couldn't we define the
#parse_arg_options() alias to simply temporarily disable TRAPZERR() by.... hmm; I
#don't believe the disable() builtin accepts a command to be run, unfortunately.
#Nah; just go for the pipe style, ya?
#FUXME: Actually, pipe style is a bit silly. Couldn't we implement this as an
#alias, as with the new list-style aliases: e.g.,

    #FUXME: Should be a separate alias, for easy repeatabality. Perhaps
    #set_list_to_stdin_words()? Actually, should be a proper
    #function, right? Then this becomes:
    #  list __args__; set_list_to_stdin_words __args__
    #Do not forget to have such function close standard input, which we should
    #also be doing here!
    #list __args__; __args__=( ${(z)"$(< /dev/stdin)"} )
    #FUXME: Define such function. If I recall, the zsh implementation resembles:
    #__args__[-1]=( )
    #Yes. I have verified this. Bizarre, but there it is. :)

#   #FUXME: Does this overwrite the outer standard input stream? I feel certain
#   #it does -- but we should research this. If it does, we'll need to save
#   #stdin prior to overwriting it and then restore it after parsing out args
#   #from it. *shrug*

    #FUXME: Doesn't really work, since we're not in a global context. *sigh*
    # Undefine all variables. For clear reasons, call this function prior to
    # undefining all functions.
#   undefine_globals_matching 'ZESHY_*'

    # Undefine all aliases and functions, thus inducing Zeshy to reload itself
    # if sourced by a conventional zsh startup script sourced below.
#   undefine_runnables_matching '*'

    #FUXME: Perhaps define a new is_shell_option() function.
#   is -o interactive si
    #FUXME: This appears to fail for read-only variables. Hack around this by
    #forcefully disabling the read-only flag for all matching variables. *shrug*
# (defaulting to '*', implying all runnables). This is, of course, fairly
# destructive but does guard against desynchronization issues resulting from
# modification to this Zeshy installation (e.g., when upgrading).
#FUXME: Also destroy all Zeshy-specific globals excluding "ZESHY_HOME".
#&& -r "${script_file}"
# * Command-line argument parsing fuctionality for specifying and obtaining
#   shell script arguments.
#   (( # == 0 )) || die 'expected no arguments'
#   [[ -o interactive ]]
# ....................{ RETURN VALUES                      }....................
# See Zeshy List and Map for functions returning lists and maps, respectively.
# Such functions are rather non-trivial and hence shifted there.

#FUXME: Call everywhere we currently call print() and output().

# string output(int number)
#
# Return the passed integer from the current function.
#output() {
#    die_unless_arg 'expected one integer'
#    print -- "${1}"
#}

# string output(string text1, string text2, ...)
#
# Return the concatenation of the passed strings from the current function.
#output() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}"
#}

    #FUXME: Extract out 'zsh|sh|ksh|csh' into a "get_emulatable_sh
#   string ZESHY_SCRIPT_NAME='redot'
#   false
#   TRAPZERR() {
#       # Save the return code of the prior command prior to overwriting this code
#       # by printing a stack trace.
#       typeset -i exit_status=${?}
#       curse_call_stack

#       # Terminate the current shell, returning the non-zero exit status of the prior
#       # command. This effectively enables "set -e" (i.e., the ERR_EXIT option,
#       # terminating the current shell on SIGZERR signals).
#       die_with ${exit_status}
#   }
#   false
#   source "${ZESHY_HOME}/main"
#   false
#   print_message "sourced as ${script_shell}: ${@}"

#   # void source_if_found(string filename)
#   #
#   # Source the passed filename if found and readable by the current user. Note
#   # this function definition calls no Zeshy-specific aliases or functions; the
#   # the above call to the undefine_runnables() function has already killed them.
#   source_if_found() {
#       local script_name="${1}"
#       if [[ -f "${script_name}" && -r "${script_name}" ]]; then
#           print "redot: loading \"${script_name}\"..."
#           source "${script_name}"
#       fi
#   }

#   print_message "reloading zeshy..."
#   print_message "reloading user ${USER}..."
#
    # Force reimportation of all Zeshy components. Then, as the importations
    # below redefine all defined runnables, destroy all such runnables to
    # avoid desynchronization issues.
    #
    # Do this prior to calling the say() function for obvious reasons.
#   _zeshy_initialize_imports
#   undefine_runnables

#   die_unless_file "${script_filename}"
# elif is_file "${script_filename}"; then
#       match_first_group "${script_shebang_regex}" "${script_shebang}"

#
# * "-c", run the following command under such emulation.
#interactive_alias_if_installed au='aouauauauau'

#This is a no-op if the
# builtin or command to be aliased does not exist.
#
#   print "shell: ${script_shell}"
#   emulate -R ${script_shell} -c "ls"
#   emulate -R ${script_shell} -c "${@}"
#   emulate -LR "${script_shell}"
#   source ${@}

    # Disable shell strictness for the duration of the sourcing. External shell
    # scripts often assume laxness thus breaking under strictness.
#   setopt nounset            # attempting to expand unset parameters raises an error
#   setopt warn_create_global_export # attempting to set untyped parameters raises an error
 
    # Reenable shell strictness. 

#   of $(whence -w "${1}") =~ ': alias$' fo

#   if [[ "${type}" == none ]]; then
#       echo "not-found"
#   else
#   is "${variable_type}" or die "\"${1}\" not a variable"
#   if not is_array array; then local -A array; fi;
#   local array_name="${1:-array}"
#   die_unless_is_array "${array_name}"
#   echo "${(qqkv@P)array_name}"

#FUXME: Rename.
#alias Return_array='eval return_array'
#alias Obtain_array='eval obtain_array'
#alias Return_array='eval "$(return_array array)"'
#alias expand_stray_to_array='eval "$(obtain_array array ${stray})"'
#alias Obtain_array_from_command='eval "$(obtain_array array $(command))"'

    #FUXME: Die if return code is failure?
#   local command="${@}"
#   echo "local _zeshy_obtained_array_as_scalar=\$(${command}); "
#   echo "${array_name}=( "${(Q@)${(z)_zeshy_obtained_array_as_scalar}}" ); "
#   echo "unset _zeshy_obtained_array_as_scalar"

#   echo "${${(qqkv@P)array_name}[@]}"
#   echo "${${(@qqkvP)array_name}[@]}"
#   "echo \"${${(@qqkvP)array_name}[@]}\""
#   echo "echo \"${${(@qqkvP)array_name}[@]}\""   # ; return_true"

#   echo "string_array=${@}"
#   echo "${array_name}="'"'"${(z)@}"'"'
#   echo "${array_name}=( ${(Q)${(z)@}} )"
#   echo "${array_name}=( \"${(Q@)${(z)string_array}}\" )"
#   echo "${array_name}=( ${(Q@)${(z)string_array}} )"
#   echo "${array_name}=( "${(Q@)${(z)@}}" )"

#obtain_array_from_command() {
#    #FUXME: Test to make sure the passed array name actually is. How?
#    die_unless_args_2_or_more 'expected one array name and one runnable command'
#    local array_name="${1}"; shift
#    local command="${@}"
#
#    echo "${array_name}=( "${(Q@)${(z)_zeshy_obtained_array_as_scalar}}" ); "
#
#    #FUXME: Die if return code is failure?
#   echo "local _zeshy_obtained_array_as_scalar=\$(${command}); "
#   echo "${array_name}=( "${(Q@)${(z)_zeshy_obtained_array_as_scalar}}" ); "
#   echo "unset _zeshy_obtained_array_as_scalar"
#
#    # Let's dismantle this, one to two parameter expansion flags at a time:
#    # * 'z' splits the passed string into a numeric array of words.
#   echo "${array_name}=( ${(z)string_array} )"
#}

#oa() {
#    #FUXME: Test to make sure the passed array name actually is. How?
#    die_unless_args_2_or_more 'expected one array name and one stringified array'
#    local string_array="${@}"
#
#    # Let's dismantle this, one to two parameter expansion flags at a time:
#    # * 'z' splits the passed string into a numeric array of words.
#    echo "${array_name}=( ${(z)string_array} )"
#}

    # * '@' splits the array of such words into (still quote-protected!) words.
    # * 'Q' strips the single quotes protectively added by the prior 'qq' flag.
    # * The second '@' refers to the passed 
# ....................{ PASS-BY-VALUE                      }....................
#FUXME: Document!
#return_value() {
#   [[ ${#} -ge 1 ]] || die 'expected at least one value'
#   echo "echo \"${@}\"; return ${ZESHY_EXIT_STATUS_SUCCESS}"
#}

# void PATH_append_if_root(string pathname)
#
# Add the passed pathname to this user's "$PATH", if the above conditions hold
# and if this user is the superuser (i.e., root).
#PATH_append_if_root() {
#    is_current_user_superuser && PATH_append "${@}"
#}

# void redit(void)
#redit() {
#  if [ "$USER" = "root" ]
#  then sudo $EDITOR /etc/zsh/zshrc
#  else      $EDITOR $HOME/.zshrc
#  fi
#
#  redot
#}
