#!/usr/bin/env zsh
# ====================[ autoload                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle zsh function and module autoloading.
#
# --------------------( SEE ALSO                           )--------------------
# https://jgao.googlecode.com/svn/trunk/.shell/zsh_module
#     Comprehensive zsh module autoload definitions inspiring those below.

# ....................{ STARTUP                            }....................
# Autoload zsh module-defined functions at the beginning rather than end of
# Zeshy startup, thus avoiding errors when subsequent Zeshy startup functions
# call such functions.
run_hook_on_zeshy_startup_first startup_zeshy_autoloads

document_function '
void startup_zeshy_autoloads(void)

Autoload all canonical functions and globals bundled by stock zsh installations,
including:

* All autoloadable functions in directories listed by the default ${fpath}.
* All autoloadable functions and globals defined by precompiled zsh modules,
  thus deferring loading each such module until the first call of such function
  or expansion of such variable.
'
function startup_zeshy_autoloads() {
    # Validate sanity.
    die_if_args

    # Do *NOT* attempt to autoload extraneous dotfiles as zsh functions (e.g.,
    # ".keep_app-shells_zsh-0" under Gentoo). While we could also effect this
    # with an exclusion in the glob expression below (e.g.,
    # "${^fpath}/*~*/.[^/]#(.:t)"), zsh options are somewhat more efficient.
    enable_shell_option_locally no_glob_dots

    # Define autoloads for all autoloadable functions in the current user's
    # function path list, obsoleting manual autoloading of such functions.
    # Since the set of all basenames of all plain files in all directories in
    # such list is exactly the set of all autoloadable function names, globbing
    # such basenames suffices to find all such names. Dismantled, this is:
    #
    # * "${^fpath}", iteratively expanding to each directory containing
    #   autoloadable function files.
    # * "/*", globbing all files and subdirectories of such directory.
    # * ".", excluding non-plain files (e.g., device files, directories).
    # * ":t", expanding to the tail (i.e., basename) of each such file.
    #
    # Ideally, Zeshy would perform such autoloading at recompilation time.
    # Unfortunately, zsh cannot compile autoload stubs into digest files.
    for function_name (${^fpath}/*(.:t)) {
        # For safety, autoload this function under option "-U" to suppress alias
        # expansion. This prevents expansion of Zeshy- and user-specific aliases
        # under core zsh functions implemented with no such aliases in mind.
        # Avoid calling autoload_function(), which is (unsurprisingly) slow
        # under iteration.
#       print "autoloading \"${function_name}\"..."
        autoload -U -- "${function_name}"
    }

    # Define autoloads for all autoloadable functions defined by zsh modules not
    # autoloaded above. Unlike above, this requires manually mapping modules to
    # function names -- an unctuous proposition. Dismantled, this is:
    #
    # * "-a", autoloading the following builtins ("b"), functions ("f"), or
    #   parameters ("p") from the immediately following module.
    # * "i", ignoring rather than failing when such builtins, functions, or
    #   parameters have already been loaded within such module.
    #
    # Avoid mapping modules already loaded by the main Zeshy script as well as:
    #
    # * "mapfile", whose overly permissive style poses a profound risk of
    #   permanent, silent file deletion or modification. For safety, this module
    #   must be manually loaded and unloaded.
    # * "prof", which when loaded begins aggressively profiling zsh functions.
    #   While useful, autoloading the zprof() function this module defines will
    #   begin profiling *ONLY* at the first call of such function, whereas such
    #   function is intended to be called after having already loaded this
    #   module and performed the profiled code. By intentional design, this
    #   module must be manually loaded and unloaded.
    zmodload -abi zsh/cap cap getcap setcap
    zmodload -abi zsh/clone clone
    zmodload -abi zsh/compctl compctl compcall
    zmodload -abi zsh/computil comparguments compdescribe compfiles compgroups\
        compquote comptags comptry compvalues
    zmodload -afi zsh/deltochar delete-to-char zap-to-char
    zmodload -afi zsh/mathfunc abs int float acos acosh asin asinh atan atanh\
        cbrt ceil cos cosh erf erfc exp expm1 fabs floor gamma j0 j1 lgamma log\
        log10 log1p logb sin sinh sqrt tan tanh y0 y1 ilogb signgam copysign\
        fmod hypot nextafter jn yn ldexp scalb rand48
    zmodload -abi zsh/pcre pcre_compile pcre_study pcre_match
    zmodload -abi zsh/sched sched
    zmodload -abi zsh/net/socket zsocket
    zmodload -abi zsh/net/tcp ztcp
    zmodload -abi zsh/system syserror sysread syswrite
    zmodload -api zsh/system errnos
    zmodload -abi zsh/termcap echotc
    zmodload -api zsh/termcap termcap
    zmodload -abi zsh/zftp zftp
    zmodload -api zsh/zleparameter keymaps widgets
    zmodload -abi zsh/zpty zpty
    zmodload -abi zsh/zselect zselect
}

# --------------------( WASTELANDS                         )--------------------
