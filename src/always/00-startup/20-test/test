#!/usr/bin/env zsh
# ====================[ test                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle *top-level testers* (i.e., tester functions intended to be called from
# a top-level shell script context).

# ....................{ TESTERS ~ math                     }....................
declare_function_with_stdin <<'-\-'
[status: boolean] is_math_function_rand48(void)

Return success if `zsh` was compiled with support for erand48(), an optional C
function defined by the current system's mathematical library (e.g., `libm`).
-\-
function is_math_function_rand48() {
    # Sadly, zsh provides no direct means of testing for such math support.
    # Happily, a venerate hack exists. Since rand48() if defined *ALWAYS*
    # returns a float in [0.0, 1.0), the expression "(( rand48() >= 0.0 ))" only
    # fails under shells not defining such function.
    die_if_args

    # Since this function is often called prior to calling startup_zeshy(),
    # which autoloads zsh modules, load the module defining rand48() here.
    zmodload zsh/mathfunc

    # Test such function, squelching errors should such function not exist.
    eval '(( rand48() >= 0.0 ))' &>/dev/null
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Shift somewhere more appropriate. Perhaps we want a new component
#"runnable/pathable/gnu", for example. Ah; right. Such functions must be
#available early. Hence, shift to component "00-startup/15-pathable/gnu".
#FUXME: Replace with a more general function -- say, is_pathable_gnu().
#FUXME: Replace the call to is_pathable() with its underlying implementation.
