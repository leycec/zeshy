#!/usr/bin/env zsh
# ====================[ pathable                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle top-level testers specific to *pathables* (i.e., external commands in
# the current user's ${PATH}).

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_pathable(string command_name)

Return success if the passed command is in the current ${PATH}.
________________<heredoc?>________________
function is_pathable() {
    # See get_pathable_path_if_found() for further details. Were that function
    # accessible at this early time, this would be implementable as follows:
    #
    #   run_command_silent get_pathable_path_if_found "${1}"
    die_unless_arg 'expected one command name'
    is "${1:t:c}" == '/'* si
}

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_pathable_gnu(string command_name)

Return success if the passed command is in the current ${PATH} _and_ the GNU
implementation of such command. Such implementations often implement helpful, if
non-standard, long-form options either unavailable in non-GNU implementations
(e.g., `grep --perl-regexp`) or available only via short-form options (e.g.,
`ls -v` rather than `ls --version`).
________________<heredoc?>________________
function is_pathable_gnu() {
    # Validate sanity.
    die_unless_arg 'expected one command name'
    string command_name="${1}"

    # Return success if the following conditions are all true:
    #
    # * Such command is in the current ${PATH}.
    # * Such command successfully returns its version given a GNU-style option.
    # * Such version contains "GNU".
    is_pathable "${command_name}" and {
        string output
        output="$(command "${command_name}" --version 2>&/dev/null)" and
            is "${output}" == *'GNU'* si
    }
}

# --------------------( WASTELANDS                         )--------------------
