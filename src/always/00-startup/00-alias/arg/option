#!/usr/bin/env zsh
# ====================[ option                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define aliases handling argument options (i.e., "-"-prefixed arguments).

# ....................{ PARSERS                            }....................
# void set_integer_to_arg_nonoption_first_index(string integer_name)
#
# Set the passed integer to:
#
# * The index of the first non-option in the current argument list, if such
#   list contains a non-option (i.e., argument not prefixed by "-").
# * The size of such list plus one, otherwise. This corresponds to default Zsh
#   behavior for builtin list index modifiers "(i)" and "(I)".
#
# This alias parses arguments "-" and "--" as the last options in such list.
alias set_integer_to_arg_nonoption_first_index='
{
    # Validate passed arguments.
    list __args__; set_list_to_standard_input_split_on_words __args__
    (( #__args__ == 1 )) || die "expected one integer name"
    string __integer_name__="${__args__[1]}"
    is_integer "${__integer_name__}" or integer "${__integer_name__}"
    integer __arg_nonoption_first_index__

    # If passed arguments contain "-" or "--", the index of the first non-option
    # in such arguments is one after the index of such "-" or "--".
    __arg_nonoption_first_index__=${@[(i)-|--]}
    if (( __arg_nonoption_first_index__ <= # ))
    then noop $(( ++__arg_nonoption_first_index__ ))
    # Otherwise, the index of the first non-option in such arguments is the
    # index of the argument *NOT* prefixed by "-" or the number of such
    # arguments if all arguments are prefixed by "-" or no arguments are passed.
    else __arg_nonoption_first_index__=${@[(i)[^-]*]}
    fi

    # Set such integer.
    set_integer "${__integer_name__}" $(( __arg_nonoption_first_index__ ))}
} <<<'

# void set_integer_to_arg_nonoption_count(string integer_name)
#
# Set the passed integer to the number of non-options in the current argument
# list (i.e., arguments not prefixed by "-"). This alias parses arguments "-"
# and "--" as the last options in such list.
alias set_integer_to_arg_nonoption_count='
{
    # Validate passed arguments.
    list __args__; set_list_to_standard_input_split_on_words __args__
    (( #__args__ == 1 )) || die "expected one integer name"
    string __integer_name__="${__args__[1]}"
    is_integer "${__integer_name__}" or integer "${__integer_name__}"

    # Get the index of the first non-option argument.
    set_integer_to_arg_nonoption_first_index __arg_nonoption_first_index__

    # Set such integer.
    set_integer "${__integer_name__}"\
        $(( # - __arg_nonoption_first_index__ + 1 ))}
} <<<'

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Be nice to extract this into a new set_integer_to_evaluation().
    #Actually, how about a more general set_scalar_to_evaluation()? Right. That
    #seems perfect.

#   noop ${(P)__integer_name__::=$(( __arg_nonoption_first_index__ ))}
#   noop ${(P)__integer_name__::=$(( # - __arg_nonoption_first_index__ + 1 ))}
        # Else, if at least one passed arguments is not prefixed by "-", such
        # argument is the first non-option in such arguments.
        # Otherwise, set such index to the size of such list plus one.
#       (( __arg_option_last_index__ <= # )) or 
#           (( __arg_option_last_index__ <= # )) or 
#       then noop ${(P)__integer_name__::=$(( __arg_option_last_index__ ))}
#       else 
#       fi

#   noop  ${(P)__integer_name__::=${@[(i)-|--]}}
#   if (( ${(P)__integer_name__} <= # ))

#FUXME: Completely unrelated to this component, but we can now actually create
#sensible return_string()-style aliases! Oh, man; pretty sweet. Finally found
#it.

    #FUXME: Validate the passed argument is a single argument. Just revert to
    #the traditional argument parsing to do so.
    # Validate passed arguments.
#   string __integer_name__; __integer_name__="$(get_standard_input_piped)"
