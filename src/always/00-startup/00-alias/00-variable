#!/usr/bin/env zsh
# ====================[ variable                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define variable-specific aliases.

# ....................{ VARIABLES                          }....................
# void undefine_variable(string variable_name1, string variable_name2, ...)
#
# Undefine the passed variables in the caller's context. If such context is a
# global shell or script, undefine such variables globally; otherwise, undefine
# such variables locally. Undefining globals thus requires calling this alias
# from a global context (i.e., *NOT* from within a function).
#
# For safety, consider preceding each call to this function with a call to
# unfreeze_variable() passed the same arguments. If not doing so, calling this
# function on read-only variables causes Zsh to fail with ungainly errors
# resembling: "zsh: VARIABLE_NAME read-only".
alias undefine_variable='unset --'

# void unfreeze_variable(string variable_name1, string variable_name2, ...)
#
# Unfreeze the passed variables in the current context. This destructively
# destroys such variables' type and value and is intended to be called only
# prior to calling undefine_variable(). Don't ask; don't tell.
alias unfreeze_variable='typeset +r --'

# ....................{ VARIABLES ~ string                 }....................
# void string(string variable_name)
#
# Locally declare a string.
alias string='local'

# void string_global(string variable_name)
#
# Globally declare a string *NOT* exported to the calling shell.
alias string_global='typeset -g'

# void string_global_export(string variable_name)
#
# Globally declare a string exported to the calling shell.
alias string_global_export='export'

# void string_constant_global_export(string variable_name)
#
# Globally declare a string constant exported to the calling shell.
alias string_constant_global_export='export -r'

# ....................{ VARIABLES ~ boolean                }....................
# void boolean(string variable_name)
#
# Locally declare a boolean. Due to current inadequacies in Zsh, this only
# declares a scalar string local to the current scope. Nonetheless, we
# encourage users use this alias for clarity, forwards compatibility, and
# functional symmetry with the existing integer() and float() built-ins.
alias boolean='string'

# void boolean_global(string variable_name)
#
# Globally declare a boolean *NOT* exported to the calling shell.
alias boolean_global='string_global'

# void boolean_global_export(string variable_name)
#
# Globally declare a boolean exported to the calling shell.
alias boolean_global_export='string_global_export'

# void boolean_constant_global_export(string variable_name)
#
# Globally declare a boolean constant exported to the calling shell.
alias boolean_constant_global_export='string_constant_global_export'

# ....................{ VARIABLES ~ integer                }....................
# Zsh already provides built-in integer() for declaring local integers.

# void integer_in_base(integer base, string variable_name)
#
# Locally declare an integer (i.e., non-fractional number) in the passed base.
# Zsh internally retains each integer's base for formatting the string
# representation of each integer in its base when output: e.g.,
#
#     >>> integer_in_base 16 cow_mutilation=4277009102
#     >>> output_string "${cow_mutilation}"
#     0xFEEDFACE
alias integer_in_base='local -i'  # "integer" does *NOT* suffice here

# void integer_global(string variable_name)
#
# Globally declare an integer *NOT* exported to the calling shell.
alias integer_global='integer -g'

# void integer_global_export(string variable_name)
#
# Globally declare an integer exported to the calling shell.
alias integer_global_export='export -i'

# void integer_constant_global_export(string variable_name)
#
# Globally declare a integer constant exported to the calling shell.
alias integer_constant_global_export='export -ir'

# ....................{ VARIABLES ~ float                  }....................
# Zsh already provides built-in float() for declaring local floats.

#FIXME: Rename to float_with_fractional_digit_count().
# void float_with_fractional_digit_length(integer length, string variable_name)
#
# Locally declare a float (i.e., real number) with exactly the passed number of
# fractional digits.
alias float_with_fractional_digit_length='local -F'  # "float" does *NOT* suffice

# void float_global(string variable_name)
#
# Globally declare a float *NOT* exported to the calling shell.
alias float_global='float -g'

# void float_global_export(string variable_name)
#
# Globally declare a float exported to the calling shell.
alias float_global_export='export -F'

# void float_constant_global_export(string variable_name)
#
# Globally declare a float constant exported to the calling shell.
alias float_constant_global_export='export -Fr'

# ....................{ VARIABLES ~ list                   }....................
# Due to current inadequacies in Zsh, lists and maps cannot be initialized or
# declared to be read-only at declaration time. To perform the latter, consider
# calling freeze_variable() after initializing such list or map after declaring
# such list or map. While cumbersome, Zsh currently affords no alternatives:
#
#   list sequence; sequence=( 'value 1' 'value 2' 'value 3' 'value 4' )
#   freeze_variable sequence

# void list(string variable_name)
#
# Locally declare a list (i.e., sequential array).
alias list='typeset -a'

# void list_global(list variable_name)
#
# Globally declare a list *NOT* exported to the calling shell.
alias list_global='typeset -ag'

# void list_global_export(list variable_name)
#
# Globally declare a list exported to the calling shell.
alias list_global_export='export -a'

# ....................{ VARIABLES ~ list set               }....................
# void list_set(string variable_name)
#
# Locally declare a list set (i.e., a list ignoring duplicate values).
alias list_set='typeset -Ua'

# void list_set_global(string variable_name)
#
# Globally declare a list set *NOT* exported to the calling shell.
alias list_set_global='typeset -Uag'

# void list_set_global_export(list variable_name)
#
# Globally declare a list set exported to the calling shell.
alias list_set_global_export='export -Ua'

# ....................{ VARIABLES ~ list tie               }....................
# void list_tied_string(
#   string text_name, string list_name, string separator = ':')
#
# Declare a string with the passed name "tied" to the list with the passed name.
# This resembles a Perl tie by joining the list's elements with the passed
# separator, defaulting to ":", into a string and updating that string on each
# update (i.e., change) to that list: e.g.,
#
#   list_tied_string arroyo array ' '
#   list array; array=( 'Cuidad' 'Juarez' )
#   print "${arroyo}"  # prints "Cuidad Juarez"
#   array=( 'El' 'Paso' )
#   print "${arroyo}"  # prints "El Paso"
#
# Importantly, note Zsh leaves the list-tied string initially unset -- even if
# the list to which it is tied is set! Hence, list-tied strings should usually
# be declared prior to the list to which they tie. Yes, this is unintuitive.
alias list_tied_string='typeset -T'

# ....................{ VARIABLES ~ map                    }....................
# Due to current inadequacies in Zsh, maps must be externally initialized: e.g.,
#
#   map hash_map; hash_map=( 'key 1' 'value 1' 'key 2' 'value 2' )

# void map(string variable_name)
#
# Locally declare a map (i.e., associative array).
alias map='typeset -A'

# void map_global(map variable_name)
#
# Globally declare a map *NOT* exported to the calling shell.
alias map_global='typeset -Ag'

# void map_global_export(map variable_name)
#
# Globally declare a map exported to the calling shell.
alias map_global_export='typeset -Agx'   # "export -A" oddly fails with error;
                                         # "export -a" succeeds, however (!?!)

# --------------------( WASTELANDS                         )--------------------
