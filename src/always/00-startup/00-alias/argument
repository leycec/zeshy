#!/usr/bin/env zsh
# ====================[ argument                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define argument-specific aliases.

# ....................{ EXCEPTIONS                         }....................
# string make_die_unless_alias(string test_condition)
#
# Convert the passed math condition into a die_unless_*() alias expansion.
make_die_unless_alias() {
    print -- "(( ${1} )) || die"
}

# void die_if_args(void)
#
# Die with a canonical message if the caller passed any arguments.
alias die_if_args='is_args and die "expected no arguments"'

# void die_unless_args(string error_message)
#
# Die with the passed message unless the caller passed at least one argument.
alias die_unless_args="$(make_die_unless_alias '# > 0')"

# void die_unless_one_arg(string error_message)
#
# Die with the passed message unless the caller passed exactly one argument.
alias die_unless_one_arg="$(make_die_unless_alias '# == 1')"

# void die_unless_two_args(string error_message)
#
# Die with the passed message unless the caller passed exactly two arguments.
alias die_unless_two_args="$(make_die_unless_alias '# == 2')"

# void die_unless_three_args(string error_message)
#
# Die with the passed message unless the caller passed exactly three arguments.
alias die_unless_three_args="$(make_die_unless_alias '# == 3')"

# void die_unless_four_args(string error_message)
#
# Die with the passed message unless the caller passed exactly four arguments.
alias die_unless_four_args="$(make_die_unless_alias '# == 4')"

# void die_unless_no_or_one_arg(string error_message)
#
# Die with the passed message unless the caller passed either no or one
# arguments.
alias die_unless_no_or_one_arg="$(make_die_unless_alias '# <= 1')"

# void die_unless_one_or_two_args(string error_message)
#
# Die with the passed message unless the caller passed either one or two
# arguments.
alias die_unless_one_or_two_args="$(make_die_unless_alias '# == 1 || # == 2')"

# void die_unless_two_or_three_args(string error_message)
#
# Die with the passed message unless the caller passed either two or three
# arguments.
alias die_unless_two_or_three_args="$(make_die_unless_alias '# == 2 || # == 3')"

# void die_unless_three_or_four_args(string error_message)
#
# Die with the passed message unless the caller passed either three or four
# arguments.
alias die_unless_three_or_four_args="$(make_die_unless_alias '# == 3 || # == 4')"

# void die_unless_one_to_three_args(string error_message)
#
# Die with the passed message unless the caller passed between one to three
# arguments.
alias die_unless_one_to_three_args="$(make_die_unless_alias '# >= 1 && # <= 3')"

# void die_unless_one_to_four_args(string error_message)
#
# Die with the passed message unless the caller passed between one to four
# arguments.
alias die_unless_one_to_four_args="$(make_die_unless_alias '# >= 1 && # <= 4')"

# void die_unless_at_least_one_arg(string error_message)
#
# Die with the passed message unless the caller passed at least one argument.
alias die_unless_at_least_one_arg="$(make_die_unless_alias '# >= 1')"

# void die_unless_at_least_two_args(string error_message)
#
# Die with the passed message unless the caller passed at least two arguments.
alias die_unless_at_least_two_args="$(make_die_unless_alias '# >= 2')"

# void die_unless_at_least_three_args(string error_message)
#
# Die with the passed message unless the caller passed at least three arguments.
alias die_unless_at_least_three_args="$(make_die_unless_alias '# >= 3')"

# void die_unless_at_least_four_args(string error_message)
#
# Die with the passed message unless the caller passed at least four arguments.
alias die_unless_at_least_four_args="$(make_die_unless_alias '# >= 4')"

# void die_unless_at_most_one_arg(string error_message)
#
# Die with the passed message unless the caller passed at most one argument.
alias die_unless_at_most_one_arg="$(make_die_unless_alias '# <= 1')"

# void die_unless_at_most_two_args(string error_message)
#
# Die with the passed message unless the caller passed at most two arguments.
alias die_unless_at_most_two_args="$(make_die_unless_alias '# <= 2')"

# void die_unless_at_most_three_args(string error_message)
#
# Die with the passed message unless the caller passed at most three arguments.
alias die_unless_at_most_three_args="$(make_die_unless_alias '# <= 3')"

# void die_unless_at_most_four_args(string error_message)
#
# Die with the passed message unless the caller passed at most four arguments.
alias die_unless_at_most_four_args="$(make_die_unless_alias '# <= 4')"

# ....................{ TESTERS                            }....................
# Define critical argument-specific aliases.

# boolean is_no_args(void)
#
# Return true if the caller was passed no arguments.
alias is_no_args='(( # == 0 ))'

# boolean is_args(void)
#
# Return true if the caller was passed at least one argument.
alias is_args='(( # > 0 ))'
alias is_at_least_one_arg=is_args

# boolean is_one_arg(void)
#
# Return true if the caller was passed exactly one argument.
alias is_one_arg='(( # == 1 ))'

# boolean is_two_args(void)
#
# Return true if the caller was passed exactly two arguments.
alias is_two_args='(( # == 2 ))'

# boolean is_one_to_three_args(void)
#
# Return true if the caller was passed between one to three arguments.
alias is_one_to_three_args='(( # >= 1 && # <= 3 ))'

# boolean is_at_least_two_args(void)
#
# Return true if the caller was passed at least two arguments.
alias is_at_least_two_args='(( # >= 2 ))'

# boolean is_at_least_three_args(void)
#
# Return true if the caller was passed at least three arguments.
alias is_at_least_three_args='(( # >= 3 ))'

# boolean is_at_most_two_args(void)
#
# Return true if the caller was passed at most two arguments.
alias is_at_most_two_args='(( # <= 2 ))'

# boolean is_at_most_three_args(void)
#
# Return true if the caller was passed at most three arguments.
alias is_at_most_three_args='(( # <= 3 ))'

# ....................{ GETTERS                            }....................
# string get_args(void)
#
# Get the current argument list as a concatenated string.
alias get_args='print -r -- ${*}'

# ....................{ SETTERS                            }....................
# void set_args(string arg1, string arg2, ...)
#
# Replace the current argument list with the passed arguments.
alias set_args='set --'

# void set_args_to_piped_input(void)
#
# If the current function or script is piped input, replace the current
# argument list with such input.
alias set_args_to_piped_input='is_piped_input and {
    set_args "$(< /dev/stdin)";
    close_standard_input
}'

# ....................{ SETTERS ~ prepend                  }....................
# void prepend_args_with_piped_input(void)
#
# If the current function or script is piped input, prepend such input to the
# beginning of the current argument list.
alias prepend_args_with_piped_input='is_piped_input and {
    set_args "$(< /dev/stdin)" "${@}";
    close_standard_input
}'

# ....................{ SETTERS ~ append                   }....................
# void append_args(string arg1, string arg2, ...)
#
# Append the passed arguments to the end of the current argument list.
alias append_args='set_args "${@}"'

# void append_args_with_piped_input(void)
#
# If the current function or script is piped input, append such input to the end
# of the current argument list.
alias append_args_with_piped_input='is_piped_input and {
    set_args "${@}" "$(< /dev/stdin)";
    close_standard_input
}'

# ....................{ SETTERS ~ shift                    }....................
# void shift_args(integer args = 1)
#
# Remove the passed number of arguments (defaulting to 1) from the beginning of
# the current argument list.
alias shift_args='shift'

# void shift_one_arg(void)
#
# Remove the first argument from the current argument list.
alias shift_one_arg='shift 1'

# void shift_two_args(void)
#
# Remove the first two arguments from the current argument list.
alias shift_two_args='shift 2'

# void shift_three_args(void)
#
# Remove the first three arguments from the current argument list.
alias shift_three_args='shift 3'

# ....................{ SETTERS ~ pop                      }....................
# void pop_one_arg(void)
#
# Remove the last argument from the current argument list.
alias pop_one_arg='set -- ${@[1,-2]}'
#alias pop_one_arg='@[-1]=()'

# void pop_two_args(void)
#
# Remove the last two arguments from the current argument list.
alias pop_two_args='set -- ${@[1,-3]}'

# void pop_three_args(void)
#
# Remove the last three arguments from the current argument list.
alias pop_three_args='set -- ${@[1,-4]}'

# ....................{ PARSERS                            }....................
# void parse_args(string arg_spec1, string arg_spec2, ...)
#
# Parse the current argument list according to the passed "zparseopts"-formatted
# argument specifications (e.g., "h", short option "-h" accepting no argument;
# "-count:", long option "--count" requiring a trailing argument) into global
# map ${ARGS}: e.g.,
#
#   # Set fake command-line arguments.
#   >>> set -- -d --ad --crest "glass arm shattering"
#
#   # Parse such arguments as:
#   #
#   # * "--ad", a long option followed by no value.
#   # * "--crest", a long option followed by some value.
#   # * "--wing", a long option optionally followed by some value.
#   >>> parse_args d e -ad -crest: -wing::
#
#   # Validate such parsing.
#   >>> is_map_key ARGS '-d' and print 'option "-d" parsed'
#   option "-d" parsed
#   >>> echo "-d: ${ARGS[-d]}\n--ad: ${ARGS[--crest]}\n--wing: ${ARGS[--wing]}"
#   -d:
#   --crest: glass arm shattering
#   --wing:
#
# See "zparseopts" under "man zshmodules" for argument specification details.
alias parse_args='zparseopts -D -E -A ARGS --'

# --------------------( WASTELANDS                         )--------------------
