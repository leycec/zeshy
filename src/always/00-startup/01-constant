#!/usr/bin/env zsh
# ====================[ constant                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define globally applicable constants.

# ....................{ INTEGERS ~ file descriptors        }....................
# POSIX-prescribed file descriptors (i.e., integers identifying open files).
integer_constant_global_export\
    ZESHY_FILE_DESCRIPTOR_STANDARD_INPUT=0\
    ZESHY_FILE_DESCRIPTOR_STANDARD_OUTPUT=1\
    ZESHY_FILE_DESCRIPTOR_STANDARD_ERROR=2

# ....................{ CHARACTERS                         }....................
# Character constants to be interpolated into unprinted strings (e.g., globs,
# regular expressions). Zsh interprets escaped characters such as \n (newline)
# and \t (tab) as "special" only when passed to the echo() or print() builtins;
# in all other cases, Zsh passes such characters as is (i.e., without
# interpretation) through to the underlying builtins. Embedding such characters
# in $'...'-style quotes (as below) circumvents this, inducing Zsh to interpret
# such characters regardless of which builtin finally receives them.
string_constant_global_export\
    ZESHY_CHARACTER_NEWLINE=$'\n'\
    ZESHY_CHARACTER_TAB=$'\t'

# --------------------( WASTELANDS                         )--------------------
# ....................{ CONFIGURATION                      }....................
# Zeshy configuration settings, set on sourcing the system- and user-specific
# Zeshy configuration file below.

# ....................{ MAGIC                              }....................
#FIXME: Copy to "if_config/magic", a new configuration file containing only
#magic numbers which should *NEVER* be changed. Wait. That's not exactly a
#configuration file then, is it? These should probably be sh ZESHY_

#globals of universal applicability to other
# Zeshy components and scripts.
# File from which Zeshy reads globals declared under "CONFIGURATION", below.
#string_global ZESHY_USER_CONFIG_FILE="${ZESHY_USER_CONFIG_DIR}/main"

# Hmmmmm; or, perhaps
#all we need is a function integer_global_if_unset(). That would permit us to
#include all of the above globals in the same manner as in "config/main", which
#is nice. Dead simple implementation: just test if the passed name is a global
#variable using... (hm what, exactly? Google.) ...and, if not, declare. I wonder
#if there's some parameter to be passed to typeset to disable the default
#"display variable if already defined" behavior, which is quite onerous, really.
#Oh, nmind. Uh. "string_global z" works... *sigh* Cut all of the nonsense above.
# ....................{ PATHS                              }....................
# Directory hosting Zeshy scripts only conditionally needed during bootstrap.
#string_global ZESHY_AUXILIARY_DIR="${ZESHY_OVERLAY_ROOT}/if_needed"

#FIXME: Excise me.
# Directory hosting Zeshy scripts whose functions are autoloadable.
#string_global ZESHY_AUTOLOAD_DIR="${ZESHY_OVERLAY_ROOT}/autoload"
#string_global\
#    ZESHY_AUTOLOAD_CORE_DIR="${ZESHY_AUTOLOAD_DIR}/always"\
#    ZESHY_AUTOLOAD_COMMAND_DIR="${ZESHY_AUTOLOAD_DIR}/if_installed"\
#    ZESHY_AUTOLOAD_DISTRO_DIR="${ZESHY_AUTOLOAD_DIR}/if_distro"\
#    ZESHY_AUTOLOAD_THEME_DIR="${ZESHY_AUTOLOAD_DIR}/if_theme"

# Zeshy script setting the globals defined under "CONFIGURATION", below.
#string_global ZESHY_USER_CONFIG_FILE="${ZESHY_USER_CONFIG_DIR}/main"

    # Load the default and user-specific Zeshy configuration files, the former
    # ensuring all globals at least have some default value and the latter
    # replacing such value with user-specific settings.
    # Make user-specific Zeshy directories, if needed.
    # Copy the default to a user-specific Zeshy configuration file, if the
    # latter is not found.
    #FIXME: Nice try; but there's a new game in town. See Zeshy Core. The

    #specific problem with this is that it's slow. The config file is
    #increasingly large. We don't want to source it twice. But we also don't
    #want an empty or small user config file, since that renders the upgrade
    #process opaque (and also makes debugging by the user quite troublesome:
    #where is that global being set again and why?). The user can *CHOOSE* to
    #have a small local config, if they like; but that's a choice. This isn't.

#   source "${ZESHY_USER_CONFIG_FILE_DEFAULT}"
# ....................{ BOOLEANS                           }....................
# If non-empty, the current process is running as a cronjob. (Set below.)
#global_bool ZESHY_IS_CRONJOB

# Directory to which Zeshy mounts media.
#string_global ZESHY_MOUNT_HOME='/media'

# Directory to which Zeshy mounts ISOs.
#string_global ZESHY_MOUNT_ISO_PATH="${ZESHY_MOUNT_HOME}/iso"

# ....................{ STRINGS                            }....................
#FIXME: Erhm; I suspect the following global to be largely obsolete, now. (Or,
#at best, only applicable to Zeshy scripts requiring require().)
# Basename for all "main" Zeshy scripts. These are scripts Zeshy looks for when
# a caller attempts to import a path rather than a file: e.g.,
#
#     # Actually imports "zeshy/${ZESHY_MAIN_SCRIPT_BASENAME}", instead.
#     >>> zimport zeshy
#string_global ZESHY_MAIN_SCRIPT_BASENAME='.main'

#is_empty "${ZESHY_SCRIPT_NAME}" and
# Human-readable name of the current script. This is used only for output.
# Scripts are welcome to redefine it globally; likewise, functions are welcome
# to redefine it locally. (Set below.)
#string_global ZESHY_SCRIPT_NAME

# Directory to which Zeshy caches scripts implicitly compiled by zimport().
#string_global ZESHY_CACHE_COMPILATION_DIR="${ZESHY_DOT_DIR}/compilation"
