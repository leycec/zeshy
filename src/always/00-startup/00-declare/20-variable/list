#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_to_script_with_stdin <<'______________<heredoc?>______________'
Handle *list* (i.e., sequential array) variable declarers.
______________<heredoc?>______________

# ....................{ LISTS                              }....................
# Due to current inadequacies in zsh, lists and maps cannot be initialized or
# declared to be read-only at declaration time. To perform the latter, consider
# calling freeze_variable() after initializing such list or map after declaring
# such list or map. While cumbersome, zsh currently affords no alternatives:
#
#     >>> list sequence; sequence=( 'value 1' 'value 2' 'value 3' 'value 4' )
#     >>> freeze_variable sequence

declare_alias_with_stdin <<'________________<heredoc?>________________'
void list(string variable_name1, string variable_name2, ...)

Declare the passed *list* (i.e., sequential array) locally.
________________<heredoc?>________________
alias list='typeset -a --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void list_global(string variable_name1, string variable_name2, ...)

Declare the passed *list* (i.e., sequential array) globally, but _not_ exported
to the calling shell.
________________<heredoc?>________________
alias list_global='typeset -ag --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void list_global_export(string variable_name1, string variable_name2, ...)

Declare the passed *list* (i.e., sequential array) globally exported to the
calling shell.
________________<heredoc?>________________
alias list_global_export='export -a --'

# ....................{ LISTS ~ set                        }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void list_set(string variable_name1, string variable_name2, ...)

Declare the passed *list set* (i.e., sequential array ignoring duplicate values)
locally.
________________<heredoc?>________________
alias list_set='typeset -Ua --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void list_set_global(string variable_name1, string variable_name2, ...)

Declare the passed *list set* (i.e., sequential array ignoring duplicate values)
globally, but _not_ exported to the calling shell.
________________<heredoc?>________________
alias list_set_global='typeset -Uag --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void list_set_global_export(string variable_name1, string variable_name2, ...)

Declare the passed *list set* (i.e., sequential array ignoring duplicate values)
globally exported to the calling shell.
________________<heredoc?>________________
alias list_set_global_export='export -Ua --'

# ....................{ LISTS ~ tie                        }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void string_and_list_tied_on_character(
    string string_name, string list_name, character separator = ":")

Declare the passed string and list to be ``tied'' on the passed separator
(defaulting to `:`). Such declaration sets such string to the empty string and
such list to the empty list. Hence, define such string or list only after such
declaration. If preferred, such string (but _not_ list) may be defined in such
declaration. Such string and list will be synchronized such that:

* Setting such string implicitly sets such list to the result of splitting
  such string on such separator.
* Setting or appending such list implicitly sets such string to the result of
  joining such list's elements on such separator.

For example:

.string_and_list_tied_on_character()
==========================================
[source]
------------------------------------------
>>> string_and_list_tied_on_character\
...     on_hope="In wildness is the preservation of the world." under_ennui ' '
>>> print_string "${under_ennui[2]}" "${under_ennui[5]}" "${under_ennui[8]}"
wildness preservation world
>>> under_ennui=( Let us consider the way in which we spend our lives. )
>>> print_string "${on_hope}"
Let us consider the way in which we spend our lives.
------------------------------------------
==========================================
________________<heredoc?>________________
alias string_and_list_tied_on_character='typeset -T'

# --------------------( WASTELANDS                         )--------------------
