#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_with_stdin <<'______________<heredoc?>______________'
Handle *integer* (i.e., non-fractional number) variable declarers.
______________<heredoc?>______________

# ....................{ INTEGERS                           }....................
# zsh already provides builtin integer() for declaring local integers.

declare_alias_with_stdin <<'________________<heredoc?>________________'
void integer_global(string variable_name1, string variable_name2, ...)

Declare the passed integers globally, but _not_ exported to the calling shell.
________________<heredoc?>________________
alias integer_global='integer -g --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void integer_global_export(string variable_name1, string variable_name2, ...)

Declare the passed integers globally exported to the calling shell.
________________<heredoc?>________________
alias integer_global_export='export -i --'

declare_alias '
void integer_constant_global_export(string variable_name1, string variable_name2, ...)

Declare the passed integer constants globally exported to the calling shell.
'
alias integer_constant_global_export='export -ir --'

# ....................{ INTEGERS ~ base                    }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void integer_in_base(
    integer base,
    string variable_name1, string variable_name2, ...)

Declare the passed integers locally in the passed base. On expansion, such
integers will be implicitly converted to the equivalent values in such base.
Additionally, if such base is:

* `8`, such integers will be pretty printed in *octal format* and hence:
** Prefixed with a C-style `0`.
* `16`, such integers will be pretty printed in *hexadecimal format* and hence:
** Prefixed with a C-style `0x`.
** Digits in the range [10, 15] will be printed as capitalized letters in the
   range [A, F], per tradition.

For example: e.g.,

.integer_in_base()
==========================================
[source]
------------------------------------------
>>> integer_in_base 16 factory_farming=4277009102
>>> print_string    "${factory_farming}"
0xFEEDFACE
------------------------------------------
==========================================
________________<heredoc?>________________
alias integer_in_base='local -i'  # "integer" does _not_ suffice here

# ....................{ INTEGERS ~ file descriptor         }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void file_descriptor(string variable_name1, string variable_name2, ...)

Declare the passed file descriptors locally.
________________<heredoc?>________________
alias file_descriptor=integer

declare_alias_with_stdin <<'________________<heredoc?>________________'
void file_descriptor_global(string variable_name1, string variable_name2, ...)

Declare the passed file descriptors globally, but _not_ exported to the calling
shell.
________________<heredoc?>________________
alias file_descriptor_global=integer_global

declare_alias_with_stdin <<'________________<heredoc?>________________'
void file_descriptor_global_export(
    string variable_name1, string variable_name2, ...)

Declare the passed file descriptors globally exported to the calling shell.
________________<heredoc?>________________
alias file_descriptor_global_export=integer_global_export

# --------------------( WASTELANDS                         )--------------------
#* `10`, such integers will be converted to *decimal format*, the default format.
#(i.e., non-fractional number) 
