#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_with_stdin <<'______________<heredoc?>______________'
Handle *string* (i.e., non-numeric scalar) variable declarers.
______________<heredoc?>______________

# ....................{ DECLARATORS                        }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void string(string variable_name1, string variable_name2, ...)

Declare the passed strings locally.
________________<heredoc?>________________
alias string='local --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void string_global(string variable_name1, string variable_name2, ...)

Declare the passed strings globally, but _not_ exported to the calling shell.
________________<heredoc?>________________
alias string_global='typeset -g --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void string_global_export(string variable_name1, string variable_name2, ...)

Declare the passed strings globally exported to the calling shell.
________________<heredoc?>________________
alias string_global_export='export --'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void string_constant_global_export(
    string variable_name1, string variable_name2, ...)

Declare the passed string constants globally exported to the calling shell.
________________<heredoc?>________________
alias string_constant_global_export='export -r --'

# ....................{ DECLARATORS ~ character              }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void character(string variable_name1, string variable_name2, ...)

Declare the passed *character* (i.e., string of length one) locally. By `zsh`
constraint, characters are currently indistinguishable from strings. However,
explicitly declaring characters as such improves clarity, (possible) forwards
compatibility, and symmetry with existing builtins integer() and float().
________________<heredoc?>________________
alias character=string

declare_alias_with_stdin <<'________________<heredoc?>________________'
void character_global(string variable_name1, string variable_name2, ...)

Declare the passed character globally, but _not_ exported to the calling shell.
See character() for further details.
________________<heredoc?>________________
alias character_global=string_global

declare_alias_with_stdin <<'________________<heredoc?>________________'
void character_global_export(string variable_name1, string variable_name2, ...)

Declare the passed character globally exported to the calling shell. See
character() for further details.
________________<heredoc?>________________
alias character_global_export=string_global_export

declare_alias_with_stdin <<'________________<heredoc?>________________'
void character_constant_global_export(
    string variable_name1, string variable_name2, ...)

Declare the passed character constant globally exported to the calling shell. See
character() for further details.
________________<heredoc?>________________
alias character_constant_global_export=string_constant_global_export

# ....................{ DECLARATORS ~ boolean              }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
void boolean(string variable_name1, string variable_name2, ...)

Declare the passed booleans locally. By `zsh` constraint, booleans are currently
indistinguishable from strings, such that the empty string signifies a false
value and any nonempty string a true value. However, explicitly declaring
booleans as such improves clarity, (possible) forwards compatibility, and
symmetry with existing builtins integer() and float().
________________<heredoc?>________________
alias boolean=string

declare_alias_with_stdin <<'________________<heredoc?>________________'
void boolean_global(string variable_name1, string variable_name2, ...)

Declare the passed booleans globally, but _not_ exported to the calling shell.
See boolean() for further details.
________________<heredoc?>________________
alias boolean_global=string_global

declare_alias_with_stdin <<'________________<heredoc?>________________'
void boolean_global_export(string variable_name1, string variable_name2, ...)

Declare the passed booleans globally exported to the calling shell. See
boolean() for further details.
________________<heredoc?>________________
alias boolean_global_export=string_global_export

declare_alias_with_stdin <<'________________<heredoc?>________________'
void boolean_constant_global_export(
    string variable_name1, string variable_name2, ...)

Declare the passed boolean constants globally exported to the calling shell. See
boolean() for further details.
________________<heredoc?>________________
alias boolean_constant_global_export=string_constant_global_export

# --------------------( WASTELANDS                         )--------------------
