#!/usr/bin/env zsh
# ====================[ define                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle alias, function, and global definers.

# ....................{ DEFINERS                           }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
void define_alias(string alias_name, string alias_expansion)

Define the passed alias to expand to the passed expansion. While `zsh` already
offers intuitive syntax for defining aliases with names _not_ containing alias-
reserved characters (e.g., `"`, `=`, whitespace), defining aliases with names
containing such characters requires such characters be explicitly escaped and
hence is neither intuitive or safe. This function amends this: e.g.,

.define_alias()
==========================================
[source]
------------------------------------------
>>> define_alias "propaganda = explanation" 'print_string "
...     Israel is an embattled country. They rely very heavily on U.S. support.
...     So they have developed a very sophisticated system of propaganda. They
...     don't call it propaganda. They call it hasbarah. It is the only country
...     I know of in the world that refers to propaganda as explanation. The
...     Ministry of Propaganda is the Ministry of Explanation. The idea being
...     that our position on everything is so obviously correct that if we only
...     explain it to people, they will see that it is right."'
>>> get_line $("propaganda = explanation") -1
explain it to people, they will see that it is right.
------------------------------------------
==========================================
________________<heredoc?>________________
function define_alias() {
    #FIXME: Throw an exception if such alias already exists.
    # Validate passed arguments.
    (( # == 2 )) || die 'expected one alias name and one alias expansion'
    local alias_name alias_expansion="${2}"

    # Sanitize such name, escaping all alias-reserved characters. Unlike
    # functions, merely double quoting alias names does *NOT* suffice.
    alias_name="${1//(#m)([\"=[:space:]])/\\${MATCH}}"

    # Declare such alias.
    alias "${alias_name}"="${alias_expansion}"
}

# --------------------( WASTELANDS                         )--------------------
