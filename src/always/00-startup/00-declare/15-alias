#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'______________<heredoc?>______________'
Handle alias declarers.
______________<heredoc?>______________

# ....................{ GLOBALS                            }....................
# Global map from alias names to the help strings documenting such aliases. See
# ${ZESHY_FUNCTION_NAME_TO_HELP} for further details.
typeset -Ag ZESHY_ALIAS_NAME_TO_HELP

# ....................{ DECLARERS                          }....................
declare_function_with_stdin <<'/---'
void declare_alias(
    string alias_prototype = "",
    string alias_expansion = "",
    string documentation)

Declare the specified alias to be contained by the current parcel and documented
by the passed help string, where such alias is specified by either:

* The passed alias prototype, if such argument is passed.
* The alias prototype prefixing the passed help string, otherwise.

If an alias expansion is passed, define such alias to expand to such string;
else, such alias must be subsequently defined: e.g,

.declare_alias()
==========================================
[source]
------------------------------------------
>>> declare_alias "string on_activism(void)" 'print_string\
...    "It is not enough to fight for the land; it is even more important to
...     enjoy it. While you can. While it's still here. So get out there and
...     hunt and fish and mess around with your friends, ramble out yonder and
...     explore the forests, climb the mountains, bag the peaks, run the rivers,
...     breathe deep of that yet sweet and lucid air, sit quietly for a while
...     and contemplate the precious stillness, the lovely, mysterious, and
...     awesome space."\
...    "Enjoy yourselves, keep your brain in your head and your head firmly
...     attached to the body, the body active and alive, and I promise you this
...     much; I promise you this one sweet victory over our enemies, over those
...     desk-bound men and women with their hearts in a safe deposit box, and
...     their eyes hypnotized by desk calculators. I promise you this; You will
...     outlive the bastards."
>>> declare_alias\
...    "string on_purpose(void)
...
...     But the profoundest implications of the decreased work week were
...     philosophical and ecological: mankind, the Ecotopians assumed, was not
...     meant for production, as the 19th and 20th centuries believed. Instead,
...     humans were meant to take their modest place in the seamless, stable-
...     state web of living organisms, disturbing that web as little as
...     possible. This would mean sacrifice of present consumption, but it would
...     ensure future survival."
>>> alias on_purpose='print_string\
...    "People were to be happy not to the extent they dominated their fellow
...     creatures on the earth, but to the extent they lived in balance with
...     them. As a basic philosophy, the idea of political power is to put
...     technology and social structure at the service of humankind, rather than
...     the other way around."'
>>> get_string_line "$(on_activism)" 1
It is not enough to fight for the land; it is even more important to
>>> get_string_line "$(on_purpose)" -1
the other way around.
------------------------------------------
==========================================

== Alias Documentation ==

Alias help strings consist of:

. An optional *alias prototype* in `zeshy`-specific C-like syntax consisting of
  one or more alias return types, one alias name, and zero or more alias
  arguments (e.g.,
  `string the_parable_of_the_box(integer derrick, character jensen)`), if such
  prototype was _not_ passed as an argument already.
. An *alias description* in http://asciidoc.org[AsciiDoc] syntax, augmented with
  `zeshy`-specific markup for cross-referencing other `zeshy` documentation
  (e.g., `The *box* is +full+ of salmon, and a *man* sits +atop+ the box.`).
  Since single- and double-quoted `zsh` string syntax conflicts with such syntax,
  consider passing such description to declare_alias_with_stdin() as a
  here-document on standard input instead.

For completeness, we specify such syntax as a
http://en.wikipedia.org/wiki/Parsing_expression_grammar[Parser Expression Grammar (PEG)].
See the <<declare_function.peg,function documentation PEG>> from which this PEG
derives for all productions not listed here (e.g., ReturnTypes, Whitespace):

.Alias Documentation Grammar
[cols=">strong,^,<"]
|===============================================================================
| AliasDocumentation    | <- | AliasPrototype Whitespace+ AsciiDoc
| AliasPrototype        | <- | Whitespace* ReturnTypes
                               Whitespace+ AliasName
                               Whitespace* AliasArgs
| AliasName             | <- | AlphanumericString
| AliasArgs             | <- | ArgumentList | ArgumentChannels
| AliasArgChannels      | <- | ``['' Whitespace* ( AliasArgChannel Whitespace*
                               ``,'' Whitespace*)* AliasArgChannel Whitespace*
                               ``]''
| AliasArgChannel       | <- | AliasArgChannelName Whitespace* ``:'' Whitespace*
                               (Argument | ArgumentList)
| AliasArgChannelName   | <- | ``args'' | ``argstring'' | ``stdin''
|===============================================================================

== Alias Description and Prototype ==

Aliases support the same descriptions and prototypes as functions, with one
minor and one major exception. See declare_function() for all other details.

=== Minor Exception ===

Function prototypes permit multiple names. Alias prototypes permit only one.

=== Major Exception ===

Function prototypes permit only two argument channel names: `args` and `stdin`.
Alias prototypes permit a third argument channel specific to herestring-driven
aliases: `argstring`.

By design, zsh aliases are expanded inline and hence cannot accept arbitrary
arguments not accepted by the commands such aliases expand to. As example, the
alias `l` declared by `alias l=ls` accepts only the arguments accepted by
command `ls` -- no more, no less.

Herestring-driven aliases circumvent such constraints by accepting a single
herestring argument embedding one or more ``real'' arguments to be passed such
alias. Since such aliases _always_ accept a single herestring, declaring a
single-string argument list conveys no meaningful information. Rather, such
aliases should declare a herestring-specific argument channel `argstring`
accepting the argument list embedded in such herestring. For clarity, consider
optionally suffixing aliases defined in this way with `_from': e.g.,

.Herestring-driven Alias
==========================================
[source]
------------------------------------------
declare_alias '
void set_args_to_string_split_on_words_from[
    argstring: (string text1, string text2, ...)]

Set the current argument list to the passed strings split on shell words: e.g.,

    >>> string on_relations=\
    ...    "All fixed, fast-frozen relations, with their train of ancient and
    ...     venerable prejudices and opinions, are swept away, all new-formed
    ...     ones become antiquated before they can ossify. All that is solid
    ...     melts into air, all that is holy is profaned, and man is at last
    ...     compelled to face with sober senses his real conditions of life, and
    ...     his relations with his kind."
    >>> set_args_to_string_split_on_words_from "${on_relations}"
    >>> print_string ${3}
    fast-frozen
'
alias set_args_to_string_split_on_words_from='
{
    # Validate passed arguments.
    list args__sltssowf
    set_list_to_stdin_words args__sltssowf
    (( ${#args__sltssowf} >= 1 )) or die 'expected at least one string'

    # Temporary list to split such strings into.
    list words__sltssowf

    # Split such strings.
    set_list_to_string_words words__sltssowf "${args__sltssowf[@]}"

    # Set the current argument list to such words.
    set_args "${words__sltssowf[@]}"

    # Delete such temporary list.
    undefine_variable words__sltssowf
} <<<'
------------------------------------------
==========================================
/---
function declare_alias() {
    # Validate passed arguments.
    (( # == 1 || # == 3 )) || die\
        'expected either one help string or one alias prototype, one alias expansion, and one help string'
    local help__da="${argv[-1]}"\
        alias_prototype__da alias_expansion__da alias_name__da

    # If passed an alias prototype and expansion and help string, localize such
    # arguments. As this is the common case, handle this condition first.
    if (( # == 3 )) {
        # Localize such arguments.
        alias_prototype__da="${1}"
        alias_expansion__da="${2}"

        # Prepend such help string with such alias prototype.
        help__da="${alias_prototype__da}"$'\n\n'"${help__da}"

        # Match the alias name from such prototype prefixing such string or
        # throw an exception if such match fails.
        [[ "${alias_prototype__da}" =~\
           "${ZESHY_HELP_PCRE_ALIAS_PROTOTYPE_NAME}" ]] ||
            die_for_declarator_type_with_help 'alias' "${help__da}"

        # Localize such alias name.
        alias_name__da="${match[1]}"

        # Define such alias.
        define_alias "${alias_name__da}" "${alias_expansion__da}"
    # Else, only a help string was passed.
    } else {
        # Match the alias name from the alias prototype prefixing such string or
        # throw an exception if such match fails.
        [[ "${help__da}" =~\
           "${ZESHY_HELP_PCRE_ALIAS_PROTOTYPE_NAME}" ]] ||
            die_for_declarator_type_with_help 'alias' "${help__da}"

        # Localize such alias name.
        alias_name__da="${match[1]}"
    }

    # Map such alias to such help string.
    ZESHY_ALIAS_NAME_TO_HELP[${alias_name__da}]="${help__da}"

    # Add such alias to the current parcel.
    add_parcel_alias "${ZESHY_PARCEL_NAME}" "${alias_name__da}"
}

declare_function_with_stdin <<'/---'
void declare_alias_with_stdin[
    args: (string alias_prototype = "",
           string alias_expansion = ""),
    stdin: string documentation]

Declare the specified alias to be contained by the current parcel and documented
by the passed help string, where such alias is specified as under
declare_alias(). See declare_function_with_stdin() for further details.
/---
function declare_alias_with_stdin() {
    run_runnable_with_stdin declare_alias "${@}"
}

# ....................{ DEFINERS                           }....................
declare_function_with_stdin <<'/---'
void define_alias(string alias_name, string alias_expansion)

Define the passed alias to expand to the passed expansion. While `zsh` already
offers intuitive syntax for defining aliases with names _not_ containing alias-
reserved characters (e.g., `"`, `=`, whitespace), defining aliases with names
containing such characters requires such characters be explicitly escaped and
hence is neither intuitive or safe. This function amends this: e.g.,

.define_alias()
==========================================
[source]
------------------------------------------
>>> define_alias "propaganda = explanation" 'print_string "
...     Israel is an embattled country. They rely very heavily on U.S. support.
...     So they have developed a very sophisticated system of propaganda. They
...     don't call it propaganda. They call it hasbarah. It is the only country
...     I know of in the world that refers to propaganda as explanation. The
...     Ministry of Propaganda is the Ministry of Explanation. The idea being
...     that our position on everything is so obviously correct that if we only
...     explain it to people, they will see that it is right."'
>>> get_string_line $("propaganda = explanation") -1
explain it to people, they will see that it is right.
------------------------------------------
==========================================
/---
function define_alias() {
    # Validate passed arguments.
    (( # == 2 )) || die 'expected one alias name and one alias expansion'
    local alias_name__da alias_expansion__da="${2}"

    # Sanitize such name, escaping all alias-reserved characters. Unlike
    # functions, merely double quoting alias names does *NOT* suffice.
    alias_name__da="${1//(#m)([\"=[:space:]])/\\${MATCH}}"
#   print "define alias name: ${alias_name__da}"

    # If such alias already exists, throw an exception. See
    # is_alias_normal_or_global() for further details.
    alias -- "${alias_name__da}" &>/dev/null &&
        die "alias \"${alias_name__da}\" already exists:$(alias -- "${alias_name__da}")"

    # Declare such alias.
    alias -- "${alias_name__da}"="${alias_expansion__da}"
}

# ....................{ DEFINERS ~ type                    }....................
declare_alias_with_stdin <<'/---'
void alias_global(string alias_name, string alias_expansion)

Define a *global alias* (i.e., alias expanded in any shell word position rather
than only in command position).
/---
alias alias_global="alias -g"

declare_alias_with_stdin <<'/---'
void alias_suffix(string alias_name, string alias_expansion)

Define a *suffix alias* (i.e., alias expanded when a file of such suffixed
filetype is in command position).
/---
alias alias_suffix="alias -s"

# --------------------( WASTELANDS                         )--------------------
#FUXME: It'd be great to support an optional suffixing argument to
#declare_alias(): the alias expansion to expand such alias to. This eliminates
#the unctuous duplication inherent in the current approach, while still
#admitting such approach. The resulting prototype would resemble:
#
#   void declare_alias(string documentation, string expansion = "")
#
#Note this cannot be scaled to functions without stupid and extreme hardship
#(i.e., single- or double-quoting the entire function body *OR* escaping all
#shell-reserved characters in such body, which is equally absurd).
#FUXME: Actually, the above should be revised. Since alias prototype syntax is
#basically guaranteed *NOT* to conflict with zsh syntax, we want to change
#declare_alias() to support the following argument signature:
#
#void declare_alias(
#    string alias_prototype = "",
#    string alias_expansion = "",
#    string documentation)
#
#For example, rather than:
#
#   declare_alias_with_stdin <<'/---'
#   [status: true] return_true(void)
#
#   Return from the current runnable with *success* (i.e., zero exit status).
#   /---
#   alias return_true="return ${ZESHY_EXIT_STATUS_SUCCESS}"
#
#We would have:
#
#   declare_alias_with_stdin\
#       '[status: true] return_true(void)'\
#       "return ${ZESHY_EXIT_STATUS_SUCCESS}" <<'/---'
#   Return from the current runnable with *success* (i.e., zero exit status).
#   /---
#
#Pretty awesome, no? At that point, we've basically invented a zsh prototyping
#language with real-world effects. *ALL* aliases should really be migrated to
#the above definition, to reduce codebase redundancy. (That said, we should
#continue to support the single-argument version for orthogonality with
#declare_function().)
#
#Note that this isn't simply to reduce redundancy, however. Consider deprecating
#aliases, which we'll certainly want to do at some point. To support alias
#depcrecation, declare_alias() requires the alias expansion, which it then
#prepends with a statement printing the desired deprecation message. Critical!

#Set the documentation for the alias named by the variable declaration prefixing
#standard input to such input. Consider calling this rather than declare_alias(),
#which requires passing a string argument rather than standard input. See
#declare_function_with_stdin() for further details.
        #FUXME: This could probably be generalized to support "="-delimited
        #assignment, but I have doubts as to whether that'd be widely useful.

    # Unless such string matches the function help PCRE, throw an exception.
#   [[ "${help__da}" =~\
#      "${ZESHY_HELP_PCRE_ALIAS_PROTOTYPE_NAME}" ]] ||
#       die_for_declarator_type_with_help 'alias' "${help__da}"
#   for ((match_index=1; match_index <= ${#match}; ++match_index)) {
#       print "match ${match_index}: ${match[${match_index}]}"
#   }

#Set the documentation for the alias named by the alias prototype prefixing the
#passed string to such string. 
#by association with 
#only at the end of
#expressions, typically for filetypes).

    #FUXME: Fixup! We don't have to do much parsing here. Aliases can't be
    #globbable (as that's how we make things globbable in the first place) and
    #can't have synonyms, so we just need to parse the straightup alias name.
    #That still requires a bit of work, but by leveraging the above regular
    #expressions shouldn't be *TOO* terribly convoluted.
    #FUXME: O.K.; match similarly to declare_function() below, but using the
    #following PCRE instead: ${ZESHY_HELP_PCRE_ALIAS_PROTOTYPE_NAME}.
