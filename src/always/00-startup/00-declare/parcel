#!/usr/bin/env zsh
# ====================[ parcel                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle *parcel* (i.e., `zeshy`-specific abstractions containing aliases,
# parcels, and functions) declarers.

# ....................{ GLOBALS                            }....................
# Global map from parcel names to the help strings documenting such parcels. See
# ${ZESHY_FUNCTION_NAME_TO_HELP} for further details.
typeset -Ag ZESHY_PARCEL_NAME_TO_HELP

declare_global_with_stdin <<'________________<heredoc?>________________'
string ZESHY_PARCEL_CURRENT

Declare a new *parcel* (i.e., `zeshy`-specific abstractions containing aliases,
parcels, and functions) corresponding to the passed shell script (defaulting to
the current shell script) documented with the passed help string.
________________<heredoc?>________________

# ....................{ DECLARERS                          }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
void declare_parcel_for_script(
    string script_name = "${0}", string documentation)

Declare a new *parcel* (i.e., `zeshy`-specific abstractions containing aliases,
parcels, and functions) corresponding to the passed shell script (defaulting to
the current shell script) documented with the passed help string.
________________<heredoc?>________________
function declare_parcel_for_script() {
    # Validate passed arguments.
    (( # == 1 )) || die 'expected one help string'
    local help="${1}"

    # If such parcel has already been declared, throw an exception. Since
    # parcels are typically associated with unique paths, this should never
    # happen. Make sure it doesn't! See is_map_key() for further details.
    (( ${+ZESHY_PARCEL_NAME_TO_HELP[${parcel_name}]} )) and
        die "parcel \"${parcel_name}\" already declared"

    # Map such parcel name to such help string.
    ZESHY_PARCEL_NAME_TO_HELP[${parcel_name}]="${help}"

    #FIXME: Set the current parcel, as well.
}

declare_function_with_stdin <<'________________<heredoc?>________________'
void declare_parcel_for_script_with_stdin[
    args: string script_name = "${0}", stdin: string documentation]

Declare a new *parcel* (i.e., `zeshy`-specific abstractions containing aliases,
parcels, and functions) corresponding to the passed shell script (defaulting to
the current shell script) documented with standard input. This function is the
standard input-specific analogue to declare_parcel(), which accepts a string
argument rather than standard input. See declare_function_with_stdin() for
further details on why this function is preferable to declare_parcel().
________________<heredoc?>________________
function declare_parcel_for_script_with_stdin() {
    run_runnable_with_stdin declare_parcel_for_script
}

# --------------------( WASTELANDS                         )--------------------
