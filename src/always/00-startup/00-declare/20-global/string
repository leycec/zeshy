#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'______________<heredoc?>______________'
Handle *string* (i.e., non-numeric scalar) variable declarators.
______________<heredoc?>______________

# ....................{ DECLARATORS                        }....................
declare_alias_with_stdin\
    'void string(string variable_name1, string variable_name2, ...)'\
    'local --' <<'/---'
Declare the passed strings locally.
/---

declare_alias_with_stdin\
    'void string_global(string variable_name1, string variable_name2, ...)'\
    'typeset -g --' <<'/---'
Declare the passed strings globally, but _not_ exported to the calling shell.
/---

declare_alias_with_stdin\
    'void string_global_export(
        string variable_name1, string variable_name2, ...)'\
    'export --' <<'/---'
Declare the passed strings globally exported to the calling shell.
/---

# ....................{ DECLARATORS ~ constant             }....................
declare_alias_with_stdin\
    'void string_constant_global(
        string variable_name1, string variable_name2, ...)'\
    'typeset -gr --' <<'/---'
Declare the passed string constants globally, but _not_ exported to the calling
shell.
/---

declare_alias_with_stdin\
    'void string_constant_global_export(
        string variable_name1, string variable_name2, ...)'\
    'export -r --' <<'/---'
Declare the passed string constants globally exported to the calling shell.
/---

# ....................{ DECLARATORS ~ character              }....................
declare_alias_with_stdin\
    'void character(string variable_name1, string variable_name2, ...)'\
    'string' <<'/---'
Declare the passed *character* (i.e., string of length one) locally. By `zsh`
constraint, characters are currently indistinguishable from strings. However,
explicitly declaring characters as such improves clarity, (possible) forwards
compatibility, and symmetry with existing builtins integer() and float().
/---

declare_alias_with_stdin\
    'void character_global(string variable_name1, string variable_name2, ...)'\
    'string_global' <<'/---'
Declare the passed character globally, but _not_ exported to the calling shell.
See character() for further details.
/---

declare_alias_with_stdin\
    'void character_global_export(string variable_name1, string variable_name2, ...)'\
    'string_global_export' <<'/---'
Declare the passed character globally exported to the calling shell. See
character() for further details.
/---

declare_alias_with_stdin\
    'void character_constant_global_export(
        string variable_name1, string variable_name2, ...)'\
    'string_constant_global_export' <<'/---'
Declare the passed character constant globally exported to the calling shell. See
character() for further details.
/---

# ....................{ DECLARATORS ~ boolean              }....................
#FIXME: Integers actually make a *VASTLY* preferable core type for implementing
#booleans than strings. Testing integer zeroness or non-zeroness is more
#efficient *AND* readable than the equivalent string emptiness or nonemptiness
#tests. Moreover, it just makes intuitive sense to represent booleans as
#integers constrained to 0 and 1. To effect this change, we'll need to:
#
#* Revise "00-startup/02-constants/boolean".
#* Revise "variable/boolean".
#
#That *SHOULD* be it. But I'm sure everything will break anyway. *sigh*

declare_alias_with_stdin\
    'void boolean(string variable_name1, string variable_name2, ...)'\
    'string' <<'/---'
Declare the passed booleans locally. By `zsh` constraint, booleans are currently
indistinguishable from strings, such that the empty string signifies a false
value and any nonempty string a true value. However, explicitly declaring
booleans as such improves clarity, (possible) forwards compatibility, and
symmetry with existing builtins integer() and float().
/---

declare_alias_with_stdin\
    'void boolean_global(string variable_name1, string variable_name2, ...)'\
    'string_global'  <<'/---'
Declare the passed booleans globally, but _not_ exported to the calling shell.
See boolean() for further details.
/---

declare_alias_with_stdin\
    'void boolean_global_export(string variable_name1, string variable_name2, ...)'\
    'string_global_export' <<'/---'
Declare the passed booleans globally exported to the calling shell. See
boolean() for further details.
/---

declare_alias_with_stdin\
    'void boolean_constant_global_export(
        string variable_name1, string variable_name2, ...)'\
    'string_constant_global_export' <<'/---'
Declare the passed boolean constants globally exported to the calling shell. See
boolean() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
