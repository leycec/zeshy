#!/usr/bin/env zsh
# ====================[ io                                 ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define I/O-specific aliases.

# ....................{ OUTPUTTERS                         }....................
# For efficiency, implement low-level outputters as aliases and not functions.
# While implementing such ouputters as functions is trivial, doing so reduces
# the efficiency of numerous functions expanding such aliases. See also:
#
# * "output/output", wrapping such outputters in high-level functions.
# * "string/join", calling builtin print() to efficiently join strings.

#FIXME: We need to manually crawl through the codebase, replacing every instance
#of "print --" (which is dangerous and *WRONG*) and "print -r --" with expansion
#of this alias. You know the drudgery, by now.
declare_alias_with_stdin <<'-\-'
string output_string(string text1 = "", string text2, ...)

Output the passed strings (defaulting to the empty string) to standard output
with trailing newline. This low-level alias is principally intended for non-
interactive uses (e.g., returning strings from getter functions called from
process substitutions). Consider calling higher-level function print_string()
instead for interactive uses (e.g., printing strings to the current terminal).
Such function properly maintains `zeshy` globals monitoring interactive output;
this alias does not.
-\-
alias output_string='print -r --'

declare_alias_with_stdin <<'-\-'
string output_string_sans_newline(string text1 = "", string text2, ...)

Output the passed strings (defaulting to the empty string) to standard output
without trailing newline. See output_string() for further details.
-\-
alias output_string_sans_newline='print -nr --'

declare_function_with_stdin <<'-\-'
string output_string_expanding_escapes(string text1 = "", string text2, ...)

Output the passed strings (defaulting to the empty string) to standard output
with trailing newline and recognizing all escape sequences recognized by low-
level builtins echo() and print(). These include:

* `\a`, a bell character.
* `\b`, a backspace.
* `\c`, suppressing the final newline.
* `\e`, a escape.
* `\f`, a form feed.
* `\n`, a newline.
* `\r`, a carriage return.
* `\t`, a horizontal tab.
* `\v`, a vertical tab.
* `\\`, a backslash.
* `\0NNN`, the character with octal value NNN.
* `\xNN`, the character with hexadecimal value NN.
* `\C-X`, producing the control character corresponding to character X. Namely:
** `\C-@`, control character NUL (null).
** `\C-?`, control character DEL (delete).
* `\X`, where `X` is any character _not_ listed above, escaping and hence
  printing `X` as is.

For example:

.output_string_expanding_escapes()
==========================================
[source]
------------------------------------------
>>> string morning_window="\nTHEY are rattling breakfast plates...\n"
>>> output_string_expanding_escapes "${morning_window}"

THEY are rattling breakfast plates...

>>> output_string "${morning_window}"
\nTHEY are rattling breakfast plates...\n
------------------------------------------
==========================================

See output_string() for further details.
-\-
alias output_string_expanding_escapes='print --'

# --------------------( WASTELANDS                         )--------------------
