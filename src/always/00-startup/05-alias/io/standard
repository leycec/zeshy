#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle aliases for *standard file descriptors* (i.e., standard input, output,
and error).
-/-

# ....................{ GETTERS                            }....................
declare_alias_with_stdin\
    'string get_stdin[stdin: string input]'\
    "< \"${ZESHY_STDIN_PATH}\"" <<'/---'
Get all standard input written to the current shell, even when expanded from a
process substitution. By design, this alias performs _no_ safety checks (e.g.,
to ensure standard input is open and nonempty) and hence should only be
expanded by functions performing such checks (e.g., set_string_to_stdin()):
e.g.,

.get_stdin()
==========================================
[source]
------------------------------------------
>>> string on_war_propaganda=\
...    "All war propaganda consists, in the last resort, in substituting
...     diabolical abstractions for human beings. Similarly, those who defend
...     war have invented a pleasant sounding vocabulary of abstractions in
...     which to describe the process of mass murder."
>>> { get_string_line "$(get_stdin)" -1 } <<<"${on_war_propaganda}"
which to describe the process of mass murder.
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
declare_alias_with_stdin <<'/---'
void set_float_to_stdout_mtime(string float_name)

Set the passed float variable to the *mtime* (i.e., modification time) in high-
resolution fractional seconds since the Unix epoch of the most recent write to
standard output by the current shell. See get_time() for further details.
/---
alias set_float_to_stdout_mtime='{
    # Validate passed arguments. Avoid calling die_unless_variable_float(), as
    # set_float_to_stdin() already does so below.
    string float_name__sftso; set_string_to_stdin float_name__sftso

    # Resolve "/dev/fd/1" to a non-symbolic absolute path. Assuming the
    # current shell to be a pseudo-terminal, "/dev/fd/1" is typically a
    # symbolic link to the device for such terminal (e.g., "/dev/pts/7").
    # Referring to standard output by such resolved rather than symbolic
    # path is essential; we run the command getting standard output''s mtime
    # from a process substitution in which symbolic path "/dev/fd/1" refers
    # to a shell pipe rather than the desired pseudo-terminal.
    #
    # Sadly, the only safe means of resolving such path is as below.
    # Replacing the first pipeline subcommand with a call to
    # canonicalize_path() uselessly returns "/dev/fd/1" without resolving
    # such path. Likewise, replacing the second pipeline subcommand with a
    # process substitution has the same effect. (My inveterate Gods, but
    # this is subtle.)
    string stdout_filename__sftso
    output_string "${ZESHY_STDOUT_FILE_DESCRIPTOR_PATH}"(:A) |
        set_string_to_stdin stdout_filename__sftso

    # Set such float to such path''s mtime. See set_float_to_float() for
    # further details.
    get_path_mtime "${stdout_filename__sftso}" |
        set_float_to_stdin "${float_name__sftso}"
#   output_string "stdout_filename: ${stdout_filename__sftso}; stdout_mtime: ${(P)float_name__sftso}"
} <<<'

# ....................{ CLOSERS                            }....................
declare_alias_with_stdin\
    'void close_stdin(void)'\
    "exec ${ZESHY_STDIN_FILE_DESCRIPTOR}<&-" <<'/---'
Close the standard input file descriptor (i.e., 0) and corresponding named pipe
(i.e., `/dev/stdin`).
/---

declare_alias_with_stdin\
    'void close_stdout(void)'\
    "exec ${ZESHY_STDOUT_FILE_DESCRIPTOR}>&-" <<'/---'
Close the standard output file descriptor (i.e., 1) and corresponding named pipe
(i.e., `/dev/stdout`).
/---
alias close_stdout=

declare_alias_with_stdin\
    'void close_stderr(void)'\
    "exec ${ZESHY_STDERR_FILE_DESCRIPTOR}>&-" <<'/---'
Close the standard error file descriptor (i.e., 2) and corresponding named pipe
(i.e., `/dev/stderr`).
/---

# --------------------( WASTELANDS                         )--------------------
# ....................{ RUNNERS                            }....................
#FUXME: Terribly name, as this isn't a runner in the expected sense. Instead:
#
#* Rename this alias to print_stdin().
#* Drop the suffixing "|", which most callers would find unexpected.
#* Replace existing expansions of this alias with "print_stdin |".
#declare_alias_with_stdin\
#    'string run_command_with_stdin_piped(
#        string command_name, string command_arg1, string command_arg2, ...)'\
#    "{
#        < \"${ZESHY_STDIN_PATH}\"
#        close_stdin
#    } |" <<'/---'
#Run the passed command by piping the standard input piped to the current
#function or script to such command. Typically, this alias is used in concert
#with the is_stdin_pipe() function to propagate piped input: e.g.,
#
#.run_command_with_stdin_piped()
#==========================================
#[source]
#------------------------------------------
#>>> function salvia() {
#...     if { is_stdin_pipe } {
#...         run_command_with_stdin_piped cat
#...     } else {
#...         output_string "${@}"
#...     }
#... }
#>>> output_string divinorum | salvia
#divinorum
#>>> salvia divinorum
#divinorum
#------------------------------------------
#==========================================
#/---

#   die_unless_variable_float "${float_name__sftso}"
#FUXME: Rename to ZESHY_STDIN_FILE_DESCRIPTOR and define a new
#ZESHY_STDIN_DEVICE_FILE (or perhaps simply ZESHY_STDIN_FILE, I should think)
#global expanding to "/dev/stdin". Then replace all instances of /dev/stdin with
#"${ZESHY_STDIN_DEVICE_FILE}".
#FUXME: Do so similarly for OUTPUT and ERROR globals, below.
