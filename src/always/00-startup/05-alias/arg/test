#!/usr/bin/env zsh
# ====================[ test                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle argument count testing and exception throwing.

#FIXME: Sweet. I finally figured out how to implement general argument count
#exception handlers. Fairly simple, once I reasoned it through:
#
#alias die_unless_args_in_range='die_unless_args_in_range ${#}'
#function die_unless_args_in_range() {
#    die_unless_args_4\
#        'expected one argument count, one lower bound, one upper bound, and one message'
#    (( ${2} <= ${1} && ${1} <= ${3} )) or die "${4}"
#}
#
#Clever, no? Dead simple, too! That said, continue to retain the efficient
#versions for, well... efficiency's sake.

# ....................{ EXCEPTIONS                         }....................
# While component "arg" defines aliases accepting at most one argument and hence
# implementable via herestrings, this component defines aliases (generally)
# accepting two arguments (i.e., argument count and exception message) and hence
# implementable only by explicitly defining aliases specific to all common
# argument counts. While horrible, there are subtle benefits to such an
# approach: principally, efficiency.

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_if_args(void)

Throw an exception with a stock message if the caller passed any arguments.
________________<heredoc?>________________
alias die_if_args='(( # )) and die "expected no arguments"'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_arg(string error_message)

Throw an exception with the passed message unless the caller passed exactly one
argument.
________________<heredoc?>________________
alias die_unless_arg='(( # == 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args(string error_message)

Throw an exception with the passed message unless the caller passed at least one
argument.
________________<heredoc?>________________
alias die_unless_args='(( # )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0(string error_message)

Throw an exception with the passed message unless the caller passed no
arguments.
________________<heredoc?>________________
alias die_unless_args_0='(( # == 0 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_1(string error_message)

Throw an exception with the passed message unless the caller passed at most one
argument.
________________<heredoc?>________________
alias die_unless_args_0_to_1='(( # <= 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_2(string error_message)

Throw an exception with the passed message unless the caller passed at most two
arguments.
________________<heredoc?>________________
alias die_unless_args_0_to_2='(( # <= 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_3(string error_message)

Throw an exception with the passed message unless the caller passed at most
three arguments.
________________<heredoc?>________________
alias die_unless_args_0_to_3='(( # <= 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_4(string error_message)

Throw an exception with the passed message unless the caller passed at most four
arguments.
________________<heredoc?>________________
alias die_unless_args_0_to_4='(( # <= 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1(string error_message)

Throw an exception with the passed message unless the caller passed exactly one
argument.
________________<heredoc?>________________
alias die_unless_args_1='(( # == 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_or_more(string error_message)

Throw an exception with the passed message unless the caller passed at least one
argument.
________________<heredoc?>________________
alias die_unless_args_1_or_more='(( # >= 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_to_2(string error_message)

Throw an exception with the passed message unless the caller passed one or two
arguments.
________________<heredoc?>________________
alias die_unless_args_1_to_2='(( # == 1 || # == 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_to_3(string error_message)

Throw an exception with the passed message unless the caller passed one to three
arguments.
________________<heredoc?>________________
alias die_unless_args_1_to_3='(( 1 <= # && # <= 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_to_4(string error_message)

Throw an exception with the passed message unless the caller passed one to four
arguments.
________________<heredoc?>________________
alias die_unless_args_1_to_4='(( 1 <= # && # <= 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_2(string error_message)

Throw an exception with the passed message unless the caller passed exactly two
arguments.
________________<heredoc?>________________
alias die_unless_args_2='(( # == 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_2_or_more(string error_message)

Throw an exception with the passed message unless the caller passed at least two
arguments.
________________<heredoc?>________________
alias die_unless_args_2_or_more='(( # >= 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_2_to_3(string error_message)

Throw an exception with the passed message unless the caller passed two or three
arguments.
________________<heredoc?>________________
alias die_unless_args_2_to_3='(( # == 2 || # == 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3(string error_message)

Throw an exception with the passed message unless the caller passed exactly
three arguments.
________________<heredoc?>________________
alias die_unless_args_3='(( # == 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3_or_more(string error_message)

Throw an exception with the passed message unless the caller passed at least
three arguments.
________________<heredoc?>________________
alias die_unless_args_3_or_more='(( # >= 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3_to_4(string error_message)

Throw an exception with the passed message unless the caller passed three or
four arguments.
________________<heredoc?>________________
alias die_unless_args_3_to_4='(( # == 3 || # == 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_4(string error_message)

Throw an exception with the passed message unless the caller passed exactly four
arguments.
________________<heredoc?>________________
alias die_unless_args_4='(( # == 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_4_or_more(string error_message)

Throw an exception with the passed message unless the caller passed at least
four arguments.
________________<heredoc?>________________
alias die_unless_args_4_or_more='(( # >= 4 )) || die'

# ....................{ TESTERS                            }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_equals(integer argument_count)

Return success if the caller passed such number of arguments.
________________<heredoc?>________________
alias is_args_equals='{
    string count__iae; set_string_to_stdin count__iae
    die_unless_integer_positive "${count__iae}"
    (( # == count__iae ))
} <<<'

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_at_least(integer argument_count)

Return success if the caller passed at least such number of arguments.
________________<heredoc?>________________
alias is_args_at_least='{
    string count__iaal; set_string_to_stdin count__iaal
    die_unless_integer_positive "${count__iaal}"
    (( # <= count__iaal ))
} <<<'

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_at_most(integer argument_count)

Return success if the caller passed at most such number of arguments.
________________<heredoc?>________________
alias is_args_at_most='{
    string count__iaam; set_string_to_stdin count__iaam
    die_unless_integer_positive "${count__iaam}"
    (( # >= count__iaam ))
} <<<'

# ....................{ TESTERS ~ fast                     }....................
# The above aliases suffice to test against all possible single argument counts.
# For testing against pairs of such counts *AND* parity with exception handling
# nomenclature (e.g., die_unless_args_3_or_more()), declare additional such
# testers with the same nomenclature.

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_arg(void)

Return success if the caller passed exactly one argument.
________________<heredoc?>________________
alias is_arg='(( # == 1 ))'

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args(void)

Return success if the caller passed at least one argument.
________________<heredoc?>________________
alias is_args='(( # ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0(void)

Return success if the caller passed no arguments.
________________<heredoc?>________________
alias is_args_0='(( # == 0 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0_to_1(void)

Return success if the caller passed at most one argument.
________________<heredoc?>________________
alias is_args_0_to_1='(( # <= 1 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0_to_2(void)

Return success if the caller passed at most two arguments.
________________<heredoc?>________________
alias is_args_0_to_2='(( # <= 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0_to_3(void)

Return success if the caller passed at most three arguments.
________________<heredoc?>________________
alias is_args_0_to_3='(( # <= 3 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_1(void)

Return success if the caller passed exactly one argument.
________________<heredoc?>________________
alias is_args_1='(( # == 1 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_1_to_2(void)

Return success if the caller passed either one or two arguments.
________________<heredoc?>________________
alias is_args_1_to_2='(( # == 1 || # == 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_1_to_3(void)

Return success if the caller passed between one to three arguments.
________________<heredoc?>________________
alias is_args_1_to_3='(( # >= 1 && # <= 3 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_2(void)

Return success if the caller passed exactly two arguments.
________________<heredoc?>________________
alias is_args_2='(( # == 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_2_or_more(void)

Return success if the caller passed at least two arguments.
________________<heredoc?>________________
alias is_args_2_or_more='(( # >= 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_3_or_more(void)

Return success if the caller passed at least three arguments.
________________<heredoc?>________________
alias is_args_3_or_more='(( # >= 3 ))'

# --------------------( WASTELANDS                         )--------------------
