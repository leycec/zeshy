#!/usr/bin/env zsh
# ====================[ test                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle argument count testing and exception throwing.

# ....................{ EXCEPTIONS                         }....................
# Since argument counts are nonnegative, defining hypothetical functions
# die_unless_args_at_most() and is_args_at_most() is unhelpful; functions
# die_unless_args_in_range() and is_args_in_range() with the first passed
# argument 0 already implement such functionality.

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_equals(
    integer argument_count,
    string exception_message = "expected ${argument_count} arguments")

Throw an exception with the passed message unless the caller passed the passed
number of arguments.
________________<heredoc?>________________
   alias die_unless_args_equals='die_unless_args_equals ${#}'
function die_unless_args_equals() {
    die_unless_args_2_or_3 'expected one argument count and one message'
    is_integer_equals "${@[1,2]}" or {
        string argument_count="${2}"
        die "${4:-expected ${argument_count} arguments}"
    }
}

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_at_least(
    integer argument_count,
    string exception_message = "expected at least ${argument_count} arguments")

Throw an exception with the passed message unless the caller passed at least the
passed number of arguments.
________________<heredoc?>________________
   alias die_unless_args_at_least='die_unless_args_at_least ${#}'
function die_unless_args_at_least() {
    die_unless_args_2_or_3 'expected one argument count and one message'
    is_integer_at_least "${@[1,2]}" or {
        string argument_count="${2}"
        die "${4:-expected at least ${argument_count} arguments}"
    }
}

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_in_range(
    integer minimum_argument_count,
    integer maximum_argument_count,
    string exception_message =
        "expected between [${minimum_argument_count}, ${maximum_argument_count}] arguments")

Throw an exception with the passed message unless the caller passed a number of
arguments in the passed range. See is_args_in_range() for further details.
________________<heredoc?>________________
   alias die_unless_args_in_range='die_unless_args_in_range ${#}'
function die_unless_args_in_range() {
    die_unless_args_3_or_4\
        'expected one argument count, one minimum count, one maximum count, and one message'
    is_integer_in_range "${@[1,3]}" or {
        string argument_count_minimum="${2}" argument_count_maximum="${3}"
        die "${4:-expected between [${argument_count_minimum}, ${argument_count_maximum}] arguments}"
    }
}

# ....................{ TESTERS                            }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_equals(integer argument_count)

Return success if the caller passed the passed number of arguments.
________________<heredoc?>________________
alias is_args_equals='is_integer_equals ${#}'

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_at_least(integer argument_count)

Return success if the caller passed at least the passed number of arguments.
________________<heredoc?>________________
alias is_args_at_least='is_integer_at_least ${#}'

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_in_range(
    integer minimum_argument_count, integer maximum_argument_count)

Return success if the caller passed a number of arguments in the passed range
(i.e., greater than or equal to the passed minimum and less than or equal to the
passed maximum).
________________<heredoc?>________________
alias is_args_in_range='is_integer_in_range ${#}'

# ....................{ EXCEPTIONS ~ fast                  }....................
# For efficiency, declare optimized aliases handling common argument counts.

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_if_args(void)

Throw an exception with a stock message if the caller passed any arguments.
________________<heredoc?>________________
alias die_if_args='(( # )) and die "expected no arguments"'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_arg(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly one
argument.
________________<heredoc?>________________
alias die_unless_arg='(( # == 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args(string error_message = "")

Throw an exception with the passed message unless the caller passed at least one
argument.
________________<heredoc?>________________
alias die_unless_args='(( # )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0(string error_message = "")

Throw an exception with the passed message unless the caller passed no
arguments.
________________<heredoc?>________________
alias die_unless_args_0='(( # == 0 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_1(string error_message = "")

Throw an exception with the passed message unless the caller passed at most one
argument.
________________<heredoc?>________________
alias die_unless_args_0_to_1='(( # <= 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_2(string error_message = "")

Throw an exception with the passed message unless the caller passed at most two
arguments.
________________<heredoc?>________________
alias die_unless_args_0_to_2='(( # <= 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_3(string error_message = "")

Throw an exception with the passed message unless the caller passed at most
three arguments.
________________<heredoc?>________________
alias die_unless_args_0_to_3='(( # <= 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_0_to_4(string error_message = "")

Throw an exception with the passed message unless the caller passed at most four
arguments.
________________<heredoc?>________________
alias die_unless_args_0_to_4='(( # <= 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly one
argument.
________________<heredoc?>________________
alias die_unless_args_1='(( # == 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_or_more(string error_message = "")

Throw an exception with the passed message unless the caller passed at least one
argument.
________________<heredoc?>________________
alias die_unless_args_1_or_more='(( # >= 1 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_to_2(string error_message = "")

Throw an exception with the passed message unless the caller passed one or two
arguments.
________________<heredoc?>________________
alias die_unless_args_1_to_2='(( # == 1 || # == 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_to_3(string error_message = "")

Throw an exception with the passed message unless the caller passed between one
to three arguments.
________________<heredoc?>________________
alias die_unless_args_1_to_3='(( 1 <= # && # <= 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_1_to_4(string error_message = "")

Throw an exception with the passed message unless the caller passed between one
to four arguments.
________________<heredoc?>________________
alias die_unless_args_1_to_4='(( 1 <= # && # <= 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_2(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly two
arguments.
________________<heredoc?>________________
alias die_unless_args_2='(( # == 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_2_or_more(string error_message = "")

Throw an exception with the passed message unless the caller passed at least two
arguments.
________________<heredoc?>________________
alias die_unless_args_2_or_more='(( # >= 2 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_2_to_3(string error_message = "")

Throw an exception with the passed message unless the caller passed two or three
arguments.
________________<heredoc?>________________
alias die_unless_args_2_to_3='(( # == 2 || # == 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly
three arguments.
________________<heredoc?>________________
alias die_unless_args_3='(( # == 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3_or_more(string error_message = "")

Throw an exception with the passed message unless the caller passed at least
three arguments.
________________<heredoc?>________________
alias die_unless_args_3_or_more='(( # >= 3 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3_to_4(string error_message = "")

Throw an exception with the passed message unless the caller passed three or
four arguments.
________________<heredoc?>________________
alias die_unless_args_3_to_4='(( # == 3 || # == 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_3_to_5(string error_message = "")

Throw an exception with the passed message unless the caller passed between
three to five arguments.
________________<heredoc?>________________
alias die_unless_args_3_to_5='(( 3 <= # && # <= 5 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_4(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly four
arguments.
________________<heredoc?>________________
alias die_unless_args_4='(( # == 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_4_or_more(string error_message = "")

Throw an exception with the passed message unless the caller passed at least
four arguments.
________________<heredoc?>________________
alias die_unless_args_4_or_more='(( # >= 4 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_5(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly five
arguments.
________________<heredoc?>________________
alias die_unless_args_5='(( # == 5 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_6(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly six
arguments.
________________<heredoc?>________________
alias die_unless_args_6='(( # == 6 )) || die'

declare_alias_with_stdin <<'________________<heredoc?>________________'
void die_unless_args_7(string error_message = "")

Throw an exception with the passed message unless the caller passed exactly
seven arguments.
________________<heredoc?>________________
alias die_unless_args_7='(( # == 7 )) || die'

# ....................{ TESTERS ~ fast                     }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_arg(void)

Return success if the caller passed exactly one argument.
________________<heredoc?>________________
alias is_arg='(( # == 1 ))'

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args(void)

Return success if the caller passed at least one argument.
________________<heredoc?>________________
alias is_args='(( # ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0(void)

Return success if the caller passed no arguments.
________________<heredoc?>________________
alias is_args_0='(( # == 0 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0_to_1(void)

Return success if the caller passed at most one argument.
________________<heredoc?>________________
alias is_args_0_to_1='(( # <= 1 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0_to_2(void)

Return success if the caller passed at most two arguments.
________________<heredoc?>________________
alias is_args_0_to_2='(( # <= 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_0_to_3(void)

Return success if the caller passed at most three arguments.
________________<heredoc?>________________
alias is_args_0_to_3='(( # <= 3 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_1(void)

Return success if the caller passed exactly one argument.
________________<heredoc?>________________
alias is_args_1='(( # == 1 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_1_to_2(void)

Return success if the caller passed either one or two arguments.
________________<heredoc?>________________
alias is_args_1_to_2='(( # == 1 || # == 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_1_to_3(void)

Return success if the caller passed between one to three arguments.
________________<heredoc?>________________
alias is_args_1_to_3='(( # >= 1 && # <= 3 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_2(void)

Return success if the caller passed exactly two arguments.
________________<heredoc?>________________
alias is_args_2='(( # == 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_2_or_more(void)

Return success if the caller passed at least two arguments.
________________<heredoc?>________________
alias is_args_2_or_more='(( # >= 2 ))'

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_args_3_or_more(void)

Return success if the caller passed at least three arguments.
________________<heredoc?>________________
alias is_args_3_or_more='(( # >= 3 ))'

# --------------------( WASTELANDS                         )--------------------
#FUXME: Woooops. Had I only discovered herestring-driven aliases earlier, we
#might have *VASTLY* simplified these. It's extremely silly to explicitly define
#one alias for each possible number of arguments. But that's exactly what we've
#done, sadly. Happily, we can correct this now before we do any more inelegant
#damage. Here's an example alias obseleting *ALL* of the "_or_more"-suffixed
#tester aliases below:
#
#alias is_args_at_least='{
#   (( # <= $(< /dev/stdin) ))
#} <<<'
#
#That's not *QUITE* right, of course. We'd want to die unless a positive integer
#was passed. But you gather the idea, yes? Since such approach does *NOT* apply
#to exception throwers (which would need to accept two arguments and hence not
#be implementable with herestring-driven aliases), we should split this file
#into two components: "arg/exception" and "arg/arg".

#FUXME: Sweet. I finally figured out how to implement general argument count
#exception handlers. Fairly simple, once I reasoned it through:
#
#alias die_unless_args_in_range='die_unless_args_in_range ${#}'
#function die_unless_args_in_range() {
#    die_unless_args_4\
#        'expected one argument count, one lower bound, one upper bound, and one message'
#    (( ${2} <= ${1} && ${1} <= ${3} )) or die "${4}"
#}
#
#Clever, no? Dead simple, too! That said, continue to retain the efficient
#versions for, well... efficiency's sake.

#declare_alias_with_stdin <<'________________<heredoc?>________________'
#[status: boolean] is_args_at_most(integer argument_count)
#
#Return success if the caller passed at most the passed number of arguments.
#________________<heredoc?>________________
#alias is_args_at_most='is_integer_at_most ${#}'

#alias is_args_at_least='{
#    string count__iaal; set_string_to_stdin count__iaal
#    die_unless_integer_positive "${count__iaal}"
#    (( # <= count__iaal ))
#} <<<'
#alias is_args_at_most='{
#    string count__iaam; set_string_to_stdin count__iaam
#    die_unless_integer_positive "${count__iaam}"
#    (( # >= count__iaam ))
#} <<<'
#alias die_unless_args_in_range='die_unless_args_in_range ${#}'
#function is_args_in_range() {
#    die_unless_args_4\
#        'expected one argument count, one lower bound, one upper bound, and one message'
#    (( ${2} <= ${1} && ${1} <= ${3} )) or die "${4}"
#}
#alias is_args_equals='{
#    string count__iae; set_string_to_stdin count__iae
#    die_unless_integer_positive "${count__iae}"
#    (( # == count__iae ))
#} <<<'
# The above aliases suffice to test against all possible single argument counts.
# For testing against pairs of such counts *AND* parity with exception handling
# nomenclature (e.g., die_unless_args_3_or_more()), declare additional such
# testers with the same nomenclature.

# While component "arg" defines aliases accepting at most one argument and hence
# implementable via herestrings, this component defines aliases (generally)
# accepting two arguments (i.e., argument count and exception message) and hence
# implementable only by explicitly defining aliases specific to all common
# argument counts. While horrible, there are subtle benefits to such an
# approach: principally, efficiency.
