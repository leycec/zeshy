#!/usr/bin/env zsh
# ====================[ string                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle string declarator aliases.

# ....................{ DECLARATORS                        }....................
document_alias '
void string<string variable_name1, string variable_name2, ...>

Declare the passed strings locally.
'
alias string='local --'

document_alias '
void string_global<string variable_name1, string variable_name2, ...>

Declare the passed strings globally but *NOT* exported to the calling shell.
'
alias string_global='typeset -g --'

document_alias '
void string_global_export<string variable_name1, string variable_name2, ...>

Declare the passed strings globally exported to the calling shell.
'
alias string_global_export='export --'

document_alias '
void string_constant_global_export<
    string variable_name1, string variable_name2, ...>

Declare the passed string constants globally exported to the calling shell.
'
alias string_constant_global_export='export -r --'

# ....................{ DECLARATORS ~ character              }....................
document_alias '
void character<string variable_name1, string variable_name2, ...>

Declare the passed character (i.e., string of length 1) locally. Due to zsh
inadequacies, such characters are currently indistinguishable from strings.
Nevertheless, we recommend users explicitly declare characters as such for
clarity, (possible) forwards compatibility, and symmetry with existing builtins
integer() and float().
'
alias character=string

document_alias '
void character_global<string variable_name1, string variable_name2, ...>

Declare the passed character globally but *NOT* exported to the calling shell.
See character<> for further details.
'
alias character_global=string_global

document_alias '
void character_global_export<string variable_name1, string variable_name2, ...>

Declare the passed character globally exported to the calling shell. See
character<> for further details.
'
alias character_global_export=string_global_export

document_alias '
void character_constant_global_export<
    string variable_name1, string variable_name2, ...>

Declare the passed character constant globally exported to the calling shell. See
character<> for further details.
'
alias character_constant_global_export=string_constant_global_export

# ....................{ DECLARATORS ~ boolean              }....................
document_alias '
void boolean<string variable_name1, string variable_name2, ...>

Declare the passed booleans locally. Due to lack of builtin zsh support, such
booleans are currently indistinguishable from strings, with the empty string
signifying a false value and any non-empty string signifying a true value.
Nevertheless, we recommend users explicitly
declare booleans as such for clarity, (possible) forwards compatibility, and
symmetry with existing builtins integer() and float().
'
alias boolean=string

document_alias '
void boolean_global<string variable_name1, string variable_name2, ...>

Declare the passed booleans globally but *NOT* exported to the calling shell.
See boolean<> for further details.
'
alias boolean_global=string_global

document_alias '
void boolean_global_export<string variable_name1, string variable_name2, ...>

Declare the passed booleans globally exported to the calling shell. See
boolean<> for further details.
'
alias boolean_global_export=string_global_export

document_alias '
void boolean_constant_global_export<
    string variable_name1, string variable_name2, ...>

Declare the passed boolean constants globally exported to the calling shell. See
boolean<> for further details.
'
alias boolean_constant_global_export=string_constant_global_export

# ....................{ DECLARATORS ~ boolean / value      }....................
document_global '
boolean ZESHY_BOOLEAN_FALSE

Arbitrary non-empty string signifying a boolean false value. Since zsh
currently supports no boolean type, Zeshy emulates such type with strings.
'
ZESHY_BOOLEAN_FALSE=

document_global '
boolean ZESHY_BOOLEAN_TRUE

Arbitrary non-empty string signifying a boolean true value. Since zsh
currently supports no boolean type, Zeshy emulates such type with strings.
'
ZESHY_BOOLEAN_TRUE='true'

# --------------------( WASTELANDS                         )--------------------
