#!/usr/bin/env zsh
# ====================[ return                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define return-specific aliases related to function and script return values.

# ....................{ GLOBALS                            }....................
declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_EXIT_STATUS_SUCCESS

Exit status signifying success (i.e., 0).
________________<heredoc?>________________
ZESHY_EXIT_STATUS_SUCCESS=0

declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_EXIT_STATUS_FAILURE

Exit status signifying failure. While any integer ranging [1, 255] signifies
such failure, this integer is the typical default (i.e., 1).
________________<heredoc?>________________
ZESHY_EXIT_STATUS_FAILURE=1

# ....................{ RETURNERS                          }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: true] return_true(void)

Return from the current function or script with success (i.e., zero exit
status).
________________<heredoc?>________________
alias return_true="return ${ZESHY_EXIT_STATUS_SUCCESS}"

declare_alias_with_stdin <<'________________<heredoc?>________________'
[status: false] return_false(void)

Return from the current function or script with failure (i.e., non-zero exit
status).
________________<heredoc?>________________
alias return_false="return ${ZESHY_EXIT_STATUS_FAILURE}"

# ....................{ RETURNERS ~ value                  }....................
# See component "list" for related alias return_list().

declare_alias_with_stdin <<'________________<heredoc?>________________'
string return_string(string text)

Return the passed string from the current function or script. Specifically,
print such string to standard output and return from such function or script
with zero exit status (i.e., success).
________________<heredoc?>________________
alias return_string='
{
    # Avoid calling print_stdin(), whose implementation implicitly performs
    # additional logic specific to traditional terminal output.
    < "'${ZESHY_STDIN_PATH}'"

    # Return success.
    return_true
} <<<'

#FIXME: Test return_boolean() and, once working, replicate this implementation
#to all similar aliases below. In fact, since every such implementation will be
#the exact same with only the call to "die_unless_${type}" dependent on type, we
#should probably define all such implementations with a for loop, ala:
#
#() {
#   for return_type (boolean character float integer) {
#       declare_alias_with_stdin <<"________________<heredoc?>________________"
#string return_${return_type}(boolean value)
#
#Return the passed ${return_type} from the current function or script. See
#return_string() for further details.
#________________<heredoc?>________________
#       alias return_${return_type}='
#       {
#           # Validate standard input. For efficiency, avoid calling
#           # set_string_to_stdin().
#           string value__rrt; value__rrt="$(< "'${ZESHY_STDIN_PATH}'")"
#           die_unless_'${return_type}' "${value__rrt}"

#           # Print such boolean. For efficiency, avoid calling return_string(). For
#           # safety, avoid calling either print_string() or print_stdin().
#           print -r -- "${value__rrt}"

#           # Return success.
#           return_true
#       } <<<'
#   }
#}
#
#Nothing could be simpler, really. Sweet, eh?

declare_alias_with_stdin <<'________________<heredoc?>________________'
string return_boolean(boolean value)

Return the passed boolean from the current function or script. See
return_string() for further details.
________________<heredoc?>________________
alias return_boolean='
{
    # Validate standard input. For efficiency, avoid calling
    # set_string_to_stdin().
    string boolean__rb; boolean__rb="$(< "'${ZESHY_STDIN_PATH}'")"
    die_unless_boolean "${boolean__rb}"

    # Print such boolean. For efficiency, avoid calling return_string(). For
    # safety, avoid calling either print_string() or print_stdin().
    print -r -- "${boolean__rb}"

    # Return success.
    return_true
} <<<'

declare_alias_with_stdin <<'________________<heredoc?>________________'
string return_float(float value)

Return the passed float from the current function or script. See
return_string() for further details.
________________<heredoc?>________________
alias return_float=return_string

declare_alias_with_stdin <<'________________<heredoc?>________________'
string return_integer(integer value)

Return the passed integer from the current function or script. See
return_string() for further details.
________________<heredoc?>________________
alias return_integer=return_string

# ....................{ PRINTERS                           }....................
declare_alias_with_stdin <<'________________<heredoc?>________________'
integer print_stdin_and_return_exit_status(void)

Return the exit status of the runnable piped to this alias: e.g.,

.print_stdin_and_return_exit_status()
==========================================
[source]
------------------------------------------
# Return the exit status of one of two randomly selected greps.
>>> function catamount() {
...     if { is_odd $(get_random_number) } {
...         grep_path /onca panthera | print_stdin_and_return_exit_status
...     } else {
...         grep_path /concolor puma | print_stdin_and_return_exit_status
...     }
... }
>>> catamount or print_string "Mountain lions abound, abiding ever on."
Mountain lions abound, abiding ever on.
------------------------------------------
==========================================

Do not use the conventional implementation of such logic (e.g., "${?}"). Due
to Zeshy's use of TRAPZERR(), such logic does not work as expected: e.g.,

.print_stdin_and_return_exit_status() versus ${?}
==========================================
[source]
------------------------------------------
# Throw exceptions rather than return false on grep failure.
>>> function catamount_bad() {
...     if { is_odd $(get_random_number) }
...         grep_path /onca panthera; return $?
...     } else {
...         grep_path /concolor puma; return $?
...     }
... }
>>> catamount_bad or print_string "Tricolor ipomoea: the congress of concolor."
catamount_bad: "/onca" not found
------------------------------------------
==========================================
________________<heredoc?>________________
alias print_stdin_and_return_exit_status='true and return ${pipestatus[-2]}'

declare_alias_with_stdin <<'________________<heredoc?>________________'
integer print_stdin_and_return_exit_status_if_failure(void)

Return the exit status of the runnable piped to this alias if such status is
non-zero or return true: e.g.,

.print_stdin_and_return_exit_status_if_failure()
==========================================
[source]
------------------------------------------
>>> function blue_dragon() {
...     grep_path /glaucus atlanticus | print_stdin_and_return_exit_status_if_failure
...     print_string "Flagellate flagon of the sea! Compel, return to me."
... }
>>> blue_dragon or print_string "Azure indifference, indelicately sidereal."
Azure indifference, indelicately sidereal.
------------------------------------------
==========================================
________________<heredoc?>________________
alias print_stdin_and_return_exit_status_if_failure='true and {
    (( ${pipestatus[-2]} == '${ZESHY_EXIT_STATUS_SUCCESS}' )) or
        return ${pipestatus[-2]}
}'

# --------------------( WASTELANDS                         )--------------------
#>>> function grep_etc_gentoo_release() {
#...     if { is_odd $(get_random_number) } {
#...         grep_path Gentoo /etc/gentoo-release  | print_stdin_and_return_exit_status
#...     } else {
#...         grep_path release /etc/gentoo-release | print_stdin_and_return_exit_status
#...     }
#... }
#>>> grep_etc_gentoo_release
#gentoo-release:1:Gentoo Base System release 2.1

#   >>> function catamount() {
#   ...     if is_odd $(get_random_number)
#   ...     then grep_path /onca panthera | print_stdin_and_return_exit_status
#   ...     else grep_path /concolor puma | print_stdin_and_return_exit_status
#   ...     fi
#   ... }
# >>> catamount or print_string "Mountain lions abound, abiding ever on."
#   Mountain lions abound, abiding ever on.

# ....................{ GETTERS                            }....................
#FUXME: Rename to something indicating the need to pipe output. Say,
#print_stdin_and_get_exit_status().
#FUXME: Actually, does anyone actually call this *ANYWHERE*? The problem, of
#course, is that it's difficult to reliably parse the printed output from exit
#status. This should probably be excised.
#declare_alias_with_stdin <<'________________<heredoc?>________________'
#void get_exit_status(void)
#
#Get the exit status of the runnable piped to this alias. See
#print_stdin_and_return_exit_status() for further details and caveats: e.g.,
#
#.get_exit_status()
#==========================================
#[source]
#------------------------------------------
## Output the exit status of one of two randomly selected greps.
#>>> grep "Lipotes vexillifer" /baiji | get_exit_status
#2
#------------------------------------------
#==========================================
#________________<heredoc?>________________
#alias get_exit_status='true and print_string ${pipestatus[-2]}'

    # See return_string() for further details.
#FUXME: Rename to print_stdin_and_return_exit_status() or return_prior_exit_status().
#I'm partial to the former, which nicely comports with Zeshy nomenclature.

