#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *runnable* (i.e., function, script) return values.
-/-

# ....................{ RETURNERS                          }....................
declare_alias_with_stdin <<'/--'
[status: true] return_true(void)

Return from the current runnable with *success* (i.e., zero exit status).
/--
alias return_true="return ${ZESHY_EXIT_STATUS_SUCCESS}"

declare_alias_with_stdin <<'/--'
[status: false] return_false(void)

Return from the current runnable with *failure* (i.e., non-zero exit status).
/--
alias return_false="return ${ZESHY_EXIT_STATUS_FAILURE}"

# ....................{ RETURNERS ~ string                 }....................
# See component "list" for related alias return_list().

declare_alias_with_stdin <<'/---'
string return_string(string text)

Return the passed string from the current function or script. Specifically,
print such string to standard output and return from such function or script
with zero exit status (i.e., success).
/---
alias return_string='
{
    # Avoid calling print_stdin(), whose implementation implicitly performs
    # additional logic specific to traditional terminal output.
    < "'${ZESHY_STDIN_PATH}'"

    # Return success.
    return_true
} <<<'

# ....................{ RETURNERS ~ status                 }....................
declare_alias_with_stdin <<'/---'
[stdout: string, status: integer] return_exit_status(void)

Print the output of the command piped to this alias, returning such command's
exit status from the current function or script: e.g.,

.return_exit_status()
==========================================
[source]
------------------------------------------
# Return the exit status of one of two randomly selected greps.
>>> function catamount() {
...     if { is_odd $(get_random_number) } {
...         grep_path /onca panthera | return_exit_status
...     } else {
...         grep_path /concolor puma | return_exit_status
...     }
... }
>>> catamount or print_string "Mountain lions abound, abiding ever on."
Mountain lions abound, abiding ever on.
------------------------------------------
==========================================

Since `zeshy` defines TRAPZERR() to implicitly throw exceptions on non-zero exit
status, `zsh` global `${?}` cannot be reliably expanded for any purpose and
hence is effectively useless: e.g.,

.return_exit_status() versus ${?}
==========================================
[source]
------------------------------------------
# An exception will be thrown prior to returning ${?}.
>>> function catamount_bad() {
...     if { is_odd $(get_random_number) }
...         grep_path /onca panthera; return ${?}
...     } else {
...         grep_path /concolor puma; return ${?}
...     }
... }
>>> catamount_bad or print_string "Tricolor ipomoea: the congress of concolor."
catamount_bad: "/onca" not found
------------------------------------------
==========================================
/---
alias return_exit_status='true and return ${pipestatus[-2]}'

declare_alias_with_stdin <<'/---'
[stdout: string, status: integer] return_exit_status_if_failure(void)

Return the exit status of the runnable piped to this alias if such status is
non-zero or return true: e.g.,

.return_exit_status_if_failure()
==========================================
[source]
------------------------------------------
>>> function blue_dragon() {
...     grep_path /glaucus atlanticus | return_exit_status_if_failure
...     print_string "Flagellate flagon of the sea! Compel, return to me."
... }
>>> blue_dragon or print_string "Azure indifference, indelicately sidereal."
Azure indifference, indelicately sidereal.
------------------------------------------
==========================================
/---
alias return_exit_status_if_failure='true and {
    (( ${pipestatus[-2]} == '${ZESHY_EXIT_STATUS_SUCCESS}' )) or
        return ${pipestatus[-2]}
}'

# ....................{ RETURNERS ~ status : silent        }....................
declare_alias_with_stdin <<'/---'
[status: integer] return_exit_status_silent(void)

Return from the current function or script with the exit status of the command
piped to this alias, squelching all output from such command. See
return_exit_status() for further details: e.g.,

.return_exit_status_silent()
==========================================
[source]
------------------------------------------
>>> string on_living=\
...    "I went to the woods because I wished to live deliberately, to front only
...     the essential facts of life, and see if I could not learn what it had to
...     teach, and not, when I came to die, discover that I had not lived. I did
...     not wish to live what was not life, living is so dear; nor did I wish to
...     practice resignation, unless it was quite necessary. I wanted to live
...     deep and suck out all the marrow of life, to live so sturdily and
...     Spartan-like as to put to rout all that was not life, to cut a broad
...     swath and shave close, to drive life into a corner, and reduce it to its
...     lowest terms, and, if it proved to be mean, why then to get the whole
...     and genuine meanness of it, and publish its meanness to the world; or if
...     it were sublime, to know it by experience, and be able to give a true
...     account of it in my next excursion."
>>> function on_not_living() {
...     if { is_even 1817 } {
...         is_string_contains "${on_living}" Spartan  | return_exit_status_silent
...     } else {
...         is_string_contains "${on_living}" Athenian | return_exit_status_silent
...     }
... }
>>> on_not_living or
...     print_string "As if you could kill time without injuring eternity."
As if you could kill time without injuring eternity."
------------------------------------------
==========================================
/---
alias return_exit_status_silent='true &>/dev/null and return ${pipestatus[-2]}'

declare_alias_with_stdin <<'/---'
[status: integer] return_exit_status_inverted_silent(void)

Return from the current function or script with the exit status of the command
piped to this alias inverted, squelching all output from such command. If such
command returns non-zero exit status (i.e., failure), this alias returns zero
exit status (i.e., status); likewise, if such command returns zero exit status,
this alias returns non-zero exit status. As a simpler alternative, consider
prefixing such command with `not`. See return_exit_status() for
further details: e.g.,

.return_exit_status_inverted_silent()
==========================================
[source]
------------------------------------------
>>> string on_mystery=\
...    "Talk of mysteries! — Think of our life in nature, — daily to be shown
...     matter, to come in contact with it, — rocks, trees, wind on our cheeks!
...     The solid earth! the actual world! the common sense! Contact! Contact!
...     Who are we? where are we?"
>>> function on_matter() {
...     if { is_odd 1862 } {
...         is_string_contains "${on_mystery}" "Contact!" |
...             return_exit_status_inverted_silent
...     } else {
...         is_string_contains "${on_mystery}" "Moloch!" |
...             return_exit_status_inverted_silent
...     }
... }
>>> on_matter and print_string "The bluebird carries the sky on his back."
The bluebird carries the sky on his back.
------------------------------------------
==========================================
/---
alias return_exit_status_inverted_silent='true &>/dev/null and {
    if (( ${pipestatus[-2]} )) {
        return '${ZESHY_EXIT_STATUS_SUCCESS}'
    } else {
        return '${ZESHY_EXIT_STATUS_FAILURE}'
    }
}'

# --------------------( WASTELANDS                         )--------------------
# Define return-specific aliases related to function and script return values.
# ....................{ RETURNERS ~ type                   }....................
#FUXME: Test return_boolean() and, once working, replicate this implementation
#to all similar aliases below. In fact, since every such implementation will be
#the exact same with only the call to "die_unless_${type}" dependent on type, we
#should probably define all such implementations with a for loop, ala:
#
#() {
#   for return_type (boolean character float integer) {
#       declare_alias_with_stdin <<"/---"
#string return_${return_type}(boolean value)
#
#Return the passed ${return_type} from the current function or script. See
#return_string() for further details.
#/---
#       alias return_${return_type}='
#       {
#           # Validate standard input. For efficiency, avoid calling
#           # set_string_to_stdin().
#           string value__rrt; value__rrt="$(< "'${ZESHY_STDIN_PATH}'")"
#           die_unless_'${return_type}' "${value__rrt}"

#           # Print such boolean. For efficiency, avoid calling return_string(). For
#           # safety, avoid calling either print_string() or print_stdin().
#           print -r -- "${value__rrt}"

#           # Return success.
#           return_true
#       } <<<'
#   }
#}
#
#Nothing could be simpler, really. Sweet, eh?

#declare_alias_with_stdin <<'/---'
#string return_boolean(boolean value)
#
#Return the passed boolean from the current function or script. See
#return_string() for further details.
#/---
#alias return_boolean='
#{
#    # Validate standard input. For efficiency, avoid calling
#    # set_string_to_stdin().
#    string boolean__rb; boolean__rb="$(< "'${ZESHY_STDIN_PATH}'")"
#    die_unless_boolean "${boolean__rb}"
#
#    # Print such boolean. For efficiency, avoid calling return_string(). For
#    # safety, avoid calling either print_string() or print_stdin().
#    print -r -- "${boolean__rb}"
#
#    # Return success.
#    return_true
#} <<<'
#
#declare_alias_with_stdin <<'/---'
#string return_float(float value)
#
#Return the passed float from the current function or script. See
#return_string() for further details.
#/---
#alias return_float=return_string
#
#declare_alias_with_stdin <<'/---'
#string return_integer(integer value)
#
#Return the passed integer from the current function or script. See
#return_string() for further details.
#/---
#alias return_integer=return_string
#
#
## `zsh` global `${?}` _cannot_ be subsequently tested for failure:
##the conventional implementation of such logic (e.g., ). Due
##to `zeshy's` TRAPZERR() definition, such logic does not work as expected: e.g.,

#>>> function grep_etc_gentoo_release() {
#...     if { is_odd $(get_random_number) } {
#...         grep_path Gentoo /etc/gentoo-release  | return_exit_status
#...     } else {
#...         grep_path release /etc/gentoo-release | return_exit_status
#...     }
#... }
#>>> grep_etc_gentoo_release
#gentoo-release:1:Gentoo Base System release 2.1

#   >>> function catamount() {
#   ...     if is_odd $(get_random_number)
#   ...     then grep_path /onca panthera | return_exit_status
#   ...     else grep_path /concolor puma | return_exit_status
#   ...     fi
#   ... }
# >>> catamount or print_string "Mountain lions abound, abiding ever on."
#   Mountain lions abound, abiding ever on.

# ....................{ GETTERS                            }....................
#FUXME: Rename to something indicating the need to pipe output. Say,
#print_stdin_and_get_exit_status().
#FUXME: Actually, does anyone actually call this *ANYWHERE*? The problem, of
#course, is that it's difficult to reliably parse the printed output from exit
#status. This should probably be excised.
#declare_alias_with_stdin <<'/---'
#void get_exit_status(void)
#
#Get the exit status of the runnable piped to this alias. See
#return_exit_status() for further details and caveats: e.g.,
#
#.get_exit_status()
#==========================================
#[source]
#------------------------------------------
## Output the exit status of one of two randomly selected greps.
#>>> grep "Lipotes vexillifer" /baiji | get_exit_status
#2
#------------------------------------------
#==========================================
#/---
#alias get_exit_status='true and print_string ${pipestatus[-2]}'

    # See return_string() for further details.
#FUXME: Rename to return_exit_status() or return_prior_exit_status().
#I'm partial to the former, which nicely comports with Zeshy nomenclature.

