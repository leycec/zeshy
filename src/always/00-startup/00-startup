#!/usr/bin/env zsh
# ====================[ startup                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle Zeshy startup in a manner analogous to Zsh startup (e.g., ".zshenv").

# ....................{ ADDERS                             }....................
# void add_zeshy_startup_command(string command)
#
# Add the passed command to the definition of the startup_zeshy() function.
# Zeshy calls such function and hence such command on each invocation of the
# "zeshy" executable, much like ".zshenv" in Zsh.
function add_zeshy_startup_command() {
    die_unless_one_arg 'expected one command'
    global_list_set ZESHY_STARTUP_COMMANDS
    ZESHY_STARTUP_COMMANDS+="${1}"
}

# void add_zeshy_startup_command_if_shell_interactive(string command)
#
# Add the passed command to the definition of the
# startup_zeshy_if_shell_interactive() function. Zeshy calls such function and
# hence such command on each invocation of the "zeshy" executable in an
# interactive shell, much like ".zshrc" in Zsh.
function add_zeshy_startup_command_if_shell_interactive() {
    die_unless_one_arg 'expected one command'
    global_list_set ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE
    ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE+="${1}"
}

# ....................{ MAKERS                             }....................
# void make_functions_for_zeshy_startup(void)
#
# Dynamically synthesize the following hook-based functions:
#
# * startup_zeshy(), running the hooks in global list
#   ${ZESHY_STARTUP_COMMANDS}.
# * startup_zeshy_if_shell_interactive(), running the hooks in global list
#   ${ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE}.
#
# Zeshy only calls this function after sourcing all Zeshy scripts applicable to
# the current user when (re)compiling the Zeshy digest file for such user.
function make_functions_for_zeshy_startup() {
    # Validate sanity.
    die_if_args
    string startup_zeshy_commands startup_zeshy_commands_if_shell_interactive
    global_list_set\
        ZESHY_STARTUP_COMMANDS ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE

    # Convert global lists of commands to be run on startup into newline-
    # delimited strings to be interpolated into the functions created below.
    startup_zeshy_commands="$(join_list_on_newline\
        ZESHY_STARTUP_COMMANDS)"
    startup_zeshy_commands_if_shell_interactive="$(join_list_on_newline\
        ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE)"

    # Create such functions.
    eval "function startup_zeshy() {
    ${startup_zeshy_commands}
    is_shell_interactive and startup_zeshy_if_shell_interactive
}"
    eval "function startup_zeshy_if_shell_interactive() {
    ${startup_zeshy_commands_if_shell_interactive}
}"
}

# --------------------( WASTELANDS                         )--------------------
#FIXME: Call from "src/compile". Yes... excellent. Obviously, this needs to
#happen *AFTER* sourcing all scripts but prior to creating the digest.
# void add_command_to_zeshy_shutdown(string command)
#
# Run the passed command on Zeshy shutdown in the current shell, triggered on
# receiving any of the following signals: ABRT, ALRM, HUP, INT, QUIT, or TERM.
#function add_command_to_zeshy_shutdown() {
#    die 'implement me'
#}

#function run_on_zeshy_startup() {
#function startup_zeshy_by_running() {
# void make_functions_for_zeshy_startup(void)
# void make_zeshy_startup(void)
