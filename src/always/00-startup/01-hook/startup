#!/usr/bin/env zsh
# ====================[ startup                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle Zeshy startup in a manner analogous to Zsh startup (e.g., ".zshenv").

# ....................{ GLOBALS                            }....................
list_set_global_export\
    ZESHY_STARTUP_COMMANDS\
    ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE

# ....................{ APPENDERS                          }....................
# void append_zeshy_startup_command(string command)
#
# Append the passed command to the end of the definition of the startup_zeshy()
# function. Zeshy calls such function and hence such command on each invocation
# of the "zeshy" executable, much like ".zshenv" under Zsh.
function append_zeshy_startup_command() {
    die_unless_args_1 'expected one command'
    ZESHY_STARTUP_COMMANDS+="${1}"
}

# void append_zeshy_startup_command_if_shell_interactive(string command)
#
# Append the passed command to the end of the definition of the
# startup_zeshy_if_shell_interactive() function. Zeshy calls such function and
# hence such command on each invocation of the "zeshy" executable in an
# interactive shell, much like ".zshrc" under Zsh.
function append_zeshy_startup_command_if_shell_interactive() {
    die_unless_args_1 'expected one command'
    ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE+="${1}"
}

# ....................{ PREPENDERS                         }....................
# void prepend_zeshy_startup_command(string command)
#
# Prepend the passed command to the beginning of the definition of the
# startup_zeshy() function. Consider calling append_zeshy_startup_command()
# instead, unless convinced you know what you're doing.
function prepend_zeshy_startup_command() {
    # Avoid calling prepend_list_with_string(), which has yet to be defined.
    die_unless_args_1 'expected one command'
    ZESHY_STARTUP_COMMANDS=( "${1}" "${ZESHY_STARTUP_COMMANDS[@]}" )
}

# void prepend_zeshy_startup_command_if_shell_interactive(string command)
#
# Add the passed command to the definition of the
# startup_zeshy_if_shell_interactive() function. Consider calling
# append_zeshy_startup_command_if_shell_interactive() instead, unless convinced
# you know what you're doing.
function prepend_zeshy_startup_command_if_shell_interactive() {
    # Avoid calling prepend_list_with_string(), which has yet to be defined.
    die_unless_args_1 'expected one command'
    ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE=(
        "${1}" "${ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE[@]}"
    )
}

# ....................{ MAKERS                             }....................
# void make_zeshy_startup_functions(void)
#
# Dynamically synthesize the following hook-based functions:
#
# * startup_zeshy(), running the hooks in global list
#   ${ZESHY_STARTUP_COMMANDS}.
# * startup_zeshy_if_shell_interactive(), running the hooks in global list
#   ${ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE}.
#
# Zeshy only calls this function after sourcing all Zeshy scripts applicable to
# the current user when (re)compiling the Zeshy digest file for such user.
function make_zeshy_startup_functions() {
    # Validate sanity.
    die_if_args

    # Make such functions.
    eval "function startup_zeshy() {
    $(join_list_on_newline ZESHY_STARTUP_COMMANDS)
    is_shell_interactive and startup_zeshy_if_shell_interactive
}"
    eval "function startup_zeshy_if_shell_interactive() {
    $(join_list_on_newline ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE)
}"
}

# --------------------( WASTELANDS                         )--------------------
#   list_set_global_export ZESHY_STARTUP_COMMANDS
#   list_set_global_export ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE
    # Convert global lists of commands to be run on startup into newline-
    # delimited strings to be interpolated into the functions created below.
#   string startup_zeshy_commands startup_zeshy_commands_if_shell_interactive
#   startup_zeshy_commands="$(join_list_on_newline\
#       ZESHY_STARTUP_COMMANDS)"
#   startup_zeshy_commands_if_shell_interactive="$(join_list_on_newline\
#       ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE)"

#   prepend_list_with_string ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE "${1}"
#   ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE=(
#       "${1}" "${ZESHY_STARTUP_COMMANDS_IF_SHELL_INTERACTIVE[@]}"
#   )
#FIXME: Call from "src/compile". Yes... excellent. Obviously, this needs to
#happen *AFTER* sourcing all scripts but prior to creating the digest.
# void add_command_to_zeshy_shutdown(string command)
#
# Run the passed command on Zeshy shutdown in the current shell, triggered on
# receiving any of the following signals: ABRT, ALRM, HUP, INT, QUIT, or TERM.
#function add_command_to_zeshy_shutdown() {
#    die 'implement me'
#}

#function run_on_zeshy_startup() {
#function startup_zeshy_by_running() {
# void make_functions_for_zeshy_startup(void)
# void make_zeshy_startup(void)
