#!/usr/bin/env zsh
# ====================[ integer                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle system time in integer format.

# ....................{ GETTERS                            }....................
document_function '
integer get_time_unix(void)

Get the current time in seconds since the Unix epoch (January 1st, 1970): e.g.,

    >>> get_time_unix
    3141592653
'
function get_time_unix() {
    die_if_args
    date +'%s'
}

document_function '
integer get_time_unix_offset_by_hours(integer hour_offset)

Get the current time in seconds since the Unix epoch offset by the passed
positive or negative hour offset of either integer or float type: e.g.,

    >>> get_time_unix
    3141592653
    >>> get_time_unix_offset_by_hours -6.5
    3141569253
'
function get_time_unix_offset_by_hours() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string hour_offset="${1}"
    die_unless_integer "${hour_offset}"

    # Offset such time.
    print_string $((\
        $(get_time_unix) +\
        $(convert_hours_to_seconds ${hour_offset}) ))
}

# ....................{ GETTERS ~ integer                  }....................
document_function '
integer get_time_century(void)

Get the current century as a two-digit integer:

    >>> get_time_century
    20
'
function get_time_century() {
    die_if_args
    date +'%C'
}

document_function '
integer get_time_year(void)

Get the current year as a four-digit integer:

    >>> get_time_year
    1989
'
function get_time_year() {
    die_if_args
    date +'%Y'
}

document_function '
integer get_time_month(void)

Get the current month as a two-digit 01-based integer:

    >>> get_time_month
    11
'
function get_time_month() {
    die_if_args
    date +'%m'
}

document_function '
integer get_time_day(void)

Get the current day as a two-digit 01-based integer: e.g.,

    >>> get_time_day
    9
'
function get_time_day() {
    die_if_args
    date +'%m'
}

#FIXME: Replace explicitly listing weekdays with a compact table.
document_function '
integer get_time_weekday(void)

Get the current day as a one-digit integer ranging [1, 7], assigning Sunday 1:
e.g.,

    # Assuming the current day to be Sunday:
    >>> get_time_weekday
    1

Hence, if the current day is:

* Sunday, this is 1.
* Monday, this is 2.
* Tuesday, this is 3.
* Wednesday, this is 4.
* Thursday, this is 5.
* Friday, this is 6.
* Saturday, this is 7.
'
function get_time_weekday() {
    # Unlike customary indexing for days, weeks, months, and years, "date"
    # provides days of the week ranging [0, 6]. Increment accordingly.
    die_if_args
    print_string $(( $(date +'%w') + 1 ))
}

document_function '
integer get_time_hour(void)

Get the current hour as a two-digit integer ranging [00, 23]: e.g.,

    >>> get_time_hour
    12
'
function get_time_hour() {
    die_if_args
    date +'%H'
}

document_function '
integer get_time_minute(void)

Get the current minute as a two-digit integer ranging [00, 59]: e.g.,

    >>> get_time_minute
    30
'
function get_time_minute() {
    die_if_args
    date +'%M'
}

document_function '
integer get_time_second(void)

Get the current second as a two-digit integer ranging [00, 59]: e.g.,

    >>> get_time_second
    00
'
function get_time_second() {
    die_if_args
    date +'%S'
}

document_function '
integer get_time_nanosecond(void)

Get the current nanosecond as a nine-digit integer ranging
[000000000, 999999999]: e.g.,

    >>> get_time_nanosecond
    554999445
'
function get_time_nanosecond() {
    die_if_args
    date +'%N'
}

# ....................{ CONVERTERS ~ seconds               }....................
document_function '
integer convert_weeks_to_seconds(integer weeks)

Convert the passed number of weeks to seconds: e.g.,

    >>> convert_weeks_to_seconds 42
    25401600
'
function convert_weeks_to_seconds() {
    die_unless_arg 'expected one number'
    string weeks="${1}"
    die_unless_integer "${weeks}"
    print_string $(( weeks * 7 * 24 * 60 * 60 ))
}

document_function '
integer convert_days_to_seconds(integer days)

Convert the passed number of days to seconds: e.g.,

    >>> convert_days_to_seconds 42
    3628800
'
function convert_days_to_seconds() {
    die_unless_arg 'expected one number'
    string days="${1}"
    die_unless_integer "${days}"
    print_string $(( days * 24 * 60 * 60 ))
}

document_function '
integer convert_hours_to_seconds(integer hours)

Convert the passed number of hours to seconds: e.g.,

    >>> convert_hours_to_seconds 42
    151200
'
function convert_hours_to_seconds() {
    die_unless_arg 'expected one number'
    string hours="${1}"
    die_unless_integer "${hours}"
    print_string $(( hours * 60 * 60 ))
}

document_function '
integer convert_minutes_to_seconds(integer minutes)

Convert the passed number of minutes to seconds: e.g.,

    >>> convert_minutes_to_seconds 42
    2520
'
function convert_minutes_to_seconds() {
    die_unless_arg 'expected one number'
    string minutes="${1}"
    die_unless_integer "${minutes}"
    print_string $(( minutes * 60 ))
}

# ....................{ SETTERS                            }....................
document_function '
void set_time(integer seconds_since_unix_epoch)

Set the current time in seconds since the Unix epoch, January 1st, 1970.
Consider calling set_time_with_ntp() instead. Manually setting the
current time is discouraged and should be avoided, unless network access
'
function set_time() {
    # Validate sanity.
    die_if_args

    #FIXME: Uhm; I neglected to actually implement this. Look us up, again!
    die 'implement me please'
}

#FIXME: Rename to set_time_with_ntp().
document_function '
void set_time_with_ntp(void)

Synchronize local system time against remote time servers. Generally speaking,
the "ntpd" daemon should perform such synchronization on your behalf in the
background. Hence, call this function only when not running such daemon (which
you really should be) or when such daemon silently fails to run. The default
configuration of "ntpd" makes such failure unfortunately common: under large
clock skew (i.e., local system time desynchronized from remote time servers by
over 15 minutes), the default configuration of "ntpd" silently fails after
roughly 15 seconds of successful operation. In such a case, calling this or a
comparable command is the only means of rejuvenating "ntpd".

Technically, other ways do exist: adding "tinker panic 0" to "/etc/ntp.conf",
for example, permits "ntpd" to accept any clock slew regardless of size. This
is generally considered bad form, however. Hence, this function.
'
function set_time_with_ntp() {
    # Validate sanity.
    die_if_args

    #FIXME: Extract into a configuration variable. (It's not POSIX, clearly;
    #perhaps we want a new "ntp" configuration file?)
    # Hostname of the default NTP server (typically, a pool of such servers
    # redirecting to the real NTP server "closest" to the caller).
    string default_ntp_server='pool.ntp.org'

    #FIXME: See http://en.gentoo-wiki.com/wiki/Time_Synchronization for
    #additional methods. "htpdate" is quite clever, for example: pass it any
    #HTTP server (e.g., "www.linux.org") and it synchronizes the system time
    #against the server's reported time. Nice!

    # Prefer "ntpd", if installed. "ntpd" is both the authoritative server and
    # client for NTP synchronization.
    if is_pathable ntpd; then
        # Dismantled, this is:
        #
        # * "-g", accepting arbitrarily large clock skew. Essential.
        # * "-q", exiting after first setting the local system time.
        print_message 'synchronizing via "ntpd"...'
        run_with_progress_timer ntpd -g -q
    # Prefer "sntp", if installed. "sntp" is the authoritative client for NTP
    # synchronization on mobile devices.
    elif is_pathable sntp; then
        # Dismantled, this is:
        #
        # * "-a", calling adjtime() to slew rather than settimeofday() to skew
        #   the local system time. Whereas skewing often unsafely jumps to the
        #   target time, slewing safely and run_with_priority_lowest incrementally approaches the
        #   target time.
        print_message 'synchronizing via "sntp"...'
        sntp -j "${default_ntp_server}"
    # Run a deprecated command, if nothing better is currently installed.
    elif is_pathable ntpdate; then
        print_warning '"ntpd" and "sntp" not installed'
        print_message 'synchronizing via "ntpdate"... (deprecated)'
        ntpdate "${default_ntp_server}"
    # Otherwise, throw an exception.
    else die '"ntpd", "sntp", and "ntpdate" not installed'
    fi
}

# ....................{ SLEEPERS                           }....................
document_function '
void sleep_seconds(integer seconds)

Idle the current process for the passed (possibly floating point) number of
seconds.
'
function sleep_seconds() {
    # Validate passed arguments.
    die_unless_arg 'expected one nonnegative integer or float'
    string seconds="${1}"
    die_unless_integer_nonnegative "${seconds}"

    # Sleep for such seconds.
    sleep "${seconds}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to simply get_time(), in accordance with current nomenclature
#elsewhere (e.g., get_path_modification_time()). To be honest, pretty much
#everything in this component could use a similar rename. *sigh*
    # Assuming get_time_unix() to return "3141592653".
#FUXME: Hmm; document_function() can't handle function synonyms. *sigh*
# ....................{ TESTERS                            }....................
# boolean is_path_modification_time_older_than(void)

# --OR--
# integer get_time_seconds_since_unix_epoch(void)
#   get_time_seconds_since_unix_epoch# string print_current_date_and_time(void)
#
# Print a human-readable synopsis of the current date and time.
#function print_current_date_and_time() {
#    die_if_args
#    date 
#}

#   function testem() { false; print_string 1 }
#   (( $(testem) + 1 ))
#   integer current_time_in_seconds time_modifier_in_seconds
#   (( $(get_time_unix) $(get_hours_as_seconds -6) ))
#   current_time_in_seconds="$(get_time_unix)"
#   time_modifier_in_seconds="$(convert_hours_to_seconds -6)"
#interactive_alias calq="print_calendar_quarter"
#interactive_alias caly="print_calendar_year"
#interactive_alias calyn="print_calendar_year_next"
#FIXME: There exist a variety of alternative command-line applications for
#performing remote time synchronization: "ntpd" is merely the most popular.
#Shift this function to "os/time".

#FIXME: Perhaps some variant of update_system_time_via_ntp(void)?
