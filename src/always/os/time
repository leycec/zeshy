#!/usr/bin/env zsh
# ====================[ time                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle date, time, and calendar functionality.

# ....................{ ALIASES                            }....................
interactive_abbreviation {d}ate='date'
interactive_abbreviation {cal}endar{q}uarter='print_calendar_quarter'
interactive_abbreviation {cal}endar{y}ear='print_calendar_year'

# ....................{ TESTERS                            }....................
# boolean is_path_modification_time_older_than(void)

# ....................{ GETTERS                            }....................
# integer get_current_unix_time(void)
#
# Get the current time in seconds since the Unix epoch, January 1st, 1970: e.g.,
#
#     >>> get_current_unix_time
#     3141592653
function get_current_unix_time() {
    die_if_args
    date +'%s'
}

# integer get_current_unix_time_offset_by_hours(integer hour_offset)
#
# Get the current time in seconds since the Unix epoch offset by the passed
# positive or negative hours: e.g.,
#
#     # Assuming get_current_unix_time() to return "3141592653".
#     >>> get_current_unix_time_offset_by_hours -6
#     3141571053
function get_current_unix_time_offset_by_hours() {
    die_if_args
    date +'%s'
}

#   (( $(get_current_unix_time) - $(convert_hours_to_seconds 6) ))

# ....................{ GETTERS ~ integer                  }....................
# integer get_current_century(void)
#
# Get the current century as a two-digit integer:
#
#     >>> get_current_century
#     20
function get_current_century() {
    die_if_args
    date +'%C'
}

# integer get_current_year(void)
#
# Get the current year as a four-digit integer:
#
#     >>> get_current_year
#     1989
function get_current_year() {
    die_if_args
    date +'%Y'
}

# integer get_current_month(void)
#
# Get the current month as a two-digit 01-based integer:
#
#     >>> get_current_month
#     11
function get_current_month() {
    die_if_args
    date +'%m'
}

# integer get_current_day(void)
#
# Get the current day as a two-digit 01-based integer: e.g.,
#
#     >>> get_current_day
#     9
function get_current_day() {
    die_if_args
    date +'%m'
}

# integer get_current_weekday(void)
#
# Get the current day as a one-digit integer ranging [1, 7], assigning Sunday 1:
# e.g.,
#
#     # Assuming the current day to be Sunday:
#     >>> get_current_weekday
#     1
#
# Hence, if the current day is:
#
# * Sunday, this is 1.
# * Monday, this is 2.
# * Tuesday, this is 3.
# * Wednesday, this is 4.
# * Thursday, this is 5.
# * Friday, this is 6.
# * Saturday, this is 7.
function get_current_weekday() {
    # Unlike customary indexing for days, weeks, months, and years, "date"
    # provides days of the week ranging [0, 6]. Increment accordingly.
    die_if_args
    output $(( "$(date +'%w')" + 1 ))
}

# integer get_current_hour(void)
#
# Get the current hour as a two-digit integer ranging [00, 23]: e.g.,
#
#     >>> get_current_hour
#     12
function get_current_hour() {
    die_if_args
    date +'%H'
}

# integer get_current_minute(void)
#
# Get the current minute as a two-digit integer ranging [00, 59]: e.g.,
#
#     >>> get_current_minute
#     30
function get_current_minute() {
    die_if_args
    date +'%M'
}

# integer get_current_second(void)
#
# Get the current second as a two-digit integer ranging [00, 59]: e.g.,
#
#     >>> get_current_second
#     00
function get_current_second() {
    die_if_args
    date +'%S'
}

# integer get_current_nanosecond(void)
#
# Get the current nanosecond as a nine-digit integer ranging
# [000000000, 999999999]: e.g.,
#
#     >>> get_current_nanosecond
#     554999445
function get_current_nanosecond() {
    die_if_args
    date +'%N'
}

# ....................{ GETTERS ~ name                     }....................
# string get_current_month_name(void)
#
# Get the current month as a locale-dependent name: e.g.,
#
#     >>> get_current_month_name
#     December
function get_current_month_name() {
    die_if_args
    date +'%B'
}

# string get_current_month_name_abbreviated(void)
#
# Get the current month as a locale-dependent abbreviated name: e.g.,
#
#     >>> get_current_month_name_abbreviated
#     Dec
function get_current_month_name_abbreviated() {
    die_if_args
    date +'%b'
}

# string get_current_weekday_name(void)
#
# Get the current day of the week as a locale-dependent name: e.g.,
#
#     >>> get_current_weekday_name
#     Sunday
function get_current_weekday_name() {
    die_if_args
    date +'%A'
}

# string get_current_weekday_name_abbreviated(void)
#
# Get the current day of the week as a locale-dependent abbreviated name: e.g.,
#
#     >>> get_current_weekday_name_abbreviated
#     Sun
function get_current_weekday_name_abbreviated() {
    die_if_args
    date +'%a'
}

# ....................{ GETTERS ~ date                     }....................
# string get_current_date_as_yyyy_mm_dd(void)
#
# Get the current date in ISO 8601 format: e.g.,
#
#     >>> get_current_date_as_yyyy_mm_dd
#     1941-12-07
function get_current_date_as_yyyy_mm_dd() {
    die_if_args
    date +'%F'
}

# string get_current_date_as_dd_mm_yyyy(void)
#
# Get the current date in reverse ISO 8601 format: e.g.,
#
#     >>> get_current_date_as_dd_mm_yyyy
#     07-12-1941
function get_current_date_as_dd_mm_yyyy() {
    die_if_args
    date +'%d-%m-%Y'
}

# string get_current_date_as_mm_dd_yy_forward_slashed(void)
#
# Get the current date in North American format: e.g.,
#
#     >>> get_current_date_as_mm_dd_yy_forward_slashed
#     12/07/41
function get_current_date_as_mm_dd_yy_forward_slashed() {
    die_if_args
    date +'%D'
}

# ....................{ GETTERS ~ time                     }....................
# string get_current_time(void) --OR--
# string get_current_time_in_24_hour_clock(void)
#
# Get the current time in 24-hour clock format: e.g.,
#
#     >>> get_current_time_in_24_hour_clock
#     12:30:01
function get_current_time get_current_time_in_24_hour_clock() {
    die_if_args
    date +'%T'
}

# string get_current_time_in_12_hour_clock(void)
#
# Get the current time in locale-dependent 12-hour clock format: e.g.,
#
#     >>> get_current_time_in_12_hour_clock
#     12:30:01 PM
function get_current_time_in_12_hour_clock() {
    die_if_args
    date +'%r'
}

# ....................{ CONVERTERS ~ date and time         }....................
# string get_current_date_and_time(void)
#
# Get the current date and time as a locale-dependent string: e.g.,
#
#     >>> get_current_date_and_time
#     Mon Mar  6 09:15:00 1945
function get_current_date_and_time() {
    die_if_args
    date +'%c'
}

# ....................{ CONVERTERS ~ seconds               }....................
# integer convert_weeks_to_seconds(integer weeks)
#
# Convert the passed number of weeks to seconds: e.g.,
#
#     >>> convert_weeks_to_seconds 42
#     3628800
function convert_weeks_to_seconds() {
    die_unless_one_arg 'expected one integer'
    string weeks="${1}"
    die_unless_string_integer "${weeks}"
    output $(( weeks * 7 * 24 * 60 * 60 ))
}

# integer convert_days_to_seconds(integer days)
#
# Convert the passed number of days to seconds: e.g.,
#
#     >>> convert_days_to_seconds 42
#     3628800
function convert_days_to_seconds() {
    die_unless_one_arg 'expected one integer'
    string days="${1}"
    die_unless_string_integer "${days}"
    output $(( days * 24 * 60 * 60 ))
}

# integer convert_hours_to_seconds(integer hours)
#
# Convert the passed number of hours to seconds: e.g.,
#
#     >>> convert_hours_to_seconds 42
#     151200
function convert_hours_to_seconds() {
    die_unless_one_arg 'expected one integer'
    string hours="${1}"
    die_unless_string_integer "${hours}"
    output $(( hours * 60 * 60 ))
}

# integer convert_minutes_to_seconds(integer minutes)
#
# Convert the passed number of minutes to seconds: e.g.,
#
#     >>> convert_minutes_to_seconds 42
#     2520
function convert_minutes_to_seconds() {
    die_unless_one_arg 'expected one integer'
    string minutes="${1}"
    die_unless_string_integer "${minutes}"
    output $(( minutes * 60 ))
}

# ....................{ SETTERS                            }....................
# void set_system_time(integer seconds_since_unix_epoch)
#
# Set the current time in seconds since the Unix epoch, January 1st, 1970.
# Consider calling set_system_time_with_ntp() instead. Manually setting the
# current time is discouraged and should be avoided, unless network access
function set_system_time() {
    # Validate sanity.
    die_if_args
}

# void set_system_time_with_ntp(void)
#
# Synchronize local system time against remote time servers. Generally speaking,
# the "ntpd" daemon should perform such synchronization on your behalf in the
# background. Hence, call this function only when not running such daemon (which
# you really should be) or when such daemon silently fails to run. The default
# configuration of "ntpd" makes such failure unfortunately common: under large
# clock skew (i.e., local system time desynchronized from remote time servers by
# over 15 minutes), the default configuration of "ntpd" silently fails after
# roughly 15 seconds of successful operation. In such a case, calling this or a
# comparable command is the only means of rejuvenating "ntpd".
#
# Technically, other ways do exist: adding "tinker panic 0" to "/etc/ntp.conf",
# for example, permits "ntpd" to accept any clock slew regardless of size. This
# is generally considered bad form, however. Hence, this function.
function set_system_time_with_ntp() {
    # Validate sanity.
    die_if_args

    #FIXME: Extract into a configuration variable. (It's not POSIX, clearly;
    #perhaps we want a new "ntp" configuration file?)
    # Hostname of the default NTP server (typically, a pool of such servers
    # redirecting to the real NTP server "closest" to the caller).
    string default_ntp_server='pool.ntp.org'

    #FIXME: See http://en.gentoo-wiki.com/wiki/Time_Synchronization for
    #additional methods. "htpdate" is quite clever, for example: pass it any
    #HTTP server (e.g., "www.linux.org") and it synchronizes the system time
    #against the server's reported time. Nice!

    # Prefer "ntpd", if installed. "ntpd" is both the authoritative server and
    # client for NTP synchronization.
    if is_installed ntpd; then
        # Dismantled, this is:
        #
        # * "-g", accepting arbitrarily large clock skew. Essential.
        # * "-q", exiting after first setting the local system time.
        say 'synchronizing via "ntpd"...'
        run_with_progress_timer ntpd -g -q
    # Prefer "sntp", if installed. "sntp" is the authoritative client for NTP
    # synchronization on mobile devices.
    elif is_installed sntp; then
        # Dismantled, this is:
        #
        # * "-a", calling adjtime() to slew rather than settimeofday() to skew
        #   the local system time. Whereas skewing often unsafely jumps to the
        #   target time, slewing safely and run_slowly incrementally approaches the
        #   target time.
        say 'synchronizing via "sntp"...'
        sntp -j "${default_ntp_server}"
    # Run a deprecated command, if nothing better is currently installed.
    elif is_installed ntpdate; then
        cry '"ntpd" and "sntp" not installed'
        say 'synchronizing via "ntpdate"... (deprecated)'
        ntpdate "${default_ntp_server}"
    # Otherwise, throw an exception.
    else die '"ntpd", "sntp", and "ntpdate" not installed'
    fi
}

# ....................{ PRINTERS                           }....................
# ....................{ PRINTERS ~ calendar                }....................
#FIXME: Revise to accept a 1-based month index to use as the quarter "center."
# string print_calendar_quarter(void)
#
# Print a Gregorian calendar of the current "quarter" (i.e., previous, current,
# and next month).
function print_calendar_quarter() {
    die_if_args
    cal -3
}

# string print_calendar_year(integer year = $(get_current_year))
#
# Print a Gregorian calendar of the passed year (defaulting to the current).
function print_calendar_year() {
    die_unless_no_or_one_arg 'expected optional year'
    string year; year="${1:-$(get_current_year)}"
    die_unless_string_integer "${year}"
    cal -y "${year}"
}

# --------------------( WASTELANDS                         )--------------------
# --OR--
# integer get_current_seconds_since_unix_epoch(void)
#   get_current_seconds_since_unix_epoch# string print_current_date_and_time(void)
#
# Print a human-readable synopsis of the current date and time.
#function print_current_date_and_time() {
#    die_if_args
#    date 
#}

#   function testem() { false; output 1 }
#   (( $(testem) + 1 ))
#   integer current_time_in_seconds time_modifier_in_seconds
#   (( $(get_current_unix_time) $(get_hours_as_seconds -6) ))
#   current_time_in_seconds="$(get_current_unix_time)"
#   time_modifier_in_seconds="$(convert_hours_to_seconds -6)"
#interactive_alias calq="print_calendar_quarter"
#interactive_alias caly="print_calendar_year"
#interactive_alias calyn="print_calendar_year_next"
#FIXME: There exist a variety of alternative command-line applications for
#performing remote time synchronization: "ntpd" is merely the most popular.
#Shift this function to "os/time".

#FIXME: Perhaps some variant of update_system_time_via_ntp(void)?
