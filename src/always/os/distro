#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle open-source Linux and BSD distributions.

== See Also ==

* Canonical list of Linux- and BSD-specific
  http://linuxmafia.com/faq/Admin/release-files.html[`-release` and `_version` filenames and file contents].
-/-

# ....................{ TESTERS ~ linux                    }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_distro_arch(void)

Return success if the current distribution is Arch Linux.
/---
function is_distro_arch() {
    die_if_args
    is_string_equals "$(get_distro)" 'Arch'
}

declare_function_with_stdin <<'/---'
[status: boolean] is_distro_debian(void)

Return success if the current distribution is Debian Linux.
/---
function is_distro_debian() {
    die_if_args
    is_string_equals "$(get_distro)" 'Debian'
}

declare_function_with_stdin <<'/---'
[status: boolean] is_distro_gentoo(void)

Return success if the current distribution is Gentoo Linux.
/---
function is_distro_gentoo() {
    die_if_args
    is_string_equals "$(get_distro)" 'Gentoo'
}

declare_function_with_stdin <<'/---'
[status: boolean] is_distro_ubuntu(void)

Return success if the current distribution is Ubuntu Linux.
/---
function is_distro_ubuntu() {
    die_if_args
    is_string_equals "$(get_distro)" 'Ubuntu'
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_distro(void)

Get the capitalized name of the current distribution: e.g.,

.get_distro()
==========================================
[source]
------------------------------------------
>>> get_distro
Debian  # under Debian Linux installations
Gentoo  # under Gentoo Linux installations
------------------------------------------
==========================================
/---
function get_distro() {
    # Validate sanity.
    die_if_args

    # If "lsb_release" is in the current ${PATH}, prefer such command.
    is_pathable lsb_release and {
        lsb_release -si
        return_true
    }

    # List of all files matching /etc/*-release, /etc/*_version, and
    # /etc/*-version excluding "/etc/lsb-release". While "lsb_release" and hence
    # the latter should be unavailable here, 'tis better comfy than core-dumped.
    list release_files
    release_files=( /etc/*{-release,-version,_version}~/etc/lsb-release(.) )

    # If at least one such file matches, take the prefix preceding the last
    # dash or hyphen in the basename of the first such filename to be the distro
    # name. Note that some distro names themselves contain dashes and hyphens.
    # Thus, match suffixes non-greedily.
    if { is_list_nonempty release_files } {
        return_string "$(capitalize_string "$(get_path_basename\
            "${release_files[1]%[_-]*}")")"
    # Else, return the current operating system name.
    } else {
        get_os
    }
}

declare_function_with_stdin <<'/---'
integer get_distro_version(void)

Get the version number of the current distribution: e.g.,

.get_distro_version()
==========================================
[source]
------------------------------------------
>>> get_distro_version
2.1
/---
function get_distro_version() {
    # Validate sanity.
    die_if_args

    # If "lsb_release" is installed, run such command and immediately return.
    is_pathable lsb_release and { lsb_release -sr and return_exit_status }

    # Else, attempt to match such version from a system-wide file.
    #
    # List of all files matching /etc/*-release, /etc/*_version, and
    # /etc/*-version excluding "/etc/lsb-release", specific to the prior
    # pathable "lsb_release" guaranteed *NOT* to exist on this system.
    list release_files
    release_files=( /etc/*{-release,-version,_version}~/etc/lsb-release(.) )
    die_unless_list_nonempty release_files\
        'distro version not found ("lsb_release" not in current ${PATH} and no system-wide release or version files found)'

    #FIXME: Should probably grep the file for a pattern matching a version
    #specifier, but... *meh* Hmm; actually, yeah. This is rather shoddy. I have
    #little confidence in the current version. Reconsider!
    #FIXME: Iteratively search all such files for the first whose contents match
    #a version specifier. See the "Canonical list..." URL, above.

    # Get the last column in the text contents of the first such file.
    get_string_word "$(get_file_text "${release_files[1]}")" -1
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Bit awkward. We really want a new run_code
    # If at least one such file matches, return the last column in the contents
    # of the first such file.
#   if { is_list_nonempty release_files } {
#       get_string_word "$(get_file_text "${release_files[1]}")" -1
    # Else, throw an exception.
#   } else {
#   }
#       string release_filename="${release_files[1]}"
#       if { is_file_text "${release_filename}" } and {
#FUXME: Rename to is_distro_linux_arch() and similarly elsewhere below. There's
#technically a separate Gentoo BSD, for example, that
