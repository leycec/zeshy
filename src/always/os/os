#!/usr/bin/env zsh
# ====================[ os                                 ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle operating systems and architectures.

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_os_linux(void)

Return success if the current operating system runs the Linux kernel, including
but _not_ limited to GNU/Linux.
________________<heredoc?>________________
function is_os_linux() {
    die_if_args
    is "${OSNAME}" == 'linux-'* si
}

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_os_linux_gnu(void)

Return success if the current operating system is GNU/Linux.
________________<heredoc?>________________
function is_os_linux_gnu() {
    die_if_args
    is "${OSNAME}" == 'linux-gnu' si
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string get_os(void)

Get the canonicalized name of the current operating system: e.g.,

.get_os()
==========================================
[source]
------------------------------------------
>>> get_os
FreeBSD  # under FreeBSD systems
Linux    # under GNU/Linux systems
------------------------------------------
==========================================
________________<heredoc?>________________
function get_os() {
    die_if_args
    uname -s
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string get_architecture(void)

Get the canonicalized name of the current machine architecture: e.g.,

.get_architecture()
==========================================
[source]
------------------------------------------
>>> get_architecture
x86_64  # under 64-bit Intel and AMD architectures
i386    # under 32-bit Intel architectures (older)
i686    # under 32-bit Intel architectures (recent)
------------------------------------------
==========================================
________________<heredoc?>________________
function get_architecture() {
    die_if_args

    if { is_pathable arch } {
        arch
    } else {
        uname -m
    }
}

# --------------------( WASTELANDS                         )--------------------
#FIXME: Nice, but currently unused. Uncomment when adding support for non-Linux
#POSIX-compatible systems.
# The following functions are OS-specific, and thus defined for each OS-specific
# Zeshy component, elsewhere. By default, each dies with error.

# string get_current_process_basename(void)
#
# Get the basename of the binary corresponding to the current process.
#get_current_process_basename() { die "unimplemented on $(get_os)" }

# string get_current_process_command_line(void)
#
# Get the command line under which the current process is executing. This is a
# single string having these parts:
#
# * Absolute OR relative path to the executable file from which the process was
#   executed. Note that, in the latter case, there is no reliable mechanism for
#   converting the relative path into an absolute path.
#
# Due to the above unreliabilities, this string is best used for displaying non-
# critical log and user interface labels rather than critical functionality.
#get_current_process_command_line() { die "unimplemented on $(get_os)" }

    # List of all files matching /etc/*_version and /etc/*-version.
#   list version_files; version_files=( /etc/*{_,-}version(.) )

    # If at least one such file matches, take the prefix preceding
    # "-release" in the basename of such filename to be the distro name.
#   if is_list_nonempty version_files; then
#       print "$(capitalize_string "$(get_path_basename "${version_files[1]%[_-]version}")")"
#       return_true
#   fi

# Get the canonicalized name of the current operating system. This name is
# strictly lowercase_string with backslashes replaced by dashes and hence suitable for
# use in pathnames: e.g.,
#
#     >>> get_os
#     FreeBSD  # under FreeBSD systems
#     Linux    # under GNU/Linux systems
    # "uname" reports Linux as "GNU/Linux", so replace backslashes with dashes.
#   print "${$(lowercase_string "$(uname -o)")//\//-}"

#FIXME: Hmm; I could quite see the caller wanting the original name, as well.
    #FIXME: Alternate implementations; keep around!
    #echo $(match_multiline '^Mem:\s+(\d+)' "$(free -bt)")
    #$(cat '/proc/meminfo' | awk -F '[ ]+' '/^MemTotal/ { print $2 }')

#   string os_name="$(lowercase_string "$(uname -o)")"
#   os_name="${os_name//\//-}"
#   print "${os_name}"
