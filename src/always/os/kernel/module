#!/usr/bin/env zsh
# ====================[ module                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle *nix kernel modules.

# ....................{ PRINTERS                           }....................
declare_function '
string print_kernel_module(string module_name1, string module_name2, ...)

Print a human-readable profile of the passed kernel modules for the currently
installed kernel.
'
function print_kernel_module() {
    die_unless_args 'expected at least one module name'
    modinfo -- "${@}"
}

# ....................{ LISTERS                            }....................
#FIXME: Rename to list_kernel_modules().
declare_function '
string print_kernel_modules(string kernel_home = "$(get_kernel_home)")

Print a human-readable synopsis of all currently loaded and loadable kernel
modules for the passed kernel (defaulting to the currently installed kernel).
'
function print_kernel_modules() {
    # Validate passed arguments.
    die_unless_args_0_to_1 'expected optional dirname'
    string kernel_home kernel_version
    kernel_home="${1:-$(get_kernel_home)}"
    kernel_version="$(get_kernel_version "${kernel_home}")"

    {
        print_heading 'kernel modules loaded'
        lsmod

        #FIXME: Not quite right. This prints builtin and non-builtin; we really only
        #want a print of non-builtin modules. Though there seems to exist no print of
        #the latter, file "modules.builtin" prints the former; hence, we could filter
        #the former from the print of returned modules.
        print_heading 'kernel modules loadable'
        list_path_recursively "/lib/modules/${kernel_version}/"**/*.ko
    } | run_command_paged
}

# ....................{ WRITERS                            }....................
declare_function '
void load_kernel_module(string module_name1, string module_name2, ...)

Load the passed kernel modules.
'
function load_kernel_module() {
    die_unless_args 'expected at least one module name'
    modprobe -- "${@}"
}

declare_function '
void unload_kernel_module(string module_name1, string module_name2, ...)

Unload the passed kernel modules.
'
function unload_kernel_module() {
    die_unless_args 'expected at least one module name'
    modprobe -r -- "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#       say_first_section 'printing currently loaded kernel modules...'
# string print_loaded_kernel_modules(void)
#
# Print all currently loaded kernel modules.
#print_loaded_kernel_modules() {
#    die_if_args
#}
