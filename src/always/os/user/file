#!/usr/bin/env zsh
# ====================[ file                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle user and group files (e.g., "/etc/passwd" and "/etc/group").

# ....................{ EXCEPTIONS                         }....................
# void die_unless_user(
#   string username,
#   string error_message = "\"${username}\" not a local user")
#
# Throw an exception unless the passed user exists.
function die_unless_user() {
    die_unless_args_1_to_2\
        'expected one username and optional error message'
    string username="${1}"
    is_user "${username}" or die "${2:-\"${username}\" not a local user}"
}

# void die_unless_group(
#   string group_name,
#   string error_message = "\"${group_name}\" not a local group")
#
# Throw an exception unless the passed group exists.
function die_unless_group() {
    die_unless_args_1_to_2\
        'expected one group name and optional error message'
    string group_name="${1}"
    is_group "${group_name}" or die "${2:-\"${group_name}\" not a local group}"
}

# ....................{ TESTERS                            }....................
# boolean is_user(string username)
#
# Return true if the passed user exists.
function is_user() {
    die_unless_args_1 'expected one username'

    #FIXME: Rewrite as a glob.
    get_users_file_contents | is_string_line_match_pcre "^${1}:"
}

# boolean is_group(string group_name)
#
# Return true if the passed group exists.
function is_group() {
    die_unless_args_1 'expected one group name'

    #FIXME: Rewrite as a glob.
    get_groups_file_contents | is_string_line_match_pcre "^${1}:"
}

# ....................{ GETTERS                            }....................
# string get_users_file(void)
#
# Get the absolute path of the system-wide users file.
function get_users_file() {
    die_if_args
    print_string '/etc/passwd'
}

# string get_groups_file(void)
#
# Get the absolute path of the system-wide groups file.
function get_groups_file() {
    die_if_args
    print_string '/etc/group'
}

# ....................{ GETTERS ~ contents                 }....................
# string get_users_file_contents(void)
#
# Get the contents of the system-wide users file.
function get_users_file_contents() {
    die_if_args
    print_file_text "$(get_users_file)"
}

# string get_groups_file_contents(void)
#
# Get the contents of the system-wide groups file.
function get_groups_file_contents() {
    die_if_args
    print_file_text "$(get_group_file)"
}

# ....................{ GETTERS ~ paths                    }....................
#FIXME: Rename to get_user_dir_home().
# string get_user_home(string username)
#
# Get the absolute path of the home directory of the passed user (defaulting to
# the current user).
function get_user_home() {
    # Validate passed arguments.
    die_unless_arg 'expected one username'

    # Get the contents of "/etc/passwd".
    string username="${1}" users
    die_unless_user "${username}"

    #FIXME: Rewrite as a glob.
    # Match the passed user against such contents.
    get_users_file_contents | get_string_line_match_pcre_first\
        "^${username}:([^:]*:){4}([^:]*):" 2
}

# --------------------( WASTELANDS                         )--------------------
