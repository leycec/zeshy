#!/usr/bin/env zsh
# ====================[ user                               ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy User, handling users and groups.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_superuser(char *error_message = 'not the superuser')
#
# Raise an exception unless the current user is the superuser (i.e., root).
die_unless_superuser() {
    die_unless_at_most_one_arg 'expected optional error message'
    is_superuser or die "${1:-\"${USER}\" not the superuser}"
}

#FIXME: Hmm. We don't care about being the exact superuser (UID 0) as being a
#user with sufficient superuser privelages. Should users in group "wheel" also
#be considered superuser for such purposes? In such case, the name "_superuser"
#still applies but should simply be extended to include logical superusers. In
#this case, however, we'll want to distinguish logical from physical superusers
#(e.g., since UID 0 receives a different $PATH). Anyway.... contemplate.
# ....................{ TESTS                              }....................
# bool is_superuser(char *username = get_current_username())
#
# Return true if the passed user (defaulting to the current) is the superuser.
is_superuser() {
    die_unless_at_most_one_arg 'expected optional username'

    #FIXME: Ideally, we should be testing on UIDs even if the caller passed a
    #username. This implies we require a method for mapping between the two.
    #Should be trivially feasible. Grep us up.
    # If no arguments were passed, default to the current user. If such user's
    # effective user ID (e.g., due perhaps to privelage escalation under
    # "setuid") is that of the superuser, return true.
    is_no_args and is "${EUID}" -eq 0 si and return_true

    # Test.
    is  "${1:-$(get_username)}" == 'root' si
}

# ....................{ GETTERS                            }....................
# char *get_username(void)
#
# Get the username of the current user.
get_username() {
    die_if_args
    sputter "${USER}"
}

#FIXME: Accept any username.
# char *get_home(void)
#
# Get the absolute path of the current user's home directory.
get_home() {
    die_if_args
    sputter "${HOME}"
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#
# Copyright 2007-2012 by Cecil Curry.
#
#   http://www.raiazome.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
