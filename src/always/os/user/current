#!/usr/bin/env zsh
# ====================[ current                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle the current user.

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
void die_unless_superuser(
   string error_message = "user \"$(get_user)\" not the superuser")

Throw an exception with the passed message unless the current user currently has
superuser privileges. See is_superuser() for further details.
________________<heredoc?>________________
function die_unless_superuser() {
    die_unless_args_0_to_1 'expected optional error message'
    is_superuser or die "${2:-user \"$(get_user)\" not the superuser}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_superuser(void)

Return true if the current user currently has superuser privileges (i.e., `root`
access) either due to being the superuser or having temporarily escalated
privileges to such user.
________________<heredoc?>________________
function is_superuser() {
    die_if_args
    (( $(get_uid_effective) == 0 ))
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string get_user(void)

Get the username of the current user.
________________<heredoc?>________________
function get_user() {
    die_if_args
    return_string "${USER}"
}

# ....................{ GETTERS ~ path                     }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string get_home(void)

Get the absolute path of the home directory for the current user.
________________<heredoc?>________________
function get_home() {
    die_if_args
    return_string "${HOME}"
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string get_pid_dir(string username)

Get the absolute path of the directory containing PID files for the current user.
See get_user_pid_dir() for further details.
________________<heredoc?>________________
function get_pid_dir() {
    get_user_pid_dir "$(get_user)"
}

# ....................{ GETTERS ~ id                       }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string get_uid(void)

Get the user ID (UID) for the current user, a nonnegative integer uniquely
identifying such user. See also get_uid_effective().
________________<heredoc?>________________
function get_uid() {
    die_if_args
    return_string "${UID}"
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string get_uid_effective(void)

Get the effective user ID (EUID) for the current user, a nonnegative integer
uniquely identifying the user to whom the current user has escalated privileges.
If the current user has not escalated privileges, this is simply the UID
returned by get_uid().
________________<heredoc?>________________
function get_uid_effective() {
    die_if_args
    return_string "${EUID}"
}

# --------------------( WASTELANDS                         )--------------------
    # Test whether the current user's effective user ID is that of the superuser.
#Get the effective ID of the current user. Such ID can differ from the real ID
#of such user when subject to privelage escalation under `setuid`.
