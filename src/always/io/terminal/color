#!/usr/bin/env zsh
# ====================[ color                              ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define terminal colors (i.e., ANSI- and zsh prompt-specific escape codes).
#
# --------------------( SEE ALSO                           )--------------------
# https://en.wikipedia.org/wiki/ANSI_escape_code
#   Excrutiatingly helpful dissection of ANSI escape codes.
#
# http://ciembor.github.com/4bit
#   4bit, arguably the best and probably only terminal color scheme designer.
#
# --------------------( TODO                               )--------------------
# * Add support for fish-like syntax highlighting. Happily, someone's already
#   gone to the work of Zshifying this; we'll just want to Zeshify it a bit:
#   https://github.com/zsh-users/zsh-syntax-highlighting
# * Add support for 256 color-enabled terminals (e.g., xterm-(256)color,
#   urxvt-unicode-256color). Oooooooh, man. I'm pretty sure I crawled across
#   some Zsh code the other day simplifying such support... Hmmmmmmmm.
# * It looks like KDE's Konsole even supports 24-bit colors! Wild. See:
#   https://github.com/robertknight/konsole/blob/master/user-doc/README.moreColors

# ....................{ GLOBALS                            }....................
# Defer initialization of such colors to startup_zeshy_terminal_colors(), below.

#FIXME: Map ${ZESHY_ANSI_SGR} suggests we could profitably implement _FAINT and
#_STANDOUT versions, as well. Test us up! *YES*. Great: the "italic" attribute
#is implemented as italics under many terminals. We absolutely want that. :)
#FIXME: Honestly, "_BOLD" makes little sense. It's not bold; it's *BRIGHTER*.
#Rename ZESHY_COLOR_BOLD to ZESHY_COLOR_BRIGHT and so forth. Yum!

# Declare and document reset colors.
document_global '
string ZESHY_COLOR_RESET

ANSI escape code resetting foreground and background colors to defaults.
'
document_global '
string ZESHY_PROMPT_COLOR_RESET

Prompt escape code resetting foreground and background colors to defaults.
'

# Declare and document general purpose colors.
document_global '
map ZESHY_COLOR

Map lowercase color name to ANSI escape code foregrounding such color.
'
document_global '
map ZESHY_COLOR_DIM

Map lowercase color name to ANSI escape code foregrounding such color dimly.
'
document_global '
map ZESHY_COLOR_BOLD

Map lowercase color name to ANSI escape code foregrounding such color brightly.
'
document_global '
map ZESHY_COLOR_ITALIC

Map lowercase color name to ANSI escape code foregrounding such color italicized.
'
document_global '
map ZESHY_COLOR_BACKGROUND

Map lowercase color name to ANSI escape code backgrounding such color.
'
document_global '
map ZESHY_COLOR_BOLD_BACKGROUND

Map lowercase color name to ANSI escape code backgrounding such color brightly.
'

# Declare and document prompt-specific colors.
document_global '
map ZESHY_PROMPT_COLOR

Map lowercase color name to prompt escape foregrounding such color.
'
document_global '
map ZESHY_PROMPT_COLOR_DIM

Map lowercase color name to prompt escape foregrounding such color dimly.
'
document_global '
map ZESHY_PROMPT_COLOR_BOLD

Map lowercase color name to prompt escape foregrounding such color brightly.
'
document_global '
map ZESHY_PROMPT_COLOR_ITALIC

Map lowercase color name to prompt escape foregrounding such color italicized.
'
document_global '
map ZESHY_PROMPT_COLOR_BACKGROUND

Map lowercase color name to prompt escape backgrounding such color.
'
document_global '
map ZESHY_PROMPT_COLOR_BOLD_BACKGROUND

Map lowercase color name to prompt escape backgrounding such color brightly.
'

# ....................{ GLOBALS ~ ansi                     }....................
document_global '
map ZESHY_ANSI_SGR

Map from lowercase Select Graphics Rendition (SGR) ANSI name to value.
'
ZESHY_ANSI_SGR=(
    reset 0

    # Attribute enablers.
    bold       1
    dim        2
    italic     3
    underline  4
    blink      5
    reverse    7
    conceal    8
    normal    22

    # Attribute disablers.
    italic_off    23
    underline_off 24
    blink_off     25
    reverse_off   27
    conceal_off   28

    # Foreground colors.
    black   30
    red     31
    green   32
    yellow  33
    blue    34
    magenta 35
    cyan    36
    white   37
    default 39

    # Background colors.
    black_background   40
    red_background     41
    green_background   42
    yellow_background  43
    blue_background    44
    magenta_background 45
    cyan_background    46
    white_background   47
    default_background 49

    # Foreground high-intensity colors.
    black_intense   90
    red_intense     91
    green_intense   92
    yellow_intense  93
    blue_intense    94
    magenta_intense 95
    cyan_intense    96
    white_intense   97
    default_intense 99

    # Background high-intensity colors.
    black_intense_background   100
    red_intense_background     101
    green_intense_background   102
    yellow_intense_background  103
    blue_intense_background    104
    magenta_intense_background 105
    cyan_intense_background    106
    white_intense_background   107
    default_intense_background 109
)

document_global '
string ZESHY_ANSI_CSI

2-byte ANSI Control Sequence Introducer (CSI) prefixing all ANSI escape
sequences, equivalent to "<Esc>[".
'
ZESHY_ANSI_CSI=$'\E\['

document_global '
string ZESHY_ANSI_SGR_NEXT

1-byte ANSI Select Graphics Rendition (SGR) delimiter separating subsequences
in all graphics-specific ANSI escape codes.
'
ZESHY_ANSI_SGR_NEXT=';'

document_global '
string ZESHY_ANSI_SGR_SUFFIX

1-byte ANSI Select Graphics Rendition (SGR) suffix for all graphics-specific
ANSI escape codes.
'
ZESHY_ANSI_SGR_SUFFIX='m'

document_global '
string ZESHY_ANSI_SGR_GLOB

Glob matching Select Graphics Rendition (SGR)-suffixed ANSI escape codes.
'
# Dismantled, this is:
#
# * (...)m", matching zero or more Select Graphic Rendition (SGR)
#   parameters also referred to as color indices:
#   * "|", matching the empty string and hence the ANSI escape code
#     "CSI m" identical to "<Esc>[0m" resetting all SGR parameters.
#   * "[0-9](#c1,3)", matching an 8-bit integer expressed as one to three
#     digits as the first SGR parameter.
#   * "(;[0-9](#c1,3))##", matching zero or more sequences of a semicolon
#     followed by an 8-bit integer as all following SGR parameters.
ZESHY_ANSI_SGR_GLOB="(|[0-9](#c1,3)(${ZESHY_ANSI_SGR_NEXT}[0-9](#c1,3))##)${ZESHY_ANSI_SGR_SUFFIX}"

# ....................{ GLOBALS ~ glob                     }....................
# Unfortunately, zsh fails with a "bad pattern" error when aggregating the
# following CSI and SGR globs into a single glob. Separate such globs, for now.

document_global '
string ZESHY_ZSH_COLOR_GLOB

Glob matching color-specific zsh prompt escape codes.
'
# Dismantled, this is:
#
# * "%(...)", matching a "%"-prefixed prompt escape.
# * "[BbSsUu]", matching a bold, italic, or underline parameter.
# * "[0-9]##[FfKk]", matching a fore- or background parameter prefixed by
#   integer argument consisting of one or more digits.
# * "[FfKk]\{?*\}", matching a fore- or background parameter suffixed by:
#   * String argument consisting of a well-known color name (e.g., "red").
#   * Integer argument consisting of one or more digits.
ZESHY_ZSH_COLOR_GLOB='%([BbSsUu]|[0-9]##[FfKk]|[FfKk]\{?*\})'

# ....................{ TESTERS                            }....................
document_function '
boolean is_terminal_color(void)

Return true if shell output is attached to a polychrome terminal device (i.e.,
a terminal device providing more than merely monochrome black and white).
'
function is_terminal_color() {
    die_if_args
    is_shell_interactive and (( $(get_terminal_color_count) > 2 ))
}

# ....................{ GETTERS                            }....................
document_function '
integer get_terminal_color_count(void)

Get the number of colors supported by the current terminal device.
'
function get_terminal_color_count() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    # Get such colors. Note "echotc Co" also works, but is somewhat overkill.
    print_string "${terminfo[colors]}"
}

document_function '
integer get_string_length_multibyte_sans_ansi_color_codes(
  string text1, string text2, ...)

Get the total length of the passed strings in multibyte characters *AFTER*
removing ANSI color codes from such strings.
'
function get_string_length_multibyte_sans_ansi_color_codes() {
    die_unless_args 'expected at least one string'
    get_string_length_multibyte "$(remove_string_ansi_color_codes "${@}")"
}

# ....................{ REMOVERS                           }....................
document_function '
string remove_string_ansi_color_codes(string text1, string text2, ...)

Remove all ANSI color codes from the passed string. The resulting string will
retain non-color ANSI escapes (e.g., "\033[J", clearing from the current
cursor to the end of the screen).
'
function remove_string_ansi_color_codes() {
    # Avoid calling remove_string_match(), as zsh fails with "bad pattern" when
    # expanding ${ZESHY_ANSI_CSI} as a glob expression (e.g., as
    # "${~ZESHY_ANSI_CSI}").
    die_unless_args 'expected at least one string'
    print_string "${*//${ZESHY_ANSI_CSI}${~ZESHY_ANSI_SGR_GLOB}}"
}

document_function '
string remove_string_zsh_color_codes(string text1, string text2, ...)

Remove all Zsh color codes from the passed string. The resulting string will
retain non-color prompt escapes (e.g., "%D", expanding to the current date).
'
function remove_string_zsh_color_codes() {
    die_unless_args 'expected at least one string'
    remove_string_match "${*}" "${ZESHY_ZSH_COLOR_GLOB}"
}

# ....................{ STARTUP                            }....................
append_command_to_zeshy_startup_if_shell_interactive\
    startup_zeshy_terminal_color

document_function '
void startup_zeshy_terminal_color(void)

Define color globals specific to the current terminal. If such terminal is
monochrome (i.e., colorless), such colors default to the empty string.
'
function startup_zeshy_terminal_color() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    #FIXME: We probably want to implement helper functions resembling:
    #
    #* startup_terminal_no_colors(), if no color support.
    #* startup_terminal_8_colors(), if typical color support.
    #* startup_terminal_256_colors(), if 256 color support.
    #FIXME: Note that the KDE terminal application appears to support arbitrary
    #RGB values. It would be great if that becomes an eventual ad-hoc standard.
    startup_zeshy_terminal_color_8
}

document_function '
void startup_zeshy_terminal_color_8(void)

Define color globals for terminals supporting between 8 to 255 colors.
'
function startup_zeshy_terminal_color_8() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    # Define reset globals.
    ZESHY_COLOR_RESET="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[reset]}${ZESHY_ANSI_SGR_SUFFIX}"
    ZESHY_PROMPT_COLOR_RESET="%{${ZESHY_COLOR_RESET}%}"

    # Normal and bold color attributes as ANSI escape codes.
    string\
        ansi_normal="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[reset]}${ZESHY_ANSI_SGR_NEXT}"\
        ansi_bold_italic="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[reset]}${ZESHY_ANSI_SGR_NEXT}${ZESHY_ANSI_SGR[bold]}${ZESHY_ANSI_SGR_NEXT}${ZESHY_ANSI_SGR[italic]}${ZESHY_ANSI_SGR_NEXT}"\
        ansi_bold="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[reset]}${ZESHY_ANSI_SGR_NEXT}${ZESHY_ANSI_SGR[bold]}${ZESHY_ANSI_SGR_NEXT}"\
        ansi_italic="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[reset]}${ZESHY_ANSI_SGR_NEXT}${ZESHY_ANSI_SGR[italic]}${ZESHY_ANSI_SGR_NEXT}"

    # Define foreground greyscale colors. The default definitions assign
    # ${ZESHY_COLOR_BLACK} a somewhat unreadable quasi-black color value and
    # ${ZESHY_COLOR_WHITE} a somewhat grey rather than white color value.
#   ZESHY_COLOR[black]="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[normal]}${ZESHY_ANSI_SGR_NEXT}${ZESHY_ANSI_SGR[black_intense]}${ZESHY_ANSI_SGR_SUFFIX}"
#   ZESHY_COLOR[grey]="${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR[black]}${ZESHY_ANSI_SGR_SUFFIX}"

    # List of all such color names, excluding pseudo-color "grey".
    list color_names
    color_names=( white black red green blue yellow magenta cyan )

    # Set general purpose colors.
    string color_background_name
    for color_name (${color_names[@]}) {
        color_background_name="${color_name}_background"
#       print "color (fg): ${color_name}\ncolor (bg): ${color_background_name}"
        ZESHY_COLOR[${color_name}]="${ansi_normal}${ZESHY_ANSI_SGR[${color_name}]}${ZESHY_ANSI_SGR_SUFFIX}"
        ZESHY_COLOR_BACKGROUND[${color_name}]="${ansi_normal}${ZESHY_ANSI_SGR[${color_background_name}]}${ZESHY_ANSI_SGR_SUFFIX}"
        ZESHY_COLOR_BOLD[${color_name}]="${ansi_bold}${ZESHY_ANSI_SGR[${color_name}]}${ZESHY_ANSI_SGR_SUFFIX}"
        ZESHY_COLOR_BOLD_BACKGROUND[${color_name}]="${ansi_bold}${ZESHY_ANSI_SGR[${color_background_name}]}${ZESHY_ANSI_SGR_SUFFIX}"
        ZESHY_COLOR_ITALIC[${color_name}]="${ansi_italic}${ZESHY_ANSI_SGR[${color_name}]}${ZESHY_ANSI_SGR_SUFFIX}"
    }

    # Default foreground greyscale colors are notoriously "off," assigning
    # ${ZESHY_COLOR[white]} a grey rather than white color and defining no
    # corresponding suite of grey colors. To correct this:
    #
    # * Assign ${ZESHY_COLOR[white]} to new color ${ZESHY_COLOR_BOLD[grey]}.
    # * Assign bold black to all other foreground grey colors.
    # * Assign white and bold black to corresponding background grey colors.
    ZESHY_COLOR[white]="${ansi_normal}${ZESHY_ANSI_SGR[white_intense]}${ZESHY_ANSI_SGR_SUFFIX}"
    ZESHY_COLOR[grey]="${ansi_bold}${ZESHY_ANSI_SGR[black]}${ZESHY_ANSI_SGR_SUFFIX}"
    ZESHY_COLOR_BOLD[grey]="${ansi_normal}${ZESHY_ANSI_SGR[white]}${ZESHY_ANSI_SGR_SUFFIX}"
    ZESHY_COLOR_ITALIC[grey]="${ansi_bold_italic}${ZESHY_ANSI_SGR[black]}${ZESHY_ANSI_SGR_SUFFIX}"
    ZESHY_COLOR_BACKGROUND[grey]="${ansi_normal}${ZESHY_ANSI_SGR[white_background]}${ZESHY_ANSI_SGR_SUFFIX}"
    ZESHY_COLOR_BOLD_BACKGROUND[grey]="${ansi_bold}${ZESHY_ANSI_SGR[white_background]}${ZESHY_ANSI_SGR_SUFFIX}"

    # Set prompt-specific colors, "%{"- and "%}"-delimited in to indicate
    # such colors do not contribute to prompt length.
    for color_name (${color_names[@]} grey) {
        ZESHY_PROMPT_COLOR[${color_name}]="%{${ZESHY_COLOR[${color_name}]}%}"
        ZESHY_PROMPT_COLOR_BACKGROUND[${color_name}]="%{${ZESHY_COLOR_BACKGROUND[${color_name}]}%}"
        ZESHY_PROMPT_COLOR_BOLD[${color_name}]="%{${ZESHY_COLOR_BOLD[${color_name}]}%}"
        ZESHY_PROMPT_COLOR_BOLD_BACKGROUND[${color_name}]="%{${ZESHY_COLOR_BOLD_BACKGROUND[${color_name}]}%}"
        ZESHY_PROMPT_COLOR_ITALIC[${color_name}]="%{${ZESHY_COLOR_ITALIC[${color_name}]}%}"
    }
}

# --------------------( WASTELANDS                         )--------------------
#   remove_string_match "${*}" "${ZESHY_ANSI_CSI}${ZESHY_ANSI_SGR_GLOB}"
#   print_string "${*//${~ZESHY_ZSH_COLOR_GLOB}/}"
#FUXME: Rename to remove_string_ansi_color().
#FUXME: Rename to remove_string_zsh_color().
#   print_string "${*//${ZESHY_ANSI_CSI}${~ZESHY_ANSI_SGR_GLOB}/}"
#Glob matching the 2-byte ANSI Select Graphic Rendition (SGR) prefixing all
#color-specific ANSI escape codes. Dismantled, this is:
# Handle all terminal color functionality *OTHER* than defining such colors. See
# "00-setup/" for the latter.
