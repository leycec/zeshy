#!/usr/bin/env zsh
# ====================[ character                          ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle the current user's character locale (e.g., "UTF-8"), consisting of:
#
# * A language and optional region signifying:
#   * Regular expression character classes (e.g., [[:alpha:]], [[:space:]]).
# * An encoding signifying:
#   * Input and print_string character encodings (e.g., UTF-8, US-ASCII).

# ....................{ TESTERS                            }....................
#FIXME: For such a central function called countless of times elsewhere, this is
#simply too heavyweight -- particularly as is_locale_encoding_utf8() will
#readily do. The "_character" is redundant, since locale encodings are *ALWAYS*
#locale character encodings. (There's no other sort.)
#
#tl;dr
#=====
#Rename to is_locale_encoding_utf8() and shift to a new component
#"io/encoding/encoding". (Shift function get_locale_encoding() as well, of
#course.)

declare_function '
boolean is_locale_character_encoding_utf8(void)

Return true if the current user''s character locale encodes to UTF-8.
'
function is_locale_character_encoding_utf8() {
    # The current character locale enables UTF-8 encoding if suffixed by either
    # ".utf8" (the canonical UTF-8 encoding name) or ".UTF-8" (a non-canonical
    # common alias of ".utf8").
    die_if_args
    is_string_match "$(get_locale_character_encoding)" '(utf8|UTF-8)'
}

# ....................{ GETTERS                            }....................
declare_function '
string get_locale_character(void)

Get the current user''s character locale (i.e., global ${LC_CTYPE}).
'
function get_locale_character() {
    # Validate sanity.
    die_if_args

    #FIXME: Rename to get_variable_first_nonempty_value_if_found(). In fact, all
    #of the get_first_X() functions should be renamed to get_X_first().
    # Get such locale. See "locale" documentation for algorithm details.
    get_first_nonempty_variable_value_if_found LC_ALL LC_CTYPE LANG or
        print_string 'C'
}

declare_function '
string get_locale_character_encoding(void)

Get the current user''s character locale encoding, a character map specified
for such locale at locale creation time (e.g., via "localedef -f").
'
function get_locale_character_encoding() {
    # Validate sanity.
    die_if_args

    #FIXME: Does "locale charmap" either fail or return the empty string if no
    #charmap option was passed to "localedef"? One or the other must certainly
    #be the case. Not terribly sure how to reliably test this. In any case,
    #revert to matching get_character_locale() print_string if "locale" fails.
    # Get such locale. See "locale" documentation for algorithm details.
    if is_pathable locale
    then locale charmap
    #FIXME: Is returning "ISO-8859-1" really a sensible default? We should
    #probably print a warning in such case.
    else
        get_string_match_group_if_found "$(get_locale_character)" '*.(?*)' or
            print_string 'ISO-8859-1'
    fi
}

# --------------------( WASTELANDS                         )--------------------
#   *the character encoding to be both input and print_string under
# shells run by such user.
