#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_for_script_with_stdin <<'______________<heredoc?>______________'
Handle high-level functions printing warnings and errors.
______________<heredoc?>______________

# ....................{ PRINTERS ~ warning                 }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string print_warning(string message1 = "", string message2, ...)

Print the passed strings (defaulting to the empty string) suffixed by a newline
and decorated by user-configured colors to standard error as a warning message.
See print_message() for further details.
________________<heredoc?>________________
function print_warning() {
    # Avoid calling "print -u2 -- "${message}". While such a command appears
    # superficially identical to the following command, passing the desired file
    # descriptor as an argument fails to preserve interleaving with prior
    # commands printing to file descriptor 1 (i.e., standard out).
    print_newline_if_call_stack_root_same
    print_string_colored "${ZESHY_COLOR_STYLE[print_warning.caller]-}$(get_call_stack_root_basename)${ZESHY_COLOR_STYLE[print_warning.colon]-}: ${ZESHY_COLOR_STYLE[print_warning.message]-}${*}" 1>&2
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string print_warning_sans_newline_suffix(
    string message1 = "", string message2, ...)

Print the passed strings (defaulting to the empty string) suffixed by no newline
and decorated by user-configured colors to standard error as a warning message.
See print_warning() for further details.
________________<heredoc?>________________
function print_warning_sans_newline_suffix() {
    print_string_sans_newline "$(print_warning "${@}" 2>&1)" 1>&2
}

# ....................{ PRINTERS ~ error                   }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string print_error(string message1 = "", string message2, ...)

Print the passed strings (defaulting to the empty string) suffixed by a newline
and decorated by user-configured colors to standard error as an error message.
See print_message() for further details.
________________<heredoc?>________________
function print_error() {
    print_newline_if_call_stack_root_same
    print_string_colored "${ZESHY_COLOR_STYLE[print_error.caller]-}$(get_call_stack_root_basename)${ZESHY_COLOR_STYLE[print_error.colon]-}: ${ZESHY_COLOR_STYLE[print_error.message]-}${*}" 1>&2
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string print_error_exit_status(integer exit_status)

Print a description of the passed non-zero exit status to standard output. This
function is intended to be called only by die_with_exit_status(), whose
implementation guarantees state assumed by this function (e.g., a call stack
containing at least three callers).
________________<heredoc?>________________
function print_error_exit_status() {
    # Validate passed arguments.
    die_unless_arg 'expected one exit status'
    string exit_status="${1}"
    die_unless_integer_nonnegative "${exit_status}"

    # Size of the current call stack, including the call to this function.
    integer call_stack_size; call_stack_size="$(get_call_stack_size)"

    # Caller's caller's name (i.e., the name of the function or script calling
    # the function or script calling this function). Assuming this function to
    # have been called by die_with_exit_status(), the current call stack
    # contains at least three and typically four stack frames:
    #
    # * ${funcstack[1]}, this function.
    # * ${funcstack[2]}, the die_with_exit_status() function.
    # * ${funcstack[3]}, the caller. This is typically either the
    #   intermediate Zeshy-specific TRAPZERR() or die() functions.
    # * ${funcstack[4]}, the caller's caller. Assuming ${funcstack[2]} to be
    #   either TRAPZERR() or die(), this is the actual "caller."
    string caller_caller_name
    if { (( call_stack_size >= 4 )) and
         is "${funcstack[3]}" == (TRAPZERR|die) si } {
        caller_caller_name="${funcstack[4]}"
    } elif (( call_stack_size == 3 )) {
        caller_caller_name="${funcstack[3]}"
    } else {
        die "not called by die_with_exit_status()"
    }

    # Print such status. Avoid redirecting to standard error, as
    # die_with_exit_status() already does so.
    print_string_colored "${ZESHY_COLOR_STYLE[print_error.caller]-}${caller_caller_name}${ZESHY_COLOR_STYLE[print_error.colon]-}: ${ZESHY_COLOR_STYLE[print_error.message]-}failed with exit status ${exit_status}"
}

# --------------------( WASTELANDS                         )--------------------
