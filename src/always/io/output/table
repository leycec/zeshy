#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *table printers* (i.e., functions tabulating each line of a string into
horizontally aligned columns).
-/-

# ....................{ PRINTERS                           }....................
#FIXME: The command "column" only really works for simple data guaranteed to
#fit onto a single line. But consider a line in which a single column is
#slightly too long, spilling the whole line past the terminal width. What does
#"column" do when fed inordinantly long lines? It just prints all excess as the
#last column *WITHOUT* wrapping, which is patently unhelpful. As an alternative,
#there is the GNU-specific command "columns" -- effectively, the obese older
#brother of "column". But it's GNU-specific and hence out for cross-platform
#portability. (It's also unclear just which GNU/Linux distros even ship
#"columns". Not that it particularly matters, of course, as we won't be
#leveraging it...)
#
#So, what's an ailing parcel to do? Clearly, we just need to implement our own
#tabulator. Shouldn't be *TERRIBLY* difficult, given that we've already
#implemented slightly similar box wrapping functionality. Contemplate.

#FIXME: O.K.; so, this function is a low-level (but general-purpose) table
#printer usually called only by higher-level front-facing printers. These
#should include:
#
#* print_table_rows_split_on_string(
#      list table_rows, map table_options = "()", string separator)
#
#  This function splits the passed list of table rows on the passed separator.
#  The question is how to format the list of table elements that print_table_cells()
#  accepts... Hmmm; it isn't a terribly easy question, is it? We want to admit
#  a variable number of columns (i.e., each column can contain [0, inf]
#  elements, and we should still do the "right" thing). This is fairly
#  important, as even "column" admits a variable number of columns! To do so,
#  however, we'll want some semblance of a "</tr>" tag denoting the end of the
#  current table row. How? Well, first of all, how about what we *SHOULDN'T* use
#  as such delimiter:
#
#  * "", the empty string. A bad idea, as we want to allow for empty table cells.
#  * "${ZESHY_ASCII_NEWLINE}", a newline. A bad idea, for the same reason that
#    "" would be a bad idea.
#  * "--", the options delimiter. Intuitively, another bad idea; it's too short
#    and altogether too common.
#
#  Honestly, the sanest solution seems to be to define a new string global
#  ${ZESHY_TABLE_ROW_DELIMITER} -- defaulting to, say,
#  "`Tw@s br1ll1g, @nd th3 sl1thy t0v3s". It doesn't particularly matter, but
#  that seems a moderately respectable table row delimiter.
#
#  Right. So, print_table_rows_split_on_string() splits the passed list of table
#  rows on the passed separator into discrete table elements, appending the last
#  element of each row with the pseudo-element ${ZESHY_TABLE_ROW_DELIMITER} into
#  a new list local and passing such list to print_table_cells().
#
#  For example, if passed separator " " and list table_rows=(
#     'Did gyre and gimble in the wabe:'
#     'All mimsy were the borogoves,'
#     '  And the mome raths outgrabe.'
#  ), print_table_rows_split_on_string() will ultimately pass a list table_cells=(
#     'Did' 'gyre' 'and' 'gimble' 'in' 'the' 'wabe:' ${ZESHY_TABLE_ROW_DELIMITER}
#     'All' 'mimsy' 'were' 'the' 'borogoves,' ${ZESHY_TABLE_ROW_DELIMITER}
#     '  And' 'the' 'mome' 'raths' 'outgrabe.' ${ZESHY_TABLE_ROW_DELIMITER}
#  ) to print_table_cells().
#
#  Naturally, the last passed ${ZESHY_TABLE_ROW_DELIMITER} is optional -- since,
#  really, what *ELSE* could it be?
#
#* print_table_lines_split_on_string(
#      string lines, map table_options = "()", string separator)
#
#  This is one of the higher-level table printers, mostly due to the convenience
#  it offers. It splits each line from the passed string into a list and calls
#  print_table_rows_split_on_string() with such list and separator. Done!
#FIXME: I'm not entirely happy with our table options approach. Requiring the
#caller to locally construct a map and pass such map's name certainly isn't
#convenient. Rather, here's what I'd *LOVE* to do. Adopt function signatures
#resembling:
#
#    print_table_lines_split_on_string(
#        string lines, string separator,
#        string table_option_name1?, string table_option_value1?,
#        string table_option_name2?, string table_option_value2?, ...)
#
#Clearly, print_table_lines_split_on_string() just passes such key-value pairs
#to print_table_rows_split_on_string() without modification, and ditto for
#print_table_rows_split_on_string() to print_table_cells(). The latter function
#simply creates a local map containing such key-value pairs for convenient
#lookup and off we go!
#
#Interestingly, it's quite easy for such scheme to also transparently
#accommodate an optional table options map. How? Simple: if the number of
#optional suffixing arguments is 1, such argument must be the name of the table
#options map to use; else if such number is greater than 1, such arguments must
#be key-value pairs to be copied into a local table options map, as above. Uber-
#sweet, no?
#
#In any case, the key-value pairs approach is key to convenient use of such
#functions. This is particularly important for specifying that the first line of
#such string is the header line (by default, no headers should be assumed): e.g.,
#
#    >>> print_table_lines_split_on_string lines ':'\
#    ...     is_first_line_headers "${ZESHY_BOOLEAN_TRUE}"
#
#Done! Man. That is fairly awesome, eh? While I really have no time to muck
#about with implementing such mechanics, I'm fairly confident that the above
#design is decently lock-tight. (Go-a-go-go, sometime.)
#FIXME: Sweet! Using the above table options design, it becomes readily possible
#to pass a constant number of columns. For sanity, print_table_cells() *MUST*
#assume a variable number of columns and hence require passing row delimiters.
#However, if the caller passes options resembling:
#
#    >>> print_table_lines_split_on_string lines ':'\
#    ...     is_first_line_headers "${ZESHY_BOOLEAN_TRUE}"\
#    ...     column_count 2
#
#Then all of that becomes *MUCH* simpler. Indeed, I actually have need
#elsewhere of calling print_table_cells() directly (see
#print_x11_color_name_to_color_ansi_256()), suggesting print_table_cells() may
#not be quite as low-level as we thought. Supporting an option like
#"column_count 2" makes calling print_table_cells() directly a much more
#manageable (and readable, and maintainable) affair, which is fairly great.

declare_function_with_stdin <<'/---'
string print_table_cells(list table_cells, map table_options = "()")

Print the passed list of table cells with the passed map of table options
(defaulting to the empty map implying default table options).
/---
function print_table_cells() {
    # Validate sanity.
    die_unless_args_1_to_2\
        'Expected one table cells list and optional table options map.'

    # Page all output exceeding the height of the current terminal.
    {
        # Handle previously updated output state.
        start_stdout_delimited

        #FIXME: Do something here, please.

        # Update output state in preparation for subsequent output.
        stop_stdout_delimited
    } | page_stdin
}

# --------------------( WASTELANDS                         )--------------------
