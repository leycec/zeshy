#!/usr/bin/env zsh
# ====================[ print_string                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle standard print_string and error.

# ....................{ PRINTERS                           }....................
# void print_string(string text1, string text2, ...)
#
# Print the passed strings to standard print_string with default trailing newline.
# Unlike say(), print no theme-specific nonsense (e.g., ANSI color codes).
# Avoid calling echo() or print(), which fail on hyphen-prefixed strings: e.g.,
#
#     >>> string lammoth='-z' morgoth='rm -rf *'
#
#     # Bad! Never do this, unless guaranteed no hyphens prefix such string.
#     # If hyphens do prefix such string, Zsh treats the first word of such
#     # string as options to print(). This can be extremely unsafe, as this
#     # example demonstrates.
#     >>> print "${lammoth}" "${morgoth}"
#     >>> rm -rf *   # don't accidentally hit <Enter> here; what, you just did?
#
#     # Good. Always do this, instead.
#     >>> print_string "${lammoth}" "${morgoth}"
#     -z rm -rf *    # that's more like it
function print_string() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -r -- "${@}"
}

# void curse_string(string text1, string text2, ...)
#
# Print the passed strings to standard error with default trailing newline.
# Unlike cry(), print no theme-specific nonsense (e.g., ANSI color codes).
function curse_string() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -r -- "${@}" 1>&2
}

# ....................{ PRINTERS ~ newline                 }....................
#FIXME: Rename to print_newline().
# void print_newline(void)
#
# Print a blank line to standard output.
function print_newline() {
    die_if_args
    print
}

# void curse_newline(void)
#
# Print a blank line to standard error.
function curse_newline() {
    die_if_args
    print 1>&2
}

# ....................{ PRINTERS ~ escaped                 }....................
# void print_string_escaped(string text1, string text2, ...)
#
# Print the passed strings to standard print_string with default trailing newline and
# all escapes escaped (i.e., converted to the corresponding characters): e.g.,
#
#     >>> string morning_window="\nTHEY are rattling breakfast plates...\n"
#     >>> print_string_escaped "${morning_window}"
#
#     THEY are rattling breakfast plates...
#
#     >>> print_string "${morning_window}"
#     \nTHEY are rattling breakfast plates...\n
function print_string_escaped() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -- "${@}"
}

# void curse_string_escaped(string text1, string text2, ...)
#
# Print the passed strings to standard error with default trailing newline and
# all escapes escaped, as with print_string_escaped().
function curse_string_escaped() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -- "${@}" 1>&2
}

# ....................{ PRINTERS ~ undelimited             }....................
# void print_string_undelimited(string text1, string text2, ...)
#
# Print the passed strings to standard print_string without delimitation: e.g.,
#
#     >>> print_string_undelimited "Where Alph," "the sacred river," ran
#     Where Alph,the sacred river,ran
function print_string_undelimited() {
    # Temporarily set global string ${IFS} to the empty string. Since Zsh
    # implicitly delimits lists interpolated with the "*" operator when double-
    # quoted with such global, the following commands print the passed arguments
    # undelimited. This incantation was astonishingly difficult to discover.
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    string IFS=
    print -r -- "${*}"  # if not double-quoted, Zsh oddly ignores ${IFS}
}

# void curse_string_undelimited(string text1, string text2, ...)
#
# Print the passed strings to standard error without delimitation: e.g.,
#
#     >>> curse_string_undelimited "Through caverns" "measureless to" "man"
#     Through cavernsmeasureless toman
function curse_string_undelimited() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    string IFS=
    print -r -- "${*}" 1>&2  # if not double-quoted, Zsh oddly ignores ${IFS}
}

# ....................{ PRINTERS ~ null                    }....................
# void print_string_delimited_by_null(string text1, string text2, ...)
#
# Print the passed strings to standard print_string delimited and terminated by nulls
# (i.e., such that a null '\0' separates each such string from the next and the
# last such string is followed by a null '\0').
function print_string_delimited_by_null() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -Nr -- "${@}"
}

# void curse_string_delimited_by_null(string text1, string text2, ...)
#
# Print the passed strings to standard print_string delimited and terminated by nulls.
# See curse_string_delimited_by_null for details.
function curse_string_delimited_by_null() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -Nr -- "${@}" 1>&2
}

# ....................{ PRINTERS ~ newline                 }....................
# void print_string_delimited_by_newline(string text1, string text2, ...)
#
# Print the passed strings to standard print_string delimited by newlines (i.e., such
# that a newline separates each such string from the next): e.g.,
#
#     >>> print_string_delimited_by_newline sludge elf transmuter
#     sludge
#     elf
#     transmuter
function print_string_delimited_by_newline() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -lr -- "${@}"
}

# void print_list_delimited_by_newline(
#   string list_name, integer start_index = 1, integer end_index = -1)
#
# Print the elements between the passed start and end indices (defaulting to the
# first and last elements) of the list with the passed name to standard output
# delimited by newlines. If no indices are passed, all elements are printed; if
# one index is passed, only that index is passed. Negative indices are offset
# from the end: e.g.,
#
#     >>> list runes; runes=( abyss crypt pan tomb vaults )
#     >>> print_list_delimited_by_newline runes
#     abyss
#     crypt
#     pan
#     tomb
#     vaults
#     >>> print_list_delimited_by_newline runes 3
#     pan
#     >>> print_list_delimited_by_newline runes 3 -1
#     pan
#     tomb
#     vaults
function print_list_delimited_by_newline() {
    # Validate passed arguments.
    prepend_args_with_standard_input_if_piped
    die_unless_args_1_to_3\
        'expected one variable name and optional start and end indices'
    string list_name="${1}" __index_first__="${2:-}" __index_last__="${3:-}"
    check_list_args "${list_name}" __index_first__ __index_last__

    # Output such list.
#   print "beg: ${beg_index}\nend: ${end_index}"
    print -lr -- "${${(@P)list_name}[${__index_first__},${__index_last__}]}"
}

# ....................{ PRINTERS ~ no newline              }....................
# void print_string_unsuffixed_by_newline(string text1, string text2, ...)
#
# Print the passed strings to standard print_string with no default trailing newline.
function print_string_unsuffixed_by_newline() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -nr -- "${@}"
}

# void curse_string_unsuffixed_by_newline(string text1, string text2, ...)
#
# Print the passed strings to standard error with no default trailing newline.
function curse_string_unsuffixed_by_newline() {
    prepend_args_with_standard_input_if_piped
    die_unless_args 'expected at least one string'
    print -nr -- "${@}" 1>&2
}

# --------------------( WASTELANDS                         )--------------------
#   print "stdin: $(< /dev/stdin)"
#FUXME: Rename to print_nondelimited(); similarly, below. While Google shows an
#effectively equal number of hits for both undelimited and non-delimited, the
#latter is much more consistent with nomenclature elsewhere.
#FUXME: Rename to print_with_delimiter_newline(); similarly, below.
# * Rename "cry" to "cry" and "outcry" to simply "outcry". Likewise,
#   rename "say" to "put" and "output" to simply "output". Truly, for this is
#   Awesome Incarnate.
# * Alternatively, rename "outcry" to "decry", "say" to "vow", and "output"
#   to "devow". Personally, I prefer the "out"-prefixed forms, as that cleanly
#   suggests an input_*() family of functions to accept input.
# * O.K.; how about this. The "cry" forms are quite perfect, but the "say"
#   forms... I quite like "output" to "output", but "say" to "put"? It reads
#   awkwardly, to put it mildly. Let's go non-orthogonal here, for readability.
#   How about "say" to "say", which coincides nicely with "cry"? Then we have:
#
#   cry -> cry      curse_string -> outcry
#   say -> say      print_string -> output
# * I'm strongly in favor of:
#   output() or stsay() or msay()
#   outcry() or ???????()
#   Yeah, output() and outcry() read quite well.
