#!/usr/bin/env zsh
# ====================[ output                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle standard output and error in a theme-aware manner (e.g., colorfully).

# ....................{ SAYERS                             }....................
# The say() and cry() functions defined here appear after and hence override
# the previously defined functions of the same name defined by "main".

#FIXME: Odd. Under root, but *NOT* customary users, this version is *NOT*
#overriding the original version defined under "main". What the...?

document_function '
string say(string message = "")

Print the passed message to standard output with default trailing newline in a
theme-aware manner (e.g., with color on color terminals).
'
function say() {
    print_string_colored "${ZESHY_COLOR_BOLD[green]-}$(get_call_stack_root_basename)${ZESHY_COLOR_BOLD[grey]-}: ${ZESHY_COLOR_BOLD[white]-}${*}"
}

document_function '
string cry(string message = "")

Print the passed warning to standard error with default trailing newline in a
theme-aware manner (e.g., with color on color terminals).
'
function cry() {
    # Avoid calling "print -u2 -- "${message}". While such a command appears
    # superficially identical to the following command, passing the desired file
    # descriptor as an argument fails to preserve interleaving with prior
    # commands printing to file descriptor 1 (i.e., standard out).
    print_string_colored "${ZESHY_COLOR_BOLD[green]-}$(get_call_stack_root_basename)${ZESHY_COLOR_BOLD[grey]-}: ${ZESHY_COLOR_BOLD[yellow]-}${*}" 1>&2
}

# ....................{ SAYERS ~ newline                   }....................
document_function '
string say_nonnewlined(string text1, string text2, ...)

Print the passed message to standard output with no default trailing newline in
a theme-aware manner (e.g., with color on color terminals).
'
function say_nonnewlined() {
    print_string_nonnewlined "$(say "${*}")"
}

document_function '
string cry_nonnewlined(string text1, string text2, ...)

Print the passed warning to standard error with no default trailing newline in a
theme-aware manner (e.g., with color on color terminals).
'
function cry_nonnewlined() {
    print_string_nonnewlined "$(cry "${*}" 2>&1)" 1>&2
}

# ....................{ SAYERS ~ banner                    }....................
#FIXME: Rename to say_banner().
#FIXME: Define a new print_banner_titled() function accepting a banner, printing
#such title centered in such banner.

document_function '
string print_banner(void)

Print a single-line banner to standard output.
'
function print_banner() {
    # Validate passed arguments, defining a placeholder variable to avoid
    # "parameter not set" warnings below.
    die_if_args
    string placeholder

    # Dismantled, this is:
    #
    # * "(l:..::..:)", expanding to the second argument padded (i.e., repeated)
    #   to the length specified with the first argument.
    print_string_colored\
        "${ZESHY_COLOR[grey]}${(l:$(get_terminal_width)::=:)placeholder}"
}

# --------------------( WASTELANDS                         )--------------------
#   cry "${*}" |& print_string_nonnewlined 1>&2
