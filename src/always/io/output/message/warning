#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *warning printers* (i.e., functions printing nonfatal warning messages).
/---

# ....................{ PRINTERS ~ warning                 }....................
declare_function_with_stdin <<'/---'
[stderr: string] print_warning(string message1 = "", ...)

Print the passed strings (defaulting to the empty string) as a warning entitled
under the name of the runnable originating the current call stack (i.e., as
output by output_call_stack_root_runnable()). See print_message() for further
details.
/---
function print_warning() {
    print_string_titled "${*}" "$(output_call_stack_root)" 1>&2
}

#FIXME: In lieu of unit tests...
#function waro() {
#    print_warning 'Writing down my infinity. Writing for all eternity. Eliminate inner parenthesis. Now combine like terms remembering to watch negative signs.'
#}

# --------------------( WASTELANDS                         )--------------------
#   print_string_titled "${*}" "$(output_call_stack_root_with_style_prefix)" 1>&2
    # To ensure Avoid calling run_code_to_stderr()
#Print the passed strings (defaulting to the empty string) suffixed by a newline
#and decorated by user-configured colors to standard error as a warning message.
    # Avoid calling "print -u2 -- "${message}". While such a command appears
    # superficially identical to the following command, passing the desired file
    # descriptor as an argument fails to preserve interleaving with prior
    # commands printing to file descriptor 1 (i.e., standard out).
#   print_string "${ZESHY_STYLE_TO_COLOR[print_warning.caller]-}$(output_call_stack_root_with_style_prefix)${ZESHY_STYLE_TO_COLOR[print_warning.colon]-}: ${ZESHY_STYLE_TO_COLOR[print_warning.message]-}${*}" 1>&2
