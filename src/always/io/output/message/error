#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *error printers* (i.e., functions printing error messages commonly
associated with fatal exceptions).
/---

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
integer get_terminal_width_for_errors(void)

Get the maximum number of characters available to each line of error and
exception messages on the current terminal under the user-configurable styles
specific to such messages. See get_string_titled_width_body_with_style_prefix()
for further details.
/---
function get_terminal_width_for_errors() {
    get_string_titled_width_body_with_style_prefix 'print_error.'
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
[stderr: string] print_error(string message1 = "", ...)

Print the passed strings (defaulting to the empty string) as an error entitled
under the basename of the runnable at the call stack root (i.e., as returned by
get_call_stack_root_basename()). See print_message() for further details.
/---
function print_error() {
    #FIXME: Only suffix "()" if such root is a function.
    print_string_titled "${*}" "$(get_call_stack_root_basename)()" 1>&2
}

#FIXME: In lieu of unit tests...
#function erro() {
#    print_error "I'm in control of the infinite mind, and I control infinite power. When? Every black minute. And self-control is something I've learned."
#}

# ....................{ PRINTERS ~ status                  }....................
#FIXME: Ugh. The current implementation is atrociously terrible. It should:
#
#* Leverage ${ZESHY_STYLE_TO_TEXT}.
#* Leverage ${ZESHY_STYLE_TO_COLOR} styles that *ACTUALLY* exist.
#* Be *MUCH* better integrated into the printed exception message. Ideally,
#  shouldn't messages just resemble:
#
#  /----------------- rsync_safely ----------------------\
#  | mount_disk() failed with exit status 1:             |
#  | Expected one device filename and one mount dirname. |
#  \-----------------------------------------------------/
#
#  # Then, print the current call stack here!
#FIXME: Right. All of this was pretty much extreme overkill. Define a new
#parcel @{message/exception} with function print_exception_with_status()
#accepting a string message and integer status and printing:
#
#* Such message and status in a single box, as above. We'll probably need a call resembling:
#   print_string_titled_with_style_prefix\
#       "$(get_call_stack_root_basename)" "${*}" 1>&2
#* 
#FIXME: The whole "$(get_call_stack_root_basename)" jazz isn't quite right. Such
#text should be semantically embellished with a new getter appropriate to output
#-- say, get_call_stack_root_basename() -- as follows:
#
#* If get_call_stack_root_basename() is a file, such basename should be double-
#  quoted. For aesthetics, we really want to use the UTF-8-encoded “ and ”
#  characters. To do so, add new entries "text.quote_double_left" and
#  "text.quote_double_left" to ${ZESHY_STYLE_TO_TEXT_UTF8}. ('K: done!)
#* If get_call_stack_root_basename() is a function, such basename should be
#  suffixed by "()".
#
#Come to think, such functionality is probably the *EXACT* same as that already
#performed by output_call_stack(), yes? In such case, extract such functionality
#into a new function -- how about, say, output_runnable_name_with_style_prefix()?
#Such function should accept a runnable name and optional style prefix and adorn
#such name with both context-dependent text *AND* colors. Such function should be
#defined under @{15-function}, somewhere, to render it accessible to
#output_call_stack(). Note that, when we call it here, such function should
#probably be called *WITHOUT* a style prefix; ideally, we want such function to
#*NOT* adorn such runnable name with colors here, since we do that ourselves
#already.
declare_function_with_stdin <<'/---'
[stderr: string] print_error_status(integer exit_status)

Print a description of the passed non-zero exit status to standard error. This
function is intended to be called only by die_with_status(), whose
implementation guarantees state assumed by this function (e.g., a call stack
containing at least three callers).
/---
function print_error_status() {
    # Validate passed arguments.
    die_unless_arg 'expected one exit status'
    string exit_status="${1}" caller_caller_name
    die_unless_integer_nonnegative "${exit_status}"

    #FIXME: Actually, this is terrible. For too many fragile assumptions that
    #just don't pan out in reality. The simplest fix is to simply search the
    #call stack from the caller of this function up the call stack until finding
    #a caller *NOT* matching the following glob:
    #
    #    ('TRAPZERR'|'die'('_'*|))
    #
    #Such caller is basically guaranteed to be as close to the desired runnable
    #name as we can get, and should suffice for 99% of cases. It's also rather
    #efficient to do, given list index flags. I'm dead certain we perform a
    #similar search on the call stack elsewhere, as well. Grep us up!

    # Get the caller's caller's name (i.e., the name of the runnable running the
    # runnable calling this function). Assuming this function to have been
    # called by die_with_status() as is typically the case, the current
    # call stack contains at least three and typically four stack frames:
    #
    # * ${funcstack[1]}, this function.
    # * ${funcstack[2]}, the die_with_status() function.
    # * ${funcstack[3]}, the caller. This is typically either the
    #   intermediate zeshy-specific TRAPZERR() or die() functions.
    # * ${funcstack[4]}, the caller's caller. Assuming ${funcstack[3]} to be
    #   either TRAPZERR() or die(), this is the actual "caller."
    #
    # If this is the case, the fourth stack frame identifies the desired caller.
    if (( ${#funcstack} >= 4 )) {
        caller_caller_name="${funcstack[4]}"
    # Else, the call stack contains three or fewer stack frames. While
    # unexpected, this is certainly permissible (e.g., to avoid recursively
    # throwing exceptions from exception handlers). Arbitrarily select the last
    # such frame to identify the desired caller.
    } else {
        caller_caller_name="${funcstack[-1]}"
    }

    #FIXME: Style names are no longer quite right (e.g., "print_error.colon").
    #Define new "print_error_status."-prefixed styles specific to this
    #function.
    #FIXME: Clearly, only output "()" if such caller is a function rather than
    #script. It would be foolish to duplicate the similar functionality of
    #output_call_stack() already doing so; hence, abstract such functionality
    #into a new function print_runnable_name() to be called both here and in
    #output_call_stack(). Nice!

    # Print such status. Avoid redirecting to standard error, as the caller
    # (typically die_with_status()) is assumed to already do so.
    start_stdout
    output_string "${ZESHY_STYLE_TO_COLOR[print_error.caller]-}${caller_caller_name}${ZESHY_STYLE_TO_COLOR[print_error.colon]-}() ${ZESHY_STYLE_TO_COLOR[print_error.message]-}failed with exit status ${exit_status}"
    stop_stdout
}

# --------------------( WASTELANDS                         )--------------------
#Get the maximum number of characters in the body of each line of output (i.e.,
#excluding width of visual borders on such lines) wrapped to the current terminal
#under the user-configurable styles prefixed by the passed prefix.

#Since such messages are often
#embedded within a visual box, this number is often slightly less than that
#returned by get_terminal_width().
#Print the passed strings (defaulting to the empty string) suffixed by a newline
#and decorated by user-configured colors to standard error as an error message.
#See print_message() for further details.

#   print_string "${ZESHY_STYLE_TO_COLOR[print_error.caller]-}$(get_call_stack_root_basename)${ZESHY_STYLE_TO_COLOR[print_error.colon]-}: ${ZESHY_STYLE_TO_COLOR[print_error.message]-}${*}" 1>&2

#FUXME: The current overly simplistic get_print_message_prefix()-based approach
#should be jettisoned in favor of a Unicode box-drawing based approach: e.g.,
#
#/------------------------------[ zsh_gone_bad() ]-----------------------------\
#| An error has been thrown. It is a horrible error, but others are probably   |
#| worse.                                                                      |
#\-----------------------------------------------------------------------------/
#
#What's particularly nice about such an approach is that it inherently delimits
#prior from subsequent output. Indeed, we needn't even prefix such output with
#delimiting whitespace anymore, which is particularly nice.

    # Size of the current call stack, including the call to this function.
    # Avoid calling get_call_stack_size(), which tends to behave erratically
    # when called from within an exception handler.
#   integer call_stack_size=${#funcstack}

#   if (( call_stack_size >= 4 )) {
#       if is "${funcstack[3]}" == ('TRAPZERR'|'die') si {
#           caller_caller_name="${funcstack[4]}"
#       } else {
#           #FUXME: Doesn't this also constitute an error condition?
#           print "caller caller name: ${funcstack[3]}\ncaller caller caller name: ${funcstack[4]}"
#           caller_caller_name="${funcstack[3]}"
#       }
#   #FUXME: Doesn't this also constitute an error condition?
#   } elif (( call_stack_size == 3 )) {
#       caller_caller_name="${funcstack[3]}"
#   } elif (( call_stack_size == 2 )) {
#       die "print_error_status() called by ${funcstack[2]}() rather than die_with_status()"
#   } else {  # elif (( call_stack_size == 1 )) {
#       print "call stack size: ${#funcstack}; ${call_stack_size}\nfuncstack[2]: ${funcstack[2]}"
#       die "print_error_status() not callable directly from the CLI"
#   }

#; call_stack_size="$(get_call_stack_size)"
#declare_function_with_stdin <<'/---'
#string print_warning_sans_newline_suffix(
#    string message1 = "", string message2, ...)
#
#Print the passed strings (defaulting to the empty string) suffixed by no newline
#and decorated by user-configured colors to standard error as a warning message.
#See print_warning() for further details.
#/---
#function print_warning_sans_newline_suffix() {
#    print_string_sans_newline_suffix "$(print_warning "${@}" 2>&1)" 1>&2
#}

