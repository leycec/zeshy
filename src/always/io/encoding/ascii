#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle the ASCII (American Standard Code for Information Interchange) encoding.
-/-

# ....................{ GLOBALS                            }....................
# Character constants to be interpolated into unprinted strings (e.g., globs,
# regular expressions). zsh interprets escaped characters such as \n (newline)
# and \t (tab) as "special" only when passed to the echo() or print() builtins;
# in all other cases, zsh passes such characters as is (i.e., without
# interpretation) through to the underlying builtins. Embedding such characters
# in $'...'-style quotes (as below) circumvents this, inducing zsh to interpret
# such characters regardless of which builtin finally receives them.

declare_global_with_stdin character ZESHY_ASCII_NEWLINE=$'\n' <<'/---'
Newline character. While builtins echo() and print() do recognize `\n` to be a
newline, all other cases require cumbersome `$'\n'`-style expressions. This
global obviates such awkwardness.
/---

declare_global_with_stdin character ZESHY_ASCII_NULL=$'\0' <<'/---'
Null character. While builtins echo() and print() do recognize `\0` as a valid
null, all other cases require cumbersome `$'\0'`-style expressions. This global
obviates such awkwardness.
/---

declare_global_with_stdin character ZESHY_ASCII_TAB=$'\t' <<'/---'
Tab character. While builtins echo() and print() do recognize `\t` as a valid
tab, all other cases require cumbersome `$'\t'`-style expressions. This global
obviates such awkwardness.
/---

# ....................{ GLOBALS ~ list                     }....................
#FIXME: Initialize below.
declare_global_with_stdin <<'/---'
list ZESHY_ASCII_PRINTABLES_PHYSICAL

List of all physical ASCII characters (i.e., all printable ASCII characters
excluding space, and hence characters 0x21 through 0x70 in hexadecimal).
/---

# ....................{ PRECOMPILERS                       }....................
#FIXME: Uncomment after implementing below.
#run_hook_on_zeshy_precompile precompile_zeshy_encoding_ascii

declare_function_with_stdin <<'/---'
void precompile_zeshy_encoding_ascii(void)

Define ASCII-specific globals to be compiled into `zeshy`\'s user digest file.
/---
function precompile_zeshy_encoding_ascii() {
    # Validate sanity.
    die_if_args

    #FIXME: Implement a for loop on integers from 0x21 to 0x70, basically
    #calling convert_hexadecimal_to_character() on each iteration. For
    #efficiency, we'll probably have to implement
    #convert_hexadecimal_to_character() manually in such loop. If memory serves,
    #however, this should be painlessly easy. Huh-a!
#   ZESHY_CHARACTERS_ASCII_PHYSICAL+=
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: "man zshexpn" suggests "Any character, or the matching pairs `(...)',
#`{...}', `[...]', or `<...>', may be used in place of a colon as delimiters,
#...". Note the "Any character." Is this genuinely the case? O.K.; right. Yes,
#actually! However, when braces are used, they *MUST* be paired (i.e., one can't
#write "${(j(:()list}"). To simplify use, set this list to *ALL* printable ASCII
#characters excluding brace characters. To do so, it may be instructive to
#define a precompile_zeshy_*() function executed at compile time. Contemplate.
#FUXME: Actually... no. Just use all printable ASCII characters. Rename this to
#ZESHY_CHARACTERS_ASCII_PRINTABLE, and away we go.
#List of all possible parameter expansion delimiter characters (e.g., the ":" in
#"${(l:42::~:)the_answer_to_the_ultimate_question_of_life}").
#'
#ZESHY_PARAMETER_EXPANSION_DELIMITERS=(
#    ',' '.' ';' ':' '~' '`' "'" '"' '=' '+' '@' '#' '$' '%' '-' '^' '&' '*'
#    '-' '_' '\' '|' '/' '?'
#)
