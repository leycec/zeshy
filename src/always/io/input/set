#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *interactive input setters* (i.e., functions setting caller-specified
variables to such input).
-/-

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_string_to_input_character(string string_name)

Set the passed string variable to a single character interactively entered by
the current user. Block until _any_ character is entered.
/---
function set_string_to_input_character() {
    # Validate passed arguments.
    die_unless_arg 'expected one string name'
    die_unless_stdin_terminal
    string string_name__sstic="${1}"
    die_unless_variable_string "${string_name__sstic}"

    # Block on and set such character.
    read -k -- "${string_name__sstic}"
#   print -r "response (length ${#${(P)string_name__sstic}}): ${(P)string_name__sstic}"
}

declare_function_with_stdin <<'/---'
void set_string_to_input_line(string string_name)

Set the passed string variable to a *single line* (i.e., a newline-delimited
string otherwise containing no newlines) interactively entered by the current
user. Block until the first newline is entered.
/---
function set_string_to_input_line() {
    # Validate passed arguments.
    die_unless_arg 'expected one string name'
    die_unless_stdin_terminal
    string string_name__sstil="${1}"
    die_unless_variable_string "${string_name__sstil}"

    # Block on and set such string.
    read -- "${string_name__sstil}"
}

# ....................{ SETTERS ~ question                 }....................
declare_function_with_stdin <<'/---'
string set_string_to_query_line(
    string string_name, string question)

Set the passed string variable to a *single line* (i.e., a newline-delimited
string otherwise containing no newlines) interactively entered by the current
user, printing the passed question before receiving such input. Block until
the first newline is entered.
/---
function set_string_to_query_line() {
    # Validate passed arguments.
    die_unless_args_2 'expected one string name and one question'
    die_unless_stdin_terminal
    string string_name__ssticfq="${1}" question__ssticfq="${2}"

    # Print such question.
    print_message_sans_newline "${question__ssticfq}"

    # Block on such line and set such string.
    set_string_to_input_line "${string_name__ssticfq}"
}

# --------------------( WASTELANDS                         )--------------------
#declare_function_with_stdin <<'/---'
#string set_string_to_query_character(
#    string string_name, string question)
#
#Set the passed string variable to a single character interactively entered by
#the current user, printing the passed question before receiving such input.
#Block until _any_ character is entered.
#/---
#function set_string_to_query_character() {
#    # Validate passed arguments.
#    die_unless_args_2 'expected one string name and one question'
#    die_unless_stdin_terminal
#    string string_name__ssticfq="${1}" question__ssticfq="${2}"
#
#    # Print such question.
#    print_message_sans_newline "${question__ssticfq}"
#
#    # Block on such character and set such string.
#    set_string_to_input_character "${string_name__ssticfq}"
#
#    # Print a trailing newline unless such character is a newline.
#    is_string_equals "${(P)string_name__ssticfq}" "${ZESHY_ASCII_NEWLINE}" or
#        output_newline
#}
