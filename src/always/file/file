#!/usr/bin/env zsh
# ====================[ file                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy File, handling plain files (e.g., non-directories, non-device nodes,
# non-symbolic and -hard links).

# ....................{ EXCEPTIONS                         }....................
# void die_if_file(string pathname, string error_message = 'is a file')
#
# Throw an exception if the passed file exists.
die_if_file() {
    die_unless_one_or_two_args\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_file "${pathname}" and die "${2:-\"${pathname}\" is an existing file}"
}

# void die_unless_file(string pathname, string error_message = 'not a file')
#
# Throw an exception unless the passed file exists.
die_unless_file() {
    die_unless_one_or_two_args\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_file "${pathname}" or die "${2:-\"${pathname}\" not found or not a file}"
}

# void die_unless_files(string pathname1, string pathname2, ...)
#
# Throw an exception unless all of the passed files exist.
die_unless_files() {
    die_unless_args 'expected at least one pathname'
    is_files "${@}" or
        die "${2:-\"${pathname}\" not all found or not all files}"
}

# ....................{ TESTS                              }....................
# bool is_file(string pathname)
#
# Return true if the passed path is an existing non-directory file.
is_file() {
    die_unless_one_arg 'expected one pathname'
    is -e "${1}" and not -d "${1}" si
}

# bool is_files(string pathname1, string pathname2, ...)
#
# Return true if all passed paths are existing files.
is_files() {
    die_unless_args 'expected at least one pathname'

    # List of filenames filtered from the passed list of pathnames. Dismantled,
    # this is:
    #
    # * "${^@}", iteratively expanding to each passed pathname.
    # * "(.)", excluding non-filenames.
    list filenames; filenames=( ${^@}(.) )

    # Return true only if the list of passed pathnames contains only filenames.
    (( "${#filenames}" == "${#@}" ))
}

# bool is_regular_file(string pathname)
#
# Return true if the passed path is an existing regular file (i.e., a file not a
# device, directory, named pipe, socket, or symbolic link).
is_regular_file() {
    die_unless_one_arg 'expected one pathname'
    is -f "${1}" si
}

# ....................{ GETTERS ~ first                    }....................
# string get_first_file(string filename1, string filename2, ...)
#
# Get the absolute path of the first file in the passed list of filenames that
# exists after resolving symbolic links or raise an exception if no such file
# exists.
get_first_file() {
    get_first_path_matching_glob_qualifiers 'a file' 'files' '-.' "${@}"
}

# string get_first_file_if_found(string filename1, string filename2, ...)
#
# Get the absolute path of the first file in the passed list of filenames that
# exists after resolving symbolic links or return false (but do not raise an
# exception) if no such file exists.
get_first_file_if_found() {
    get_first_path_matching_glob_qualifiers_if_found\
        'a file' 'files' '-.' "${@}"
}

# ....................{ WRITERS ~ makers                   }....................
# void make_file(string filename1, string filename2, ...)
#
# Make all passed files if no such files exist and otherwise raise an exception.
make_file() {
    die_unless_args 'expected at least one filename'

    # While Zeshy enables "noclobber" by default, the current user or context
    # may have re-enabled "clobber". For safety, force "noclobber" locally.
    localize_zsh_options noclobber

    # For each passed file, attempt to make such file without truncating such
    # file if already extant. Since the simplest means of effecting this is to
    # attempt to redirect zero-length output to such file under "noclobber",
    # perform such redirection as the intentional side effect of a noop. While
    # admittedly bizarre, this technique has the advantage of actually working.
    for filename ("${@}") {
        noop > "${1}"
    }
}

# void make_file_safely(string filename1, string filename2, ...)
#
# Make passed files if no such files exist.
make_file_safely() {
    die_unless_args 'expected at least one filename'
    touch -- "${@}"
}

# ....................{ WRITERS ~ removers                 }....................
# void remove_file(string pathname1, string pathname2, ...)
#
# Permanently remove the passed files. If any such file does not exist, throw an
# exception. If interactive and the current user has not reconfigured
# ${ZESHY_RM_OPTIONS_IF_INTERACTIVE[@]} and:
#
# * Only one, two, or three files were passed, confirm each such removal.
# * Four or more files were passed, confirm only the first such removal.
remove_file() {
    die_unless_args 'expected at least one filename'

    list rm; rm=( command rm "${ZESHY_RM_OPTIONS[@]}" )
    if is_interactive; then
        rm+=( "${ZESHY_RM_OPTIONS_IF_INTERACTIVE[@]}" )

        # If the caller passed no more than three files to be deleted, require
        # manual confirmation for each such deletion.
        if is_at_most_three_args
        then "${rm[@]}" -- "${@}"
        # If the caller passed at least four files to be deleted *AND* requests
        # interactive confirmation with option "-i", require only one initial
        # confirmation implicitly covering all deletions with option "-I".
        # Otherwise, delete all passed files without confirmation.
        else "${rm[@]//-i/-I}" -- "${@}"
        fi
    else "${rm[@]}" "${ZESHY_RM_OPTIONS_IF_NON_INTERACTIVE[@]}" -- "${@}"
    fi
}

# void remove_file_if_found(string pathname1, string pathname2, ...)
#
# Permanently remove all passed files that exist, ignoring those that do not.
# See remove_file() for further discussion.
remove_file_if_found() {
    die_unless_args 'expected at least one filename'

    # Filter non-extant paths from the passed paths. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed path.
    # * "(e:...:), excluding paths failing the embedded test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant paths.
#   utter "passed...";  print -l -- ${^@}
#   utter "setting..."; print -l -- ${^@}(e:'[[ -e "${REPLY}" ]]':)
    set_args ${^@}(e:'[[ -e "${REPLY}" ]]':)

    # If any extant paths remain, remove such paths.
    is_args and remove_file "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#We hereafter use "file" to mean plain file.

    # Localize and validate passed arguments.
#   string source_filename="${1}" target_filename="${1}"
#   die_unless_file "${source_filename}"

    # Copy.
#   then "${copy[@]}" "${CP_OPTIONS_IF_INTERACTIVE}" "${source_filename}" "${target_filename}"
#   setopt local_options
#   die_unless_files "${@}"
#   touch -c -- "${@}"

    # List of filenames filtered from the passed list of pathnames. Dismantled,
    # this is:
    #
    # * "${^@}", iteratively expanding to each passed pathname.
    # * "(.)", excluding non-filenames.
#   list filenames; filenames=( ${^@}(.) )

    # If filenames were filtered from the list of passed pathnames, die.
#   (( "${#filenames}" == "${#@}" )) or
#       die "${2:-\"${filename}\" not all found or not all files}"

#   run_quietly ls -- "${@}" or die ''
#           "$(find "${pathname}" -type f -printf '%A@\t%p\n' | sort -r -k1 | head -n1 | cut -f2)"
#
#   readlink --canonicalize-existing "${1}"
# string which_command(string command_name)
#
# If found, get the absolute path to the command with the passed name;
# otherwise, return false. All but the first whitespace-delimited word of this
# string is ignored: e.g.,
#
#     >>> which_command zsh
#     /bin/zsh
#     >>> which_command "zsh -x -o shwordsplit scr"
#     /bin/zsh
#which_command() {
#    die_unless_one_arg 'expected one command name'
#    string command_name="${1[(w)1]}"
#    string command_path="${command_name:c}"
#
#    # If no such command exists, print an error message and return with failure.
#    if is "${command_path:c}" != /* si; then
#        curse "\"${command_name}\" not found"
#        return_false
#    fi
#
#    # Otherwise, print the absolute path of this command.
#    print "${command_path}"
#}

#   if not command_path="$(whence -p "${command_name}")"; then
#
# ....................{ FILENAMES ~ lists                 }....................
# string *get_filenames(string dirname = '')
#
# Return a stringified list of all files in the passed directory or, if no such
# directory was passed, the current working directory. Callers should
# destringify the return value by calling the expand_list() function.
#get_filenames() {
#    die_unless_at_most_one_arg 'expected at most one optional dirname'
#    string dirname="${1:-${PWD}}"
#    die_unless_dir "${dirname}"
#    list filenames; filenames=( "${dirname}"/*(N) )
#    return_list filenames
#}

#      file --mime-encoding "${pathname}" | grep --quiet ': binary$'
#      file --mime-encoding "${pathname}" | grep --quiet --invert-match ': binary$'

#       die "neither \"${user_temporary_dir}\" or \"${root_temporary_dir}\""\
#           "found; no temporary directory found"
#alias -g get_filenames="( *(N) )"

#lias get_next_arg_as='string __tmp__="${1}"; shift; print "${__tmp__}"'
#lias get_next_arg_as='string __tmp__="${1}"; shift; print "${__tmp__}"'
#       filename="$(get_next_arg)"
#       get_next_arg_as filename
