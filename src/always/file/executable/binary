#!/usr/bin/env zsh
# ====================[ binary                             ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Binary, handling executable binaries (e.g., ELF, Mach-O, a.out).

# ....................{ EXCEPTIONS                         }....................
# void die_unless_executable_binary(
#   char *pathname, char *error_message = 'not an executable binary')
#
# Throw an exception unless the passed path is an executable binary.
die_unless_executable_binary() {
    die_unless_one_or_two_args\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_executable_binary "${pathname}" or
        die "${2:-\"${pathname}\" not found or not an executable binary}"
}

# void die_unless_dynamically_linked_executable_binary(
#   char *pathname,
#   char *error_message = 'not a dynamically linked executable binary')
#
# Throw an exception unless the passed path is a dynamically linked executable
# binary.
die_unless_dynamically_linked_executable_binary() {
    die_unless_one_or_two_args\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_dynamically_linked_executable_binary "${pathname}" or
        die "${2:-\"${pathname}\" not found or not a dynamically linked executable binary}"
}

# ....................{ TESTS                              }....................
# bool is_executable_binary(char *pathname)
#
# Return true if the passed path is an executable binary.
is_executable_binary() {
    die_unless_one_arg 'expected one pathname'
    string pathname="${1}"
    is_file "${pathname}" and
        is "$(get_mimetype "${pathname}")" == 'application/x-executable' si
}

# bool is_dynamically_linked_executable_binary(char *pathname)
#
# Return true if the passed path is a dynamically linked executable binary.
is_dynamically_linked_executable_binary() {
    die_unless_one_arg 'expected one pathname'
    string pathname="${1}"
    is_executable_binary "${pathname}" and quietly ldd "${pathname}"
}

# bool is_statically_linked_executable_binary(char *pathname)
#
# Return true if the passed path is a statically linked executable binary.
is_statically_linked_executable_binary() {
    die_unless_one_arg 'expected one pathname'
    string pathname="${1}"
    is_executable_binary "${pathname}" and not quietly ldd "${pathname}"
}

# ....................{ LISTERS                            }....................
# bool list_executable_binary_dependencies(char *filename)
#
# List all shared library dependencies of the passed executable binary if
# dynamically linked; otherwise, throw an exception.
list_executable_binary_dependencies() {
    die_unless_one_arg 'expected one filename'
    string filename="${1}"
    die_unless_dynamically_linked_executable_binary "${filename}"
    ldd -v -- "${filename}"
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
