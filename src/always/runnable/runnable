#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *runnables*, comprising the following types:

* `zsh` aliases (e.g., `return_exit_status`).
* `zsh` functions (e.g., `get_zeshy_version`).
* `zsh` builtins (e.g., `print`).
* `zsh` operators (e.g., `[[`).
* External commands in the current user's ${PATH} (e.g., `ls`), also referred to
  as *pathables*.
-/-

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_runnable(
    string runnable_name,
    string error_message = "\"${runnable_name}\" not a runnable")

Throw an exception with the passed message unless the passed runnable exists.
/---
function die_unless_runnable() {
    die_unless_args_1_to_2\
        'expected one runnable name and optional error message'
    string runnable_name="${1}"
    is_runnable "${runnable_name}" or
        die "${2:-\"${runnable_name}\" not a runnable}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_runnable(string runnable_name)

Return success if the passed *runnable* (i.e., external command or `zsh` alias,
builtin, function, or operator) exists.
/---
function is_runnable() {
    die_unless_arg 'expected one runnable name'
    run_command_silent whence -- "${1}"
}

# ....................{ TESTERS ~ type                     }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_runnable_type_equals(
    string runnable_name, string runnable_type)

Return success if the passed runnable is of the passed type: e.g.,

.is_runnable_type_equals()
==========================================
[source]
------------------------------------------
>>> alias thomas_migley_jr='he who destroys ozone'
>>> is_runnable_type_equals thomas_migley_jr alias and print 'yet lives'
yet lives
------------------------------------------
==========================================
/---
function is_runnable_type_equals() {
    # Validate passed arguments.
    die_unless_args_2 'expected one runnable name and one type'
    string runnable_name="${1}"
    die_unless_runnable "${runnable_name}"

    # If such runnable exists, match such runnable's type.
    is_string_equals "$(get_runnable_type "${runnable_name}")" "${2}"
}

#FIXME: Rename to is_runnable_type_matches().
declare_function_with_stdin <<'/---'
[status: boolean] is_runnable_type_match(
    string runnable_name, string runnable_type)

Return success if the passed runnable's type matches the passed glob: e.g.,

.is_runnable_type_equals()
==========================================
[source]
------------------------------------------
>>> function bergtatt() { output into the mountain chambers; }
>>> is_runnable_type_match bergtatt '[^a]*' and print 'Graablick watches'
Graablick watches
------------------------------------------
==========================================
/---
function is_runnable_type_match() {
    # Validate passed arguments.
    die_unless_args_2 'expected one runnable name and one type glob'
    string runnable_name="${1}"
    die_unless_runnable "${runnable_name}"

    # If such runnable exists, match such runnable's type.
    is_string_glob_matches "$(get_runnable_type "${runnable_name}")" "${2}"
}

# ....................{ TESTERS ~ builtin                  }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_builtin(string builtin_name)

Return success if the passed `zsh` builtin operator exists.
/---
function is_builtin() {
    die_unless_arg 'expected one builtin name'
    is_runnable "${1}" and is_runnable_type_equals "${1}" 'builtin'
}

declare_function_with_stdin <<'/---'
[status: boolean] is_reserved(string reserved_name)

Return success if the passed `zsh` reserved operator exists.
/---
function is_reserved() {
    die_unless_arg 'expected one reserved operator name'
    is_runnable "${1}" and is_runnable_type_equals "${1}" 'reserved'
}

# --------------------( GETTERS                            )--------------------
#FIXME: Rename to get_runnable_type_if_found(). Naturally, consider implementing
#the corresponding get_runnable_type() function calling this function.
declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] string get_runnable_type(string runnable_name)

Get the type of the passed runnable or return failure if no such runnable
exists. If such runnable is:

* A `zsh` alias, this is `alias`.
* A `zsh` function, this is `function`.
* A `zsh` builtin (e.g., `print`), this is `builtin`.
* A `zsh` operator (e.g., `[[`), this is `reserved`.
* An external command in the current user's ${PATH}, this is `command`.

For example:

.get_runnable_type()
==========================================
[source]
------------------------------------------
>>> alias thomas_migley_jr='he who destroys ozone'
>>> get_runnable_type thomas_migley_jr
alias
------------------------------------------
==========================================
/---
function get_runnable_type() {
    # "$(whence -w -- "${1}")" prints strings of the form "${1}: ${object_type}"
    # (e.g., "stonesoup: command"), where "${object_type}" is either "alias",
    # "command", "function", or "none". In the latter case, such command returns
    # non-zero exit status implicitly throwing an exception.
    die_unless_arg 'expected one runnable name'
    return_string "${"$(whence -w -- "${1}")"##*: }"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to is_runnable_type_equals_equals(). The current function name suggests
#an equally valid but completely different function accepting one string
#matching "function", "alias", "command", etc.

#   {
#       string true_type; true_type="$(get_runnable_type "${runnable_name}")"
#       is "${test_type}" == "${true_type}" si
#   }
    # Validate passed arguments.
#   string object_type; object_type="$(whence -w -- "${1}")"
#   print_string "${object_type##*: }"
# Inspect runnable names, types, values, and related metadata. Runnables are run
# when in command position (i.e., when the first shell word of a command line),
# comprising the following types:
#   is $(whence -w "${1}") == *': (alias|builtin|function)' si
#   string builtin_name="${1}"
#   is_runnable "${builtin_name}" and {
#       string type; type="$(get_runnable_type "${builtin_name}")"
#       "$(whence -w -- "${1}")" == *': builtin' si
#   }
