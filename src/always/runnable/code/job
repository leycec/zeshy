#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *job-specific evaluations* (i.e., strings executed as commands in a
manner modifying the job status of such execution).
-/-

#FIXME: Add examples.

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: integer] run_code_in_background(
   string code1, string code2, ...)

Run the passed code in the background of the current shell, printing such code's
standard output and error and returning such code's exit status.
/---
function run_code_in_background() {
    die_unless_args 'Expected one or more code strings.'
    run_code "${@}" &
}

# ....................{ RUNNERS ~ disown                   }....................
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: integer] run_code_disowned(
    string code1, string code2, ...)

Run the passed code disowned from the current shell, printing such code's
standard output and error and returning such code's exit status. Disownment
guarantees such code's process to :

* _Not_ be listed in the jobs table for the current shell.
* _Not_ receive the HUP signal and hence _not_ be terminated on termination of
  the current shell.

While GUI applications divorced from the CLI make good candidates for shell
disownment, most CLI applications do _not_. Exceptions include headless CLI
daemons and servers.
/---
function run_code_disowned() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with run_command_disowned().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # For safety, run disowned commands in new subshells. While negligibly
    # expensive, this avoids subtle termination issues associated with process
    # substitution of temporary files: e.g.,
    #
    #     # Hideous. This captures 64 random strings into a temporary file and
    #     # prints such file as a disowned job. What now? Let me tell you what
    #     # now. No shell owns such job and hence deletes such file after job
    #     # completion, resulting in gradual file accumulation.
    #     run cat =(head -64 /dev/urandom) &!
    #
    #     # Beautiful. This performs the same task in a new subshell as a
    #     # disowned job. While disowned, some subshell owns such job and hence
    #     # deletes such file after job completion.
    #     (run cat =(head -64 /dev/urandom)) &!
    die_unless_args 'Expected one or more code strings.'
#   output_string "running disowned: ${@}"
    ( run_code "${@}" ) &!
}

declare_function_with_stdin <<'/---'
[stdout: string, status: integer] run_command_disowned(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command disowned from the current shell, printing such command's
standard output and error and returning such command's exit status. Unlike
run_code_disowned(), this function expands such command statically rather
than evaluating such command dynamically and hence does _not_ require command
arguments to be manually quote-protected (e.g., with parameter expansion flag
`(q)`). Since arguments interactively entered by the current user should _not_
need to be explicitly quote-protected, this function is more appropriate than
run_code_disowned() for interactive use -- particularly, CLI alias use. See
run_code_disowned() for further details.
/---
function run_command_disowned() {
    # See run_code_disowned() for further details.
    die_unless_args 'Expected one command and optional arguments.'
    ( "${@}" ) &!
}

# --------------------( WASTELANDS                         )--------------------
#. While limiting, such expansion has the
#advantage of _not_ requiring command arguments to be quote-protected from
#dequoting performed by eval(). Since arguments interactively entered by the
#current user should _not_ need to be explicitly quote-protected, this function
#is more appropriate than run_code_disowned() for .
#. See run_code_disowned() for further details.
#
#While limited to running only a single
#command, 
