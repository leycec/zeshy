#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *command prioritization* (i.e., execution of commands under user-defined
CPU- and/or I/O-based process priorities).
/---

#FIXME: Actually, such functions are *ONLY* capable of reprioritizing external
#commands. Sadly, there exists no zsh builtin for reprioritizing arbitrary zsh
#code, implying the entire needs to be moved to a new @{runnable/command} parcel
#for similar functions and all functions below renamed from ":run_code_" to
#":run_command_".

# ....................{ GLOBALS ~ nice                     }....................
declare_global_with_stdin integer ZESHY_NICE_PRIORITY_LOW=19 <<'/---'
`nice`-specific lowest priority for CPU-based process scheduling.
/---

declare_global_with_stdin integer ZESHY_NICE_PRIORITY_HIGH=-20 <<'/---'
`nice`-specific highest priority for CPU-based process scheduling.
/---

# ....................{ GLOBALS ~ ionice                   }....................
declare_global_with_stdin integer ZESHY_IONICE_CLASS_IDLE_ONLY=3 <<'/---'
`ionice`-specific lowest priority class for I/O-based process scheduling. The
kernel schedules processes assigned to such class on an idle-only basis (i.e.,
only if no other process demands I/O). Such processes are likely to suffer
resource starvation and hence appropriate only for background daemons.
/---

declare_global_with_stdin integer ZESHY_IONICE_CLASS_BEST_EFFORT=2 <<'/---'
`ionice`-specific default priority class for I/O-based process scheduling.
Assigning processes other priority classes either induces resource starvation
(e.g., under both ${ZESHY_IONICE_CLASS_IDLE_ONLY} and
${ZESHY_IONICE_CLASS_REAL_TIME}) or is prohibited to non-superusers (e.g., under
${ZESHY_IONICE_CLASS_REAL_TIME}). Most process should be assigned to this
default priority class.
/---

declare_global_with_stdin integer ZESHY_IONICE_CLASS_REAL_TIME=1 <<'/---'
`ionice`-specific highest priority class for I/O-based process scheduling. The
kernel schedules processes assigned to such class on a realtime basis (i.e.,
first in the scheduling queue, regardless of whether another process demands
I/O). Such processes may impose resource starvation on other processes and are
hence appropriate only for core foreground tasks.
/---

declare_global_with_stdin integer ZESHY_IONICE_PRIORITY_LOW=7 <<'/---'
`ionice`-specific lowest subclass priority for I/O-based process scheduling,
ranging from 0 to 7. Process assigned to class ${ZESHY_IONICE_CLASS_IDLE_ONLY}
ignore such priority; all other classes accept such priority.
/---

declare_global_with_stdin integer ZESHY_IONICE_PRIORITY_HIGH=0 <<'/---'
`ionice`-specific highest subclass priority for I/O-based process scheduling,
ranging from 0 to 7. Process assigned to class ${ZESHY_IONICE_CLASS_IDLE_ONLY}
ignore such priority; all other classes accept such priority.
/---

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'/---'
string :run_code_with_priority_highest(string code1, ...)

Run the passed code under the highest possible CPU and I/O priorities and hence
qualitatively ``faster'' than conventional commands. To avoid entirely starving
other commands of I/O access, such command is run under best effort I/O
scheduling. See ${ZESHY_IONICE_CLASS_BEST_EFFORT} for further details.
/---
function :run_code_with_priority_highest() {
    die_unless_args 'Expected one or more shell words.'
    :run_code_with_priorities_nice_and_ionice\
        "${@}"\
        ${ZESHY_NICE_PRIORITY_HIGH}\
        ${ZESHY_IONICE_CLASS_BEST_EFFORT}\
        ${ZESHY_IONICE_PRIORITY_HIGH}
}

declare_function_with_stdin <<'/---'
string :run_code_with_priority_lowest(string code1, ...)

Run the passed code under the lowest possible CPU and I/O priorities and hence
qualitatively ``slower'' than conventional commands. To avoid entirely starving
such command of I/O access, such command is run under best effort I/O
scheduling. See ${ZESHY_IONICE_CLASS_BEST_EFFORT} for further details.
/---
function :run_code_with_priority_lowest() {
    die_unless_args 'Expected one or more shell words.'
    :run_code_with_priorities_nice_and_ionice\
        "${@}"\
        ${ZESHY_NICE_PRIORITY_LOW}\
        ${ZESHY_IONICE_CLASS_BEST_EFFORT}\
        ${ZESHY_IONICE_PRIORITY_LOW}
}

declare_function_with_stdin <<'/---'
string :run_code_with_priorities_nice_and_ionice(
    string code1, ...,
    int nice_priority,
    int ionice_class, integer ionice_class_priority)

Run the passed code under the passed `nice` priority as well as the passed
`ionice` priorities if `ionice` is pathable.
/---
function :run_code_with_priorities_nice_and_ionice() {
    # Validate passed arguments. Since *nix assigns lower priorities higher
    # integer constants, testing ranges is somewhat unintuitive.
    die_unless_args_4_or_more\
        'Expected one or more shell words, one nice priority, one ionice class, and one ionice class priority.'
    :string\
        nice_priority="${@[-3]}"\
        ionice_class="${@[-2]}"\
        ionice_class_priority="${@[-1]}"
    :list priority_command
    die_unless_integer_in_range "${nice_priority}"\
        "${ZESHY_NICE_PRIORITY_HIGH}" "${ZESHY_NICE_PRIORITY_LOW}"
    die_unless_integer_in_range "${ionice_class}"\
        "${ZESHY_IONICE_CLASS_REAL_TIME}" "${ZESHY_IONICE_CLASS_IDLE_ONLY}"
    die_unless_integer_in_range "${ionice_class_priority}"\
        "${ZESHY_IONICE_PRIORITY_HIGH}" "${ZESHY_IONICE_PRIORITY_LOW}"
    pop_args_3

    # Command line to be run, prefixed by commands prioritizing the passed
    # command. All systems provide "nice" but not necessarily "ionice".
    priority_command=( nice -n${nice_priority} )
    if { is_pathable ionice } {
        priority_command+=( ionice
            -c${ionice_class}
            -n${ionice_class_priority}
        )
    }

    # If the first such shell word is "command", silently ignore such word.
    # "nice" and "ionice" are external commands and hence incapable of
    # processing zsh-specific builtins (i.e., command()).
    if is "${1}" == 'command' si {
        shift_arg
    }

    # Run such line.
    # print "running prioritied command: ${priority_command[@]} ${@}" 1>&2
    run_code "${priority_command[@]}" "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to run_code_with_priority() and reorder arguments, accepting such
#command prior to such integers.
#integer_global_export\
#    ZESHY_NICE_PRIORITY_LOW\
#    ZESHY_NICE_PRIORITY_HIGH\
#    ZESHY_IONICE_CLASS_LOW\
#    ZESHY_IONICE_CLASS_HIGH\
#    ZESHY_IONICE_PRIORITY_LOW\
#    ZESHY_IONICE_PRIORITY_HIGH
