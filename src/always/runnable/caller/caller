#!/usr/bin/env zsh
# ====================[ caller                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle callers (i.e., functions or scripts calling the current function or
# script).

# ....................{ EXCEPTIONS                         }....................
document_function '
void die_unless_caller_equals(
  string caller_name,
  string error_message = "\"${caller_name}\" not the caller")

Throw an exception with the passed message unless the name of the function or
script calling the function or script calling this function is the passed name.
See is_caller_equals() for further details.
'
function die_unless_caller_equals() {
    # Validate passed arguments.
    die_unless_args_1_to_2\
        'expected one caller name and optional error message'
    string caller_name="${1}"

    # Test such name. Avoid calling is_caller_equals().
    (( ${#funcstack} >= 3 )) and is "${funcstack[3]}" == "${caller_name}" si or
        die "${2:-\"${caller_name}\" not the caller}"
}

# ....................{ TESTERS                            }....................
document_function '
boolean is_caller(void)

Return true if the current call stack contains at least one function or script,
excluding the most recent calls to this function and this function''s caller.
This function returns true *UNLESS* called directly from the command line or by
a function or script called directly from the command line: e.g.,

    >>> is_caller or
    ...     print_string "for I saw the last known landscape destroyed for"
    for I saw the last known landscape destroyed for
'
function is_caller() {
    # ${funcstack[1]} is always "is_caller", ${funcstack[2]} the name of the
    # function or script calling this function, and ${funcstack[3]} that of the
    # function or script calling the function or script calling this function
    # (i.e., the desired caller), if such function or script exists. Test for
    # the latter. Avoid calling get_list_size(), which increments the size of
    # such stack.
    die_if_args
    (( ${#funcstack} >= 3 ))
}

document_function '
void is_caller_equals(string caller_name)

Return true if the name of the function or script calling the function or script
calling this function is the passed name.
'
function is_caller_equals() {
    # Validate passed arguments.
    die_unless_arg 'expected one caller name'
    string caller_name="${1}"

    # Test such name. Avoid calling is_caller(), get_caller_name(), or
    # is_string_equals().
    (( ${#funcstack} >= 3 )) and is "${funcstack[3]}" == "${caller_name}" si
}

# ....................{ GETTERS                            }....................
document_function '
boolean get_caller_name(void)

Get the name of the function or script calling the function or script calling
this function. If no such function or script exists (i.e., this function was
called directly from the command line or by a function or script called directly
from the command line), throw an exception. This function returns the correct
name when called from a subshell capturing output by process substitution: e.g.,

    >>> function timbered() { choir }
    >>> function choir() { print_string "caller: $(get_caller_name)()" }
    >>> timbered
    caller: timbered()
'
function get_caller_name() {
    # Validate sanity. Avoid calling die_unless_caller().
    die_if_args
    (( ${#funcstack} >= 3 )) or
        die 'no caller as called directly from the command line'

    # Get such name.
    print_string "${funcstack[3]}"
}

# --------------------( WASTELANDS                         )--------------------
