#!/usr/bin/env zsh
# ====================[ redirect                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle command output redirection (e.g., to standard error or file).

# ....................{ RUNNERS ~ silent                   }....................
document_function '
void run_silently(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command quietly (i.e., squelching output).
'
function run_silently() {
    run "${@}" &>/dev/null
}

document_function '
string run_silently_and_get_exit_status(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command quietly (i.e., squelching output) and get the exit
status of such command: e.g.,

    >>> run_silently_and_get_exit_status grep "*" /no/such/path/exists
    2
'
function run_silently_and_get_exit_status() {
    run_silently "${@}" | get_exit_status
}

document_function '
string run_silently_and_get_exit_status_boolean(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command quietly (i.e., squelching output) and, if exiting
with zero exit status, print_string "1"; otherwise, print_string nothing: e.g.,

    >>> boolean IS_MUTT_INSTALLED=$(\
    ...     run_silently_and_get_exit_status_boolean mutt)
    >>> is_boolean_true "${IS_MUTT_INSTALLED}" and print_string \"mutt\" is here
    "mutt" is here
'
function run_silently_and_get_exit_status_boolean() {
    if run_silently "${@}"
    then return_string 1
    else return_true
    fi
}

# ....................{ RUNNERS ~ standard                 }....................
document_function '
string run_to_standard_output(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command, redirecting standard error to output.
'
function run_to_standard_output() {
    run "${@}" 2>&1
}

document_function '
string run_to_standard_error(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command, redirecting standard output to error.
'
function run_to_standard_error() {
    run "${@}" 1>&2
}

# ....................{ RUNNERS ~ file                     }....................
document_function '
void run_to_file(
  string command_name, string command_arg1, string command_arg2, ...,
  string filename)

Run the passed command, redirecting both standard output and error to the passed
file by overwriting such file with such output.
'
function run_to_file() {
    # Validate passed arguments.
    die_unless_args_2_or_more 'expected one command and one filename'
    string filename="${@[-1]}"
    die_unless_file_plain_or_not_path "${filename}"
    curtail_arg

    # Run such command.
    run "${@}" >&!"${filename}"
}

document_function '
void run_to_file_from_standard_output(
  string command_name, string command_arg1, string command_arg2, ...,
  string filename)

Run the passed command, redirecting standard output but not error to the passed
file by overwriting such file with such output.
'
function run_to_file_from_standard_output() {
    # Validate passed arguments.
    die_unless_args_2_or_more 'expected one command and one filename'
    string filename="${@[-1]}"
    die_unless_file_plain_or_not_path "${filename}"
    curtail_arg

    # Run such command.
    run "${@}" >!"${filename}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to run_silently_output_exit_status().
#FUXME: Rename run_redirecting_to_*() to run_redirected_to_*() everywhere below.
#Actually, how about just run_output_*().
