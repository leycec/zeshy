#!/usr/bin/env zsh
# ====================[ progress                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Run commands with visual progress indicators.

# ....................{ RUNNERS                            }....................
#FIXME: Shouldn't this be run_with_progress_bar()? Much more intelligible, and
#straight forward. Or perhaps "run_with_progress_indicator()", which seems a
#bit more agnostic to the output indicator.
document_function '
string run_with_progress_timer(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command, printing a progress timer on standard error displaying
how many seconds have elapsed since running such command. Consider calling
this function on silent and/or slow commands (e.g., "ntpd -q -s",
synchronizing the local system time against remote time servers but displaying
no progress while doing so).
'
function run_with_progress_timer() {
    # Validate passed arguments.
    die_unless_args 'expected one command'

    #FIXME: If "pv" is *NOT* installed, are there any respectable alternatives?
    #Surely we could cobble together a weak pure-zsh solution, no? I wonder if
    #anything similar's been done in bash, actually...

    # Prefer "pv", the pipe viewer.
    if is_pathable pv
    then run "${*} | pv -t"
#   then print "progress_time: ${@}"; run "${@} | pv -t"
    # Otherwise, simply run the passed command.
    else run "${@}"
    fi
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: This component's getting a bit long in the tooth. Contemplate shifting
#such functions to "os/time/run".
