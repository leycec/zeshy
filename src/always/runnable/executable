#!/usr/bin/env zsh
# ====================[ executable_binary                  ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle executable binaries (e.g., ELF, Mach-O, a.out).

# ....................{ EXCEPTIONS                         }....................
declare_function '
void die_unless_executable(
  string pathname,
  string error_message = "\"${pathname}\" not an executable binary")

Throw an exception with the passed message unless the passed path is an existing
executable binary.
'
function die_unless_executable() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_executable "${pathname}" or
        die "${2:-\"${pathname}\" not found or not an executable binary}"
}

# ....................{ EXCEPTIONS ~ linkage               }....................
declare_function '
void die_unless_executable_linked_dynamically(
  string pathname,
  string error_message = "\"${pathname}\" not found or not a dynamically linked executable")

Throw an exception with the passed message unless the passed path is an existing
dynamically linked executable binary (i.e., is not an executable binary or is
but is statically linked).
'
function die_unless_executable_linked_dynamically() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_executable_linked_dynamically "${pathname}" or
        die "${2:-\"${pathname}\" not found or not a dynamically linked executable}"
}

declare_function '
void die_unless_executable_linked_statically(
  string pathname,
  string error_message = "\"${pathname}\" not found or not a statically linked executable")

Throw an exception with the passed message unless the passed path is an existing
statically linked executable binary (i.e., is not an executable binary or is
but is statically linked).
'
function die_unless_executable_linked_statically() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_executable_linked_statically "${pathname}" or
        die "${2:-\"${pathname}\" not found or not a statically linked executable}"
}

# ....................{ TESTERS                            }....................
declare_function '
boolean is_executable(string pathname)

Return true if the passed path is an executable binary.
'
function is_executable() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_file "${pathname}" and
        is "$(get_file_mimetype "${pathname}")" == 'application/x-executable' si
}

declare_function '
boolean is_executable_linked_dynamically(string pathname)

Return true if the passed path is a dynamically linked executable binary.
'
function is_executable_linked_dynamically() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_executable "${pathname}" and run_command_silent ldd "${pathname}"
}

declare_function '
boolean is_executable_linked_statically(string pathname)

Return true if the passed path is a statically linked executable binary.
'
function is_executable_linked_statically() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_executable "${pathname}" and not run_command_silent ldd "${pathname}"
}

# ....................{ PRINTERS                           }....................
declare_function '
string print_executable_linked_dynamically(string filename)

List all shared library dependencies of the passed dynamically linked
executable. If such executable is not dynamically linked, throw an exception.
'
function print_executable_linked_dynamically() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"
    die_unless_executable_linked_dynamically "${filename}"

    # Print such executable.
    ldd -v -- "${filename}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename "_executable" to "_binary_executable" everywhere,
#including this filename. :)
#FUXME: Actually, pretty much all of the nomenclature in this component is
#subpar. Revisit in earnest when time permits.

#FUXME: Rename this component to "runnable_binary".
