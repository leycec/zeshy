#!/usr/bin/env zsh
# ====================[ shebang                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle shell script shebang lines (e.g., "#!/usr/bin/env").

# ....................{ GETTERS ~ shebang                  }....................
document_function '
string get_shell_script_shebang_line_if_found(string filename)

Get the first line of the passed shell script if such line is prefixed with "#!"
or return false otherwise: e.g.,

    >>> get_shell_script_shebang_line_if_found "/etc/zsh/zshrc"
    #!/usr/bin/env zsh
'
function get_shell_script_shebang_line_if_found() {
    # Validate passed arguments. Avoid calling die_unless_shell_script(), which
    # transitively calls this function.
    die_unless_arg 'expected one filename'
    string filename="${1}" shebang_line
    die_unless_file_text "${filename}"

    # If such file's first line is a shebang, get such line. For efficiency,
    # avoid splitting file contents into lines or copying such contents between
    # Zeshy functions; rather, glob all characters up to but not including the
    # first newline of such contents. Dismantled, this is:
    #
    # * "(#b)", capturing the shebang line if matched to ${match[1]}.
    # * "\#!", matching the canonical shebang line prefix.
    # * "[^${ZESHY_CHARACTER_NEWLINE}]#", matching the remaining shebang line.
    if run_with_mapfile "is \"\${mapfile[\${filename}]}}\" ==\
        (#b)(\#![^${ZESHY_CHARACTER_NEWLINE}]#)* si"
    then print_string "${match[1]}"
    else return_false
    fi
}

document_function '
string get_shell_script_shebang_command_name_if_found(string filename)

Get the command name of the shebang line in the passed shell script if such
script contains such a line or return false. If the first word of such line
is either "/bin/env" or "/usr/bin/env", the command name is the second word of
such line (e.g., the "mercy" in "#!/usr/bin/env mercy fields"); otherwise, the
command name is the basename of the first word of such line (e.g., the
"nephilim" in "#!/bin/nephilim sisters"): e.g.,

    >>> get_shell_script_shebang_command_name_if_found "/etc/zsh/zshrc"
    zsh
'
function get_shell_script_shebang_command_name_if_found() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string shebang_line

    # If such script contains a shebang line, get such line's command name.
    # Since this function is transitively called before the remainder of the
    # Zeshy codebase, avoid calling conventional Zeshy functions (e.g.,
    # print_string(), get_path_basename()).
    if shebang_line="$(get_shell_script_shebang_line_if_found "${1}")"; then
        # Split such shebang line into words, ignoring the canonical shebang
        # line prefix (i.e., "#!").
        list shebang_words
        set_list_to_string_split_on_words shebang_words "${shebang_line[3,-1]}"

        # Get the basename of the first such word.
        string command_name="$(get_path_basename "${shebang_words[1]}")"

        # If such basename is "env", the command name is the following word.
        if is "${command_name}" == 'env' si
        then print_string "${shebang_words[2]}"
        # Otherwise, such basename is the command name.
        else print_string "${command_name}"
        fi
    else return_false
    fi
}

# ....................{ GETTERS ~ zsh                      }....................
document_function '
void get_zsh_shebang_line(void)

Get the canonical shebang line for zsh scripts: e.g.,

    >>> get_zsh_shebang_line
    #!/usr/bin/env zsh
'
function get_zsh_shebang_line() {
    # Validate sanity.
    die_if_args

    # Absolute path of external command "env". By precedent, most *nix
    # distributions install the command under "/usr/bin". Nonetheless, recent
    # attempts to unify "/" and "/usr" within the FLOSS community (...their
    # names shall remain nameless: *cough* Poettering *cough*) suggest this may
    # not always be the case everywhere. Just cover our bases will belong, here.
    string env_path; env_path="$(get_pathable_path env)"
    print_string "#!${env_path} zsh"
}

# --------------------( WASTELANDS                         )--------------------
