#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle shell script *shebang lines* (i.e., the first lines of such scripts, if
prefixed by `#!`).
-/-

# ....................{ GETTERS ~ shebang                  }....................
declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] get_shell_script_shebang_line_if_found(
    string filename)

Get the first line of the passed shell script if such line is prefixed with `#!`
or return failure otherwise: e.g.,

.get_shell_script_shebang_line_if_found()
==========================================
[source]
------------------------------------------
>>> get_shell_script_shebang_line_if_found "/etc/zsh/zshrc"
#!/usr/bin/env zsh
------------------------------------------
==========================================
/---
function get_shell_script_shebang_line_if_found() {
    # Validate passed arguments. Avoid calling die_unless_shell_script(), which
    # transitively calls this function.
    die_unless_arg 'expected one filename'
    string filename="${1}" shebang_line
    die_unless_file_text "${filename}"

    # If such file's first line is a shebang, get such line. For efficiency,
    # avoid splitting file contents into lines or copying such contents between
    # Zeshy functions; rather, glob all characters up to but not including the
    # first newline of such contents. Dismantled, this is:
    #
    # * "(#b)", capturing the shebang line if matched to ${match[1]}.
    # * "\#!", matching the canonical shebang line prefix.
    # * "[^${ZESHY_ASCII_NEWLINE}]#", matching the remaining shebang line.
    load_module_mapfile
    {
        if is "${mapfile[${filename}]}}" ==\
            (#b)(\#![^${ZESHY_ASCII_NEWLINE}]#)* si {
            return_string "${match[1]}"
        } else {
            return_false
        }
    # Happily, zsh correctly evaluates "always" blocks prior to returning.
    } always {
        unload_module_mapfile
    }
}

declare_function_with_stdin <<'/---'
[stdout: string, status: boolean]
    get_shell_script_shebang_command_name_if_found(string filename)

Get the command name of the shebang line in the passed shell script if such
script contains such a line or return failure otherwise. Specifically:

* If the first word of such line is either `/bin/env` or `/usr/bin/env`, the
  command name is the second word of such line (e.g., the `mercy` in
  `#!/usr/bin/env mercy fields`).
* Else, the command name is the basename of the first word of such line (e.g.,
  the `nephilim` in `#!/bin/nephilim sisters`).

For example:

.get_shell_script_shebang_command_name_if_found()
==========================================
[source]
------------------------------------------
>>> get_shell_script_shebang_command_name_if_found "/etc/zsh/zshrc"
zsh
------------------------------------------
==========================================
/---
function get_shell_script_shebang_command_name_if_found() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string shebang_line

    # If such script contains a shebang line, get such line's command name.
    # Since this function is transitively called before the remainder of the
    # Zeshy codebase, avoid calling conventional Zeshy functions (e.g.,
    # print_string(), get_path_basename()).
    if { shebang_line="$(get_shell_script_shebang_line_if_found "${1}")" } {
        # Split such shebang line into words, ignoring the canonical shebang
        # line prefix (i.e., "#!").
        list shebang_words
        set_list_to_string_words shebang_words "${shebang_line[3,-1]}"

        # Get the basename of the first such word.
        string command_name
        command_name="$(get_path_basename "${shebang_words[1]}")"

        # If such basename is "env", the command name is the following word.
        if is "${command_name}" == 'env' si {
            return_string "${shebang_words[2]}"
        # Otherwise, such basename is the command name.
        } else {
            return_string "${command_name}"
        }
    } else {
        return_false
    }
}

# --------------------( WASTELANDS                         )--------------------
#   if run_code_with_mapfile "is \"\${mapfile[\${filename}]}}\" ==\
#       (#b)(\#![^${ZESHY_ASCII_NEWLINE}]#)* si"
#   then print_string "${match[1]}"
#   else return_false
#   fi
