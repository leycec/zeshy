#!/usr/bin/env zsh
# ====================[ executable_binary                  ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle executable binaries (e.g., ELF, Mach-O, a.out).

#FIXME: Rename "_executable_binary" to "_binary_executable" everywhere,
#including this filename. :)
#FIXME: Actually, pretty much all of the nomenclature in this component is
#subpar. Revisit in earnest when time permits.

# ....................{ EXCEPTIONS                         }....................
document_function '
void die_unless_executable_binary(
  string pathname,
  string error_message = "\"${pathname}\" not an executable binary")

Throw an exception unless the passed path is an executable binary.
'
function die_unless_executable_binary() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_path_executable_binary "${pathname}" or
        die "${2:-\"${pathname}\" not found or not an executable binary}"
}

#FIXME: Rename to die_unless_executable_binary_dynamically_linked().
document_function '
void die_unless_dynamically_linked_executable_binary(
  string pathname,
  string error_message = "\"${pathname}\" not a dynamically linked executable binary")

Throw an exception unless the passed path is a dynamically linked executable
binary (i.e., is not an executable binary or is but is statically linked).
'
function die_unless_dynamically_linked_executable_binary() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_dynamically_linked_executable_binary "${pathname}" or
        die "${2:-\"${pathname}\" not found or not a dynamically linked executable binary}"
}

# ....................{ TESTERS                            }....................
document_function '
boolean is_path_executable_binary(string pathname)

Return true if the passed path is an executable binary.
'
function is_path_executable_binary() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_file "${pathname}" and
        is "$(get_file_mimetype "${pathname}")" == 'application/x-executable' si
}

document_function '
boolean is_dynamically_linked_executable_binary(string pathname)

Return true if the passed path is a dynamically linked executable binary.
'
function is_dynamically_linked_executable_binary() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_path_executable_binary "${pathname}" and run_silently ldd "${pathname}"
}

document_function '
boolean is_statically_linked_executable_binary(string pathname)

Return true if the passed path is a statically linked executable binary.
'
function is_statically_linked_executable_binary() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_path_executable_binary "${pathname}" and not run_silently ldd "${pathname}"
}

# ....................{ PRINTERS                           }....................
document_function '
string print_executable_binary_dependencies(string filename)

List all shared library dependencies of the passed executable binary if
dynamically linked; otherwise, throw an exception.
'
function print_executable_binary_dependencies() {
    die_unless_arg 'expected one filename'
    string filename="${1}"
    die_unless_dynamically_linked_executable_binary "${filename}"
    ldd -v -- "${filename}"
}

# --------------------( WASTELANDS                         )--------------------
#FIXME: Rename this component to "runnable_binary".
