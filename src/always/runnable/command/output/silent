#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *silent commands* (i.e., commands whose standard output and/or error is
redirected to the bit bucket and hence ``squelched'').
-/-

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'/---'
[status: integer] run_command_silent(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command *silently* (i.e., squelching standard output and error).
/---
function run_command_silent() {
    run_command "${@}" &>/dev/null
}

declare_function_with_stdin <<'/---'
[stderr: string, status: integer] run_command_silent_stdout(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command, silencing standard output but _not_ error. Preserving
standard error preserves warnings and errors.
/---
function run_command_silent_stdout() {
    run_command "${@}" 1>/dev/null
}

declare_function_with_stdin <<'/---'
[stdout: string, status: integer] run_command_silent_stderr(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command, silencing standard error but _not_ output. Preserving
standard output silences only warnings and errors.
/---
function run_command_silent_stderr() {
    run_command "${@}" 2>/dev/null
}

# ....................{ GETTERS                            }....................
#FIXME: Improve examples.
declare_function_with_stdin <<'/---'
integer run_command_silent_and_get_exit_status(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command *silently* (i.e., squelching standard output and error)
and return the exit status of such command: e.g.,

.run_command_silent_and_get_exit_status()
==========================================
[source]
------------------------------------------
>>> run_command_silent_and_get_exit_status 'grep "*" /no/such/path/exists'
2
------------------------------------------
==========================================
/---
function run_command_silent_and_get_exit_status() {
    run_command_silent "${@}" and get_exit_status
}

declare_function_with_stdin <<'/---'
boolean run_command_silent_and_get_exit_status_boolean(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command *silently* (i.e., squelching standard output and error)
and return the exit status of such command converted into a boolean value.
Specifically, if such command:

* Succeeds (i.e., returns zero exit status), return ${ZESHY_BOOLEAN_TRUE}.
* fails (i.e., returns nonzero exit status), return ${ZESHY_BOOLEAN_FALSE}.

For example:

.run_command_silent_and_get_exit_status_boolean()
==========================================
[source]
------------------------------------------
>>> boolean IS_MUTT_PATHABLE=$(\
...     run_command_silent_and_get_exit_status_boolean is_pathable mutt)
>>> (( IS_MUTT_PATHABLE )) and print_string '"mutt" installed'
"mutt" installed
------------------------------------------
==========================================
/---
function run_command_silent_and_get_exit_status_boolean() {
    if { run_command_silent "${@}" } {
        return_string "${ZESHY_BOOLEAN_TRUE}"
    } else {
        return_string "${ZESHY_BOOLEAN_FALSE}"
    }
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void run_command_silent_and_set_string_to_stdout(
    string command_name, string command_arg1, string command_arg2, ...,
    string string_name)

Run the passed command *silently* (i.e., squelching standard output and error)
and set the passed string variable to all standard output (but _not_ error) from
such command: e.g.,

.run_command_silent_and_set_string_to_stdout()
==========================================
[source]
------------------------------------------
>>> string on_dominance on_consumerism=\
...    "\"Morning, sir or madam or neuter,\" the thing said. \"This your planet,
...     is it?"
...     The other alien, which was stubby and green, had wandered off into the
...     woods by the side of the road. Out of the corner of his eye Newt saw it
...     kick a tree, and then run a leaf through some complicated gadget on its
...     belt. It didn't look very pleased.
...     \"Well, yes. I suppose so,\" he said.
...     The toad stared thoughtfully at the skyline.
...     \"Had it long, have we, sir?\" it said.
...     \"Er. Not personally. I mean, as a species, about half a million years.
...     I think.\"
...     The alien exchanged glances with its colleague. \"Been letting the old
...     acid rain build up, haven't we, sir?\" it said. \"Been letting ourselves
...     go a bit with the old hydrocarbons, perhaps?\"
...     \"I'm sorry?\"
...     \"Could you tell me your planet's albedo, sir?\" said the toad, still
...     staring levelly at the horizon as though it was doing something
...     interesting.
...     \"Er. No.\"
...     \"Well, I'm sorry to have to tell you, sir, that your polar ice caps are
...     below regulation size for a planet of this category, sir.\"
...     \"Oh, dear,\" said Newt. He was wondering who he could tell about this,
...     and realizing that there was absolutely no one who would believe him.
...     The toad bent closer. It seemed to be worried about something, insofar
...     as Newt was any judge of the expressions of an alien race he'd never
...     encountered before.
...     \"We'll overlook it on this occasion, sir...\"
...     Newt stuck his head out of the window.
...     \"Thank you!\"
...     The small alien walked past the car.
...     \"C02 level up 0.5 percent,\" it rasped, giving him a meaningful look.
...     \"You do know you could find yourself charged with being a dominant
...     species while under the influence of impulse-driven consumerism, don't
...     you?\""
>>> run_command_silent_and_set_string_to_stdout\
...     'get_string_line "${on_consumerism}" 1' on_dominance
>>> print_string "${on_dominance}"
"Morning, sir or madam or neuter," the thing said. "This your planet,
------------------------------------------
==========================================
/---
function run_command_silent_and_set_string_to_stdout() {
    # Validate passed arguments.
    die_unless_args_2_or_more 'expected one command and one string name'
    string string_name__rcassto="${@[-1]}"
    pop_arg

    # Run such command and set such string.
    run_command "${@}" 2>/dev/null |
        set_string_to_stdin_pipe "${string_name__rcassto}"
}

declare_function_with_stdin <<'/---'
void run_command_silent_and_set_string_to_stderr(
    string command_name, string command_arg1, string command_arg2, ...,
    string string_name)

Run the passed command *silently* (i.e., squelching standard output and error)
and set the passed string variable to all standard error (but _not_ output) from
such command: e.g.,

.run_command_silent_and_set_string_to_stderr()
==========================================
[source]
------------------------------------------
>>> string on_responsibility on_submission=\
...    "Let's pretend for a moment that work doesn't turn people into stultified
...     submissives. Let's pretend, in defiance of any plausible psychology and
...     the ideology of its boosters, that it has no effect on the formation of
...     character. And let's pretend that work isn't as boring and tiring and
...     humiliating as we all know it really is. Even then, work would still
...     make a mockery of all humanistic and democratic aspirations, just
...     because it usurps so much of our time. Socrates said that manual
...     laborers make bad friends and bad citizens because they have no time to
...     fulfill the responsibilities of friendship and citizenship. He was
...     right. Because of work, no matter what we do we keep looking at our
...     watches. The only thing \"free\" about so-called free time is that it
...     doesn't cost the boss anything. Free time is mostly devoted to getting
...     ready for work, going to work, returning from work, and recovering from
...     work. Free time is a euphemism for the peculiar way labor as a factor of
...     production not only transports itself at its own expense to and from the
...     workplace but assumes primary responsibility for its own maintenance and
...     repair. Coal and steel don't do that. Lathes and typewriters don't do
...     that. But workers do. No wonder Edward G. Robinson in one of his
...     gangster movies exclaimed, \"Work is for saps!\""
>>> run_command_silent_and_set_string_to_stderr\
...     'get_string_line "${on_submission}" 1 1>&2' on_responsibility
>>> print_string "${on_responsibility}"
Let's pretend for a moment that work doesn't turn people into stultified
------------------------------------------
==========================================
/---
function run_command_silent_and_set_string_to_stderr() {
    # Validate passed arguments.
    die_unless_args_2_or_more 'expected one command and one string name'
    string string_name__rcasste="${@[-1]}"
    pop_arg

    # Run such command and set such string. This is surprisingly difficult.
    # The internal "{" and "}" delimiters are requisite; removing them
    # effectively reduces this function to run_command_silent().
    output_string "variable: ${string_name__rcasste}; command: ${@}"
    run_command "${@}" 1>/dev/null |&
        set_string_to_stdin_pipe "${string_name__rcasste}"
}

#FIXME: In lieu of unit tests...
function comma() {
    string stdout stderr
    run_command_silent_and_set_string_to_stdout 'print "ok\nhm"; print "ko\nhm" 1>&2' stdout
    print "stdout: ${stdout}"
    run_command_silent_and_set_string_to_stderr 'print "ok\nhm"; print "ko\nhm" 1>&2' stderr
    print "stderr: ${stderr}"
}

# ....................{ WRITERS                            }....................
declare_function_with_stdin <<'/---'
[status: integer] run_command_silent_and_write_file_with_output(
    string command_name, string command_arg1, string command_arg2, ...,
    string filename)

Run the passed command *silently* (i.e., squelching standard output and error)
and overwrite the passed file with all output (both standard output and error)
from such command.
/---
function run_command_silent_and_write_file_with_output() {
    # Validate passed arguments.
    die_unless_args_2_or_more 'expected one command and one filename'
    string filename__rcsawfwo="${@[-1]}"
    die_unless_file_regular_or_not_path "${filename__rcsawfwo}"
    pop_arg

    # Run such command.
    run_command "${@}" >&!"${filename__rcsawfwo}"
}

declare_function_with_stdin <<'/---'
[stderr: string, status: integer]
    run_command_silent_stdout_and_write_file_with_stdout(
        string command_name, string command_arg1, string command_arg2, ...,
        string filename)

Run the passed command, silencing standard output (but _not_ error) and
overwriting the passed file with such output.
/---
function run_command_silent_stdout_and_write_file_with_stdout() {
    # Validate passed arguments.
    die_unless_args_2_or_more 'expected one command and one filename'
    string filename__rcssawfws="${@[-1]}"
    die_unless_file_regular_or_not_path "${filename__rcssawfws}"
    pop_arg

    # Run such command.
    run_command "${@}" >!"${filename__rcssawfws}"
}

# --------------------( WASTELANDS                         )--------------------
#   { eval "yim=( /*(#qZ) )" 1>/dev/null } |& set_string_to_stdin_pipe lil
#   set_string_to_string "${string_name__rcasste}" "$({
#       run_command "${@}" 1>/dev/null
#   } 2>&1)"

#, redirecting both standard output and error to the passed
#file by overwriting such file with such output.

#Run the passed command partially silently, squelching standard error but _not_
#output. Preserving standard output silences only warnings and errors.

#partially silently, squelching standard output but _not_
#error. Preserving standard error preserves warnings and errors.

    # Obscenely clever, if we may say so. (We may!) See
    # return_exit_status() for similar logic.
# Preserving standard error preventsdd warnings, errors, and exceptions.
