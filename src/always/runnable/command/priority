#!/usr/bin/env zsh
# ====================[ priority                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle command prioritization.

# ....................{ GLOBALS ~ nice                     }....................
declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_NICE_PRIORITY_LOW

`nice`-specific lowest priority for CPU-based process scheduling.
________________<heredoc?>________________
ZESHY_NICE_PRIORITY_LOW=19

declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_NICE_PRIORITY_HIGH

`nice`-specific highest priority for CPU-based process scheduling.
________________<heredoc?>________________
ZESHY_NICE_PRIORITY_HIGH=-20

# ....................{ GLOBALS ~ ionice                   }....................
declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_IONICE_CLASS_IDLE_ONLY

`ionice`-specific lowest priority class for I/O-based process scheduling. The
kernel schedules processes assigned to such class on an idle-only basis (i.e.,
only if no other process demands I/O). Such processes are likely to suffer
resource starvation and hence appropriate only for background daemons.
________________<heredoc?>________________
ZESHY_IONICE_CLASS_IDLE_ONLY=3

declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_IONICE_CLASS_BEST_EFFORT

`ionice`-specific default priority class for I/O-based process scheduling.
Assigning processes other priority classes either induces resource starvation
(e.g., under both ${ZESHY_IONICE_CLASS_IDLE_ONLY} and
${ZESHY_IONICE_CLASS_REAL_TIME}) or is prohibited to non-superusers (e.g., under
${ZESHY_IONICE_CLASS_REAL_TIME}). Most process should be assigned to this
default priority class.
________________<heredoc?>________________
ZESHY_IONICE_CLASS_BEST_EFFORT=2

declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_IONICE_CLASS_REAL_TIME

`ionice`-specific highest priority class for I/O-based process scheduling. The
kernel schedules processes assigned to such class on a realtime basis (i.e.,
first in the scheduling queue, regardless of whether another process demands
I/O). Such processes may impose resource starvation on other processes and are
hence appropriate only for core foreground tasks.
________________<heredoc?>________________
ZESHY_IONICE_CLASS_REAL_TIME=1

declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_IONICE_PRIORITY_LOW

`ionice`-specific lowest subclass priority for I/O-based process scheduling,
ranging from 0 to 7. Process assigned to class ${ZESHY_IONICE_CLASS_IDLE_ONLY}
ignore such priority; all other classes accept such priority.
________________<heredoc?>________________
ZESHY_IONICE_PRIORITY_LOW=7

declare_global_with_stdin <<'________________<heredoc?>________________'
integer ZESHY_IONICE_PRIORITY_HIGH

`ionice`-specific highest subclass priority for I/O-based process scheduling,
ranging from 0 to 7. Process assigned to class ${ZESHY_IONICE_CLASS_IDLE_ONLY}
ignore such priority; all other classes accept such priority.
________________<heredoc?>________________
ZESHY_IONICE_PRIORITY_HIGH=0

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
string run_command_with_priority_highest(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command under the highest possible CPU and I/O priorities and
hence qualitatively ``faster'' than conventional commands. To avoid entirely
starving other commands of I/O access, such command is run under best effort I/O
scheduling. See ${ZESHY_IONICE_CLASS_BEST_EFFORT} for further details.
________________<heredoc?>________________
function run_command_with_priority_highest() {
    die_unless_args 'expected one command'
    run_command_with_priorities_nice_and_ionice\
        "${@}"\
        ${ZESHY_NICE_PRIORITY_HIGH}\
        ${ZESHY_IONICE_CLASS_BEST_EFFORT}\
        ${ZESHY_IONICE_PRIORITY_HIGH}
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string run_command_with_priority_lowest(
    string command_name, string command_arg1, string command_arg2, ...)

Run the passed command under the lowest possible CPU and I/O priorities and
hence qualitatively ``slower'' than conventional commands. To avoid entirely
starving such command of I/O access, such command is run under best effort I/O
scheduling. See ${ZESHY_IONICE_CLASS_BEST_EFFORT} for further details.
________________<heredoc?>________________
function run_command_with_priority_lowest() {
    die_unless_args 'expected one command'
    run_command_with_priorities_nice_and_ionice\
        "${@}"\
        ${ZESHY_NICE_PRIORITY_LOW}\
        ${ZESHY_IONICE_CLASS_BEST_EFFORT}\
        ${ZESHY_IONICE_PRIORITY_LOW}
}

declare_function_with_stdin <<'________________<heredoc?>________________'
string run_command_with_priorities_nice_and_ionice(
    string command_name, string command_arg1, string command_arg2, ...,
    integer nice_priority,
    integer ionice_class, integer ionice_class_priority)

Run the passed command under the passed `nice` priority and, if `ionice` is in
the current ${PATH}, the passed `ionice` priorities as well.
________________<heredoc?>________________
function run_command_with_priorities_nice_and_ionice() {
    # Validate passed arguments. Since *nix assigns lower priorities higher
    # integer constants, testing ranges is somewhat unintuitive.
    die_unless_args_4_or_more\
        'expected one command, one nice priority, one ionice class, and one ionice class priority'
    string\
        nice_priority="${@[-3]}"\
        ionice_class="${@[-2]}"\
        ionice_class_priority="${@[-1]}"
    die_unless_integer_in_range "${nice_priority}"\
        "${ZESHY_NICE_PRIORITY_HIGH}" "${ZESHY_NICE_PRIORITY_LOW}"
    die_unless_integer_in_range "${ionice_class}"\
        "${ZESHY_IONICE_CLASS_REAL_TIME}" "${ZESHY_IONICE_CLASS_IDLE_ONLY}"
    die_unless_integer_in_range "${ionice_class_priority}"\
        "${ZESHY_IONICE_PRIORITY_HIGH}" "${ZESHY_IONICE_PRIORITY_LOW}"
    pop_args 3

    # Command line to be run, prefixed by commands prioritizing the passed
    # command. All systems provide "nice" but not necessarily "ionice".
    list command_line; command_line=( nice -n${nice_priority} )
    is_pathable ionice and command_line+=( ionice
        -c${ionice_class}
        -n${ionice_class_priority}
    )

    # Run such line.
    run_command "${command_line[@]}" "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to run_command_with_priority() and reorder arguments, accepting such
#command prior to such integers.
#integer_global_export\
#    ZESHY_NICE_PRIORITY_LOW\
#    ZESHY_NICE_PRIORITY_HIGH\
#    ZESHY_IONICE_CLASS_LOW\
#    ZESHY_IONICE_CLASS_HIGH\
#    ZESHY_IONICE_PRIORITY_LOW\
#    ZESHY_IONICE_PRIORITY_HIGH
