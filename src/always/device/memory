#!/usr/bin/env zsh
# ====================[ memory                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle random access memory (RAM).

# ....................{ GETTERS                            }....................
declare_function '
integer get_memory_total(void)

Get the amount of total available memory on this machine in bytes. As
expected, the following invariant holds:

    >>> (( $(get_memory_total) == $(get_memory_free) + $(get_memory_used) )) and
    ...     print "total memory is free plus used memory"
    total memory is free plus used memory
'
function get_memory_total() {
    #FIXME: Parse such output with sensible Zeshy functions. Come to think, it'd
    #be quite helpful to define a new get_string_line_word() function for
    #getting a specific shell word of a string line, as we require here and below.
    die_if_args                      # |----- second word of second line
    print_string ${"${"$(free -bt)"[(f)2]}"[(w)2]}
}

declare_function '
integer get_memory_free(void)

Get the amount of free available memory on this machine in bytes.
'
function get_memory_free() {
    #FIXME: See above.
    die_if_args
    print_string ${"${"$(free -bt)"[(f)2]}"[(w)4]}
}

declare_function '
integer get_memory_used(void)

Get the amount of used available memory on this machine in bytes.
'
function get_memory_used() {
    #FIXME: See above.
    die_if_args
    print_string ${"${"$(free -bt)"[(f)2]}"[(w)3]}
}

# ....................{ PRINTERS                           }....................
#FIXME: Rename to print_memory_use_with_options() and accept all arguments
#accepted by "free". Add new ZESHY_FREE_OPTIONS, too, defaulting to "-m -t".
declare_function '
string print_memory_use(void)

Print a human-readable synopsis of current memory use in megabytes (MB).
'
function print_memory_use() {
    # Validate sanity.
    die_if_args

    #FIXME: Silly. Remove this printed message; instead, parse "$(free -mt)"
    #output for numbers and, for each such number, reformat such number in
    #human-readable form. That itself isn't terribly hard (...in fact, it'd be
    #handy to define a new function doing just that); the tricky part will be in
    #padding reformatted numbers on the left with sufficient whitespace to
    #ensure .
    interactively print_message 'showing memory use in megabytes...'
    free -mt
}

# --------------------( WASTELANDS                         )--------------------
    #FIXME: Alternate implementations; keep around!
    #echo $(match_multiline '^Mem:\s+(\d+)' "$(free -bt)")
    #$(cat '/proc/meminfo' | awk -F '[ ]+' '/^MemTotal/ { print $2 }')
