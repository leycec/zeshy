#!/usr/bin/env zsh
# ====================[ processor                          ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle CPU profiling and reporting.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_processor_index(int processor_index, string error_message = '')
#
# Throw an exception unless a logical processor with the passed 1-based index
# exists. The first thread on the first core on the first processor on the first
# node has index 1; likewise, the second thread on the second core on the first
# processor on the first node has index 4.
function die_unless_processor_index() {
    die_unless_one_or_two_args\
        'expected one processor index and optional error message'
    string processor_index="${1}"
    is_processor_index "${processor_index}" or die\
        "${2:-\"${processor_index}\" not an integer in [1, $(get_processor_count)]}"
}

# ....................{ TESTERS                            }....................
# boolean is_processor_index(int processor_index)
#
# Return true if a logical processor with the passed 1-based index exists.
function is_processor_index() {
   die_unless_one_arg 'expected one processor index'
   string  processor_index="${1}"
   integer processor_count; processor_count="$(get_processor_count)"
   is_string_integer_ranging "${processor_index}" 1 "${processor_count}"
}

# ....................{ GETTERS                            }....................
# string get_processor_profile_file(void)
#
# Get the absolute filename of the pseudo-file containing human-readable
# profiles of processors on the current machine.
function get_processor_profile_file() {
    #FIXME: Generalize to BSD, etc.
    die_if_args
    string filename
    filename='/proc/cpuinfo'
    die_unless_file "${filename}"
    output "${filename}"
}

# string get_processor_indices(void)
#
# Get a space-delimited list of integers in [1, $(get_processor_count)]: e.g.,
#
#     # Assuming a quad-core single CPU system without hyperthreading.
#     >>> get_processor_indices
#     1 2 3 4
function get_processor_indices() {
    die_if_args
    get_string_integers_ranging 1 "$(get_processor_count)"
}

# ....................{ GETTERS ~ counts                   }....................
# integer get_processor_count(void)
#
# Get the number of logical processors available in the current machine. If
# this machine supports CPU hyperthreading, this is the number of physical
# threads of physical cores of physical CPUs; else, the number of physical
# cores of physical CPUs.
function get_processor_count() {
    die_if_args

    #FIXME: This is probably Linux-specific. *massive shrug*
    # Since processor count is strongly unlikely to change, cache results.
    integer_global_export ZESHY_PROCESSOR_COUNT
    is_empty "${ZESHY_PROCESSOR_COUNT}" and {
        string proc_filename; proc_filename="$(get_processor_profile_file)"
        ZESHY_PROCESSOR_COUNT="$(\
            get_text_file_contents "${proc_filename}" |\
            get_string_pcre_line_match_count '^processor\s*:')"
    }

    # Return the now-cached result.
    output "${ZESHY_PROCESSOR_COUNT}"
}

# integer get_physical_processor_count(void)
#
# Get the number of physical processors available in the current machine. If
# this machine supports CPU hyperthreading, this is the return value of
# get_processor_count() less the number of logical threads; else, this is simply
# get_processor_count().
function get_physical_processor_count() {
    #FIXME: Also implementable on "/proc/cpuinfo" itself, but much more
    #long-winded and requires Zeshyfication:
    #
    #   cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l
    #
    #To quote: "This command squishes the /proc/cpuinfo physical id and core id for
    #each logical CPU on to the same line, and then sorts them and runs uniq to
    #remove the extra hyperthreading logical CPU's. The final result is the number
    #of CPU cores on your Linux system." Courtesy:
    #
    #   https://www.ibm.com/developerworks/mydeveloperworks/blogs/brian/entry/linux_show_the_integer_of_cpu_cores_on_your_system17?lang=en
    #
    #Quite clever, actually.
    die_if_args
    die_unless_installed lscpu

    # The number of uncommented lines "lscpu -p" outputs very concisely yields
    # the number of physical processors.
    lscpu -p | get_string_pcre_line_match_count '^\d+,'
}

# ....................{ PRINTERS                           }....................
# void print_processor(void)
#
# Print a human-readable profile of all processors (e.g., threads on cores on
# CPUs on sockets on nodes) the current machine exposes.
function print_processor() {
    die_if_args

    {
        # If "lscpu" is installed, run that first. "lscpu" prints a helpful
        # synopsis, if somewhat lacking in detail.
        is_installed lscpu and {
            say_first_section 'lscpu'
            lscpu
        }

        # If "cpufreq-info" is installed, run that next. "cpufreq-info" prints
        # data on frequency scaling (e.g., overclocking, underclocking).
        is_installed cpufreq-info and {
            say_next_section 'cpufreq-info'
            print_processor_scaling
        }

        # Last, print the detailed contents of the processor profile file.
        string proc_filename; proc_filename="$(get_processor_profile_file)"
        is_file "${proc_filename}" and {
            say_next_section "${proc_filename}"
            print_text_file    "${proc_filename}"
        }
    } | run_paged
}

# --------------------( WASTELANDS                         )--------------------
        # Otherwise, raise an exception.
#       else die '"lscpu" not installed and "/proc/cpuinfo" not found'

    # Capture "uptime" output, resembling:
    #     27:17:57 up  3:17,  1 user,  load average: 0.15, 0.12, 0.10
#   die_if_args
#   string uptime_output; uptime_output="$(uptime)"

    # Unnormalized processor load. Dismantled, this is:
    #
    # * "[(w)-3]", expanding to the third to last word of the output.
    # * "%,", removing the trailing comma.
#   float uptime_load; uptime_load="${uptime_output[(w)-3]%,}"

    # Normalize such load by the number of logical processors, rounded to four
    # decimal places of accuracy.
#   integer processor_count; processor_count=$(get_processor_count)
#   round_float $(( uptime_load / processor_count )) 4
#Quite clever, actually. Though, it's probably far easier to simply parse the
#machine-readable output of "lscpu -p"; theoretically, the number of lines
#output by "lscpu -p" *NOT* prefixed with "#" are the number of physical
#processors. (Double-check, of course.)

# int get_cpu_physical_core_count(void)
#
# Get the number of physical CPU cores available in the current machine. This
# excludes available logical CPU cores (e.g., hyperthreaded cores).
#get_cpu_physical_core_count() {
#    die_if_args
#    output ${"${"$(free -bt)"[(f)2]}"[(w)2]}
#}

# int get_cpu_core_count(void)
#
# Get the number of logical CPU cores available in the current machine. This
# includes physical cores and logical cores the hardware makes available (e.g.,
# hyperthreaded cores).
#get_cpu_core_count() {
#    die_if_args
#    cat /proc/cpuinfo | grep processor | wc -l
#}
