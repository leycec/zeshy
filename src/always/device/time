#!/usr/bin/env zsh
# ====================[ time                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Time, handling date, time, and calendar functionality.

# ....................{ ALIASES                            }....................
interactive_alias d='date'
interactive_abbreviation {calq}uarter='print_calendar_quarter'
interactive_abbreviation {caly}ear='print_calendar_year'

# ....................{ GETTERS                            }....................
#FIXME: Terrible name. How about get_date_in_iso_8601_format() or
#get_iso_8601_date?
# string get_date_iso_8601()
#
# Get the current date in ISO 8601 format (e.g., 1970-01-01).
get_date_iso_8601() {
    die_if_args
    date +'%F'
}

#FIXME: Terrible name. How about get_unix_time()?
# integer get_unix_time()
#
# Get the current time in seconds since the Unix epoch (e.g., 3141592653).
get_unix_time() {
    die_if_args
    date +'%s'
}

# integer get_year(void)
#
# Get the current year as a four-digit integer (e.g., 1776).
get_year() {
    die_if_args
    date +'%Y'
}

# ....................{ SETTERS                            }....................
# void synchronize_system_time(void)
#
# Synchronize local system time against remote time servers. Generally speaking,
# the "ntpd" daemon should perform such synchronization on your behalf in the
# background. Hence, call this function only when not running such daemon (which
# you really should be) or when such daemon silently fails to run. The default
# configuration of "ntpd" makes such failure unfortunately common: under large
# clock skew (i.e., local system time desynchronized from remote time servers by
# over 15 minutes), the default configuration of "ntpd" silently fails after
# roughly 15 seconds of successful operation. In such a case, calling this or a
# comparable command is the only means of rejuvenating "ntpd".
#
# Technically, other ways do exist: adding "tinker panic 0" to "/etc/ntp.conf",
# for example, permits "ntpd" to accept any clock slew regardless of size. This
# is generally considered bad form, however. Hence, this function.
synchronize_system_time() {
    # Validate sanity.
    die_if_args

    # Hostname of the default NTP server (typically, a pool of such servers
    # redirecting to the real NTP server "closest" to the caller).
    string default_ntp_server='pool.ntp.org'

    #FIXME: See http://en.gentoo-wiki.com/wiki/Time_Synchronization for
    #additional methods. "htpdate" is quite clever, for example: pass it any
    #HTTP server (e.g., "www.linux.org") and it synchronizes the system time
    #against the server's reported time. Nice!

    # Prefer "ntpd", if installed. "ntpd" is both the authoritative server and
    # client for NTP synchronization.
    if is_installed ntpd; then
        utter 'synchronizing via "ntpd"...'

        # Dismantled, this is:
        #
        # * "-g", accepting arbitrarily large clock skew. Essential.
        # * "-q", exiting after first setting the local system time.
        run_with_progress_timer ntpd -g -q
    # Prefer "sntp", if installed. "sntp" is the authoritative client for NTP
    # synchronization on mobile devices.
    elif is_installed sntp; then
        utter 'synchronizing via "sntp"...'

        # Dismantled, this is:
        #
        # * "-a", calling adjtime() to slew rather than settimeofday() to skew
        #   the local system time. Whereas skewing often unsafely jumps to the
        #   target time, slewing safely and run_slowly incrementally approaches the
        #   target time.
        sntp -j "${default_ntp_server}"
    # Run a deprecated command, if nothing better is currently installed.
    elif is_installed ntpdate; then
        curse 'neither "ntpd" or "sntp" installed'
        utter 'synchronizing via "ntpdate"... (deprecated)'
        ntpdate "${default_ntp_server}"
    else 'neither "ntpd", "sntp", or "ntpdate" installed'
    fi
}

# ....................{ PRINTERS                           }....................
#FIXME: Revise to accept a 1-based month index to use as the quarter "center."
# string print_calendar_quarter(void)
#
# Print a Gregorian calendar of the current "quarter" (i.e., previous, current,
# and next month).
print_calendar_quarter() {
    die_if_args
    cal -3
}

# string print_calendar_year(integer year = $(get_year))
#
# Print a Gregorian calendar of the passed year (defaulting to the current).
print_calendar_year() {
    die_unless_no_or_one_arg 'expected optional year'
    string year; year="${1:-$(get_year)}"
    die_unless_string_integer "${year}"
    cal -y "${year}"
}

# --------------------( WASTELANDS                         )--------------------
#interactive_alias calq="print_calendar_quarter"
#interactive_alias caly="print_calendar_year"
#interactive_alias calyn="print_calendar_year_next"
#FIXME: There exist a variety of alternative command-line applications for
#performing remote time synchronization: "ntpd" is merely the most popular.
#Shift this function to "os/time".

#FIXME: Perhaps some variant of update_system_time_via_ntp(void)?
