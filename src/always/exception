#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core exception functionality.
/---

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_evaluated(string evaluation)

Throw an exception whose error message is the result of dynamically evaluating
the passed string in a *double-quoted context* (i.e., as
`eval 'die "'${evaluation}'"'`). Since the result of dynamically evaluating a
string containing no *process substitutions* (i.e., `$(...)` expressions) is the
same string, this function is typically only passed single-quoted strings
containing such substitutions -- namely, substitutions of functions dependent on
the current terminal width.

== Terminal Width ==

The width available to each line of exception messages (typically) differs from
the width available to each line of normal output (i.e., the current terminal
width). Assuming default user-configurable styles, die() prints exception
messages in frames fabricated with box-drawing glyphs, implying no line of such
message may be longer than the current terminal width minus the lengths of the
left and right borders of such frames.

For readability, this function evaluates the passed string with a terminal width
temporarily set to such length. Consider the following erroneous call to die():

.Incorrect Terminal Width under die()
==========================================
[source]
------------------------------------------
>>> die "$(print_runnable info)"
┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• die() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
┋ ┃┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• Command          ┋
┋ info •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┃                          ┋
┋ /usr/bin/info                                                                                 ┋
┖┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
------------------------------------------
==========================================

The resulting message is plainly malformed. Consider calling this function with
the same string, single-quoted rather than double-quoted to delay execution of
such substitution until this function has temporarily overriden the current
terminal width with the restricted length:

.Correct Terminal Width under die_evaluated()
==========================================
[source]
------------------------------------------
>>> die_evaluated '$(print_runnable info)'
┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• die_evaluated() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
┋ ┃┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• Command info •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┃ ┋
┋ /usr/bin/info                                                                                  ┋
┖┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
------------------------------------------
==========================================
/---
function die_evaluated() {
    # Validate sanity.
    die_unless_arg 'Expected one evaluatable string.'
    string evaluation="${1}" message

    # If function get_terminal_width_for_errors() has been defined by this
    # point, evaluated such string under a restricted terminal width. For
    # stability, inline such test. See is_function() for further details.
    if { typeset -f get_terminal_width_for_errors &>/dev/null } {
        COLUMNS="$( get_terminal_width_for_errors)"\
            eval 'message="'${evaluation}'"'
    # Else, evaluate such string as is.
    } else {
        eval 'message="'${evaluation}'"'
    }

    # Throw such exception with such evaluated message.
    die "${message}"
}

# --------------------( WASTELANDS                         )--------------------
    # If function get_terminal_width_for_errors() has been defined by this
    # point, throw such exception with such string evaluated under a restricted
    # terminal width. For stability, inline such test. See is_function() for
    # further details.
#    if { typeset -f get_terminal_width_for_errors &>/dev/null } {
#        COLUMNS="$(get_terminal_width_for_errors)" eval 'die "'${evaluation}'"'
#    }
    # Else, throw such exception with such string evaluated as is.
#    } else {
#        eval 'die "'${evaluation}'"'
#    }
