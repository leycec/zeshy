#!/usr/bin/env zsh
# ====================[ help                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Define an interactive help system for publishing Zeshy documentation.
#
# --------------------( TODO                               )--------------------
# * O.K.; help strings should be documented in Zsh's built-in run-help format,
#   printed by typing <Esc-h>. This appears to involve "perl", but I can't quite
#   be sure yet. See the preamble for "man zshcontrib." O.K.; there's a perl
#   script at "/usr/share/zsh/5.0.0/Util/helpfiles" run like so:
#      man zshbuiltins | colcrt - | helpfiles
#   That (somehow) splits apart the manpage subsection specific to each Zsh
#   builtin into a help file for such builtin subsequently accessed when typing
#   <Esc-h>. Interestingly, <Esc-h> is bound by default in the ZLE to run a
#   function run-help(). So, replacing such function with a Zeshy-specific
#   function suffices to implement such help. The perl script above provides a
#   helpful default implementation for such function. It'd be nice to redefine
#   this script as pure-Zeshy, honestly. It's not terribly heavy-weight: only
#   about 100 lines of genuine line parsing code, all readily Zeshifiable. Since
#   speed is not an issue (we only need to slurp "man zshbuiltins" once on every
#   Zsh update -- right; so, we'll need a bit of caching, I suppose), it's !very
#   doable.
# * Hmm; scratch that. For the moment, just rely on "helpfiles". We'll still
#   need to implement caching ourselves, but that's no worry.
# * Woops! Obviously, <Esc-h> doesn't work under Vi[M] emulation. We can still
#   test it as root, but... Hmm. We'll need to selectively redefine such
#   binding under such emulation. *sigh*
# * O.K.; I'd love to implement this, but it's all a bit heavy for the moment.
#   Just push on ahead with the current implementation, keeping in mind that it
#   would be helpful to eventually support run-help().
# * However, I'll note that this is all a bit overkill, for the moment. We'd
#   need to rewrite documentation in the "man" nroff format... hmm; wait. No; no
#   documentation-rewriting required. The sample run-help() function above
#   simply invokes "more" on individual files. Frankly, both "man" and "info"
#   suck, so I'm disinclined to want to format documentation in their formats.
#   Fortunately, it looks like we won't need to!

#FIXME: Woops. Turns out... this was all a bit of a c0ckup, including the
#current means with which we define alias, function, and global documentation.
#The core thrust of it is that Zeshy needs to formalize such documentation with
#one function call per Zeshy alias, function, and global to functions defined
#under "always/00-startup" associating the passed documentation with the passed
#alias, function, or global name: e.g.,
#
# string set_alias_documentation(string alias_name, string documentation)
# string set_function_documentation(string documentation)
# string set_global_documentation(string global_name, string documentation)
#
#Or ideally the more concise:
#
# string document_alias(string alias_name, string documentation)
# string document_function(string documentation) --OR--
# string document_function(string function_name, string documentation)
# string document_global(string global_name, string documentation)
#
#Note the function name needn't be passed, since it's readily parseable from
#the passed documentation.
#
#For alias and global names, we should *ADDITIONALLY* define convenience
#functions both defining and setting documentation for such aliases and globals
#in one fell swoop: e.g.,
#
# string list_global_export_documented(string documentation, string list_name)
# string string_global_export_documented(string documentation, string specifier)
#
#...where "specifier" is the typical "="-delimited variable typeset: e.g.,
#
#   string_global_export_documented 'Thisizniceglobal.' ZESHY_STRANG='Hmm.'
#
#We can't do this for functions, for obvious reasons. So, prefix all function
#definitions with a call to document_function(), using a literal heredoc so as
#to avoid unwanted interpolation: e.g.,
#
#   document_function <<'EOD'
#   string nice_function(void)
#
#   Oh.... what a nice function!
#   EOD
#   function nice_function() {
#       print 'This is all yer gettin'.'
#   }
#
#It's not quite Python's built-in support for docstrings, but, frankly, I've
#always felt such support to be extreme syntactic sugar anyway. The above
#method *ROCKS*: it's intuitive, it's concise, it's optional, and it still
#allows for conventional "#"-prefixed comments. Such comments won't be picked up
#as documentation, implying implementation-specific commentary can now be
#separated from function documentation without concern (e.g., "#FIXME" comments).
#FIXME: We probably want to "gzip" each individual documentation string, to
#reduce both load times on shell startup and runtime memory consumption. Is
#"gzip" the ideal solution for short runs of English text? It's certainly the
#most widespread; but, perhaps LZMA-based compression can do substantially
#better.
#FIXME: That said, even gzipping is a temporary solution. Ideally, in the long
#run, we want to use an entirely disk-based Zsh-fueled key-value store and just
#perform on-disk lookups on each call to print_zeshy_help(). That's a
#demonstrably superior solution, long-term. Research whether there exist
#key-value store implementations in bash and Zsh. Even if there do, such
#solutions are unlikely to be optimal. Research the theory underlying efficient
#key-value stores. Perhaps take a look at Tokyo Cabinet and friends?
#FIXME: *OH*. There appears to be an optional Zsh "db" interface to "gdbm".
#That would certainly be ideal. Unfortunately, my local installation doesn't
#appear to have compiled support for it despite having enabled USE flag "gdbm";
#research! Ah; nope. Zsh only supports "gdbm" to the extent that it caches
#completions against GDBM; that's it. No front-facing module, I'm afraid. Bash
#also fails to provide built-in support for "gdbm".
#FIXME: O.K. I'm convinced. "bkvs" implements a rudimentary filesystem-based
#key-value store in pure-Bash. What do you think? It only consists of one file,
#so it's tremendously lightweight. See:
#https://code.google.com/p/bkvs/source/browse/bkvs
#It seems quite a fun idea; we could certainly devote three directories
#"~/.zeshy/cache/documentation/{alias,function,global}" to three different
#filesystem-based stores corresponding to the three fundamental Zsh namespaces.
#Naturally, just initialize with "command rm -r" prior to sourcing during
#compilation. I'll be honest: this kicks the heck out of the above in-memory
#map idea.
#FIXME: Interesting. We could just "tar.gz" the whole thing rather than
#implement such store as a directory. (Perhaps provide both? They serve different
#purposes.) Nice! Yes. This is probably the way to go; tar supports extraction of
#the exact desired file: e.g.,
#  tar -xzf foo.tar.gz blah.txt
#There we go. Have each documentation string as an individual file in a
#compressed tarball. Bam! Sweeeeeeeet. We'll naturally need to construct such
#archive during compilation. Shouldn't be terribly difficult:
#
#* Create a new temporary directory "documentation" under "~/.zeshy/tmp".
#  * Yes, this path; don't bother with "/tmp" or "~/tmp", as the logic needs to
#    be simplified to work cleanly and concisely under the limited subset of Zeshy
#    we have available during compilation.
#* Have document_function() write each documentation string as a new file to such
#  temporary directory.
#* Tarball the entire directory into
#  "~/.zeshy/cache/documentation/functions.tar.gz". It'd be nice to choose the
#  optimal format available under the current system for indexed text retrieval.
#  (Is any format optimal for such purposes?)
#
#FIXME: Ah-ha! Consideration of indexing led me to "dar", a substantially
#improved "tar" supporting implicit fast file retrieval via indexing. That said,
#just make "dar" an optional but recommended dependency: use "dar" if available;
#otherwise, default to "tar".
#FIXME: That said, the "zeshy" ebuild should force-install "dar" to ensure
#optimum behavior. There's a stable "dar" ebuild, so... there you go! Speaking
#of, perhaps we should get crackin' on that "zeshy" ebuild, eh?

# * It seems fairly silly to reparse Zeshy scripts on each call to
#   print_zeshy_help(). Clearly, we should persist successfully parsed
#   documentation as a "map_global_export" to a script under "~/.zeshy/cache" --
#   perhaps entirely overwriting the map previously written to such script after
#   every successful parse? Hmm; actually, while that would probably work
#   perfectly fine as a first implementation, we would do considerably better to
#   simply append the newly parsed documentation as a new entry to such file.
#   That's actually quite straightforward... hmm; or is it? Yes! I think.
#   Using "${mapfile}", right? How about something resembling:
#   mapfile[${doc_cache_file}][-1]="\"${function_name}\" \"${(q)function_docs}\"
#)"
#   The idea here is to replace the suffixing ")" with the new entry. You know
#   what? This is overengineering. Probably more efficient and certainly
#   simpler to just overwrite such cache each time. *shrug* Let's ignore this
#   until it actually becomes a discernable bottleneck.
# * In any case, what's great about the cache idea is that we could (and *MUST*,
#   actually) seed such cache with initial values for synthesized functions
#   created during compilation that don't actually exist and hence can't be
#   tangibly parsed. See make_zeshy_functions() in "src/compile".
#   * *AH!* Wait. That would work, but it's terribly heavyweight; all we have to
#     do is define such functions with empty definitions in some placeholder
#     Zeshy script in the root overlay. Their only purpose is to provide
#     documentation; their empty definitions will be immediately overwritten by
#     make_zeshy_functions(). Yes... much cleaner.

#FIXME: The search algorithm for finding the exact documentation in a file
#corresponding to a function is actually not terribly hard:
#
#1. Find the function definition in such file. Assuming there exists only one
#   such definition, which there should, this is the first string matching
#   "^function ${function_name}\(\)$" in such file.
#2. If the line immediately preceding such definition matches "^# .*$", then:
#   a. Search backwards one line at a time, prepending each line to a list of
#      such lines *UNTIL* a line fails to match "^#( .*)?$".
#   b. Search forwards one line at a time starting at the line that fails to
#      match, shifting off each line that fails to match
#      "^# [a-z_]+ ${function_name}\(.*$" from such list *UNTIL* matching such
#      line.
#   c. Such list now contains the desired in-order documentation. Tad
#      complicated, but well within the scope of reasonable feasibility. Note
#      it's not safe to simply begin searching for the first line matching
#      "^# [a-z_]+ ${function_name}\(.*$" in the file, due to "#FIXME" comments,
#      "TODO" sections, and the fact that "# also that_function()." Also happens
#      to match.
#3. Otherwise, no documentation has been authored for such function yet. Throw
#   an exception.

# ....................{ ALIASES                            }....................
interactive_abbreviation {h}elp='print_zeshy_help'

# ....................{ GETTERS                            }....................
#FIXME: Shift elsewhere -- perhaps a new "zeshy/script" component. Hmm;
#alternately, we could simply rename this to
#get_zeshy_runnable_script(). It's concise; I like it. (Not entirely sure a new
#component is warranted for merely one function... We're heavyweight enough!)
# string get_zeshy_script_defining_runnable(string runnable_name)
#
# Get the absolute path of the Zeshy component defining the passed runnable.
function get_zeshy_script_defining_runnable() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one runnable name'
    string runnable_name="${1}"
    die_unless_zeshy_runnable "${runnable_name}"

    #FIXME: Implement map lookup here!
    die 'implement me'
}

# ....................{ PRINTERS                           }....................
#FIXME: Actually, it'd be great to accept general object names: which is to say,
#*ALSO* accept global variable names. We document such variables and hence
#should expose such documentation via the same interface here. While runnables
#and variables occupy different Zsh namespaces and hence could theoretically
#collide, no Zeshy runnables share the same name as a Zeshy variable; hence,
#searching for both is unambiguous here. That said, third-party Zeshy plugins
#could theoretically define poorly named runnables or variables contravening
#such standardization; so, conceivably we should search for and page both.

# string print_zeshy_help(string runnable_name)
#
# Print help documentation for the passed Zeshy-specific runnable (i.e., Zeshy
# alias or function).
function print_zeshy_help() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one runnable name'
    string\
        runnable_name="${1}" script_filename script_text\
        newline line_glob help_text
    die_unless_zeshy_runnable "${runnable_name}"

    # Get the absolute path of the Zeshy component defining such runnable.
    script_filename="$(get_zeshy_script_defining_runnable "${runnable_name}")"

    # Get the text contents of such component.
    script_text="$(get_file_text "${script_filename}")"

    # Newline character, abbreviated for ease of use.
    newline="${ZESHY_CHARACTER_NEWLINE}"

    # Glob matching any number of non-newline characters followed by a newline,
    # thus matching the rest of a line.
    line_glob="[^${newline}]#${newline}"

    # If such runnable is a function, collect such function's documentation.
    if is_function "${runnable_name}"; then
        if is "${script_text}" ==\
            *${newline}${newline}('#'${~line_glob})#(#b)('# '[a-z_]##" ${runnable_name}("${~line_glob})(('#'${~line_glob})#)"function ${runnable_name}() {"* si
        #FIXME: It'd be *EXCEPTIONALLY* nice to colorize output.
        then help_text="${match[1]}${match[2]}"
        else die "${runnable_name}() undocumented, unfortunately"
        fi
    # Else such runnable is an alias; collect such alias' documentation.
    else
        #FIXME: Don't bother implementing me, yet; get function help working
        #first, please.
        noop
    fi

    #FIXME: Strip off substrings matching "^# " and "^#$" from each line. It'd
    #be great to define a new remove_string_line_prefix_matches() function, probably
    #leveraging a new remove_list_prefix_matches() function. Though, wouldn't a
    #slightly simpler remove_string_line_matches() function suffice?

    #FIXME: We should actually page such documentation normalized to the current
    #terminal width. "nroff" should help, no? Be nice to define a utility
    #function implementing repagination: perhaps called "paginate_string", yes?
    # Page such help documentation.
    output_string_paged "${help_text}"
}

# --------------------( WASTELANDS                         )--------------------
    # Since we should never get here, throw an exception.
#   is_alias "${function_name}".
#   die "\"${runnable_name}\" neither an alias or function, unexpectedly"
