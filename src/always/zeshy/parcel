#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_to_script_with_stdin <<'-\-'
Handle all parcel functionality not already handled by core parcel @{05-parcel}.
-\-

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'-\-'
string get_parcel(void)

Get the (possibly nonextant) absolute path uniquely identifying the current
parcel. See declare_parcel() for further details.
-\-
function get_parcel() {
    # Validate passed arguments.
    die_if_args
    return_string "${ZESHY_PARCEL_NAME}"
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'-\-'
void set_parcel(string parcel_name)

Set the current parcel to the previously declared parcel with the passed
(possibly nonextant) absolute path. See declare_parcel() for further details.
-\-
function set_parcel() {
    # Validate passed arguments. If such name is not an absolute path (i.e., is
    # either not prefixed by "/" or contains null characters), such name is
    # invalid as a parcel name, so throw an exception. See @{parcel} for further
    # details.
    die_unless_arg 'expected one parcel name'
    string parcel_name="${1}"
    die_unless_parcel "${parcel_name}"

    # Set the current parcel to such script, canonicalized to avoid ambiguity
    # when cross-referencing parcels. See canonicalize_path() for further
    # details. For efficiency, avoid calling set_parcel().
    ZESHY_PARCEL_NAME="${parcel_name}"
}

declare_function_with_stdin <<'-\-'
void set_parcel_to_script(string script_name)

Set the current parcel to the previously declared parcel with the passed path
referring to an existing `zeshy` script. For simplicity, such path may be
absolute or relative and contain symbolic link components. If such path does
_not_ refer to an existing `zeshy` script associated with a parcel, an exception
is thrown. See set_parcel() for further details.
-\-
function set_parcel_to_script() {
    # Validate passed arguments.
    die_unless_arg 'expected one script name'
    string script_name="${1}"
    die_unless_file_plain "\"${script_name}\" not a zeshy script"

    # Set the current parcel to such the absolute path of such script,
    # canonicalized to avoid ambiguity when cross-referencing parcels.
    set_parcel "$(canonicalize_path "${script_name}")"
}

# --------------------( WASTELANDS                         )--------------------
#If such path is _not_ that of a previously declared parcel, an
#exception is thrown. 
#All subsequently declared aliases,
#globals, and functions will be assigned to such parcel. 
#Such parcel abstractly contains all subsequently declared aliases, globals, and functions.
#See canonicalize_path() for further
    # details. For efficiency, avoid calling set_parcel().
#   ZESHY_PARCEL_NAME="$(output_string "${script_name}"(:A))"
