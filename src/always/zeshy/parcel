#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-\-'
Handle all parcel functionality not already handled by core parcel @{05-parcel}.
-\-

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'-\-'
string get_parcel(void)

Get the (possibly nonextant) absolute path uniquely identifying the current
parcel. See declare_parcel() for further details.
-\-
function get_parcel() {
    # Validate passed arguments.
    die_if_args
    return_string "${ZESHY_PARCEL_NAME}"
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'-\-'
void set_parcel(string parcel_name)

Set the current parcel to the previously declared parcel with the passed
(possibly nonextant) absolute path. See declare_parcel() for further details.
-\-
function set_parcel() {
    # Validate passed arguments. If such name is not an absolute path (i.e., is
    # either not prefixed by "/" or contains null characters), such name is
    # invalid as a parcel name, so throw an exception. See @{parcel} for further
    # details.
    die_unless_arg 'expected one parcel name'
    string parcel_name="${1}"
    die_unless_parcel "${parcel_name}"

    # Set such parcel.
    ZESHY_PARCEL_NAME="${parcel_name}"
}

declare_function_with_stdin <<'-\-'
void set_parcel_as_script(string script_name)

Set the current parcel to the previously declared parcel with the passed path
referring to an existing `zeshy` script. Unless such path refers to an existing
`zeshy` script associated with a previously declared parcel, an exception is
thrown. For simplicity, such path may be absolute or relative and contain
symbolic link components. See convert_path_to_parcel() for further details.
-\-
function set_parcel_as_script() {
    # Validate passed arguments.
    die_unless_arg 'expected one script name'
    string script_name="${1}" parcel_name
    die_unless_file_regular "${script_name}"

    # Set the current parcel to the absolute path of such script converted into
    # a parcel name.
    set_parcel "$(convert_path_to_parcel "${script_name}")"
}

# --------------------( WASTELANDS                         )--------------------
#Set the current parcel to the previously declared parcel with the passed path
#referring to an existing `zeshy` script. Unless such path refers to an existing
#`zeshy` script associated with a previously declared parcel, an exception is
#thrown. For simplicity, such path may be absolute or relative and contain
#symbolic link components. See set_parcel() for further details.
#
#== Overlay Replacement ==
#
#All `zeshy` scripts reside in one of two overlays:
#
#* ${ZESHY_OVERLAY_DIR}, the system-wide directory containing officially bundled
#  `zeshy` scripts.
#* ${ZESHY_USER_OVERLAY_DIR}, the user-specific directory containing third-party
#  `zeshy` scripts.
#
#In either case, such paths are system-specific. For portability, this function
#replaces system-specific paths in parcel names with the following system-
#agnostic labels (in URI scheme format):
#
#* `zeshy://`, for scripts residing in ${ZESHY_OVERLAY_DIR}.
#* `zeshy.user://`, for scripts residing in ${ZESHY_USER_OVERLAY_DIR}.
#
#For example:
#
#.set_parcel_as_script()
#==========================================
#[source]
#------------------------------------------
#>>> set_parcel_as_script "${ZESHY_OVERLAY_DIR}/is_pathable/mutt"
#>>> get_parcel
#zeshy://is_pathable/mutt
#>>> set_parcel_as_script "${ZESHY_USER_OVERLAY_DIR}/is_pathable/awesome"
#>>> get_parcel
#user://is_pathable/awesome
#------------------------------------------
#==========================================
#-\-
#function set_parcel_as_script() {
#    # Validate passed arguments.
#    (( # == 1 )) || die 'expected one script name'
#    local script_name="${1}" parcel_name
#    [[ -f "${script_name}" ]] || die "\"${script_name}\" not a zeshy script"
#
#    # Set the current parcel to such the absolute path of such script,
#    # canonicalized to avoid ambiguity when cross-referencing parcels. See
#    # canonicalize_path() for further details.
#    parcel_name="$(print -r -- "${script_name}"(:A))"
#
#    # Replace system-specific overlay prefixes with system-agnostic labels.
#    # Note the lack of an "else" branch in the logic below. If such parcel is a
#    # symbolic link to a script physically residing outside of a zeshy overlay,
#    # both of the branches below fail. This is hardly ideal (due to portability
#    # issues) but currently ignorable. Since most parcels reside in the system-
#    # wide overlay, attempt to match such overlay first. Dismantled, this is:
#    #
#    # * "(#b)(*)", matching the fragment of such path following the unmatched
#    #   directory of the overlay containing such path into ${match[1]}.
#        if [[ parcel_name == "${ZESHY_OVERLAY_DIR}"(#b)(*) ]] {
#        parcel_name="zeshy://${match[1]}"
#    } elif [[ parcel_name == "${ZESHY_USER_OVERLAY_DIR}"(#b)(*) ]] {
#        parcel_name="zeshy.user://${match[1]}"
#    }
#
#    # If such parcel does not exist, throw an exception.
#    die_unless_parcel "${parcel_name}"
#
#    # Else, set the current parcel to such parcel.
#    ZESHY_PARCEL_NAME="${parcel_name}"
#}

#If such path is _not_ that of a previously declared parcel, an
#exception is thrown. 
#All subsequently declared aliases,
#globals, and functions will be assigned to such parcel. 
#Such parcel abstractly contains all subsequently declared aliases, globals, and functions.
#See canonicalize_path() for further
    # details. For efficiency, avoid calling set_parcel().
#   ZESHY_PARCEL_NAME="$(output_string "${script_name}"(:A))"
