#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core `zeshy` functionality.
/---

#FIXME: We really need to interactively usher the current user into the upgrade
#process on zeshy upgrades. To do so, consider a new difference_files() command
#invoking some underlying "vimdiff" (only if the current EDITOR == "vim"),
#"diff", and so on command to diff the user's current config against Zeshy's
#new config. I have two thoughts on this:
#
# 1. We could avoid all diffing by having the user write into a "config.local"
#    or "config-local" file in "~/.zeshy" rather than "config". (Actually, why
#    not let it just be their choice?) O.K.; so, here's how we roll:
#    * When rewriting the Zeshy version file, stamp the Zeshy config file with
#      the same mtime.
#    * If the Zeshy version file is ever outdated (i.e., Zeshy was upgraded),
#      compare the mtime of that file with that of the Zeshy config file. If
#      the latter is newer, the user modified it, so we need to run a diff;
#      otherwise, silently delete the Zeshy config file and let Zeshy re-
#      fabricate it for us.
#    * The user can opt to always have such config file silently deleted by
#      simply always using "config.local", instead. The downside is that
#      global variables may change names and they won't necessarily notice
#      immediately. (Or other such desynchronizations.) But probably worth it.
#    * Zeshy Global will need to look for "config.local" and, if extant,
#      source it *AFTER* sourcing "config". Fairly simple, eh?
#
#Here's an existing function prototype for such upgrading:
#
#declare_function_with_stdin <<'/---'
#void startup_zeshy_version(void)
#
#Ensure the cached Zeshy version corresponds to the current Zeshy version. If
#not, interactively usher the current user into the upgrade process.
#/---
#function startup_zeshy_version() {
#    # Validate sanity. If ignoring Zeshy's user directory, return silently.
#    die_if_args
#}

# ....................{ GETTERS                            }....................
#FIXME: Shift to a new component "version".
declare_function_with_stdin <<'/---'
float get_zeshy_version(void)

Get the current version of Zeshy as a comparable floating point number.
/---
function get_zeshy_version() {
    die_if_args
    return_string 0.01
}

# ....................{ LIFECYCLERS                        }....................
declare_function_with_stdin <<'/---'
void restart_zeshy(void)

Reload Zeshy. If the current user's Zeshy configuration or ${PATH} has
changed sufficiently from the current shell environment, this implicitly
recompiles the Zeshy digest file.
/---
function restart_zeshy() {
    # Validate sanity.
    die_if_args

    # Undefine a global previously defined by the main Zeshy script as a
    # safeguard against accidental Zeshy reloads. Since this reload is
    # intentional, remove such safeguard.
    undefine_variable_from ZESHY_PID_LAST_LOADED_BY

    # Source the main Zeshy script, thus reloading Zeshy.
    source_zeshy_script main
}

declare_function_with_stdin <<'/---'
void recompile_zeshy(void)

Recompile and reload Zeshy's user digest file, thus reloading Zeshy itself.
/---
function recompile_zeshy() {
    # Validate sanity.
    die_if_args

    # If compile_zeshy() is defined, call such function directly.
    if { is_function compile_zeshy } {
        compile_zeshy
    # Else, Zeshy's optional component "compile" has yet to be sourced. Do so,
    # thus implicitly calling compile_zeshy().
    } else {
        source_zeshy_script compile
    }
}

# ....................{ SOURCERS                           }....................
declare_function_with_stdin <<'/---'
void source_zeshy_script(string filename1, string filename2, ...)

Source the passed Zeshy scripts in the passed order, passing each such script no
arguments.
/---
function source_zeshy_script() {
    # Validate passed arguments.
    die_unless_args 'expected at least one filename'

    # Source such scripts.
    for filename ("${@}") {
        # If such filename is prefixed with no dirname and hence is only a
        # basename,  prefix such basename with Zeshy's top-level directory.
        is_string_contains "${filename}" '/' or
            filename="${ZESHY_HOME}/${filename}"
        source -- "${filename}"
    }
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_zeshy_version(void)

Print a human-readable synopsis of the current version of Zeshy.
/---
function print_zeshy_version() {
    die_if_args
    print_message "$(get_zeshy_version)"
}

# --------------------( WASTELANDS                         )--------------------
# ....................{ STARTUP                            }....................
#run_hook_on_zeshy_startup startup_zeshy_version
#
#declare_function_with_stdin <<'/---'
#void startup_zeshy_version(void)
#
#Ensure the cached Zeshy version corresponds to the current Zeshy version. If
#not, interactively usher the current user into the upgrade process.
#/---
#function startup_zeshy_version() {
#    # Validate sanity. If ignoring Zeshy's user directory, return silently.
#    die_if_args
#    is_string_nonempty "${ZESHY_DOT_DIR}" or return_success
#
#    #FUXME: Obviously, should be rewritten on upgrades. I believe we intend on
#    #testing for that somewhere, yes? Wherever we end up doing that, this
#    #function should obviously be integrated into such process.
#
#    # Cache the currently installed version of Zeshy if not already cached.
#    is_file "${ZESHY_USER_VERSION_FILE}" or
#        get_zeshy_version > "${ZESHY_USER_VERSION_FILE}"
#
#    #FUXME: Either shift somewhere more appropriate or rename this function to
#    #something more appropriate. It's pretty much just a grab-bag of
#    #miscellaneous startup code, at the moment.
#
#    # Make all other requisite paths for the current user.
#    make_dir_if_not_found "${ZESHY_USER_PID_DIR}"
#}
#
# ....................{ THEMES                             }....................
#declare_global_with_stdin <<'/---'
#string ZESHY_THEME
#
#Zeshy theme. By default, Zeshy comes bundled with:
#
#* "vanilla", the default Zeshy theme. A commendable choice, stalwart hero.
#
#Consider running print_zeshy_themes() for a human-readable list of currently
#available themes.
#/---
#ZESHY_THEME=vanilla

#* or  calling the external command returning such non-zero exit
#status. The definition of "documentation" depends on context.
#
#Function documentation includes all "#"-prefixed lines exactly preceding such
#function definition, themselves prefixed by either a blank line or start of
#the file (optionally followed by an ignored "# ....................{"-
#prefixed banner).
#
#Script documentation includes all "#"-prefixed lines at the top of such
#script implementation, excluding shebang lines (e.g., "#!/usr/bin/env zsh").

# ....................{ GETTERS ~ paths                    }....................
#FUXME: Rename to get_user_zeshy_dir(), in keeping with nomenclature elsewhere.
#FUXME: You know, there's really no deterministic means of reliably determining
#such path. Do we geniuinely require this function?

#declare_function_with_stdin <<'/---'
#string get_user_zeshy_dot_dir(string username = "$(get_user)")
#
#Get the absolute path of Zeshy's dot directory for the passed user (defaulting
#to the current user): e.g.,
#
#.get_user_zeshy_dot_dir()
#==========================================
#[source]
#------------------------------------------
#>>> get_user_zeshy_dot_dir lydia
#/home/lydia/.zeshy
#------------------------------------------
#==========================================
#/---
#function get_user_zeshy_dot_dir() {
#    die_unless_args_0_to_1 'expected optional username'
#    return_string "$(get_user_home "${1}")/${ZESHY_DOT_DIR_BASENAME}"
#}
#
# ....................{ SETUP                              }....................
#function setup_zeshy() {
#    if is_shell_interactive
#    then setup_if_interactive
#    else noop
#    fi
#}

# ....................{ SETUP ~ interactive                }....................
# Conditionally setup interactive-only commands, if installed.
#function setup_if_interactive_installed() {
#    is_pathable keychain and setup_keychain
#}

# If this shell is attached to a terminal device, set terminal-specific options.
#function setup_if_interactive() {
#   setup_mimetypes
#   setup_terminal
#   setup_theme_key_bindings
#   setup_theme_styles
#   setup_theme_prompt
#   setup_if_interactive_globals
#   setup_if_interactive_installed
#}

# Do so *AFTER*
    # sourcing the configuration files setting such paths.
#-- perhaps a new component of
    #"always/00-startup". There's really no profit in doing so here, is there?
#   setup_if_installed
# Conditionally setup non-interactive commands, if installed.
#function setup_if_installed() {
#    run_code_if_pathable setup_x
#}

#FUXME: Eventually, we'll have to add a setup hooks list and functions for
#adding setup hooks to such list. This is a hard requisite, as users may like to
#add new components not explicitly conceived of here. Assuming such a framework,
#no explicit tests are required here. It's also much easier to maintain, since
#it couples setup logic to the components implementing such functions.

# ....................{ SETUP ~ non-interactive            }....................
#function setup_if_non_interactive() {
#   print "process command name: $(get_process_command_name)"
#}

#   setup_interactive_gui_substitutions
#   else source "${ZESHY_HOME}/compile"
    #FUXME: Shift setting of "PAGER" to "terminal/output/pager".
#       PAGER="${PAGER:-"$(get_pathable_path_first less more)"}"
    # Set the default script name prior to all other logic, as any logic
    # raising an error requires this name for logging that error. Only do this
    # if the current process is not an interactive zsh shell as, in that case,
    # the get_call_stack_root_basename() function dynamically inspects the script name from
    # the function call stack.
    # Strip the filetype from this script's basename, if present.
#   string_global_export ZESHY_SCRIPT_NAME="${$(get_process_command_name)%%.*}"

    # Default the script name to "zeshy", if "zsh".
#   is "${ZESHY_SCRIPT_NAME}" == zsh si and ZESHY_SCRIPT_NAME=zeshy
