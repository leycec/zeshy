#!/usr/bin/env zsh
# ====================[ glob                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle globs matching list elements.

# ....................{ GETTERS                            }....................
#FIXME: Once we validate this works as expected, implement the converse
#get_last_list_element_matching() function by using flag "(R)" where we
#currently use flag "(r)".
# string get_first_list_element_matching(string list_name, string glob_pattern)
#
# Get the first list element matching the passed glob pattern in the list with
# the passed name.
function get_first_list_element_matching() {
    # Localize and validate arguments.
    die_unless_two_args 'expected one list name and one glob pattern'
    string list_name="${1}" glob_pattern="${2}" element
    die_unless_list "${list_name}"

    # Dismantled, this is:
    #
    # * 'P', the scalar name of the desired list in the caller's scope.
    # * '@', as a list rather than a scalar.
    # * 'r', expanding to the first element matching the passed pattern.
    element="${${(@P)list_name}[(r)"$glob_pattern"]}"

    # Throw an exception if no such element matches.
    die_unless_nonempty "${element}"\
        "pattern \"${glob_pattern}\" not matched in list \"${list_name}\""

    # Otherwise, return such element.
    output "${element}"
}

# ....................{ REMOVERS                           }....................
#FIXME: Order of function arguments is, arguably, somewhat ad hoc. Switch the
#source_list_name and glob arguments, perhaps?
# void remove_list_elements_matching(
#   string source_list_name, string glob,
#   string target_list_name = "${source_list_name}")
#
# Copy all elements of the passed source list *NOT* matching the passed glob
# into the passed target list (defaulting to the passed source list). If passed
# only two arguments, remove all matching source list elements "in-place." This
# function implements the inverse of retain_list_elements_matching().
function remove_list_elements_matching() {
    # Validate passed arguments.
    die_unless_two_or_three_args\
        'expected one source list name, one glob, and optional target list name'
    string source_list_name="${1}" __glob__="${2}" target_list_name
    target_list_name="${3:-${source_list_name}}"
    die_unless_list "${source_list_name}"
    die_unless_list "${target_list_name}"

    # Remove matching elements. Dismantled, this is:
    #
    # * ":#", removing all passed source list elements matching...
    # * "${~glob}", the passed glob as a glob rather than raw string.
    set_list_to_evaluation "${target_list_name}"\
        "\${${source_list_name}[@]:#\${~__glob__}}"
}

# void remove_list_elements_not_matching(
#   string source_list_name, string glob,
#   string target_list_name = "${source_list_name}")
#
# Copy all elements of the passed source list matching the passed glob into the
# passed target list (defaulting to the passed source list). If passed only two
# arguments, remove non-matching source list elements "in-place." This function
# implements the inverse of remove_list_elements_matching().
function remove_list_elements_not_matching() {
    # Validate passed arguments.
    die_unless_two_or_three_args\
        'expected one source list name, one glob, and optional target list name'
    string source_list_name="${1}" __glob__="${2}" target_list_name
    target_list_name="${3:-${source_list_name}}"
    die_unless_list "${source_list_name}"
    die_unless_list "${target_list_name}"

    # Remove matching elements. Dismantled, this is:
    #
    # * "(M)" and ":#", removing all passed source list elements not matching...
    # * "${~glob}", the passed glob as a glob rather than raw string.
    set_list_to_evaluation "${target_list_name}"\
        "\${(M)${source_list_name}[@]:#\${~__glob__}}"
}

# --------------------( WASTELANDS                         )--------------------
