#!/usr/bin/env zsh
# ====================[ boolean                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle boolean variables and values.

# ....................{ EXCEPTIONS                         }....................
document_function '
void die_unless_boolean(
  string variable_name,
  string error_message = "\"${variable_name}\" not a boolean")

Throw an exception unless the passed variable is a boolean. See is_boolean() for
further details.
'
function die_unless_boolean() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__dub="${1}"
    is_boolean "${variable_name__dub}" or
        die "${2:-\"${variable_name__dub}\" not a boolean}"
}

# ....................{ TESTERS                            }....................
#FIXME: Document that fact that all string variables satisfy such requirements.
#I believe we've documented this adequately (perhaps even brilliantly!) under
#"00-setup/00-alias", so pilfer that for helpful discussion.
document_function '
boolean is_boolean(string variable_name)

Return true if the passed variable is an boolean.
'
function is_boolean() {
    # Since booleans are currently indistinguishable from strings under Zsh,
    # defer to is_string().
    is_string "${@}"
}

# ....................{ TESTERS ~ value                    }....................
#FIXME: Bad. Accept string values rather than variable names, as is the
#standard for scalar types.
document_function '
boolean is_boolean_false(string variable_name)

Return true if the passed variable is a false boolean (i.e., empty string).
'
function is_boolean_false() {
    die_unless_arg 'expected one string'
    string variable_name="${1}"
    is_boolean "${variable_name}" and is -z "${(P)variable_name}" si
}

#FIXME: Bad. Accept string values rather than variable names, as is the
#standard for scalar types.
document_function '
boolean is_boolean_true(string variable_name)

Return true if the passed variable is a true boolean (i.e., non-empty string).
'
function is_boolean_true() {
    die_unless_arg 'expected one string'
    string variable_name="${1}"
    is_boolean "${variable_name}" and is -n "${(P)variable_name}" si
}

# --------------------( WASTELANDS                         )--------------------
