#!/usr/bin/env zsh
# ====================[ integer                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle string variables with integer values. As discussed in "doc/README.dev",
# integer variables suffer numerous deficiencies (e.g., forced casting of non-
# integer types to integer value 0, forced rounding down of float types).
# Since string variables suffer no such deficiencies and implicitly support
# integer values, Zeshy prefers string to integer variables. This component
# handles such strings.

# --------------------( WASTELANDS                         )--------------------
#FIXME: There's really no value in having the "_string" here; any function
#returning integers must necessarily return them as strings, so "_string" is
#redundantly confusing. (It implies there's another means of returning integers,
#which of course there isn't.) Hence, rename to get_integers_ranging().

#   string value="${1}"
#   is_string_integer "${value}" and (( value >= 0 ))
    #FUXME: Replace with the following equivalent but more efficiently clever test:
    #    is "${1}" == -<-> si
#   string value="${1}"
#   is_string_integer "${value}" and (( value < 0 ))

#FIXME: Let's be honest: this is all *INCREDIBLY* confusing. It confuses even
#me. Drop the "decimal" nonsense. Shift the contents of this file into
#"type/integer/integer" and delete this file. Rename functions as follows:
#
#* is_string() to is_string_integer().
#* is_string_integer_positive() to is_string_integer_positive().
#* is_string_integer_negative() to is_string_integer_positive().
#
#Rename die_unless_*() functions as above, as well.

#FIXME: Hmm. A tad excessive. Do we actually use these anywhere? Consider
#replacing with "type/integer" functions of the same name. Then, these are
#accessed via, say, $(KB) rather than ${KB}.

# For convenience, this function also accepts "stdin"-style piped input: e.g.,
#     echo 1776 | comma_separate_string #     1,776
