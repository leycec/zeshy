#!/usr/bin/env zsh
# ====================[ integer                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle integer variables and values.

# ....................{ EXCEPTIONS                         }....................
document_function '
void die_unless_integer(
  string variable_name,
  string error_message = "\"${variable_name}\" not an integer")

Throw an exception unless the passed variable is an integer.
'
function die_unless_integer() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__dui="${1}"
    is_integer "${variable_name__dui}" or
        die "${2:-\"${variable_name__dui}\" not an integer}"
}

document_function '
void die_unless_integer_positive(
  string variable_name,
  string error_message = "\"${variable_name}\" not a positive integer")

Throw an exception unless the passed variable is an integer > 0.
'
function die_unless_integer_positive() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duip="${1}"
    is_integer_positive "${variable_name__duip}" or
        die "${2:-\"${variable_name__duip}\" not a positive integer}"
}

document_function '
void die_unless_integer_nonnegative(
  string variable_name,
  string error_message = "\"${variable_name}\" not a nonnegative integer")

Throw an exception unless the passed variable is an integer >= 0.
'
function die_unless_integer_nonnegative() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duin="${1}"
    is_integer_nonnegative "${variable_name__duin}" or
        die "${2:-\"${variable_name__duin}\" not a nonnegative integer}"
}

# ....................{ TESTERS                            }....................
document_function '
boolean is_integer(string variable_name)

Return true if the passed variable is an integer.
'
function is_integer() {
    die_unless_arg 'expected one variable name'
    is_variable_type_match "${1}" 'integer*'
}

# ....................{ TESTERS ~ value                    }....................
#FIXME: Bad. Accept string values rather than variable names, as is the standard
#for scalar types. Of course, in that case, we'd might as well just shift all
#"string/integer" functionality here, renaming "string_integer" to simply
#"integer" everywhere. *ACTUALLY, THAT SOUNDS LIKE A BLOODY BRILLIANT IDEA.*
#Make it so, ensign.
document_function '
boolean is_integer_positive(string variable_name)

Return true if the passed variable is an integer > 0.
'
function is_integer_positive() {
    die_unless_arg 'expected one string'
    string variable_name__iip="${1}"
    is_integer "${variable_name__iip}" and (( ${(P)variable_name__iip} > 0 ))
}

document_function '
boolean is_integer_nonnegative(string variable_name)

Return true if the passed variable is an integer >= 0.
'
function is_integer_nonnegative() {
    die_unless_arg 'expected one string'
    string variable_name__iin="${1}"
    is_integer "${variable_name_iin}" and (( ${(P)variable_name__iin} >= 0 ))
}

# ....................{ SETTERS                            }....................
document_function '
void set_integer(string integer_name, integer number)

Set the passed integer to the passed value.
'
function set_integer() {
    # Validate passed arguments.
    die_unless_args_2 'expected one integer name and one integer'
    string integer_name__si="${1}"
    die_unless_integer "${integer_name__si}"

    # Set such integer.
    noop ${(P)integer_name__si::=${2}}
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: This now strikes me as rather wrong. Lists and maps are a reasonable
#rule to nomenclature rules as they can only be accessed by named; integers,
#floats, and other scalar types however are always accessible by their expanded
#values. Consequently, it strikes me as *MUCH* more intuitive to rename
#die_unless_integer() and is_integer() to die_unless_variable_integer() and
#is_variable_integer(). Then excise the is_integer_*() functions; they're
#superfulous, really. Replace them with calls to similar is_string_integer_*()
#functions -- *WHICH BY THE WAY SHOULD THEMSELVES BE RENAMED BACK TO
#is_integer_*() BUT STILL OPERATE ON EXPANDED STRING SCALARS* and probably
#consequently shifted back into this component.
#
#O.K.; so, we have two nomenclature styles insofar as variables are concerned:
#
#* Scalar-specific functions accepting typeless scalar values.
#* Non-scalar-specific functions accepting typed variable names.
#
#This is perfectly fine and in fact necessary. But don't confuse the two. Stay
#consistent. Let's fix this up, eh? We should document this design decision
#somewhere -- it's rather core.
#FUXME: Actually, consistency *ABSOLUTELY* takes precedence. Ignore all of the
#above.

# (i.e., constrained to natural numbers and
# negatives of such numbers)
