#!/usr/bin/env zsh
# ====================[ type                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Inspect generic types and values.

# ....................{ EXCEPTIONS                         }....................
# void die_if_empty(string text, string error_message) --OR--
# void die_unless_nonempty(string text, string error_message)
#
# Throw an exception unless the passed string is non-empty. Since no default
# error message reasonably describes such error, an error message must be
# passed. While trivial, this function is implemented for consistency.
function die_if_empty die_unless_nonempty() {
    die_unless_two_args 'expected one string and one error message'
    is_nonempty "${1}" or die "${2}"
}

# ....................{ TESTERS                            }....................
#FIXME: Replace all reference to the following two functions with reference to
#is_variable_empty() and is_variable_nonempty().
# boolean is_empty(string text)
#
# Return true if the passed string is empty (i.e., either "0" or "").
function is_empty() {
    die_unless_one_arg 'expected one string'
    is -z "${1#0}" si
}

# boolean is_nonempty(string text)
#
# Return true if the passed string is non-empty (i.e., neither "0" or "").
function is_nonempty() {
    die_unless_one_arg 'expected one string'
    is -n "${1#0}" si
}

# ....................{ GETTERS                            }....................
# string get_type(string name)
#
# Get the type of the passed variable or runnable (e.g., "string", "alias").
function get_type() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one object name'
    string name="${1}"

    # Get such type depending on whether a variable or runnable.
    if is_variable "${name}"
    then get_variable_type "${name}"
    elif is_runnable "${name}"
    then get_runnable_type "${name}"
    else die "\"${name}\" not an alias, builtin, command, function, or variable"
    fi
}

# --------------------( WASTELANDS                         )--------------------
    # Otherwise, this object is a callable or does not exist. Determine which by
    # calling whence() and stripping the resulting string of the prefix
    # Where the latter, throw an exception.
    # and stripping the resulting string of the prefix
    # consisting only of that name (e.g., assuming object with passed name "dmt"
    # a Zsh function, stripping "dmt: function" to merely "function"). If no
    # such callable exists, whence() outputs a type of "none" with non-zero exit
    # status thus throwing an exception.
