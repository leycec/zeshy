#!/usr/bin/env zsh
# ====================[ profile                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle profiling of runnables (e.g., aliases, commands, functions).

# ....................{ RUNNERS                            }....................
# string run_profiled(
#   string command_name, string command_arg1, string command_arg2, ...)
#
# Run the passed command, profiled. After running such command, print a human-
# readable profile of all Zsh functions called by such command to standard
# error to guarantee expected behavior under process substitution.
function run_profiled() {
    # Validate passed arguments.
    die_unless_args 'expected one command'

    # Temporarily load module "prof", thus initiating profiling.
    load_zsh_module zsh/prof

    {
        # Run such command.
        run "${@}"

        # Print such profile to standard error. Avoid calling
        # run_redirected_to_standard_error() to avoid slowing down profiling.
        zprof 1>&2
    # Always unload module "prof", thus terminating profiling.
    } always {
        unload_zsh_module zsh/prof
    }
}

#FIXME: Shouldn't this be run_with_progress_bar()? Much more intelligible, and
#straight forward.
# string run_with_progress_timer(
#   string command_name, string command_arg1, string command_arg2, ...)
#
# Run the passed command, printing a progress timer on standard error displaying
# how many seconds have elapsed since running such command. Consider calling
# this function on silent and/or slow commands (e.g., "ntpd -q -s",
# synchronizing the local system time against remote time servers but displaying
# no progress while doing so).
function run_with_progress_timer() {
    # Validate passed arguments.
    die_unless_args 'expected one command'

    #FIXME: If "pv" is *NOT* installed, are there any respectable alternatives?
    #Surely we could cobble together a weak pure-Zsh solution, no? I wonder if
    #anything similar's been done in bash, actually...

    # Prefer "pv", the pipe viewer.
    if is_pathable pv
    then run "${*} | pv -t"
#   then print "progress_time: ${@}"; run "${@} | pv -t"
    # Otherwise, simply run the passed command.
    else run "${@}"
    fi
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: This component's getting a bit long in the tooth. Contemplate shifting
#such functions to "os/time/run".
