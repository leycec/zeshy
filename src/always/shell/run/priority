#!/usr/bin/env zsh
# ====================[ priority                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle process prioritization.

# ....................{ GLOBALS ~ nice                     }....................
document_global '
integer ZESHY_NICE_PRIORITY_LOW

"nice"-specific lowest priority for CPU-based process scheduling.
'
ZESHY_NICE_PRIORITY_LOW=19

document_global '
integer ZESHY_NICE_PRIORITY_HIGH

"nice"-specific highest priority for CPU-based process scheduling.
'
ZESHY_NICE_PRIORITY_HIGH=-20

# ....................{ GLOBALS ~ ionice                   }....................
document_global '
integer ZESHY_IONICE_CLASS_IDLE_ONLY

"ionice"-specific lowest priority class for I/O-based process scheduling. The
kernel schedules processes assigned to such class on an idle-only basis (i.e.,
only if no other process demands I/O). Such processes are likely to suffer
resource starvation and hence appropriate only for background daemons.
'
ZESHY_IONICE_CLASS_IDLE_ONLY=3

document_global '
integer ZESHY_IONICE_CLASS_BEST_EFFORT

"ionice"-specific default priority class for I/O-based process scheduling.
Assigning processes other priority classes either induces resource starvation
(e.g., under both ${ZESHY_IONICE_CLASS_IDLE_ONLY} and
${ZESHY_IONICE_CLASS_REAL_TIME}) or is prohibited to non-superusers (e.g., under
${ZESHY_IONICE_CLASS_REAL_TIME}). Most process should be assigned to this
default priority class.
'
ZESHY_IONICE_CLASS_BEST_EFFORT=2

document_global '
integer ZESHY_IONICE_CLASS_REAL_TIME

"ionice"-specific highest priority class for I/O-based process scheduling. The
kernel schedules processes assigned to such class on a realtime basis (i.e.,
first in the scheduling queue, regardless of whether another process demands
I/O). Such processes may impose resource starvation on other processes and are
hence appropriate only for core foreground tasks.
'
ZESHY_IONICE_CLASS_REAL_TIME=1

document_global '
integer ZESHY_IONICE_CLASS_PRIORITY_LOW

"ionice"-specific lowest subclass priority for I/O-based process scheduling,
ranging from 0 to 7. Process assigned to class ${ZESHY_IONICE_CLASS_IDLE_ONLY}
ignore such priority; all other classes accept such priority.
'
ZESHY_IONICE_CLASS_PRIORITY_LOW=7

document_global '
integer ZESHY_IONICE_CLASS_PRIORITY_HIGH

"ionice"-specific highest subclass priority for I/O-based process scheduling,
ranging from 0 to 7. Process assigned to class ${ZESHY_IONICE_CLASS_IDLE_ONLY}
ignore such priority; all other classes accept such priority.
'
ZESHY_IONICE_CLASS_PRIORITY_HIGH=0

# ....................{ RUNNERS                            }....................
document_function '
string run_with_priority(
  string command_name, string command_arg1, string command_arg2, ...,
  integer nice_priority, integer ionice_class, integer ionice_class_priority)

Run the passed command under the passed "nice" and "ionice" priorities if
"ionice" is under ${PATH} or the passed "nice" priority otherwise.
'
function run_with_priority() {
    # Validate passed arguments.
    die_unless_args_4_or_more\
        'expected one command, one nice priority, one ionice class, and one ionice class priority'
    string\
        nice_priority="${1}"\
        ionice_class="${2}"\
        ionice_class_priority="${3}"
    #FIXME: Should also ensure such integers to be properly bounded.
    die_unless_string_integers\
        "${nice_priority}" "${ionice_class}" "${ionice_class_priority}"
    behead_args_3

    # Command line to be run, prefixed by commands prioritizing the passed
    # command. All systems provide "nice" but not necessarily "ionice".
    list command_line; command_line=( nice -n${nice_priority} )
    is_pathable ionice and command_line+=( ionice
        -c${ionice_class}
        -n${ionice_class_priority}
    )

    # Run such line.
    command_line+=( "${@}" )
    run "${command_line[@]}"
}

document_function '
string run_with_priority_lowest(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command "slowly" under deprioritized CPU and I/O scheduling.
'
function run_with_priority_lowest() {
    die_unless_args 'expected one command'
    run_with_priority\
        "${@}"\
        ${ZESHY_NICE_PRIORITY_MIN}\
        ${ZESHY_IONICE_CLASS_BEST_EFFORT}\
        ${ZESHY_IONICE_CLASS_PRIORITY_MIN}
}

document_function '
string run_with_priority_highest(
  string command_name, string command_arg1, string command_arg2, ...)

Run the passed command "quickly" under prioritized CPU and I/O scheduling.
'
function run_with_priority_highest() {
    die_unless_args 'expected one command'
    run_with_priority\
        "${@}"\
        ${ZESHY_NICE_PRIORITY_MAX}\
        ${ZESHY_IONICE_CLASS_BEST_EFFORT}\
        ${ZESHY_IONICE_CLASS_PRIORITY_MAX}
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to run_with_priority() and reorder arguments, accepting such
#command prior to such integers.
#integer_global_export\
#    ZESHY_NICE_PRIORITY_LOW\
#    ZESHY_NICE_PRIORITY_HIGH\
#    ZESHY_IONICE_CLASS_LOW\
#    ZESHY_IONICE_CLASS_HIGH\
#    ZESHY_IONICE_CLASS_PRIORITY_LOW\
#    ZESHY_IONICE_CLASS_PRIORITY_HIGH
