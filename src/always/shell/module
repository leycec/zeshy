#!/usr/bin/env zsh
# ====================[ shell                              ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle Zsh modules.
#
# --------------------( SEE ALSO                           )--------------------
# "os/kernel"
#   Handles *nix kernel modules.

# ....................{ TESTERS                            }....................
#FIXME: Uhm; how actually does one do this? The Zsh manual explicitly suggests
#the best method is:
#
#    run_silently zmodload "${1}"
#
#But this is demonstrably silly. A test method shouldn't actually have non-
#idempotent side effects.

# void is_module(string module_name)
#
# Return true if Zsh provides some module with the passed name.
#is_module() {
#    die_unless_arg 'expected one module name'
#    zmodload "${1}"
#}

# ....................{ LOADERS                            }....................
# void load_zsh_module(string module_name)
#
# Load the passed Zsh module.
function load_zsh_module() {
    die_unless_arg 'expected one module name'
    zmodload -- "${1}"
}

# void unload_zsh_module(string module_name)
#
# Unload the passed Zsh module.
function unload_zsh_module() {
    # Dismantled, this is:
    #
    # * "u", unloading this module.
    # * "i", a noop if this module is not currently loaded.
    die_unless_arg 'expected one module name'
    zmodload -ui -- "${1}"
}

# ....................{ RUNNERS                            }....................
#FIXME: Rename to run_with_mapfile() and similarly below.
# string run_with_mapfile(
#   string command_name, string command_arg1, string command_arg2, ...)
#
# Run the passed command with the Zsh "mapfile" module loaded before and
# unloaded after running the command. "mapfile" is inherently unsafe; in
# particular, unsetting list elements permanently and silently deletes files
# with the same name as such elements. On the other hand, "mapfile" is slightly
# more efficient than safer alternatives (e.g., "$(< "${filename}")"). This
# function renders "mapfile" somewhat safer but not necessarily safe. Please
# exercise caution when calling this function *AND FOR HEAVEN'S SAKE *NEVER*
# MANUALLY LOAD* "mapfile".
function run_with_mapfile() {
    #FIXME: When enabled, this sporadically fails with an inscrutible error like:
    #    "(anon):82: bad math expression: operand expected at `/usr/share...'"
    #File a bug report if this is still the case under recent Zsh versions.
    # Forcibly prevent harmful ${mapfile} and hence filesystem changes.
#   freeze_variable mapfile

    # Run the passed command.
    load_zsh_module zsh/mapfile
    {
        run "${@}"
    } always {
        unload_zsh_module zsh/mapfile
    }
}

# --------------------( WASTELANDS                         )--------------------
# void load_mapfile(void)
#
# Load Zsh module "mapfile". This module is *INHERENTLY* dangerous; in
# particular, unsetting list elements permanently and silently deletes files
# with the same name as such elements. To prevent accidental calamity, either:
#
# * If possible, call run_with_mapfile() rather than this function, which safely
#   handles such lifecycle issues for you.
# * Otherwise, unload "mapfile" immediately after use via unload_mapfile().
#function load_mapfile() {
#    load_zsh_module zsh/mapfile
#}

# void unload_mapfile(void)
#
# Unload Zsh module "mapfile". See load_mapfile().
#function unload_mapfile() {
#    unload_zsh_module zsh/mapfile
#}

