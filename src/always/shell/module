#!/usr/bin/env zsh
# ====================[ shell                              ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Module, handling Zsh modules. For kernel module handling, see
# "os/kernel".

# ....................{ TESTS                              }....................
#FIXME: Uhm; how actually does one do this? The Zsh manual explicitly suggests
#the best method is:
#
#    quietly zmodload "${1}"
#
#But this is demonstrably silly. A test method shouldn't actually have non-
#idempotent side effects.

# void is_module(char *module_name)
#
# Return true if Zsh provides some module with the passed name.
#is_module() {
#    die_unless_one_arg 'expected one module name'
#    zmodload "${1}"
#}

# ....................{ LOADERS                            }....................
# void load_zsh_module(char *module_name)
#
# Load the Zsh module with the passed name.
load_zsh_module() {
    die_unless_one_arg 'expected one module name'
    zmodload -- "${1}"
}

# void unload_zsh_module(char *module_name)
#
# Unload the Zsh module with the passed name.
unload_zsh_module() {
    die_unless_one_arg 'expected one module name'

    # Dismantled, this is:
    #
    # * "u", unloading this module.
    # * "i", a noop if this module is not currently loaded.
    zmodload -ui -- "${1}"
}

# ....................{ LOADERS ~ mapfile                  }....................
# char *run_with_mapfile(
#   char *command_name, char *command_arg1, char *command_arg2, ...)
# 
# Run the passed command with the Zsh "mapfile" module loaded before and
# unloaded after running the command. "mapfile" is inherently unsafe, though
# more efficient than alternatives (e.g., "$(< ${filename})"), and so should be
# available only as long as is necessary.
run_with_mapfile() {
    #FIXME: When enabled, this sporadically fails with an inscrutible error like:
    #    "(anon):82: bad math expression: operand expected at `/usr/share...'"
    #File a bug report if this is still the case under recent Zsh versions.
    # Forcibly prevent harmful ${mapfile} and hence filesystem changes.
#   freeze_variable mapfile

    # Run the passed command.
    load_mapfile
    run "${@}"
    unload_mapfile
}

# void load_mapfile(void)
#
# Load Zsh module "mapfile". This module is *INHERENTLY* dangerous; in
# particular, unsetting list elements permanently and silently deletes files
# with the same name as such elements. To prevent accidental calamity, either:
#
# * If possible, call run_with_mapfile() rather than this function, which safely
#   handles such lifecycle issues for you.
# * Otherwise, unload "mapfile" immediately after use via unload_mapfile().
load_mapfile() {
    load_zsh_module zsh/mapfile
}

# void unload_mapfile(void)
#
# Unload Zsh module "mapfile". See load_mapfile().
unload_mapfile() {
    unload_zsh_module zsh/mapfile
}

# ....................{ WASTELANDS                         }....................

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
