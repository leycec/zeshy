#!/usr/bin/env zsh
# ====================[ runnable                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Inspect runnable names, types, values, and related metadata. Runnables are run
# when in command position (i.e., when the first shell word of a command line),
# comprising the following types:
#
# * Zsh aliases (e.g., "return_exit_status").
# * Zsh functions (e.g., "get_zeshy_version").
# * Zsh builtins (e.g., "print").
# * Zsh operators (e.g., "[[").
# * External commands in the current user's ${PATH} (e.g., "ls").

# ....................{ EXCEPTIONS                         }....................
# void die_unless_runnable(
#   string name, string error_message = 'not runnable')
#
# Throw an exception unless a runnable (i.e., external command, Zsh alias,
# Zsh builtin, or Zsh function) with the passed name exists.
function die_unless_runnable() {
    die_unless_one_or_two_args\
        'expected one object name and optional error message'
    string name="${1}"
    is_runnable "${name}" or die "${2:-\"${name}\" not runnable}"
}

# ....................{ TESTERS                            }....................
# boolean is_runnable(string name)
#
# Return true if the passed runnable exists.
function is_runnable() {
    die_unless_one_arg 'expected one name'
    run_quietly whence -- "${1}"
}

# boolean is_runnable_type(string runnable_name, string runnable_type)
#
# Return true if the passed runnable is of the passed type: e.g.,
#
#     >>> alias thomas_migley_jr='he who destroys ozone'
#     >>> is_runnable_type thomas_migley_jr alias and print 'yet lives'
#     yet lives
function is_runnable_type() {
    # Validate passed arguments.
    die_unless_two_args 'expected one runnable name and one type'
    string runnable_name="${1}" test_type="${2}"

    # If such runnable exists, match such runnable's type.
    is_runnable "${runnable_name}" and {
        string true_type; true_type="$(get_runnable_type "${runnable_name}")"
        is "${test_type}" == "${true_type}" si
    }
}

# ....................{ TESTS ~ types                      }....................
# boolean is_builtin(string builtin_name)
#
# Return true if the passed Zsh builtin exists.
function is_builtin() {
    die_unless_one_arg 'expected one name'
    is_runnable_type "${1}" 'builtin'
}

# boolean is_reserved(string reserved_name)
#
# Return true if the passed Zsh reserved exists.
function is_reserved() {
    die_unless_one_arg 'expected one name'
    is_runnable_type "${1}" 'reserved'
}

# --------------------( GETTERS                            )--------------------
# string get_runnable_type(string runnable_name)
#
# Get the type of the passed runnable: e.g.,
#
#     >>> alias thomas_migley_jr='he who destroys ozone'
#     >>> get_runnable_type thomas_migley_jr
#     alias
#
# Specifically, if such runnable is:
#
# * A Zsh alias, this is "alias".
# * A Zsh function, this is "function".
# * A Zsh builtin (e.g., print()), this is "builtin".
# * A Zsh operator (e.g., "[["), this is "reserved".
# * An external command in the current user's ${PATH}, this is "command".
function get_runnable_type() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one runnable name'

    # "$(whence -w -- "${1}")" prints strings of the form "${1}: ${object_type}"
    # (e.g., "stonesoup: command"), where "${object_type}" is either "alias",
    # "command", "function", or "none". In the latter case, such command returns
    # non-zero exit status implicitly throwing an exception.
    string object_type; object_type="$(whence -w -- "${1}")"
    output "${object_type##*: }"
}

# --------------------( WASTELANDS                         )--------------------
#   is $(whence -w "${1}") == *': (alias|builtin|function)' si
#   string builtin_name="${1}"
#   is_runnable "${builtin_name}" and {
#       string type; type="$(get_runnable_type "${builtin_name}")"
#       "$(whence -w -- "${1}")" == *': builtin' si
#   }
