#!/usr/bin/env zsh
# ====================[ encoding                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle pathname encoding.

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'-\-'
string convert_string_to_pathname_hexadecimal_encoded_minimally_for_unix(
    string text)

Encode the passed string to a pathname permissible on UNIX filesystems by
encoding reserved characters and pathnames in printf()-compatible hexadecimal
format (i.e., `\xNN`, where `NN` is the ASCII code point in hexadecimal of the
character to be encoded). Call
convert_string_from_pathname_hexadecimal_encoded() to decode such pathnames:
e.g.,

.convert_string_to_pathname_hexadecimal_encoded_minimally_for_unix()
==========================================
[source]
------------------------------------------
>>> string party="oil/ war\ and the fate of industrial societies"
>>> convert_string_to_pathname_hexadecimal_encoded_minimally_for_unix "${party}"
oil\x2F war\x5C and the fate of industrial societies
>>> convert_string_from_pathname_hexadecimal_encoded "$(\
...     convert_string_to_pathname_hexadecimal_encoded_minimally_for_unix\
...         "${party}")"
oil/ war\ and the fate of industrial societies
------------------------------------------
==========================================

While remarkably permissive by compare to non-UNIX filesystems, UNIX filesystems
reserve pathnames `.` and `..` for use in constructing relative pathnames; thus,
this encodes `.` to `\x2E` and `..` to `\x2E\x2E`. Likewise, UNIX filesystems
reserve character `/` for the directory separator and the null character for the
pathname terminator; thus, this encodes `/` to `\x2F` and null characters to
`\x00`. To avoid accidentally converting `\`-prefixed substrings on decode, this
function additionally encodes `\` to `\x5C`.

This function encodes no other characters and hence does _not_ perform full
hexadecimal encoding (also referred to as *percent* or *URI encoding*). See
convert_string_to_string_percent_encoded() for such functionality.
-\-
function convert_string_to_pathname_hexadecimal_encoded_minimally_for_unix() {
    # Validate passed arguments.
    die_unless_args 'expected at least one string'
    string pathname="${*}"

    # If such path is either "." or "..", manually hexadecimal encode such path.
    if is "${pathname}" == ('.'|'..') si {
       pathname='\x2E'
       is "${pathname}" == '..' si and pathname="${pathname}${pathname}"
    # Else if such path contains either "/" , "\", or a null, hexadecimal encode
    # all such characters. For efficiency, inline such replacements.
    } elif is "${pathname}" == *('/'|'\'|"${ZESHY_ASCII_NULL}")* si {
        # Right. So we actually have to encode *ALL* "\" characters, not merely
        # "\" preceding "x" characters. Why? Because efficiently decoding such
        # strings below passes them through "echo -e", which recognizes all
        # escape codes. That's bad, in this case, because it implies "\"-prefixed
        # substrings (e.g., "\n") would be erroneously converted on decoding. So,
        # we escape all such substrings here to prevent erroroneous decoding.
        pathname="${${${pathname//\//\x2F}//${ZESHY_ASCII_NULL}/\x00}//\\/\x5C}"
    }

    # Get such path.
    return_string "${pathname}"
}

declare_function_with_stdin <<'-\-'
string convert_string_from_pathname_hexadecimal_encoded(string text)

Decode the passed hexadecimal-encoded pathname back to the original string. See
the convert_string_to_pathname_hexadecimal_encoded_*() family of functions for
further details (e.g.,
convert_string_to_pathname_hexadecimal_encoded_minimally_for_unix()).
-\-
function convert_string_from_pathname_hexadecimal_encoded() {
     die_unless_arg 'expected one string'
     echo -e "${1}"
}

# --------------------( WASTELANDS                         )--------------------
