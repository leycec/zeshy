#!/usr/bin/env zsh
# ====================[ size                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy List, handling file and directory sizes (i.e., disk usage).

# ....................{ ALIASES                            }....................
interactive_alias du='list_path_size_sorted'

# ....................{ GETTERS                            }....................
# integer get_path_size(string pathname)
#
# Get the size in bytes of the passed path. If such path is:
#
# * A directory, this is the recursive disk usage reported by the "du" command.
# * A symbolic link, this is the non-dereferenced file size of such link. To get
#   the dereferenced file or directory size of the non-symbolic target of such
#   link, explicitly call canonicalize_path() prior to this function.
# * Anything else (e.g., device node, plain file), this is the typical file size
#   reported by the "stat" command.
#
# Regardless of type, such size is always the physical space allocated to such
# path by the filesystem containing such path and *NOT* the logical space such
# path pretends to consume (e.g., due to contiguous runs of logical zeroes in
# the case of sparse files).
get_path_size() {
    # Validate passed arguments.
    die_unless_args_1 'expected one pathname'
    string pathname="${1}"
    die_unless_path "${pathname}"

    # If the passed path is a directory, get its recursive disk usage.
    # Dismantled, this is:
    #
    # * "-s", a summary of the form "4815162342 /the/numbers".
    # * "-B1", in bytes rather than the default kilobytes.
    # * "[(w)1]", the first word and hence size in bytes.
    if is_dir "${pathname}"; then
        string disk_usage_summary="$(command du -s -B1 "${pathname}")"
        print_string ${disk_usage_summary[(w)1]}
    # Otherwise, the passed path is a non-directory file (e.g., symbolic link,
    # device node, plain file). Dismantled, this is:
    #
    # * "-L", preserving rather than dereferencing symbolic links. (In contrast
    #   to some commands, zstat() dereferences by default.)
    # * "+size", expanding to such file's size in bytes.
    else zstat -L +size "${pathname}"
    fi
}

# ....................{ PRINTERS                           }....................
# string list_path_size(string pathname1, string pathname2, ...)
#
# List disk usage for the passed paths (defaulting to the current directory)
# recursively.
list_path_size() {
    run_with_options 'run_paged command du' 'ZESHY_DU_OPTIONS' "${@}"
}

# string list_path_size_sorted(string pathname1, string pathname2, ...)
#
# List disk usage for the passed paths (defaulting to the current directory)
# recursively, sorted by descending usage.
list_path_size_sorted() {
    run_with_options "run_paged 'command du" 'ZESHY_DU_OPTIONS' "${@}"\
        "| sort -hr'"
}

# --------------------( WASTELANDS                         )--------------------
# * Symbolic link, this is the dereferenced size of the non-symbolic link such
#   link transitively links to (i.e., of the eventual target file or directory).
#Dismantled, this is:
    #
    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.
#   else zstat -L +size "${pathname}"
#FIXME: Rename to list_path_size*() in conformance with get_path_size().
