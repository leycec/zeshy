#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *unglobbed qualifiers* (i.e., `(#q`- and `)`-delimited expressions
suffixing one or more pathnames).

== See Also ==

* Section ``Glob Qualifiers'' of `man zshexpn`, documenting such qualifiers.
* @{glob/path/qualifier}, a parcel handling path qualifiers prefixed by path-
  specific globs and hence requiring early-time compilation of function
  attribute `<globbable>`.
/---

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_path_matches_qualifier(
    string pathname1, string pathname2, ...,
    string glob_qualifier)

Return success if all passed paths match the passed glob qualifier. See
set_list_to_paths_globbed_matching_qualifier() for further details: e.g.,

.is_path_matches_qualifier()
==========================================
[source]
------------------------------------------
>>> string on_dependency=\
...    "We live in a society exquisitely dependent on science and technology, in
...     which hardly anyone knows anything about science and technology. This is
...     a clear prescription for disaster. It's dangerous and stupid for us to
...     remain ignorant about global warming, say, or ozone depletion, toxic and
...     radioactive wastes, acid rain. Jobs and wages depend on science and
...     technology... What about fusion, supercomputers, abortion, massive
...     reductions in strategic weapons, addiction, high-resolution TV, airline
...     and airport safety, food additives, animal rights, superconductivity,
...     Midgetman vs. rail-garrison MX missiles, going to Mars, finding cures
...     for AIDS and cancer? How can we decide national policy if we don't
...     understand the underlying issues?"
>>> make_file on_ignorance on_understanding
>>> is_path_matches_qualifier on_ignorance on_understanding '-L0' and
...     get_string_line "${on_dependency}" 1
We live in a society exquisitely dependent on science and technology, in
------------------------------------------
==========================================
/---
function is_path_matches_qualifier() {
    # Validate sanity.
    die_unless_args 'Expected one or more pathnames.'
    string qualifier="${@[-1]}"
    list pathnames
    pop_arg

    # Filter non-regular files from such paths.
    set_list_to_paths_matching_qualifier pathnames "${@}" "${qualifier}"
#   output_string "pathnames: ${*}; filtered: ${pathnames[*]}"

    # If no such paths were excluded, return success; else, failure. For
    # efficiency, inline such implementation.
    (( ${#pathnames} == ${#@} ))
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] get_path_matching_qualifier_first_if_found(
    string pathname1, string pathname2, ...,
    string glob_qualifier)

Get the first passed path that exists _and_ matches the passed glob qualifier or
return failure if no such path exists. See
set_list_to_paths_globbed_matching_qualifier() for further details: e.g.,

.get_path_matching_qualifier_first_if_found()
==========================================
[source]
------------------------------------------
>>> get_path_matching_qualifier_first_if_found /etc/[a-z]##tab u0
/etc/crontab
------------------------------------------
==========================================
/---
function get_path_matching_qualifier_first_if_found() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more pathnames and one glob qualifier.'
    list pathnames

    # If at least one pathname matches, get the first; else, fail.
    set_list_to_paths_matching_qualifier pathnames "${@}"
    is_list_nonempty pathnames and output_string "${pathnames[1]}"
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_list_to_paths_matching_qualifier(
    string list_name,
    string pathname1, string pathname2, ...,
    string glob_qualifier)

Set the passed list to the subset of passed paths that exist _and_ match the
passed glob qualifier. See set_list_to_paths_globbed_matching_qualifier() for
further details: e.g.,

.set_list_to_paths_matching_qualifier()
==========================================
[source]
------------------------------------------
>>> list system_kernel_files
>>> set_list_to_paths_matching_qualifier\
...      system_kernel_files /sys/kernel/[a-z]## -.u0^w
>>> output_string "${system_kernel_files[1,3]}"
/sys/kernel/fscaps /sys/kernel/notes /sys/kernel/vmcoreinfo
------------------------------------------
==========================================
/---
function set_list_to_paths_matching_qualifier() {
    # Validate sanity.
    die_unless_args_3_or_more\
        'Expected one list name, one or more pathnames, and one glob qualifier.'
    string list_name__sltpmq="${1}" qualifier__sltpmq="${@[-1]}"
    list pathnames__sltpmq
    shift_arg
    pop_arg

    # List of pathnames to be matched, explicitly named for use below.
    pathnames__sltpmq=( "${@}" )

    # Delimit such qualifier, if not already.
    qualifier__sltpmq="$(convert_string_to_glob_qualifier\
        "${qualifier__sltpmq}")"
#   output_string "pathnames: ${pathnames__sltpmq}"
#   output_string "qualifier: ${qualifier__sltpmq}"

    # Perform such match.
    set_list_to_evaluation ${list_name__sltpmq}\
        '${^pathnames__sltpmq}${~qualifier__sltpmq}'
}

# --------------------( WASTELANDS                         )--------------------
