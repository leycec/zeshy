#!/usr/bin/env zsh
# ====================[ copy                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path copying.

# ....................{ COPIERS                            }....................
declare_function '
void copy_path(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Silently copy the passed source paths to the passed target path. If any source
path does not exist, throw an exception. If any source path is a symbolic link
broken after such copy, print a warning.
'
function copy_path() {
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'
    run_command_silent_with_options 'command cp' ZESHY_CP_OPTIONS -- "${(q)@}"
    cry_if_link_symbolic_broken_after_copy_or_move_path "${@}"
}

declare_function '
void copy_path_with_options(
  string cp_option1, string cp_option2, ...,
  string source_pathname1, string source_pathname2, ...,
  string target_pathname = "$(get_current_dir)")

Copy the passed source paths to the passed target path (defaulting to the current
directory), with both the passed and currently configured "cp"-specific options.
See copy_path() for further details.
'
function copy_path_with_options() {
    # Validate passed arguments. If passed only one source path, default the
    # target path to the current directory.
    die_unless_args_1_or_more\
        'expected at least one source pathname and optional target pathname'
    set_integers_to_arg_nonoption_count_and_first_index_from\
        'arg_nonoption_count arg_nonoption_first_index'
    (( arg_nonoption_count == 1 )) and append_arg "$(get_current_dir)"

    # Copy such paths, printing warnings for symbolic links broken by such copy.
    run_command_with_options_configured 'command cp' ZESHY_CP_OPTIONS "${(q)@}"
    cry_if_link_symbolic_broken_after_copy_or_move_path\
        "${@[${arg_nonoption_first_index},-1]}"
}

# ....................{ COPIERS ~ recursive                }....................
declare_function '
void copy_path_recursively(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Silently copy the passed source paths to the passed target path recursively. See
copy_path() for further details.
'
function copy_path_recursively() {
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'
    run_command_silent_with_options 'command cp'\
        'ZESHY_CP_OPTIONS ZESHY_CP_OPTIONS_IF_RECURSIVE' -- "${(q)@}"
}

declare_function '
void copy_path_recursively_with_options(
  string cp_option1, string cp_option2, ...,
  string source_pathname1, string source_pathname2, ...,
  string target_pathname = "$(get_current_dir)")

Copy the passed source paths to the passed target path (defaulting to the current
directory), with both the passed and currently configured "cp"-specific options.
See copy_path() for further details.
'
function copy_path_recursively_with_options() {
    # Validate passed arguments. If passed only one source path, default the
    # target path to the current directory.
    die_unless_args_1_or_more\
        'expected at least one source pathname and optional target pathname'
    set_integers_to_arg_nonoption_count_and_first_index_from\
        'arg_nonoption_count arg_nonoption_first_index'
    (( arg_nonoption_count == 1 )) and append_arg "$(get_current_dir)"

    # Copy such paths. For efficiency, avoid printing warnings for symbolic
    # links broken by such copy. (The number of copied files to be tested for
    # such "brokenness" often exceeds tolerable limits.)
    run_command_with_options_configured 'command cp'\
        'ZESHY_CP_OPTIONS ZESHY_CP_OPTIONS_IF_RECURSIVE' "${(q)@}"
}


# ....................{ COPIERS ~ physical                 }....................
# Avoid defining copy_path_deeply_with_options(), as such function is unlikely
# to be called interactively.

declare_function '
void copy_path_deeply(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Silently copy the passed source path to the passed target path deeply (i.e.,
copying the transitive targets of source symbolic links rather than such links).
See copy_path() for further details.
'
function copy_path_deeply() {
    # Validate passed arguments.
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'

    # Copy such paths. Since this never copies symbolic links, avoid testing for
    # broken symbolic links.
    run_command_silent_with_options 'command cp'\
        'ZESHY_CP_OPTIONS ZESHY_CP_OPTIONS_IF_DEEP' -- "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Implement copy_path_recursively_with_options().
#declare_function '
#void copy_path_recursively(
#  string source_pathname1, string source_pathname2, ...,
#  string target_pathname)
#
#Silently copy the passed source paths to the passed target path recursively. See
#copy_path() for further details.
#'
#function copy_path_recursively() {
#    #FUXME: O.K.; great idea, but I'd like to implement a _from<>-style alias
    #implementing such local list appending for us. I believe I specced out such
    #an alias elsewhere; can we hunt it down? Should be prefixed by
    #append_list_*(), or some such.

    # Defer to copy_path() by temporarily appending recursive options to the
    # global list accessed by such function.
#    list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_CP_OPTIONS[@]}" )
#    list ZESHY_CP_OPTIONS; ZESHY_CP_OPTIONS=(
#        "${zeshy_cp_options[@]}"
#        "${ZESHY_CP_OPTIONS_IF_RECURSIVE[@]}"
#    )
#    copy_path "${@}"

#   die_unless_args_2_or_more\
#       'expected at least one source pathname and one target pathname'
#   run_command_silent_with_options 'command cp'\
#       'ZESHY_CP_OPTIONS ZESHY_CP_OPTIONS_IF_RECURSIVE' -- "${(q)@}"
#   cry_if_link_symbolic_broken_after_copy_or_move_path "${@}"
#}

    #FUXME: Shoddy. For portability, this should use a new
    #'ZESHY_CP_OPTIONS_IF_DEEP' config list.
#   list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_CP_OPTIONS[@]}" )
#   list ZESHY_CP_OPTIONS; ZESHY_CP_OPTIONS=( "${zeshy_cp_options[@]}" -L )

# shallowly (i.e., copying source symbolic links rather than the targets of such links)
    # Defer to copy_path() by temporarily appending recursive options to the
    # global list accessed by such function.
#   list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_CP_OPTIONS[@]}" )
#   list ZESHY_CP_OPTIONS; ZESHY_CP_OPTIONS=(
#       "${zeshy_cp_options[@]}"
#       "${ZESHY_CP_OPTIONS_IF_RECURSIVE[@]}"
#   )
#   copy_path "${@}"

#FUXME: Implementation isn't quite right: we only want to ignore the path if not
#found; if the path is found but is *NOT* empty, we still want to throw an exception.

#(i.e., contains at least one subdirectory or file).
#   run_command_with_options 'command rmdir' ZESHY_RMDIR_OPTIONS "${(q)@}"

#Remove all passed directories if all such directories exist and
#are empty  or throw an exception if at
#least one such directory  See
#remove_dir_empty_if_found() for an alternative throwing no such exception.

#   run_command_silent run_command_with_options 'command rm'\
#       'ZESHY_RM_OPTIONS ZESHY_RM_OPTIONS_IF_SHELL_NONINTERACTIVE' -- "${(q)@}"

#       if set_integer_to_arg_nonoption_count __nonoptions__ and
#           (( 1 <= __nonoptions__ && __nonoptions__ <= 3 ))
    # Validate passed arguments.
#   die_unless_args 'expected at least one filename'

    # Since removal options depend on the number of such arguments,
    # run_command_with_options() is insufficient. Implement such logic manually.
#   string option_list_names='ZESHY_RM_OPTIONS'
#   is_shell_interactive && {
#       if is_args_1_to_3
#       then option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3'
#       else option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'
#       fi
#   }

    # Remove such files.
#   run_command_with_options_configured\
#       'command rm' "${option_list_names}" -- "${(q)@}"

#FUXME: This function should *NOT* be called by copy_file() or move_file() --
#only by the subsidiary copy_file_with_options_configured()-style functions.
