#!/usr/bin/env zsh
# ====================[ size                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path listings by size (i.e., disk usage).

# ....................{ PRINTERS                           }....................
document_function '
void print_path_size(string pathname1, string pathname2, ...)

Print disk usage for the passed paths recursively with currently configured
"du"-specific options. See print_path_size_with_options() for further details.
'
function print_path_size() {
    die_unless_args 'expected at least one pathname'
    print_path_size_with_options -- "${@}"
}

document_function '
void print_path_size_with_options(
    string du_option1, string du_option2, ...,
    string pathname1, string pathname2, ...)

Print disk usage for the passed paths (defaulting to the current directory)
recursively with both the passed and currently configured "du"-specific options.
Throw an exception if any such path does not exist.
'
function print_path_size_with_options() {
    interactively print_message "getting path sizes recursively..."
    run_with_options_configured 'run_paged command du'\
        ZESHY_DU_OPTIONS "${(q)@}"
}

# ....................{ PRINTERS                           }....................
document_function '
void print_path_size_sorted(string pathname1, string pathname2, ...)

Print disk usage for the passed paths recursively sorted with currently
configured "du"-specific options. See print_path_size_sorted_with_options() for
further details.
'
function print_path_size_sorted() {
    die_unless_args 'expected at least one pathname'
    print_path_size_sorted_with_options -- "${@}"
}

document_function '
void print_path_size_sorted_with_options(
    string du_option1, string du_option2, ...,
    string pathname1, string pathname2, ...)

Print disk usage for the passed paths (defaulting to the current directory)
recursively sorted with both the passed and currently configured "du"-specific
options. Throw an exception if any such path does not exist. Assuming default
user configuration settings, sort such disk usage in descending order.
'
function print_path_size_sorted_with_options() {
    # We can hardly believe this works. Astonishingly, it does! And the elves
    # did croon their merry tune.
    interactively print_message "sorting path sizes recursively..."
    run_with_options_configured 'run_paged command du'\
        ZESHY_DU_OPTIONS "${(q)@}"\
        '| run_with_options_configured "command sort" ZESHY_DU_SORT_OPTIONS'
}

# --------------------( WASTELANDS                         )--------------------
#       ZESHY_DU_OPTIONS "${(q)@}" '| '\
#       run_with_options_configured 'command sort' ZESHY_DU_SORT_OPTIONS
#       ZESHY_DU_SORTED_OPTIONS "${(q)@}" '| sort -hr'
#   ZESHY_DU_SORTED_OPTIONS\
#   ZESHY_DU_SORTED_OPTIONS_IF_SHELL_INTERACTIVE\
#   ZESHY_DU_SORTED_OPTIONS_IF_SHELL_NONINTERACTIVE\
#document_global '
#list ZESHY_DU_SORTED_OPTIONS
#
#"du" options specific to the print_path_size_sorted*() functions.
#'
#ZESHY_DU_SORTED_OPTIONS=( "${ZESHY_DU_OPTIONS[@]}" )
#
#document_global '
#list ZESHY_DU_SORTED_OPTIONS_IF_SHELL_INTERACTIVE
#
#"du" options if sorting disk usage interactively.
#'
#ZESHY_DU_SORTED_OPTIONS_IF_SHELL_INTERACTIVE=()

#document_global '
#list ZESHY_DU_SORTED_OPTIONS_IF_SHELL_NONINTERACTIVE
#
#"du" options if sorting disk usage non-interactively.
#'
#ZESHY_DU_SORTED_OPTIONS_IF_SHELL_NONINTERACTIVE=()

#document_function '
#string print_path_size_sorted(string pathname1, string pathname2, ...)
#
#List disk usage for the passed paths (defaulting to the current directory)
#recursively, sorted by descending usage.
#'
#function print_path_size_sorted() {
#    run_with_options "run_paged command du" ZESHY_DU_OPTIONS "${@}" "| sort -hr"
#}

#   run_with_options "run_paged 'command du" ZESHY_DU_OPTIONS "${@}"\
#       "| sort -hr'"
# * Symbolic link, this is the dereferenced size of the non-symbolic link such
#   link transitively links to (i.e., of the eventual target file or directory).
#Dismantled, this is:
    #
    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.
#   else zstat -L +size "${pathname}"
#FIXME: Rename to print_path_size*() in conformance with get_path_size().
