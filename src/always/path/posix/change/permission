#!/usr/bin/env zsh
# ====================[ permission                         ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path permission changes.

# ....................{ SETTERS                            }....................
document_function '
string set_path_permissions(
  string pathname1, string pathname2, ..., string permissions)

Silently change the permissions of all passed paths with the passed permissions
under currently configured "chmod"-specific options. Specify such permissions in
either machine-readable (e.g., 0711) or human-readable format (e.g., "ugo+rX").
If any such path does not exist, throw an exception. See "man chmod" for further
details on permission formats: e.g.,

    >>> set_path_permissions "/ogallala/yucca" ugo-rwx
    >>> cd /ogallala/yucca
    cd: permission denied: /ogallala/yucca
'
function set_path_permissions() {
    # Validate passed arguments.
    die_unless_two_args 'expected one path and one permissions string'
    string permissions="${@[-1]}"
    curtail_arg

    # Change such permissions.
    run_with_options_silently\
        'command chmod' ZESHY_CHMOD_OPTIONS -- "${permissions}" "${(q)@}"
}

document_function '
void set_path_permissions_with_options(
  string chmod_option1, string chmod_option2, ...,
  string permissions,
  string source_pathname1 = "$(get_current_dir)/"{.,*},
  string source_pathname2, ...)

Change the permissions of all passed paths (defaulting to all paths in the
current directory including such directory) with the passed permissions under
both the passed and currently configured "chmod"-specific options. See
set_path_permissions() for further details.
'
function set_path_permissions_with_options() {
    # Validate passed arguments.
    die_unless_args_1_or_more\
        'expected one permissions string and optional pathnames'

    # If passed no paths, default to the current directory and all paths in it.
    set_integer_to_arg_nonoption_count arg_nonoption_count
    (( arg_nonoption_count == 1 )) and append_arg "$(get_current_dir)/"{.,*}

    # Change such permissions.
    run_with_options_configured 'command chmod' ZESHY_CHMOD_OPTIONS "${(q)@}"
}

# ....................{ SETTERS ~ recursive                }....................
document_function '
string set_path_permissions_recursively(
  string pathname1, string pathname2, ..., string permissions)

Silently change the permissions of all passed paths recursively with the passed
permissions under currently configured "chmod"-specific options. See
set_path_permissions() for further details.
'
function set_path_permissions_recursively() {
    append_list_with_list_locally_from\
        'ZESHY_CHMOD_OPTIONS ZESHY_CHMOD_OPTIONS_IF_RECURSIVE'
    set_path_permissions "${@}"
}

document_function '
void set_path_permissions_recursively_with_options(
  string chmod_option1, string chmod_option2, ...,
  string permissions,
  string source_pathname1 = "$(get_current_dir)", string source_pathname2, ...)

Change the permissions of all passed paths (defaulting to the current directory)
recursively with the passed permissions under both the passed and currently
configured "chmod"-specific options. See set_path_permissions() for further
details.
'
function set_path_permissions_recursively_with_options() {
    # Validate passed arguments.
    die_unless_args_1_or_more\
        'expected one permissions string and optional pathnames'

    # If passed no paths, default to the current directory.
    set_integers_to_arg_nonoption_count_and_first_index_from\
        'arg_nonoption_count arg_nonoption_first_index'
    (( arg_nonoption_count == 1 )) and {
        append_arg "$(get_current_dir)"

        # Increment the number of passed arguments to ensure sanity below.
        (( ++arg_nonoption_count ))
    }

    # If the current shell is interactive, return non-zero exit status unless
    # the current user interactively affirms such changes. Recursively changing
    # permissions is often permanently harmful and hence deserves confirmation.
    is_shell_interactive and {
        string paths\
            permissions="${@[${arg_nonoption_first_index}]}"\
             first_path="${@[$(( arg_nonoption_first_index + 1 ))]}"

        # Set the question to be asked depending on the number of passed paths.
        paths="\"${first_path}\""
#       print "count: ${arg_nonoption_count}"
        (( arg_nonoption_count == 2 )) or paths+=', ...'

        # Confirm such change.
        is_response_yes_for_question\
            "recursively change permissions of ${paths} to ${permissions}?" or
            return_false
    }

    # Change such permissions.
    run_with_options_configured 'command chmod'\
        'ZESHY_CHMOD_OPTIONS ZESHY_CHMOD_OPTIONS_IF_RECURSIVE' "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
#       then  to ${permissions}?"
#       else question "recursively change permissions of \"${first_path}\", etc. to ${permissions}?"
#       fi

#FUXME: Recursive path changing can be dangerous. Interactively confirm such
#changes (but don't bother with non-recursive path changing).

    #FUXME: Replace with call to append_list_with_lists_locally(), as below.
    # Recursively change permissions by delegating to set_path_permissions(),
    # temporarily appending recursive options to ${ZESHY_CHMOD_OPTIONS}.
#   list options; options=(
#       "${ZESHY_CHMOD_OPTIONS[@]}"
#       "${ZESHY_CHMOD_OPTIONS_IF_RECURSIVE[@]}"
#   )
#   list ZESHY_CHMOD_OPTIONS; ZESHY_CHMOD_OPTIONS=( "${options[@]}" )
#       then paths="recursively change permissions of \"${first_path}\" to ${permissions}?"
#       else question "recursively change permissions of \"${first_path}\", etc. to ${permissions}?"
#
#function set_path_permissions_recursively_with_options() {
#    append_list_with_list_locally\
#        ZESHY_CHMOD_OPTIONS ZESHY_CHMOD_OPTIONS_IF_RECURSIVE
#    set_path_permissions_with_options "${@}"
#}

#document_function '
#string set_path_permissions_with_options(
#  string option1, string option2, ...,
#  string permissions,
#  string path1 = "$(get_current_dir)", string path2, ...)
#
#Change the permissions of the passed paths (defaulting to the current
#directory) via the passed permission specifier and "chmod" options. See
#set_path_permissions() or "man chmod" for further details.
#'
#function set_path_permissions_with_options() {
#    # Validate passed arguments.
#    die_unless_args 'expected one permissions string and at least one path'
#
#    #FUXME: Insufficient. The user could have passed arguments "-R" and "go+X",
#    #in which case at least two arguments were passed but none of them a proper
#    #path. To test this properly, first temporarily remove all passed arguments
#    #prefixed with "-" and *THEN* test the number of arguments: if still only
#    #one, then, indeed, we do need to append the current directory.
#
#    # If passed one argument, default the path to the current working directory.
#    is_one_arg and append_arg "$(get_current_dir)"
#
#    # Change permissions.
#    run_with_options 'command chmod' ZESHY_CHMOD_OPTIONS "${(q)@}"
#}

# ....................{ CHANGERS                           }....................
#FUXME: Shift pertinent "../permission" functionality here.
#FUXME: Argument order is appropriate when called interactively but not non-
#interactively. Each such function should accept only two arguments.
