#!/usr/bin/env zsh
# ====================[ remove                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path removal.

# ....................{ REMOVERS                           }....................
document_function '
string remove_path_recursively(string pathname1, string pathname2, ...)

Silently recursively remove the passed paths, throwing an exception if any such
path does not exist.
'
function remove_path_recursively() {
    die_unless_args 'expected at least one pathname'
    run_with_options_silently\
        'command rm' 'ZESHY_RM_OPTIONS ZESHY_RM_OPTIONS_IF_RECURSIVE' --\
        "${(q)@}"
}

document_function '
string remove_path_recursively_with_options(
    string rm_option1, string rm_option2, ...,
    string pathname1, string pathname2, ...)

Recursively remove the passed paths with both the passed and currently
configured "rm"-specific options, throwing an exception if any such path does
not exist.
'
function remove_path_recursively_with_options() {
    # Validate passed arguments. Unlike most path operations accepting passed
    # options, do not default to the current directory (for hopefully obvious
    # reasons).
    die_unless_args 'expected at least one pathname'

    # If interactive, pass interactive-specific options.
    string option_list_names='ZESHY_RM_OPTIONS ZESHY_RM_OPTIONS_IF_RECURSIVE'
    is_shell_interactive &&
        option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'

    # Remove such paths.
    run_with_options_configured 'command rm' "${option_list_names}" "${(q)@}"
}

# ....................{ REMOVERS ~ dir                     }....................
document_function '
void remove_dir_empty(string dirname1, string dirname2, ...)

Silently remove the passed empty directories, throwing an exception if any such
directory does not exist or does but is non-empty.
'
function remove_dir_empty() {
    die_unless_args 'expected at least one dirname'
    run_with_options_silently 'command rmdir' ZESHY_RMDIR_OPTIONS -- "${(q)@}"
}

document_function '
void remove_dir_empty_if_found(string dirname1, string dirname2, ...)

Silently remove only passed empty directories that exist (i.e., ignoring non-
extant directories), throwing an exception if any passed directory that exists
is non-empty.
'
function remove_dir_empty_if_found() {
    # Validate passed arguments.
    die_unless_args 'expected at least one dirname'

    #FIXME: Call the helper in "file/path" we recently defined.
    # Filter non-extant directories from the passed directories. Dismantled,
    # this is:
    #
    # * "${^@}", iteratively expanding to each passed directory.
    # * "(e:...:), excluding directories failing the test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant directories.
    set_args "${^@}"(e:'[[ -e "${REPLY}" ]]':)

    # If any extant directories remain, remove such directories.
    is_args and remove_dir_empty "${@}"
}

document_function '
string remove_dir_empty_with_options(
    string rm_option1, string rm_option2, ...,
    string pathname1, string pathname2, ...)

Remove the passed empty directories with both the passed and currently
configured "rmdir"-specific options, throwing an exception if any such directory
does not exist or does but is non-empty.
'
function remove_dir_empty_with_options() {
    # If passed no arguments, default to the current directory. By design,
    # avoid the more specific (and seemingly clever) test of whether the caller
    # passed no non-option arguments; callers passing any non-option arguments
    # intend to run "rmdir" traditionally and hence without such defaults.
    is_args or set_args "$(get_current_dir)"

    # Validate passed arguments.
    die_unless_args 'expected at least one dirname'

    # Remove such directories.
    run_with_options_configured 'command rmdir' ZESHY_RMDIR_OPTIONS "${(q)@}"
}

# ....................{ REMOVERS ~ file                    }....................
document_function '
void remove_file(string pathname1, string pathname2, ...)

Silently remove the passed files, throwing an exception if any such file does
not exist.
'
function remove_file() {
    die_unless_args 'expected at least one filename'
    run_with_options_silently 'command rm' ZESHY_RM_OPTIONS -- "${(q)@}"
}

document_function '
void remove_file_if_found(string pathname1, string pathname2, ...)

Silently remove only passed files that exist (i.e., ignoring non-extant files).
'
function remove_file_if_found() {
    # Validate passed arguments.
    die_unless_args 'expected at least one filename'

    #FIXME: Call the helper in "path/path" we recently defined.
    # Filter non-extant files from the passed files. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed file.
    # * "(e:...:), excluding paths failing the test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant files.
    set_args "${^@}"(e:'[[ -e "${REPLY}" ]]':)

    # If at least one such file exists, remove such file(s).
    is_args and remove_file "${@}"
}

document_function '
string remove_file_with_options(
    string rm_option1, string rm_option2, ...,
    string pathname1, string pathname2, ...)

Remove the passed files with both the passed and currently configured "rm"-
specific options, throwing an exception if any such file does not exist.
'
function remove_file_with_options() {
    # Validate passed arguments.
    die_unless_args 'expected at least one filename'

    # Since removal options depend on the number of such arguments,
    # run_with_options() is insufficient. Implement such logic manually.
    string option_list_names='ZESHY_RM_OPTIONS'
    is_shell_interactive && {
        if is_arg_nonoptions_1_to_3
        then option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3'
        else option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'
        fi
    }

    # Remove such files.
    run_with_options_configured 'command rm' "${option_list_names}" "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
#document_function '
#string remove_file_with_optionsconfigured(
#  string pathname1, string pathname2, ...)
#
#Remove the passed files with the currently configured "rm"-specific options,
#throwing an exception if any such file does not exist.
#'
#function remove_file_with_optionsconfigured() {
#    remove_file_with_options -- "${(q)@}"
#}

#FUXME: Implementation isn't quite right: we only want to ignore the path if not
#found; if the path is found but is *NOT* empty, we still want to throw an exception.

#(i.e., contains at least one subdirectory or file).
#   run_with_options 'command rmdir' ZESHY_RMDIR_OPTIONS "${(q)@}"

#Remove all passed directories if all such directories exist and
#are empty  or throw an exception if at
#least one such directory  See
#remove_dir_empty_if_found() for an alternative throwing no such exception.

#   run_silently run_with_options 'command rm'\
#       'ZESHY_RM_OPTIONS ZESHY_RM_OPTIONS_IF_SHELL_NONINTERACTIVE' -- "${(q)@}"

#       if set_integer_to_arg_nonoption_count __nonoptions__ and
#           (( 1 <= __nonoptions__ && __nonoptions__ <= 3 ))
    # Validate passed arguments.
#   die_unless_args 'expected at least one filename'

    # Since removal options depend on the number of such arguments,
    # run_with_options() is insufficient. Implement such logic manually.
#   string option_list_names='ZESHY_RM_OPTIONS'
#   is_shell_interactive && {
#       if is_args_1_to_3
#       then option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3'
#       else option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'
#       fi
#   }

    # Remove such files.
#   run_with_optionsconfigured\
#       'command rm' "${option_list_names}" -- "${(q)@}"

#FUXME: This function should *NOT* be called by copy_file() or move_file() --
#only by the subsidiary copy_file_with_optionsconfigured()-style functions.
