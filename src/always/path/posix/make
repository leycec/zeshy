#!/usr/bin/env zsh
# ====================[ make                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path creation (i.e., file, directory, symbolic link).

# ....................{ MAKERS ~ dir                       }....................
document_function '
void make_dir(string dirname1, string dirname2, ...)

Silently make the passed directories but not parent directories of such
directories. If any such directory already exists, throw an exception.
'
function make_dir() {
    die_unless_args 'expected at least one dirname'
    run_with_options_silently 'command mkdir' ZESHY_MKDIR_OPTIONS -- "${(q)@}"
}

document_function '
void make_dir_if_not_found(string dirname1, string dirname2, ...)

Silently make all passed directories and parent directories of such directories
that do not already exist (i.e., ignoring those directories that do exist).
'
function make_dir_if_not_found() {
    die_unless_args 'expected at least one dirname'
    run_with_options_silently 'command mkdir'\
        'ZESHY_MKDIR_OPTIONS ZESHY_MKDIR_OPTIONS_IF_NOT_FOUND' -- "${(q)@}"
}

document_function '
void make_dir_if_not_found_with_options(
  string mkdir_option1, string mkdir_option2, ...,
  string dirname1, string dirname2, ...)

Make all non-extant passed directories and non-extant parent directories of such
directories (thus ignoring directories that already exist) with both the passed
and currently configured "mkdir"-specific options.
'
function make_dir_if_not_found_with_options() {
    die_unless_args_1_or_more 'expected at least one dirname'
    run_with_options_configured 'command mkdir' ZESHY_MKDIR_OPTIONS "${(q)@}"
}

# ....................{ MAKERS ~ link : symbolic           }....................
document_function '
void make_link_symbolic(
    string source_pathname1, string source_pathname2, ...,
    string target_pathname)

Silently symbolically link the passed source paths to the passed target path.
See make_link_symbolic_with_options() and "man ln" for further details.
'
function make_link_symbolic() {
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'
    run_with_options_silently 'command ln' ZESHY_LN_SYMBOLIC_OPTIONS -- "${(q)@}"
}

document_function '
void make_link_symbolic_with_options(
  string ln_option1, string ln_option2, ...,
  string source_pathname1, string source_pathname2, ...,
  string target_pathname = "$(get_current_dir)")

Symbolically link the passed source paths to the passed target path with both
the passed and currently configured "ln"-specific options. By historical
precedent, this function accepts four forms, of which the two most common are:

* One extant source path and one non-extant target symbolic link file.
* One or more extant source path and one extant target directory. Symbolically
  link each source path to a new target symbolic link file with the same
  basename as such path under such directory.

If any source path does not exist *OR* the target path is an existing file,
throw an exception. See "man ln" for further details.
'
function make_link_symbolic_with_options() {
    # Unlike most *nix commands, "ln" defaults to the current directory if
    # passed only one source path, happily saving us the trouble of doing so.
    die_unless_args_1_or_more 'expected at least one pathname'
    run_with_options_configured 'command ln' ZESHY_LN_SYMBOLIC_OPTIONS "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Description no longer quite right. And the implementation *CERTAINLY*
#isn't right.
#FUXME: Implement make_link_symbolic_with_options().

    # Validate passed arguments.
#   die_unless_args_2 'expected one source pathname and one target filename'

    #FUXME: Call run_with_options_configured and rename this function.
    # Make such link.
#   list ln; ln=( ln "${ZESHY_LN_SYMBOLIC_OPTIONS[@]}" )
#   if is_shell_interactive
#   then "${ln[@]}" "${ZESHY_LN_SYMBOLIC_OPTIONS_IF_SHELL_INTERACTIVE[@]}"    -- "${@}"
#   else "${ln[@]}" "${ZESHY_LN_SYMBOLIC_OPTIONS_IF_SHELL_NONINTERACTIVE[@]}" -- "${@}"
#   fi

    # Validate passed arguments.
    # Make such directories.
#FUXME: Implement make_dir_if_not_found_with_options(). (Don't worry about
#make_dir_with_options(), for now. We have no need of it, I should think.)

#if no passed directories exist or throw an exception if any such
#directory exists.
# If such link already exists and is a symbolic link, replace such file without error;
#otherwise, raise an error if such file already exists.
    #FUXME: For orthoganality (and possible cross-platform concerns), add a new
    #${ZESHY_MKDIR_OPTIONS_IF_NOT_FOUND}).
#
# See make_dir_if_not_found() for an alternative throwing no such exception.
