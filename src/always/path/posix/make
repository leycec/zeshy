#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle path creation.
/---

# ....................{ MAKERS ~ dir                       }....................
#FIXME: Create a new make_dir_atomic(). The functions below could conceivably
#pass option "-p" to "mkdir", which is *NOT* atomic.

declare_function_with_stdin <<'/---'
void make_dir(string dirname1, string dirname2, ...)

Silently make the passed directories but not parent directories of such
directories. If any such directory already exists, throw an exception.
/---
function make_dir() {
    die_unless_args 'Expected one or more dirnames.'
    run_command_silent_with_options 'command mkdir'\
        ZESHY_MKDIR_OPTIONS -- "${(q)@}"
}

declare_function_with_stdin <<'/---'
void make_dir_if_not_found(string dirname1, string dirname2, ...)

Silently make all passed directories and parent directories of such directories
that do not already exist, ignoring such directories that do exist.
/---
function make_dir_if_not_found() {
    die_unless_args 'Expected one or more dirnames.'
    run_command_silent_with_options 'command mkdir'\
        'ZESHY_MKDIR_OPTIONS ZESHY_MKDIR_OPTIONS_IF_NOT_FOUND' -- "${(q)@}"
}

declare_function_with_stdin <<'/---'
void make_dir_if_not_found_with_options(
    string mkdir_option1, string mkdir_option2, ...,
    string dirname1, string dirname2, ...)

Make all passed directories and parent directories of such directories that do
not already exist, ignoring such directories that do exist, with both the passed
and currently configured `mkdir`-specific options.
/---
function make_dir_if_not_found_with_options() {
    die_unless_args_1_or_more 'Expected one or more dirname.'
    run_command_with_options_configured 'command mkdir' ZESHY_MKDIR_OPTIONS "${(q)@}"
}

# ....................{ MAKERS ~ file                      }....................
declare_function_with_stdin <<'/---'
void make_file(string filename1, string filename2, ...)

Silently make all passed files to be 0 bytes in size. If any such file already
exists, throw an exception.
/---
function make_file() {
    # Validate passed arguments.
    die_unless_args 'Expected one or more filenames.'

    # While zeshy enables "noclobber" by default, the current user or context
    # may have re-enabled "clobber". For safety, force "noclobber" locally.
    set_shell_option_locally noclobber

    # For each passed file, attempt to make such file without truncating such
    # file if already extant. Since the simplest means of effecting this is to
    # attempt to redirect zero-length print_string to such file under "noclobber",
    # perform such redirection as the intentional side effect of a noop. While
    # admittedly bizarre, this technique has the advantage of actually working.
    string filename
    for    filename ("${@}") {
        noop > "${filename}"
    }
}

declare_function_with_stdin <<'/---'
void make_file_if_not_found(string filename1, string filename2, ...)

Silently make all passed files that do not already exist to be 0 bytes in size,
ignoring such files that already exist. By POSIX mandate, such operation is
guaranteed to be atomic.
/---
function make_file_if_not_found() {
    die_unless_args 'Expected one or more filenames'
    command touch -- "${@}"
}

# ....................{ MAKERS ~ link : symbolic           }....................
declare_function_with_stdin <<'/---'
void make_link_symbolic(
    string source_pathname1, string source_pathname2, ...,
    string target_pathname)

Silently symbolically link the passed source paths to the passed target path.
See make_link_symbolic_with_options() and `man ln` for further details.
/---
function make_link_symbolic() {
    die_unless_args_2_or_more\
        'Expected one or more source pathnames and one target pathname.'
    run_command_silent_with_options 'command ln'\
        ZESHY_LN_SYMBOLIC_OPTIONS -- "${(q)@}"
}

declare_function_with_stdin <<'/---'
void make_link_symbolic_with_options(
    string ln_option1, string ln_option2, ...,
    string source_pathname1, string source_pathname2, ...,
    string target_pathname = "$(get_dir)")

Symbolically link the passed source paths to the passed target path with both
the passed and currently configured `ln`-specific options. By historical
precedent, this function accepts four forms, of which the two most common are:

* One extant source path and one non-extant target symbolic link file.
* One or more extant source path and one extant target directory. Symbolically
  link each source path to a new target symbolic link file with the same
  basename as such path under such directory.

If any source path does not exist _or_ the target path is an existing file,
throw an exception. See `man ln` for further details.
/---
function make_link_symbolic_with_options() {
    # Unlike most *nix commands, "ln" defaults to the current directory if
    # passed only one source path, happily saving us the trouble of doing so.
    die_unless_args_1_or_more 'Expected one or more pathnames.'
    run_command_with_options_configured 'command ln'\
        ZESHY_LN_SYMBOLIC_OPTIONS "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
#(i.e., file, directory, symbolic link).

#FUXME: Description no longer quite right. And the implementation *CERTAINLY*
#isn't right.
#FUXME: Implement make_link_symbolic_with_options().

    # Validate passed arguments.
#   die_unless_args_2 'expected one source pathname and one target filename'

    #FUXME: Call run_command_with_options_configured and rename this function.
    # Make such link.
#   list ln; ln=( ln "${ZESHY_LN_SYMBOLIC_OPTIONS[@]}" )
#   if is_shell_interactive
#   then "${ln[@]}" "${ZESHY_LN_SYMBOLIC_OPTIONS_IF_SHELL_INTERACTIVE[@]}"    -- "${@}"
#   else "${ln[@]}" "${ZESHY_LN_SYMBOLIC_OPTIONS_IF_SHELL_NONINTERACTIVE[@]}" -- "${@}"
#   fi

    # Validate passed arguments.
    # Make such directories.
#FUXME: Implement make_dir_if_not_found_with_options(). (Don't worry about
#make_dir_with_options(), for now. We have no need of it, I should think.)

#if no passed directories exist or throw an exception if any such
#directory exists.
# If such link already exists and is a symbolic link, replace such file without error;
#otherwise, raise an error if such file already exists.
    #FUXME: For orthoganality (and possible cross-platform concerns), add a new
    #${ZESHY_MKDIR_OPTIONS_IF_NOT_FOUND}).
#
# See make_dir_if_not_found() for an alternative throwing no such exception.
