#!/usr/bin/env zsh
# ====================[ key_value_store                    ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle disk-backed key-value stores (i.e., NoSQL-style databases storing only
# schema-less key-value pairs to disk). Since zsh currently lacks built-in
# support for such stores, emulate such support.
#
# --------------------( TODO                               )--------------------
# * While directory-style KVSs are a reasonable solution and should
#   absolutely be retained for cross-platform purposes, compressed "dar"-style KVSs
#   are probably ultimately the most efficient solution -- at least for retrieval.
#   Naturally, such solution only applies to systems installing "dar"... which,
#   let's face it, is probably not terribly many. Nonetheless, the Linux ecosystem
#   might eventually see fit to phase "tar" out in favor of "dar", at which point
#   such solutions become considerably more useful.

# ....................{ MAKERS                             }....................
declare_function '
void make_key_value_store_dir(string dirname)

Create a key-value store at the passed directory. If such directory already
exists and is non-empty, throw an exception.
'
function make_key_value_store_dir() {
    # Validate passed arguments.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_if_dir_nonempty "${dirname}"

    # Create such directory, if not already.
    make_dir_if_not_found "${dirname}"

    # Verify such directory to be writable, if not just created.
    die_unless_dir_writable "${dirname}"
}

# ....................{ SETTERS                            }....................
declare_function '
void set_key_value_store_dir_key(string dirname, string key, string value)

Set the passed non-empty key to the passed value in the key-value store at the
passed directory.
'
function set_key_value_store_dir_key() {
    # Validate passed arguments.
    die_unless_args_3\
        'expected one dirname, one string key, and one string value'
    string dirname="${1}" key="${2}" value="${3}" filename
    die_unless_dir_writable "${dirname}"
    die_unless_string_nonempty "${key}" 'key empty'

    #FIXME: Implement me!

    # Set such key by creating a new file in such directory with basename such
    # key and file text such value. For safety, escape forward slashes in such
    # key (to avoid treating such slashes as directory separators).
    filename="${dirname}/$(escape_string_dir_separator "${key}")"
    if is_file "${filename}"
    then die
    else die
    fi
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Contemplate renaming... possibly to, say, make_kvs_dir() or
#make_database_kvs_dir(). Hmmm; or not!
    #FUXME: Implement and uncomment me.
#   die_unless_dir_not_found_or_empty "${dirname}"
