#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *media type actions* (i.e., lowercase alphabetic words describing the
types of command to be run for files of such media types). See
is_media_type_action:() for further details.
/---

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] is_media_type_action:(string action_name)

Report success if the passed string is a valid media type action. Specifically,
report success if such string equals one of the following:

* `compose`, creating files of the desired media type.
* `edit`, editing files of the desired media type.
* `print`, printing such file of the desired media type.
* `see`, viewing such file of the desired media type.
/---
function is_media_type_action:() {
    die_unless_arg 'Expected one string.'
    is "${1}" == (compose|edit|print|see) si
}

# ....................{ OPENERS                            }....................
#FIXME: Oh, boy. We really need to emphasize what such functions are actually
#doing in their nomenclature. (Not to mention the fact that print_file()
#contravenes *ALL* our other nomenclature.) Rename to:
#
#* From edit_file() to run_file_editor:().
#* From print_file() to run_file_printer:().
#* From view_file() to run_file_viewer:().
#FIXME: OH, BOY. Good Lord. As defined, such functions require the external
#command "run-mailcap" to be installed and commands "compose", "edit", "print",
#and "view" to be symbolic links to such command. I have to be honest: this is
#fairly silly. The last thing we require (particularly in core components such
#as this) are additional external dependencies. (Moreover, such symbolic links
#conflict with those already provided by most systems -- including "view", which
#"vim" typically symbolic links to itself). Sadly, zsh's builtin retinue of
#MIME-related autoloadable functions (e.g., "/usr/share/zsh/*/function/MIME")
#only support handling of the default action associated with media types -- not
#arbitrary actions (e.g., "compose", "edit"). While we certainly should kill two
#fetid birds with one stone by reimplementing such autoloads as pure-zeshy
#functions generalized to support arbitrary media actions, this is all a bit
#beyond the pale at the moment. Hence, for now, we disable *EVERYTHING* here.

#FIXME: This function should conditionally call *EITHER* the "compose" or "edit"
#actions, depending on whether such file actually exists or not.
#declare_function_with_stdin <<'/---'
#void edit_file(string filename)
#
#Edit the passed file with the command associated with such file's media type.
#/---
#function edit_file() {
#    die_unless_arg 'Expected one filename.'
#    open_file_with_media_action "${1}" edit
#}
#
#declare_function_with_stdin <<'/---'
#void print_file(string filename)
#
#Print the passed file with the command associated with such file's media type.
#/---
#function print_file() {
#    die_unless_arg 'Expected one filename.'
#    open_file_with_media_action "${1}" print
#}
#
#declare_function_with_stdin <<'/---'
#void view_file(string filename)
#
#View the passed file with the command associated with such file's media type.
#/---
#function view_file() {
#    die_unless_arg 'Expected one filename.'
#    open_file_with_media_action "${1}" see
#}
#

##FIXME: Rename to run_file_with_media_type_pathable:().
#declare_function_with_stdin <<'/---'
#void open_file_with_media_action(string filename, string command_name)
#
#Run the passed *media type pathable* (i.e., command in the current user's
#${PATH} itself running another command corresponding to the media type of passed files),
#passing such command the passed file.
#
#Open the passed file with the command associated with such file's media type by
#passing such file to the passed *media type pathable* (i.e., command in the
#current user's ${PATH} running the command associated with the media type of
#passed files). See is_media_type_pathable:() for further details. Such pathable must be a command in the current user's ${PATH}
#selected from the following list:
#
#* `compose`, creating such file.
#* `edit`, editing such file.
#* `print`, printing such file.
#* `see`, viewing such file.
#/---
#function open_file_with_media_action() {
#    #FIXME: Frankly, this is a bizarre function. What's the point of printing a
#    #warning and then deferring to zsh-mime-handler? What does such function do?
#    #Simply call the application associated with such file's filetype? In any
#    #event, we probably want to define a new exception handler
#    #die_unless_media_type_action:() 
#
#    # Validate sanity.
#    die_unless_args_2 'Expected one filename and one media action.'
#    string filename="${1}" media_action="${2}"
#    die_unless_file_runnable_by_alias_suffix: "${filename}"
#
#    # If such action is a command in the current ${PATH}, defer to such command.
#    if { is_pathable "${media_action}" } {
#        command "${media_action}" "${filename}"
#    # Else, print a warning and defer to zsh-mime-handler().
#    } else {
#        print_warning "Media action \"${media_action}\" unrecognized."
#        zsh-mime-handler "${filename}"
#    }
#}

# --------------------( WASTELANDS                         )--------------------
