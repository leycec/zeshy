#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *filetypes* (i.e., `.`-prefixed filename suffixes).
-/-

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_file_type(
    string pathname,
    string filetype,
    string error_message = "\"${pathname}\" not of filetype \"${filetype}\"")

Throw an exception with the passed message unless the passed filename has the
passed filetype.
/---
function die_unless_file_type() {
    die_unless_args_2_to_3\
        'expected one pathname, one filetype, and optional error message'
    string pathname="${1}" filetype="${2}"
    is_file_type "${pathname}" "${filetype}" or
        die "${2:-\"${pathname}\" not of filetype \"${filetype}\"}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_file_type(string filename, string filetype)

Return success if the passed filename has the passed filetype: e.g.,

.is_file_type()
==========================================
[source]
------------------------------------------
>>> string on_status_quos=\
...    "At issue is not whether the global economy will pass away. It is
...     passing away. Rising populations and debt combined with depletion of
...     freshwater sources and fossil fuel make the status quo untenable. The
...     only question is whether civil society will survive the transition. Can
...     we use the darknet to preserve representative democracy, or will we seek
...     protection from brutal strong-men as the old order begins to fail?"
>>> is_file_type "saverin.in" "out" or get_string_line "${on_status_quos}" -1
protection from brutal strong-men as the old order begins to fail?
------------------------------------------
==========================================
/---
function is_file_type() {
    die_unless_args_2 'expected one filename and one filetype'
    string filename="${1}" filetype_test="${2}" filetype_true
    filetype_true="$(get_file_type_if_found "${filename}")" and
        is "${filetype_test}" == "${filetype_true}" si
}

declare_function_with_stdin <<'/---'
<globbable> [status: boolean] is_file_type_glob_matches(
    string filename, string glob)

Return success if the passed filename has a filetype matching the passed glob:
e.g.,

.is_file_type_glob_matches()
==========================================
[source]
------------------------------------------
>>> string on_maintaining_democracy=\
...    "Democracy is a rare thing, Pete. You hear how democracies are all over
...     the place, but it isn't really true. They call it democracy. They use
...     the vocabulary, the props, but it's theater. What your Founding Fathers
...     did was the real thing. But the problem with democracies is they're hard
...     to maintain. Especially in the face of high technology. How do you
...     preserve your freedom when the powerful can use software bots to detect
...     dissent and deploy drone aircraft to take out troublemakers? Human
...     beings are increasingly unnecessary to wield power in the modern world."
>>> is_file_type_glob_matches "sebeck.out" (in|to) or
...     get_string_line "${on_maintaining_democracy}" -1
beings are increasingly unnecessary to wield power in the modern world.
------------------------------------------
==========================================
/---
function is_file_type_glob_matches() {
    die_unless_args_2 'expected one filename and one glob'
    string filename="${1}" filetype_glob="${2}" filetype
    filetype="$(get_file_type_if_found "${filename}")" and
        is_string_glob_matches "${filetype}" "${filetype_glob}"
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_file_sans_file_type(string filename)

Get the passed filename excluding filetype. If such filename has no filetype,
this is the filename itself: e.g.,

.get_file_sans_file_type()
==========================================
[source]
------------------------------------------
>>> get_file_sans_file_type "/endymion/hastur.tar.gz"
/endymion/hastur
>>> get_file_sans_file_type "/hyperion/azazoth"
/hyperion/azazoth
------------------------------------------
==========================================
/---
function get_file_sans_file_type() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}" filetype

    # If such filename contains a filetype, remove such filetype. See
    # remove_string_suffix() for further details.
    if { filetype="$(get_file_type_if_found "${filename}")" } {
        return_string "${filename%.${filetype}}"
    # Else, return such filename as is.
    } else {
        return_string "${filename}"
    }
}

# ....................{ GETTERS ~ type                     }....................
declare_function_with_stdin <<'/---'
string get_file_type(string filename)

Get the filetype of the passed filename or throw an exception if such filename
has no filetype. For filenames suffixed by two-part `tar` designators, the
filetype is `tar.` followed by the rightmost period-delimited suffix; else,
filetype is the merely the rightmost period-delimited suffix: e.g.,

.get_file_type()
==========================================
[source]
------------------------------------------
>>> get_file_type "hastur.tar.gz"
tar.gz
>>> get_file_type "pasteur.ar.gz"
gz
------------------------------------------
==========================================
/---
function get_file_type() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}" filetype

    # Get such filetype.
    filetype="$(get_file_type_if_found "${filename}")" or
        die "\"${filename}\" has no filetype"
    return_string "${filetype}"
}

declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] get_file_type_if_found(string filename)

Get the filetype of the passed filename or return failure if such filename has
no filetype. See get_file_type() for further details: e.g.,

.get_file_type_if_found()
==========================================
[source]
------------------------------------------
>>> get_file_type_if_found "a_thing_of_beauty" or print_string "is a joy"
is a joy
------------------------------------------
==========================================
/---
function get_file_type_if_found() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"

    #FIXME: Convert to an equivalent glob.
    # Match the passed filename's filetype, discarding leading ".".
    is "$(get_path_basename "${filename}")" =~ '\.(tar\.)?[^.]+$' si and
        remove_string_prefix "${MATCH}" '.'
}

declare_function_with_stdin <<'/---'
<globbable> [stdout: string, status: boolean] string
    get_file_type_if_glob_matches(string filename, string filetype_glob)

Get the filetype of the passed filename if such filetype matches the passed
glob or return failure. See get_file_type() for further details: e.g.,

.get_file_type_if_glob_matches()
==========================================
[source]
------------------------------------------
>>> get_file_type_if_glob_matches "loveliness" "t*" or print_string "will never"
will never
------------------------------------------
==========================================
/---
function get_file_type_if_glob_matches() {
    # Validate passed arguments.
    die_unless_args_2 'expected one filename and one glob'
    string filename="${1}" filetype_glob="${2}" filetype

    # Get such filetype if matching such glob or return false.
    { filetype="$(get_file_type_if_found "${filename}")" and
        is_string_glob_matches "${filetype}" "${filetype_glob}" } and
        return_string "${filetype}"
}

# --------------------( WASTELANDS                         )--------------------
#>>> is_file_type "saverin.in" "out" or print_string "Othello says, \"Hi.\""
#Othello says, "Hi."

#. Since this
#function tests only such filename, no such file need actually exist
#FUXME: Rename to get_file_sans_file_type(). It makes little sense to speak of
#anything but files in regards to file types and, anyway, breaks nomenclature.
