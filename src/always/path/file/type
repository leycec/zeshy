#!/usr/bin/env zsh
# ====================[ type                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle filetypes (i.e., "."-prefixed filename suffixes).

# ....................{ EXCEPTIONS                         }....................
# void die_unless_file_type(
#   string pathname,
#   string filetype,
#   string error_message = "\"${pathname}\" not of filetype \"${filetype}\"")
#
# Throw an exception unless the passed filename has the passed filetype.
function die_unless_file_type() {
    die_unless_args_2_to_3\
        'expected one pathname, one filetype, and optional error message'
    string pathname="${1}" filetype="${2}"
    is_file_type "${pathname}" "${filetype}" or
        die "${2:-\"${pathname}\" not of filetype \"${filetype}\"}"
}

# ....................{ TESTERS                            }....................
# boolean is_file_type(string filename, string filetype)
#
# Return true if the passed filename has the passed filetype: e.g.,
#
#     >>> is_file_type 'eduardo_saverin.in' 'out' or print 'Othello says, "Hi."'
#     Othello says, "Hi."
function is_file_type() {
    die_unless_args_2 'expected one filename and one filetype'
    string filename="${1}" filetype_test="${2}" filetype_true
    filetype_true="$(get_file_type_if_found "${filename}")" and
        is "${filetype_test}" == "${filetype_true}" si
}

# boolean is_file_type_match(string filename, string filetype_glob)
#
# Return true if the filetype of the passed filename matches the passed glob:
# e.g.,
#
#     >>> is_file_type_match 'sean_parker.out' '(in|to)' or print 'Dionysus!'
#     Dionysus!
function is_file_type_match() {
    die_unless_args_2 'expected one filename and one glob'
    string filename="${1}" filetype_glob="${2}" filetype
    filetype="$(get_file_type_if_found "${filename}")" and
        is_string_match "${filetype}" "${filetype_glob}"
}

# ....................{ GETTERS                            }....................
# string get_file_name_sans_type(string filename)
#
# Get the passed filename excluding filetype. If such filename has no filetype,
# this is the filename itself: e.g.,
#
#     >>> get_file_name_sans_type '/endymion/hastur.tar.gz'
#     /endymion/hastur
#     >>> get_file_name_sans_type '/hyperion/azazoth'
#     /hyperion/azazoth
function get_file_name_sans_type() {
    die_unless_arg 'expected one filename'
    string filetype; filetype="$(get_file_type_if_found "${1}")" or true
    print_string "${1%.${filetype}}"
}

# string get_file_type(string filename)
#
# Get the filetype of the passed filename or throw an exception if such filename
# has no filetype. For filenames suffixed by two-part "tar" designators, the
# filetype is "tar." followed by the rightmost period-delimited suffix; else,
# filetype is the merely the rightmost period-delimited suffix: e.g.,
#
#     >>> get_file_type 'hastur.tar.gz'
#     tar.gz
#     >>> get_file_type 'pasteur.ar.gz'
#     gz
function get_file_type() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}" filetype

    # Get such filetype.
    if filetype="$(get_file_type_if_found "${filename}")"
    then print_string "${filetype}"
    else die "\"${filename}\" has no filetype"
    fi
}

# string get_file_type_if_found(string filename)
#
# Get the filetype of the passed filename or return false if such filename has
# no filetype. See get_file_type() for further details: e.g.,
#
#     >>> get_file_type_if_found 'a_thing_of_beauty' or print_string 'is a joy'
#     is a joy
function get_file_type_if_found() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"

    #FIXME: Convert to an equivalent glob.
    # Match the passed filename's filetype, discarding leading ".".
    if is "$(get_path_basename "${filename}")" =~ '\.(tar\.)?[^.]+$' si
    then remove_string_prefix "${MATCH}" '.'
    else return_false
    fi
}

# string get_file_type_if_matching(string filename, string filetype_glob)
#
# Get the filetype of the passed filename if such filetype matches the passed
# glob or return false. See get_file_type() for further details: e.g.,
#
#     >>> get_file_type_if_matching 'its.loveliness' 't*' or print_string 'will never'
#     will never
function get_file_type_if_matching() {
    # Validate passed arguments.
    die_unless_args_2 'expected one filename and one glob'
    string filename="${1}" filetype_glob="${2}" filetype

    # Get such filetype if matching such glob or return false.
    if filetype="$(get_file_type_if_found "${filename}")" and
        is_string_match "${filetype}" "${filetype_glob}"
    then print_string "${filetype}"
    else return_false
    fi
}

# --------------------( WASTELANDS                         )--------------------
