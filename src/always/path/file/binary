#!/usr/bin/env zsh
# ====================[ binary                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle binary (i.e., non-text) files.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_binary_file(
#   string filename,
#   string error_message = "\"${filename}\" not a binary file")
#
# Throw an exception unless the passed file is an existing binary file.
die_unless_binary_file() {
    die_unless_one_or_two_args\
        'expected filename and optional error message'
    string filename="${1}"
    is_binary_file "${filename}" or
        die "${2:-\"${filename}\" not a binary file}"
}

# ....................{ TESTERS                            }....................
# boolean is_binary_file(string pathname)
#
# Return true if the passed path is a binary (i.e., non-text) file.
is_binary_file() {
    die_unless_one_arg 'expected one pathname'
    string pathname="${1}" file_encoding
    is_file "${pathname}" and
        is "$(get_file_encoding "${pathname}")" == 'binary' si
}

# --------------------( WASTELANDS                         )--------------------
# Return true if the passed pathname corresponds to a binary file (i.e., not
# a text file). (If the passed pathname corresponds to a directory instead, this
# function always returns failure.)
#FIXME: It'd be nice to abstract out the load_zsh_module/freeze_variable/unload_zsh_module
#cruft into a helper function -- say, with_mapfile(): e.g.,
#
#    with_mapfile 'print ${${(f)mapfile[${filename}]}[1]}'

    # Load Zsh module "mapfile".
#   load_zsh_module zsh/mapfile

    # Forcibly prevent harmful ${mapfile} and hence filesystem changes.
#   freeze_variable mapfile

    # Print the first line of the file with the passed filename.
#   print ${${(f)mapfile[${filename}]}[1]}

    # Unload "mapfile", for safety.
#   unload_zsh_module zsh/mapfile
#FIXME: Should be renamed to, say, "get_find_command_text_file_filter()", and
#consequently moved -- ideally, into a new "zeshy/file/find".
# bool is_text_file_find_compatible(void)
#
# Return a string which, when passed as argument to a "find" process, filters
# the currently visited filename if the corresponding file is binary. "find"
# itself provides no built-in means of performing such filtering, unfortunately.
#is_text_file_find_compatible() {
#    print "\-exec sh -c 'file --mime-encoding {} | grep --invert-match --quiet \": binary$\"' \\\;"
#}
