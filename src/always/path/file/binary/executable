#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *executable binaries* (e.g., ELF, Mach-O, `a.out`).
-/-

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_binary_executable(
    string pathname,
    string error_message = "\"${pathname}\" not an executable binary")

Throw an exception with the passed message unless the passed path is an existing
executable binary. See is_binary_executable() for further details.
/---
function die_unless_binary_executable() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_binary_executable "${pathname}" or
        die "${2:-\"${pathname}\" not an executable binary}"
}

# ....................{ EXCEPTIONS ~ linkage               }....................
declare_function_with_stdin <<'/---'
void die_unless_binary_executable_dynamic(
    string pathname,
    string error_message =
        "\"${pathname}\" not a dynamically linked executable binary")

Throw an exception with the passed message unless the passed path is an existing
dynamically linked executable binary. See is_binary_executable_dynamic() for
further details.
/---
function die_unless_binary_executable_dynamic() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_binary_executable_dynamic "${pathname}" or
        die "${2:-\"${pathname}\" not a dynamically linked executable binary}"
}

declare_function_with_stdin <<'/---'
void die_unless_binary_executable_static(
    string pathname,
    string error_message =
        "\"${pathname}\" not a statically linked executable binary")

Throw an exception with the passed message unless the passed path is an existing
statically linked executable binary. See is_binary_executable_static() for
further details.
/---
function die_unless_binary_executable_static() {
    die_unless_args_1_to_2\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_binary_executable_static "${pathname}" or
        die "${2:-\"${pathname}\" not a statically linked executable binary}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_binary_executable(string pathname)

Return success if the passed path is an executable binary.
/---
function is_binary_executable() {
    die_unless_arg 'expected one pathname'
    string pathname="${1}"
    is_file "${pathname}" and is_string_equals\
        "$(:get_file_media_type "${pathname}")"\
        'application/x-executable'
}

# ....................{ TESTERS ~ linkage                  }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_binary_executable_dynamic(string filename)

Return success if the passed executable binary is dynamically linked.
/---
function is_binary_executable_dynamic() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"
    die_unless_binary_executable "${filename}"

    # Test such linkage.
    run_code_silent command ldd -- "${(q)filename}"
}

declare_function_with_stdin <<'/---'
[status: boolean] is_binary_executable_static(string filename)

Return success if the passed executable binary is *statically linked* (i.e., if
such path is not an executable binary or is but is dynamically linked).
/---
function is_binary_executable_static() {
    not  is_binary_executable_dynamic "${filename}"
}

# ....................{ TESTERS ~ symbols                  }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_binary_executable_symbols(string filename)

Return success if the passed executable binary exports symbols.
/---
function is_binary_executable_symbols() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"
    die_unless_binary_executable "${filename}"

    # If such executable is dynamically linked, such executable exports symbols
    # by definition. Return true.
    if { is_binary_executable_dynamic } {
        report_success
    # Else, such executable is statically linked. If "nm" output matches
    # "nm: ${filename}: no symbols", such executable exports no symbols; else,
    # such executable does.
    } else {
        is_string_matches_glob\
            "$(command nm -- "${filename}")" 'nm: '?*': no symbols'
    }
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_binary_executable(string filename)

Print a human-readable synopsis of the passed executable binary, including:

* All external libraries such executable depends upon.
* All symbols such executable exports, if not previously stripped.
/---
function print_binary_executable() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"
    die_unless_binary_executable "${filename}"

    {
        # Print a synopsis of such executable.
        print_message_heading 'synopsis'
        print_file_metadata_synopsis "${filename}"

        # If such executable is dynamically linked, print the external libraries
        # such executable dynamically links against.
        if { is_binary_executable_dynamic "${filename}" } {
            print_message_heading 'dependencies'
            command ldd -v -- "${filename}"
        }

        # Print such executable's exported symbols, if any.
        print_message_heading 'symbols'
        print_binary_executable_symbols "${filename}"
    } | page_stdin
}

declare_function_with_stdin <<'/---'
string print_binary_executable_symbols(string filename)

Print a human-readable synopsis of all symbols exported by the passed executable
binary, if not already stripped from such executable.
/---
function print_binary_executable_symbols() {
    # Validate passed arguments.
    die_unless_arg 'expected one filename'
    string filename="${1}"
    die_unless_binary_executable "${filename}"

    # Options list names to be passed to "nm".
    string options_list_names='ZESHY_OPTIONS_NM'

    # If such executable is dynamically linked, print dynamic symbols.
    if { is_binary_executable_dynamic "${filename}" } {
        options_list_names+=' ZESHY_OPTIONS_NM_IF_BINARY_EXECUTABLE_DYNAMIC'
    }

    # Print such symbols.
    run_code_with_options_configured\
        'run_code_paged command nm'\
        "${options_list_names}" -- "${(q)filename}"
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: There are enough interesting "nm" options to warrant new list
    #globals ${ZESHY_OPTIONS_NM} and
    #${ZESHY_OPTIONS_NM_IF_BINARY_EXECUTABLE_DYNAMIC}.

#FUXME: Rename "_dynamic" to "_dynamic".
#FUXME: Rename "_static"  to "_static".

#       string nm_output; nm_output=
        #FUXME: This certainly works on statically linked libraries (i.e.,
        #suffixed with ".a"). But what about statically linked *EXCUTABLES*? I
        #have my doubts.
#       print_message_heading 'dependencies'
#       ar -t -- "${filename}"
#FUXME: Shift back to "path/file/binary/executable".
#FUXME: Rename "_executable" to "_binary_executable" everywhere. Executables in
#general are simply files with the execute bit set, a concept we use profitably
#elsewhere.
#FUXME: Rename "_dynamic" to "_linked_dynamic".
#FUXME: Rename "_static"  to "_linked_static".
#FUXME: Rename "_executable" to "_binary_executable" everywhere,
#including this filename. :)
#FUXME: Actually, pretty much all of the nomenclature in this component is
#subpar. Revisit in earnest when time permits.

#FUXME: Rename this component to "runnable_binary".
