#!/usr/bin/env zsh
# ====================[ plain                              ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle plain files (i.e., files not devices, directories, named pipes,
# sockets, or symbolic links).

# ....................{ EXCEPTIONS                         }....................
declare_function '
void die_unless_file_plain(
  string pathname,
  string error_message = "\"${pathname}\" not a plain file")

Throw an exception with the passed message unless the passed path is an existing
plain file. See is_file_plain() for further details.
'
function die_unless_file_plain() {
    die_unless_args_1_to_2 'expected one pathname and optional error message'
    string pathname="${1}"
    is_file_plain "${pathname}" or die "${2:-\"${pathname}\" not a plain file}"
}

declare_function '
void die_unless_files_plain(string pathname1, string pathname2, ...)

Throw an exception unless the passed paths are all existing plain files. See
is_file_plain() for further details.
'
function die_unless_files_plain() {
    die_unless_args 'expected at least one pathname'
    is_files_plain "${@}" or
        die "${2:-$(join_strings_for_message "${@}") not all plain files}"
}

declare_function '
void die_unless_file_plain_or_not_path(
  string pathname,
  string error_message = "\"${pathname}\" not a plain file")

Throw an exception unless the passed file either does not exist or is an
existing plain file (i.e., throw an exception if the passed file is an
existing path that is *NOT* a plain file). This sanity check is helpful for
avoiding accidentally overwriting existing paths that are *NOT* plain files.
'
function die_unless_file_plain_or_not_path() {
    die_unless_args_1_to_2 'expected one pathname and optional error message'
    string pathname="${1}"
    not is_path_exists "${pathname}" or is_file_plain "${pathname}" or
        die "${2:-\"${pathname}\" not a plain file}"
}

# ....................{ TESTERS                            }....................
declare_function '
boolean is_file_plain(string pathname)

Return true if the passed path is an existing plain file (i.e., a file not a
device, directory, named pipe, socket, or symbolic link).
'
function is_file_plain() {
    die_unless_arg 'expected one pathname'
    is -f "${1}" si
}

declare_function '
boolean is_files_plain(string pathname1, string pathname2, ...)

Return true if all passed paths are existing plain files. See is_file_plain()
for further details.
'
function is_files_plain() {
    # Validate passed arguments, filtering non-files from the passed paths.
    # Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed pathname.
    # * "(.)", excluding non-filenames.
    die_unless_args 'expected at least one pathname'
    list filenames; filenames=( ${^@}(.) )

    # Return true only if no such pathnames were excluded.
    (( "${#filenames}" == "${#@}" ))
}

# --------------------( WASTELANDS                         )--------------------
#function die_if_path_not_file_plain() {
