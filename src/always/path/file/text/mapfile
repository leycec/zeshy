#!/usr/bin/env zsh
# ====================[ mapfile                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle zsh module "mapfile", exposing file contents via map values.

# --------------------( WASTELANDS                         )--------------------
# ....................{ RUNNERS                            }....................
#FUXME: Actually, this function is demonstrably superfluous. I'm fairly sure we
#never call it anywhere... and if we do, we really shouldn't. It's cumbersome.
#Just use the "} always {" approach explicitly. Much simpler; more readable.
#declare_function_with_stdin <<'________________<heredoc?>________________'
#string run_command_with_mapfile(
#    string command_name, string command_arg1, string command_arg2, ...)
#
#Run the passed command with temporary access to map global ${mapfile}. Since
#`zsh` module `mapfile` exports such global, load such module immediately before
#and unload such module immediately after running such command.
#
#Leaving such module and hence such global permanently loaded inherently unsafe.
#Unsetting map elements has the non-idempotent side effect of silently deleting
#the file with such element name, if such file exists! Nonetheless, such global
#does provide slightly more efficient access to file contents than safer
#alternatives (e.g., `$(< "${filename}")`). This function renders such global
#somewhat safer but _not_ necessarily safe. Exercise caution when calling this
#function. Never manually load such module!
#________________<heredoc?>________________
#function run_command_with_mapfile() {
#    #FUXME: When enabled, this sporadically fails with an inscrutable error like:
#    #    "(anon):82: bad math expression: operand expected at `/usr/share...'"
#    #File a bug report if this is still the case under recent zsh versions.
#    # Forcibly prevent harmful ${mapfile} and hence filesystem changes.
##   freeze_variable mapfile
#
#    # Run such command with temporary access to map global ${mapfile}.
#    load_module_mapfile
#    {
#        run_command "${@}"
#    } always {
#        unload_module_mapfile
#    }
#}

#FUXME: Uhm; how actually does one do this? The zsh manual explicitly suggests
#the best method is:
#
#    run_command_silent zmodload "${1}"
#
#But that's demonstrably silly. A test method shouldn't actually have non-
#idempotent side effects. In lieu of any builtin method, the best way might
#simply be to search the appropriate path under "/usr/share/zsh" for filenames
#corresponding to passed modules.

# void load_mapfile(void)
#
# Load zsh module "mapfile". This module is *INHERENTLY* dangerous; in
# particular, unsetting list elements permanently and silently deletes files
# with the same name as such elements. To prevent accidental calamity, either:
#
# * If possible, call run_command_with_mapfile() rather than this function, which safely
#   handles such lifecycle issues for you.
# * Otherwise, unload "mapfile" immediately after use via unload_mapfile().
#function load_mapfile() {
#    load_module zsh/mapfile
#}

# void unload_mapfile(void)
#
# Unload zsh module "mapfile". See load_mapfile().
#function unload_mapfile() {
#    unload_module zsh/mapfile
#}

