#!/usr/bin/env zsh
# ====================[ copy                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path copying.

# ....................{ COPIERS                            }....................
document_function '
void copy_path(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Copy the passed source to target paths "shallowly" (i.e., copying source path
symbolic links rather than the targets of such links). Print a warning for
symbolic links broken under the target path by such copy.
'
function copy_path() {
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'
    run_with_options 'command cp' ZESHY_CP_OPTIONS "${(q)@}"
    cry_if_shifted_broken_symbolic_links "${@}"
}

document_function '
void copy_path_physically(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Copy the passed source to target paths "deeply" (i.e., copying the targets of
source path symbolic links rather than such links).
'
function copy_path_physically() {
    # We copy no symbolic links and hence needn't test brokenness.
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'
    list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_CP_OPTIONS[@]}" )
    list ZESHY_CP_OPTIONS; ZESHY_CP_OPTIONS=( "${zeshy_cp_options[@]}" -L )
    run_with_options 'command cp' ZESHY_CP_OPTIONS "${(q)@}"
}

document_function '
void copy_path_recursively(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Copy the passed source to target paths recursively "shallowly." See
copy_path() for further details.
'
function copy_path_recursively() {
    # Defer to copy_path() by temporarily appending recursive options to the
    # global list accessed by such function.
    list zeshy_cp_options; zeshy_cp_options=( "${ZESHY_CP_OPTIONS[@]}" )
    list ZESHY_CP_OPTIONS; ZESHY_CP_OPTIONS=(
        "${zeshy_cp_options[@]}"
        "${ZESHY_CP_OPTIONS_IF_RECURSIVE[@]}"
    )
    copy_path "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Implementation isn't quite right: we only want to ignore the path if not
#found; if the path is found but is *NOT* empty, we still want to throw an exception.

#(i.e., contains at least one subdirectory or file).
#   run_with_options 'command rmdir' ZESHY_RMDIR_OPTIONS "${(q)@}"

#Remove all passed directories if all such directories exist and
#are empty  or throw an exception if at
#least one such directory  See
#remove_dir_empty_if_found() for an alternative throwing no such exception.

#   run_quietly run_with_options 'command rm'\
#       'ZESHY_RM_OPTIONS ZESHY_RM_OPTIONS_IF_SHELL_NONINTERACTIVE' -- "${(q)@}"

#       if set_integer_to_arg_nonoption_count __nonoptions__ and
#           (( 1 <= __nonoptions__ && __nonoptions__ <= 3 ))
    # Validate passed arguments.
#   die_unless_args 'expected at least one filename'

    # Since removal options depend on the number of such arguments,
    # run_with_options() is insufficient. Implement such logic manually.
#   string option_list_names='ZESHY_RM_OPTIONS'
#   is_shell_interactive && {
#       if is_args_1_to_3
#       then option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3'
#       else option_list_names+=' ZESHY_RM_OPTIONS_IF_SHELL_INTERACTIVE_AND_ARGS_4_OR_MORE'
#       fi
#   }

    # Remove such files.
#   run_with_options_configured\
#       'command rm' "${option_list_names}" -- "${(q)@}"

#FUXME: This function should *NOT* be called by copy_file() or move_file() --
#only by the subsidiary copy_file_with_options_configured()-style functions.
