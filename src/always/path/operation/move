#!/usr/bin/env zsh
# ====================[ move                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle path movement (i.e., copy, move, and remove).

# ....................{ PRINTERS                           }....................
#FIXME: Take care when calling this function with "-"-prefixed arguments.

document_function '
cry_if_shifted_broken_symbolic_links(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Print a warning for passed source paths that are symbolic links broken by a
copy or move to the passed target path. This is a utility function intended to
be called only by the copy_path_*() and move_path_*() families of functions.
'
function cry_if_shifted_broken_symbolic_links() {
    # Validate passed arguments.
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'

    # List of shifted pathnames to be tested for broken symbolic links.
    list shifted_pathnames
    if is_args_2
    then shifted_pathnames=( "${2}" )
    #FIXME: Documentation's a tad off.
    # Dismantled, this is:
    #
    # * "${@[-1]}", expanding to the target pathname. Since at least three paths
    #   were passed and "cp" returned successfully, this is always a dirname.
    # * "${^@[1,-2]:t}", iteratively expanding to the basename for each passed
    #   source pathname.
    else shifted_pathnames=( "${@[-1]}/${^@[1,-2]:t}" )
    fi

    # Print a warning for all shifted paths that are broken symbolic links.
#   print_string "shifted_pathnames: ${shifted_pathnames[*]}"
    for shifted_pathname ("${shifted_pathnames[@]}") {
        is_broken_symbolic_link "${shifted_pathname}" and {
            string target_pathname
            target_pathname="$(get_symbolic_link_target "${shifted_pathname}")"
            cry "symbolic link \"${shifted_pathname}\" target \"${target_pathname}\" not found"
        }
    }

    # If the last shifted path is not a broken symbolic link, the prior
    # conditional returns false. To avoid returning false from this function in
    # such a case, return true...by force!
    return_true
}

# ....................{ MOVERS                             }....................
document_function '
void move_path(
  string source_pathname1, string source_pathname2, ...,
  string target_pathname)

Move the passed source to target paths "shallowly" (i.e., moving source path
symbolic links rather than the targets of such links). Print a warning for
symbolic links broken under the target path by such copy.
'
function move_path() {
    die_unless_args_2_or_more\
        'expected at least one source pathname and one target pathname'
    run_with_options 'command mv' ZESHY_MV_OPTIONS "${(q)@}"
    cry_if_shifted_broken_symbolic_links "${@}"
}

# --------------------( WASTELANDS                         )--------------------
