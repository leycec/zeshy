#!/usr/bin/env zsh
# ====================[ dir                                ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Dir, handling directories and dirnames (i.e., directory pathnames).

# ....................{ ALIASES                            }....................
interactive_substitution {m}k{d}ir='make_dir_if_not_found'
interactive_substitution {r}m{d}ir='remove_empty_dir'

# ....................{ EXCEPTIONS                         }....................
# void die_unless_dir(
#   string dirname,
#   string error_message = "\"${dirname}\" not a directory")
#
# Throw an exception unless the passed directory exists.
die_unless_dir() {
    die_unless_one_or_two_args\
        'expected one dirname and optional error message'
    string dirname="${1}"
    is_dir "${dirname}" or
        die "${2:-\"${dirname}\" not a directory}"
}

# void die_unless_writable_dir(
#   string dirname,
#   string error_message = "\"${dirname}\" not a writable directory")
#
# Throw an exception unless the passed directory exists and is writable by the
# current user.
die_unless_writable_dir() {
    die_unless_one_or_two_args\
        'expected one dirname and optional error message'
    string dirname="${1}"
    is_path_writable_dir "${dirname}" or
        die "${2:-\"${dirname}\" not a writable directory}"
}

# ....................{ TESTS                              }....................
# boolean is_dir(string pathname)
#
# Return true if the passed path is an existing directory.
is_dir() {
    die_unless_one_arg 'expected one pathname'
    is -d "${1}" si
}

# boolean is_path_writable_dir(string pathname)
#
# Return true if the passed path is an existing directory and writable by the
# current user.
is_path_writable_dir() {
    die_unless_one_arg 'expected one pathname'
    is -d "${1}" and -w "${1}" si
}

# ....................{ MAKERS                             }....................
# void make_dir(string dirname1, string dirname2, ...)
#
# Make all passed directories (but not parent directories of such directories)
# if no such directories exist or throw an exception if at least one such
# directory exists. See make_dir_if_not_found() for an alternative throwing no
# such exception.
make_dir() {
    die_unless_args 'expected at least one dirname'
    run_with_options 'command mkdir' ZESHY_MKDIR_OPTIONS "${(q)@}"
}

# void make_dir_if_not_found(string dirname1, string dirname2, ...)
#
# Make all passed directories and parent directories of such directories that do
# not already exist, ignoring those that do exist.
make_dir_if_not_found() {
    # Defer to make_dir(), temporarily appending option "-p" to global list
    # ${ZESHY_MKDIR_OPTIONS}.
    list zeshy_mkdir_options; zeshy_mkdir_options=( "${ZESHY_MKDIR_OPTIONS[@]}" )
    list ZESHY_MKDIR_OPTIONS; ZESHY_MKDIR_OPTIONS=( "${zeshy_mkdir_options[@]}" -p )
    make_dir "${@}"
}

# ....................{ REMOVERS                           }....................
# void remove_empty_dir(string dirname1, string dirname2, ...)
#
# Permanently remove all passed directories if all such directories exist and
# are empty (i.e., have no subdirectories or files) or throw an exception if at
# least one such directory does not exist or is not empty. See
# remove_empty_dir_if_found() for an alternative throwing no such exception.
remove_empty_dir() {
    die_unless_args 'expected at least one dirname'
    run_with_options 'command rmdir' ZESHY_RMDIR_OPTIONS "${(q)@}"
}

# void remove_empty_dir_if_found(string dirname1, string dirname2, ...)
#
# Permanently remove all passed directories that exist and are empty (i.e.,
# have no subdirectories or files), ignoring those that do not exist or are
# empty.
remove_empty_dir_if_not_found() {
    # Validate passed arguments.
    die_unless_args 'expected at least one dirname'

    #FIXME: Call the helper in "file/path" we recently defined.
    # Filter non-extant paths from the passed paths. Dismantled, this is:
    #
    # * "${^@}", iteratively expanding to each passed path.
    # * "(e:...:), excluding paths failing the test:
    #   * '[[ -e "${REPLY}" ]]', succeeding only for extant paths.
    set_args "${^@}"(e:'[[ -e "${REPLY}" ]]':)

    # If any extant paths remain, remove such paths.
    is_args and remove_file "${@}"
}

# --------------------( WASTELANDS                         )--------------------
