#!/usr/bin/env zsh
# ====================[ dir                                ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle directories.

# ....................{ EXCEPTIONS                         }....................
document_function '
void die_unless_dir(
  string dirname,
  string error_message = "\"${dirname}\" not a directory")

Throw an exception unless the passed directory exists.
'
function die_unless_dir() {
    die_unless_args_1_to_2\
        'expected one dirname and optional error message'
    string dirname="${1}"
    is_dir "${dirname}" or
        die "${2:-\"${dirname}\" not a directory}"
}

document_function '
void die_unless_dir_writable(
  string dirname,
  string error_message = "\"${dirname}\" not a writable directory")

Throw an exception unless the passed directory exists and is writable by the
current user.
'
function die_unless_dir_writable() {
    die_unless_args_1_to_2\
        'expected one dirname and optional error message'
    string dirname="${1}"
    is_dir_writable "${dirname}" or
        die "${2:-\"${dirname}\" not a writable directory}"
}

# ....................{ TESTERS                            }....................
document_function '
boolean is_dir(string pathname)

Return true if the passed path is an existing directory.
'
function is_dir() {
    die_unless_arg 'expected one pathname'
    is -d "${1}" si
}

document_function '
boolean is_dir_writable(string dirname)

Return true if the passed path is an existing directory and writable by the
current user.
'
function is_dir_writable() {
    die_unless_arg 'expected one dirname'
    is -d "${1}" and -w "${1}" si
}

# ....................{ TESTERS ~ emptiness                }....................
#FIXME: Implement the corresponding is_dir_nonempty() by editing to:
#   list dirname_if_nonempty; dirname_if_nonempty=( "${1}"(/F) )

document_function '
boolean is_dir_empty(string dirname)

Return true if the passed dir exists and is empty (i.e., contains no files).
'
function is_dir_empty() {
    # Dismantled, this is:
    #
    # * "(/^F)", excluding the passed path unless an existing directory ("/")
    #   containing no files ("^F").
    #
    # Directory emptiness is also efficiently checkable by testing the number of
    # directory links for equality with two, since only empty directories have
    # two such links (i.e., "." and ".."): e.g.,
    #
    #   string dirname="${1}"
    #   is_dir "${dirname}" and (( $(get_dir_subdir_count "${dirname}") == 0 ))
    #
    # While it remains unclear which method is the more efficient, the current
    # method is certainly more straightforward.
    die_unless_arg 'expected one dirname'

    #FIXME: We should really just define a helper function in "path/path"
    #resembling the current get_first_*_glob_qualifier() functions.
    list dirname_if_empty; dirname_if_empty=( "${1}"(/^F) )
    is_list_nonempty dirname_if_empty
}

# ....................{ GETTERS                            }....................
document_function '
integer get_dir_subdir_count(string dirname)

Get the number of subdirectories directly under the passed directory, excluding
the canonical "." and ".." links.
'
function get_dir_subdir_count() {
    # Validate passed arguments.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_unless_dir "${dirname}"

    # For non-directories, "nlink" counts the number of hard links to such file;
    # for directories, "nlink" counts the number of subdirectories of such
    # directory including omnipresent "." and ".." hard links. Hence,
    # subtracting two from "nlink" counts the number of actual subdirectories.
    # While obscure, such functionality certainly is efficient!
    print_string $(( $(zstat +nlink -- "${dirname}") - 2 ))
}

# --------------------( WASTELANDS                         )--------------------
# ....................{ ALIASES                            }....................
#interactive_substitution {m}k{d}ir='make_dir_if_not_found'
#interactive_substitution {r}m{d}ir='remove_dir_empty'

    # Defer to make_dir(), temporarily appending option "-p" to global list
    # ${ZESHY_MKDIR_OPTIONS}.
#   list zeshy_mkdir_options; zeshy_mkdir_options=( "${ZESHY_MKDIR_OPTIONS[@]}" )
#   list ZESHY_MKDIR_OPTIONS; ZESHY_MKDIR_OPTIONS=( "${zeshy_mkdir_options[@]}" -p )
#   make_dir "${@}"
