#!/usr/bin/env zsh
# ====================[ runnable                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Type, handling core type reflection.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_runnable(
#   string name, string error_message = 'not runnable')
#
# Throw an exception unless a runnable (i.e., an external command, Zsh builtin,
# Zsh function, or Zsh alias) with the passed name exists.
die_unless_runnable() {
    die_unless_one_or_two_args\
        'expected one object name and optional error message'
    string name="${1}"
    is_runnable "${name}" or die "${2:-\"${name}\" not runnable}"
}

# ....................{ TESTS                              }....................
# bool is_runnable(string name)
#
# Return true if a runnable with the passed name exists.
is_runnable() {
    die_unless_one_arg 'expected one name'
    quietly whence -- "${1}"
}

# bool is_builtin(string builtin_name)
#
# Return true if a Zsh builtin (i.e., C function accessible to all Zsh shells
# and scripts) with the passed name exists.
is_builtin() {
    die_unless_one_arg 'expected one name'
    is "$(whence -w -- "${1}")" == *': builtin' si
}

# ....................{ ALIASES                            }....................
# bool is_alias(string alias_name)
#
# Return true if a Zsh alias with the passed name exists.
is_alias() {
    die_unless_one_arg 'expected one name'
    quietly alias -- "${1}"
}

# bool is_suffix_alias(string alias_name)
#
# Return true if a Zsh suffix alias with the passed name exists.
is_suffix_alias() {
    die_unless_one_arg 'expected one name'
    quietly suffix_alias -- "${1}"
}

# --------------------( WASTELANDS                         )--------------------
#   is $(whence -w "${1}") == *': (alias|builtin|function)' si
