#!/usr/bin/env zsh
# ====================[ string                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy String, handling core string functionality.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_string(
#   string variable_name, string error_message = 'not a string')
#
# Throw an exception unless the variable with the passed name is a string.
die_unless_string() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    is_string "${1}" or die "${2:-\"${1}\" not of type string}"
}

#FIXME: Rename die_unless_character().
# void die_unless_char(
#   string variable_name, string error_message = 'not a string')
#
# Throw an exception unless the variable with the passed name is a single-
# character string.
die_unless_char() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    is_char "${1}" or
        die "${2:-\"${1}\" not of type string or more than one character in length}"
}

# ....................{ TESTS                              }....................
# bool is_string(string variable_name)
#
# Return true if the variable with the passed name is a string.
is_string() {
    die_unless_one_arg 'expected one variable name'
    is $(get_type "${1}") == 'scalar'* si
}

#FIXME: Rename is_character().
# bool is_char(string variable_name)
#
# Return true if the variable with the passed name is a single character.
is_char() {
    die_unless_one_arg 'expected one variable name'
    is_string "${1}" and (( $(get_length "${(P)1}") == 1 ))
}

# ....................{ GETTERS ~ length                   }....................
# int get_length(string text)
#
# Get the length of the passed string in single-byte characters. If such string
# contains multibyte characters (e.g., UTF-8-encoded Unicode), this may not be
# what you expect.
get_length() {
    die_unless_one_arg 'expected one string'
    sputter ${#1}
}

# int get_multibyte_length(string text)
#
# Get the length of the passed string in multibyte characters.
get_multibyte_length() {
    die_unless_one_arg 'expected one string'
    sputter ${(m)#1}
}

# string get_line_length(string text1, string text2, ...)
#
# Get the total number of lines in the passed strings.
get_line_length() {
    die_unless_args 'expected at least one string'
    list lines; lines=( "${(f)@}" )
    get_list_size lines
}

# string get_word_length(string text, string text2, ...)
#
# Get the number of words in the passed string, aggregating each quoted
# substring into one word. Hence, this is the Zsh-specific word length.
get_word_length() {
    die_unless_args 'expected at least one string'
    list words; words=( "${(z)@}" )
    get_list_size words
}

# string get_unquoted_word_length(string text1, string text2, ...)
#
# Get the number of words in the passed string, *NOT* aggregating quoted
# substrings. Hence, this is the conventional document word length.
get_unquoted_word_length() {
    die_unless_args 'expected at least one string'
    list words; words=( "${=@}" )
    get_list_size words
}

# ....................{ GETTERS ~ lines                    }....................
# string get_line(string text, int line_index = 1)
#
# Get the line corresponding to the passed line number from the passed string.
# If positive, this is the nth line from the beginning starting at 1. Conversely
# if negative, this is the nth line from the end starting at -1.
get_line() {
    # Localize passed arguments.
    die_unless_one_or_two_args\
        'expected one string and optional line number'
    string line_index=${2:-1}
    get_lines "${1}" ${line_index} ${line_index}
}

# string get_first_lines(string text, int last_line_index = 1)
#
# Get the first n lines (defaulting to the first line) from the passed string.
get_first_lines() {
    die_unless_one_or_two_args\
        'expected one string and optional last line number'
    get_lines "${1}" 1 ${2:-1}
}

# string get_last_lines(
#   string text, int last_line_index = get_line_length(string))
#
# Get the last n lines (defaulting to the last line) from the passed string.
get_last_lines() {
    die_unless_one_or_two_args\
        'expected one string and optional last line number'
    string text="${1}" line_length
    line_length="$(get_line_length "${text}")"
    get_lines "${text}" ${2:-${line_length}} ${line_length}
}

# string get_lines(
#   string text,
#   int start_line_index = 1,
#   int end_line_index = get_line_length(string))
#
# Get the list of lines starting at the passed first line number (defaulting to
# the first line) and concluding at the passed last line number (defaulting to
# the last line) from the passed string.
get_lines() {
    # Validate passed arguments.
    die_unless_one_to_three_args\
        'expected one string and optional start and end line numbers'
    list lines; lines=( "${(f)1}" )
    string beg_line_index="${2:-}" end_line_index="${3:-}"
    check_list_args lines beg_line_index end_line_index

    # Return the desired lines. Do *NOT* quote such expansion.
    sputter_newline_delimited ${lines[${beg_line_index},${end_line_index}]}
}

# ....................{ GETTERS ~ words                    }....................
# string get_first_word(string text, string text2, ...)
#
# Get the first word from the passed string.
get_first_word() {
    die_unless_args 'expected at least one string'
    sputter "${*[(w)1]}"
}

# string get_word(string text, int word_integer = 1)
#
# Get the word corresponding to the passed word number from the passed string.
get_word() {
    die_unless_one_or_two_args\
        'expected one string and optional word number'
    sputter "${1[(w)${2:-1}]}"
}

# ....................{ WRITERS                            }....................
# string suffix_if_not_already(string text, string suffix)
#
# Suffix the passed string with the passed suffix, if not already: e.g.,
#
#     >>> suffix_if_not_already '/habitat/failing/flailing/habits' '/'
#     /habitat/failing/flailing/habits/
suffix_if_not_already() {
    die_unless_two_args 'expected one string and one suffix'
    sputter "${1%${2}}${2}"
}

# string tabulate(string text, string delimiter = ' ')
#
# Horizontally align the passed strings on the passed delimiter (defaulting to a
# single space) into table columns.
tabulate() {
    die_unless_one_or_two_args 'expected one string and optional delimiter'
    if is_one_arg
    then sputter "${1}" | column -t
    else sputter "${1}" | column -t -s "${2}"
    fi
}

# ....................{ WRITERS ~ case                     }....................
#FIXME: Generalize such functions to accept one or more strings.
# string capitalize_string(string text)
#
# Capitalize the first letter of each word in the passed string: e.g.,
#
#     >>> capitalize_string "phase three: profit"
#     Phase Three: Profit
capitalize_string() {
    die_unless_one_arg 'expected one string'
    sputter "${(C)1}"
}

# string lowercase_string(string text)
#
# Convert the passed string to all lowercase_string: e.g.,
#
#     >>> lowercase_string "The Wind in the Pillows"
#     the wind in the pillows
lowercase_string() {
    die_unless_one_arg 'expected one string'
    sputter "${(L)1}"
}

# string uppercase_string(string text)
#
# Convert the passed string to all uppercase_string: e.g.,
#
#     >>> uppercase_string "The Pyre of My Loins"
#     THE PYRE OF MY LOINS
uppercase_string() {
    die_unless_one_arg 'expected one string'
    sputter "${(U)1}"
}

# ....................{ WRITERS ~ lines                    }....................
# string number_lines(string text)
#
# Prefix each line of the passed string with that line's number.
number_lines() {
    sputter "${@}" |
        run_with_options 'run_paged command nl' 'ZESHY_NL_OPTIONS'
}

#FIXME: Should probably be theme-specific.
# string number_lines_highlighting(string text, int highlight_line_index)
#
# Prefix each line of the passed string with that line's number and highlight
# the passed line number. Since "nl" supports no highlighting, this function
# accepts no "nl"-specific options.
number_lines_highlighting() {
    # Localize passed arguments.
    die_unless_two_args 'expected one string and one line number'
    die_unless_positive_decimal "${2}"
    string text="${1}"
    integer line_index="${2}" line_length

    #FIXME: Actually, it's trivial to convert negative to positive line numbers.
    # Validate passed arguments. Negative line numbers are impermissible.
    line_length="$(get_line_length "${text}")"
#   utter "line length: ${line_length}"
    (( 1 <= line_index && line_index <= line_length )) or
        die "line number ${line_index} not in [1, ${line_length}]"

    # Number lines.
    sputter "${text}" | awk -vNRHI=${line_index} '
# If any line other than the highlight line, print the current line number
# followed by the line.
NR != NRHI { printf("%6d%7s%s\n", NR, "", $0) }
# If the highlight line, print the current line number prefixed and suffixed by
# pleasing ASCII arrows. (See print_stack_trace() for similar logic.)
NR == NRHI {
    # Number of digits in the current line number.
    NRLEN = length(NR);
         if (NRLEN==1) {NRNOW = " <-~ " NR}
    else if (NRLEN==2) {NRNOW = "<-~ " NR}
    else if (NRLEN==3) {NRNOW = "<- " NR}
    else               {NRNOW = NR}       # if true, your string is horrid.
    printf("%s ~->   %s\n", NRNOW, $0)
}'
}

# ....................{ WRITERS ~ removers                 }....................
# string remove_prefix(string text, string prefix)
#
# Remove the passed prefix from the passed string: e.g.,
#
#     >>> remove_prefix 'zealia brown' 'zeal'
#     ia brown
remove_prefix() {
    die_unless_two_args 'expected one string and one prefix'
    sputter "${1##${2}}"
}

# string remove_suffix(string text, string suffix)
#
# Remove the passed suffix from the passed string: e.g.,
#
#     >>> remove_suffix 'august derleth' 'leth'
#     august der
remove_suffix() {
    die_unless_two_args 'expected one string and one suffix'
    sputter "${1%%${2}}"
}

# string truncate_string(
#   string text, int maximum_length,
#   string suffix_if_exceeding_maximum_length = '')
#
# Truncate the passed string to the passed length, replacing the end of such
# string with the passed suffix (defaulting to the empty string) if the passed
# string exceeds such length: e.g.,
#
#     >>> truncate_string 'Fallujah' 7
#     Falluja
#     >>> truncate_string 'Fallujah' 7 '...'
#     Fall...
truncate_string() {
    # Localize and validate passed arguments.
    die_unless_two_or_three_args\
        'expected one string, one length, and optional suffix'
    die_unless_positive_decimal "${2}"
    string text="${1}" suffix_if_exceeding_maximum_length="${3:-}"
    integer text_length="${#text}" maximum_length="${2}"

    # If the passed string requires no truncation, return the same string.
    (( text_length > maximum_length )) or {
        sputter "${text}"
        return
    }

    # If a suffix was passed and the passed string is at least as long as such
    # suffix, truncate by replacing the end of the string with such suffix.
    if is_nonempty "${suffix_if_exceeding_maximum_length}"; then
        integer suffix_length="${#suffix_if_exceeding_maximum_length}"
        if  (( maximum_length >  suffix_length )); then
            (( maximum_length -= suffix_length ))
#           print "maximum_length: ${maximum_length}"
            sputter\
                "${text[1,${maximum_length}]}${suffix_if_exceeding_maximum_length}"
            return
        fi
    fi

    # Otherwise, truncate without suffix replacement.
    sputter "${text[1,${maximum_length}]}"
}

# --------------------( WASTELANDS                         )--------------------
# Also, suffix
#with "_string" for safety (i.e., we might someday want a capitalize_string_list()
#function, in which case a capitalize_string() function sows confusion).
#FIXME: I'm fairly sure that, as with the "(f)" flag above, the "(w)" flag
#erroneously operates on characters if there exists only one such word. Fix.
#Hmm. Perhaps not. It appears to operate completely differently, actually, being
#an index rather than parameter expansion. Also, do we really need a
#get_first_word() function? Seems a tad superfulous.

# string number_lines_highlighting_line(
#   int highlight_line_index,
#   string text1, string text2, ...)
#
# Prefix each line of the passed string with that line's number and highlight
# the passed line number. Since "nl" supports no highlighting, this function
# accepts no "nl"-specific options.
#number_lines_highlighting_line() {
#    # Localize passed arguments.
#    die_unless_at_least_two_args\
#        'expected one line number and one or more strings'
#    die_unless_decimal "${1}"
#    integer highlight_line_index="${1}" line_length
#    shift_one_arg
#    string text="${@}"

#FIXME: By definition, you only join a list to a string and split a list to a
#string. Hence, these function names are overly verbose. Rename
#join_join_list_to_string() to join_list_with() and
#join_join_list_to_string_prefixing_last_with() to join_list_prefixing_last_element_with().
#This produces much more legible code.

#FIXME: Right. join_list_to_string() is simply too brief. join_join_list_to_string() reads
#better.

    # Localize passed arguments.
#   die_unless_args\
#       'expected zero or more "nl" options and one string'
#   string text="${@[-1]}"
#   pop_one_arg

    # Prefix.
#   list nl; nl=( nl "${ZESHY_NL_OPTIONS[@]}" )
#   sputter "${text}" | {
#       if is_interactive
#       then "${nl[@]}" "${ZESHY_NL_OPTIONS_IF_INTERACTIVE[@]}"     "${@}"
#       else "${nl[@]}" "${ZESHY_NL_OPTIONS_IF_NON_INTERACTIVE[@]}" "${@}"
#       fi
#   }

    #FIXME: Implementable with pure-Zsh.
#   sputter "${1}" | head --lines="${2:-1}"

#   list newline_split; newline_split=( "${(s:\n:)1}" )
#   print "first line: ${newline_split[1]}"

# string get_first_line(string text)
#
# Get the first line from the passed string.
#get_first_line() {
#    die_unless_one_arg 'expected one string'
#   sputter "${1[(f)1]}"
#}

#   # Localize passed arguments.
#   (( # >= 1 && # <= 2 )) ||
#       die 'expected one string and optional first line number'
#   local text="${1}"
#   integer first_line_index="${2}"

    # Prefix.
#   nl -v${first_line_index} "${text}"

    # Bizarrely, the "(f)" no longer appears to behave as advertised on my
    # install. In fact, it no longer does anything at all. Consequently, we
    # perform a brute-force split on newlines. Ideally, this should be:
    #
    #     print "${#${(f)1}}"
    # 
    # Unfortunately, we can't even expand this to:
    # 
    #     print "${#${(s:\n:)1}}"
    # 
    # Doing so behaves correctly for all input *EXCEPT* that without newlines.
    # Consequently, we perform an even more brute-force split into a list.
#     >>> split_string_to_list '"Contumely Hard" Climaxes' array
#     >>> print "${array[1]}"
#     Contumely Hard
#    # If the caller passed no separator, default to word splitting.
#   if is_empty "${separator}"
#   then eval ${list_name}'=( ${(z)text} )'

#   is_set "${target_name_prefix}" or string ${target_name_prefix}
#   is_set "${target_name_suffix}" or string ${target_name_suffix}
#   is_set "${list_name}" or list "${list_name}"

#   die_unless_string "${target_name_prefix}"
#   die_unless_string "${target_name_suffix}"

#Compare the lengths of the original and resulting strings.
#   local string_matches_deleted="${string//${~glob}/}"
#   local glob_characters="${#glob//}"
#   print $(((${#string} - ${#string_matches_deleted}) / ${#glob}))
#   print "string_newlined: ${string_newlined}"
