#!/usr/bin/env zsh
# ====================[ list                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy List, handling lists (i.e., non-associative arrays).
#
# --------------------( TODO                               )--------------------
# * Incorporate difference and intersect list operations from "src/load".
# * Incorporate set operations from:
#   http://www.catonmat.net/blog/set-operations-in-unix-shell

# ....................{ EXCEPTIONS                         }....................
# void die_unless_map_or_list(
#   string variable_name, string error_message = 'not a map or list')
#
# Die unless the variable with the passed name is a map or list.
die_unless_map_or_list() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    is_map_or_list "${1}" or die "${2:-\"${1}\" not a declared map or list}"
}

# void die_unless_list(string variable_name, string error_message = 'not a list')
#
# Die unless the variable with the passed name is a list.
die_unless_list() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    is_list "${1}" or die "${2:-\"${1}\" not a declared list}"
}

# ....................{ EXCEPTIONS ~ emptiness             }....................
# void die_unless_list_nonempty(
#   string variable_name, string error_message = 'not a list')
#
# Die unless the variable with the passed name is a non-empty list.
die_unless_list_nonempty() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    is_list_nonempty "${1}" or die "${2:-\"${1}\" not a non-empty list}"
}

# void die_if_list_empty(
#   string variable_name, string error_message = 'not a list')
#
# A synonym of die_unless_list_nonempty().
die_if_list_empty() {
    die_unless_list_nonempty "${@}"
}

# ....................{ TESTS                              }....................
# boolean is_map_or_list(string variable_name)
#
# Return true if the variable with the passed name is a map or list.
is_map_or_list() {
    die_unless_one_arg 'expected one variable name'
    is $(get_type "${1}") == (list|array|association)* si
}

# boolean is_list(string variable_name)
#
# Return true if the variable with the passed name is a list (i.e., array).
is_list() {
    # Global lists have type "list", local lists "list-local", and internal
    # structures (e.g., "${path}") "array" or "array-special". Match all.
    die_unless_one_arg 'expected one variable name'
    is $(get_type "${1}") == (list|array)* si
}

# boolean is_list_empty(string variable_name)
#
# Return true if the variable with the passed name is an empty list.
is_list_empty() {
    die_unless_one_arg 'expected one variable name'
    string list_name="${1}"
    is_list "${list_name}" and (( ${#${(@P)list_name}} == 0 ))
}

# boolean is_list_nonempty(string variable_name)
#
# Return true if the variable with the passed name is a non-empty list.
is_list_nonempty() {
    die_unless_one_arg 'expected one variable name'
    string list_name="${1}"
    is_list "${list_name}" and (( ${#${(@P)list_name}} ))
}

# boolean is_list_element(string list_name, string element)
#
# Return true if the list with the passed name contains an element with the
# passed value.
is_list_element() {
    # Validate passed arguments.
    die_unless_two_args 'expected one list name and one element'
    string list_name="${1}" element="${2}"
    die_unless_list "${list_name}"

    #FIXME: This is extendable into an is_list_element_matching() function
    #by simple expanding ${element} as ${~element} here.
    # Dismantled, this is:
    #
    # * 'P', the scalar name of the desired list in the caller's scope.
    # * '@', as a list rather than a scalar.
    # * "${(M)", ":#", and "}", excluding all but the passed element.
    is_nonempty "${(M)${(@P)list_name}:#${element}}"
}

# ....................{ GETTERS                            }....................
# integer get_list_size(string list_name)
#
# Get the number of elements in the list with the passed name.
get_list_size() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one map name'
    string map_name="${1}"
    die_unless_map "${map_name}"

    # Get map size. Dismantled, this is:
    #
    # * '1', the passed list name.
    # * 'P', the scalar name of the desired list in the caller's scope.
    # * '@', as a list rather than a scalar.
    # * '#', the size of this list.
    sputter ${#${(@P)map_name}}
}

# ....................{ GETTERS ~ elements                 }....................
#FIXME: Once we validate this works as expected, implement the converse
#get_first_list_element_matching() function by using flag "(R)" where we
#currently use flag "(r)".
# string get_first_list_element_matching(string list_name, string glob_pattern)
#
# Get the first element matching the passed glob pattern of the list with the
# passed name.
get_first_list_element_matching() {
    # Localize and validate arguments.
    die_unless_two_args 'expected one list name and one glob pattern'
    string list_name="${1}" glob_pattern="${2}" element
    die_unless_list "${list_name}"

    # Dismantled, this is:
    #
    # * 'P', the scalar name of the desired list in the caller's scope.
    # * '@', as a list rather than a scalar.
    # * 'r', expanding to the first element matching the passed pattern.
    element="${${(@P)list_name}[(r)"$glob_pattern"]}"

    # Throw an exception if no such element matches.
    die_unless_nonempty "${element}"\
        "pattern \"${glob_pattern}\" not matched in list \"${list_name}\""

    # Otherwise, return such element.
    sputter ${element}
}

# ....................{ CHECKERS                           }....................
#FIXME: Rename test_list_args().
# void check_list_args(
#   string list_name, string start_index_name, string end_index_name)
#
# Check the passed list-centric variables for sanity and, if sane, set such
# variables to sensible defaults. Specifically:
#
# * Throw an exception if no list with the passed name exists.
# * Throw an exception if the variable with the passed start index is empty but
#   the variable with the passed end index is not.
# * If both the variables with the passed start and end indices are empty,
#   default the former to "1" (i.e., the first list index) and the latter to
#   "-1" (i.e., the last list index). Such indices thus span the entire list.
# * If only the variable with the passed end index is empty, default such
#   variable to the same value as that of the passed start index. Such indices
#   thus span the single list element for the passed start index.
# * Throw an exception if the variables with such start and end indices are not
#   non-zero integers bounded by [-list_size, list_size].
# * Throw an exception if the start index is greater than the end index.
#
# In short, this function guarantees bounded list indices.
check_list_args() {
    # Validate sanity, intentionally obfuscating local variable names to avoid
    # unintentionally masking caller variables.
    die_unless_one_to_three_args\
        'expected one list name, one start index name, and one end index name'
    #FIXME: Variable name obfuscation is silly. If the unobfuscated names fail,
    #we cleary have larger issues on our hands. Investigate why we did this in
    #the first place. (Conflict with get_lines() locals, as I recall.)
    string\
        _list_name_="${1}" _beg_index_name_="${2}" _end_index_name_="${3}"\
        _list_size_ _beg_index_ _end_index_
    _list_size_="$(get_list_size "${_list_name_}")"

    # Default indices.
    if is_set_empty "${_beg_index_name_}"; then
        die_unless_set_empty "${_end_index_name_}"\
            "start index \"${_beg_index_name_}\" empty but end index \"${_end_index_name_}\" non-empty"
        _beg_index_=1
        _end_index_=${_list_size_}
    elif is_set_empty "${_end_index_name_}"; then
        _beg_index_=${(P)_beg_index_name_}
        _end_index_=${_beg_index_}
    else
        _beg_index_=${(P)_beg_index_name_}
        _end_index_=${(P)_end_index_name_}
    fi
    die_unless_decimal "${_beg_index_}"
    die_unless_decimal "${_end_index_}"

    # Validate indices, converting negative to positive indices to simplify
    # comparison. Preserve original indices for pretty printing.
    integer _new_beg_index_=${_beg_index_} _new_end_index_=${_end_index_}
    (( _new_beg_index_ > 0 )) or (( _new_beg_index_ += _list_size_ + 1 ))
    (( _new_end_index_ > 0 )) or (( _new_end_index_ += _list_size_ + 1 ))
    (( 1 <= _new_beg_index_ && _new_beg_index_ <= _list_size_ )) or
        die "list index ${_beg_index_} not in [-${_list_size_}, ${_list_size_}] or is 0"
    (( 1 <= _new_end_index_ && _new_end_index_ <= _list_size_ )) or
        die "list index ${_end_index_} not in [-${_list_size_}, ${_list_size_}] or is 0"
    (( _new_beg_index_ <= _new_end_index_ )) or
        die "start index ${_beg_index_} > end index ${_end_index_}"

    # Since indices validate, set index variables to the prior defaults.
    eval ${_beg_index_name_}=${_new_beg_index_}
    eval ${_end_index_name_}=${_new_end_index_}
#   print "${_beg_index_name_}=${(P)_beg_index_name_}"
#   print "${_end_index_name_}=${(P)_end_index_name_}"
}

# ....................{ SET OPERATORS                      }....................
# void difference_lists(
#   string left_list_name, string right_list_name, string result_list_name)
#
# Difference the first and second passed lists into the third. Considering each
# such list a list set (i.e., ignoring duplicate elements) and abbreviating
# B="${left_list_name}", C="${right_list_name}", and A="${result_list_name}",
# this function implements the asymmetric set difference A = B - C of B and C:
# e.g.,
#
#     >>> list y; y=( 'slimy' 'things' 'did' 'crawl' 'with' 'legs' )
#     >>> list e; e=( 'upon' 'the' 'slimy' 'sea' )
#     >>> list a
#     >>> difference_lists y e a
#     >>> sputter "${a[@]}"
#     things did crawl with legs
difference_lists() {
    # Validate passed arguments.
    die_unless_three_args 'expected left, right, and result list names'
    string left_list_name="${1}" right_list_name="${2}" result_list_name="${3}"
    die_unless_list "${left_list_name}"
    die_unless_list "${right_list_name}"
    die_unless_list "${result_list_name}"

    # Difference. Bless your pithy soul, Zsh 5.0.0. Dismantled, this is:
    #
    # * "(@P)", expanding all elements of the first passed list.
    # * ":|", excluding all elements of the second passed list.
    eval "${result_list_name}=( \"\${(@P)left_list_name:|${right_list_name}}\" )"
}

# void intersect_lists(
#   string left_list_name, string right_list_name, string result_list_name)
#
# Intersect the first and second passed lists into the third. Considering each
# such list a list set (i.e., ignoring duplicate elements) and abbreviating
# B="${left_list_name}", C="${right_list_name}", and A="${result_list_name}",
# this function implements the symmetric set intersection A = B & C of B and C:
# e.g.,
#
#     >>> list y; y=( 'slimy' 'things' 'did' 'crawl' 'with' 'legs' )
#     >>> list e; e=( 'upon' 'the' 'slimy' 'sea' )
#     >>> list a
#     >>> intersect_lists y e a
#     >>> sputter "${a[@]}"
#     slimy
intersect_lists() {
    # Validate passed arguments.
    die_unless_three_args 'expected left, right, and result list names'
    string left_list_name="${1}" right_list_name="${2}" result_list_name="${3}"
    die_unless_list "${left_list_name}"
    die_unless_list "${right_list_name}"
    die_unless_list "${result_list_name}"

    # Intersect. Bless your bawdy eyes, Zsh 5.0.0.
    eval "${result_list_name}=( \"\${(@P)left_list_name:*${right_list_name}}\" )"
}

# ....................{ CONVERTERS                         }....................
# string convert_list_to_restorable_string(string list_name)
#
# Get a string corresponding to the contents of the list with the passed name.
# To losslessly restore such string into a list identical to such list, either:
#
# * Pipe the return value of this function to restore_list(), automatically
#   restoring such string into a local list named "list". (Easy; inflexible.)
# * Manually apply parameter expansion flag "(z)" to the return value of this
#   function in a list assignment to any list you like. (Harder; flexible.)
#
# For example: e.g.,
#
#   # Declare a function returning a restorable string.
#   >>> get_minerals() {
#   ...     list asbestos
#   ...     asbestos=( 'nephrite' 'porphyry' 'glauconite' 'mafic' )
#   ...     convert_list_to_restorable_string asbestos
#   ... }
#
#   # Automatically restore such string back into a local list named "list".
#   >>> get_minerals | restore_list
#   >>> sputter "${list[1]}"
#   nephrite
#
#   # Or (manually) restore such string back into a local list named... whatever
#   # you like, man!
#   >>> list quebec_resources; quebec_resources=( ${(z)"$(get_minerals)"} )
#   >>> sputter "${quebec_resources[-1]}"
#   mafic
convert_list_to_restorable_string() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one list name'
    string list_name="${1}"
    die_unless_list "${list_name}"

    # Dismantled, this is:
    #
    # * '1:-list' expands to the passed list name or 'list' if no such name
    #   was passed.
    # * 'P' transitively expands this name to the actual name of the desired
    #   associative list in the caller's scope.
    # * '@' interprets this expansion as a list rather than scalar.
    # * 'qq' protectively embeds all reserved shell characters in such names
    #   and values in single quotes.
    sputter "${(qq@P)list_name}"
}

# ....................{ JOINERS                            }....................
# See Zeshy String for the corresponding split_*() family of functions.

# void join_list_to_lines(string list_name)
#
# Join the list with the passed name into a newline-delimited string: e.g.,
#
#     >>> list robert; robert=( "Stranger in" "a" "Strange Land"
#     >>> join_list_to_lines robert
#     Stranger in
#     a
#     Strange Land
join_list_to_lines() {
    die_unless_one_arg 'expected one list name'
    join_list_to_string "${1}" '\n'
}

# void join_list_to_string(string list_name, string delimiter = "")
#
# Join the list with the passed name into a string with each list element
# delimited by the passed delimiter (defaulting to the empty string). The
# delimiter may be of any length: e.g.,
#
#     >>> list heinlein; heinlein=( "The Moon" "Is" "a" "Harsh Mistress" )
#     >>> join_list_to_string heinlein ", "
#     The Moon, Is, a, Harsh Mistress
join_list_to_string() {
    # Validate passed arguments.
    die_unless_one_or_two_args 'expected one list name and one delimiter'
    string list_name="${1}" delimiter="${2:-}"
    die_unless_list "${list_name}"

    # If the passed delimiter is a colon, delimit such delimiter by periods.
    # Delimited, this is:
    #
    # * "j.:.", joining on colons.
    # * "@P", expanding to the list with the passed name.
    if is "${delimiter}" == ':' si
    then sputter ${(j.:.@P)list_name}
    # Otherwise, delimit such delimiter by colons. Since Zsh appears to
    # expand no parameters embedded in parameter expansion flags (e.g.,
    # "print ${(j:${delimiter}:)@}", joining list elements with the raw string
    # "${delimiter}" rather than the expansion of such parameter), wrap the
    # desired expression in an "eval" to force such expansion.
    else eval "print -- \${(j:${delimiter}:)${list_name}}"
    fi
}

# ....................{ JOINERS ~ legible                  }....................
# void join_list_to_legible_truncated_string(
#   string last_element_prefix, string text1, string text2, ...)
#
# Join the passed elements into a human-readable string separated by commas,
# prefixing the last such element with the passed string and truncating the
# resulting string to a hopefully brief number of characters: e.g.,
#
#     >>> join_list_to_legible_truncated_string 'or'\
#     ...   "I laiss i-ferin thuiar" "I 'wilith lim echui aur."
#     I laiss i-ferin thuiarI 'wil...
#
# This and join_list_to_legible_string() accept list elements rather than a
# variable name signifying a list due to caller requirements, elsewhere.
join_list_to_legible_truncated_string() {
    # Join, then truncate.
    string text; text="$(join_list_to_legible_string "${@}")"
    truncate_string "${text}" 32 '...'
}

# void join_list_to_legible_string(
#   string last_element_prefix,
#   string text1, string text2, ...)
#
# Join the passed elements into a human-readable string separated by commas,
# prefixing the last such element with the passed string: e.g.,
#
#     >>> join_list_to_legible_string 'or' 'Wingnut' 'Dishwashers' 'Union'
#     Wingnut, Dishwashers, or Union
join_list_to_legible_string() {
    # Validate passed arguments.
    die_unless_at_least_two_args\
        'expected one delimiter, one last element prefix, and at least one list element'
    string last_element_prefix="${1}"
    shift_one_arg

    # If more than two list elements were passed, join such elements and prefix
    # the last such element.
    if is_at_least_three_args; then
        list munged; munged=( "${@[1,-2]}" "${last_element_prefix} ${@[-1]}" )
        join_list_to_string munged ', '
    # If only two list elements were passed, print the first element, the last
    # element prefix, and the third element.
    elif is_two_args
    then sputter "${1} ${last_element_prefix} ${2}"
    # If only one list element was passed, print that element as is.
    else sputter "${1}"
    fi
}

# ....................{ REMOVERS                           }....................
#FIXME: This arguably suggests a new "type/list/glob" component. *shrug*
# void remove_list_elements_matching(
#   string source_list_name, string glob,
#   string target_list_name = "${source_list_name}")
#
# Copy all elements of the passed source list *NOT* matching the passed glob
# into the passed target list (defaulting to the passed source list). If passed
# only two arguments, remove all matching source list elements "in-place." This
# function implements the inverse of retain_list_elements_matching().
remove_list_elements_matching() {
    # Validate arguments.
    die_unless_two_or_three_args\
        'expected one source list name, one glob, and optional target list name'
    string source_list_name="${1}" glob="${2}" target_list_name
    target_list_name="${3:-${source_list_name}}"
    die_unless_list "${source_list_name}"
    die_unless_list "${target_list_name}"

    # Remove. Dismantled, this is:
    #
    # * ":#", removing all passed source list elements matching...
    # * "${~glob}", the passed glob as a glob rather than raw string.
    eval "${target_list_name}=( \${${source_list_name}:#${~glob}} )"
}

# void retain_list_elements_matching(
#   string source_list_name, string glob,
#   string target_list_name = "${source_list_name}")
#
# Copy all elements of the passed source list matching the passed glob into the
# passed target list (defaulting to the passed source list). If passed only two
# arguments, remove non-matching source list elements "in-place." This function
# implements the inverse of remove_list_elements_matching().
retain_list_elements_matching() {
    # Validate arguments.
    die_unless_two_or_three_args\
        'expected one source list name, one glob, and optional target list name'
    string source_list_name="${1}" glob="${2}" target_list_name
    target_list_name="${3:-${source_list_name}}"
    die_unless_list "${source_list_name}"
    die_unless_list "${target_list_name}"

    # Remove. Dismantled, this is:
    #
    # * "(M)" and ":#", removing all passed source list elements not matching...
    # * "${~glob}", the passed glob as a glob rather than raw string.
    eval "${target_list_name}=( \${(M)${source_list_name}:#${~glob}} )"
}

# --------------------( WASTELANDS                         )--------------------
    # If no list elements were passed, print the empty string and return.
#   is_list_nonempty "${list_name}" or return_true

    #FIXME: Add new get_list_difference() and get_list_intersection() functions
    #to "type/function", leveraging die_unless_list() and return_list(). (Yep!)
    #Hmm; wait. We're probably better off with difference_lists_into() and
    #intersect_lists_into() functions accepting a third arg: the target list.

    # The difference between the two lists is the list of all Zeshy functions.
    # Recompile all such function definitions into the Zeshy digest file. (For
    # those who care, this is an asymmetric rather than symmetric difference.)
#   print "autoload function names: ${new_function_names[@]:|ZESHY_OLD_FUNCTION_NAMES}"
#   zcompile -c "${ZESHY_USER_DIGEST_FILE}"\
#       "${new_function_names[@]:|ZESHY_OLD_FUNCTION_NAMES}"

#FIXME: Poor name, since this doesn't actually perform a "return" statement.
#Perhaps sputter_restorable_list()? AH! Got it: convert_list_to_restorable_string().
# If no delimiter is passed, split words by default
# parsing (i.e., first by quote- and then whitespace-delimited words)
# See split_string_to_list() for alternative splitting on all substrings.
# See split_string_on_first() for alternative splitting into string variables.
#I'm pretty sure we can implement this by splitting text into a list of lines
#and running a single parameter expansion on such list (possibly also locally
#setting "IFS=':'"), which Zsh *SHOULD* apply to each list member. If we can't
#do this and instead have to manually iterate the list, *DON'T*. Just use "cut".
#   >>> string List="$(get_list)"
#   >>> expand_List_to_list

#FIXME: This is silly. No one's *EVER* going to call this function. It's simply
#too obscure. Fold its implementation into expand_List(), which should
#incidentally be renamed to expand_...

#   # Expand the stringified list back into a list with a brute-force "eval".
#   >>> eval 'expand_list list $(make_list)'
#   >>> print "last list element: ${list[-1]}"  # as in the original list!
#   mafic

# void expand_list(string list_name, string text1, string text2, ...)
#
# Return a string that, when "eval"-ed by the caller, expands the passed strings
# having a stringified list previously produced by return_list() into the list
# with the passed name. See expand_List() for a concise alternative.
#expand_list() {
#    die_unless_at_least_two_args\
#        'expected one variable name and one or more strings'
#    string list_name="${1}"
#    shift_one_arg
#
#    # Dismantled, this is:
#    #
#    # * '@' expands to all remaining passed parameters: the stringified list.
#    # * 'z' splits the stringified list into a numeric list of words,
#    #   effectively undoing the prior 'kv' flag.
#    print "list ${list_name}; ${list_name}=( ${(z)@} )"
#}

# void expand_List()
#
# Expand stringified list "List" to list "list", a convenience alias simplifying
# the more generalized expand_list() function. See return_list() for examples.
#alias expand_List='
#is_set List or die "\"List\" not defined";
#eval "$(expand_list list ${List})"'

    # Declare a list with the passed name if no such list exists.
#   is_unset "${list_name}" or print "list ${list_name}; "

#   die_unless_list "${list_name}"
#
# Map-specific analogues of the above list-specific functions.
# ....................{ INITIALIZATION                     }....................
#   die_unless_two_to_three_args\
#       'expected one string name, one list name, and one optional delimiter'
#   string text_name="${1}" list_name="${2}" delimiter="${3}"
