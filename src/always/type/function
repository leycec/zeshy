#!/usr/bin/env zsh
# ====================[ function                           ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Function, handling Zsh functions.

# ....................{ TESTS                              }....................
# bool is_function(string function_name)
#
# Return true if a Zsh function with the passed name exists.
is_function() {
    die_unless_one_arg 'expected one function name'
    typeset -f "${1}" 1>/dev/null
#   is "$(whence -w -- "${1}")" == *': function' si
}

# ....................{ GETTERS                            }....................
# string list_functions(void)
#
# List all currently declared Zsh function names delimited by newlines.
list_functions() {
    die_if_args
    typeset -f +   # yes, this is mind-numbingly crazy
}

# ....................{ NAMESPACES                         }....................
# void disable_function(string function_name1, string function_name2, ...)
#
# Globally disable the function with the passed name. This function remains
# defined but uncallable until reenabled with a call to enable_function().
disable_function() {
    die_unless_args
    disable -f "${@}"
}

# void enable_function(string function_name)
#
# Globally re-enable the function with the passed name, presumably previously
# disabled with a call to disable_function().
enable_function() {
    die_unless_args
    enable -f "${@}"
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# string sputter(int number)
#
# Return the passed integer from the current function.
#sputter() {
#    die_unless_one_arg 'expected one integer'
#    print -- "${1}"
#}

# string sputter(string text1, string text2, ...)
#
# Return the concatenation of the passed strings from the current function.
#sputter() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}"
#}
