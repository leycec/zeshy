#!/usr/bin/env zsh
# ====================[ list                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle list (i.e., array) variables and values.
#
# --------------------( TODO                               )--------------------
# * Incorporate difference and intersect list operations from "src/load".
# * Incorporate set operations from:
#   http://www.catonmat.net/blog/set-operations-in-unix-shell

# ....................{ EXCEPTIONS                         }....................
# void die_unless_list(
#   string variable_name,
#   string error_message = "\"${variable_name}\" not a list")
#
# Die unless the variable with the passed name is a list.
function die_unless_list() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    string variable_name="${1}"
    is_list "${variable_name}" or
        die "${2:-\"${variable_name}\" not a list}"
}

# void die_unless_list_nonempty(
#   string variable_name,
#   string error_message = "\"${variable_name}\" not a list or empty")
#
# Die unless the variable with the passed name is a non-empty list.
function die_unless_list_nonempty() {
    die_unless_one_or_two_args\
        'expected one variable name and optional error message'
    string variable_name="${1}"
    is_list_nonempty "${variable_name}" or
        die "${2:-\"${variable_name}\" not a list or empty}"
}

# ....................{ TESTS                              }....................
# boolean is_list(string variable_name)
#
# Return true if the variable with the passed name is a list (i.e., array).
function is_list() {
    # Global lists have type "list", local lists "list-local", and internal
    # structures (e.g., "${path}") "array" or "array-special".
    die_unless_one_arg 'expected one variable name'
    is_variable_type_match "${1}" '(list|array)*'
}

# boolean is_list_empty(string variable_name)
#
# Return true if the variable with the passed name is an empty list.
function is_list_empty() {
    die_unless_one_arg 'expected one variable name'
    string list_name="${1}"
    is_list "${list_name}" and (( ${#${(@P)list_name}} == 0 ))
}

# boolean is_list_nonempty(string variable_name)
#
# Return true if the passed variable is a non-empty list.
function is_list_nonempty() {
    die_unless_one_arg 'expected one variable name'
    string list_name="${1}"
    is_list "${list_name}" and (( ${#${(@P)list_name}} ))
}

# boolean is_list_element(string list_name, string element)
#
# Return true if the passed list contains the passed element.
function is_list_element() {
    # Validate passed arguments.
    die_unless_two_args 'expected one list name and one element'
    string list_name="${1}" __element__="${2}"
    die_unless_list "${list_name}"

    #FIXME: This is extendable into an is_list_element_matching() function
    #by simple expanding ${element} as ${~element} here.
    # Dismantled, this is:
    #
    # * 'P', the scalar name of the desired list in the caller's scope.
    # * '@', as a list rather than a scalar.
    # * "${(M)", ":#", and "}", excluding all but the passed element.
    is_nonempty "${(M)${(@P)list_name}:#${__element__}}"
}

# ....................{ GETTERS                            }....................
# integer get_list_size(string list_name)
#
# Get the number of elements in the list with the passed name.
function get_list_size() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one list name'
    string list_name="${1}"
    die_unless_list "${list_name}"

    # Get list size. Dismantled, this is:
    #
    # * '1', the passed list name.
    # * 'P', the scalar name of the desired list in the caller's scope.
    # * '@', as a list rather than a scalar.
    # * '#', the size of this list.
    output ${#${(@P)list_name}}
}

# ....................{ SETTERS                            }....................
# void set_list_to_evaluation(string list_name, string code_fragment)
#
# Set the passed list to the runtime evaluation of the passed code in a list
# context (i.e., embedded in an expression resembling "( ${code} )"): e.g.,
#
#     >>> list ndaa
#     >>> set_list_to_evaluation ndaa '${(z)$(uname -a)}'
#     >>> output "${ndaa[-1]}"
#     GNU/Linux
function set_list_to_evaluation() {
    # Validate passed arguments.
    die_unless_two_args 'expected one list name and one code fragment'
    string list_name="${1}" __code_fragment__="${2}"
    die_unless_list "${list_name}"

    # Set such list.
    eval "${list_name}=( ${__code_fragment__} )"
}

# ....................{ SETTERS ~ split                    }....................
# string set_list_to_string_split_on(
#   string list_name, string text, character delimiter)
#
# Split the passed string on all substrings of the passed delimiting character
# into the passed list: e.g.,
#
#     >>> list array
#     >>> set_list_to_string_split_on array 'Obseqious/Deep/Journeys' '/'
#     >>> output "${array[1]}"
#     Obseqious
function set_list_to_string_split_on() {
    # Validate passed arguments.
    die_unless_three_args\
        'expected one list name, one string, and one delimiter'
    string list_name="${1}" __text__="${2}" __delimiter__="${3}"
    die_unless_list "${list_name}"
    die_unless_character __delimiter__

    # If the passed delimiter is a colon, delimit such delimiter by periods.
    if is "${__delimiter__}" == ':' si
    then set_list_to_evaluation "${list_name}" '${(s.:.)__text__}'
    # Otherwise, delimit such delimiter by colons.
    else set_list_to_evaluation "${list_name}"\
        "\${(s:${__delimiter__}:)__text__}"
    fi
}

# string set_list_to_string_split_on_characters(
#   string list_name, string characters)
#
# Split the passed characters into the passed list. Since Zsh supports list-
# style character indexing and slicing out of the box, this function is useful
# only where explicit list types are required: e.g.,
#
#     >>> list array
#     >>> set_list_to_string_split_on_characters 'the storm-blast came' array
#     >>> output "${array[1]} ${array[3]} ${array[13]} ${array[15]}"
#     t e a t
function set_list_to_string_split_on_characters() {
    # Validate passed arguments.
    die_unless_two_args 'expected one string and one list name'
    string list_name="${1}" __text__="${2}"
    die_unless_list "${list_name}"

    # Split with a 0-width delimiter.
    set_list_to_evaluation "${list_name}" '${(s::)__text__}'
}

# ....................{ SETTERS ~ set                      }....................
# void set_list_to_list_difference(
#   string result_list_name, string left_list_name, string right_list_name)
#
# Difference the first and second passed lists into the third. Considering each
# such list a list set (i.e., ignoring duplicate elements) and abbreviating
# B="${left_list_name}", C="${right_list_name}", and A="${result_list_name}",
# this function implements the asymmetric set difference A = B - C of B and C:
# e.g.,
#
#     >>> list a
#     >>> list y; y=( 'slimy' 'things' 'did' 'crawl' 'with' 'legs' )
#     >>> list e; e=( 'upon' 'the' 'slimy' 'sea' )
#     >>> set_list_to_list_difference a y e
#     >>> output "${a[@]}"
#     things did crawl with legs
function set_list_to_list_difference() {
    # Validate passed arguments.
    die_unless_three_args\
        'expected one target list name and two source list names'
    string target_list_name="${1}" left_list_name="${2}" right_list_name="${3}"
    die_unless_list "${target_list_name}"
    die_unless_list "${left_list_name}"
    die_unless_list "${right_list_name}"

    # Difference. Bless your pithy soul, Zsh 5.0.0. Dismantled, this is:
    #
    # * "(@P)left_list_name", expanding all elements of the first passed list.
    # * ":|", excluding all elements of the second passed list.
    set_list_to_evaluation "${target_list_name}"\
        "\"\${(@P)left_list_name:|${right_list_name}}\""
}

# void set_list_to_list_intersection(
#   string target_list_name,
#   string source_list_name1, string source_list_name2, ...)
#
# Intersect all lists with the passed source names into the list with the passed
# target name. Considering each such list a list set (i.e., ignoring duplicate
# elements) and abbreviating BN="${source_list_nameN}" (e.g.,
# B1="${source_list_name1}") and A="${target_list_name}", this function
# performs the set intersection A = B1 & B2 & ... & BN of B1 through BN: e.g.,
#
#     >>> list a
#     >>> list y; y=( slimy things did crawl with legs )
#     >>> list e; e=( upon the slimy sea )
#     >>> list h; a=( and a thousand thousand slimy things )
#     >>> set_list_to_list_intersection a y e h
#     >>> print "${h[@]}"
#     slimy
function set_list_to_list_intersection() {
    # Validate passed arguments, popping the last such argument off as the
    # target list name. Hence, all remaining arguments are source list names.
    die_unless_at_least_three_args\
        'expected one target list name and at least two source list names'
    string\
        target_list_name="${@[1]}"\
        source_list_name1="${@[2]}" source_list_name2="${@[3]}"
    die_unless_list "${target_list_name}"
    die_unless_list "${source_list_name1}"
    die_unless_list "${source_list_name2}"
    shift_three_args

    # Intersect the first two source lists into the target list. Dismantled,
    # this is:
    #
    # * "${...:*...}", performing the symmetric set intersection of:
    #   * "(@P)1", the first source list.
    #   * "${2}", the name of the second source list.
    set_list_to_evaluation "${target_list_name}"\
        "\"\${(@P)source_list_name1:*${source_list_name2}}\""

    # Intersect each remaining source list with the target list back into the
    # target list. Bless your extreme utility, Zsh 5.x.x.
    for source_list_name ("${@}") {
        die_unless_list "${source_list_name}"
        set_list_to_evaluation "${target_list_name}"\.
            "\"\${(@P)source_list_name:*${target_list_name}}\""
    }
}

# ....................{ CHECKERS                           }....................
# void check_list_args(
#   string list_name, string start_index_name, string end_index_name)
#
# Check the passed list-centric variables for sanity and, if sane, set such
# variables to sensible defaults. Specifically:
#
# * Throw an exception if no list with the passed name exists.
# * Throw an exception if the variable with the passed start index is empty but
#   the variable with the passed end index is not.
# * If both the variables with the passed start and end indices are empty,
#   default the former to "1" (i.e., the first list index) and the latter to
#   "-1" (i.e., the last list index). Such indices thus span the entire list.
# * If only the variable with the passed end index is empty, default such
#   variable to the same value as that of the passed start index. Such indices
#   thus span the single list element for the passed start index.
# * Throw an exception if the variables with such start and end indices are not
#   non-zero integers bounded by [-list_size, list_size].
# * Throw an exception if the start index is greater than the end index.
#
# In short, this function guarantees bounded list indices.
function check_list_args() {
    # Validate sanity, intentionally obfuscating local variable names to avoid
    # unintentionally masking caller list names.
    die_unless_one_to_three_args\
        'expected one list name, one start index name, and one end index name'
    string\
        __list_name__="${1}" __list_size__ __beg_index__ __end_index__\
        __beg_index_name__="${2}" __end_index_name__="${3}"\
    __list_size__="$(get__list_size "${__list_name__}")"

    # Default indices.
    if is_empty "${__beg_index_name__}"; then
        die_if_nonempty_variable "${__end_index_name__}"\
            "start index \"${__beg_index_name__}\" empty but end index \"${__end_index_name__}\" non-empty"
        __beg_index__=1
        __end_index__=${__list_size__}
    elif is_empty "${__end_index_name__}"; then
        __beg_index__=${(P)__beg_index_name__}
        __end_index__=${__beg_index__}
    else
        __beg_index__=${(P)__beg_index_name__}
        __end_index__=${(P)__end_index_name__}
    fi
    die_unless_string_integer "${__beg_index__}"
    die_unless_string_integer "${__end_index__}"

    # Validate indices, converting negative to positive indices to simplify
    # comparison. Preserve original indices for pretty printing.
    integer _new_beg_index__=${__beg_index__} _new_end_index__=${__end_index__}
    (( _new_beg_index__ > 0 )) or (( _new_beg_index__ += __list_size__ + 1 ))
    (( _new_end_index__ > 0 )) or (( _new_end_index__ += __list_size__ + 1 ))
    (( 1 <= _new_beg_index__ && _new_beg_index__ <= __list_size__ )) or
        die "list index ${__beg_index__} not in [-${__list_size__}, ${__list_size__}] or is 0"
    (( 1 <= _new_end_index__ && _new_end_index__ <= __list_size__ )) or
        die "list index ${__end_index__} not in [-${__list_size__}, ${__list_size__}] or is 0"
    (( _new_beg_index__ <= _new_end_index__ )) or
        die "start index ${__beg_index__} > end index ${__end_index__}"

    # Since indices validate, set index variables to the prior defaults.
    set_string ${__beg_index_name__} ${_new_beg_index__}
    set_string ${__end_index_name__} ${_new_end_index__}
}

# ....................{ CONVERTERS                         }....................
# string convert_list_to_restorable_string(string list_name)
#
# Get a string corresponding to the contents of the list with the passed name.
# To losslessly restore such string into a list identical to such list, either:
#
# * Pipe the return value of this function to restore_list(), automatically
#   restoring such string into a local list named "list". (Easy; inflexible.)
# * Manually apply parameter expansion flag "(z)" to the return value of this
#   function in a list assignment to any list you like. (Harder; flexible.)
#
# For example: e.g.,
#
#   # Declare a function returning a restorable string.
#   >>> get_minerals() {
#   ...     list asbestos
#   ...     asbestos=( 'nephrite' 'porphyry' 'glauconite' 'mafic' )
#   ...     convert_list_to_restorable_string asbestos
#   ... }
#
#   # Automatically restore such string back into a local list named "list".
#   >>> get_minerals | restore_list
#   >>> output "${list[1]}"
#   nephrite
#
#   # Or (manually) restore such string back into a local list named... whatever
#   # you like, man!
#   >>> list quebec_resources; quebec_resources=( ${(z)"$(get_minerals)"} )
#   >>> output "${quebec_resources[-1]}"
#   mafic
function convert_list_to_restorable_string() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one list name'
    string list_name="${1}"
    die_unless_list "${list_name}"

    # Dismantled, this is:
    #
    # * '1:-list' expands to the passed list name or 'list' if no such name
    #   was passed.
    # * 'P' transitively expands this name to the actual name of the desired
    #   associative list in the caller's scope.
    # * '@' interprets this expansion as a list rather than scalar.
    # * 'qq' protectively embeds all reserved shell characters in such names
    #   and values in single quotes.
    output "${(qq@P)list_name}"
}

# ....................{ JOINERS                            }....................
# See Zeshy String for corresponding split_*() functions.

# void join_list_to_string(string list_name, string delimiter = "")
#
# Join the list with the passed name into a string with each list element
# delimited by the passed delimiter (defaulting to the empty string). The
# delimiter may be of any length: e.g.,
#
#     >>> list heinlein; heinlein=( "The Moon" "Is" "a" "Harsh Mistress" )
#     >>> join_list_to_string heinlein ", "
#     The Moon, Is, a, Harsh Mistress
function join_list_to_string() {
    # Validate passed arguments.
    die_unless_one_or_two_args 'expected one list name and one delimiter'
    string list_name="${1}" delimiter="${2:-}"
    die_unless_list "${list_name}"

    # If the passed delimiter is a colon, delimit such delimiter by periods.
    # Delimited, this is:
    #
    # * "j.:.", joining on colons.
    # * "@P", expanding to the list with the passed name.
    if is "${delimiter}" == ':' si
    then output ${(j.:.@P)list_name}
    # Otherwise, delimit such delimiter by colons. Since Zsh appears to
    # expand no parameters embedded in parameter expansion flags (e.g.,
    # "print ${(j:${delimiter}:)@}", joining list elements with the raw string
    # "${delimiter}" rather than the expansion of such parameter), wrap the
    # desired expression in an "eval" to force such expansion.
    else eval "print -- \${(j:${delimiter}:)${list_name}}"
    fi
}

# void join_list_to_string_with_last_delimiter(
#   string list_name, string non_last_delimiter, string last_delimiter)
#
# Join the list with the passed name into a string with each list element
# excluding the last delimited by the first passed delimiter and the last list
# element delimited by the second passed delimiter. Delimiters may be of any
# length: e.g.,
#
#     >>> list pat_the_bunny
#     >>> pat_the_bunny=( 'The' 'Wingnut' 'Dishwashers' 'Union' )
#     >>> join_list_to_string_with_last_delimiter pat_the_bunny '+' '?'
#     The+Wingnut+Dishwashers?Union
function join_list_to_string_with_last_delimiter() {
    # Validate passed arguments.
    die_unless_three_args\
        'expected one list name, one non-last delimiter, and one last delimiter'
    string\
        list_name="${1}" __non_last_delimiter__="${2}" __last_delimiter__="${3}"
    die_unless_list "${list_name}"
    integer list_size; list_size="$(get_list_size "${list_name}")"

    # Join the passed list depending on the size of such list.
    if (( list_size >= 3 )); then
        # Join all list elements excluding the last with join_list_to_string().
        list __list_excluding_last_element__
        __list_excluding_last_element__=( "${${(@P)list_name}[1,-2]}" )
        join_list_to_string\
            __list_excluding_last_element__ "${__non_last_delimiter__}"

        # Join the last list element into such list.
        output_undelimited\
            "${(@P)__list_excluding_last_element__}"\
            "${__last_delimiter__}${${(@P)list_name}[-1]}"
    elif (( list_size == 2 ))
    then output "${${(@P)list_name}[1]}${__last_delimiter__}${${(@P)list_name}[2]}"
    else output "${${(@P)list_name}[1]}"
    fi
}

# ....................{ JOINERS ~ lines                    }....................
# void join_list_to_lines(string list_name)
#
# Join the list with the passed name into a newline-delimited string: e.g.,
#
#     >>> list grok; grok=( "Stranger in" "a" "Strange Land" )
#     >>> join_list_to_lines grok
#     Stranger in
#     a
#     Strange Land
function join_list_to_lines() {
    die_unless_one_arg 'expected one list name'
    join_list_to_string "${1}" '\n'
}

# ....................{ JOINERS ~ logical                  }....................
# void join_list_to_conjunction(string text1, string text2, ...)
#
# Join the passed strings into a string conjunctively delimiting such strings
# (i.e., with the logical conjunction "and"). Specifically:
#
# # Double quote all passed strings.
# * Prefix all passed strings except the first and last with ", ".
# * Prefix the last passed string with ", and ".
# * Truncat the returned string to a sensible maximum (currently, 75% of the
#   current terminal width).
#
# Unlike most Zeshy functions operating on lists, this function excepts accepts
# list elements as positional arguments rather than as a variable name due to
# caller requirements: e.g.,
#
#     >>> join_list_to_conjunction 'I mrethil' 'peliar' 'duiw laiss'
#     "I mrethil", "peliar", and "duiw laiss"
function join_list_to_conjunction() {
    # Validate and join the passed arguments. Dismantled, this is:
    #
    # * "\"${^@}\"", double quoting each passed string.
    die_unless_args 'expected at least one string'
    list args; args=( "\"${^@}\"" )
    string text
    text="$(join_list_to_string_with_last_delimiter args ', ' ', and' )"

    #FIXME: Close, but not quite right. Ideally, we want to preserve human-
    #readable output when truncating. Humans expect output resembling:
    #     "I mrethil", "p...", ...
    #Rather than:
    #     "I mrethil", "peliar"...
    #Not terribly easy or readibly internationalizable, so I suppose I'm content
    #with this as is. For now...

    # Truncate the joined string to 75% of the current terminal's width, rounded
    # down to the nearest integer.
    integer max_length=$(( 0.75 * $(get_terminal_width) ))
    truncate_string "${text}" "${max_length}" '...'
}

# --------------------( WASTELANDS                         )--------------------
#FIXME: Unconvinced we still want this.
# void die_unless_map_or_list(
#   string variable_name, string error_message = 'not a map or list')
#
# Die unless the variable with the passed name is a map or list.
#die_unless_map_or_list() {
#    die_unless_one_or_two_args\
#        'expected one variable name and optional error message'
#    is_map_or_list "${1}" or die "${2:-\"${1}\" not a declared map or list}"
#}

#FIXME: Unconvinced we still want this.
# boolean is_map_or_list(string variable_name)
#
# Return true if the variable with the passed name is a map or list.
#is_map_or_list() {
#    die_unless_one_arg 'expected one variable name'
#    is $(get_type "${1}") == (list|array|association)* si
#}

# void die_if_list_empty(
#   string variable_name, string error_message = 'not a list')
#
# A synonym of die_unless_list_nonempty().
#die_if_list_empty() {
#    die_unless_list_nonempty "${@}"
#}

    # If more than two list elements were passed, join such elements and prefix
    # the last such element.
#   if is_at_least_three_args; then
#       list munged; munged=( "${@[1,-2]}" "${__last_delimiter__} ${@[-1]}" )
#       join_list_to_string munged ', '
    # If only two list elements were passed, print the first element, the last
    # element prefix, and the third element.
#   elif is_two_args
#   then output "${1} ${last_element_prefix} ${2}"
    # If only one list element was passed, print that element as is.
#   else output "${1}"
#   fi

#FIXME: Actually, we no longer require list elements as positional arguments.
#Revert to a much more sensible list variable style, as follows:
#
# void join_list_to_string_with_different_last_delimiter(
#   string list_name,
#   string non_last_delimiter = ', ',
#   string last_delimiter = ', and ')
#
#Sweet. That's sufficiently generalized that we should be able to rename such
#function to join_list_to_string_with_different_last_delimiter(). More explicit
#is much better. (I mean, what does "legible" really mean, anyway?)
#
#Actually, the name's a bit silly. Let's just incorporate such functionality
#into joint_list_to_string(), yes? Though, I wonder if that'd just confuse
#things even more. Perhaps this is sensible, after all.
#
# Join all passed strings except the first into a comma-delimited string,
# prefixing the last such string with the first passed string. Unlike most Zeshy
# functions operating on lists, this function excepts accepts list elements as
# positional arguments rather than a variable name due to caller requirements:
# e.g.,

#   print "${_beg_index_name_}=${(P)_beg_index_name_}"
#   print "${_end_index_name_}=${(P)_end_index_name_}"

# void join_list_to_legible_truncated_string(
#   string last_element_prefix, string text1, string text2, ...)
#
# Join the passed elements into a human-readable string separated by commas,
# prefixing the last such element with the passed string and truncating the
# resulting string to a hopefully sensible number of characters (currently,
# 75% of the current terminal width): e.g.,
#
#     >>> join_list_to_legible_truncated_string 'or'\
#     ...   '"I laiss i-ferin thuiar"' '"I wilith lim echui aur."'
#     "I laiss i-ferin thuiar" or "I wil...
#join_list_to_legible_truncated_string() {
    # Join the passed arguments.
#    string text; text="$(join_list_to_legible_string "${@}")"

    # Truncate the joined string to 75% of the current terminal's width.
#    integer max_length
#    (( max_length = 0.75 * $(get_terminal_width) ))
#    truncate_string "${text}" ${max_length} '...'
#}

# This and join_list_to_legible_string() accept list elements rather than a
# variable name signifying a list due to caller requirements, elsewhere.
#
    # If no list elements were passed, print the empty string and return.
#   is_list_nonempty "${list_name}" or return_true

    #FIXME: Add new get_list_difference() and get_list_intersection() functions
    #to "type/function", leveraging die_unless_list() and return_list(). (Yep!)
    #Hmm; wait. We're probably better off with set_list_to_list_difference_into() and
    #set_list_to_list_intersection_into() functions accepting a third arg: the target list.

    # The difference between the two lists is the list of all Zeshy functions.
    # Recompile all such function definitions into the Zeshy digest file. (For
    # those who care, this is an asymmetric rather than symmetric difference.)
#   print "autoload function names: ${new_function_names[@]:|ZESHY_OLD_FUNCTION_NAMES}"
#   zcompile -c "${ZESHY_USER_DIGEST_FILE}"\
#       "${new_function_names[@]:|ZESHY_OLD_FUNCTION_NAMES}"

#FIXME: Poor name, since this doesn't actually perform a "return" statement.
#Perhaps output_restorable_list()? AH! Got it: convert_list_to_restorable_string().
# If no delimiter is passed, split words by default
# parsing (i.e., first by quote- and then whitespace-delimited words)
# See set_list_to_string_split_on() for alternative splitting on all substrings.
# See split_string_on_first() for alternative splitting into string variables.
#I'm pretty sure we can implement this by splitting text into a list of lines
#and running a single parameter expansion on such list (possibly also locally
#setting "IFS=':'"), which Zsh *SHOULD* apply to each list member. If we can't
#do this and instead have to manually iterate the list, *DON'T*. Just use "cut".
#   >>> string List="$(get_list)"
#   >>> expand_List_to_list

#FIXME: This is silly. No one's *EVER* going to call this function. It's simply
#too obscure. Fold its implementation into expand_List(), which should
#incidentally be renamed to expand_...

#   # Expand the stringified list back into a list with a brute-force "eval".
#   >>> eval 'expand_list list $(make_list)'
#   >>> print "last list element: ${list[-1]}"  # as in the original list!
#   mafic

# void expand_list(string list_name, string text1, string text2, ...)
#
# Return a string that, when "eval"-ed by the caller, expands the passed strings
# having a stringified list previously produced by return_list() into the list
# with the passed name. See expand_List() for a concise alternative.
#expand_list() {
#    die_unless_at_least_two_args\
#        'expected one variable name and one or more strings'
#    string list_name="${1}"
#    shift_one_arg
#
#    # Dismantled, this is:
#    #
#    # * '@' expands to all remaining passed parameters: the stringified list.
#    # * 'z' splits the stringified list into a numeric list of words,
#    #   effectively undoing the prior 'kv' flag.
#    print "list ${list_name}; ${list_name}=( ${(z)@} )"
#}

# void expand_List()
#
# Expand stringified list "List" to list "list", a convenience alias simplifying
# the more generalized expand_list() function. See return_list() for examples.
#alias expand_List='
#is_variable List or die "\"List\" not defined";
#eval "$(expand_list list ${List})"'

    # Declare a list with the passed name if no such list exists.
#   is_undeclared "${list_name}" or print "list ${list_name}; "

#   die_unless_list "${list_name}"
#
# Map-specific analogues of the above list-specific functions.
# ....................{ INITIALIZATION                     }....................
#   die_unless_two_to_three_args\
#       'expected one string name, one list name, and one optional delimiter'
#   string text_name="${1}" list_name="${2}" delimiter="${3}"
