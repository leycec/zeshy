#!/usr/bin/env zsh
# ====================[ key_binding                        ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Theme interactive key bindings, including:
#
# * <Alt-p>, search history for commands starting with the current command-line.
# * <Ctrl-r>, search history for commands containing the current command-line.
# * <Esc-h>, display the man page for the command in the current command-line.
# * cd -<Tab>, change to the Nth oldest directory on the directory stack.
# * cd +<Tab>, change to the Nth newest directory on the directory stack.
#
# --------------------( TODO                               )--------------------
# * Untie key bindings from theme selection, perhaps by adding support for a
#   ${ZESHY_KEY_BINDINGS} global in the Zeshy configuration file *AND*
#   separating this file into a new "autoload/if_key_bindings/" directory.

#FIXME: Arguably, this component belongs in a new "line_editor" directory. Line
#editing strikes me more as a shell than terminal function. Yes, line editing
#requires a terminal to function... hmm; perhaps terminal's appropriate after
#all? Contemplate, some.

# ....................{ STARTUP                            }....................
append_zeshy_startup_command_if_shell_interactive\
    startup_zeshy_terminal_key_bindings

function startup_zeshy_terminal_key_bindings() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive

    # Disable flow control key bindings conflicting with those of popular
    # command-line applications (e.g., irssi, rtorrent). Specifically, prevent
    # <Ctrl-s> and <Ctrl-q> from disabling and enabling flow control.
    is_shell_terminal and stty -ixon -ixoff

    #FIXME: Wrap builtin "bindkey" in a variety of Zeshy functions. As is the
    #Zsh standard, "bindkey" supports an absolutely inspiring plethora of
    #options and arguments. I'm unsure where to even start, really.
    # Implicitly expand "..." to "../.." while typing.
    zle -N    bind_interactive_key_period_to_expand_ellipses
    bindkey . bind_interactive_key_period_to_expand_ellipses
}

# ....................{ KEY BINDINGS                       }....................
# void bind_interactive_key_period_to_expand_ellipses(void)
#
# Implicitly expand "..." to "../.." while typing.
function bind_interactive_key_period_to_expand_ellipses() {
    if is "${LBUFFER}" == *'..' si
    then LBUFFER+='/..'
    else LBUFFER+='.'
    fi
}

# --------------------( WASTELANDS                         )--------------------
#function _zeshy_key_binding_expand_dots() {
    # Use Emacs- rather than Vi[m]-style key bindings at the command line.
#   bindkey -e
