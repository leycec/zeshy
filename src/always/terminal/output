#!/usr/bin/env zsh
# ====================[ output                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle standard output and error.

# ....................{ PRINTERS                           }....................
# void output(string text1, string text2, ...)
#
# Print the passed strings to standard output with default trailing newline.
# Unlike say(), print no theme-specific nonsense (e.g., ANSI color codes).
# Avoid calling echo() or print(), which fail on hyphen-prefixed strings: e.g.,
#
#     >>> string lammoth='-z' morgoth='rm -rf *'
#
#     # Bad. Never do this! Unless guaranteed no hyphens prefix such string.
#     # If "is ${1} == -* si", Zsh interprets the first word of such string as
#     # options to the "print" command. (Any user executing the following
#     # command is likely to frown and...and then what!?)
#     >>> print "${lammoth}" "${morgoth}"
#     >>> rm -rf *   # don't accidentally hit <Enter> here; what, you just did?
#
#     # Good. Always do this.
#     >>> output "${lammoth}" "${morgoth}"
#     -z rm -rf *    # that's more like it
output() {
    die_unless_args 'expected at least one string'
    print -r -- "${@}"
}

# void outcry(string text1, string text2, ...)
#
# Print the passed strings to standard error with default trailing newline.
# Unlike cry(), print no theme-specific nonsense (e.g., ANSI color codes).
outcry() {
    die_unless_args 'expected at least one string'
    print -r -- "${@}" 1>&2
}

# ....................{ PRINTERS ~ blank lines             }....................
# void output_blank_line(void)
#
# Print a blank line to standard output.
output_blank_line() {
    die_if_args
    print
}

# void outcry_blank_line(void)
#
# Print a blank line to standard error.
outcry_blank_line() {
    die_if_args
    print 1>&2
}

# ....................{ PRINTERS ~ escapes                 }....................
# void output_escaped(string text1, string text2, ...)
#
# Print the passed strings to standard output with default trailing newline and
# all escapes escaped (i.e., converted to the corresponding characters): e.g.,
#
#     >>> output_escaped "\nTHEY are rattling breakfast plates...\n"
#
#     THEY are rattling breakfast plates...
#
#     >>> output         "\nTHEY are rattling breakfast plates...\n"
#     \nTHEY are rattling breakfast plates...\n
output_escaped() {
    die_unless_args 'expected at least one string'
    print -- "${@}"
}

# void outcry_escaped(string text1, string text2, ...)
#
# Print the passed strings to standard error with default trailing newline and
# all escapes escaped, as with output_escaped().
outcry_escaped() {
    die_unless_args 'expected at least one string'
    print -- "${@}" 1>&2
}

# ....................{ PRINTERS ~ undelimited             }....................
# void output_undelimited(string text1, string text2, ...)
#
# Print the passed strings to standard output without delimitation: e.g.,
#
#     >>> output_undelimited "Where Alph," "the sacred river," ran
#     Where Alph,the sacred river,ran
output_undelimited() {
    # Temporarily set global string ${IFS} to the empty string. Since Zsh
    # implicitly delimits lists interpolated with the "*" operator when double-
    # quoted with such global, the following commands print the passed arguments
    # undelimited. This incantation was astonishingly difficult to discover.
    die_unless_args 'expected at least one string'
    string IFS=
    print -r -- "${*}"  # if not double-quoted, Zsh oddly ignores ${IFS}
}

# void outcry_undelimited(string text1, string text2, ...)
#
# Print the passed strings to standard error without delimitation: e.g.,
#
#     >>> outcry_undelimited "Through caverns" "measureless to" "man"
#     Through cavernsmeasureless toman
outcry_undelimited() {
    die_unless_args 'expected at least one string'
    string IFS=
    print -r -- "${*}" 1>&2  # if not double-quoted, Zsh oddly ignores ${IFS}
}

# ....................{ PRINTERS ~ nulls                   }....................
# void output_null_delimited(string text1, string text2, ...)
#
# Print the passed strings to standard output delimited and terminated by nulls
# (i.e., such that a null '\0' separates each such string from the next and the
# last such string is followed by a null '\0').
output_null_delimited() {
    die_unless_args 'expected at least one string'
    print -Nr -- "${@}"
}

# void outcry_null_delimited(string text1, string text2, ...)
#
# Print the passed strings to standard output delimited and terminated by nulls.
# See outcry_null_delimited for details.
outcry_null_delimited() {
    die_unless_args 'expected at least one string'
    print -Nr -- "${@}" 1>&2
}

# ....................{ PRINTERS ~ newlines                }....................
# void output_newline_delimited(string text1, string text2, ...)
#
# Print the passed strings to standard output delimited by newlines (i.e., such
# that a newline separates each such string from the next): e.g.,
#
#     >>> output_newline_delimited sludge elf transmuter
#     sludge
#     elf
#     transmuter
output_newline_delimited() {
    die_unless_args 'expected at least one string'
    print -lr -- "${@}"
}

# void output_newline_delimited_list(
#   string list_name, int start_index = 1, int end_index = -1)
#
# Print the elements between the passed start and end indices (defaulting to the
# first and last elements) of the list with the passed name to standard output
# delimited by newlines. If no indices are passed, all elements are printed; if
# one index is passed, only that index is passed. Negative indices are offset
# from the end: e.g.,
#
#     >>> list runes; runes=( abyss crypt pan tomb vaults )
#     >>> output_newline_delimited_list runes
#     abyss
#     crypt
#     pan
#     tomb
#     vaults
#     >>> output_newline_delimited_list runes 3
#     pan
#     >>> output_newline_delimited_list runes 3 -1
#     pan
#     tomb
#     vaults
output_newline_delimited_list() {
    # Validate.
    die_unless_one_to_three_args\
        'expected one variable name and optional start and end indices'
    string list_name="${1}" beg_index="${2:-}" end_index="${3:-}"
    check_list_args "${list_name}" beg_index end_index

    # Spsay.
#   print "beg: ${beg_index}\nend: ${end_index}"
    print -lr -- "${${(@P)list_name}[${beg_index},${end_index}]}"
}

# ....................{ PRINTERS ~ no newline              }....................
# void output_no_newline(string text1, string text2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
output_no_newline() {
    die_unless_args 'expected at least one string'
    print -nr -- "${@}"
}

# void outcry_no_newline(string text1, string text2, ...)
#
# Print the passed strings to standard error with no default trailing newline.
outcry_no_newline() {
    die_unless_args 'expected at least one string'
    print -nr -- "${@}" 1>&2
}

# --------------------( WASTELANDS                         )--------------------
# * Rename "cry" to "cry" and "outcry" to simply "outcry". Likewise,
#   rename "say" to "put" and "output" to simply "output". Truly, for this is
#   Awesome Incarnate.
# * Alternatively, rename "outcry" to "decry", "say" to "vow", and "output"
#   to "devow". Personally, I prefer the "out"-prefixed forms, as that cleanly
#   suggests an input_*() family of functions to accept input.
# * O.K.; how about this. The "cry" forms are quite perfect, but the "say"
#   forms... I quite like "output" to "output", but "say" to "put"? It reads
#   awkwardly, to put it mildly. Let's go non-orthogonal here, for readability.
#   How about "say" to "say", which coincides nicely with "cry"? Then we have:
#
#   cry -> cry      outcry -> outcry
#   say -> say      output -> output
# * I'm strongly in favor of:
#   output() or stsay() or msay()
#   outcry() or ???????()
#   Yeah, output() and outcry() read quite well.
