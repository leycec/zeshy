#!/usr/bin/env zsh
# ====================[ output                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Output, theming standard output and error.
#
# --------------------( TODO                               )--------------------
# * Theme support requires a new user-specific "~/.zeshy/theme/" directory
#   containing user-installable themes. For clarity, we should probably shift
#   "~/.zeshy/{completion,compinit,digest.zwc}" to a new "~/.zeshy/cache/"
#   directory. Then, anything under "~/.zeshy" NOT under "~/.zeshy/cache/" is
#   user-configurable. Simple. Hmmm. Interesting. For forward-compatibility,
#   how about a "~/.zeshy/autoload/if_theme/" directory structure instead? The
#   beauty of this setup is that it directly, cleanly "overlays" Zeshy's
#   existing system-wide directory structure. Zeshy should implicitly create
#   such structure where not already found, for safety. Sweeet.

# ....................{ PRINTERS                           }....................
# The utter() and curse() functions defined here appear after and hence override
# the previously defined functions of the same name defined by Zeshy Main.

# void utter(string info_message = '')
#
# Print the passed message suffixed by a trailing newline to standard output
# thematically (e.g., colorfully on color terminals).
function utter() {
    string message; message="$(get_script_name): ${*}"
    print -- "${message}"
}

# void curse(string warning_message = '')
#
# Print the passed message suffixed by a trailing newline to standard error
# thematically (e.g., colorfully on color terminals).
function curse() {
    # Avoid calling "print -u2 -- "${message}". While such a command appears
    # superficially identical to the following command, passing the desired file
    # descriptor as an argument fails to preserve interleaving with prior
    # commands printing to file descriptor 1 (i.e., standard out).
    string message; message="$(get_script_name): ${*}"
    print -- "${message}" 1>&2
}

# ....................{ PRINTERS ~ banners                 }....................
#FIXME: This function strikes me as a poor idea. Functions should not, ideally,
#handle such aesthetic-dependent behavior. Cut everywhere.
# string utter_banner(void)
#
# Print a single-line banner to standard output demarcating subsequent from
# prior lines.
utter_banner() {
    die_if_args

    # Dismantled, this is:
    #
    # * "(l:..::..:)", expanding to the second argument padded (i.e., repeated)
    #   to the length specified with the first argument.
    sputter ${(l:$(get_terminal_width)::=:)placeholder}
}

# ....................{ PRINTERS ~ newlines                }....................
# void utter_no_newline(string text1, string text2, ...)
#
# Print the passed message to standard output with no default trailing newline.
utter_no_newline() {
    string text; text="$(get_script_name): ${@}"
    print -n -- "${text}"
}

# void curse_no_newline(string text1, string text2, ...)
#
# Print the passed message to standard error with no default trailing newline.
curse_no_newline() {
    string text; text="$(get_script_name): ${@}"
    print -n -- "${text}" 1>&2
}

# ....................{ PRINTERS ~ sections                }....................
#FIXME: Admit it: this is pretty sucky output. Let's prettify this, please! Try
#calling sputter() rather than utter() with output resembling:
#
#=====================[ output                             ]====================
#---------------------( SYNOPSIS                           )--------------------
#
#Clearly, the output should scale with terminal width. If terminal width is too
#small (say, <= 20), forego the desired heuristic and just output the passed
#section. Hmm... or not? Let's not edge case, for now. Just assume everything
#works. 8) O.K.; here we go:
#
#* Divide terminal width by 4, apportioning the left and right banners each 1/4
#  the width and the middle section 2/4 (1/2) the width.
#* Don't worry about centering output. We'd rather columns line up vertically.
#* And...that's it, really. Shouldn't be too cumbersome, nay? The slightly hard
#  part is ensuring that, if the terminal width is not cleanly divisible by 4:
#  * Round all divisions *DOWN*, for safety.
#  * Add the difference of the terminal width and the summation of the three
#    widths (i.e., left banner, right banner, section header) back to the
#    section header. That should do us right, no?
#* Naturally, it'd be nice to colorify this, too. All things come.

# string utter_first_section(string header1, string header2, ...)
#
# Print the passed strings as the header of a section (i.e., a contiguous block
# of related output). Sections demarcate output into logical blocks, each
# preceded by a terse header synopsizing such block. To ensure aesthetic output,
# call this function *ONLY* on the first such section and utter_next_section()
# on all remaining sections.
utter_first_section() {
    utter "[${@}]"
}

# string utter_first_section(string header1, string header2, ...)
#
# Print the passed strings as the header of any section other than the first.
utter_next_section() {
    sputter_blank_line
    utter_first_section "${@}"
}

# --------------------( WASTELANDS                        )--------------------
    # For the sake of obscurity, we prefer the latter. Dismantled, this is:
    #
    # * "(l:..::..:)", expanding to the second argument repeated until the total
    #   number of characters in the full string equals the first argument.
# If we were to pass simply
    #   ${count} as such number, such string would be repeated 

    # Empty local variable, required to avoid "parameter not set" errors below.
#   string placeholder

# Print the passed message suffixed by a trailing newline to the notice stream
# of the cron logging facility if a cron-job and to the standard output stream
# otherwise.
#function utter() {
#    string message; message="$(get_script_name): ${@}"
#    print -- "${message}"
#}

# void curse(string warning_message = '')
#
# Echo the passed message to the standard error stream. Specifically:
#
# * If a cronjob, echo to the error stream of the cron logging facility.
# * Otherwise, to "stderr".

# * Theme support really needs to be tightened up. Ideally, all themes should
#   implicitly inherit from "gwydden": which is to say that all theme function
#   implementations should auto-default to the "gwydden" implementation unless
#   implemented by such theme. Fortunately, doing so is pretty simple. Move the
#   "if_theme/gwydden" to "always/theme". Add a new "if_theme/vanilla" theme
#   with empty contents. Then, theme functions implicitly default to their core
#   "always/theme" implementations until overriden by theme-specific functions.

    # Capture command substitution output in a definition to signal TRAPZERR on
    # command failure.

    #FIXME: Nonsensical. Obliterate all reference to "ZESHY_IS_CRONJOB"
    #everywhere.
    #and, if a cron job, the notice stream of cron's logging facility
#   is_variable ZESHY_IS_CRONJOB and logger -p cron.notice -- "${message}"

#FIXME: Rename utter_no_newline() to utter_newlinelessly(), perhaps?

#   #FIXME: Rename run_paged() to page_nicely(). Rename all other *_safely()-style
#functions, as well. (Other possible suffixes: page_well(), page_truly()). Hmmm;
#no, page_nicely is the best fit. It reads well and best describes the
#underlying intent.
#die_unless_args 'expected one command or one or more files to be paged'

    # If the first passed argument is a runnable command, assume the argument
    # list is a command line to be run and do so. Dismantled, this is:
    #
    # * "${(q)@}", quoting this command as required by the run() function.
    # * "1>&1", preserving standard output prior to its subsequent redirection
    #   and hence the assignment of output to variable "output".
    # * "1>&2", redirecting standard output to error. Since command substitution
    #   only captures the former, this immediately prints all output produced by
    #   running such command.
#   string first_arg="${1}" output
#   if is_installed "${first_arg}"
#   then output="$(run "${(q)@}" 1>&1 1>&2)"
    # If the first passed argument is a readable file, assume the argument list
    # is a list of files to be paged and do so.
#   elif is_file "${first_arg}"; then
#       for filename ("${@}") {
#           output+="$(< "${filename}" 1>&1 1>&2)"
#       }
    # Otherwise, throw an exception.
#   else die "\"${first_arg}\" neither an installed command or readable file"
#   fi

#   integer exit_status=${ZESHY_SUCCESS_CODE}
# ....................{ PRINTERS                           }....................
# string sputter(string text1, string text2, ...)
#
# Print the passed strings to standard output. Unlike utter(), this function
# prints no theme-specific embellishment (e.g., ANSI color codes).
#sputter() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}"
#}

# string accurse(string text1, string text2, ...)
#
# Print the passed strings to standard error. Unlike curse(), this function
# prints no theme-specific embellishment (e.g., ANSI color codes).
#accurse() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}" 2>&1
#}

# string sputter_no_newline(string text1, string text2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
#sputter_no_newline() {
#    die_unless_args 'expected at least one string'
#    print -n -- "${@}"
#}

# string accurse_no_newline(string text1, string text2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
#accurse_no_newline() {
#    die_unless_args 'expected at least one string'
#    print -n -- "${@}" 2>&1
#}
