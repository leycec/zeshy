#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle aliases for *standard file descriptors* (i.e., standard input, output,
and error).
-/-

# ....................{ GETTERS                            }....................
#FIXME: Rename to get_stdin_blocking().
#FIXME: Document the fact that this alias blocks if standard input is empty and
#hence should *ONLY* be expanded where standard input is guaranteed to be
#nonempty.
declare_alias_with_stdin 'string get_stdin[stdin: string input]'\
    "< \"${ZESHY_STDIN_PATH}\"" <<'/---'
Get all standard input written to the current shell, even when expanded from a
process substitution. By design, this alias performs _no_ safety checks (e.g.,
to ensure standard input is open and nonempty) and hence should only be
expanded by functions performing such checks (e.g., set_string_to_stdin()):
e.g.,

.get_stdin()
==========================================
[source]
------------------------------------------
>>> string on_war_propaganda=\
...    "All war propaganda consists, in the last resort, in substituting
...     diabolical abstractions for human beings. Similarly, those who defend
...     war have invented a pleasant sounding vocabulary of abstractions in
...     which to describe the process of mass murder."
>>> { get_string_line "$(get_stdin)" -1 } <<<"${on_war_propaganda}"
which to describe the process of mass murder.
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Synchronize changes with set_float_to_stderr_mtime().
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
declare_alias_with_stdin 'void set_float_to_stdout_mtime(string float_name)' '{
    # Validate passed arguments. Avoid calling die_unless_variable_float(), as
    # set_float_to_stdin() already does so below.
    string float_name__sftom stdout_filename__sftom
    set_string_to_stdin float_name__sftom

    # Resolve "/dev/fd/1" to a non-symbolic absolute path. Assuming the
    # current shell to be a pseudo-terminal, "/dev/fd/1" is typically a
    # symbolic link to the device for such terminal (e.g., "/dev/pts/7").
    # Referring to standard output by such resolved rather than symbolic
    # path is essential; we run the command getting standard output''s mtime
    # from a process substitution in which symbolic path "/dev/fd/1" refers
    # to a shell pipe rather than the desired pseudo-terminal.
    #
    # Sadly, the only safe means of resolving such path is as below.
    # Replacing the first pipeline subcommand with a call to
    # canonicalize_path() uselessly returns "/dev/fd/1" without resolving
    # such path. Likewise, replacing the second pipeline subcommand with a
    # process substitution has the same effect. (My inveterate Gods, but
    # this is subtle.)
    output_string "'${ZESHY_STDOUT_FILE_DESCRIPTOR_PATH}'"(:A) |
        set_string_to_stdin stdout_filename__sftom

    # Set such float to such path''s mtime. See set_float_to_float() for
    # further details.
    get_path_mtime "${stdout_filename__sftom}" |
        set_float_to_stdin "${float_name__sftom}"
#   output_string "stdout_filename: ${stdout_filename__sftom}; stdout_mtime: ${(P)float_name__sftom}"
} <<<' <<'/---'
Set the passed float variable to the *mtime* (i.e., modification time) in high-
resolution fractional seconds since the Unix epoch of the most recent write to
standard output by the current shell. See get_time() for further details.
/---

declare_alias_with_stdin 'void set_float_to_stderr_mtime(string float_name)' '{
    string float_name__sftem stderr_filename__sftem
    set_string_to_stdin float_name__sftem
    output_string "'${ZESHY_STDERR_FILE_DESCRIPTOR_PATH}'"(:A) |
        set_string_to_stdin stderr_filename__sftem
    get_path_mtime "${stderr_filename__sftem}" |
        set_float_to_stdin "${float_name__sftem}"
} <<<' <<'/---'
Set the passed float variable to the *mtime* (i.e., modification time) in high-
resolution fractional seconds since the Unix epoch of the most recent write to
standard error by the current shell. See get_time() for further details.
/---

# ....................{ OUTPUTTERS                         }....................
#FIXME: This would probably be more appropriate as a function. Is there any
#compelling reason for this to be an alias instead? (I can't fathom one.)
declare_alias_with_stdin 'string output_stdin[stdin: string input]'\
   '{
        die_unless_stdin_nonempty
        get_stdin
        close_stdin
    }'  <<'/---'
Print standard input to the current shell. This alias is especially helpful for
printing here-documents: e.g.,

.output_stdin()
==========================================
[source]
------------------------------------------
>>> function on_acts_of_subversion() {
...     output_stdin <<'/ooo'
... Why are ecologists and environmentalists so feared and hated? This is
... because in part what they have to say is new to the general public, and the
... new is always alarming. Moreover, the practical recommendations deduced from
... ecological principles threaten the vested interests of commerce; it is
... hardly surprising that the financial and political power created by these
... investments should be used sometimes to suppress environmental impact
... studies. However, I think the major opposition to ecology has deeper roots
... than mere economics; ecology threatens widely held values so fundamental
... that they must be called religious. An attack on values is inevitably seen
... as an act of subversion.
... /ooo
... }
>>> get_string_line "$(on_acts_of_subversion)" 1
Why are ecologists and environmentalists so feared and hated? This is
------------------------------------------
==========================================
/---

# ....................{ CLOSERS                            }....................
declare_alias_with_stdin 'void close_stdin(void)'\
    "exec ${ZESHY_STDIN_FILE_DESCRIPTOR}<&-" <<'/---'
Close the standard input file descriptor (i.e., 0) and corresponding named pipe
(i.e., `/dev/stdin`).
/---

declare_alias_with_stdin 'void close_stdout(void)'\
    "exec ${ZESHY_STDOUT_FILE_DESCRIPTOR}>&-" <<'/---'
Close the standard output file descriptor (i.e., 1) and corresponding named pipe
(i.e., `/dev/stdout`).
/---
alias close_stdout=

declare_alias_with_stdin 'void close_stderr(void)'\
    "exec ${ZESHY_STDERR_FILE_DESCRIPTOR}>&-" <<'/---'
Close the standard error file descriptor (i.e., 2) and corresponding named pipe
(i.e., `/dev/stderr`).
/---

# --------------------( WASTELANDS                         )--------------------
#thematically resembles other aliases defined by this parcel 

# ....................{ RUNNERS                            }....................
#FUXME: Terribly name, as this isn't a runner in the expected sense. Instead:
#
#* Rename this alias to print_stdin().
#* Drop the suffixing "|", which most callers would find unexpected.
#* Replace existing expansions of this alias with "print_stdin |".
#declare_alias_with_stdin\
#    'string run_command_with_stdin_piped(
#        string command_name, string command_arg1, string command_arg2, ...)'\
#    "{
#        < \"${ZESHY_STDIN_PATH}\"
#        close_stdin
#    } |" <<'/---'
#Run the passed command by piping the standard input piped to the current
#function or script to such command. Typically, this alias is used in concert
#with the is_stdin_pipe() function to propagate piped input: e.g.,
#
#.run_command_with_stdin_piped()
#==========================================
#[source]
#------------------------------------------
#>>> function salvia() {
#...     if { is_stdin_pipe } {
#...         run_command_with_stdin_piped cat
#...     } else {
#...         output_string "${@}"
#...     }
#... }
#>>> output_string divinorum | salvia
#divinorum
#>>> salvia divinorum
#divinorum
#------------------------------------------
#==========================================
#/---

#   die_unless_variable_float "${float_name__sftso}"
#FUXME: Rename to ZESHY_STDIN_FILE_DESCRIPTOR and define a new
#ZESHY_STDIN_DEVICE_FILE (or perhaps simply ZESHY_STDIN_FILE, I should think)
#global expanding to "/dev/stdin". Then replace all instances of /dev/stdin with
#"${ZESHY_STDIN_DEVICE_FILE}".
#FUXME: Do so similarly for OUTPUT and ERROR globals, below.
