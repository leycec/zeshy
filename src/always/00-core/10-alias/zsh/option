#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle `zsh` option aliases.
-/-

# ....................{ TESTERS                            }....................
# Avoid expanding such alias to "is_shell_option_enabled interactive". While
# correct, such expansion is markedly slower than merely testing such option
# directly. This alias is expanded frequently enough to warrant optimization.
declare_alias_with_stdin\
    '[status: boolean] is_shell_interactive(void)'\
    'is -o interactive si' <<'/---'
Return success if standard input to the current shell _was_ attached to a
terminal device on initial execution of such shell. When testing whether
standard input to the current shell is _currently_ attached to a terminal
device, consider calling is_stdin_terminal() instead. Standard input
to the current shell could have been initially attached to a terminal device
but since closed, in which case relying on the return value from this function
would be problematic.
/---

declare_alias_with_stdin\
    '[status: boolean] is_shell_login(void)'\
    'is -o login si' <<'/---'
Return success if the first argument passed to the current shell was `-'. The
startup process running the `login` command typically passes such argument to
startup shells on successful login.
/---

# ....................{ ENABLERS                           }....................
declare_alias_with_stdin\
    'void set_shell_option_locally(string option_name1, ...)'\
    'setopt -- local_options' <<'/---'
Localize the passed `zsh` options to the current context (e.g., block, script,
function). Such options revert to their global values on leaving such context:
e.g.,

.set_shell_option_locally()
==========================================
[source]
------------------------------------------
>>> function risky_non_business() {
...     set_shell_option_locally no_warn_create_global
...     a_new_hopelessness="None shall pass."
... }
>>> risky_non_business                      # this does not print a warning!
>>> an_old_cheerfulness="Some shall pass."  # this does
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
