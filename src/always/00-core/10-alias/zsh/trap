#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *`zsh` trap* (i.e., code run on `zsh` receiving the corresponding signal) 
aliases.

== Design Considerations ==

While the trap() builtin provides a simple means of globally trapping signals,
doing so silently removes any prior traps registered in this way or through the
corresponding function TRAP${signal_name}() (e.g., TRAPINT()) for such trap and
is hence discouraged.

Such aliases provide _no_
# Since globally trapping signals through builtin trap() silently overwrites any
# prior signal trapped in both this way and through the corresponding function
# TRAP${signal_name}() (e.g., TRAPINT()), signals should instead be globally
# trapped through the run_trap_on_signal_*() family of functions (e.g.,
# run_trap_on_signal_interrupt()). Hence, there exists no corresponding
# run_trap_on_signal() function.

== See Also ==

* `man 7 signal`, the definitive Linux reference on *standard signals* (i.e.,
  signals mandated by POSIX and hence common to all POSIX-compliant systems).
* `info zsh` followed by `i trap`, a helpful reference on *`zsh` signals* (i.e.,
  non-POSIX signals handled only by and hence specific to `zsh` itself).
-/-

# ....................{ RUNNERS                            }....................
#FIXME: Add example.
declare_alias_with_stdin\
    'void run_trap_on_signal_local(string code, string signal_name_or_number)'\
    'setopt -- local_traps
    trap' <<'/---'
Run the passed code on the current shell receiving the passed signal during
subsequent execution of the function expanding this alias. By `zsh` design, this
temporarily replaces any prior global or local trap for such signal with such
trap, which may be undesirable.

For convenience, such signal may be specified as either a positive integer _or_
the capitalized name of such signal including or excluding prefix `SIG` (e.g.,
as either `1`, `HUP`, or `SIGHUP` for the hangup signal). Where such signal is
known beforehand (as is typical), consider calling the specific function in the
run_trap_on_signal_*_local() family for such signal instead (e.g.,
run_trap_on_signal_interrupt_local()).

== Caveats ==

*Only expand this alias within functions.* While this alias does technically run
without error when expanded outside of functions (e.g., at the command line or
script level), it does so by trapping such signal _globally_ -- permanently and
silently replacing any prior trap for such signal with such trap. (Otherwise
known as *"strongly undesirable"*.)
/---

declare_alias_with_stdin\
    'void run_trap_on_signal_interrupt_local(string code)'\
    '{
        run_trap_on_signal_local "$(get_stdin)" INT
    } <<<' <<'/---'
Run the passed code on the current shell receiving the *interrupt signal* (i.e.,
SIGINT, typically sent by the terminal receiving keyboard shortcut `<Ctrl-c>`
from the current user) during subsequent execution of the function expanding
this alias. See run_trap_on_signal_local() for further details.
/---

# ....................{ RESETTERS                          }....................
declare_alias_with_stdin\
    'void reset_trap_on_signal(string signal_name_or_number1?, ...)'\
    'trap -' <<'/---'
Reset the traps handling the passed signals (defaulting to all possible signals)
to the default `zsh` implementations of such traps. See
run_trap_on_signal_local() for further details.
/---

declare_alias_with_stdin\
    'void reset_trap_on_signal_interrupt(void)'\
    'trap - INT
' <<'/---'
Reset the trap handling the interrupt signal to such trap's default `zsh`
implementation. See run_trap_on_signal_interrupt() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
#Reset the code run on the current shell receiving the passed signals (defaulting
#to all possible signals) to the default `zsh` traps for such signals. See
#run_trap_on_signal_local() for further details.
        # Validate sanity.
#       string code; code="$(get_stdin)"

        # Locally Register such trap.
#       setopt -- local_options
#       unsetopt -- 
