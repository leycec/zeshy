#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core map aliases.
/---

# ....................{ DECLARATORS                        }....................
declare_function_with_stdin <<'/---'
void localize_map(string map_name)

Localize the passed map into local string variables in the caller's context. For
each key of such map, define a local string variable whose name is such key
suffixed by `__lm` and whose value is such key's value.

Since keys are arbitrary strings and variable names are not (i.e., such names
must match ${ZESHY_VARIABLE_NAME_GLOB}), keys are not necessarily valid variable
names. An exception is thrown if any key is _not_ a valid variable name: e.g.,

.localize_map()
==========================================
[source]
------------------------------------------
>>> map on_decentralization; on_decentralization=\
...    "Well"         "to begin with we don't fight wars or prepare for them."
...    "Consequently" "we have no need for conscription, or military"
...    "hierarchies"  "or a unified command. Then there's our economic system:"
...    "it"           "doesn't permit anybody to become more than four or five times"
...    "as"           "rich as the average. That means that we don't have any captains"
...    "of"           "industry or omnipotent financiers. Better still, we have no"
...    "omnipotent"   "politicians or bureaucrats. Pala's a federation of self-"
...    "governing"    "units, geographical units, professional units, economic"
...    "units"        "— so there's plenty of scope for small-scale initiative and"
...    "democratic"   "leaders, but no place for any kind of dictator at the"
...    "head"         "of a centralized government. Another point: we have no"
...    "established"  "church, and our religion stresses immediate experience"
...    "and"          "deplores belief in unverifiable dogmas and the emotions which"
...    "that"         "belief inspires. So we're preserved from the plagues of popery,"
...    "on"           "the one hand, and fundamentalist revivalism, on the other. And"
...    "along"        "with transcendental experience we systematically cultivate"
...    "skepticism"   "Discouraging children from taking words too seriously,"
...    "teaching"     "them to analyse whatever they hear or read — this is an"
...    "integral"     "part of the school curriculum. Result: the eloquent"
...    "rabble"       "rouser, like Hitler or our neighbour across the Strait,"
...    "Colonel"      "Dipa, just doesn't have a chance here in Pala." )
>>> localize_map on_decentralization
>>> print_string "${omnipotent__lm}"
politicians or bureaucrats. Pala's a federation of self-
>>> print_string "${skepticism__lm}"
Discouraging children from taking words too seriously,
------------------------------------------
==========================================
/---
alias localize_map='{
    # Validate standard input, preferring suffix "__lma" to "__lm" to avoid
    # conflict with string locals defined below.
    string map_name__lma
    set_string_to_stdin map_name__lma
    die_unless_map "${map_name__lma}"

    # Localize each map key. Avoid calling for_map_keys(), as that would
    # localize such keys in the context of such function rather than the caller.
    string key__lma
    for    key__lma ("${(k@)map_name__lma}") {
        # If such key is not a valid variable name, throw an exception. For
        # efficiency, inline such test. See is_variable_name() for further
        # details. Since previously defined parcel
        # @{00-startup/00-declare/*-global} declares such global, its expansion
        # here is inherently safe.
        is "${key__lma}" == ${~ZESHY_VARIABLE_NAME_GLOB} si or
            die_unless_variable_name "${key__lma}"

        # If such key is already an existing variable, throw an exception. For
        # efficiency, inline such test. See is_variable() for further details.
        is -n "${(P)key__lma+x}" si or
            die_unless_variable "${key__lma}"

        # Declare such key as a string local.
        string "${key__lma}"
    }
} <<<'

# --------------------( WASTELANDS                         )--------------------
