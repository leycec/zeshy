#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle `zeshy` startup in a manner analogous to `zsh` startup (e.g., `.zshenv`).
/---

# ....................{ GLOBALS                            }....................
declare_global_with_stdin <<'/---'
list ZESHY_HOOKS_RUN_ON_STARTUP

List of commands to be run on `zeshy` startup, regardless of the state of the
current shell.
/---

declare_global_with_stdin <<'/---'
list ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE

List of commands to be run on `zeshy` startup when the current shell is
interactive. See is_shell_interactive() for details.
/---

declare_global_with_stdin <<'/---'
list ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN

List of commands to be run on `zeshy` startup when the current shell is a login
shell. See is_shell_login() for details.
/---

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'/---'
void run_hook_on_zeshy_startup(string command)

Run the passed command immediately after autoloading `zeshy`\'s user digest file
on `zeshy` shell startup.
/---
function run_hook_on_zeshy_startup() {
    # Validate passed arguments.
    die_unless_arg 'expected one command'
    string command="${1}"

    # If printing verbose debug messages, do so. Avoid calling print_message()
    # or similar high-level printer functions, as such functions transitively
    # reference aliases and globals which have yet to be defined until *AFTER*
    # zeshy fully starts up.
    is_zeshy_debug_and\
        command="print -r -- 'zeshy: calling ${command}()...'${ZESHY_ASCII_NEWLINE}${command}"

    # Register such hook.
    ZESHY_HOOKS_RUN_ON_STARTUP+="${command}"
}

declare_function_with_stdin <<'/---'
void run_hook_on_zeshy_startup_if_interactive(string command)

Run the passed command immediately after autoloading `zeshy`\'s user digest file
on `zeshy` shell startup if such shell is interactive.
/---
function run_hook_on_zeshy_startup_if_interactive() {
    # See above for further details.
    die_unless_arg 'expected one command'
    string command="${1}"
    is_zeshy_debug_and\
        command="print -r -- 'zeshy: calling ${command}()...'${ZESHY_ASCII_NEWLINE}${command}"
    ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE+="${command}"
}

declare_function_with_stdin <<'/---'
void run_hook_on_zeshy_startup_if_login(string command)

Run the passed command immediately after autoloading `zeshy`\'s user digest file
on `zeshy` shell startup if such shell is a login shell.
/---
function run_hook_on_zeshy_startup_if_login() {
    # See above for further details.
    die_unless_arg 'expected one command'
    string command="${1}"
    is_zeshy_debug_and\
        command="print -r -- 'zeshy: calling ${command}()...'${ZESHY_ASCII_NEWLINE}${command}"
    ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN+="${command}"
}

# ....................{ RUNNERS ~ first                    }....................
declare_function_with_stdin <<'/---'
void run_hook_on_zeshy_startup_first(string command)

Run the passed command immediately after autoloading `zeshy`\'s user digest file
on `zeshy` shell startup _before_ running all other such commands. Specifically,
prepend the passed command to the beginning of the definition of
startup_zeshy().
/---
function run_hook_on_zeshy_startup_first() {
    # Avoid calling prepend_list(), which has yet to be defined.
    die_unless_arg 'expected one command'
    string command="${1}"
    is_zeshy_debug_and\
        command="print -r -- 'zeshy: calling ${command}()...'${ZESHY_ASCII_NEWLINE}${command}"
    ZESHY_HOOKS_RUN_ON_STARTUP=(
        "${command}" "${ZESHY_HOOKS_RUN_ON_STARTUP[@]}" )
}

# --------------------( WASTELANDS                         )--------------------
# ....................{ PRECOMPILERS                       }....................
#declare_function_with_stdin <<'/---'
#void precompile_zeshy_functions_startup(void)
#
#Dynamically synthesize the following hook-based functions:
#
#* startup_zeshy(), running all hooks in global list
#  ${ZESHY_HOOKS_RUN_ON_STARTUP}.
#* startup_zeshy_if_shell_interactive(), running all hooks in global list
#  ${ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE}.
#* startup_zeshy_if_shell_login(), running all hooks in global list
#  ${ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN}.
#
#`zeshy` only calls this function after sourcing all `zeshy` scripts applicable
#to the current user when (re)compiling `zeshy`\'s digest file for such user.
#/---
#function precompile_zeshy_functions_startup() {
#    # Validate sanity.
#    die_if_args
#
#    # Make such functions, joining such list elements on newline.
#    eval "function startup_zeshy() {
#    $(output_strings_newlined "${ZESHY_HOOKS_RUN_ON_STARTUP[@]}")
#    is_shell_interactive and startup_zeshy_if_shell_interactive
#    is_shell_login       and startup_zeshy_if_shell_login
#}"
#    eval "function startup_zeshy_if_shell_interactive() {
#    $(output_strings_newlined "${ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE[@]}")
#}"
#    eval "function startup_zeshy_if_shell_login() {
#    $(output_strings_newlined "${ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN[@]}")
#}"
#}

# See
    # join_list_on_newline() for further details.
# function. Consider calling run_hook_on_zeshy_startup()
#instead, unless convinced you know what you''re doing.
#Append the passed command to the end of the definition of the startup_zeshy()
#function. Zeshy calls such function and hence command on each execution, as
#with ".zshenv" under zsh.
#Append the passed command to the end of the definition of the
#startup_zeshy_if_shell_interactive() function. Zeshy calls such function and
#hence command on each execution under an interactive shell, as with ".zshrc"
#under zsh.
#Append the passed command to the end of the definition of the
#startup_zeshy_if_shell_login() function. Zeshy calls such function and hence
#command on each execution under a login shell, as with ".zprofile" under zsh.
    #FUXME: Hmm; why not just define prepend_list() before this?
#declare_function '
#void run_hook_on_zeshy_startup_first_if_shell_interactive(string command)
#
#Prepend the passed command to the beginning of the definition of the
#startup_zeshy_if_shell_interactive() function. Consider calling
#run_hook_on_zeshy_startup_if_interactive() instead, unless convinced
#you know what you''re doing.
#'
#function run_hook_on_zeshy_startup_first_if_shell_interactive() {
#    # Avoid calling prepend_list(), which has yet to be defined.
#    die_unless_arg 'expected one command'
#    ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE=(
#        "${1}" "${ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE[@]}" )
#}
#
#declare_function '
#void run_hook_on_zeshy_startup_first_if_shell_login(string command)
#
#Prepend the passed command to the beginning of the definition of the
#startup_zeshy_if_shell_login() function. Consider calling
#run_hook_on_zeshy_startup_if_login() instead, unless convinced
#you know what you''re doing.
#'
#function run_hook_on_zeshy_startup_first_if_shell_login() {
#    # Avoid calling prepend_list(), which has yet to be defined.
#    die_unless_arg 'expected one command'
#    ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN=(
#        "${1}" "${ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN[@]}" )
#}

#FUXME: Rename to append_zeshy_startup_command(). Much more natural (...the
#most important "precompile_zeshy" part comes first) and in keeping with nomenclature
#elsewhere.
#list_set_global_export ZESHY_HOOKS_RUN_ON_STARTUP
#list_set_global_export ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE
#list_set_global_export ZESHY_HOOKS_RUN_ON_STARTUP_IF_LOGIN

# void precompile_zeshy_functions_to_startup_zeshy(void)
#function precompile_zeshy_functions_to_startup_zeshy() {

#FUXME: Rename to ZESHY_COMMANDS_RUN_ON_STARTUP.
#ZESHY_COMMANDS_RUN_AFTER_STARTUP
#ZESHY_COMMANDS_RUN_AFTER_COMPILING
#ZESHY_RUN_COMMANDS_AFTER_STARTUP
#ZESHY_RUN_COMMANDS_AFTER_COMPILING
#ZESHY_RUN_ON_STARTUP
#ZESHY_RUN_ON_COMPILING
#ZESHY_COMMANDS_RUN_ON_STARTUP
#ZESHY_COMMANDS_RUN_ON_COMPILING

#   list_set_global_export ZESHY_HOOKS_RUN_ON_STARTUP
#   list_set_global_export ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE
    # Convert global lists of commands to be run on startup into newline-
    # delimited strings to be interpolated into the functions created below.
#   string startup_zeshy_commands startup_zeshy_commands_if_shell_interactive
#   startup_zeshy_commands="$(join_list_on_newline\
#       ZESHY_HOOKS_RUN_ON_STARTUP)"
#   startup_zeshy_commands_if_shell_interactive="$(join_list_on_newline\
#       ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE)"

#   prepend_list ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE "${1}"
#   ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE=(
#       "${1}" "${ZESHY_HOOKS_RUN_ON_STARTUP_IF_INTERACTIVE[@]}"
#   )
#FUXME: Call from "src/compile". Yes... excellent. Obviously, this needs to
#happen *AFTER* sourcing all scripts but prior to creating the digest.
# void add_command_to_zeshy_shutdown(string command)
#
# Run the passed command on Zeshy shutdown in the current shell, triggered on
# receiving any of the following signals: ABRT, ALRM, HUP, INT, QUIT, or TERM.
#function add_command_to_zeshy_shutdown() {
#    die 'implement me'
#}

#function run_code_on_zeshy_startup() {
#function startup_zeshy_by_running() {
# void make_functions_for_zeshy_startup(void)
# void precompile_zeshy_startup(void)
