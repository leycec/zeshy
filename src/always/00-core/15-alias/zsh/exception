#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle `zsh` exception aliases.
/---

#FIXME: We currently litter the codebase with code resembling:
#
#    store_dir "${dirname}"
#    try {
#       ...
#    } always :{
#       restore_dir
#    }:
#
#While only a slight improvement, we could replace such duplication with the
#more compact and readable equivalent (assuming we define a new alias
#always_restore_dir() in the trivial way):
#
#    store_dir "${dirname}"
#    try {
#       ...
#    } always_restore_dir
#
#Likewise for similar logic elsewhere.

# ....................{ CATCHERS                           }....................
declare_alias_with_stdin 'void try(void)'\
    'typeset -ag ZESHY_TRY_LEVEL; ZESHY_TRY_LEVEL[${SHLVL}]=$(( ${ZESHY_TRY_LEVEL[${SHLVL}]-0} + 1 ))
' <<'/---'
`zeshy`-specific prefix for `{...} always :{...}:` blocks. While plain `zsh`
requires no such prefix, `zeshy` provides improved exception handling requiring
initialization by this alias prior to entering such blocks. Specifically, while
plain `zsh` fails to print uncaught exceptions or provide user-configurable
hooks for programmatically doing so, `zeshy` always handles such exceptions.

== Implementation Details ==

This alias increments ${ZESHY_TRY_LEVEL[${SHLVL}]}, the *try level* for the
current shell (i.e., the number of `try {...} always :{...}:` blocks on such
shell''s call path), subsequently decremented by alias `}:` to detect the
topmost `always :{...}:` block on such path and hence whether uncaught
exceptions should be handled immediately or allowed to propagate back up to a
parent `always :{...}:` block.
/---

declare_alias_with_stdin 'void ":{"(void)' '{' <<'/---'
`zeshy`-specific brace suffixing keyword `always` in `always :{...}:` blocks.
While plain `zsh` requires no such brace, `zeshy` exception handling implements
additional functionality requiring initialization prior to entering such blocks.

== Implementation Details ==

This alias currently expands to `{` and hence (technically) performs no
initialization at the moment. Since this alias will probably be revised to
initialize something at some future date, prefer this alias to merely `{`.
/---

declare_alias_with_stdin 'void "}:"(void)'\
    'print_exception_if_unhandled
}' <<'/---'
`zeshy`-specific brace terminating `always :{...}:` blocks. While plain `zsh`
requires no such brace, `zeshy` exception handling implements additional
functionality requiring finalization prior to leaving such blocks. Specifically,
this alias guarantees handling of uncaught exceptions.

== Implementation Details ==

This alias currently defers to print_exception_if_unhandled(), if defined. See
such function for further details.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Correct example. Namely, wrap the printed warning in a proper box.
#declare_alias_with_stdin 'void always_catch_exception_as_warning(void)'\
#    'always :{
#        if { catch_exception_if_found "*" } {
#            print_warning "${CAUGHT}"
#        }
#    }:' <<'/---'
#Catch any exception thrown by the prior `try {...}` block and print such
#exception as a nonfatal warning to standard error: e.g.,
#
#.always_catch_exception_as_warning()
#==========================================
#[source]
#------------------------------------------
#>>> string on_respectable_murder=\
#...    "Political language — and with variations this is true of all political
#...     parties, from Conservatives to Anarchists — is designed to make lies
#...     sound truthful and murder respectable, and to give an appearance of
#...     solidity to pure wind."
#>>> { throw "${on_respectable_murder}" } always_catch_exception_as_warning
#Political language — and with variations this is true of all political
#parties, from Conservatives to Anarchists — is designed to make lies
#sound truthful and murder respectable, and to give an appearance of
#solidity to pure wind.
#------------------------------------------
#==========================================
#/---

#If an exception was thrown (i.e., if ${EXCEPTION} is set), catch and print such
#exception as a nonfatal warning. This alias is intended to be expanded in place
#of a customary `always :{...}:` block (i.e., after the closing `}` for the prior
#`try {...}` block): e.g.,

#FUXME: Do we actually require any "always" blocks at the top-level? I suspect
#*NOT*, in which case this, ":{", and "}:" should be shifted to
#@{15-alias/exception}.
#   } or ignore_failure' <<'/---'

#FUXME: Actually, this shouldn't be the case. If no exception was thrown, then
#${TRY_BLOCK_ERROR} (containing the exit status of the "try {...}" block) should
#be zero indicating success; else, ${TRY_BLOCK_ERROR} should be nonzero
#indicating failure, in which case catch() should catch such error and set
#"(( TRY_BLOCK_ERROR = 0 ))" (according to the implementation of catch()). If
#this isn't happening, I suspect "(( TRY_BLOCK_ERROR = 0 ))" itself is failing
#(since such assignment returns nonzero exit status when assigned to zero --
#oddball, we know). Investigate, in any case.

# Curiously, it does *NOT* suffice to simply catch such exception. Since zsh
# implicitly returns non-zero exit status from "always" blocks prematurely
# entered due to a thrown exception, such status *MUST* be ignored to prevent
# such block from implicitly throwing another exception.
