#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle `zsh` exception aliases.
/---

#FIXME: We currently litter the codebase with code resembling:
#
#    store_dir "${dirname}"
#    try {
#       ...
#    } always :{
#       restore_dir
#    }:
#
#While only a slight improvement, we could replace such duplication with the
#more compact and readable equivalent (assuming we define a new alias
#always_restore_dir() in the trivial way):
#
#    store_dir "${dirname}"
#    try {
#       ...
#    } always_restore_dir
#
#Likewise for similar logic elsewhere.

# ....................{ PRINTERS                           }....................
#FIXME: Rename to always_reduce_exception_to_warning().
declare_alias_with_stdin\
    'void always_convert_exception_to_warning(void)'\
    'always :{
        if { catch_exception_matching_glob_if_found "*" } {
            print_warning "${CAUGHT}"
        }
    }:' <<'/---'
If an exception was thrown (i.e., if ${EXCEPTION} is set), catch and print such
exception as a nonfatal warning. This alias is intended to be expanded in place
of a customary `always :{...}:` block (i.e., after the closing `}` for the prior
`try {...}` block): e.g.,

.always_convert_exception_to_warning()
==========================================
[source]
------------------------------------------
>>> string on_respectable_murder=\
...    "Political language — and with variations this is true of all political
...     parties, from Conservatives to Anarchists — is designed to make lies
...     sound truthful and murder respectable, and to give an appearance of
...     solidity to pure wind."
>>> { throw "${on_respectable_murder}" } always_convert_exception_to_warning
Political language — and with variations this is true of all political
parties, from Conservatives to Anarchists — is designed to make lies
sound truthful and murder respectable, and to give an appearance of
solidity to pure wind.
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
#   } or ignore_failure' <<'/---'

#FUXME: Actually, this shouldn't be the case. If no exception was thrown, then
#${TRY_BLOCK_ERROR} (containing the exit status of the "try {...}" block) should
#be zero indicating success; else, ${TRY_BLOCK_ERROR} should be nonzero
#indicating failure, in which case catch() should catch such error and set
#"(( TRY_BLOCK_ERROR = 0 ))" (according to the implementation of catch()). If
#this isn't happening, I suspect "(( TRY_BLOCK_ERROR = 0 ))" itself is failing
#(since such assignment returns nonzero exit status when assigned to zero --
#oddball, we know). Investigate, in any case.

# Curiously, it does *NOT* suffice to simply catch such exception. Since zsh
# implicitly returns non-zero exit status from "always" blocks prematurely
# entered due to a thrown exception, such status *MUST* be ignored to prevent
# such block from implicitly throwing another exception.
