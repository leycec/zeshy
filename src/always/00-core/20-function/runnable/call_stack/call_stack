#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core call stack functionality.
/---

# To avoid polluting the call stack, we implement most such functionality as
# aliases rather than functions in prior parcel @{call_stack}.

# ....................{ TESTERS ~ index                    }....................
#FIXME: Technically, this function could be converted to an alias. Only do so if
#efficiency requires such conversion, however. There's little profit in it
#otherwise.
declare_function_with_stdin <<'/---'
[status: boolean] is_call_stack_item_script(string funcsourcetrace_item)

Report success if the runnable corresponding to the passed element of canonical
list ${funcsourcetrace} was a sourced `zsh` script (i.e., was _not_ a called
`zsh` function or evaluated eval() statement).

== Caveats ==

*While reliable, this function is _not_ infallible.* Since `zsh` currently
provides no general-purpose means of differentiating files from non-files in the
call stack, this function applies the following reasonably reliable heuristic:

* If such element is suffixed by `:0`, such element is formatted as either:
+
--
* `${filename}:0`, implying a `zsh` script sourced at such filename. While such
   file may have been removed after being sourced and hence no longer exist,
   this is typically unlikely. In the common case, such file still exists.
* `${digest_filename}/${function_name}:0`, implying a `zsh` function called
   with such name autoloaded from a `zsh` digest serialized to such filename.
   Since such digest is a file, the path produced by suffixing such filename by a
   directory separator and function name is guaranteed to _not_ exist.

The existence of such path thus serves as a reasonable proxy of whether such
element signifies a script or not.
--
* Else, such element connot signify a script.
/---
function is_call_stack_item_script() {
    # Validate sanity.
    die_unless_arg 'Expected one ${funcsourcetrace} element.'
    string funcsourcetrace_item="${1}"

    # Test such element as documented above. For efficiency, test the entirety
    # of such element excluding suffixing ":0" and hence the last two characters
    # of such element as the path to be tested for existence. See is_path() for
    # further details.
    is    "${funcsourcetrace_item}" == *":0" and
       -e "${funcsourcetrace_item[1,-3]}" si
}

# --------------------( WASTELANDS                         )--------------------
#    string funcstack_item,
#    string funcsourcetrace_item)
#
#Report success if the runnable corresponding to the passed elements of canonical
#lists ${funcstack} and ${funcsourcetrace} (presumably expanded from the same
#index of such lists respectively) was a sourced `zsh` script (i.e., was _not_ a
#called `zsh` function or evaluated eval() statement).

# Specifically,
#Technically, such file may have been removed since being sourced. Since this
#remains unlikely, the existence of such file serves as a reasonable proxy.
#In the  case, .

# In the former
#case, `zsh` formats such element as
#  `${filename}:0`; in latter case, as `${digest_filename}/${function_name}:0`
#  `/home/leycec/.zeshy/cache/digest/debug.zwc/yaso`
