#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *string messages* (i.e., strings used for composing and printing terse
human-readable messages).
/---

# ....................{ TRUNCATERS                         }....................
declare_function_with_stdin <<'/---'
string truncate_string_readable:(string text1, ...)

Truncate the passed string for use in composing brief, human-readable messages.
To avoid line wrapping, truncate such string to approximately a third the width
of the current terminal in a manner consistent with English punctuation: e.g.,

.truncate_string_readable:()
==========================================
[source]
------------------------------------------
>>> string the_new_scum="
...     These are the new streets of this city, where the New Scum try to live.
...     You and me. And here in these streets are the things that we want: sex
...     and birth, votes and traits, money and guilt, television and teddy
...     bears. But all we've actually got is each other. You decide what that
...     means."
>>> print_message\
...     "aphorism \"$(truncate_string_readable: "${the_new_scum}")\" not an affectation"
zeshy: aphorism "These are the new streets of this city, ..." not an affectation
------------------------------------------
==========================================
/---
function truncate_string_readable:() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'
    string text="${*}" suffix
    integer length length_max length_suffix

    # String length.
    set_integer_to_string_length_printable length "${text}"

    #FIXME: Testing is_stdout_terminal() is infeasible, as this function is
    #intended to be called from subshells. What does zsh report the terminal
    #width to be when operating headlessly (e.g., from cron jobs)? Investigate.
    #I suspect ${COLUMNS} is probably 0 in such cases. Hopefully! If that's the
    #case, we'll basically be truncating everything to the empty string when
    #called from subshells, which is less than helpful. Contemplate.

    # Truncation length. If standard output for the current shell is attached to
    # a terminal, truncate to a third of the current terminal's width rounded
    # down to the nearest integer; else, default to something sensibly "short."
    #if { is_stdout_terminal } {
        length_max=$(( 0.33 * $(get_terminal_width) ))
    #} else {
    #    length_max=40
    #}

    # If the passed string requires no truncation, return the same string.
    if (( length <= length_max )) {
        return_string "${text}"
    }

    # Else, truncate such string. Since brute-force truncation alone is unlikely
    # to produce aesthetically human-readable output, attempt to find a better
    # truncation point below.
    text="${text[1,${length_max}]}"

    # Suffix to be appended to the truncated string.
    suffix='...'

    # Suffix length.
    set_integer_to_string_length_printable length_suffix "${suffix}"

    # If the passed string is at least as long as such suffix, such string may
    # be truncated in a human-readable manner.
    if (( length > length_suffix )) {
        # If the truncation of such string contains either list- or sentence-
        # delimiting punctuation (i.e., punctuation commonly delimiting lists or
        # sentences in English), this identifies an ideal truncation point.
        # Replace the text after the last such punctuation with such suffix.
        if { is_string_matches_glob_capturing_groups "${text}" '(*[.,;!?])*' } {
            # Technically, this could produce a string at most three characters
            # longer than the desired truncation length. Since that length is
            # largely arbitrary, however, this should be ignorable.
            return_string "${match[1]} ${suffix}"
        # Else, such string contains no easily indentifiable truncation point.
        # Simply replace the end of string with such suffix.
        } else {
            length_max+=-${length_suffix}
            return_string "${text}${suffix}"
        }
    # Else, such string is shorter than such suffix. Simply return it as is.
    } else {
        return_string "${text}"
    }
}

# ....................{ JOINERS                            }....................
declare_function_with_stdin <<'/---'
string join_strings_readable:(string text1, ...)

Join the passed strings into a string for use in composing brief, human-readable
messages consistent with English punctuation. Specifically:

* Double quote all passed strings.
* Prefix all passed strings except the first and last with `, `.
* Prefix the last passed string with `, and `.
* Concatenate such strings truncated to the width of the current terminal.

For example: e.g.,

.join_strings_readable:()
==========================================
[source]
------------------------------------------
>>> list puritanism; puritanism=(
...     "The haunting fear that someone" "somewhere" "may be happy." )
>>> print_message "$(join_strings_readable: "${puritanism[@]}")
zeshy: "The haunting fear that someone", "somewhere", and "may be happy."
------------------------------------------
==========================================
/---
function join_strings_readable:() {
    # Validate sanity.
    die_unless_args 'Expected one or more strings.'
    list strings_double_quoted

    # Join such strings. Dismantled, this is:
    #
    # * "\"${^@}\"", double quoting each passed string.
    strings_double_quoted=( "\"${^@}\"" )
    truncate_string_readable:\
        "$(join_list_on_string_if_size_2_or_strings_nonlast_and_last:\
            strings_double_quoted ' and ' ', ' ', and ' )"
}

#FIXME: Documentation tragicomically out-of-date.
declare_function_with_stdin <<'/---'
string join_list_on_string_if_size_2_or_strings_nonlast_and_last:(
    string list_name,
    string delimiter_if_size_2,
    string delimiter_if_size_3_or_more_and_item_not_last,
    string delimiter_if_size_3_or_more_and_item_last)

Join the list with the passed name into a string with each list element
excluding the last delimited by the first passed delimiter and the last list
element delimited by the second passed delimiter. Delimiters may be of any
length: e.g.,

.join_list_on_strings_nonlast_and_last_if_size_ge_2_or_last:()
==========================================
[source]
------------------------------------------
>>> list pat_the_bunny
>>> pat_the_bunny=( the wingnut dishwashers union )
>>> join_list_on_string_if_size_2_or_strings_nonlast_and_last:\
...     pat_the_bunny "+?" "+" "?"
the+wingnut+dishwashers?union
------------------------------------------
==========================================
/---
function join_list_on_string_if_size_2_or_strings_nonlast_and_last:() {
    # Validate sanity.
    die_unless_args_4\
        'Expected one list name, one non-last delimiter, one last delimiter if three or more list elements, and optional last delimiter if two list elements.'
    string\
        list_name__jlwd="${1}"\
        delimiter_if_size_2__jlwd="${2}"\
        delimiter_if_size_3_or_more_and_item_not_last__jlwd="${3}"\
        delimiter_if_size_3_or_more_and_item_last__jlwd="${4}"
    integer list_size__jlwd
    die_unless_list "${list_name__jlwd}"

    #FIXME: We *REALLY* want to call set_int_to_list_size:() here!
    # Get such list's size.
    list_size__jlwd="$(get_list_size "${list_name__jlwd}")"

    # Join the passed list depending on the size of such list.
    if (( list_size__jlwd >= 3 )) {
        # Join all list elements excluding the last into a string. Note: DO NOT
        # DOUBLE-QUOTE SUCH LIST WHEN SETTING ${list_sans_last_item___jlwd}, as
        # doing so aggregates such list elements into a single string. *rage!!!*
        list   list_sans_last_item__jlwd
        string list_sans_last_item_string__jlwd
        list_sans_last_item__jlwd=( ${${(@P)list_name__jlwd}[1,-2]} )
#       print_message "lsle[@]: $__list_sans_last_item__[1]; $__list_sans_last_item__[2]"
        list_sans_last_item_string__jlwd="$(join_list_on_string\
            list_sans_last_item__jlwd "${delimiter_if_size_3_or_more_and_item_not_last__jlwd}")"

        # Join the last list element into such list.
        output_string "${list_sans_last_item_string__jlwd}${delimiter_if_size_3_or_more_and_item_last__jlwd}${${(@P)list_name__jlwd}[-1]}"
#       return_string "${list_sans_last_item_string__}"
    } elif (( list_size__jlwd == 2 )) {
        output_string\
            "${${(@P)list_name__jlwd}[1]}${delimiter_if_size_2__jlwd}${${(@P)list_name__jlwd}[2]}"
    } else {
        output_string "${${(@P)list_name__jlwd}[1]}"
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to join_list_on_strings_contextually().
#FUXME: Wait. Split into two functions, if we ever actually use the default
#value for the final argument:
#
#* join_list_on_strings_nonlast_and_last:().
#* join_list_on_strings_nonlast_and_last_if_size_ge_2_or_last:().
#
#Yes, I rather prefer these more explicit versions, really. "_contextually" just
#doesn't convey anything.

#>>> list central_reactionary_germ_cell; central_reactionary_germ_cell=(
#...     "At first the child has" "to submit to" "the structure of the"
#...     "authoritarian miniature state" "the family"
#...     "this makes it capable of" "later subordination to the"
#...     "general authoritarian system." )

#Unlike most functions operating on lists, this function excepts accepts list
#elements as positional arguments rather than a variable name (largely due to
#caller requirements elsewhere): e.g.,

#To avoid line wrapping, truncate such string to approximately a third the width
#of the current terminal in a manner consistent with English punctuation: e.g.,
#
#Join the passed strings into a string for use in a message to be printed directly to
#standard output or error conjunctively delimiting such strings
#(i.e., with the logical conjunction ``and''). Specifically:
    # Truncate such strings.
#   truncate_string "${*}" "${length_max}" '...'

    # Truncation length. If standard output for the current shell is attached to
    # a terminal, truncate to a third of the current terminal's width rounded
    # down to the nearest integer; else, default to something sensibly "short."
#   if { is_stdout_terminal } {
#       length_max=$(( 0.33 * $(get_terminal_width) ))
#   } else {
#       length_max=40
#   }

#directly to standard output or error
#the returned string to a sensible maximum (currently, 75% of the
#  current terminal width).
    # Truncate the joined string to 33% of the current terminal's width, rounded
    # down to the nearest integer.
#   integer max_length=80
#   is_stdout_terminal and max_length=$(( 0.75 * $(get_terminal_width) ))
#   truncate_string "${text}" "${max_length}" '...'

#Print the passed strings to standard output delimited and terminated by nulls.
#Suffix each such string with character "\0", in other words: e.g.,
