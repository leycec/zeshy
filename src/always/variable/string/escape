#!/usr/bin/env zsh
# ====================[ escape                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle string escapes (i.e., shell-reserved characters preceded by "\").

# ....................{ ESCAPERS                           }....................
declare_function_with_stdin <<'/---'
string escape_string(string text1, string text2, ...)

Escape all shell-reserved and whitespace characters in the passed strings.
Specifically, prefix such characters with a backslash: e.g.,

.escape_string()
==========================================
[source]
------------------------------------------
>>> escape_string "(Three Rings)" "[for the]" "{Elven-kings}"
\(Three\ Rings\) \[for\ the\] \{Elven-kings\}
------------------------------------------
==========================================
/---
function escape_string() {
    die_unless_args 'expected at least one string'
    print_string "${(q)*}"
}

declare_function_with_stdin <<'/---'
string escape_string_double_quotes(string text1, string text2, ...)

Escape all double quotes in the passed strings. Specifically, prefix such quotes
with a backslash: e.g.,

.escape_string_double_quotes()
==========================================
[source]
------------------------------------------
>>> escape_string_double_quotes 'I whispered, "I am too young,"'
I whispered, \"I am too young,\"
------------------------------------------
==========================================
/---
function escape_string_double_quotes() {
    die_unless_args 'expected at least one string'
    replace_string_glob_matches_with_string "${*}" '"' '\"'
}

declare_function_with_stdin <<'/---'
string escape_string_for_printf(string text1, string text2, ...)

Escape the passed strings for subsequent passing to printf() as string literals
rather than format specifications. Specifically, repeat percent signs: e.g.,

.escape_string_for_printf()
==========================================
[source]
------------------------------------------
>>> escape_string_for_printf\
...     'People said I should accept the world. Bullshit!
...     I don't accept the world.      % RMS %'
People said I should accept the world. Bullshit!
I don't accept the world.      %% RMS %%
------------------------------------------
==========================================
/---
function escape_string_for_printf() {
    die_unless_args 'expected at least one string'
    replace_string_glob_matches_with_string "${*}" '%' '%%'
}

# ....................{ ESCAPERS ~ path                    }....................
declare_function_with_stdin <<'/---'
string escape_path_dir_separator(string pathname)

Escape all directory separators in the passed path, prefixing all forward
slashes in such path with a backslash. For safety, consider calling this
function when creating path basenames from unsafe sources (e.g., user input
possibly containing forward slashes): e.g.,

.escape_path_dir_separator()
==========================================
[source]
------------------------------------------
>>> string shibboleth="$(escape_path_dir_separator /fungi/from/yuggoth)"
>>> make_file "$(get_home)/${shibboleth}"
>>> list_path "$(get_home)/${shibboleth}"
/home/leycec/\/fungi\/from\/yuggoth
------------------------------------------
==========================================
/---
function escape_string_dir_separator() {
    # Validate passed arguments.
    die_unless_arg 'expected one pathname'
    replace_string_glob_matches_with_string "${1}" '/' '\/'
}

# --------------------( WASTELANDS                         )--------------------
#...     'Internationally, "the war on drugs" provides a cover for intervention.
#...      Domestically, it has little to do with drugs but a lot to do with
#...      distracting the population, increasing repression in the inner cities,
#...      and building support for the attack on civil liberties.'
