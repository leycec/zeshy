#!/usr/bin/env zsh
# ====================[ test                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle string tests and exception throwing.

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
void die_unless_string_nonempty(string text, string exception_message)

Throw an exception with the passed message unless the passed string is empty.
________________<heredoc?>________________
function die_unless_string_nonempty() {
    die_unless_args_2 'expected one string and one exception message'
    is_string_nonempty "${1}" or die "${2}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_empty(string text)

Return success if the passed string is empty.
________________<heredoc?>________________
function is_string_empty() {
    die_unless_arg 'expected one string'
    is -z "${1}" si
}

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_nonempty(string text)

Return success if the passed string is empty.
________________<heredoc?>________________
function is_string_nonempty() {
    die_unless_arg 'expected one string'
    is -n "${1}" si
}

# ....................{ TESTERS ~ equality                 }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_equals(string text1, string text2)

Return success if the two passed strings are identical.
________________<heredoc?>________________
function is_string_equals() {
    append_args_with_stdin_if_piped
    die_unless_args_2 'expected two strings'
    is "${1}" == "${2}" si
}

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_equals_caselessly(string text1, string text2)

Return success if the two passed strings are case-insensitively identical (i.e.,
identical when ignoring case).
________________<heredoc?>________________
function is_string_equals_caselessly() {
    append_args_with_stdin_if_piped
    die_unless_args_2 'expected two strings'
    is "${1}" == (#i)"${2}" si
}

# ....................{ TESTERS ~ containment              }....................
declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_contains(string text, string substring)

Return success if the passed string contains the passed substring.
________________<heredoc?>________________
function is_string_contains() {
    append_args_with_stdin_if_piped
    die_unless_args_2 'expected one string and one substring'
    is "${1}" == *"${2}"* si
}

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_prefix(string text, string prefix)

Return success if the passed string is prefixed by the passed prefix.
________________<heredoc?>________________
function is_string_prefix() {
    append_args_with_stdin_if_piped
    die_unless_args_2 'expected one string and one prefix'
    is "${1}" == "${2}"* si
}

declare_function_with_stdin <<'________________<heredoc?>________________'
[status: boolean] is_string_suffix(string text, string suffix)

Return success if the passed string is suffixed by the passed suffix.
________________<heredoc?>________________
function is_string_suffix() {
    append_args_with_stdin_if_piped
    die_unless_args_2 'expected one string and one suffix'
    is "${1}" == *"${2}" si
}

# --------------------( WASTELANDS                         )--------------------
