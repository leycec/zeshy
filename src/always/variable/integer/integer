#!/usr/bin/env zsh
# ====================[ integer                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle integer variables and values.
#
# --------------------( CAVEATS                            )--------------------
#FIXME: Copy such deficiencies here, to be incorporated into HTML documentation.
# As "doc/README.dev" discusses, integer variables suffer numerous deficiencies:
# particularly forced casting of non-integer types to 0 and forced rounding down
# of float types, all without error or warning. Since string variables suffer no
# such deficiencies and implicitly support integer values, consider declaring
# integers to be of type string instead. In either case, this component
# seemlessly handles integer values and hence both types.

# ....................{ EXCEPTIONS                         }....................
#FIXME: Actually, this function only matches decimal integers. Hence, rename
#this function to die_unless_decimal() and create a new die_unless_integer()
#function properly matching *ALL* integer strings. Such functions needs to match
#both "0x"- and "16#"-style base prefixes.
declare_function '
void die_unless_integer(
  string value,
  string error_message = "\"${value}\" not an integer")

Throw an exception with the passed message unless the passed string is an
integer. See is_integer() for further details.
'
function die_unless_integer() {
    die_unless_args_1_to_2\
        'expected one string and optional error message'
    string value="${1}"
    is_integer "${value}" or die "${2:-\"${value}\" not an integer}"
}

declare_function '
void die_unless_integers(string value1, string value2, ...)

Throw an exception with a stock message unless all passed strings are integers.
See is_integer() for further details.
'
function die_unless_integers() {
    die_unless_args 'expected at least one string'
    for value ("${@}") die_unless_integer "${value}"
}

# ....................{ EXCEPTIONS ~ value                 }....................
declare_function '
void die_unless_integer_positive(
  string integer,
  string error_message = "\"${integer}\" not a positive integer")

Throw an exception with the passed message unless the passed string is a
positive integer. See is_integer_positive for further details.
'
function die_unless_integer_positive() {
    die_unless_args_1_to_2\
        'expected one string and optional error message'
    is_integer_positive "${1}" or
        die "${2:-\"${1}\" not a positive integer}"
}

declare_function '
void die_unless_integer_negative(
  string integer,
  string error_message = "\"${integer}\" not a negative integer")

Throw an exception with the passed message unless the passed string is a
negative integer. See is_integer_negative for further details.
'
function die_unless_integer_negative() {
    die_unless_args_1_to_2\
        'expected one string and optional error message'
    string number="${1}"
    is_integer_negative "${number}" or
        die "${2:-\"${number}\" not a negative integer}"
}

declare_function '
void die_unless_integer_nonnegative(
  string integer,
  string error_message = "\"${integer}\" not a nonnegative integer")

Throw an exception with the passed message unless the passed string is a
nonnegative integer. See is_integer_nonnegative for further details.
'
function die_unless_integer_nonnegative() {
    die_unless_args_1_to_2\
        'expected one string and optional error message'
    string number="${1}"
    is_integer_nonnegative "${number}" or
        die "${2:-\"${number}\" not a nonnegative integer}"
}

declare_function '
void die_unless_integer_nonpositive(
  string integer,
  string error_message = "\"${integer}\" not a nonpositive integer")

Throw an exception with the passed message unless the passed string is an
nonpositive integer. See is_integer_nonpositive for further details.
'
function die_unless_integer_nonpositive() {
    die_unless_args_1_to_2\
        'expected one string and optional error message'
    string number="${1}"
    is_integer_nonpositive "${number}" or
        die "${2:-\"${number}\" not a nonpositive integer}"
}

declare_function '
void die_unless_integer_between(
  string integer, integer minimum, integer maximum,
  string error_message = "\"${integer}\" not an integer in [${minimum}, ${maximum}]}")

Throw an exception with the passed message unless the passed string is an
integer between the passed inclusive lower and upper integer bounds.
'
function die_unless_integer_between() {
    die_unless_args_3_to_4\
        'expected one string and optional error message'
    string number="${1}" minimum="${2}" maximum="${3}"
    is_integer_between "${number}" "${minimum}" "${maximum}" or
        die "${4:-\"${number}\" not an integer in [${minimum}, ${maximum}]}"
}

# ....................{ TESTERS                            }....................
declare_function '
boolean is_integer(string value)

Return true if the passed string is an integer (i.e., a string consisting of
an optional negative sign and one or more digits).
'
function is_integer() {
    # Dismantled, this is:
    #
    # * "(-|)", matching an optional prefixing negative sign.
    # * "<->", matching one or more digits. An obscure, but helpful, zsh-ism.
    die_unless_arg 'expected one string'
    is "${1}" == ('-'|)<-> si
}

# ....................{ TESTERS ~ value                    }....................
#FIXME: Incorrect. *ALL* such functions should die unless the passed integer is
#actually an integer, as only that accords with caller expectations. Note
#interestingly that that also induces correct behavior when called by a
#die_unless_*() function (i.e., an exception is thrown, and in fact a more
#appropriately named exception). See "parity" below for what such
#implementations should resemble.
declare_function '
boolean is_integer_positive(string integer)

Return true if the passed string is a positive integer.
'
function is_integer_positive() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string number="${1}"
    die_unless_integer "${number}"

    # Test such integer.
    (( number > 0 ))
}

declare_function '
boolean is_integer_negative(string integer)

Return true if the passed string is a negative integer.
'
function is_integer_negative() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string number="${1}"
    die_unless_integer "${number}"

    # Test such integer.
    (( number < 0 ))
}

declare_function '
boolean is_integer_nonnegative(string integer)

Return true if the passed string is a nonnegative integer (i.e., an integer
either 0 or positive).
'
function is_integer_nonnegative() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string number="${1}"
    die_unless_integer "${number}"

    # Test such integer.
    (( number >= 0 ))
}

declare_function '
boolean is_integer_nonpositive(string integer)

Return true if the passed string is a nonpositive integer (i.e., an integer
either 0 or negative).
'
function is_integer_nonpositive() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string number="${1}"
    die_unless_integer "${number}"

    # Test such integer.
    (( number <= 0 ))
}

declare_function '
boolean is_integer_between(string integer, integer minimum, integer maximum)

Return true if the passed string is an integer bounded by the passed inclusive
lower and upper bounds.
'
function is_integer_between() {
    # Validate passed arguments.
    die_unless_args_3\
        'expected one integer, one integer minimum, and one integer maximum'
    string number="${1}" minimum="${2}" maximum="${3}"
    die_unless_integers "${number}" "${minimum}" "${maximum}"
    (( "${minimum}" <= "${maximum}" )) or
        die "minimum \"${minimum}\" greater than maximum \"${maximum}\""

    # Test such string.
    (( minimum <= number && number <= maximum ))
}

# ....................{ TESTERS ~ parity                   }....................
declare_function '
boolean is_integer_even(integer number)

Return true if the passed integer is even.
'
function is_integer_even() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string number="${1}"
    die_unless_integer "${number}"

    # Test such parity.
    not (( number & 1 ))
}

declare_function '
boolean is_integer_odd(integer number)

Return true if the passed integer is odd.
'
function is_integer_odd() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string number="${1}"
    die_unless_integer "${number}"

    # Test such parity.
    (( number & 1 ))
}

declare_function '
boolean is_integer_parity_equals(integer number1, integer number2)

Return true if the passed integers share the same parity (i.e., are either both
even or both odd).
'
function is_integer_parity_equals() {
    # Validate passed arguments.
    die_unless_args_2 'expected two integers'
    string number1="${1}" number2="${2}"
    die_unless_integer "${number1}"
    die_unless_integer "${number2}"

    # Test such parity by recalling two integers share the same parity if and
    # only if their sum is even.
    is_integer_even $(( number1 + number2 ))
}

# ....................{ GETTERS                            }....................
declare_function '
integer get_integers_between(integer start, integer end)

List all integers in the passed inclusive range: e.g.,

    >>> get_integers_between 6 9
    6 7 8 9
'
function get_integers_between() {
    # Validate passed arguments.
    die_unless_args_2 'expected one start integer and one end integer'
    string start="${1}" end="${2}"
    die_unless_integers "${start}" die_unless_integer "${end}"

    # Get such integers.
    print_string {${start}..${end}}
}

# ....................{ SETTERS                            }....................
declare_function '
void set_integer(string integer_name, integer number)

Set the passed integer to the passed value.
'
function set_integer() {
    # Validate passed arguments.
    die_unless_args_2 'expected one integer name and one integer'
    string integer_name__si="${1}"
    die_unless_variable_integer "${integer_name__si}"

    # Set such integer.
    noop ${(P)integer_name__si::=${2}}
}

# ....................{ CONVERTERS                         }....................
declare_function '
string convert_integer_to_comma_separated_string(integer number)

Convert the passed integer to a comma-separated string: e.g.,

    >>> convert_integer_to_comma_separated_string 1776
    1,776
'
function convert_integer_to_comma_separated_string() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string integer="${1}"
    die_unless_integer "${integer}"

    # Unlike zsh's printf(), awk's printf() happily supports comma delimitation.
    print_string "${integer}" | awk "{ printf \"%'d\n\", \$1 }"
}

# --------------------( WASTELANDS                         )--------------------
#   die_unless_arg 'expected one string'
#   is "${1}" == '-'<-> si   # mildly clever optimization
#   string integer_min="${1:-0}" integer_max="${2:-32767}"
#FUXME: Rename "_integer" to "_integer" everywhere.
# ....................{ TESTERS ~ value                    }....................
#FUXME: Bad. Accept string values rather than variable names, as is the standard
#for scalar types. Of course, in that case, we'd might as well just shift all
#"string/integer" functionality here, renaming "string_integer" to simply
#"integer" everywhere. *ACTUALLY, THAT SOUNDS LIKE A BLOODY BRILLIANT IDEA.*
#Make it so, ensign.
#declare_function '
#boolean is_integer_positive(string variable_name)
#
#Return true if the passed variable is an integer > 0.
#'
#function is_integer_positive() {
#    die_unless_arg 'expected one string'
#    string variable_name__iip="${1}"
#    is_variable_integer "${variable_name__iip}" and (( ${(P)variable_name__iip} > 0 ))
#}

#declare_function '
#boolean is_integer_nonnegative(string variable_name)
#
#Return true if the passed variable is an integer >= 0.
#'
#function is_integer_nonnegative() {
#    die_unless_arg 'expected one string'
#    string variable_name__iin="${1}"
#    is_variable_integer "${variable_name_iin}" and (( ${(P)variable_name__iin} >= 0 ))
#}

#FUXME: Excise.
#declare_function '
#void die_unless_integer_positive(
#  string variable_name,
##  string error_message = "\"${variable_name}\" not a positive integer")
#
#Throw an exception unless the passed variable is an integer > 0.
#'
#function die_unless_integer_positive() {
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string variable_name__duip="${1}"
#    is_integer_positive "${variable_name__duip}" or
#        die "${2:-\"${variable_name__duip}\" not a positive integer}"
#}

#FUXME: Excise.
#declare_function '
#void die_unless_integer_nonnegative(
#  string variable_name,
#  string error_message = "\"${variable_name}\" not a nonnegative integer")
#
#Throw an exception unless the passed variable is an integer >= 0.
#'
#function die_unless_integer_nonnegative() {
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string variable_name__duin="${1}"
#    is_integer_nonnegative "${variable_name__duin}" or
#        die "${2:-\"${variable_name__duin}\" not a nonnegative integer}"
#}

#FUXME: This now strikes me as rather wrong. Lists and maps are a reasonable
#rule to nomenclature rules as they can only be accessed by named; integers,
#floats, and other scalar types however are always accessible by their expanded
#values. Consequently, it strikes me as *MUCH* more intuitive to rename
#die_unless_integer() and is_integer() to die_unless_variable_integer() and
#is_variable_integer(). Then excise the is_integer_*() functions; they're
#superfulous, really. Replace them with calls to similar is_integer_*()
#functions -- *WHICH BY THE WAY SHOULD THEMSELVES BE RENAMED BACK TO
#is_integer_*() BUT STILL OPERATE ON EXPANDED STRING SCALARS* and probably
#consequently shifted back into this component.
#
#O.K.; so, we have two nomenclature styles insofar as variables are concerned:
#
#* Scalar-specific functions accepting typeless scalar values.
#* Non-scalar-specific functions accepting typed variable names.
#
#This is perfectly fine and in fact necessary. But don't confuse the two. Stay
#consistent. Let's fix this up, eh? We should document this design decision
#somewhere -- it's rather core.
#FUXME: Actually, consistency *ABSOLUTELY* takes precedence. Ignore all of the
#above.

# (i.e., constrained to natural numbers and
# negatives of such numbers)
