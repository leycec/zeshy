#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *map setters* (i.e., functions setting map variables).
-/-

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_map_to_map(
    string target_map_name,
    string source_map_name1, string source_map_name2, ...)

Set the passed target map to the passed source map (i.e., copy the latter into
the former): e.g.,

.set_map_to_map()
==========================================
[source]
------------------------------------------
>>> map on_loathing on_fear; on_fear=(
...    "We"    "are turning into a nation of whimpering slaves to Fear -- fear"
...    "of"    "war, fear of poverty, fear of random terrorism, fear of getting"
...    "down-" "sized or fired because of the plunging economy, fear of getting"
...    "evicted" "for bad debts, or suddenly getting locked up in a military"
...    "detention" "camp on vague charges of being a Terrorist sympathizer..." )
>>> set_map_to_map  on_loathing on_fear
>>> print_string "${on_loathing[We]}"
are turning into a nation of whimpering slaves to Fear -- fear
------------------------------------------
/---
function set_map_to_map() {
    # Validate sanity.
    die_unless_args_2 'Expected one target map name and one source map name.'
    string map_name_target__smtm="${1}" map_name_source__smtm="${2}"
    die_unless_maps "${map_name_target__smtm}" "${map_name_source__smtm}"

    # Copy such source map into such target map.
    eval ${map_name_target__smtm}'=( "${(kv@P)map_name_source__smtm}" )'
}

declare_function_with_stdin <<'/---'
void set_map_to_map_union(
    string target_map_name,
    string source_map_name1, string source_map_name2, ...)

Set the passed target map to the union of the passed source maps in the passed
order. Specifically, clear such target map and for each source map in the passed
order, copy all key-value pairs of such source map into such target map. Hence,
key-value pairs of source maps passed later take higher precedence than those of
source maps passed earlier. At least two source maps must be passed: e.g.,

.set_map_to_map_union()
==========================================
[source]
------------------------------------------
>>> map for_unity on_wants on_needs
>>> on_wants=(
...     "We"   "have developed speed, but"
...     "we"   "have shut ourselves in. Machinery that gives abundance has"
...     "left" "us in want. Our knowledge has made us cynical. Our cleverness,"
...     "hard" "and unkind. We think too much and feel too little." )
>>> on_needs=(
...     "More" "than machinery"
...     "we"   "need humanity. More than cleverness we need kindness"
...     "and"  "gentleness. Without these qualities, life will be violent and"
...     "all"  "will be lost." )
>>> set_map_to_map_union for_unity on_wants on_needs
>>> print_map for_unity
We: have developed speed, but
we: need humanity. More than cleverness we need kindness
left: us in want. Our knowledge has made us cynical. Our cleverness,
hard: and unkind. We think too much and feel too little.
More: than machinery
and: gentleness. Without these qualities, life will be violent and
all: will be lost.
------------------------------------------
/---
function set_map_to_map_union() {
    # Validate sanity.
    die_unless_args_3_or_more\
        'Expected one target map name and two or more source map names.'
    string map_name_target__smtmu="${1}" map_name_source__smtmu
    die_unless_map "${map_name_target__smtmu}"
    shift_arg

    # Union such source maps into such target map after clearing the latter.
    eval ${map_name_target__smtmu}'=()
    for map_name_source__smtmu ("${@}") {
        die_unless_map "${map_name_source__smtmu}"
        '${map_name_target__smtmu}'+=( "${(kv@P)map_name_source__smtmu}" )
    }'
}

# ....................{ SETTERS ~ list                     }....................
declare_function_with_stdin <<'/---'
void set_map_to_list_set_inverted(string map_name, string list_set_name)

Set the passed map to the inversion of the passed list set, such that the keys
of such map are the elements of such list set and the values of such map are the
corresponding 1-based indices of such elements: e.g.,

.set_map_to_list_set_inverted()
==========================================
[source]
------------------------------------------
>>> map on_the_way_of_life
>>> list_set on_the_good_earth; on_the_good_earth=(
...     "We all want to help one another. Human beings are like that. We want"
...     "to live by each other's happiness — not by each other's misery. We"
...     "don't want to hate and despise one another. In this world there is"
...     "room for everyone. And the good earth is rich and can provide for"
...     "everyone. The way of life can be free and "beautiful, but we have lost"
...     "the way." )
>>> set_map_to_list_set_inverted on_the_way_of_life on_the_good_earth
>>> print_map on_the_way_of_life
We all want to help one another. Human beings are like that. We want: 1
to live by each other's happiness — not by each other's misery. We: 2
don't want to hate and despise one another. In this world there is: 3
room for everyone. And the good earth is rich and can provide for: 4
everyone. The way of life can be free and "beautiful, but we have lost: 5
the way.: 6
>>> print_string "${on_the_way_of_life[the way.]}"
6
------------------------------------------
/---
function set_map_to_list_set_inverted() {
    #FIXME: We should permit non-list sets as well, right?
    # Validate sanity.
    die_unless_args_2 'Expected one map name and one list name.'
    string map_name__smtli="${1}" list_set_name__smtli="${2}"
    integer list_set_size__smtli list_set_index__smtli
    die_unless_map "${map_name__smtli}"
    die_unless_list_set "${list_set_name__smtli}"

    # Get the size of such list set.
    list_set_size__smtli="$(get_list_size "${list_set_name__smtli}")"

    # Set such map to such list set inverted.
    eval '
    for ((  list_set_index__smtli = 1;
            list_set_index__smtli <= list_set_size__smtli;
            list_set_index__smtli++)) {
        '${map_name__smtli}'[${'${list_set_name__smtli}'[${list_set_index__smtli}]}]=${list_set_index__smtli}
    }'
}

# ....................{ SETTERS ~ key                      }....................
declare_function_with_stdin <<'/---'
void set_list_to_map_keys(string list_name, string map_name)

Set the passed list to all keys (in arbitrary order) of the passed map: e.g.,

.set_list_to_map_keys()
==========================================
[source]
------------------------------------------
>>> map on_diminishing_humanity; on_diminishing_humanity=(
...    "And"      "what hurts is the steadily diminishing humanity of those"
...    "fighting" "to hold jobs they don't want but fear the alternative worse."
...    "People"   "simply empty out. They are bodies with fearful and obedient"
...    "minds."   "The color leaves the eye. The voice becomes ugly. And the"
...    "body."    "The hair. The fingernails. The shoes. Everything does."
...    "As"       "a young man I could not believe that people could give their"
...    "lives"    "over to those conditions. As an old man, I still can't"
...    "believe"  "it. What do they do it for? Sex? TV? An automobile on"
...    "monthly"  "payments? Or children? Children who are just going to do the"
...    "same"     "things that they did?" )
>>> list on_obedient_minds
>>> set_list_to_map_keys on_obedient_minds on_diminishing_humanity
>>> output_string "${on_obedient_minds[@]}"
And fighting People minds. body. As lives believe monthly same
------------------------------------------
/---
function set_list_to_map_keys() {
    #FIXME: We should permit list sets as well, right?
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one map name.'
    string list_name__sltmk="${1}" map_name__sltmk="${2}" 
    die_unless_map "${map_name__sltmk}"
    die_unless_list "${list_name__sltmk}"

    # Set such list to such map keys.
    eval ${list_name__sltmk}='( ${(k@)'${map_name__sltmk}'} )'
}

# --------------------( WASTELANDS                         )--------------------
#void set_map_to_map(
#    string target_map_name,
#    string source_map_name1, string source_map_name2, ...)
#
#Set the passed target map to the merger of the passed source maps, in the passed
#order. Specifically, clear such target map and for each source map in the passed
#order, copy all key-value pairs of such source map into such target map. Hence,
#key-value pairs of source maps passed later take higher precedence than those of
#source maps passed earlier. If but one source map is passed, this reduces to
#simply setting such target map to such source map: e.g.,
#
#   die_unless_args_2_or_more\
#       'expected one target map name and at least one source map name'
#   string map_name_target__smtm="${1}" map_name_source__smtm
#   die_unless_map "${map_name_target__smtm}"
#   shift_arg

#   # If only one source map was passed, copy such map into such target map.
#   # Since the for loop below would also suffice to copy such map, this is
#   # merely a minor optimization.
#   if { is_arg } {
#       map_name_source__smtm="${1}"
#       die_unless_map "${map_name_source__smtm}"
#       eval "${map_name_target__smtm}=( \"\${(kv@P)map_name_source__smtm}\" )"
#   # Else, two or more source maps were passed and hence must be iteratively
#   # merged into such target map.
#   } else {
#       eval "${map_name_target__smtm}=()
#       for map_name_source__smtm (\"\${@}\") {
#           die_unless_map \"\${map_name_source__smtm}\"
#           ${map_name_target__smtm}+=( \"\${(kv@P)map_name_source__smtm}\" )
#       }"
#   }
