#!/usr/bin/env zsh
# ====================[ type                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle variable types.

# ....................{ EXCEPTIONS                         }....................
declare_function '
void die_unless_variable_float(
  string variable_name,
  string error_message = "\"${variable_name}\" not a float")

Throw an exception with the passed message unless the passed variable is a
float.
'
function die_unless_variable_float() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duvf="${1}"
    is_variable_float "${variable_name__duvf}" or
        die "${2:-\"${variable_name__duvf}\" not an float}"
}

declare_function '
void die_unless_variable_integer(
  string variable_name,
  string error_message = "\"${variable_name}\" not an integer")

Throw an exception with the passed message unless the passed variable is an
integer.
'
function die_unless_variable_integer() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duvi="${1}"
    is_variable_integer "${variable_name__duvi}" or
        die "${2:-\"${variable_name__duvi}\" not an integer}"
}

declare_function '
void die_unless_variable_string(
  string variable_name,
  string error_message = "\"${variable_name}\" not a string")

Throw an exception with the passed message unless the passed variable is a
string.
'
function die_unless_variable_string() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duvs="${1}"
    is_variable_string "${variable_name__duvs}" or
        die "${2:-\"${variable_name__duvs}\" not a string}"
}

declare_function '
void die_unless_variable_list [or] die_unless_list(
  string variable_name,
  string error_message = "\"${variable_name}\" not a list")

Throw an exception with the passed message unless the passed variable is a list.
'
function die_unless_variable_list die_unless_list() {
    # Validate passed arguments.
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duvl="${1}"

    #FIXME: Quite helpful; replicate above and elsewhere. Actually, since such
    #code would more-or-less be exact duplicates, extricate into a helper function.

    # If such variable is not a list...
    is_list "${variable_name__duvl}" or {
        # If such variable exists, append such variable's current definition to
        # the exception's message.
        string message="${2:-\"${variable_name__duvl}\" not a list}"
        is_variable "${variable_name__duvl}" and {
            message+=" but defined as:${ZESHY_ASCII_NEWLINE}$(print_variable "${variable_name__duvl}")"
#           message+="${ZESHY_ASCII_NEWLINE}original type: $(get_variable_type "${variable_name__duvl}")"
        }

        # Throw such exception.
        die "${message}"
    }
}

declare_function '
void die_unless_variable_map [or] die_unless_map(
  string variable_name,
  string error_message = "\"${variable_name}\" not a map")

Throw an exception  with the passed messageunless the passed variable is a map.
'
function die_unless_variable_map die_unless_map() {
    die_unless_args_1_to_2\
        'expected one variable name and optional error message'
    string variable_name__duvm="${1}"
    is_map "${variable_name__duvm}" or
        die "${2:-\"${variable_name__duvm}\" not a map}"
}

# ....................{ TESTERS                            }....................
declare_function '
boolean is_variable_type_match(string variable_name, string glob)

Return true if the type of the passed variable matches the passed glob: e.g.,

    >>> map_global_export killstardo=( abominate ghostqueen )
    >>> is_variable_type_match killstardo "map*" and print "MURDERFACE!!!!"
    MURDERFACE!!!!
'
function is_variable_type_match() {
    # Validate passed arguments.
    die_unless_args_2 'expected one variable name and one glob'
    string variable_name__ivtm="${1}" glob__ivtm="${2}"

    # If such variable exists, match its type against the passed glob.
    is_variable "${variable_name__ivtm}" and is_string_glob_matches\
        "$(get_variable_type "${variable_name__ivtm}")"\
        "${glob__ivtm}"
}

# ....................{ TESTERS ~ type                     }....................
declare_function '
boolean is_variable_float(string variable_name)

Return true if the passed variable is a float.
'
function is_variable_float() {
    die_unless_arg 'expected one variable name'
    is_variable_type_match "${1}" 'float*'
}

declare_function '
boolean is_variable_integer(string variable_name)

Return true if the passed variable is an integer.
'
function is_variable_integer() {
    die_unless_arg 'expected one variable name'
    is_variable_type_match "${1}" 'integer*'
}

declare_function '
boolean is_variable_string(string variable_name)

Return true if the passed variable is a string.
'
function is_variable_string() {
    die_unless_arg 'expected one variable name'
    is_variable_type_match "${1}" 'scalar*'
}

declare_function '
boolean is_variable_list [or] is_list(string variable_name)

Return true if the passed variable is a list (i.e., array).
'
function is_variable_list is_list() {
    # Global lists have type "list", local lists "list-local", and zsh-specific
    # global lists (e.g., "${path}") "array" or "array-special".
    die_unless_arg 'expected one variable name'
    is_variable_type_match "${1}" '(list|array)*'
}

declare_function '
boolean is_variable_map [or] is_map(string variable_name)

Return true if the passed variable is a map (i.e., associative array).
'
function is_variable_map is_map() {
    # Global maps have type "association" and local maps "association-local".
    die_unless_arg 'expected one variable name'
    is_variable_type_match "${1}" 'association*'
}

# ....................{ GETTERS                            }....................
declare_function '
string get_variable_type(string variable_name)

Get the type of the passed variable: e.g.,

    >>> list oh_eloquent; oh_eloquent=( "just and" mightie "Death!" )
    >>> get_variable_type oh_eloquent
    array-global
'
function get_variable_type() {
    # Validate passed arguments.
    die_unless_arg 'expected one variable name'
    string variable_name__gvt="${1}"
    die_unless_variable "${variable_name__gvt}"

    # Get such type. Dismantled, this is:
    #
    # * "P", expanding to the variable with the passed name.
    # * "t", expanding such variable's type.
    print_string "${(tP)variable_name__gvt}"
}

# --------------------( WASTELANDS                         )--------------------
# is_variable_type_match "${variable_name__duvl}" 'array-local' and message+='hmm!!!!!!!'
#   print -r -- "${(tP)variable_name__gvt}"
#       "${glob__ivtm}" or {
#       print_string "variable type not matching \"${glob__ivtm}\": $(get_variable_type "${variable_name__ivtm}")"
#   }
#FUXME: Add support for function name synonyms to declare_function().
#void die_unless_variable_list [or] die_unless_list(
#void die_unless_variable_list [or] die_unless_list(
#void die_unless_variable_list <or> die_unless_list(
#void die_unless_variable_list OR die_unless_list(
#void die_unless_variable_list --or-- die_unless_list(
#void die_unless_variable_list --OR-- die_unless_list(
#void die_unless_variable_list|die_unless_list(

#string die_unless_list_documentation='  string variable_name,
#  string error_message = "\"${variable_name}\" not a list")
#
#Throw an exception unless the passed variable is a list.
#'
#
#declare_function "
#void die_unless_list(
#"
