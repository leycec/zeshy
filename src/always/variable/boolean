#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *boolean variables* (i.e., integer variables constrained to values
signifying true and false).
/---

#FIXME: Theoretically, integers should provide a much more efficient type for
#housing booleans than strings. After all, there's no need for string handling,
#which, to support arbitrarily long strings containing null characters, do not
#cleanly map to C strings and hence require more under-the-scenes handling than
#simple integers (which probably map fairly reasonably to underlying C types).
#In short, testing "(( boolean_variable ))" for the truth of a boolean should be
#significantly faster (aggregated over all such tests) than testing
#"[[ -n ${boolean_variable} ))".

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_boolean(
    string value,
    string error_message = "string \"${value}\" not boolean")

Throw an exception with the passed message unless the passed string is boolean.
See is_boolean() for further details.
/---
function die_unless_boolean() {
    die_unless_args_1_to_2\
        'expected one string and optional error message'
    string value="${1}"
    is_boolean "${value}" or die "${2:-string \"${value}\" not boolean}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_boolean(string value)

Return success if the passed string is boolean.
/---
function is_boolean() {
    # Validate passed arguments.
    die_unless_arg 'expected one string'
    string value="${1}"

    # Test such string.
    (( value == ZESHY_BOOLEAN_TRUE ||\
       value == ZESHY_BOOLEAN_FALSE ))
}

# ....................{ TESTERS ~ value                    }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_boolean_true(boolean value)

Return success if the passed boolean is true: e.g.,

.is_boolean_true()
==========================================
[source]
------------------------------------------
>>> is_boolean_true ${ZESHY_BOOLEAN_FALSE} or print_string "conium"
conium
------------------------------------------
==========================================
/---
function is_boolean_true() {
    die_unless_arg 'expected one boolean'
    (( ${1} == ZESHY_BOOLEAN_TRUE ))
}

declare_function_with_stdin <<'/---'
[status: boolean] is_boolean_false(boolean value)

Return success if the passed boolean is false: e.g.,

.is_boolean_false()
==========================================
[source]
------------------------------------------
>>> is_boolean_false ${ZESHY_BOOLEAN_TRUE} or print_string "black henbane"
black henbane
------------------------------------------
==========================================
/---
function is_boolean_false() {
    die_unless_arg 'expected one boolean'
    (( ${1} != ZESHY_BOOLEAN_TRUE ))
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void enable_boolean(string boolean_name)

Enable the passed boolean variable (i.e., set such boolean's value to true).
/---
function enable_boolean() {
    die_unless_arg 'expected one boolean name'
    set_integer_to_integer "${1}" "${ZESHY_BOOLEAN_TRUE}"
}

declare_function_with_stdin <<'/---'
void disable_boolean(string boolean_name)

Disable the passed boolean variable (i.e., set such boolean's value to false).
/---
function disable_boolean() {
    die_unless_arg 'expected one boolean name'
    set_integer_to_integer "${1}" "${ZESHY_BOOLEAN_FALSE}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Document that fact that all string variables satisfy such requirements.
#I believe we've documented this adequately (perhaps even brilliantly!) under
#"00-setup/00-alias", so pilfer that for helpful discussion.
#FUXME: This is completely wrong! Test whether the passed string is either the
#empty string or 1.

    # Since booleans are currently indistinguishable from integers under zsh,
    # defer to is_integer().
    # Validate passed arguments.
#   die_unless_arg 'expected one boolean name'
#   string boolean_name__eb="${1}"
#   die_unless_variable_boolean "${boolean_name__eb}"

    # Enable such boolean.
#   set_integer_to_integer "${boolean_name__eb}" "${ZESHY_BOOLEAN_TRUE}"

#   is_string_nonempty "${1}"
#FUXME: Bad. Accept string values rather than variable names, as is the
#standard for scalar types.
#FUXME: Rename to is_string_boolean().
#FUXME: Rename to die_unless_string_boolean(). (There might be a real "boolean"
#type, someday.)
