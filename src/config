#!/usr/bin/env zsh
# ====================[ config                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Source the current user's Zeshy configuration files after defining aliases
# required by such files. For efficiency, defer defining all other aliases to
# Zeshy startup in the proper Zeshy codebase and hence compilation into the
# Zeshy digest file. Redefine aliases defined below with such other aliases,
# guaranteeing that:
#
# * Zeshy records all aliases defined below in global list ${ZESHY_ALIAS_NAMES},
#   to be subsequently undefined if recompiling Zeshy in the current shell or a
#   child of the current shell. (See "compile" for gruesome details.)
# * Zeshy retrieves documentation for all aliases defined below in the same
#   manner as such other aliases. (See "help" for miserable details.)

# ....................{ EXPORTS                            }....................
# Zeshy configuration files declare only global exports. While such files can
# declare locals and non-exported globals with traditional Zsh primitives (e.g.,
# "typedef -Fr"), avoid promoting such bad behavior by aliasing human-readable
# names to such primitives. Delay defining all remaining Zeshy aliases to the
# main Zeshy codebase.

# ....................{ EXPORTS ~ type                     }....................
alias string_global_export='export'
alias boolean_global_export='export'
alias integer_global_export='export -i'
alias float_global_export='export -F'
alias list_global_export='export -a'
alias list_set_global_export='export -Ua'

# "export -A" oddly fails with error; "export -a" succeeds, however. (No idea!?)
alias map_global_export='typeset -Agx'

# ....................{ EXPORTS ~ value                    }....................
# Mimic genuine boolean values with simple string globals.
export ZESHY_BOOLEAN_TRUE=1 ZESHY_BOOLEAN_FALSE=

# ....................{ SOURCERS                           }....................
set_function_documentation source_zeshy_configuration '
void source_zeshy_configuration(void)

Source all configuration files in Zeshy''s user configuration directory specific
to the current shell, creating such directory if needed. Such files include:

* All plain files in such directory.
* If the current shell is interactive, all plain files in subdirectory
  "if_shell_interactive" of such directory.
'
function source_zeshy_configuration() {
    # Validate sanity. If ignoring Zeshy's user directory or Zeshy's user
    # configuration directory does not exist, return silently.
    (( # == 0 )) || die 'expected no arguments'
    [[ -n "${ZESHY_DOT_DIR}" || ! -d "${ZESHY_DOT_CONFIG_DIR}" ]] || return 0

    # List of all scripts in such directory applicable to the current shell,
    # Dismantled, this is:
    #
    # * "*(-.)", matching all plain files after resolving symbolic links.
    local -a config_filenames
    config_filenames=(
        "${ZESHY_DOT_CONFIG_DIR}/"*(-.) )
    [[ -o interactive ]] && config_filenames+=(
        "${ZESHY_DOT_CONFIG_DIR}/if_shell_interactive/"*(-.) )

    # If at least one such script exists, source such scripts; else, avoid
    # calling source_zeshy_script() with no arguments throwing an exception.
    (( #config_filenames )) && source_zeshy_script "${config_filenames[@]}"
}

# ....................{ MAIN                               }....................
source_zeshy_configuration

# --------------------( WASTELANDS                         )--------------------
    # Ensure the current user's Zeshy configuration directory and all non-extant
    # parents of such directory exist.
#   command mkdir -p -- "${ZESHY_DOT_CONFIG_DIR}"

    # specifically including:
    #
    # * All plain files in such directory.
    # * If the current shell is interactive, all plain files in subdirectory
    #   "if_shell_interactive" of such directory.
    #
    # If the current shell is interactive and such directory contains a
    # subdirectory "if_shell_interactive" containing at least one Zeshy script,
    # source such scripts as above.
#   config_filenames=( "${ZESHY_DOT_CONFIG_DIR}/if_shell_interactive/"*(-.) )

# Booleans are false if set to the empty string and otherwise true.
#
# For simplicity, disable or enable booleans by commenting or uncommenting the
# lines on which they appear (e.g., prefixing such lines with "#" or deleting
# such prefix).

    # subsequent logic
    # sources the default versions of such files.

#FUXME: All of the magic constants defined in "global" should be declared
#frozen, perhaps suggesting new "string_global_constant",
#"boolean_global_constant", and so on types in "alias".

#FUXME: I'm not terribly fond of enabling booleans by setting them to 1. Avoid
#such magic by defining the following magic in "global":
#
#string_global_constant ZESHY_BOOLEAN_TRUE=1 ZESHY_BOOLEAN_FALSE=''
#
#Then use below: e.g.,
#ZESHY_IS_DEBUGGING=${ZESHY_BOOLEAN_TRUE}

# void string_global_export(string variable_name)
#
# Globally declare a string exported to the calling shell.
#alias string_global_export='export'

# void boolean_global_export(string variable_name)
#
# Globally declare a boolean exported to the calling shell.
#alias boolean_global_export='export'

# void integer_global_export(string variable_name)
#
# Globally declare an integer exported to the calling shell.
#alias integer_global_export='export -i'

# void float_global_export(string variable_name)
#
# Globally declare a float exported to the calling shell.
#alias float_global_export='export -F'

# void list_global_export(list variable_name)
#
# Globally declare a list exported to the calling shell.
#alias list_global_export='export -a'

# void map_global_export(map variable_name)
#
# Globally declare a map exported to the calling shell.
#alias map_global_export='typeset -Agx'   # "export -A" oddly fails with error;
                                          # "export -a" succeeds, however (!?!)
