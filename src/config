#!/usr/bin/env zsh
# ====================[ config                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Source the current user's Zeshy configuration files after defining aliases
# required by such files. For efficiency, defer defining all other aliases to
# Zeshy startup in the proper Zeshy codebase and hence compilation into the
# Zeshy digest file. Redefine aliases defined below with such other aliases,
# guaranteeing that:
#
# * Zeshy records all aliases defined below in global list ${ZESHY_ALIAS_NAMES},
#   to be subsequently undefined if recompiling Zeshy in the current shell or a
#   child of the current shell. (See "compile" for gruesome details.)
# * Zeshy retrieves documentation for all aliases defined below in the same
#   manner as such other aliases. (See "help" for miserable details.)

# ....................{ EXPORTS                            }....................
# Zeshy configuration files declare only global exports. While such files can
# declare locals and non-exported globals with traditional Zsh primitives (e.g.,
# "typedef -Fr"), avoid promoting such bad behavior by delaying definition of
# additional Zeshy aliases.

alias string_global_export='export'
alias boolean_global_export='export'
alias integer_global_export='export -i'
alias float_global_export='export -F'
alias list_global_export='export -a'

# "export -A" oddly fails with error; "export -a" succeeds, however. (No idea!?)
alias map_global_export='typeset -Agx'

# ....................{ SOURCERS                           }....................
# void source_zeshy_configuration(void)
#
# Source all configuration files in the current user's Zeshy configuration
# directory, creating such directory if needed.
function source_zeshy_configuration() {
    # Make the current user's Zeshy configuration directory and all non-extant
    # parents of such directory.
    mkdir -p -- "${ZESHY_USER_CONFIG_DIR}"

    # If the current user's Zeshy configuration dir contains at least one file,
    # source such file as a Zeshy script.
    local -a user_config_filenames
    user_config_filenames=( "${ZESHY_USER_CONFIG_DIR}/"* )
    (( #user_config_filenames )) &&
        source_zeshy_script "${user_config_filenames[@]}"

    #FIXME: This could just as well be shifted into a new component of
    #"always/00-startup". There's really no profit in doing so here, is there?
    # Make all other requisite paths for the current user. Do so *AFTER*
    # sourcing the configuration files setting such paths.
    mkdir -p -- "${ZESHY_USER_PID_DIR}"
}

# ....................{ MAIN                               }....................
source_zeshy_configuration

# --------------------( WASTELANDS                         )--------------------
# void string_global_export(string variable_name)
#
# Globally declare a string exported to the calling shell.
#alias string_global_export='export'

# void boolean_global_export(string variable_name)
#
# Globally declare a boolean exported to the calling shell.
#alias boolean_global_export='export'

# void integer_global_export(string variable_name)
#
# Globally declare an integer exported to the calling shell.
#alias integer_global_export='export -i'

# void float_global_export(string variable_name)
#
# Globally declare a float exported to the calling shell.
#alias float_global_export='export -F'

# void list_global_export(list variable_name)
#
# Globally declare a list exported to the calling shell.
#alias list_global_export='export -a'

# void map_global_export(map variable_name)
#
# Globally declare a map exported to the calling shell.
#alias map_global_export='typeset -Agx'   # "export -A" oddly fails with error;
                                          # "export -a" succeeds, however (!?!)
