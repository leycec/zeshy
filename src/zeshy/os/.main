#!/usr/bin/env zsh
# ====================[ os                                 ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy OS, implementing generic operating system-handling functionality.

# ....................{ DEPENDENCIES                       }....................
zimport zeshy/file/file
zimport zeshy/type/string

# void _zeshy_os(void)
#
# Import Zeshy components specific to the current OS.
_zeshy_os() {
    string current_os_dir="$(dirname "${zeshy_script_path}")/$(get_os_name)"
    is_dir "${current_os_dir}" and zimport "${current_os_dir}"
}

# ....................{ OS                                 }....................
#FIXME: Hmm; I could quite see the caller wanting the original name, as well.
# void get_os_name(void)
#
# Get the name of the current operating system as lowercase:
#
#     >>> get_os_name
#     freebsd   # under FreeBSD systems
#     gnu-linux # under GNU/Linux systems
get_os_name() {
    # "uname" reports Linux as "GNU/Linux", so replace backslashes with dashes.
    string os_name="$(to_lowercase "$(uname --operating-system)")"
    os_name="${os_name//\//-}"
    print "${os_name}"
}

# ....................{ OS ~ undefined                     }....................
# The following functions are OS-specific, and thus defined for each OS-specific
# Zeshy component, elsewhere. By default, each dies with error.

# char *get_current_process_basename(void)
#
# Get the basename of the binary corresponding to the current process.
get_current_process_basename() { die "unimplemented on $(get_os_name)" }

# char *get_current_process_command_line(void)
#
# Get the command line under which the current process is executing. This is a
# single string having these parts:
#
# * Absolute OR relative path to the executable file from which the process was
#   executed. Note that, in the latter case, there is no reliable mechanism for
#   converting the relative path into an absolute path.
#
# Due to the above unreliabilities, this string is best used for displaying non-
# critical log and user interface labels rather than critical functionality.
get_current_process_command_line() { die "unimplemented on $(get_os_name)" }
 
# ....................{ MEMORY USAGE                       }....................
# int get_memory_total(void)
#
# Get the amount of total available memory on this machine in bytes. As
# expected, the following invariant holds:
#
#   >>> [[ $(get_memory_total) -eq
#   ...    (( $(get_memory_free) + $(get_memory_used) )) ]] && echo 'Equal!"
#   Equal!
get_memory_total() {
    # Return the second word of the second line.
    die_unless_no_arguments
    print ${"${"$(free -bt)"[(f)2]}"[(w)2]}
}

# int get_memory_free(void)
#
# Get the amount of free available memory on this machine in bytes.
get_memory_free() {
    die_unless_no_arguments
    print ${"${"$(free -bt)"[(f)2]}"[(w)4]}
}

# int get_memory_used(void)
#
# Get the amount of used available memory on this machine in bytes.
get_memory_used() {
    die_unless_no_arguments
    print ${"${"$(free -bt)"[(f)2]}"[(w)3]}
}

# void print_memory_use_overview(void)
#
# Print an overview of current memory use, including free and used RAM in MB. 
print_memory_use_overview() {
    die_unless_no_arguments
    utter 'showing memory use in megabytes...'
    try free -mt
}

# ....................{ MAIN                               }....................
# Call and then immediately unset (i.e., delete) _zeshy_os().
_zeshy_os
unfunction _zeshy_os

#FIXME: Obsolete.
    #FIXME: Alternate implementations; keep around!
    #echo $(match_multiline '^Mem:\s+(\d+)' "$(free -bt)")
    #$(cat '/proc/meminfo' | awk -F '[ ]+' '/^MemTotal/ { print $2 }')
    
# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
