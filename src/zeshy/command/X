#!/usr/bin/env zsh
# ====================[ X                                  ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy X. This Zeshy component handles X11 and all forks thereof:
#       X.org, we're winking at you.

# ....................{ INPUT ~ keyboard                   }....................
# char *x_keyboard_info(void)
#
# Print X11 keyboard information.
x_keyboard_info() {
    [[ ${#} -eq 0 ]] || die 'expected no arguments'

    # Print all "setxkbmap" information, as even the most verbose of the
    # information output by this utility is informatively brief.
    utter 'displaying "setxkbmap" information...'
    try setxkbmap -print -verbose 10

    # Print all display-specific "xset" information.
    print
    utter 'displaying "xset" information...'
    try "xset -q | grep '^Keyboard Control:$' --after-context=13" 
}

# ....................{ VIDEO ~ screen                     }....................
# char *x_screen_info(void)
#
# Print X11 display information, including the:
#
# * Current resolution.
# * Dots per inch (DPI).
x_screen_info() {
    [[ ${#} -eq 0 ]] || die 'expected no arguments'

    # Print a subset of all "xdpyinfo" information, as most of the information
    # output by this utility is considerably more verbose than usually desired.
    utter 'displaying "xdpyinfo" information...'

    # Copy the output of "xdpyinfo" into a local variable.
    local display_info="$(try xdpyinfo)"

    # Grep this variable for relevant lines.
    match_first_line ' *dimensions: ' "${display_info}"
    match_first_line ' *resolution: ' "${display_info}"
    match_first_line ' *depth of root window: ' "${display_info}"

    # Print all "xrandr" information, as most of the information output by this
    # utility is informatively brief enough to be of general use. 
    print
    utter 'displaying "xrandr" information...'
    try xrandr

    # Print all display-specific "xset" information.
    print
    utter 'displaying "xset" information...'
    _x_dpms_info
    try "xset -q | grep '^Colors:$' --after-context=1" 
}

# ....................{ VIDEO ~ screen saver               }....................
# char *x_dpms_info(void)
#
# Print X11 Display Power Management Signaling (DPMS) and screen saver
# information.
x_dpms_info() {
    [[ ${#} -eq 0 ]] || die 'expected no arguments'

    utter 'displaying X.org DPMS settings...'
    _x_dpms_info
}

_x_dpms_info() {
    local xset_output="$(try xset -q)"
    try "echo '${xset_output}' | grep '^Screen Saver:$' --after-context=2"
    try "echo '${xset_output}' | grep '^DPMS (Energy Star):$' --after-context=2"
}

# void x_dpms_disable(void)
#
# Disable screen blanking (i.e., DPMS-managed monitor shutdown on inactivity).
# This is particularly helpful while enjoying media but should be manually re-
# enabled when done.
x_dpms_disable() {
    [[ ${#} -eq 0 ]] || die 'expected no arguments'
    utter 'disabling X.org DPMS...'
    try xset s off
    try xset -dpms
    x_dpms_info
}

# void x_dpms_enable(void)
#
# Enable screen blanking (i.e., DPMS-managed monitor shutdown on inactivity).
x_dpms_enable() {
    [[ ${#} -eq 0 ]] || die 'expected no arguments'
    utter 'enabling X.org screen blanking...'
    try xset s on
    try xset +dpms
    x_dpms_info
}

# ....................{ VIDEO ~ fonts                      }....................
# Aliases.
alias xf=x_list_cached_fonts
alias xfc=x_cache_font_dir

# char *x_list_cached_fonts(void)
#
# List all currently cached fonts in the system-wide X11 font cache.
x_list_cached_fonts() {
    [[ ${#} -le 1 ]] || die 'expected exactly one font directory'
    try zpage fc-cat -rv
}
 
# void x_font_dir_cache(char *dirname = PWD)
#
# Permanently add all fonts in the passed directory to the system-wide X11 font
# cache. This addition makes these fonts accessible to all subsequent "X11-
# aware" applications. This directory defaults to the current working directory,
# if not passed.
x_cache_font_dir() {
    [[ ${#} -le 1 ]] || die 'expected exactly one font directory'

    # If non-empty, this function pushed the passed directory onto the stack and
    # must thus pop it from the stack prior to returning
    local is_pushing_directory

    # Font directory to be cached.
    local font_dir
    if [[ -n "${1}" ]]; then
        font_dir="${1}"
        is_pushing_directory=1
        pushd "${font_dir}"
    else
        font_dir="${PWD}"
    fi
    font_dir="$(canonicalize_path "${font_dir}")"

    utter "preparing \"${font_dir}\" for caching..."
    try mkfontscale
    try mkfontdir

    utter "caching \"${font_dir}\"..."
    try xset fp+ "${font_dir}"

    utter "updating X.org font list..."
    try xset fp rehash

    # "fc-cache" is a dynamic alternative to the above. Older systems have no
    # "fc-cache" installed, however. For safety, do both.
    if is_installed fc-cache; then
        utter 'updating fontcache...'
        try_as_superuser fc-cache -v
    fi

    [[ -z "${is_pushing_directory}" ]] || popd
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2011 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
