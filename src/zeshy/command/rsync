#!/usr/bin/env zsh
# ====================[ rsync                              ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy rsync. This Zeshy component handles "rsync" functionality.

# ....................{ IMPORTS                            }....................
zimport zeshy/string

# ....................{ ARRAYS                             }....................
# Command-line options to be passed to the "rsync" binary. See the <OPTIONS>
# section of "man rsync".
#
# The defaults, here, are probably fine. If you don't want local changes to be
# auto-overwritten by remote changes (...you probably do, but who are we to
# carp and complain), remove the '--delete' and '--delete-after' options.
ZESHY_RSYNC_OPTIONS=(
    --compress
    --cvs-exclude
    --delete --delete-after
    --devices --specials
    --human-readable
    --links --keep-dirlinks --safe-links
    --recursive --sparse
    --super
    --timeout=32
    --times --no-perms --no-owner --no-group
)

# Command-line options to be passed to the "rsync" binary when run from a
# cronjob, in addition to those already specified in the
# "${ZESHY_RSYNC_OPTIONS}" array above. These options typically include
# precautions against potentially catastrophic, large-scale deletions.
#
# The defaults, here, are probably fine.
ZESHY_RSYNC_OPTIONS_IF_CRON=(
    --max-delete=128
    --quiet
)

# Command-line options to be passed to the "rsync" binary when *NOT* run from a
# cronjob, in addition to those already specified in the
# "${ZESHY_RSYNC_OPTIONS}" array above.
ZESHY_RSYNC_OPTIONS_IF_NOT_CRON=(
    --progress --verbose --verbose
)

# ....................{ FUNCTIONS                          }....................
# void zrsync(char *source_uri, char *target_uri,
#     char *option1, char *option2, ...)
#
# Synchronize the passed source URI to the passed target URI in a cronjob-aware
# manner, via the ZESHY_RSYNC_OPTIONS* family of default options and the passed
# custom options. If not running as a cronjob, this function interactively
# requests the user confirm this synchronization. (This is a precaution against
# potentially catastrophic, large-scale deletion.)
zrsync() {
    [[ ${#} -ge 2 ]] ||
        die 'expected at least one source URI and one target URI'

    # Parse passed URIs.
    local source_uri="${1}"
    shift
    local target_uri="${1}"
    shift

    # Ensure the source URI ends in a backslash. If it doesn't, "rsync" behaves
    # oddly. See the <USAGE> section of "man rsync".
    source_uri=$(suffix_if_not_already "${source_uri}" '/')

    # Array of all options constructed from default and passed options.
    local -a rsync_options
    rsync_options=( "${ZESHY_RSYNC_OPTIONS[@]}" "${@}" )

    if is_cronjob
    then rsync_options+=( "${ZESHY_RSYNC_OPTIONS_IF_CRON[@]}" )
    else rsync_options+=( "${ZESHY_RSYNC_OPTIONS_IF_NOT_CRON[@]}" )
    fi
   
    # Array of the "rsync" command to be run and all options to be passed.
    local -a rsync
    rsync=( rsync "${rsync_options[@]}" )

    #FIXME: Generalize this for use elsewhere.
    # If "nice" and/or "ionice" are installed, run "rsync" under whichever are
    # available to prevent CPU and hard-drive starvation.
    is_installed nice   && rsync=(   nice -n19    "${rsync[@]}" )
    is_installed ionice && rsync=( ionice -c2 -n7 "${rsync[@]}" )

    # Synchronize.
    if is_cronjob; then
        utter "${source_uri} -> ${target_uri}"
        try "${rsync[@]}" "${source_uri}" "${target_uri}"
    else
        utter "${source_uri} -> ${target_uri}  { dry run }"
        try "${rsync[@]}" --dry-run "${source_uri}" "${target_uri}"
    
        print
        utter "are you sure you want to perform this rsync? [yes/no] "
        local is_sure
        read  is_sure
        
        if [[ "${is_sure}" == y || "${is_sure}" == ye || "${is_sure}" == yes ]]
        then
            utter "${source_uri} -> ${target_uri}"
            try "${rsync[@]}" "${source_uri}" "${target_uri}"
        else
            break
        fi
    fi
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2011 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
