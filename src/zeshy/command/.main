#!/usr/bin/env zsh
# ====================[ command                            ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Command, implementing external command-specific functionality: e.g.,
#
# * Supplementary aliases, functions, and variables for all universal commands,
#   particularly POSIX-compliant commands universally available under *NIX.

# ....................{ IMPORTS                            }....................
zimport zeshy/file/file
zimport zeshy/type/integer

# void _zeshy_command(void)
#
# Conditionally Import Zeshy Command components. Specifically, import each such
# component if and only if the corresponding command has been installed on the
# current system (e.g., import "grep" if and only if "grep" is installed).
_zeshy_command() {
    # Match all non-dotfiles in the current directory via the "(^D)" modifier:
    # i.e., all files except this one.
    string command_script command_name
    for command_script in "$(dirname ${zeshy_script_path})"/*(^D); do
        command_name=$(basename "${command_script}")
        is_installed "${command_name}" and zimport "${command_script}"
    done
}

# ....................{ PAGE                               }....................
# char *zpage(char *command)
#
# Page the passed command (i.e., pipe it through "less" or "more").
zpage() {
    die_unless_at_least_one_argument 'expected a command'

    #FIXME: Unsure the call to try() is strictly necessary. Remove.
    try "${(q)@} | ${PAGER:-less}"
}

# ....................{ WC                                 }....................
# Aliases. 
alias wclr="get_number_of_text_file_lines_recursively"

# int get_number_of_text_file_lines_recursively(char *path)
#
# Get the total number of lines corresponding to the file(s) in the passed path,
# as follows:
#
# * If no path is passed, default to the current directory.
# * If this path is a directory, recursively sum the number of lines for files
#   in this path ignoring binary files.
# * If this path is a file:
#   * And this file is a PDF, use "pdftotext" to sum the number of text lines in
#     the rendered PDF.
#   * Otherwise, sum the number of lines in this file.
get_number_of_text_file_lines_recursively() {
    # Parse parameters.
    die_unless_at_most_one_argument 'expected at most one path'
    string find_path="${1:-${PWD}}"

    if is_dir "${find_path}"; then
        utter "summing line length for all text files in \"${find_path}\"..."
        
        # Recursively find all files *NOT*:
        # 
        # * Non-files (e.g., directories, device files).
        # * Dotfiles and dot directories (e.g., ".cvs/", ".git/", ".svn/").
        # * Binary files. We borrow this expression from is_file_text().
        try "find '${find_path}' \
-type d -iname '*test*' -prune -o \
-type f \( ! -regex '.*/\..*' \) \
$(is_text_file_find_compatible) \
-exec wc -l {} \; | \
awk '{ total += \$1 } END { print total }' | \
comma_separate_integer"
#       utter "running: ${rin}"
#       try "${rin}"
    else
        die_unless_file "${find_path}" "\"${find_path}\" neither a directory or file"
        utter "getting line length for \"${find_path}\"..."
        
        if is "$(get_filetype "${find_path}")" == pdf si; then
            try "pdftotext '${find_path}' - | wc -l | comma_separate_integer"
        else
            is_file_text "${find_path}" or die "\"${find_path}\" not a text file"
            try "wc -l '${find_path}' | comma_separate_integer"
        fi
    fi
}

# ....................{ MAIN                               }....................
# Call and then immediately unset (i.e., delete) _zeshy_command().
_zeshy_command
unfunction _zeshy_command

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
