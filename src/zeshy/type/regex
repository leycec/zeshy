#!/usr/bin/env zsh
# ====================[ regex                              ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Regex, implementing supplementary regular expression-handling
# functionality (over that already implemented by Zeshy Core).
#
# --------------------( CONVENTIONS                        )--------------------
# All regular expressions matched by this component are Perl-compatible regular
# expressions (PCRE), unless otherwise stated. Thus, we abbreviate such regular
# expressions "regexes."
# 
# All functions defined by this component accept the same number and type of
# parameters as the core match() function, unless otherwise stated. Thus, we
# abbreviate such parameters "...". 

# ....................{ IMPORTS                       }....................
#zimport zeshy/string

# ....................{ MATCHES                            }....................
# int get_number_of_matches(...)
#
# Return the number of matches in the passed string. Among other uses, this
# function counts occurrences of characters and substrings in strings: e.g.,
#
#     >>> get_number_of_matches 'rop[aeiou]' 'anthropocene tropes'
#     2
#
# See also the get_number_of_glob_matches() function, which behaves similarly
# but less efficiently -- matching via multiple glob rather than one regular
# expression.
get_number_of_matches() {
    die_unless_at_least_two_arguments\
        'expected at least one regular expression and one string'
    string regex="${1}" string="${2}" string_newlined

    # Escape """ and "~" characters in the passed string, in preparation for
    # replacement by "sed".
    string="${string//\"/\\\"}"
    string="${string//\~/\\~}"

    # This exceptionally clever (and frankly obscene) logic comes inspired by
    # StackOverflow user "user216915" via this question:
    #
    #     http://stackoverflow.com/questions/1781329/count-the-number-of-occurrences-of-a-string-using-sed
    #
    # Sadly, neither sed, awk, grep, or zsh itself have any coherent means of
    # matching individual occurences regardless of newline; rather, they only
    # match each such occurence as a newline-specific group. This hack uses this
    # newline obsession by replacing each match with that match suffixed by a
    # newline. This guarantees no more than one match occupies each line.
    #
    # Finally, feeding the result into "grep -c" counts the number of such lines
    # and hence the number of matches. (Yeth, this sucketh mightily.)
#   print "sed expression: s/${(q)regex}/${(q)regex}\n/g"
    string_newlined="$(print "${string}" | sed --regexp-extended "s~(${regex})~\1\n~g")"
    die_unless_ok "string \"${string}\" or regular expression \"${regex}\" malformed"
#   print "string_newlined: ${string_newlined}"

    # If "sed" did nothing, then neither should we.
    if is "${string}" == "${string_newlined}" si
    then print 0
    else try "print '${string_newlined}' | grep --perl-regexp --count '${regex}'"
    fi
}

# ....................{ GROUPS ~ first                     }....................
# char *match_first_group(...)
#
# Return the first group to successfully match in the passed string against the
# passed regex. If no group matched, fail.
#
# In all other respects, this function is identical to the match() function.
# In particular, note groups may still be obtained via the "${match}" array.
match_first_group() {
    # Match.
    match "${@}" or return ${?}

    # Parse parameters.
    string group_array_name="${4:-match}"

    #FIXME: Uncommenting this causes *HORRIBLE, UTTERLY IMPOSSIBLE TO DEBUG*
    #issues. And it shouldn't. But there it is.
    # Localize the group array.
#   typeset -Ag ${group_array_name}

    # Retrieve the first group.
    string first_group_name="${group_array_name}[1]"

    # If this match matched at least one group, return that. Otherwise, nil.
#   print "first_group_name: ${first_group_name}"
    string first_group="${(P)first_group_name}"
#   print "first_group: ${first_group}"

    # If there exists at least one group, print the first and return success;
    # otherwise, print nothing and return failure.
    is_nonempty "${first_group}" and print "${first_group}"
}

# void match_multiline_first_group(...)
#
# Return the first group to successfully match in the passed string against the
# passed regex, in a multi-line fashion (e.g., matching '^' and '$' at both
# newline and the beginning and end of the string). If no group matched, fail.
#
# This function is otherwise identical to the match_multiline() function.
match_multiline_first_group() {
    list ZESHY_MATCH_OPTIONS; ZESHY_MATCH_OPTIONS=( -m )
    match_first_group "${@}"
}

# ....................{ GROUPS ~ last                      }....................
#FIXME: Does this actually work? And even if it does, we really should be using
#the ZSH "pcre" facility to guarantee as-expected interpretation of the regex.
# char *match_last_group(char *regular_expression, char *string)
#
# Match the passed string against the passed Perl-compatible regular expression
# (PCRE) and return the last matched group, if at least one such group matched.
match_last_group() {
    die_unless_at_least_two_arguments\
        'expected exactly one regular expression and one string'
        
    # Parse parameters.
    string regexp="${1}" string="${2}"

    # Match. For simplicity, use "grep" rather than Zsh's "pcre" module.
    try "echo '${string}' | tac | grep --perl-regexp -m 1 '${regexp}'"
}

# ....................{ LINES                              }....................
# char *get_matching_lines(...)
#
# Return all lines matching the passed regex. Unlike most Zeshy matching
# functions, this function uses "grep" rather than the "zsh/pcre" module as the
# latter provides no efficient means of obtaining non-overlapping matches.
#
# Unfortunately, this implies groups are inaccessible.
get_matching_lines() {
    die_unless_at_least_two_arguments\
        'expected at least one regular expression and one string'
#   local regexp="${1}" string="${2}"
    try "echo '${2}' | grep --perl-regexp '${1}'"
}

# int get_number_of_matching_lines(...)
#
# Return the number of lines matching the passed regex. See the
# get_matching_lines() function for caveats.
get_number_of_matching_lines() {
    die_unless_at_least_two_arguments\
        'expected at least one regular expression and one string'
    try "echo '${2}' | grep --perl-regexp --count '${1}'"
}

# char *match_first_line(...)
#
# Match the passed string against the passed Perl-compatible regular expression
# (PCRE) and return the first matched line, if at least one such line matched,
# or the empty string otherwise.
#
# In all other respects, this function is identical to the match() function.
# In particular, note groups may still be obtained via the "${match}" array.
match_first_line() {
    die_unless_at_least_two_arguments\
        'expected at least one regular expression and one string'

    # Guarantee the passed regular expression roots itself to single rather than
    # multiple lines (i.e., begins with '^' and ends with '$').
    string regex="${1}"; shift

    # No, I don't know why the former requires a '.' while the latter does not.
    # I'm sure there's a highly rational reason within the musty bowels of ZSH.
#   print "regex: "${regex}
    is "${regex}" == ^.* si or regex="^.*${regex}"
    is "${regex}" == *$  si or regex="${regex}.*$"
#   print "regex: "${regex}
    
    # Pack this modified regular expression back into the array of all passed
    # arguments, for convenience.
    set -- "${regex}" "${@}"

    # Match.
    match_multiline "${@}" or return ${?}

    # Print the first matching line.
    string match_string_name="${3:-MATCH}"
    print "${(P)match_string_name}"
}

#FIXME: Obsolete.
#   local regexp="${1}" string="${2}"
#   try "get_matching_lines '${@}' | get_line_count"
#   try "echo '${string}' | sed 's/${regex}/${regex}\n/g' | grep --perl-regexp --count '${regex}'"
#   return
#       die "\"${string}\" not matched by regular expression \"${regex}\""
    # If the passed regex contains no groups, embed that regex in a group
    # matching the entire prior regex.
#   [[ "${1}" == *\(*\)* ]] || set -- "(${regex})" "${@}"

    # Match.
#   match "${@}" || return ${?}
#   echo "${#match}"

    # Print the number of matches.
#   local group_array_name="${4:-match}"
#   print "${(P)#group_array_name}"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
