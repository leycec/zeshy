#!/usr/bin/env zsh
# ====================[ type                               ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Type, implementing generic type-handling: e.g.,
#
# * Reflection functionality for dynamically inspecting functions and aliases
#   like first-class constructs.

# ....................{ REFLECTION ~ tests                 }....................
# bool is_callable(char *name)
#
# Return success if there exists an alias or function with the passed name.
is_callable() {
    die_unless_one_argument 'expected exactly one name'
    is $(whence -w "${1}") =~ ': (alias|builtin|function)$' si
}

# bool is_builtin(char *builtin_name)
#
# Return true if there exists a built-in (i.e., C function accessible to all Zsh
# shells and scripts) with the passed name.
is_builtin() {
    die_unless_one_argument 'expected exactly one name'
    is $(whence -w "${1}") =~ ': builtin$' si
}

# bool is_function(char *function_name)
#
# Return true if there exists a function with the passed name.
is_function() {
    die_unless_one_argument 'expected exactly one name'
    is $(whence -w "${1}") =~ ': function$' si
}

# ....................{ REFLECTION ~ tests ~ aliases       }....................
# bool is_alias(char *alias_name)
#
# Return true if there exists an alias with the passed name.
is_alias() {
    die_unless_one_argument 'expected exactly one name'
    quietly alias "${1}" 
}

# bool is_suffix_alias(char *alias_name)
#
# Return true if there exists a suffix alias with the passed name.
is_suffix_alias() {
    die_unless_one_argument 'expected exactly one name'
    quietly suffix_alias "${1}" 
}

# ....................{ REFLECTION ~ tests ~ variable      }....................
# bool is_variable(char *variable_name)
#
# Return true if there exists a variable with the passed name.
is_variable() {
    die_unless_one_argument 'expected exactly one name'
    is_nonempty "${(tP)1}"  # see get_type() for details
}

# bool is_local_variable(char *variable_name)
#
# Return true if there exists a local variable with the passed name.
is_local_variable() {
    die_unless_one_argument 'expected exactly one name'
    string variable_type="${(tP)1}"  # see get_type() for details
    is_nonempty "${variable_type}" and is "${variable_type}" == *-local si
}

# ....................{ REFLECTION ~ types                 }....................
# char *get_type(void *name)
#
# Return the type of the object (e.g., function, variable) corresponding to the
# passed variable name or "not-found" if there exists no such object.
get_type() {
    die_unless_one_argument 'expected exactly one name'
    string name="${1}"
    
    # First, test if there exists a corresponding variable.
    string type="${(tP)name}"

    # Failing that, test if there exists a corresponding callable. Failing that,
    # use the string returned by the whence() built-in: "none".
    if is_empty "${type}"; then
        type="$(whence -w "${name}")"
        type="${type##*: }"
    fi
    
    echo "${type}"
}

#FIXME: Obsolete.
# ....................{ DEPENDENCIES                       }....................
#FIXME: This is generic functionality which should probably be provided by
#"core". Shift us up the genericity!
# void _zeshy_type(void)
#
# Import Zeshy components specific to the current OS.
#_zeshy_type() {
#    string current_dir="$(dirname "${zeshy_script_path}")"
#    is_dir "${current_dir}" and zimport "${current_dir}"
#}

# ....................{ MAIN                               }....................
# Call and then immediately unset (i.e., delete) _zeshy_os().
#_zeshy_os
#unset _zeshy_os

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
