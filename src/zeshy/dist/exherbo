#!/bin/zsh
# ====================[ zshrc.exherbo                      ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# ZSH routines for manipulating Exherbo repositories, exheres, and exlibs.

# ....................{ CONFIGURATION                      }....................
# Note that default command-line arguments for Paludis are defined via the
# ${PALUDIS_OPTIONS} environment variable, so as to expose these arguments to
# these aliases and functions as well as dependent wrappers.
export INQUISITIO_OPTIONS="\
--log-level warning \
--matcher pcre \
"

export PALUDIS_OPTIONS="\
--continue-on-failure if-satisfied \
--dl-blocks accumulate \
--dl-circular error \
--dl-downgrade warning \
--dl-new-slots always \
--dl-reinstall never \
--dl-reinstall-scm never \
--dl-reinstall-targets auto \
--dl-suggested show \
--dl-upgrade always \
--log-level warning \
--multitask \
--show-reasons summary \
--show-use-descriptions all \
--show-package-descriptions new \
--with-unused-dependencies \
"

# ....................{ ALIASES                            }....................
alias ec="eclectic"
alias ecci="eclectic config interactive"
alias inq="inquisitio"
alias pal="paludis"
alias pali="paludis --install"
alias palo="paludis --owner"
alias pals="paludis --sync"
alias palu="paludis --uninstall"
alias palq="paludis-query"
alias palib="pali --dl-blocks discard"
alias palip="pali --pretend"
alias palit="palric; pali"
alias palupuu="palu --permit-unsafe-uninstalls"
alias palsedr="paludis-sed-recursive"
alias palisupi="paludis-resume-install"
alias palisupt="paludis-resume-test"

# ....................{ ECLECTIC                           }....................
function eclectic-select-gcj()     { set_eclectic_jdk gcj }
function eclectic-select-icedtea() { set_eclectic_jdk icedtea }

# void set_eclectic_jdk(char *grep_pattern)
#
# Sets the currently selected JDK to the JDK matching the passed grep pattern.
set_eclectic_jdk() {
    [[ "${#}" -eq 1 ]] || die "grep pattern required!"

    local JDK_NAME=$(get_eclectic_jdk_name ${*})
    utter "selecting ${JDK_NAME} as the current JDK..."
    try eclectic java-jdk set ${JDK_NAME}
    try eclectic java-jre set ${JDK_NAME}
}

# void get_eclectic_jdk_name(char *grep_pattern)
#
# Returns the name of a selectable JDK matching the passed grep pattern.
get_eclectic_jdk_name() {
    [[ "${#}" -eq 1 ]] || die "grep pattern required!"
    eclectic --no-colour java-jdk list | \
        command grep --max-count=1 "${1}" | \
        command awk '{printf "%s", $2}'
}

# ....................{ PALUDIS                            }....................
palric() {
    paludis --regenerate-installed-cache
    paludis --regenerate-installable-cache
}
palricl() {
    paludis --regenerate-installable-cache leycec leycec-java leycec-scientific
}

paludis-fix-linkage() {
    cave fix-linkage --execute
}

paludis-news() {
    eselect news read all | less
}

paludis-update-world() {
    paludis --install --dl-reinstall if-use-changed world
}

paludis-sed-recursive() {
    [[ "${#}" -eq 2 ]] ||
        die "one search pattern and one replace pattern required!"

    set_git_globals
    mv-pcre -cr "${1}" "${2}" "${GIT_ROOT}"/{exlibs,packages}/**/*.{exlib,exheres-0}
}

# Query for a specific exheres.
paludis-query() {
    paludis --query --show-metadata $* | less
}

# Resume a failed install from the install phase, rather than from the
# beginning. This is generally safe - but should be used with caution. Also,
# note that, when Paludis fails, it generally emits a "Resume command." This is
# not what you think, however: calling this command actually does very little
# that the vanilla install command does not already do. Most saliently, this
# "Resume command" does not resume a failed install from the install phase. It
# bloody starts over! This has bit me several times, but no more.
paludis-resume-install() {
    utter "forcefully skipping to the install phase for '$1'..."
    paludis --install --skip-until-phase setup --abort-at-phase unpack "$1"
    paludis --install --skip-until-phase install "$1"
}

# Resume a failed install from the install phase, rather than from the
# beginning. This is generally safe - but should be used with caution.
paludis-resume-test() {
    utter "forcefully skipping to the test phase for '$1'..."
    paludis --install --skip-until-phase setup --abort-at-phase unpack "$1"
    paludis --install --skip-until-phase test "$1"
}

# Recache the ./Manifest file for some ebuild.
# 
# Note that, if that ebuild is fetch restricted (i.e., it contains a line
# RESTRICT="fetch" and supplies a "pkg_nofetch" function), you may need to
# disable the fetch restriction before calling this function.
paludis-recache-manifest() {
    utter "forcefully recaching Manifest entries for '$1'..."
    ebuild --force "$1" manifest
}

# Uninstall all unused ebuilds or exheres.
paludis-uninstall-unused() {
    utter "pretending to uninstall unused..."
    paludis --uninstall-unused --pretend
    utter "uninstalling unused..."
    paludis --uninstall-unused
}

# Upload a new exheres repository patch given the current exheres repository.
# This formats the patch via "git format-patch origin", then "pastes" (i.e.,
# uploads) the plaintext contents of the patch to the online "pastebin"
# service currently configured in "~/.wgetpaste.conf" or "/etc/wgetpaste.conf".
# This returns a URL suitable for submission to the "hacchi" IRC bot via the
# "#exherbo" channel on Freenode.
#
# Complex, we know. But it works.
paludis-paste-patch() {
    utter "pasting patch..."
    git-format-patch-stdout "${@}" | wgetpaste --language Bash --raw
}

#FIXME: Consider implementing an equivalent function to:
# qlist ${EXHERES_NAME} | xargs scanelf -L -n -q -F '%n #F' | tr , ' ' | xargs qfile -C | sort -u
#This emits all shared libraries listed as "DT_NEEDED" for the passed exheres:
#in other words, the set of all known dependencies for the exheres.

# ....................{ PALUDIS =leycec                    }....................
#EXHERBO_LEYCEC_DEV_JAVA_PACKAGES="asm:3 commons-codec:1 commons-logging:1 hamcrest:1 httpcomponents-client:3 httpcomponents-client:4 icu4j:4 jarjar:1 javacc:5 jetty:6 jsch:0 junit:3 junit:4 jzlib:1 log4j:1 lucene:1 lucene:3 qdox:1 sat4j-core:2 sat4j-pb:2 tomcat:5 tomcat:6 swt:3.5"
#EXHERBO_LEYCEC_DEV_JAVA_PACKAGES="asm commons-codec commons-logging hamcrest httpcomponents-client icu4j jarjar javacc jetty jsch junit junit jzlib log4j lucene qdox sat4j-core sat4j-pb tomcat swt"
#EXHERBO_LEYCEC_DEV_JAVA_PACKAGES=$(command ls -x "/home/leycec/pub/code/exherbo.org/leycec-java/packages/dev-java/")
EXHERBO_LEYCEC_DEV_JAVA_PACKAGES=( "/home/leycec/pub/code/exherbo.org/leycec-java/packages/dev-java/"* )

paludis-uninstall-leycec-dev-java() {
    local EXHERBO_LEYCEC_DEV_JAVA_PACKAGE
    for   EXHERBO_LEYCEC_DEV_JAVA_PACKAGE in ${=EXHERBO_LEYCEC_DEV_JAVA_PACKAGES}; do 
        utter "uninstalling ${EXHERBO_LEYCEC_DEV_JAVA_PACKAGE}..."
        paludis --uninstall --all-versions --with-dependencies "dev-java/${EXHERBO_LEYCEC_DEV_JAVA_PACKAGE}"
    done
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyleft 2010 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
