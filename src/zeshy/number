#!/usr/bin/env zsh
# ====================[ number                             ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Number. This Zeshy component implements numeric functionality.

# ....................{ DEPENDENCIES                       }....................
#FIXME: Rename this module "integer" and shift this dependency into a new
#"real" module? Interestingly, this begins to suggest a type hierarchy: e.g.,
#"zeshy/type/integer".
# Math module. Zsh provides rudimentary math functionality out of the box. But
# since the caller imported this module, we assume the caller requires genuine
# math functionality. 
zmodload zsh/mathfunc

# ....................{ INTEGERS                           }....................
# 1KB, 1MB, 1GB, and 1TB, respectively. For efficiency, these numbers are base
# 2-style rather than metric (i.e., base 10)-style.
export KB=$(( 1 << 10 ))
export MB=$(( 1 << 20 ))
export GB=$(( 1 << 30 ))
export TB=$(( 1 << 40 ))

# ....................{ RANDOMIZERS                        }....................
#FIXME: Add optional parameters for changing the range. Also provide a function
#based on the rand48() function imported via the above module. (Note this
#function does not exist on all systems. Fortunately, "${RANDOM}" does.)
# int get_random_number(void)
#
# Get a random number in the range [0, 32767].
get_random_number() {
    print "${RANDOM}"
}

# ....................{ CONVERTERS ~ type                  }....................
# char *to_comma_separated_integer(int number)
#
# Convert the passed number to a comma-separated number: e.g.,
#
#     >>> to_comma_separated_integer 1776
#     1,776
# 
# For convenience, this function also accepts "stdin"-style piped input: e.g.,
#
#     >>> echo 1776 | to_comma_separated_integer
#     1,776
to_comma_separated_integer() {
    die_unless_one_argument 'expected exactly one number'
    local number="${1}"
    print "${number}" | awk "{ printf \"%'d\n\", \$1 }"
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2011 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
