#!/usr/bin/env zsh
# ====================[ terminal                           ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Terminal, implementing the command-line user interface.
#
# --------------------( SEE ALSO                           )--------------------
# http://en.wikipedia.org/wiki/ANSI_escape_code
#   Further color details.

# ....................{ IMPORTS                       }....................
#FIXME: Should be done implicitly, no?
# Load the "zsh/terminfo" module. This defines the associative array $terminfo,
# having keys describing attributes of the current terminal. The above "colors" 
# function defines the above six or so associative arrays regardless of whether
# or not the current terminal actually supports color. Therefore, we only call
# the "colors" function when "$terminfo[colors]" (i.e., the specific number of
# colors supported by this terminal) is greater than or equal to the customary 8
# (i.e., white, red, green, blue, yellow, magenta, and cyan).
#autoload -U zsh/terminfo

# ....................{ DECLARATIONS                       }....................
# Define colors only under color-aware terminals. When under color-unaware
# terminals, the variables below are left undefined and thus expand without
# error to nothing when evaluated in the context of an actual prompt.
_zeshy_color() {
    die_unless_no_arguments

    # Colorize "ls" and declare the "$LS_COLORS" global.
    is_runnable dircolors and eval "$(dircolors --sh)"

    if [[ "${terminfo[colors]}" -ge 8 ]]; then
        # Declare color-specific dictionaries: $fg, $fg_bold, $fg_no_bold, $bg,
        # $bg_bold, and $bg_no_bold. In each such dictionary, keys are color
        # names (e.g., "red") and values terminal-specific strings activating that
        # color combination under the current output.
        colors

        # Surround each color definition in "%{...%}"; this informs ZSH that, when
        # performing prompt expansion, these strings do not contribute to the length
        # of that prompt.
        #
        # Note that ${(L}color} expands to the lowercase version of ${color}; this is
        # necessary, as the associative arrays defined by "colors" are accessible via
        # case-sensitive lowercase keys rather than uppercase.
        string color_name
        for color_name in WHITE BLACK RED GREEN BLUE YELLOW MAGENTA CYAN; do
            eval export FG_${color_name}='%{$fg_no_bold[${(L)color_name}]%}'
            eval export FG_${color_name}_BOLD='%{$fg_bold[${(L)color_name}]%}'
            eval export BG_${color_name}='%{$bg_no_bold[${(L)color_name}]%}'
            eval export BG_${color_name}_BOLD='%{$bg_bold[${(L)color_name}]%}'
        done

        # Define hard-coded ANSI color codes for use below.
        integer ansi_black=0 ansi_white=7 ansi_intense=9
     
        # Define the reset color definitions for returning color to its default.
        export FG_RESET="%{$reset_color%}"
        export BG_RESET="%{$reset_color%}"

        # Redefine black and white color definitions; the default definitions above
        # tends to assign FG_BLACK a pure-black color value, which is rather
        # unreadable, and FG_WHITE a grey rather than white value.
        export FG_BLACK="${FG_RESET}%{"$'\033[${ansi_intense}${ansi_black}m'"%}"
        export FG_GREY="%{$fg_no_bold[white]%}"
        export FG_GREY_BOLD="%{$fg_bold[black]%}"
        export FG_WHITE="${FG_RESET}%{"$'\033[${ansi_intense}${ansi_white}m'"%}"
        export FG_WHITE_BOLD="%{$fg_bold[white]%}"
    fi
}
# ....................{ SIZE                               }....................
# int get_terminal_width(void)
#
# Get the width in characters of the current terminal.
get_terminal_width() {
    die_unless_no_arguments
    echo "${COLUMNS}"
}

# ....................{ WIDGETS                            }....................
# void utter_banner(void)
#
# Print a one-line "banner," visually demarcating subsequent from prior lines. 
utter_banner() {
    die_unless_no_arguments
    #FIXME: Should probably be documented; inspired, as ever, by:
    #http://aperiodic.net/phil/prompt/    (see "PR_FILLBAR=...")
    echo "${(l.$(get_terminal_width)..=.)}"
}

# ....................{ MAIN                               }....................
# Call and then immediately unset (i.e., delete) _zeshy_color().
_zeshy_color
unset _zeshy_color

#FIXME: Obsolete.
    # Define ANSI colors for the ANSI shell prompt, below.
    #export   PROMPT_BLACK="%{"$'\033[${FG_BLACK_HIGH}m'"%}"
    #export    PROMPT_GREY="%{"$'\033[${FG_BLACK}m'"%}"
    #export     PROMPT_RED="%{"$'\033[${FG_RED_HIGH}m'"%}"
    #export   PROMPT_GREEN="%{"$'\033[${FG_GREEN_HIGH}m'"%}"
    #export  PROMPT_YELLOW="%{"$'\033[${FG_YELLOW_HIGH}m'"%}"
    #export    PROMPT_BLUE="%{"$'\033[${FG_BLUE_HIGH}m'"%}"
    #export PROMPT_MAGENTA="%{"$'\033[${FG_MAGENTA_HIGH}m'"%}"
    #export    PROMPT_CYAN="%{"$'\033[${FG_CYAN_HIGH}m'"%}"
    #export   PROMPT_WHITE="%{"$'\033[${FG_WHITE}m'"%}"

    # Define ANSI colors for "print" and "echo" uses, below.
    #export   BLACK="\e[${FG_BLACK_HIGH}m"
    #export     RED="\e[${FG_RED_HIGH}m"
    #export   GREEN="\e[${FG_GREEN_HIGH}m"
    #export  YELLOW="\e[${FG_YELLOW_HIGH}m"
    #export    BLUE="\e[${FG_BLUE}m"
    #export MAGENTA="\e[${FG_MAGENTA_HIGH}m"
    #export    CYAN="\e[${FG_CYAN}m"
    #export   WHITE="\e[${FG_WHITE}m"
    #export    BOLD="\e[${INTENSITY_BOLD};${FG_RESET}m"
    #export  NORMAL="\e[${INTENSITY_NORMAL};${FG_RESET}m"
    #export   RESET="\e[${FG_RESET}m"
# ....................{ STREAMS                            }....................
# Load the "colors" module. This defines the function "colors" that, when
# called, itself defines in excess of six associative arrays: $fg, $fg_bold,
# $fg_no_bold, $bg, $bg_bold, and $bg_no_bold. Each array, when indexed by
# color name (e.g., $bg_bold{red}), further expands to the terminal-specific
# string activating that color combination under the current output.
#autoload -U colors

#FIXME: Causes the "su" command to fail to output its data. Hm; obviously, this
#is a flawed approach. Research alternatives.
# Color all debug, warning, and error output for all processes: in particular,
# color all output sent by each process to the process-specific stderr "file".
#exec 2>>(\
#    while read LINE; do \
#        print -P "${FG_RED_BOLD}${(q)LINE}${FG_RESET}" > '/dev/tty'; \
#        print -n $'\0'; \
#    done &)

# ....................{ COLORS                             }....................
# See "http://en.wikipedia.org/wiki/ANSI_escape_code", for further details.

# Color bases.
#  BASE_BLACK="0"
#  FG_BLACK_HIGH="9${BASE_BLACK}"
#  PROMPT_BLACK="%{"$'\033[${FG_BLACK_HIGH}m'"%}"
#    BASE_RED="1"
#  BASE_GREEN="2"
# BASE_YELLOW="3"
#   BASE_BLUE="4"
#BASE_MAGENTA="5"
#   BASE_CYAN="6"
#  BASE_WHITE="7"
#  BASE_RESET="9"

# Color foregrounds.
#  FG_BLACK="3${BASE_BLACK}"
#    FG_RED="3${BASE_RED}"
#  FG_GREEN="3${BASE_GREEN}"
# FG_YELLOW="3${BASE_YELLOW}"
#   FG_BLUE="3${BASE_BLUE}"
#FG_MAGENTA="3${BASE_MAGENTA}"
#   FG_CYAN="3${BASE_CYAN}"
#  FG_WHITE="3${BASE_WHITE}"
#  FG_RESET="3${BASE_RESET}"

# Color backgrounds.
#  BG_BLACK="4${BASE_BLACK}"
#    BG_RED="4${BASE_RED}"
#  BG_GREEN="4${BASE_GREEN}"
# BG_YELLOW="4${BASE_YELLOW}"
#   BG_BLUE="4${BASE_BLUE}"
#BG_MAGENTA="4${BASE_MAGENTA}"
#   BG_CYAN="4${BASE_CYAN}"
#  BG_WHITE="4${BASE_WHITE}"
#  BG_RESET="4${BASE_RESET}"

# Color foregrounds (high intensity).
#  FG_BLACK_HIGH="9${BASE_BLACK}"
#  PROMPT_BLACK="%{"$'\033[${FG_BLACK_HIGH}m'"%}"
#    FG_RED_HIGH="9${BASE_RED}"
#  FG_GREEN_HIGH="9${BASE_GREEN}"
# FG_YELLOW_HIGH="9${BASE_YELLOW}"
#   FG_BLUE_HIGH="9${BASE_BLUE}"
#FG_MAGENTA_HIGH="9${BASE_MAGENTA}"
#   FG_CYAN_HIGH="9${BASE_CYAN}"
#  FG_WHITE_HIGH="9${BASE_WHITE}"
#  FG_RESET_HIGH="9${BASE_RESET}"

# Color backgrounds (high intensity).
#  BG_BLACK_HIGH="10${BASE_BLACK}"
#    BG_RED_HIGH="10${BASE_RED}"
#  BG_GREEN_HIGH="10${BASE_GREEN}"
# BG_YELLOW_HIGH="10${BASE_YELLOW}"
#   BG_BLUE_HIGH="10${BASE_BLUE}"
#BG_MAGENTA_HIGH="10${BASE_MAGENTA}"
#   BG_CYAN_HIGH="10${BASE_CYAN}"
#  BG_WHITE_HIGH="10${BASE_WHITE}"
#  BG_RESET_HIGH="10${BASE_RESET}"

# Color attributes.
#           RESET="00"
#INTENSITY_NORMAL="22"
#  INTENSITY_BOLD="01"
# INTENSITY_FAINT="02"
#       ITALIC_ON="03"
#UNDERLINE_SINGLE="04"
#UNDERLINE_DOUBLE="21"
#   UNDERLINE_OFF="24"
#      BLINK_SLOW="05"
#      BLINK_FAST="06"
#       BLINK_OFF="25"
#  IMAGE_NEGATIVE="07"  # inverse (reverse), swapping foreground and background
#  IMAGE_POSITIVE="27"
#         CONCEAL="08"
#          REVEAL="28"

# Define (but do not export) ANSI colors for the ANSI shell prompt, below.
#  PROMPT_BLACK="%{"$'\033[${FG_BLACK_HIGH}m'"%}"
#    PROMPT_RED="%{"$'\033[${FG_RED_HIGH}m'"%}"
#  PROMPT_GREEN="%{"$'\033[${FG_GREEN_HIGH}m'"%}"
# PROMPT_YELLOW="%{"$'\033[${FG_YELLOW_HIGH}m'"%}"
#   PROMPT_BLUE="%{"$'\033[${FG_BLUE}m'"%}"
#PROMPT_MAGENTA="%{"$'\033[${FG_MAGENTA_HIGH}m'"%}"
#   PROMPT_CYAN="%{"$'\033[${FG_CYAN_HIGH}m'"%}"
#  PROMPT_WHITE="%{"$'\033[${FG_WHITE}m'"%}"

# Define (but do not export) ANSI colors for "print" and "echo" uses, below.
#  BLACK="\e[${FG_BLACK_HIGH}m"
#    RED="\e[${FG_RED_HIGH}m"
#  GREEN="\e[${FG_GREEN_HIGH}m"
# YELLOW="\e[${FG_YELLOW_HIGH}m"
#   BLUE="\e[${FG_BLUE}m"
#MAGENTA="\e[${FG_MAGENTA_HIGH}m"
#   CYAN="\e[${FG_CYAN_HIGH}m"
#  WHITE="\e[${FG_WHITE}m"
#   BOLD="\e[${INTENSITY_BOLD};${FG_RESET}m"
# NORMAL="\e[${INTENSITY_NORMAL};${FG_RESET}m"
#  RESET="\e[${FG_RESET}m"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
