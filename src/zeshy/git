#!/bin/zsh
# ====================[ zshrc.git                          ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# ZSH routines for manipulating git repositories.

# ....................{ CONFIGURATION                      }....................
GIT_GREP_OPTIONS="--extended-regexp --ignore-case -n -C 1"

# ....................{ ALIASES                            }....................
alias gita="git add"
alias gitaa="git add --all"
alias gitd="git diff"
alias gitl="git log"
alias gitc="git commit"
alias gitca="git commit --all"
alias gitcaa="git commit --all --amend"
alias gitgr="git-grep"
alias gitgrr="git-grep-root"
alias gitrei="git rebase --interactive"
alias gitrec="git rebase --continue"
alias gitp="git push"
alias gits="git status"

# Eliminate "Merged from..." commits git implicitly produces from a non-
# conflicting merge. (Rather helpful.)
alias gitreo="git rebase origin"

# Interactively rebase all commits committed since the last push to the remote
# repository. (This is the common case.)
alias gitreio="gitrei origin/master"

# ....................{ INTERFACE                          }....................
git-grep() {
    [[ "${#}" -ge 1 ]] || die "no grep expression passed"
    
    utter "grepping \"${PWD}\" for ${*}..."
    git grep ${=GIT_GREP_OPTIONS} ${*}
}

git-grep-root() {
    [[ "${#}" -ge 1 ]] || die "no grep expression passed"

    set_git_globals
    utter "grepping \"${GIT_ROOT}\" for ${*}..."
    [[ -z "${IS_GIT_ROOT_PWD}" ]] && pushd "${GIT_ROOT}"
    git grep ${=GIT_GREP_OPTIONS} ${*}
    [[ -z "${IS_GIT_ROOT_PWD}" ]] && popd
}

# void git-apply-remote-patches(char *uri1, char *uri2, ...)
#
# Get the passed URIs to local patch files and apply to the local git repository
# in the current working directory via "git am". Example:
# 
#     git-apply-remote-patches http://paste.pocoo.org/raw/2408/
git-apply-remote-patches() {
    [[ "${#}" -ge 1 ]] || die "no patch URIs passed"

    set_git_globals
    utter "applying remote patches to \"${GIT_ROOT}\"..."
    local REMOTE_PATCH LOCAL_PATCH
    for   REMOTE_PATCH in "${@}"; do
        # If the last character of the remote file is a '/', cut it. (This
        # preserves sanity, below.)
        REMOTE_PATCH="${REMOTE_PATCH%/}"

        if [[ "${REMOTE_PATCH}" =~ ^(https?|ftp):// ]]; then
            # Retrieve the remote path to a temporary file having the same
            # prefix as the basename of the remote file. (This should ensure
            # filename uniqueness, to a reasonable degree.)
            LOCAL_PATCH=$(which_temporary_file "${REMOTE_PATCH##*/}")

            utter "getting \"${REMOTE_PATCH}\" to \"${LOCAL_PATCH}\".."
            try wget --quiet --output-document="${LOCAL_PATCH}" "${REMOTE_PATCH}"

            utter "applying \"${LOCAL_PATCH}\"..."
            if git am "${LOCAL_PATCH}"; then
                utter "removing \"${LOCAL_PATCH}\"..."
                try rm -f "${LOCAL_PATCH}"
            fi
        else
            die "${REMOTE_PATCH} not a supported fetch protocol"
        fi
    done
} 

git-format-patch() {
    local COMMITS="${1}"
    if [[ -z "${COMMITS}" ]]; then
        COMMITS="origin/master"
    fi

    git format-patch -M -C "${COMMITS}"
}

git-format-patch-stdout() {
    local COMMITS="${1}"
    if [[ -z "${COMMITS}" ]]; then
        COMMITS="origin/master"
    fi
 
    git format-patch --stdout -M -C "${COMMITS}"
}

# ....................{ UTILITIES                          }....................
# void set_git_globals(void)
#
# Set Git-specific global variables by running "/usr/libexec/git/git-sh-setup".
# This locates the root of the git repository corresponding to the current
# working directory, among other useful things.
# 
# Specifically, this function sets:
#
# * ${GIT_DIR}, the absolute path to this Git repository's ".git/" directory.
# * ${GIT_ROOT}, the absolute path to the parent of ${GIT_DIR}.
# * ${IS_GIT_ROOT_PWD}, set if and only if ${GIT_ROOT} is the current working
#   directory.
set_git_globals() {
    utter "looking for current git repository..."
    SUBDIRECTORY_OK=1 source "$(git --exec-path)/git-sh-setup"

    # Resolve symlinks so as to permit comparison of this path against other
    # resolved, canonical paths.
    GIT_ROOT=$(readlink -e "${GIT_DIR%/*}")
    GIT_PWD=$(readlink -e "${PWD}")
#   echo "GIT_ROOT=${GIT_ROOT}"
#   echo "GIT_PWD=${GIT_PWD}"

    if [[ "${GIT_ROOT}" = "${GIT_PWD}" ]]
    then       IS_GIT_ROOT_PWD=1
    else unset IS_GIT_ROOT_PWD
    fi
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyleft 2010 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
