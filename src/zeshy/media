#!/usr/bin/env zsh
# ====================[ media                              ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Media. This Zeshy component implements media-specific functionality.

# ....................{ PATHS                              }....................
# Directory to which Zeshy mounts ISOs.
ZESHY_MOUNT_ISO_PATH="${ZESHY_MOUNT_HOME}/iso"

#FIXME: Generalize to non-Linux *nix platforms.
# File to which Zeshy inspects existing mount points.
ZESHY_MOUNT_POINTS_FILE="/proc/mounts"

# ....................{ ALIASES                            }....................
# Images.
dia()    { command dia $* & } 
geeqie() { command geeqie $* & } 
gimp()   { command gimp $* & } 

# Images. (Inkscape.)
inkscape() { command inkscape $* & } 
inkscape_export_eps() {
  inkscape $* --export-eps="${1}.eps"
}
inkscape_export_pdf() {
  inkscape --export-area-drawing $* --export-pdf="${1}.pdf"
}

# Videos.
vlc() { command vlc $* & }

# ....................{ [UN]MOUNTING                       }....................
# bool is_mount_point(char *dirname)
#
# Return success if the passed directory name is an existing mount point (i.e.,
# if "something" is currently mounted under this directory).
is_mount_point() {
    # Ensure sanity.
    [[ "${#}" -eq 1 ]] || die "expected exactly one pathname"
    local mount_point="${1}"
    
    # If the passed pathname does not correspond to an existing directory, it
    # cannot correspond to a valid mount point.
    [[ -d "${mount_point}" ]] || return "${ZESHY_FAILURE_CODE}"

    # If the "mountpoint" binary is available, use that.
    if is_runnable mountpoint; then
        mountpoint -q "${mount_point}"
    # Otherwise, manually grep "${ZESHY_MOUNT_POINTS_FILE}".
    else
        grep -q "${mount_point}" "${ZESHY_MOUNT_POINTS_FILE}"
    fi
}

# void mount_iso(char *filename)
#
# Mount the passed ISO filename to the "${ZESHY_MOUNT_ISO_PATH}" directory. If
# something is already mounted to this path, this function iteratively appends
# numbers (starting at 1), until discovering a directory name to which nothing
# is currently mounted.
mount_iso() {
    # Ensure sanity.
    [[ "${#}" -eq 1 ]] || die "expected exactly one ISO filename"
    local iso_filename="${1}"
    [[ "${iso_filename}" == *.iso ]] ||
        die "\"${iso_filename}\" not an ISO filename"
    [[ -f "${iso_filename}" ]] ||
        die "\"${iso_filename}\" not found"
    local SCRIPT_NAME='mount-iso'

    # Find a suitable mount path.
    local iso_mount_path_prefix="${ZESHY_MOUNT_ISO_PATH}"
    local iso_mount_path_suffix=0
    local iso_mount_path="${iso_mount_path_prefix}"
    utter "searching for an available mount point..."
    while is_mount_point "${iso_mount_path}"; do
        iso_mount_path_suffix=$(( iso_mount_path_suffix + 1 ))
        iso_mount_path="${iso_mount_path_prefix}${iso_mount_path_suffix}"
    done
    
    # Mount the passed ISO filename to the desired mount path.
    #
    # Note that this does not pass the ",user" option when mounting, as doing so
    # would implicitly enables unhelpful mount options (e.g., "noexec").
    utter "mounting \"${iso_filename}\" to \"${iso_mount_path}\"..."
    run_as_superuser make_directory_if_not_found "${iso_mount_path}" 
    run_as_superuser mount -t iso9660 -o 'exec,loop'\
        "${iso_filename}" "${iso_mount_path}" ||
        die "\"${iso_filename}\" not mountable to \"${iso_mount_path}\""
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyleft 2007-2010 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
