#!/usr/bin/env zsh
# ====================[ process                            ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Process, implementing supplementary process-handling functionality (over
# and above that already implemented in Zeshy Core).

# ....................{ BOOLEANS                           }....................
# bool is_running(char *filename)
#
# Return success if there exists a process with executable at passed absolute
# path.
is_running() {
    die_unless_one_argument 'expected exactly one filename'
    quietly get_pids_for_running "${@}"
}

# bool is_running_as(char *username, char *filename)
#
# Return success if there exists a process with executable at passed absolute
# path running under the passed user.
is_running_as() {
    die_unless_two_arguments 'expected exactly one username and filename'
    quietly get_pids_for_running_as "${@}"
}

# bool is_running_pid(int pid)
#
# Return success a process is running under the passed process ID: e.g.,
#
#     # sleep 10s &
#     # is_running_pid $! and echo "Awaken."  # prints "Awaken."
is_running_pid() {
    die_unless_one_argument 'expected exactly one process ID'
    quietly kill -0 "${1}"
}

# ....................{ IDENTIFICATION                     }....................
# char *get_pids_for_running(char *filename)
#
# Return a newline-delimited string of process IDs for all processes having the
# passed command name. If no such process exists, return the empty string and a
# failure return code.
get_pids_for_running() {
    die_unless_one_argument 'expected exactly one filename'
    is_installed pgrep or die '"pgrep" not installed'

    string command="${1}"
    if is_absolute_pathname "${command}"
    then pgrep -fx "${command}" 2>/dev/null
    else pgrep  -x "${command}" 2>/dev/null
    fi
}

# char *get_pids_for_running_as(char *username, char *filename)
#
# Return a newline-delimited string of process IDs for all processes having the
# passed command name running under the passed user. If no such process exists,
# return the empty string and a failure return code.
get_pids_for_running_as() {
    die_unless_two_arguments 'expected exactly one username and filename'
    is_installed pgrep or die '"pgrep" not installed'

    string username="${1}" command="${2}"
    if is_absolute_pathname "${command}"
    then pgrep -u "${username}" -fx "${command}" 2>/dev/null
    else pgrep -u "${username}"  -x "${command}" 2>/dev/null
    fi
}

# ....................{ JOBS ~ killing                     }....................
# Aliases.
alias ka='killall'
alias ka9='killall -9'

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
