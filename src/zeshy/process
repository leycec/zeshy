#!/usr/bin/env zsh
# ====================[ process                            ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Process. This Zeshy component implements supplementary process-handling
# functionality, over and above that already implemented by Zeshy Core.

# ....................{ JOBS                               }....................
# int[] get_pids_for_running(char *command)
#
# Get the process IDs for all processes matching the passed absolute path.
get_pids_for_running() {
    [[ "${#}" -eq 2 ]] || die "expected exactly one command"
    pgrep -fx "${2}" 2>/dev/null
}

# int[] get_pids_for_running_as(char *username, char *command)
#
# Get the process IDs for all processes running under the passed username
# matching the passed absolute path.
get_pids_for_running_as() {
    [[ "${#}" -eq 2 ]] || die "expected exactly one username and one command"
    pgrep -u "${1}" -fx "${2}" 2>/dev/null
}

# ....................{ JOBS ~ booleans                    }....................
# bool is_previous_process_failed(void)
#
# Return success if the previous process failed. Otherwise, return failure.
is_previous_process_failed() {
    [[ "${#}" -eq 0 ]] || die "expected no arguments"
    if [[ "${?}" -ne "${ZESHY_SUCCESS_CODE}" ]]
    then return "${ZESHY_SUCCESS_CODE}"
    else return "${ZESHY_FAILURE_CODE}"
    fi
}

# bool is_previous_process_succeeded(void)
#
# Return success if the previous process succeeded. Otherwise, return failure.
is_previous_process_succeeded() {
    [[ "${#}" -eq 0 ]] || die "expected no arguments"
    if [[ "${?}" -eq "${ZESHY_SUCCESS_CODE}" ]]
    then return "${ZESHY_SUCCESS_CODE}"
    else return "${?}"
    fi
}

# bool is_running(char *command)
#
# Return true if there exists a process running under any user having the
# passed binary name: e.g.,
#
#     >>> is_running zsh && echo "The zealous zephyr is lousy."
#     The zealous zephyr is lousy.
is_running() {
    [[ "${#}" -eq 1 ]] || die "expected exactly one command"
    quietly pidof -s "${1}"
}

# bool is_running_as(char *username, char *command)
#
# Return true if there exists a process running under the passed username
# having the passed binary name.
is_running_as() {
    [[ "${#}" -eq 2 ]] || die "expected exactly one username and one command"
    quietly get_pids_for_running_as "${@}"
}

# bool is_running_pid(int pid)
#
# Return true if there exists a process running under the passed process ID:
# e.g.,
#
#     >>> sleep 10s &
#     >>> is_running_pid $! && echo "Sleepy, so sleepy..."
#     Sleepy, so sleepy...
is_running_pid() {
    [[ "${#}" -eq 1 ]] || die "expected exactly one process ID"
    quietly kill -0 "${1}"
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyleft 2007-2010 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
