#!/usr/bin/env zsh
# ====================[ process                            ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Process, implementing supplementary process-handling functionality (over
# and above that already implemented in Zeshy Core).

# ....................{ DEPENDENCIES                       }....................
zimport zeshy/shell/shell

# ....................{ INTEGERS                           }....................
# "nice"-specific highest and lowest priority for CPU scheduling of processes.
integer global ZESHY_NICENESS_HI='-20' ZESHY_NICENESS_LO='19'

# "ionice"-specific highest and lowest priority pairs consisting of class and
# ioniceness for I/O scheduling of processes. Processes assigned to class 3
# signify "idle-only" processes to be scheduled only when no other process
# performs I/O. Since such processes are likely to suffer scheduling starvation,
# we omit class 3 from consideration.
integer global\
    ZESHY_IONICE_CLASS_HI='1' ZESHY_IONICE_CLASS_LO='2'\
    ZESHY_IONICENESS_HI='0'   ZESHY_IONICENESS_LO='7'

# ....................{ ALIASES                            }....................
interactive_alias ka='killall'
interactive_alias ka9='killall -9'

# ....................{ TESTS                              }....................
# bool is_running(char *filename)
#
# Return true if some process is running the passed command.
is_running() {
    die_unless_one_argument 'expected exactly one filename'
    quietly get_pids_for_running "${@}"
}

# bool is_running_as(char *username, char *filename)
#
# Return true if some process is running the passed command under the passed
# user.
is_running_as() {
    die_unless_two_arguments 'expected exactly one username and filename'
    quietly get_pids_for_running_as "${@}"
}

# bool is_running_pid(int pid)
#
# Return success a process is running under the passed process ID: e.g.,
#
#     # sleep 10s &
#     # is_running_pid $! and echo "Awaken."  # prints "Awaken."
is_running_pid() {
    die_unless_one_argument 'expected exactly one process ID'
    quietly kill -0 "${1}"
}

# ....................{ GETTERS ~ process id               }....................
# char *get_pids_for_running(char *filename)
#
# Return a newline-delimited string of process IDs for all processes having the
# passed command name. If no such process exists, return the empty string and a
# failure return code.
get_pids_for_running() {
    die_unless_one_argument 'expected exactly one filename'
    is_installed pgrep or die '"pgrep" not installed'

    string command="${1}"
    if is_path_absolute "${command}"
    then pgrep -fx "${command}" 2>/dev/null
    else pgrep  -x "${command}" 2>/dev/null
    fi
}

# char *get_pids_for_running_as(char *username, char *filename)
#
# Return a newline-delimited string of process IDs for all processes having the
# passed command name running under the passed user. If no such process exists,
# return the empty string and a failure return code.
get_pids_for_running_as() {
    die_unless_two_arguments 'expected exactly one username and filename'
    is_installed pgrep or die '"pgrep" not installed'

    string username="${1}" command="${2}"
    if is_path_absolute "${command}"
    then pgrep -u "${username}" -fx "${command}" 2>/dev/null
    else pgrep -u "${username}"  -x "${command}" 2>/dev/null
    fi
}

# ....................{ PRIORITY                           }....................
# char *run_deprioritized(
#   char *command_name, char *command_arg1, char *command_arg2, ...)
#
# Run the passed command under deprioritized CPU and I/O scheduling.
run_deprioritized() {
    # List of commands to be run, prefixed by commands deprioritizing the passed
    # command. All systems provide "nice" but not necessarily "ionice".
    list commands; commands=( nice -n${ZESHY_NICENESS_LO} )

    # If "ionice" is installed, append it to this list.
    if is_installed ionice; then
        commands+=( ionice
            -c${ZESHY_IONICENESS_CLASS_LO}
            -n${ZESHY_IONICENESS_LO}
        )
    fi

    # Append the passed command to the list of commands to be run and run.
    commands+=( "${@}" )
    run "${commands[@]}"
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
