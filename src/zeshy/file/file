#!/usr/bin/env zsh
# ====================[ file                               ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy File, extending the file- and path-handling Zeshy Core already
# implements with supplementary functionality.

# ....................{ DEPENDENCIES                       }....................
zimport zeshy/type/list

# ....................{ ALIASES                            }....................
# Three letter.
alias mvt="mv_to_temp_dir"

# Filesystem checking (fsck). Note we do not implicitly pass the "-a" or "-p"
# options to fsck, as fsck ignores some filesystem errors (e.g., superblock
# mount time in the future) when those options are passed.
export ZESHY_FSCK_OPTIONS="-C -M -T"
alias fsck="fsck ${ZESHY_FSCK_OPTIONS}"
alias fsck.ext2="fsck.ext2 ${ZESHY_FSCK_OPTIONS}"
alias fsck.ext3="fsck.ext3 ${ZESHY_FSCK_OPTIONS}"
alias fsck.vfat="fsck.vfat ${ZESHY_FSCK_OPTIONS}"

# ....................{ TESTS                              }....................
# bool is_path(char *pathname)
# 
# Return success if the passed path simply exists. Otherwise, failure.
is_path() {
    die_unless_one_argument 'expected exactly one pathname'
    is -e "${1}" si
}

# bool is_device_file(char *pathname)
# 
# Return success if the passed path is an existing device file (i.e., either
# block- or character-special). Otherwise, failure.
is_device_file() {
   die_unless_one_argument 'expected exactly one pathname'
   is -b "${1}" || -c "${1}" si
}

# bool is_binary_file(char *pathname)
#
# Return success if the passed pathname corresponds to a binary file (i.e., not
# a text file). (If the passed pathname corresponds to a directory instead, this
# function always returns failure.)
is_binary_file() {
    die_unless_one_argument 'expected exactly one pathname'
    is_file "${1}" and is "$(file --mime-encoding "${1}")" =~ ': binary$' si
#      file --mime-encoding "${pathname}" | grep --quiet ': binary$'
}

# bool is_text_file(char *pathname)
#
# Return success if the passed pathname corresponds to a text file (i.e., not a
# binary file). (If the passed pathname corresponds to a directory instead, this
# function always returns failure.)
is_text_file() {
    die_unless_one_argument 'expected exactly one pathname'
    is_file "${1}" and not is_binary_file "${1}"
#      file --mime-encoding "${pathname}" | grep --quiet --invert-match ': binary$'
}

#FIXME: Should be renamed to, say, "get_find_command_text_file_filter()", and
#consequently moved -- ideally, into a new "zeshy/file/find".
# bool is_text_file_find_compatible(void)
#
# Return a string which, when passed as argument to a "find" process, filters
# the currently visited filename if the corresponding file is binary. "find"
# itself provides no built-in means of performing such filtering, unfortunately.
is_text_file_find_compatible() {
    print "\-exec sh -c 'file --mime-encoding {} | grep --invert-match --quiet \": binary$\"' \\\;"
}

# ....................{ EXCEPTIONS                         }....................
# void die_unless_installed(char *command_name)
#
# Raise an exception unless the passed command exists.
die_unless_installed() {
    die_unless_one_or_two_arguments 'expected exactly one command name'
    string dirname="${1}"
    is_installed "${dirname}" or
        die "${2:-\"${dirname}\" not found}"
}

# void die_unless_dir(char *dirname, char *error_message = '')
#
# Raise an exception unless the passed directory exists.
die_unless_dir() {
    die_unless_one_or_two_arguments\
        'expected dirname and optional error message'
    string dirname="${1}"
    is_dir "${dirname}" or
        die "${2:-\"${dirname}\" not found or not a directory}"
}

# void die_unless_file(char *filename, char *error_message = '')
#
# Raise an exception unless the passed file exists.
die_unless_file() {
    die_unless_one_or_two_arguments\
        'expected filename and optional error message'
    string filename="${1}"
    is_file "${filename}" or
        die "${2:-\"${filename}\" not found or not a file}"
}

# void die_unless_device_file(char *filename, char *error_message = '')
#
# Raise an exception unless the passed device file exists.
die_unless_device_file() {
    die_unless_one_or_two_arguments\
        'expected filename and optional error message'
    string filename="${1}"
    is_device_file "${filename}" or
        die "${2:-\"${filename}\" not found or not a device file}"
}

# ....................{ FILENAMES                          }....................
# bool is_path_absolute(char *path)
#
# Return success if the passed path is absolute (i.e., begins with a '/'
# character). Otherwise, failure.
is_path_absolute() {
    die_unless_one_argument 'expected exactly one path'
    is "${1[1]}" == '/' si
}

# char *get_basename(char *path)
#
# Get the basename of the passed path (i.e., the path sans any parent direname).
# This function is a thin wrapper around the "basename" binary for convenience.
get_basename() {
    die_unless_one_argument 'expected exactly one path'
    try basename "${1}"
}

# char *get_filename_sans_filetype(char *filename)
#
# Get the filename of the passed filename sans filetype. If this filename has
# no filetype, this is the filename itself. By design, this only excludes the
# rightmost filetype: e.g.,
#
#     >>> get_basename_sans_filetype '/endymion/hastur.tar.gz'
#     /endymion/hastur.tar
get_filename_sans_filetype() {
    die_unless_one_argument 'expected exactly one filename'
    echo "${1%.*}"
}

# char *get_filetype(char *filename)
#
# Get the filetype of the passed filename. If this filename has no filetype,
# this is the empty string. Note the only matches the rightmost filetype: e.g.,
#
#     >>> get_filetype 'hastur.tar.gz'
#     gz
get_filetype() {
    die_unless_one_argument 'expected exactly one filename'
    string filename="${1}"
    string filetype="${filename##*.}"

    # If this filename has no filetype, then the prior parameter expansion
    # matched the filename itself, in which case we test for and ignore this. 
    is "${filetype}" == "${filename}" si or print "${filetype}"
}

# ....................{ FILENAMES ~ lists                 }....................
# char **get_filenames(char *dirname = '')
#
# Return a stringified list of all files in the passed directory or, if no such
# directory was passed, the current working directory. Callers should
# destringify the return value by calling the expand_list() function.
get_filenames() {
    die_unless_at_most_one_argument 'expected at most one optional dirname'
    string dirname="${1:-${PWD}}"
    die_unless_dir "${dirname}"
    list filenames; filenames=( "${dirname}"/*(N) )
    return_list filenames
}

# ....................{ FINDING                            }....................
# char *which_script(char *script_name)
#
# Get the absolute path to the script with the passed name. If
# there exist multiple such scripts, return the first such script. This function
# generalizes which_autoload() by searching for (in order):
#
# * Any file in the current working directory with such name.
# * Any file in the ${PATH} with such name (i.e., a command).
# * Any file in the ${FPATH} with such name (i.e., an autoload).
which_script() {
    die_unless_at_least_one_argument 'expected exactly one script name'
    list script_paths; script_paths=( "${PWD}" "${path[@]}" "${fpath[@]}" )
    which_autoload "${1}" 'script_paths'
}

# char *which_autoload(
#   char *autoload_name, char **autoload_paths_list_name = 'fpath')
#
# Get the absolute path to the autoloadable script with the passed name. If
# there exist multiple such scripts, return the first such script: e.g.,
#
#     >>> which_autoload zsh-mime-handler
#     /usr/share/zsh/4.3.11/functions/MIME/zsh-mime-handler
which_autoload() {
    die_unless_at_least_one_argument 'expected exactly one autoload name'
    string autoload_name="${1}"
    string autoload_paths_list_name="${2:-fpath}"
    
    # Dismantled, this is:
    #
    # * "autoload_paths_list_name", the name of the list listing all
    #   directories to be searched for the passed autoload.
    # * "(P)", expanding to such list.
    # * "^", iteratively expanding to each such directory.
    # * "/${autoload_name}", concatenating the passed autoload to each such
    #   directory, producing a possible absolute path to such autoload.
    # * "(N)", removing non-extant paths.
    # * "(..)", listing all extant paths.
    list autoload_paths
    autoload_paths=( ${^${(P)autoload_paths_list_name}}/"${autoload_name}"(N) )

    # If no command has the passed name, print an error message and return
    # failure. To permit the caller to recover, do not raise a fatal error.
    if is_empty "${autoload_paths}"; then
        curse "\"${autoload_name}\" not found"
        return_failure
    fi

    # Otherwise, print the first absolute path to this autoload.
    print "${autoload_paths[1]}"
}

# char *which_files(char *filename1, *filename2, ...)
#
# Get the absolute path to the first filename in the list of passed filenames
# which exists: e.g.,
#
#     >>> which_files '/the_ancient.one' '/the_king_in.yellow' '/tmp'
#     /tmp
which_files() {
    die_unless_at_least_one_argument 'expected exactly one filename'

    # Scalarize the list of passed filenames for use in an error message.
    string filenames="'${^@}'"
    
    # Iteratively look for each filename in the passed list.
    string filename
    while is_at_least_one_argument; do
        filename="${1}"; shift

        # If this filename exists, return it.
        if is_file "${filename}"; then
            print  "${filename}"
            return_success
        fi
    done
    
    # Otherwise, no such filename exists. Fail.
    curse "\"${filenames}\" not found"
    return_failure
}

# char *which_commands(char *command_name1, *command_name2, ...)
#
# Get the absolute path to the first command in the list of passed commands
# which exists: e.g.,
#
#     >>> which_commands Council_of_Nicea Constantinople zsh
#     /bin/zsh
# 
# This function is intended to automate selection of commands, in descending
# order of preference. (In the above example, the hypothetical
# "Council_of_Nicea" command would be selected before all following commands on
# systems having the command.)
which_commands() {
    die_unless_at_least_one_argument 'expected exactly one command name'
    
    # Scalarize the list of passed filenames for use in an error message.
    string command_names="'${^@}'"

     # Iteratively look for each command in the passed list.
    string command_path
    while is_at_least_one_argument; do
        # If this command exists, return its absolute path.
        if command_path="$(which_command "${1}")"; then
            print "${command_path}"
            return_success
        fi

        # Otherwise, shift this command off the passed list and try again.
        shift
    done
    
    # Otherwise, no such command exists. Fail.
    curse "\"${command_names}\" not found"
    return_failure
}

# ....................{ FINDING ~ temporaries              }....................
#FIXME: This is probably OS-specific, but perhaps good enough for now. Rename
#"temp_" to "temporary_" everywhere.
# char *which_temp_dir(void)
#
# Get the absolute path to the temporary directory. This is, in descending order
# of preference:
#
# * "${HOME}/tmp", if the current user's home directory has such a subdirectory. 
# * "/tmp", otherwise.
which_temp_home() {
    die_unless_no_arguments 'expected no arguments'
    
    string user_temporary_dir="${HOME}/tmp" root_temporary_dir="/tmp"
    if   is_dir "${user_temporary_dir}"
    then print  "${user_temporary_dir}"
    elif is_dir "${root_temporary_dir}"
    then print  "${root_temporary_dir}"
    else
        die "neither \"${user_temporary_dir}\" or \"${root_temporary_dir}\""\
            "found; no temporary directory found"
    fi
}

# char *which_temp_dir(char *prefix)
#
# Get the absolute path to a temporary path having the passed prefix: e.g.,
#
#     >>> which_temp_dir git_patches
#     /tmp/git_patches~2012-04-18_22-58-34  # assuming today is 2012-04-18
#
# While subtle race conditions may arise with concurrent processing, this path
# is generally unique. This should probably not be depended upon for mission
# critical ZSH scripts, however. (Of course, if you're coding such a mission
# critical script in ZSH, you've probably already gone too far.)
which_temp_dir() {
    die_unless_one_argument 'expected exactly one dirname prefix'
    
    string which_temp_dir
    while true; do
        which_temp_dir="$(which_temp_home)/${1}.path~$(date +'%F_%H-%M-%S')"
        if not is_dir "${which_temp_dir}"; then
            print  "${which_temp_dir}"
            break
        fi
    done
}

# char *which_temp_file(char *prefix)
#
# Get the absolute path to a temporary file having the passed prefix: e.g.,
#
#   # Prints "/tmp/git_patch_file~2012-12-01_18-37-41", for example.
#   which_temp_file git_patch_file
#
# Subtle race conditions may arise, as above.
which_temp_file() {
    die_unless_one_argument 'expected exactly one filename prefix'
    
    string which_temp_file
    while true; do
        which_temp_file="$(which_temp_home)/${1}.file~"$(date +'%F_%H-%M-%S')
        if not is_file "${which_temp_file}"; then
            print  "${which_temp_file}"
            break
        fi
    done
}

# ....................{ MUTATORS ~ dirs                    }....................
# void make_parent_directory_if_not_found(char *path)
#
# Make the parent directory of the passed path, if not found.
make_parent_directory_if_not_found() {
    die_unless_one_argument 'expected exactly one path'
    make_directory_if_not_found "$(dirname "${1}")"
}

# void mv_to_temp_dir(char *path1, char *path2, ...)
#
# Move the passed set of files and/or directories to the "/tmp" directory. For
# Additionally, this suffixing all files and
# paths that already exist in "/tmp/" with the current time. 
mv_to_temp_dir() {
    string target_path source_path source_basename

    # Quote the list of all passed paths with "(q)" to avoid improperly
    # splitting individual paths on whitespace.
    for source_path in "${(q)@}"; do
        source_basename="$(get_basename "${source_path}")"
        target_path="/tmp/${source_basename}"
        is_path "${target_path}" and
            target_path="$(which_temp_home)/$source_basename~$(date +'%F_%H-%M-%S')"
        
        try mv "${source_path}" "${target_path}"
    done
}

#FIXME: Obsolete.
#alias -g get_filenames="( *(N) )"

#lias get_next_argument_as='string __tmp__="${1}"; shift; print "${__tmp__}"'
#lias get_next_argument_as='string __tmp__="${1}"; shift; print "${__tmp__}"'
#       filename="$(get_next_argument)"
#       get_next_argument_as filename

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
