#!/usr/bin/env zsh
# ====================[ filesystem                         ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Filesystem, implementing filesystem-handling.

# ....................{ DEPENDENCIES                       }....................
zimport zeshy/file/file
zimport zeshy/shell/terminal

# ....................{ FORMATTING                         }....................
# char *format(char *device_file1, char *device_file2, ...)
#
# Print the partition table for each passed device or all available devices
# listed by "/proc/partitions" if no devices are passed.
format() {
    # Declare this function to be the top-level "script" for pretty output.
    ZESHY_SCRIPT_NAME='format'

    # Copy passed arguments to local variables and shift off the argument stack.
    die_unless_at_least_two_arguments\
        'expected one device file, filesystem type, optional label, and optional additional arguments'
    string device_file="${1}"
    string filesystem_type="${2}"
    string label="${3}"
    shift; shift; shift

    # Validate passed arguments.
    die_unless_device_file "${device_file}"
    string formatter="mkfs.${filesystem_type}"
    die_unless_installed "${formatter}"\
        "\"${filesystem_type}\" not a recognized filesystem type"

    # Astonishingly, "mkfs.*" commands do *NOT* ask interactive shell users to
    # confirm extremely destructive formats prior to doing so. (Really? Come on,
    # Linux! This isn't obtuse rocket science. It's common decency.)
    if ask_bool "really format \"${device_file}\" as ${filesystem_type}?"; then
        print

        # Format under "-v" for forced verbosity.
        if is_set "${label}"
        then "${formatter}" -L "${label}" -v "${@}" "${device_file}"
        else "${formatter}"               -v "${@}" "${device_file}"
        fi
    fi
}

#FIXME: Obsolete.
#   utter "really format "${device_file}" as ${filesystem_type}? [yes/no] "
#   string is_sure
#   read   is_sure
#   if is "${is_sure}" == y || "${is_sure}" == ye || "${is_sure}" == yes si; then
#       utter      "formatting \"${device_file}\" as ${filesystem_type}..."
 
# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
