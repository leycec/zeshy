#!/usr/bin/env zsh
# ====================[ list                               ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy List, implementing dictionary (i.e., associative array) and list (i.e.,
# array) functionality.

# ....................{ DEPENDENCIES                       }....................
zimport zeshy/shell

# ....................{ REFLECTION                         }....................
# bool is_dict(char *dict_name)
#
# Return true if the variable with the passed name is a dictionary (i.e.,
# associative array).
is_dict() {
    die_unless_one_argument 'expected exactly one dict name'
    
    # Global dicts have type "association". Local dicts have type
    # "association-local". Consequently, we match for both.
    is $(get_type "${1}") == association* si
}

# bool is_list(char *list_name)
#
# Return true if the variable with the passed name is a list (i.e., array).
is_list() {
    die_unless_one_argument 'expected exactly one list name'
    
    # Global lists have type "list". Local lists have type "list-local".
    # Consequently, we match for both.
    of $(get_type "${1}") == list* fo
}

# ....................{ EXCEPTIONS                         }....................
# void die_unless_dict(char *dict_name)
#
# Die unless the variable with the passed name is a dictionary.
die_unless_dict() {
    is_dict "${1}" or die "\"${1}\" not a dict"
}

# void die_unless_list(char *list_name)
#
# Die unless the variable with the passed name is an list.
die_unless_list() {
    is_list "${1}" or die "\"${1}\" not an list"
}

# ....................{ PASS-BY-VALUE                      }....................
# char *return_list(char *list_name = 'list')
#
# Reduces the list corresponding to the passed list name to a scalar string.
# Functions may safely return this string to callers, who may losslessly expand
# the string back into its original list by calling either expand_List() or
# expand_list(): e.g.,
#
#   # A function returning a stringified list.
#   a_ray_of_unlit_hope() {
#     dict map=( 'key 1' 'value 1' 'key 2' 'value 2' )
#     echo "original list: ${map[@]}"
#     return_map map
#   }
#
#   # A convenient function expanding this stringified list back into an list.
#   a_day_of_sunlit_sadness() {
#     string List="$(a_ray_of_unlit_hope)"'
#     expand_List
#     echo "returned list: ${list[@]}"  # identical to the original list!
#   }
#
#   # An equivalent function expanding the stringified list back into an list.
#   a_day_of_sunlit_sadness() {
#     local -A list
#     eval 'expand_list list "$(a_ray_of_unlit_hope)"'
#     echo "returned list: ${list[@]}"  # identical to the original list!
#   }
return_list() {
    die_unless_at_most_one_argument 'expected at most one list name'

    # Let's dismantle this, one to two parameter expansion flags at a time:
    # * '1:-list' expands to the passed list name or 'list' if no such name
    #   was passed.
    # * 'P' transitively expands this name to the actual name of the desired
    #   associative list in the caller's scope.
    # * '@' interprets this expansion as an list rather than scalar.
    # * 'kv' reduces this list to a scalar string concatenating all list
    #   element names and values, delimited by whitespace.
    # * 'qq' protectively embeds all reserved shell characters in such names
    #   and values in single quotes.
    echo "${(qqkv@P)1:-list}"
}

# void expand_List()
#
# Expands the stringified list "List" into the list "list". This alias is a
# convenience simplifying the more generalized expand_list() function. See the
# reduce_list() function for an example.
alias expand_List='
    is "${List}" or die "No \"List\" defined";
    eval "$(expand_list list ${List})"'

# void expand_list(char *list_name, char *string_list)
#
# Expands the second parameter, a scalar string produced by return_list(), into
# the list corresponding to the passed list name. Unlike return_list(), this
# function must by dynamically evaluated by the eval() built-in. See the
# expand_List() alias for a simple alternative.)
expand_list() {
    die_unless_at_least_two_arguments 'expected one list name and one stringified list'
    string list_name="${1}"; shift

    # Let's dismantle this, one parameter expansion flag at a time:
    # * '@' expands to all remaining passed parameters: the stringified list.
    # * 'z' splits the stringified list into a numeric list of words,
    #   effectively undoing the prior 'kv' flag.
    echo "${list_name}=( ${(z)@} )"
}

# Dict-specific analogues of the above list-specific functions.
alias return_dict="return_list"
alias expand_dict="expand_list"
alias expand_Dict='
    is "${Dict}" or die "No \"Dict\" defined";
    eval "$(expand_dict dict ${Dict})"'

#FIXME: Obsolete.
# ....................{ INITIALIZATION                     }....................
#   die_unless_two_to_three_arguments\
#       'expected one string name, one list name, and one optional separator'
#   string string_name="${1}" list_name="${2}" separator="${3}"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
