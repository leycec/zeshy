#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *conditional function definers* (i.e., functions dynamically defining
other functions with bodies depending on current system and/or user state).
/---

#FIXME: Given the increasing versatility of function prototype parsing, the
#declarers defined below benefit increasingly less from requiring a function
#body prefix be passed. Let's ponder excising such prefix entirely, shall we? 
#Requiring an empty string be passed is rendering the codebase increasingly
#difficult to read and hence maintain. However, do *NOT* consider rendering
#such prefix optional, as we *REALLY* need to be sure all remaining passed
#arguments compose key-value map pairs.
#
#If push came to shove and there *REALLY* exists a demonstrable need in some
#functions for such prefix, we could always either:
#
#* Have such functions be declared in an anonymous function declaring string
#  locals manually interpolated into the fore of each function body. Simple.
#* Define new declarers accepting such prefix (e.g.,
#  :declare_func_with_body_prefix_if_or_noop()).
#FIXME: Naturally, the above is best done *AFTER* adding support for function
#attribute "<localize>", eliminating the last demonstrable reason to want a
#function body prefix.

# ....................{ DECLARERS                          }....................
declare_function_with_stdin <<'/---'
:void :declare_func_if_or_noop[
    args = (
        :string func_prototype,
        :string func_body_prefix,
        :string if_test1, :string then_func_body1, ...),
    stdin = (:string asciidoc)]

Declare and define the function identified by the passed function prototype as
the first function body whose preceding condition succeeds, prefixed by the
passed function body prefix and documented by the help string passed on
standard input (e.g., as a here-document or -string). If all such conditions
fail, success is reported without declaring, defining, or documenting such
function. See :define_func_if_or_noop() for further details: e.g.,

.:declare_func_if_or_noop()
==========================================
[source]
------------------------------------------
>>> :declare_func_if_or_noop :output_refusal\
...     'die_if_args'\
...     ':is despair == life :si' ':output_string\
...        "I refuse to accept despair as the final response to the ambiguities
...         of history."'\
...     ':is immorality == life :si' ':output_string\
...        "I refuse to accept the idea that the \"is-ness\" of man''s present
...         nature makes him morally incapable of reaching up for the eternal
...         \"ought-ness"\" that forever confronts him."'\
...     ':else' ':output_string\
...        "I refuse to accept the idea that man is mere flotsam and jetsam in
...         the river of life, unable to influence the unfolding events which
...         surround him."' <<'/---'
... I refuse to accept the view that mankind is so tragically bound to the
... midnight of racism and war that the bright daybreak of peace and
... brotherhood can never become a reality.
... /---
>>> :print_function :output_refusal
function :output_refusal() {
    (( # )) && die "Expected no arguments."
    :output_string\
       "I refuse to accept the idea that man is mere flotsam and jetsam in
        the river of life, unable to influence the unfolding events which
        surround him."
}
------------------------------------------
==========================================
/---
function :declare_func_if_or_noop() {
    die_unless_args_4_or_more\
        'Expected one function prototype, one function body prefix, and one or more pairs of one test and one function body.'
    ::declare_func_if_defined_by_func_or_noop :define_func_if "${@}"
}

:func_ ':void ::declare_func_if_defined_by_func_or_noop[
    args =  (
        :string definer_func_name,
        :string func_prototype,
        :string definer_func_arg1?, ...),
    stdin = (:string func_asciidoc)]' :func{
    # Localize arguments.
    :string definer_func_name="${1}" func_prototype="${2}"
    shift_args_2
    :func.die_unless "${definer_func_name}"

    # Parse such prototype into corresponding globals, throwing an exception if
    # any function such prototype declares already exists.
    ::func_.start "${func_prototype}"

    # Attempt to define such functions or silently return.
    :string func_name
    for     func_name ("${ZESHY__FUNC_NAMES__[@]}") {
        # Attempt to define such function or return silently otherwise.
        "${definer_func_name}" "${func_name}" "${@}" or report_success
    }

    # Declare such functions *AFTER* successfully defining such functions.
    ::func_.stop
}:func <<'/---'
Declare and define the function identified by the passed function prototype by
passing all remaining arguments to the passed high-level definer function
(e.g., :define_func_if()), documented by the help string passed on standard
input (e.g., as a here-document or -string). If such call fails to define such
function, success is reported without declaring, defining, or documenting such
function. This low-level utility function is intended to be called only by
high-level declarers (e.g., :declare_func_if()).
/---

# ....................{ DEFINERS                           }....................
declare_function_with_stdin <<'/---'
[status = :bool] :define_func_if(
    :string func_name,
    :string func_body_prefix,
    :string if_test1, string then_func_body1, ...)

Define the passed function as the first *function body* (i.e., arbitrary code
implementing such function) whose preceding *condition* (i.e., arbitrary code
interpretable as an `if` statement test implicitly delimited by `{` and `}`)
succeeds, prefixed by the passed *function body prefix* (i.e., arbitrary code
unconditionally prepended to such function's implementation). If all such
conditions fail, success is reported without defining such function: e.g.,

.:define_func_if()
==========================================
[source]
------------------------------------------
>>> :define_func_if :output_disorder\
...     'die_if_args'\
...     ':is heathen == cynic :si' ':output_string\
...         "A benighted creature who has the folly to worship something that he
...          can see and feel."'\
...     ':is mad == cynic :si' ':output_string\
...         "Affected with a high degree of intellectual independence."'\
...     ':is nihilist == cynic :si' ':output_string\
...         "A Russian who denies the existence of anything but Tolstoi. The
...          leader of the school is Tolstoi."'\
...     ':else' ':output_string\
...         "CYNIC, n. A blackguard whose faulty vision sees things as they are,
...          not as they ought to be."'
>>> :print_function :output_disorder
function :output_disorder() {
    (( # )) && :die "Expected no arguments."
    :output_string\
       "CYNIC, n. A blackguard whose faulty vision sees things as they are,
        not as they ought to be."
}
------------------------------------------
==========================================

== Else Conditions ==

This function treats any condition equal to `:else` or `true` as an *else
condition* (i.e., fallback, such that if no prior condition succeeds, the passed
function will be defined as the function body following such condition). Any
conditions following such condition will be ignored. See the example above.
/---
function :define_func_if() {
    # Localize arguments, suffixed to protect code evaluated below.
    die_unless_args_4_or_more\
        'Expected one function name, one function body prefix, and one or more pairs of one test and one function body.'
    :string\
        func_name__dfion="${1}"\
        func_body_prefix__dfion="${2}"\
        func_body__dfion
    :map test_to_func_body__dfion
    shift_args_2

    # If the number of remaining arguments is *NOT* even and hence does *NOT*
    # constitute a map, throw an exception. See :die_unless_arg_count_even()
    # for further details. (Such exception handler calls the currently undefined
    # tester :is_int_even() and hence cannot be called here.)
    (( # % 2 == 0 )) or :die\
        'Expected each test to be paired with a function body.'

    # For each paired condition and function body, test if such condition
    # succeeds and, if so, define such function as such body.
    :string test__dfion func_body_then__dfion
    for     test__dfion func_body_then__dfion ("${@}") {
        # If such condition is "else", convert such condition to "true",
        # guaranteeing such condition to succeed as desired.
        if :is "${test__dfion}" == ':else' :si {
            test__dfion='true'
        }

        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Synchronize with :define_func_if_pathable().
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        # If such condition fails, such test was either syntactically invalid
        # *OR* syntactically valid and genuinely failed. Discriminate between
        # the two. In the former case, throw an exception. In the latter case,
        # skip to the next condition.
        { eval "${test__dfion}" } :silent_stderr or {
            # Capture such output, ignoring the expected failure.
            :string test_error__dfion; test_error__dfion="$(
                { eval "${test__dfion}" } :to_stdout or ignore_failure)"

            # If such test failed with no error, such test is syntactically
            # valid and genuinely failed. Skip to the next command.
            :is -n "${test_error__dfion}" :si or continue

            # Else, such test is syntactically invalid. Convert such
            # nonfatal error into a fatal exception. For readability, strip the
            # prefixing "zsh: " from such error message.
            :die 'Function '${func_name__dfion}'() test "'${test__dfion}'" invalid:'${ZESHY_ASCII_NEWLINE}${test_error__dfion#zsh: }
        }

        # Else, such condition succeeded. Enable the corresponding body.
        func_body__dfion="${func_body_then__dfion}"

        # Cease iteration.
        break
    }

    # If such body was *NOT* defined above, report failure.
    :is -n "${func_body__dfion}" :si or report_failure

    # Else, define such function as such body.
    :define_func "${func_name__dfion}" \
"    ${func_body_prefix__dfion}
    ${func_body__dfion}"
}

# --------------------( WASTELANDS                         )--------------------
    # If such definer is undefined, throw an exception. See
    # :func.die_unless() for further details.
    # (( ${+functions[${definer_func_name}]} )) || :die\
    #     'Function '${definer_func_name}'() undefined.'

#FUXME: Not quite right. Declared functions are declared with a valid prototype
#and hence should *NOT* be required to perform their own argument validation.
#To do so on behalf of callers, therefore, we'll want to do the following:
#
#* Shift ::declare_func_with_definer() to a more general parcel -- say
#@{*-func/func}.
#* Refactor such function to call ::func_.start() followed by
#  ::func_.stop() (rather than declare_func_with_stdin). To do so, we'll
#  probably want to define in the same parcel a new helper aggregating such
#  pair of calls. Where else in the codebase do we repeat such pair of calls?
#FUXME: Hmm; we already have a :declare_func() function. Shouldn't we be
#calling that somewhere here?

    # # Validate sanity.
    # die_unless_args_2_or_more\
    #     'Expected one definer function name, one function prototype, and zero or more arguments passed to such definer.'
    # :string\
    #     func_name_definer="${1}"\
    #     func_prototype="${2}"\
    #     func_name\
    #     func_help

    # # Function name declared by such prototype.
    # :set_string_to_func_prototype_name\
    #     func_name "${func_prototype}"

    # # Documentation passed on standard input.
    # :set_string_to_stdin_help func_help

    # # Undefine such function if currently defined, guaranteeing that testing
    # # whether such function is defined after attempting to do so succeeds only
    # # such attempt succeeds. See :undefine_func() for further details.
    # { unfunction -- "${func_name}" } :silent_stderr

    # # Attempt to define such function.
    # "${func_name_definer}" "${func_name}" "${@}"

    # #FUXME: Patch :declare_func() to accept an optional prototype argument, as
    # #with :declare_alias_simple(). Then call such function like so below:
    # #
    # #   :declare_func "${func_prototype}" <<<"${func_help}"
    # #
    # #The approach below *DOES* work, of course, but assumes somewhat too much
    # #intimate knowledge of low-level documentation details.

    # # If such function is defined, such attempt succeeded. In such case,
    # # document such function. See :func.is() for further details.
    # if (( ${+functions[${func_name}]} )) {
    #     declare_function_with_stdin <<<"${func_prototype}"$'\n\n'"${func_help}"
    # }

        #FUXME: Utter nonsense. The above call should report failure if such
        #definition fails.
        # If such definition 
        # (( ${+functions[${func_name}]} )) ||

#FUXME: Improve documentation. Specifically, note:
#
#* This function assumes such prototype to declare only a single function,
#  throwing an exception otherwise.
# If such prototype declares two or more functions, an exception is thrown. 

    # Validate sanity.
    # die_unless_args_4_or_more\
    #     'Expected one function prototype, one function body prefix, and one or more pairs of one test and one function body.'
    # :string\
    #     func_prototype__efion="${1}"\
    #     func_name__efion\
    #     func_help__efion
    # shift_arg

    # # Function name declared by such prototype.
    # :set_string_to_runnable_prototype_name\
    #     func_name__efion "${func_prototype__efion}"

    # # Documentation passed on standard input.
    # :set_string_to_stdin_help func_help__efion

    # # Undefine such function if currently defined, guaranteeing that testing
    # # whether such function is defined after attempting to do so succeeds only
    # # such attempt succeeds. See :undefine_func() for further details.
    # unfunction -- "${func_name__efion}"

    # # Attempt to define such function.
    # :define_func_if_or_noop "${func_name__efion}" "${@}"

    # #FUXME: Patch :declare_func() to accept an optional prototype argument, as
    # #with :declare_alias_simple(). Then call such function like so below:
    # #
    # #   :declare_func "${func_prototype__efion}" <<<"${func_help__efion}"
    # #
    # #The approach below *DOES* work, of course, but assumes somewhat too much
    # #intimate knowledge of low-level documentation details.
    # #FUXME: Similarly refactor all other function declarers (e.g.,
    # #:declare_func_if_pathable_in_list_order_or_noop()).

    # # If such function is defined, such attempt succeeded. In such case,
    # # document such function. See :func.is() for further details.
    # if (( ${+functions[${func_name__efion}]} )) {
    #     :declare_func <<<"${func_prototype__efion}"$'\n\n'"${func_help__efion}"
    # }

    #FUXME: Similarly refactor all other function declarers (e.g.,
    #:declare_func_if_pathable_in_list_order_or_noop()).

    #FUXME: How exactly do we implement this function? Ideally,
    #:declare_func_if_or_noop() should set a passed string variable to the name
    #of the function... Wait, no. We simply need a new
    #:declare_func_if() function reporting failure... Wait. Even that's a bit
    #overboard. Just:
    #
    #* Coercively undefine such function.
    #* Call :declare_func_if_or_noop() as below.
    #* Test whether such function has been defined. If so, call
    #  :declare_func().
    #FUXME: Wait. This function must accept a function prototype rather than
    #name, necessitating a bit of manual effort, here. We'll need to convert
    #from the former to the latter (as well as ensuring that only one function
    #name is declared in such prototype). *sigh*

# >>> :list ZESHY_DISORDERS; ZESHY_DISORDERS=( heathen mad nihilist )
# >>> :undefine_map_key commands heathen mad nihilist

# Define the passed function as the concatenation of the passed function body
# prefix, the function body following the first passed *pathable command name*
# (i.e., in the current ${PATH}) tested in the order such commands appear in the
# passed list, and the passed function body suffix if at least one such command
# is pathable or return silently otherwise: e.g.,
# 
# While
# :define_func_if_pathable_or_noop() tests the pathability of such commands in
# the passed order, this function tests the pathability of such commands in the
# order such commands appear in the passed list (whose items must thus equal
# passed command names). 

# If there exist more such items than names, an exception is thrown. If there exist fewer such items than names, all.
# such list is larger than the passed such names, an exception is thrown. If such list is smaller
# 
# All items of the passed list must equal passed command names The passed list 

# Define the passed function as passed function body prefix followed by the
# function body following the first passed *pathable command name* (i.e., command
# ) tested in the passed order if at least one such command is
# pathable or return silently otherwise. See
# :define_func_if_pathable_in_list_order_or_noop() for further details.

# and suffixed by the
# passed *function body suffix* (i.e., arbitrary code unconditionally appended to
# such function's implementation)
    # :output_string "command count: ${#command_name_to_function_body__dfipilo}"
    # for command_name function_body (
    #     "${(kv@)command_name_to_function_body__dfipilo}") {
    #     :output_string "${command_name} -> ${function_body}"
    # }
    # print "3: ${3}\n4: ${4}"

 # avoid defining such function. Do *NOT* report
    # failure and hence induce an exception, as this function is commonly called
    # during digest compilation from the top-level.
# declare_function_with_stdin <<'/---'
# void :define_func_if_pathable_or_noop(
#     string function_name,
#     string function_body_prefix,
#     string function_body_suffix,
#     string command_name1, string function_body1, ...,
#     string pathables_list_name)
# 
# Define the passed function whose implementation requires any one of several
# *command alternatives* (i.e., external commands offering similar functionality)
# to run the first such command in the passed list of such alternatives that is
# currently *pathable* (i.e., in the current command hash, typically synonymous
# with in the current user's ${PATH}), given:
# 
# * An optional passed list of such alternatives, in descending order of
#   preference. If _not_ passed, such order defaults to the order in which such
#   conditions are defined and hence tested.
# * The passed *function body prefix* (i.e., code to be unconditionally prepended
#   to the command-specific function body).
# * The passed *function body suffix* (i.e., code to be unconditionally appended
#   to the command-specific function body).
# * A map from each command name in the passed list of such alternatives to the
#   command-specific function body running such command. For convenience, such map
#   should be passed as pairs of additional arguments rather than as an actual
#   map.
# 
# For example:
# 
# .:define_func_if_pathable()
# ==========================================
# [source]
# ------------------------------------------
# >>> :list ZESHY_ALTERNATIVES; ZESHY_ALTERNATIVES=(
# ...     anarchism capitalism communism socialism )
# >>> commands[anarchism]='true'
# >>> :undefine_map_key commands capitalism communism socialism
# >>> :define_func_if_pathable\
# ...     :output_alternative\
# ...     'die_if_args' ''\
# ...     'anarchism' ':output_string\
# ...         "Political theory founded on the observation that since few men are
# ...          wise enough to rule themselves, even fewer are wise enough to rule
# ...          others."'\
# ...     'capitalism' ':output_string "Under capitalism, man exploits man."'\
# ...     'communism'  ':output_string "Under communism, it's just the opposite."'\
# ...     'socialism'  ':output_string\
# ...         "Socialism is the only system for nationalizing compassion so that
# ...          individuals may be done with it."'\
# ...     ZESHY_ALTERNATIVES
# >>> :print_function :output_alternative
# function :output_alternative() {
#     (( # )) && die "Expected no arguments."
#     :output_string\
#         "Political theory founded on the observation that since few men are
#          wise enough to rule themselves, even fewer are wise enough to rule
#          others."'
# }
# >>> :output_alternative
# Political theory founded on the observation that since few men are
# wise enough to rule themselves, even fewer are wise enough to rule
# others.
# ------------------------------------------
# ==========================================
# /---
# function :define_func_if_pathable_or_noop() {
#     # Validate sanity.
#     die_unless_args_5_or_more\
#         'Expected one function name, one function body prefix, one function body suffix, one or more pairs of one command name and one function body, and optional pathables list name.'
#     :string\
#         function_name__dfip="${1}"\
#         function_body_prefix__dfip="${2}"\
#         function_body_suffix__dfip="${3}"
#     shift_args_3
# 
#     # Define a private variable tested by
#     # :define_func_if_pathable_in_list_order_or_noop(). See such function for
#     # further details.
#     zeshy_is_in_test_order__
# 
#     #FIXME: Optional arguments are terrible, rendering the resulting function
#     #fragile and difficult to reliably extend. Instead, define a new function
#     #:define_func_if_pathable_in_list_order(). While this function could
#     #probably be redefined to call such function, the most efficient
#     #refactoring is probably to also define a new private function:
#     #
#     #"void ::define_func_if_map_pathable_in_list_order(
#     #    string function_name,
#     #    string function_body_prefix,
#     #    string function_body_suffix,
#     #    string command_to_function_body_map_name,
#     #    string pathables_list_name)"
#     #
#     #Then refactor both this function and
#     #:define_func_if_pathable_in_list_order() to call
#     #::define_func_if_map_pathable_in_list_order(). Nice, possibly?
# 
#     # If the number of passed arguments is even, such list name was passed.
#     if (( # % 2 == 0 )) {
#         # Localize and remove such list name from the argument list.
#         list_name_pathables__dfip="${@[-1]}"
#         pop_arg
# 
#         # If such list is not, throw an exception.
#         is "${(tP)list_name_pathables__dfip-}" == 'array'* si or die\
#              '${'${list_name_pathables__dfip}'} undefined or not a list.'
#     }
# 
#     # If the number of remaining arguments is *NOT* even and hence does *NOT*
#     # constitute a map from command name to function body, throw an exception.
#     (( # % 2 == 0 )) or die 'Expected even number of arguments.'
# 
#     # Localize such map.
#     command_name_to_function_body__dfip=( "${@}" )
# 
#     # If such list name was *NOT* passed, default such name to a local list of
#     # all command names to be tested in the passed order. See
#     # set_list_to_map_keys() for further details.
#     if [[ -z "${list_name_pathables__dfip}" ]] {
#         :list list_pathables__dfip
#         list_pathables__dfip=( ${(k@)command_name_to_function_body__dfip} )
#         list_name_pathables__dfip='list_pathables__dfip'
#     }
# 
#     # For each command in the passed list of command alternatives, test if such
#     # command exists and, if so, define such function with such command.
#     :bool is_pathable__dfip
#     :string command_name__dfip
#     for     command_name__dfip ("${(@P)list_name_pathables__dfip}") {
#         # If such map contains no such command, throw an exception.
#         (( ${+command_name_to_function_body__dfip[${command_name__dfip}]} )) or die\
#             'Command-dependent function '${function_name__dfip}'() command "'${command_name__dfip}'" unimplemented.'
# 
#         # If such command contains whitespace, assume such command to be a
#         # conditional testing the existence of two or more commands. To do so,
#         # programmatically convert such string into a true zsh test (e.g., from
#         # "catabolic and collapse" to
#         # "(( ${+commands[catabolic]} )) && (( ${+commands[collapse]} ))").
#         if is "${command_name__dfip}" == *' '* si {
#             # To permit map lookups below, preserve the original command string
#             # by performing modifications on this local copy.
#             :string test__dfip="${command_name__dfip}"
# 
#             # If such conditional contains inherently dangerous shell-reserved
#             # characters, throw an exception. This includes "`", the obsoleted
#             # command substitution prefix, and "$", both the expansion and new
#             # command substitution prefix. While command substitutions are
#             # patently unsafe (e.g., "$(rm -rf /)"), expansions also support
#             # dynamic evaluation of arbitrary code (e.g.,
#             # ":string evil='rm -rf /'; : ${(e)evil}") and hence are little
#             # safer. Prohibit both by prohibiting their prefixing characters.
#             is "${test__dfip}" != *['$`'*] si or die\
#                 'Command-dependent function '${function_name__dfip}'() test "'${test__dfip}'" contains unsafe shell-reserved characters "$" and/or "`".'
# 
#             # Globally replace in such conditional (in order):
#             #
#             # * All space-delimited words "or" and "and" with "||" and "&&".
#             #   Since both "or" and "and" are valid shell identifiers, do so
#             #   *BEFORE* replacing shell identifier characters.
#             # * All longest contiguous substrings of shell identifier characters
#             #   (signifying unquoted command names) with a test testing the
#             #   existence of such command. While command names can technically
#             #   contain arbitrary characters, we currently only support common
#             #   command names containing no shell-reserved characters and hence
#             #   requiring no quoting or escaping.
#             test__dfip="${${${test__dfip// ##or ##/ || }// ##and ##/ && }//(#m)[[:IDENT:]]##/(( \${+commands[${MATCH}]\} ))}"   # hack vim highlighting issues: "}"
#             # print "command conditional: ${test__dfip}" 1>&2
# 
#             # Skip to the next command unless such test dynamically succeeds.
#             # If such test fails, such test was either syntactically invalid
#             # *OR* syntactically valid and genuinely failed. Discriminate
#             # between the two and, in the former case, throw an exception.
#             { eval "${test__dfip}" } :silent_stderr or {
#                 # Capture such output, ignoring the expected failure.
#                 :string test_error__dfip; test_error__dfip="$(
#                     { eval "${test__dfip}" } :to_stdout or ignore_failure)"
# 
#                 # If such test failed with no error, such test is syntactically
#                 # valid and genuinely failed. Skip to the next command.
#                 is -n "${test_error__dfip}" si or continue
# 
#                 # Else, such test is syntactically invalid. Convert such
#                 # nonfatal error into a fatal exception. For readability, strip the
#                 # prefixing "zsh: " from such error message.
#                 die 'Command-dependent function '${function_name__dfip}'() test "'${test__dfip}'" invalid:'$'\n'${test_error__dfip#zsh: }
#             }
#         # Else, such command contains no whitespace. Skip to the next command
#         # unless such command is pathable. See is_pathable() for further details.
#         } else {
#             (( ${+commands[${command_name__dfip}]} )) or continue
#         }
# 
#         # Since the current iteration did *NOT* continue, such command or
#         # commands is pathable. Define such function with such command.
#         :define_func "${function_name__dfip}" \
# "    ${function_body_prefix__dfip}
#     ${command_name_to_function_body__dfip[${command_name__dfip}]}
#     ${function_body_suffix__dfip}"
# 
#         # Cease iteration.
#         report_success
#     }
# 
#     # If no such command exists, avoid defining such function. Do *NOT* report
#     # failure and hence induce an exception, as this function is commonly called
#     # during digest compilation from the top-level.
#     report_success
# }

# >>> :output_alternative
# Political theory founded on the observation that since few men are
# wise enough to rule themselves, even fewer are wise enough to rule
# others.
 # In such case, list name is nonempty, throw an exception unless the
    # corresponding variable exists and is of type list.
    # if [[ -n "${list_name__dfipilo}" ]] {
    # is "${(tP)map_name__dfipilo-}" == 'association'* si or die\
    #      'Map ${'${map_name__dfipilo}'} undefined or not a map.'

# declare_function_with_stdin <<'/---'
# void ::define_func_if_map_pathable_in_list_order(
#     string function_name,
#     string function_body_prefix,
#     string function_body_suffix,
#     string command_name_to_function_body_map_name,
#     string command_names_list_name)
# 
# Define the passed function as the concatenation of the passed function body
# prefix, the value of the first key of the passed map that is pathable (tested
# in the order that such keys appear in the passed list), and the passed function
# body suffix if at least one such key is pathable or return silently otherwise.
# See :define_func_if_pathable_in_list_order() for further details.
# /---
# function ::define_func_if_map_pathable_in_list_order() {
#     # Validate sanity.
#     die_unless_args_5\
#         'Expected one function name, one function body prefix, one function body suffix, one map name, and one list name.'
#     :string\
#         function_name__dfimpilo="${1}"\
#         function_body_prefix__dfimpilo="${2}"\
#         function_body_suffix__dfimpilo="${3}"\
#         map_name__dfimpilo="${4}"\
#         list_name__dfimpilo="${5}"
#     :bool is_pathable__dfimpilo
# 
#     # If such variables are not of the expected types, throw exceptions.
#     is "${(tP)map_name__dfimpilo-}" == 'association'* si or die\
#          'Map ${'${map_name__dfimpilo}'} undefined or not a map.'
#     is "${(tP)list_name__dfimpilo-}" == 'array'* si or die\
#          'List ${'${list_name__dfimpilo}'} undefined or not a list.'
# 
#     # For each command in such list, test if such command is pathable and, if
#     # so, define such function in context of such command.
#     eval '
#     :string command_name__dfimpilo
#     for     command_name__dfimpilo ("${(@P)list_name__dfimpilo}") {
#         # If such map contains no such command, throw an exception.
#         (( ${+map_name__dfimpilo[${command_name__dfimpilo}]} )) or die\
#             ''Command-dependent function ''${function_name__dfimpilo}''() command "''${command_name__dfimpilo}''" unimplemented.''

#FUXME: Revise to no longer accept an optional final "else" fallback.

    # If the number of remaining arguments is odd and hence does *NOT*
    # constitute a map, the last such argument is the fallback body. For
    # simplicity, default the current body to such fallback. If at least one
    # such condition succeeds, the iteration below will override such default
    # with the corresponding body.
    # if (( # % 2 == 1 )) {
    #     function_body__dfi="${@[-1]}"
    #     pop_arg
    # }

# >>> :output_disorder
# CYNIC, n. A blackguard whose faulty vision sees things as they are,
# not as they ought to be.

# _or_ to the fallback function body if no such condition succeeds and
# such body was passed, prefixed by the passed *function body prefix* (i.e.,
# arbitrary code to be unconditionally prepended to such body) and suffixed by the
# passed *function body suffix* (i.e., arbitrary code to be unconditionally
# appended to such body). If no such condition succeeds _and_ no fallback function
# body was passed, such function will _not_ be defined: e.g.,

    # If no such condition succeeded *AND* a fallback body was passed, enable
    # such body.
    # if is -z "${function_body__dfi}" and
    #       -n "${function_body_fallback__dfi}" si {
    #     function_body__dfi="${function_body_fallback__dfi}"
    # }
# 
#     pop_arg
# 
#     # If the number of remaining arguments is *NOT* even and hence does *NOT*
#     # constitute a map, throw an exception.
#     (( # % 2 == 0 )) or die\
#         'Expected each test to be paired with a function body.'

    # Remove such arguments from the argument list. All remaining arguments
    # constitute the map from command name to function body.

    # If no such condition succeeded *AND* a fallback body was passed, enable
    # such body.
    # if is -z "${function_body__dfi}" and
    #       -n "${function_body_fallback__dfi}" si {
    #     function_body__dfi="${function_body_fallback__dfi}"
    # }

                # If such test failed with no error, such test is syntactically
                # valid and genuinely failed. Skip to the next command.
                # if is -z "${test_error__dfip}" si {
                #     continue
                # # Else, such test is syntactically invalid. Convert such
                # # nonfatal error into a fatal exception.
                # } else {
                #     # For readability, strip the prefixing "zsh: ".
                #     test_error__dfip="${test_error__dfip#zsh: }"
                #     die 'Command-dependent function '${function_name__dfip}'() test "'${test__dfip}'" failed:'$'\n'${test_error__dfip}
                # }
