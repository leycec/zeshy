#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *runnable prototypes* (i.e., strings documenting function and alias
signatures -- including attributes, return types, names, and argument types and
order -- in a machine-readable format resembling that of conventional C
function prototypes).
/---

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void :set_string_to_runnable_prototype_name(
    string string_name,
    string runnable_prototype)

Set the passed string variable to the single runnable name matched with the
passed PCRE from the passed *runnable prototype* (i.e., string documenting a
function or alias signature -- including attributes, return types, names, and
argument types and order -- in a machine-readable format resembling that of
conventional C function prototypes). If such prototype declares two or more
names (e.g., with `{...,...}` syntax), an exception is thrown.

== Prototype PCRE ==

Such PCRE must capture only a single runnable name into the first match group
(i.e., `${match[1]}`). While such PCRE may optionally match and capture
additional prototype syntax, this function ignores all but such name.
/---
function :set_string_to_runnable_prototype_name() {
    # Validate sanity.
    die_unless_args_2\
        'Expected one string name and one runnable prototype.'
    :string string_name__sstrpn="${1}" prototype__sstrpn="${2}"
    :is -n "${prototype__sstrpn}" :si or :die 'Runnable prototype empty.'

    # If such variable is not a string, throw an exception. See
    # die_unless_string() for further details.
    :is "${(tP)string_name__sstrpn-}" == 'scalar'* :si or :die\
        'Variable ${'${string_name__sstrpn}'} undefined or not a string.'

    # If such prototype is syntactically invalid, throw an exception.
    :is "${prototype__sstrpn}" =~\
        "${ZESHY_PROTOTYPE_RUNNABLE_NAME_PCRE}" :si or :die\
        'Runnable prototype "'${prototype__sstrpn}'" invalid or declares two or more runnable names.'

    # If such name was *NOT* captured into ${match[1]}, throw an exception.
    (( ${#match} )) or :die\
        'Runnable prototype "'${prototype__sstrpn}'" name uncaptured.'

    # Set such string to such name. See :set_string_to_string() for further
    # details.
    :noop "${(P)string_name__sstrpn::=${match[1]}}"
}

# --------------------( WASTELANDS                         )--------------------
    # die_unless_args_3\
    #     'Expected one string name, one runnable prototype, and one runnable prototype PCRE.'
    # :string\
    #     string_name__sstrpn="${1}"\
    #     prototype__sstrpn="${2}"\
    #     prototype_pcre__sstrpn="${3}"
    # :is -n "${prototype__sstrpn}" :si or :die\
    #     'Runnable prototype empty.'
    # :is -n "${prototype_pcre__sstrpn}" :si or :die\
    #     'Runnable prototype PCRE empty.'

#FUXME: Implement :set_string_to_func_prototype_name().
#FUXME: Implement :set_string_to_alias_prototype_name().
#, string runnable_prototype_pcre

# Else, capture such name.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :set_string_to_func_prototype_name().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
