#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *glob-based list item replacers* (i.e., functions replacing list items
substrings matching extended glob expressions).
/---

#FIXME: Add nongreedy versions of such functions.

# ....................{ REPLACERS                          }....................
#FIXME: Add examples.
declare_function_with_stdin <<'/---'
<globbable> void :replace_list_item_text_matching_glob_with_string(
    string list_name,
    string glob,
    string replacement)

Replace all passed list item substrings matching the passed glob with the
passed replacement string: e.g.,

.:replace_list_item_text_matching_glob_with_string()
==========================================
[source]
------------------------------------------
------------------------------------------
==========================================
/---
function :replace_list_item_text_matching_glob_with_string() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one list name, one glob, and one replacement string.'
    :string\
        list_name__rlitmgbs="${1}"\
        glob__rlitmgbs="${2}"\
        replacement__rlitmgbs="${3}"

    # Replace such list item substrings.
    set_list_to_evaluation\
        "${list_name__rlitmgbs}"\
        '${(X)'${list_name__rlitmgbs}'//${~glob__rlitmgbs}/${replacement__rlitmgbs}}'
}

declare_function_with_stdin <<'/---'
<globbable> void :replace_list_item_text_matching_glob_with_expansion(
    string list_name,
    string glob,
    string replacement_expansion)

Replace all passed list item substrings matching the passed glob with the
passed replacement string dynamically reexpanded in the context of each such
match. For convenience, this function implicitly enables *ungrouped glob
capturing* (i.e., sets scalar globals ${MATCH}, ${MEND}, and ${MBEGIN} on each
successful match): e.g.,

.:replace_list_item_text_matching_glob_with_expansion()
==========================================
[source]
------------------------------------------
------------------------------------------
==========================================
/---
function :replace_list_item_text_matching_glob_with_expansion() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one list name, one glob, and one replacement expansion string.'
    :string\
        list_name__rlitmgbe="${1}"\
        glob__rlitmgbe="${2}"\
        replacement_expansion__rlitmgbe="${3}"

    # Set scalar globals on successful matches (e.g., ${match}).
    :enable_glob_capturing_ungrouped glob__rlitmgbe

    # Replace such list item substrings.
    set_list_to_evaluation\
        "${list_name__rlitmgbe}"\
        '${(X)'${list_name__rlitmgbe}'//${~glob__rlitmgbe}/'${replacement_expansion__rlitmgbe}'}'
}

# --------------------( WASTELANDS                         )--------------------
#. To enable grouped capturing, consider calling
# :enable_glob_capturing_grouped() on such glob _before_ calling this function
