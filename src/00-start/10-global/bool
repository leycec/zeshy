#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core boolean constants.
/---

# ....................{ BOOLEANS                           }....................
#FIXME: Rename to ${ZESHY_BOOL_FALSE} and likewise below.
#FIXME: Actually, we've grown increasingly disconsolate with such long-winded
#verbiage. Frequently referenced globals should have correspondingly succinct
#names, and there's *NONE* more frequently referenced than these. For brevity,
#we're inclined to break namespacing and simply rename such booleans to
#${ztrue} and ${zfalse}. While this *DOES* somewhat break namespacing, it's not
#quite as bad as ${true} and ${false} would be, which numerous external scripts
#and environments presumably already define. Perhaps more importantly,
#${ztrue} and ${zfalse} are actually human-readable at a glance *AND* equally
#memorable, which the current globals certainly are not. They're also readily
#search-and-replacable, retaining that essential quality of the current globals.
#How 'bout it then? Note that, since we're already breaking namespacing, we'd
#might as well go the "full monty" (as we currently do) and lowercase such names
#for readability and orthogonality with other high-level programming languages.
#
#${ztrue} and ${zfalse} she is, then!
#FIXME: Actually, perhaps ${Ztrue} and ${Zfalse}, yes? Slightly more readable
#*AND* orthogonal with our real namespace ${ZESHY_...}.

:bool_global ZESHY_BOOLEAN_FALSE=0 <<'/---'
Integer signifying boolean false. Since `zsh` supports no boolean type, `zeshy`
emulates such type with efficient integer constants.
/---

:bool_global ZESHY_BOOLEAN_TRUE=1 <<'/---'
Integer signifying boolean true. Since `zsh` supports no boolean type, `zeshy`
emulates such type with efficient integer constants.
/---

# --------------------( WASTELANDS                         )--------------------
#Arbitrary integer signifying a boolean true value. Since `zsh` supports no
#boolean type, we emulate such type with integer constants.
