#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core character constants.
/---

#FIXME: Rename "_ASCII" to "_CHAR" everywhere below and this parcel to @{char}.

# ....................{ GLOBALS                            }....................
# Character constants to be interpolated into unprinted strings (e.g., globs,
# regular expressions). zsh interprets escaped characters such as \n (newline)
# and \t (tab) as "special" only when passed to the echo() or print() builtins;
# in all other cases, zsh passes such characters as is (i.e., without
# interpretation) through to the underlying builtins. Embedding such characters
# in $'...'-style quotes (as below) circumvents this, inducing zsh to interpret
# such characters regardless of which builtin finally receives them.

declare_global_with_stdin character ZESHY_ASCII_EOT=$'\C-D' <<'/---'
End-of-transmission character. When received by a Unix terminal driver, such
character signifies end-of-file and hence graceful termination of shell commands
awaiting interactive input.

== Caveats ==

Note that such character is _not_ an end-of-file character. Since any integer
_not_ in the range of an unsigned byte (i.e., [0, 255]) signifies end-of-file at
the terminal driver level, no possible character (ASCII or otherwise) signifies
end-of-file at the actual shell level. While `zsh` faithfully interprets the
end-of-transmission character to signify end-of-file when entered interactively,
such interpretation is _not_ shared by noninteractive functionality. Indeed,
inserting such character into a string signifies nothing to `zsh` -- neither
end-of-file or end-of-string; only the actual end of the string signifies the
end-of-string. Hence, such character is of little use in most cases.
/---

declare_global_with_stdin character ZESHY_ASCII_NEWLINE=$'\n' <<'/---'
Newline character. While builtins echo() and print() do recognize `\n` to be a
newline, all other cases require cumbersome `$'\n'`-style expressions. This
global obviates such awkwardness.
/---

declare_global_with_stdin character ZESHY_ASCII_NULL=$'\0' <<'/---'
Null character. While builtins echo() and print() do recognize `\0` as a valid
null, all other cases require cumbersome `$'\0'`-style expressions. This global
obviates such awkwardness.
/---

declare_global_with_stdin character ZESHY_ASCII_TAB=$'\t' <<'/---'
Tab character. While builtins echo() and print() do recognize `\t` as a valid
tab, all other cases require cumbersome `$'\t'`-style expressions. This global
obviates such awkwardness.
/---

# ....................{ GLOBALS ~ string                   }....................
declare_global_with_stdin string\
    ZESHY_PLACEHOLDER="${ZESHY_ASCII_EOT}${ZESHY_ASCII_NULL}${ZESHY_ASCII_EOT}${ZESHY_ASCII_NULL}" <<'/---'
Placeholder string, intended for internal use in `zeshy` functions. To avoid
accidental collision with non-placeholder strings, this string has been
intentionally obfuscated with rarely used non-printable control characters.

For example, consider a variadic function internalize() with function signature
`void internalize(string thought1, ..., string emotion1, ...)` and hence
accepting a variable number of both thoughts and emotions. Demarcating the last
passed thought from the first passed emotion requires the caller pass an
additional argument between the two. While external GNU commands tend to use
string literal `--` for this purpose, this prevents the caller from passing such
string as either a thought or emotion. To (largely) circumvent this, function
internalize() could require the caller to pass this placeholder as such
additional argument instead.
/---

# --------------------( WASTELANDS                         )--------------------
#Handle ASCII (American Standard Code for Information Interchange) constants.
