#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under @{help} in the main codebase.

#FIXME: Actually call such functions everywhere under @{*-declare}. Simply grep
#for the single word "functions" to find such instances.

# ....................{ EXCEPTIONS                         }....................
# :void :die_if_func(:string func_name1, ...)
function :die_if_func() {
    (( # )) || :die 'Expected one or more function names.'
    if { :is_func "${@}" } {
        local func_name
        for   func_name ("${@}") {
            :is_func "${func_name}" || :die\
                'Function '${func_name}'() already exists:'$'\n\n'$(which -- "${func_name}")
        }
    }
}

# :void :die_unless_func(:string func_name1, ...)
function :die_unless_func() {
    (( # )) || :die 'Expected one or more function names.'
    :is_func "${@}" || {
        local func_name
        for   func_name ("${@}") {
            :is_func "${func_name}" || :die\
                'Function '${func_name}'() undefined.'
        }
    }
}

# ....................{ TESTERS                            }....................
# [status = :bool] :is_func(:string func_name1, ...)
function :is_func() {
    # Validate sanity.
    (( # )) || :die 'Expected one or more function names.'

    # If only one function name was passed, perform an efficient map lookup
    # rather than a comparably less efficient redirected builtin call.
    if (( # == 1 )) {
        (( ${+functions[${1}]} ))
    # Else, perform such call.
    } else {
        { typeset -f -- "${@}" } 1>/dev/null
    }
}

# --------------------( WASTELANDS                         )--------------------
# :void :die_unless_func_of_cause(
#     :string func_name1, ...,
#     :string exception_message)
# function :die_unless_func_of_cause() {
#     (( # )) || :die 'Expected one or more function names.'
#     :is_func "${@}" || {
#         local func_name
#         for   func_name ("${@}") {
#             :is_func "${func_name}" || :die\
#                 'Function '${func_name}'() undefined.'
#         }
#     }
# }

#FUXME: Shift :die_unless_func() and :is_func() here.
