#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *boolean variable declarators* (i.e., aliases declaring binary numeric
variables, constrained to two values signifying either true or false).
/---

#FIXME: Rename "boolean" to "bool".

# ....................{ DECLARATORS                        }....................
# While zsh currently lacks builtin support for boolean types, such types are
# readily implementable with either:
#
# * Integer types. Mapping boolean false to integer 0 and boolean true to
#   integer 1 yields both an efficient representation and means of testing
#   boolean truth: e.g.,
#
#    >>> integer is_television_truth
#    >>> (( is_television_truth )) or
#    ...     output_string "You do whatever the tube tells you."
#    "You do whatever the tube tells you."
#
# * String types. Mapping boolean false to the empty string and boolean true to
#   any nonempty string yields a slightly less efficient representation and means
#   of testing boolean truth: e.g.,
#
#    >>> string is_television_reality
#    >>> is -n "${is_television_reality}" or
#    ...     output_string "You even think like the tube."
#
# Since testing for integer zeroness is more efficient than testing for string
# emptiness *AND* since integers are already constrained to integral values
# containing customary boolean values 0 and 1, zeshy adopts integers rather
# than strings for its boolean implementation.

declare_alias_with_stdin 'void :bool(string variable_name1, ...)'\
    'integer' <<'/---'
Declare the passed boolean variables locally, initialized to the following
`=`-delimited boolean if specified or to ${ZESHY_BOOLEAN_FALSE} otherwise: e.g.,

==========================================
[source]
------------------------------------------
>>> :bool is_television_truth
>>> (( is_television_truth )) or get_string_line\
...    "Television is not the truth. Television's a god-damned amusement park.
...     Television is a circus, a carnival, a traveling troupe of acrobats,
...     storytellers, dancers, singers, jugglers, sideshow freaks, lion tamers,
...     and football players. We're in the boredom-killing business. So if you
...     want the Truth, go to God! Go to your gurus. Go to yourselves! Because
...     that's the only place you're ever gonna find any real truth. But, man,
...     you're never gonna get any truth from us. We'll tell you anything you
...     wanna hear. We lie like hell. We'll tell you that Kojak always gets the
...     killer and that nobody ever gets cancer at Archie Bunker's house. And no
...     matter how much trouble the hero is in, don't worry. Just look at your
...     watch. At the end of the hour, he's gonna win. We'll tell you any shit
...     you want to hear." 1
Television is not the truth. Television's a god-damned amusement park.
------------------------------------------
==========================================

== Caveats ==

Due to `zsh` constraints and as in numerous other languages (e.g., Perl, C, C++,
Objective-C), *booleans are indistinguishable from integers.* Specifically,
integer 0 signifies boolean false and all nonzero integers (e.g., 1, -1) boolean
true. Since explicitly declaring booleans as such improves clarity, (possible)
forwards compatibility, and symmetry with existing types, consider declaring
booleans as such rather than as integers.
/---

#FIXME: Excise everywhere in favor of :bool().
declare_alias_with_stdin 'void boolean(string variable_name1, ...)'\
    'integer' <<'/---'
Locally
/---

declare_alias_with_stdin 'void boolean_global(string variable_name1, ...)'\
    'integer_global'  <<'/---'
Declare the passed boolean variables globally _not_ exported to the calling
shell. See boolean() for further details.
/---

declare_alias_with_stdin\
    'void boolean_global_export(string variable_name1, ...)'\
    'integer_global_export' <<'/---'
Declare the passed boolean variables globally exported to the calling shell. See
boolean() for further details.
/---

# ....................{ DECLARATORS ~ constant             }....................
declare_alias_with_stdin\
    'void :bool_const(string variable_name1, ...)'\
    'integer_constant' <<'/---'
Declare the passed boolean constants locally, defined to the following `=`-
delimited boolean if specified or to ${ZESHY_BOOLEAN_FALSE} otherwise. If such
constant is (attempted to be) redefined, an exception is thrown. See :bool() for
further details.
/---

declare_alias_with_stdin\
    'void boolean_constant_global_export(string variable_name1, ...)'\
    'integer_constant_global_export' <<'/---'
Declare the passed boolean constants globally exported to the calling shell. See
:bool_const() for further details.
/---

# ....................{ DECLARATORS ~ value                }....................
#FIXME: Actually, we probably should fix this by shifting the following two
#aliases to @{00-core/15-alias/variable/bool}.

# Since ${ZESHY_BOOLEAN_TRUE} is undefined at this point, hardcode such value.
# While hardly ideal, it's hard to work up any desire to correct this.
declare_alias_with_stdin 'void boolean_true(string variable_name)'\
    '{
        :bool "$(get_stdin)"=1
    } <<<' <<'/---'
Declare the passed boolean variable locally, initialized to
${ZESHY_BOOLEAN_TRUE}. By default, booleans are initialized to
${ZESHY_BOOLEAN_FALSE}. See :bool() for further details. 

== Caveats ==

Unlike most boolean declarators (e.g., :bool(), boolean_global()), *this alias
accepts only one variable name*.
/---

# While this alias could be defined in a manner like that of boolean_true(),
# doing so would be less efficient than the current definition.
declare_alias_with_stdin 'void boolean_false(string variable_name)'\
    ':bool' <<'/---'
Declare the passed boolean variable locally, initialized to
${ZESHY_BOOLEAN_FALSE}. Since booleans are already initialized to such value by
default, this alias is effectively synonymous with :bool(). See such alias for
further details. 

== Caveats ==

Unlike boolean_true(), this alias technically accepts one or more rather than
merely one variable name. Nonetheless, for orthogonality with the former alias,
consider only passing one variable name to this alias as well.
/---

# --------------------( WASTELANDS                         )--------------------
# Handle *boolean* (i.e., binary data type constrained to two values, one
# signifying true and the other false) variable declarators.

#== Implementation Alternatives ==
#
#Technically, 
#Technically, integers are _not_ the only types booleans are implementable as.
#While `zsh` currently lacks builtin support for boolean types, such types are
#readily implementable with either:
#
#* Integer types. Mapping boolean false to integer 0 and boolean true to
#  integer 1 yields both an efficient representation and means of testing
#  boolean truth: e.g.,
#+
#.Integer-based Booleans
#==========================================
#[source]
#------------------------------------------
#>>> integer is_television_truth
#>>> (( is_television_truth )) or get_string_line\
#...    "Television is not the truth. Television's a god-damned amusement park.
#...     Television is a circus, a carnival, a traveling troupe of acrobats,
#...     storytellers, dancers, singers, jugglers, sideshow freaks, lion tamers,
#...     and football players. We're in the boredom-killing business. So if you
#...     want the Truth, go to God! Go to your gurus. Go to yourselves! Because
#...     that's the only place you're ever gonna find any real truth. But, man,
#...     you're never gonna get any truth from us. We'll tell you anything you
#...     wanna hear. We lie like hell. We'll tell you that Kojak always gets the
#...     killer and that nobody ever gets cancer at Archie Bunker's house. And no
#...     matter how much trouble the hero is in, don't worry. Just look at your
#...     watch. At the end of the hour, he's gonna win. We'll tell you any shit
#...     you want to hear." 1
#------------------------------------------
#==========================================
#* String types. Mapping boolean false to the empty string and boolean true to
#  any nonempty string yields a slightly less efficient representation and means
#  of testing boolean truth: e.g.,
#+
#.String-based Booleans
#==========================================
#[source]
#------------------------------------------
#>>> string is_television_reality
#>>> is -n "${is_television_reality}" or get_string_line\
#...    "We deal in illusions, man. None of it is true! But you people sit there
#...     day after day, night after night, all ages, colors, creeds. We're all
#...     you know. You're beginning to believe the illusions we're spinning here.
#...     You're beginning to think that the tube is reality and that your own
#...     lives are unreal. You do whatever the tube tells you. You dress like the
#...     tube, you eat like the tube, you raise your children like the tube. You
#...     even think like the tube. This is mass madness. You maniacs. In God's
#...     name, you people are the real thing. We are the illusion. So turn off
#...     your television sets. Turn them off now. Turn them off right now. Turn
#...     them off and leave them off. Turn them off right in the middle of this
#...     sentence I am speaking to you now. Turn them off!" 1
#We deal in illusions, man. None of it is true! But you people sit there
#------------------------------------------
#==========================================
#
#Since testing for integer zeroness is more efficient than testing for string
#emptiness _and_ since integers are already constrained to integral values
#containing customary boolean values 0 and 1, `zeshy` adopts integers rather
#than strings for its boolean implementation.
