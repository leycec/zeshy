#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

# Due to chicken-and-the-egg conundra, all operables defined below are
# subsequently documented under @{help} in the main codebase.

# ....................{ SETTERS                            }....................
#FIXME: Document me.

# [status = :bool] :set_string_to_stdin_if_found[
#     args =  (:string:string string_name),
#     stdin = (:string stdin)]
function :set_string_to_stdin_if_found() {
    # Validate sanity.
    (( # == 1 )) || :die 'Expected one string name.'

    # If standard input is readable without blocking, set such string to all
    # such input. Ideally, this would be implementable as follows:
    #
    #    IFS= read -r -t 0 -d '' "${1}"
    #
    # Unfortunately, option "-d" requires a nonempty character, implying read()
    # to only read in an explicitly delimited manner. Hence, we defer to the
    # somewhat convolute logic of :is_stdin_readable_sans_blocking() instead.
    :is_stdin_readable_sans_blocking &&
        :set_string_to_string "${1}" "$(< /dev/stdin)"
}

#FIXME: Replace *ALL* calls to run_runnable_with_stdin() with calls to this
#function; then, excise the former.
#FIXME: Document me.
#FIXME: Refactor to defer to :set_string_to_stdin_help_if_found().
#FIXME: Actually, this function should probably go away now, due to its
#triviality. Do we only call this function in once place?

# :void :set_string_to_stdin_help[
#     args =  (:string string_name),
#     stdin = (:string documentation)]
function :set_string_to_stdin_help() {
    # Validate sanity.
    (( # == 1 )) || :die 'Expected one string name.'

    # If standard input is either the empty string *OR* unreadable without
    # blocking, throw an exception; else, set the passed string to such input.
    :set_string_to_stdin_if_found "${1}" || :die\
        'Documentation empty or not passed on standard input (e.g., as a here-document or -string).'
}

# --------------------( WASTELANDS                         )--------------------
