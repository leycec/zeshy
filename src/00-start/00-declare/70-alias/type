#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *typed alias declarers* (i.e., functions declaring aliases of specific
type).
/---

# ....................{ DECLARERS                          }....................
:alias_command.document <<'/---'
:void :alias_command[
    args =  (`:string `alias_prototype,
             `:string `alias_expansion),
    stdin = (`:string `alias_asciidoc)]

Declare one or more *command aliases* (i.e., aliases expanded only in command
position) identified by the passed prototype, expanding to the passed expansion
and documented by the documentation passed on standard input (e.g., as a
here-document or -string). If any such aliases have already been declared or
defined, an exception is thrown. See ::alias(): e.g,

.:alias_command()
==========================================
[source]
------------------------------------------
>>> :alias_command ':void :preserve_string(:string text)'\
...    '{ :string in_memoria; in_memoria="$(:stdin.get)" } <<<' <<'/---'
... It is not enough to fight for the land; it is even more important to
... enjoy it. While you can. While it's still here.
... /---
>>> :preserve_string\
...    "So get out there and hunt and fish and mess around with your friends,
...     ramble out yonder and explore the forests, climb the mountains, bag the
...     peaks, run the rivers, breathe deep of that yet sweet and lucid air,
...     sit quietly for a while and contemplate the precious stillness, the
...     lovely, mysterious, and awesome space."
>>> get_string_line "${in_memoria}"
It is not enough to fight for the land; it is even more important to
------------------------------------------
==========================================
/---
alias :alias_command='::alias command aliases'

:alias_command.document <<'/---'
:void :alias_general[
     args =  (`:string `alias_prototype,
              `:string `alias_expansion),
     stdin = (`:string `alias_asciidoc)]

Declare one or more *general aliases* (i.e., aliases expanded in any position
of a command) identified by the passed prototype, expanding to the passed
expansion and documented by the documentation passed on standard input (e.g.,
as a here-document or -string). If any such aliases have already been declared
or defined, an exception is thrown. See ::alias():
e.g,

.:alias_general()
==========================================
[source]
------------------------------------------
>>> :alias_general ':void :compensate_string(:string text)'\
...    '
...     { :string_global in_honoraria; in_honoraria="$(:stdin.get)" } <<<' <<'/---'
... Enjoy yourselves, keep your brain in your head and your head firmly
... attached to the body, the body active and alive, and I promise you this
... much; I promise you this one sweet victory over our enemies, over those
... desk-bound men and women with their hearts in a safe deposit box, and
... their eyes hypnotized by desk calculators.
... /---
>>> :string.output "I promise you this; " :compensate_string\
...    "You will outlive the bastards."
>>> :string.output "${in_honoraria}"
You will outlive the bastards.
------------------------------------------
==========================================
/---
alias :alias_general='::alias general galiases'

:alias_command.document <<'/---'
:void :alias_suffix[
    args =  (`:string `alias_prototype,
             `:string `alias_expansion),
    stdin = (`:string `alias_asciidoc)]

Declare one or more *suffix aliases* (i.e., aliases expanded when files of such
filetype are in command position) identified by the passed prototype, expanding
to the passed expansion and documented by the documentation passed on standard
input (e.g., as a here-document or -string). If any such aliases have already
been declared or defined, an exception is thrown. See ::alias(): e.g,

.:alias_suffix()
==========================================
[source]
------------------------------------------
>>> :alias_suffix ':string :stabilize_pdf(:string pdf_filename)'\
...    ':string.output\
...       "But the profoundest implications of the decreased work week were
...        philosophical and ecological: mankind, the Ecotopians assumed, was
...        not meant for production, as the 19th and 20th centuries believed.
...        Instead, humans were meant to take their modest place in the
...        seamless, stable-state web of living organisms, disturbing that web
...        as little as possible."
...
...     {
...         :string pdf_filename="$(:stdin.get)" pdf_media_type
...         :set_string_to_file_media_type pdf_media_type "${pdf_filename}"
...         :string.output "${pdf_filename}: ${pdf_media_type}"
...     } <<<' <<'/---'
... This would mean sacrifice of present consumption, but it would ensure
... future survival.
... /---
>>> make_file "Ernest Callenbach.epub"
>>> get_string_line "$(Ernest Callenbach.pdf)" -1
Ernest Callenbach.pdf: application/pdf
------------------------------------------
==========================================
/---
alias :alias_suffix='::alias suffix saliases'

# --------------------( WASTELANDS                         )--------------------
#FUXME: ":alias_general" is a poor choice of adjective, conflicting with the
#expected meaning of "global". Consider the following alternatives:
#
#* :alias_general(). Let's face it: simplicity's razor wins.
#* :alias_omnibus(). Pretty sweet, and quite readable (given the "omni"
#  prefix).
#* :alias_total(). Fairly sweet, but rather generically ambiguous. After all,
#  what makes the other alias types *NOT* totalizing?
#* :alias_passim(). Let's admit: this is *PRETTY* awesome. Yes, "passim" is a
#  genuine English word. Yes, it means (more or less) what we require here.
#* :alias_universal().
#* :alias_cosmic().
#* :alias_pandemic().
#* :alias_panoptic().
#
#While :alias_passim() may very well rock the Casbah, there's only one little
#problem: utterly no one will understand it! Given that, :alias_omnibus() rears
#its likably intelligible head high. But the real bread-winner here is
#doubtlessly :alias_general(), which reads sanely without raising eyebrows.
#Yay!
