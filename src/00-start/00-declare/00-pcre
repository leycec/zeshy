#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

#FIXME: Convert into parcel documentation.
# --------------------( SYNOPSIS                           )--------------------
# Define PCREs required by alias, function, and global declarers.

# ....................{ GLOBALS                            }....................
#FIXME: There should exist *NO* tangible syntactic differences between alias
#and function prototypes, implying all use of "_ALIAS" and "_FUNC" in
#nomenclature below should be flattened to merely "_RUNNABLE".
#FIXME: Excise ${ZESHY_PROTOTYPE_RUNNABLE_NAMES_PCRE},
#${ZESHY_PROTOTYPE_FUNC_ATTRS_AND_NAMES_PCRE}, and
#${ZESHY_PROTOTYPE_FUNC_SANS_ATTRS_AND_NAMES_PCRE}. (Yay!)
#FIXME: Document all remaining globals.
#FIXME: Consider excising ${ZESHY_PROTOTYPE_GLOBAL_NAMES_NEXT_PCRE}, which
#*SHOULD* now be obsoleted by simpler string splitting.
typeset -g ZESHY_PROTOTYPE_FUNC_ATTRS_AND_NAMES_PCRE

# PCRE globals defined below.
typeset -g\
    ZESHY_PROTOTYPE_GLOBAL_NAMES_VALUE_PCRE\
    ZESHY_PROTOTYPE_GLOBAL_NAMES_NEXT_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_ATTRS_NAMES_ARGS_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_NAME_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_NAME_SUFFIXED_PREFIXED_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_NAMES_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_ATTRS_NEXT_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_NAMES_NEXT_PCRE\
    ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE

# Define such PCREs in an anonymous block to permit definition of locals. Since
# subsequent locals often depend on prior locals, only define one local a line.
() {
    # PCRE matching the start of a zeshy help string. Dismantled, this is:
    #
    # * "(?s)", inducing '.' to match all characters including newline.
    local pcre_start='(?s)^\s*+'

    # Colon preceded by optional whitespace followed by mandatory whitespace.
    local pcre_colon_spaced='\s*+:\s++'

    # Comma preceded and followed by optional whitespace.
    local pcre_comma_spaced='\s*+,\s*+'

    # Equals sign preceded and followed by optional whitespace.
    local pcre_equals_spaced='\s*+=\s*+'

    # Ellipse (i.e., three consective periods).
    local pcre_ellipse='\.\.\.'
    local pcre_ellipse_grouped='('${pcre_ellipse}')'

    # Eroteme (i.e., question mark).
    local pcre_eroteme='\?'
    local pcre_eroteme_grouped='('${pcre_eroteme}')'

    # Integer or float (i.e., real number).
    local pcre_number='-?\d++\.\d++|-?\d++'

    # Single-quoted string in zsh format and hence supporting escaped single
    # quotes (i.e., "''").
    local          pcre_quotes_single="'(?:[^']|'')*'"
    local pcre_quotes_single_grouped="'((?:[^']|'')*)'"

    # Double-quoted string in zsh format and hence supporting escaped double
    # quotes (i.e., '\"').
    local          pcre_quotes_double='"(?:[^"]|\\")*"'
    local pcre_quotes_double_grouped='"((?:[^"]|\\")*)"'

    # Double-quoted string in the above format, optionally containing command
    # substitutions themselves containing double-quoted strings (e.g., 
    # "We're $(on "a ladder to") God").
    local pcre_quotes_double_with_substitutions='"(?:\\"|$\([^)]*+\)|[^"])*"'

    #FIXME: After renaming all instances of "void" to ":void", drop the ":?"
    #below.

    # Pseudo-type signifying such runnable to either return or accept nothing,
    # inspired by that of conventional high-level languages.
    local pcre_void=':?void'

    # Human-readable operable (i.e., alias, function, variable) type.
    #
    # Such PCRE is *NOT* intended to match the full gamut of actual zsh syntax
    # for operable types -- which, since zeshy defines such types by simple
    # aliases, technically include single- and double-quoted strings. Rather,
    # such PCRE matches only the subset of characters zeshy names such types
    # with (i.e., alphanumeric letters, underscore, hyphen, and colon).
    local pcre_operable_type='[a-zA-Z0-9-_:]++'

    # Human-readable operable name, principally runnable argument names.
    # Such PCRE matches all characters matched by the prior PCRE excluding
    # colon, as argument names hypothetically correspond to local variable
    # names and hence prohibit colons. As above, such PCRE is *NOT* intended to
    # match the full gamut of actual zsh syntax. See ${pcre_global_name} below.
    local pcre_operable_name='[a-zA-Z0-9-_]++'

    # Variable value.
    local pcre_value_quoted_single=${pcre_quotes_single}

    #FIXME: Sweet. This is effectively complete. Now, we just need to actually
    #*USE* ${ZESHY_PROTOTYPE_GLOBAL_PCRE} (and hence ${pcre_global_grouped}).
    #To do so, the first incremental step will probably be to implement a new
    #setter :set_list_to_global_prototype_names() in @{*-set}.

    # Global variable. Such syntax mimics conventional "="-delimited variable
    # assignments in zsh and hence prohibits whitespace. See
    # ${ZESHY_VAR_NAME_GLOB} for further details on variable name syntax.
    local pcre_global_type=${pcre_operable_type}
    local pcre_global_type_grouped='('${pcre_global_type}')'
    local pcre_global_name='[a-zA-Z_][a-zA-Z0-9_]*+'
    local pcre_global_name_grouped='('${pcre_global_name}')'
    local pcre_global_names_grouped='((?:'${pcre_global_name}'=)*'${pcre_global_name}')'
    local pcre_global_name_or_names_grouped='(?:'${pcre_global_name_grouped}'|'${pcre_global_names_grouped}')'
    local pcre_global_value_grouped='(?:=('${pcre_quotes_double}'|'${pcre_quotes_single}'|'${pcre_number}'))?'

    # Runnable attributes.
    local pcre_attr_name=${pcre_operable_name}
    local pcre_attr_name_grouped='('${pcre_attr_name}')'
    local         pcre_attr_value=${pcre_equals_spaced}'(?:'${pcre_quotes_double}'|'${pcre_quotes_single}')'
    local pcre_attr_value_grouped=${pcre_equals_spaced}'(?|'${pcre_quotes_double_grouped}'|'${pcre_quotes_single_grouped}')'
    local                 pcre_attr=${pcre_attr_name}'(?:'${pcre_attr_value}')?'
    local pcre_attr_grouped=${pcre_attr_name_grouped}'(?:'${pcre_attr_value_grouped}')?'
    local pcre_attrs_start='(?:<\s*+'
    local pcre_attrs_stop='\s*+>\s++)?'
    local         pcre_attrs=${pcre_attrs_start}'(?:(?:'${pcre_attr}${pcre_comma_spaced}')*'${pcre_attr}')(?:'${pcre_comma_spaced}')?'${pcre_attrs_stop}
    local pcre_attrs_grouped=${pcre_attrs_start}'((?:'${pcre_attr}${pcre_comma_spaced}')*'${pcre_attr}')(?:'${pcre_comma_spaced}')?'${pcre_attrs_stop}

    # Runnable return types. zeshy currently prohibits single- and double-quoted
    # return types, thus simplifying matching.
    local pcre_return_type=${pcre_operable_type}
    local pcre_return_type_grouped='(?:'${pcre_void}'|('${pcre_return_type}'))'
    local pcre_return_channel_name=${pcre_operable_name}
    local pcre_return_channel_name_grouped='('${pcre_return_channel_name}')'
    local pcre_return_channel_grouped=${pcre_return_channel_name_grouped}${pcre_equals_spaced}'('${pcre_return_type}')'
    local         pcre_return_channels='\[\s*+[^]]*+\]'
    local pcre_return_channels_grouped='\[\s*+([^]]*+)\]'
    local pcre_return_type_or_channels='(?:'${pcre_return_type}'|'${pcre_return_channels}')\s++'
    local pcre_return_type_or_channels_grouped='(?:'${pcre_return_type_grouped}'|'${pcre_return_channels_grouped}')\s++'

    # Runnable names.
    #
    # While zsh permits zeshy unquoted alias and function names to contain a
    # surprisingly wide array of characters, zeshy constrains such names so as
    # to avoid conflicting with other prototype syntax.
    #
    # Since zsh permits single- and double-quoted alias and function names
    # containing arbitrary and hence all possible characters, matching such
    # names requires more than merely class negation.
    #
    # While zsh only supports synonymous functions (e.g.,
    # "function name1 name2() { ... }"), there exists no reason *NOT* to extend
    # such support to aliases as well. (So, we do.)
    local pcre_runnable_name_unquoted=${pcre_operable_type}
    local pcre_runnable_name_unquoted_grouped='('${pcre_runnable_name_unquoted}')'
    local         pcre_runnable_name='(?:'${pcre_runnable_name_unquoted}'|'${pcre_quotes_double}'|'${pcre_quotes_single}')'
    local pcre_runnable_name_grouped='(?|'${pcre_runnable_name_unquoted_grouped}'|'${pcre_quotes_double_grouped}'|'${pcre_quotes_single_grouped}')'
    local pcre_runnable_names_grouped='\{\s*+((?:'${pcre_runnable_name}${pcre_comma_spaced}')*'${pcre_runnable_name}')(?:'${pcre_comma_spaced}')?\s*+\}'
    local pcre_runnable_name_or_names_grouped='(?:'${pcre_runnable_name_grouped}'|'${pcre_runnable_names_grouped}')\s*+'

    # Runnable arguments.
    local pcre_arg_type=${pcre_operable_type}
    local pcre_arg_type_grouped='('${pcre_arg_type}')'
    local pcre_arg_name=${pcre_operable_name}
    local pcre_arg_name_grouped='('${pcre_arg_name}')'
    local pcre_arg_value_choices=${pcre_quotes_double_with_substitutions}'|'${pcre_quotes_single}'|'${pcre_number}
    local         pcre_arg_value='(?:'${pcre_equals_spaced}'(?:'${pcre_arg_value_choices}'))?'
    local pcre_arg_value_grouped='(?:'${pcre_equals_spaced}'('${pcre_arg_value_choices}'))?'
    local                 pcre_arg=${pcre_arg_type}'\s++'${pcre_arg_name}${pcre_arg_value}'(?:'${pcre_eroteme}')?(?:'${pcre_comma_spaced}${pcre_ellipse}')?'
    local pcre_arg_grouped=${pcre_arg_type_grouped}'\s++'${pcre_arg_name_grouped}${pcre_arg_value_grouped}${pcre_eroteme_grouped}'?(?:'${pcre_comma_spaced}${pcre_ellipse_grouped}')?'
    local          pcre_args_list='(?:'${pcre_arg}${pcre_comma_spaced}')*'${pcre_arg}'(?:'${pcre_comma_spaced}')?'
    local pcre_args_list_grouped='((?:'${pcre_arg}${pcre_comma_spaced}')*'${pcre_arg}')(?:'${pcre_comma_spaced}')?'
    local         pcre_args='\(\s*+(?:'${pcre_void}'|'${pcre_args_list}')?\s*+\)'
    local pcre_args_grouped='\(\s*+(?:'${pcre_void}'|'${pcre_args_list_grouped}')?\s*+\)'

    # Runnable argument channels.
    local pcre_arg_channel_name=${pcre_operable_name}
    local pcre_arg_channel_name_grouped='('${pcre_arg_channel_name}')'
    local          pcre_arg_or_args='(?:'${pcre_void}'|'${pcre_arg}'|'${pcre_args}')'
    local pcre_arg_or_args_grouped='(?:('${pcre_void}'|'${pcre_arg}')|('${pcre_args}'))'
    local            pcre_arg_channel=${pcre_arg_channel_name}${pcre_equals_spaced}${pcre_arg_or_args}
    local pcre_arg_channel_grouped=${pcre_arg_channel_name_grouped}${pcre_equals_spaced}${pcre_arg_or_args_grouped}
    local          pcre_arg_channels='\[\s*+(?:'${pcre_arg_channel}${pcre_comma_spaced}')*'${pcre_arg_channel}'(?:'${pcre_comma_spaced}')?\s*+\]'
    local pcre_arg_channels_grouped='\[\s*+((?:'${pcre_arg_channel}${pcre_comma_spaced}')*'${pcre_arg_channel}')(?:'${pcre_comma_spaced}')?\s*+\]'
    local         pcre_args_or_channels='(?:'${pcre_args}'|'${pcre_arg_channels}')'
    local pcre_args_or_channels_grouped='(?:'${pcre_args_grouped}'|'${pcre_arg_channels_grouped}')'

    #FIXME: We don't appear to use these anywhere, at the moment. Don't get us
    #wrong: they look great. But they should probably be shifted somewhere into
    #the main codebase (e.g., @{*-main/zeshy/help}.

    # Function description. Ignore cross-references embedded in the following
    # AsciiDoc-specific passthrough syntactic constructs, which AsciiDoc and hence
    # zeshy ignores for parsing purposes:
    #
    # * "`"-delimited passthrough quotes.
    # * "pass:["- and "]"-delimited passthrough macros.
    # * "+++"-delimited passthrough macros.
    # * "$$"-delimited passthrough macros.
    # * "\n----"-delimited listing blocks.
    # * "\n...."-delimited literal blocks.
    # * "\n////"-delimited comment blocks.
    # * "\n++++"-delimited passthrough blocks.
    # * "\n[literal]"-prefixed literal paragraphs.
    # * "\n "- and "\n\t"-prefixed literal lines.
    #
    # Ignore cross-references embedded in the following AsciiDoc-specific anchored
    # syntactic constructs, which AsciiDoc anchors for subsequent cross-referencing
    # and hence should not themselves contain cross-references:
    #
    # * "\n."-prefixed block titles.
    local pcre_asciidoc_quote_backtick='\b`\N*?`\b'
    local pcre_asciidoc_macro_pass='pass:\[(?:\\\]|\N)*?\]'
    local pcre_asciidoc_macro_plus='\+\+\+\N*?\+\+\+'
    local pcre_asciidoc_macro_dollar='\$\$\N*?\$\$'
    local pcre_asciidoc_block_listing='-{4,}+\n.*?\n-{4,}+'
    local pcre_asciidoc_block_literal='\.{4,}+\n.*?\n\.{4,}+'
    local pcre_asciidoc_block_comment='/{4,}+\n.*?\n/{4,}+'
    local pcre_asciidoc_block_pass='\+{4,}+\n.*?\n\+{4,}+'
    local pcre_asciidoc_block_title_or_line_literal='(?:\.|[ \t]++)\N+'
    local pcre_asciidoc_paragraph_literal='^\[literal\]\n.*?(?:\n\n|\Z)'
    local pcre_asciidoc_cross_reference='((?:'${pcre_asciidoc_quote_backtick}'|\b(?:'${pcre_asciidoc_macro_pass}'|'${pcre_asciidoc_macro_plus}'|'${pcre_asciidoc_macro_dollar}')\b|^(?:'${pcre_asciidoc_block_listing}'|'${pcre_asciidoc_block_literal}'|'${pcre_asciidoc_block_comment}'|'${pcre_asciidoc_block_pass}'|'${pcre_asciidoc_block_title_or_line_literal}')$|'${pcre_asciidoc_paragraph_literal}'|.)*?)([$@]\{'${pcre_operable_name}'\}|(?:(alias|func):)?'${pcre_operable_name}'\(\))'
    local pcre_asciidoc_suffix='(.*)'
    local pcre_asciidoc='\s*+(.*)'

    # PCRE capturing all names and optional value in global prototypes.
    ZESHY_PROTOTYPE_GLOBAL_NAMES_VALUE_PCRE=${pcre_global_name_or_names_grouped}${pcre_global_value_grouped}

    # PCRE capturing the next name in a "="-delimited list of such names,
    # presumably captured from a global prototype.
    ZESHY_PROTOTYPE_GLOBAL_NAMES_NEXT_PCRE=${pcre_global_name_grouped}'='

    # PCRE matching all attributes and names in function prototypes.
    ZESHY_PROTOTYPE_FUNC_ATTRS_AND_NAMES_PCRE="${pcre_start}${pcre_attrs_grouped}${pcre_return_type_or_channels}${pcre_runnable_name_or_names_grouped}"

    # PCRE capturing all attributes and names in runnable prototypes.
    ZESHY_PROTOTYPE_RUNNABLE_ATTRS_NAMES_ARGS_PCRE="${pcre_start}${pcre_attrs_grouped}${pcre_return_type_or_channels}${pcre_runnable_name_or_names_grouped}${pcre_args_or_channels_grouped}"

    # PCRE capturing a single name in runnable prototypes declaring only one
    # such name.
    ZESHY_PROTOTYPE_RUNNABLE_NAME_PCRE="${pcre_start}${pcre_attrs}${pcre_return_type_or_channels}${pcre_runnable_name_grouped}"
    # print -r "ZESHY_PROTOTYPE_RUNNABLE_NAME_PCRE: ${ZESHY_PROTOTYPE_RUNNABLE_NAME_PCRE}"

    # PCRE capturing a single name in runnable prototypes declaring only one
    # such name *AND* the substrings prefixing and suffixing such name.  To
    # assist subsequent substitutions, preserve otherwise negligible syntax and
    # whitespace in such prefix and suffix by expanding ungrouped rather than
    # grouped PCREs. (The latter discard all negligible syntax and whitespace.)
    ZESHY_PROTOTYPE_RUNNABLE_NAME_SUFFIXED_PREFIXED_PCRE="${pcre_start}(${pcre_attrs}${pcre_return_type_or_channels})${pcre_runnable_name_grouped}(${pcre_args_or_channels})"

    # PCRE matching all names in runnable prototypes.
    ZESHY_PROTOTYPE_RUNNABLE_NAMES_PCRE="${pcre_start}${pcre_attrs}${pcre_return_type_or_channels}${pcre_runnable_name_or_names_grouped}${pcre_args_or_channels}"

    # PCRE capturing the next attribute in a comma-delimited list of such
    # attributes, presumably captured from a runnable prototype.
    ZESHY_PROTOTYPE_RUNNABLE_ATTRS_NEXT_PCRE=${pcre_attr_grouped}'(?:'${pcre_comma_spaced}')?'

    # PCRE capturing the next name in a comma-delimited list of such names,
    # presumably captured from a runnable prototype.
    ZESHY_PROTOTYPE_RUNNABLE_NAMES_NEXT_PCRE=${pcre_runnable_name_grouped}'(?:'${pcre_comma_spaced}')?'

    # PCRE capturing the next argument in a comma-delimited list of such
    # arguments, presumably captured from a runnable prototype.
    ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE=${pcre_arg_grouped}'(?:'${pcre_comma_spaced}')?'
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Exclude attributes and names.
    # PCRE matching all semantic substrings in function prototypes, excluding
    # attributes and names. This includes return types, arguments, and AsciiDoc.
    # ZESHY_PROTOTYPE_FUNC_SANS_ATTRS_AND_NAMES_PCRE="${pcre_start}${pcre_attrs_grouped}${pcre_return_type_or_channels_grouped}${pcre_runnable_name_or_names_grouped}${pcre_args_or_channels_grouped}${pcre_asciidoc}"'()$'

    # local pcre_global_grouped=${pcre_global_type_grouped}'\s++'${pcre_global_name_or_names_grouped}${pcre_global_value_grouped}

    # PCRE capturing the type, names, and optional value in global prototypes.
    # ZESHY_PROTOTYPE_GLOBAL_TYPE_NAMES_VALUE_PCRE=${pcre_global_grouped}

    # PCRE matching the next "="-suffixed global name in "="-delimited global
    # definitions. Such syntax mimics conventional "="-delimited variable
    # assignments in zsh and hence prohibits whitespace.

    # local pcre_attr_name=${pcre_operable_name}
    # local pcre_attr_name_grouped='('${pcre_attr_name}')'
    # local pcre_attr_value_unquoted=${pcre_operable_name}
    # local pcre_attr_value_unquoted_grouped='('${pcre_attr_value_unquoted}')'
    # local         pcre_attr_value=${pcre_colon_spaced}'(?:'${pcre_quotes_double}'|'${pcre_quotes_single}'|'${pcre_attr_value_unquoted}')'
    # local pcre_attr_value_grouped=${pcre_colon_spaced}'(?|'${pcre_quotes_double_grouped}'|'${pcre_quotes_single_grouped}'|'${pcre_attr_value_unquoted_grouped}')'

    # Abstract identifier used *ONLY* for descriptive purposes (e.g., function
    # argument names) and hence defined in a fairly crude but efficient manner.
    # Such PCRE is *NOT* intended to match actual zsh syntax (e.g., global
    # names). See ${ZESHY_DECLARATOR_PCRE_GLOBAL_NAME} below, in particular.

 # for such types
    # Since
    # all operable types defined by zeshy are unquoted, such PCRE matches only
    # the exact subset of characters used for such types.

    # However, since such support is a superficial convenience, there exists no
    # reason *NOT* to extend such support to alias syntax as well. So, we do.
    # Unquoted runnable name. While quoted runnable names may contain all
    # possible characters, unquoted runnable names are constrained so as *NOT*
    # to conflict with prototype syntax. For simplicity, extend
    # ${pcre_operable_name} with punctuation guaranteed to avoid such conflict.
 # While reliably quoting
    # alias names is non-trivial (unlike functions), it *IS* feasible. See
    # :define_alias_simple() for further details.
    #FUXME: Incorrect. We'll want to support quoted attribute values containing
    #arbitrary characters and hence possibly ">" or ",", requiring more
    #sophisticated parsing here.

    # local pcre_arg_value_content=${pcre_arg_value_quoted_double}'|'${pcre_arg_value_quoted_single}'|'${pcre_arg_value_number}
    # local       pcre_arg_value=${pcre_equals_spaced}'(?:'${pcre_arg_value_content}')'
    # local pcre_arg_value_grouped=${pcre_equals_spaced}'('${pcre_arg_value_content}')'

    # Equals sign preceded and followed by optional whitespace.
    # local pcre_equals_spaced='\s*+=\s*+'

    # local pcre_runnable_names_grouped='\{\s*+((?:'${pcre_runnable_name}'(?:'${pcre_comma_spaced}'|\s++))*'${pcre_runnable_name}')(?:'${pcre_comma_spaced}')?\s*+\}'

    # Runnable attributes. zeshy currently prohibits single- and double-quoted
    # attribute values, thus simplifying matching.
    # local         pcre_attrs='(?:<\s*+[^>]++>\s++)?'
    # local pcre_attrs_grouped='(?:<\s*+([^>]++)>\s++)?'

    #FUXME: Add support for variadic arguments.

    # local             pcre_arg=${pcre_operable_name}'\s++'${pcre_operable_name}'(?:'${pcre_arg_value}')?'
    # local pcre_arg_grouped='('${pcre_operable_name}')\s++('${pcre_operable_name}')(?:'${pcre_arg_value_grouped}')?'

    #FUXME: Correct me. *sigh*
    # local          pcre_args_list='(?:'${pcre_arg}${pcre_comma_spaced}'(?:\.\.\.'${pcre_comma_spaced}')?)*'${pcre_arg}'(?:'${pcre_comma_spaced}')?'
    # local          pcre_args_list='(?:'${pcre_arg}${pcre_comma_spaced}'(?:\.\.\.)?)*'${pcre_arg}'(?:'${pcre_comma_spaced}')?'

    # ZESHY_PROTOTYPE_ALIAS_NAMES_PCRE\
    # ZESHY_PROTOTYPE_ALIAS_NAMES_PCRE="${pcre_start}${pcre_return_type_or_channels}${pcre_runnable_name_or_names_grouped}"

#FUXME: Rename ${ZESHY_PROTOTYPE_ALIAS_NAMES_PCRE} to
#${ZESHY_PROTOTYPE_ALIAS_NAMES_PCRE} and similarly for all other globals below
#containing "_PROTOTYPE". The focus is not the help string; the focus is the
#declarator itself. The help string is only optionally along for the ride, now.

    # PCRE matching all global names preceding the value to initialize such
    # namess to in "="-delimited global definitions. Such syntax mimics
    # conventional "="-delimited variable assignments in zsh and hence prohibits
    # whitespace.
#    ZESHY_DECLARATION_PCRE_GLOBAL_NAMES='((?:'${pcre_global_name}'=)+)(.*)'
#
#    # PCRE matching the next "="-suffixed global name in such definitions.
#    ZESHY_DECLARATION_PCRE_GLOBAL_NAME='('${pcre_global_name}')='

# This PCRE is *ONLY* used to validate such syntax and hence
    # captures no substrings.
    # PCRE matching the next "="-suffixed global name in a "="-delimited global
    # definition optionally followed by the final "="-prefixed global value.
    # Such syntax mimics conventional "="-delimited zsh variable assignments in
    # zsh and hence prohibits whitespace.

    # PCRE matching all global names preceding the value to initialize such
    # names to in "="-delimited global definitions. Such syntax mimics
    # conventional "="-delimited variable assignments in zsh and hence prohibits
    # whitespace.
#   ZESHY_DECLARATOR_PCRE_GLOBAL_NAMES='((?:'${pcre_global_name_ungrouped}'=)+)'
    # PCRE matching the next global name in a list of such names.

    # Function names. Since functions but *NOT* aliases support synonyms,
    # function and alias name syntax must be handled distinctly.
#   local pcre_function_name_grouped='('${pcre_runnable_name_content}')'
#   local       pcre_function_name='(?:'${pcre_runnable_name_content}')'
#   local pcre_function_names='\{\s*+((?:'${pcre_runnable_name}'(?:'${pcre_comma_spaced}'|\s++))*'${pcre_runnable_name}')(?:'${pcre_comma_spaced}')?\s*+\}'
#   local pcre_function_name_or_names='(?:'${pcre_runnable_name_grouped}'|'${pcre_function_names}')\s*+'

    # Alias names. Since zsh permits single- and double-quoted alias names,
    # matching requires more than class negation. While quoting alias names is
    # is non-trivial (unlike functions), it *IS* feasible. See :define_alias_simple()
    # for further details.
#   local pcre_alias_name_grouped='('${pcre_runnable_name_content}')'
