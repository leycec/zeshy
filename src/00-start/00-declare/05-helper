#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

# Due to a chicken-and-the-egg problem, all functions and globals defined below
# are subsequently documented under @{help} in the main codebase.

#FIXME: Subsequently document this parcel (e.g., in @{*-parcel}).

# ....................{ RUNNERS                            }....................
function run_runnable_with_stdin() {
    # Validate sanity.
    (( # )) || die 'Expected one runnable name and optional arguments.'
    local runnable_name__rrws="${1}"
    shift

    #FIXME: Improper test, since such test fails when passed the empty string
    #in a valid here-document string, which should (for convenience) succeed.
    #FIXME: Interesting. Under at least Linux, this is testable by noting that
    #"readlink -f /dev/stdin" succeeds and outputs a string resembling
    #"/tmp/zshFtb89B (deleted)". While we *COULD* capture such output and glob
    #for '/tmp/zsh'?*' (deleted)', such approach is both inefficient and overly
    #Linux-specific for such an early-time operation as this. A possibly
    #simpler test is as follows:
    #
    #* If :set_string_to_zsh_temp_prefix() prefixes the output of
    #  "command readlink -f /dev/stdin", standard input is... wait. We wanted
    #  *SIMPLER*. O.K., O.K.; how about just:
    #   * If "/dev/stdin" is a broken symbolic link, assume such link to have
    #     been the product of a here-document or -string, as expected.
    #   * Else implement the contents of :is_stdin_file_simple(), yes?

    # If standard input is empty, throw an exception. See
    # is_stdin_readable_sans_blocking() for further details.
    read -t 0 || die 'Standard input empty.'

    # Unless such function exists, throw an exception. See is_runnable() for
    # further details.
    whence -- "${runnable_name__rrws}" &>/dev/null ||
        die "runnable \"${runnable_name__rrws}\" undefined"

    # Run such runnable. See get_stdin() for further details.
    "${runnable_name__rrws}" "${@}" "$(< /dev/stdin)"

    # Close standard input. See close_stdin() for further details.
    exec 0<&-
}

# --------------------( WASTELANDS                         )--------------------
