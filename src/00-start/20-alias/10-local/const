#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *character variable declarators* (i.e., aliases declaring string variables
of length 1).
/---

# ....................{ DECLARERS                          }....................
# Nonscalar variables (i.e., lists, maps) *CANNOT* be initialized at
# declaration time and hence *CANNOT* be declared to be read-only.

:alias_command ':void :float_const(:string... var_names_and_values)'\
    'local -Fr --' <<'/---'
Locally declare all passed float variables to be constants initialized to the
`=`-prefixed value suffixing each if any or 0.0 otherwise. If any such constant
is redefined, an exception is thrown. See :float().
/---

:alias_command ':void :int_const(:string... var_names_and_values)'\
    'integer -r --' <<'/---'
Locally declare all passed integer variables to be constants initialized to the
`=`-prefixed value suffixing each if any or 0 otherwise. If any such constant
is redefined, an exception is thrown. See :int().
/---

:alias_command ':void :string_const(:string... var_names_and_values)'\
    'local -r --' <<'/---'
Locally declare all passed string variables to be constants initialized to the
`=`-prefixed value suffixing each if any or the empty string otherwise. If any
such constant is redefined, an exception is thrown. See :string().
/---

# ....................{ DECLARERS ~ sub                    }....................
:alias_command ':void :bool_const(:string... var_names_and_values)'\
    'integer -r --' <<'/---'
Locally declare all passed boolean variables to be constants initialized to the
`=`-prefixed value suffixing each if any or ${false} otherwise. If any such
constant is redefined, an exception is thrown. See :bool().
/---

:alias_command ':void :char_const(:string... var_names_and_values)'\
    'local -r --' <<'/---'
Locally declare all passed character variables to be constants initialized to
the `=`-prefixed value suffixing each if any or the empty string otherwise. If
any such constant is redefined, an exception is thrown. See :char().
/---

:alias_command ':void :file_descriptor_const(
    :string... var_names_and_values)'\
    'integer -r --' <<'/---'
Locally declare all passed file descriptor variables to be constants
initialized to the `=`-prefixed value suffixing each if any or 0 otherwise. If
any such constant is redefined, an exception is thrown. See :file_descriptor().
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Shift all constant local declarers here.
#FUXME: Move to ={*-start/*-alias/*-core/*-var}.

# :alias_command 'void character_global(string var_name1, ...)'\
#     'string_global' <<'/---'
# Declare the passed character variables globally _not_ exported to the calling
# shell. See :char() for further details.
# /---
# 
# :alias_command\
#     'void character_global_export(string var_name1, ...)'\
#     'string_global_export' <<'/---'
# Declare the passed character variables globally exported to the calling shell.
# See :char() for further details.
# /---

#FUXME: Rename "character" to "char".

#FUXME: Excise after replacing with the prior alias everywhere.
# :alias_command 'void character(string var_name1, ...)'\
#     'string' <<'/---'
# Declare
# /---

# :alias_command\
#     ':void :char_const_global_export(:string var_name1, ...)'\
#     ':string_const_global_export' <<'/---'
# Declare the passed character constants globally exported to the calling shell.
# See :char_const() for further details.
# /---
