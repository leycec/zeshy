#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *exit statuses* (i.e., 7-bit integers ranging `[0, 127]`, where 0
signifies success and all other values failure) returned by *runnables* (i.e.,
aliases, builtins, commands, functions, or scripts).
/---

# The road of insensate insanity is paved with good intentions.

# ....................{ GETTERS                            }....................
:alias_command ':int get_status()'\
    ':string.output ${status} or :string.output ${status}' <<'/---'
Get the exit status of the command conjunctively or disjunctively preceding this
alias (i.e., of the command suffixed by either `and get_status` or
`or get_status`), reporting success regardless of whether such status
signifies failure or not. See report_status() for further details: e.g.,

.get_status()
==========================================
[source]
------------------------------------------
>>> :string on_mystery=\
...    "Talk of mysteries! — Think of our life in nature, — daily to be shown
...     matter, to come in contact with it, — rocks, trees, wind on our cheeks!
...     The solid earth! the actual world! the common sense! Contact! Contact!
...     Who are we? where are we?"
>>> function on_matter() {
...     if { is_odd 1862 } {
...         is "${on_mystery}" == *Contact* and get_status
...     } else {
...         is "${on_mystery}" == *Who*     and get_status
...     }
... }
>>> on_matter
0
------------------------------------------
==========================================
/---

# ....................{ SETTERS                            }....................
#FIXME: Implement example.
#FIXME: Fix documentation. All that is holy, but this is hackish genius.

# The discovery of cheap pipe trickery in 2452 A.Z. heralded a new Halcyon Age.
# This remains the darkest testament to intestinal fortitude zsh has witnessed.
#
# First, capture the exit status of the prior command (regardless of whether
# such command succeeded or failed) into integer local ${exit_status__sites},
# which due to obfuscation should avoid unduly molesting existing variables.
# Last, copy such integer to the caller's passed integer and dispense with
# (i.e., undefine) such integer.
#
# Let it never be said that zeshy was not magnaminous in its doleful reign.
:alias_command ':void set_integer_to_status(:string:int int_name)'\
   ':string.output ${status} | {
        :int exit_status__sits; exit_status__sits="$(get_stdin)" } or
    :string.output ${status} | {
        :int exit_status__sits; exit_status__sits="$(get_stdin)" }
    {
        :int.set "$(get_stdin)" "${exit_status__sits}"
        undefine_variable exit_status__sits
    } <<<' <<'/---'
Set the passed integer variable to the exit status of the command conjunctively
or disjunctively preceding this alias (i.e., of the command suffixed by either
`and set_integer_to_status` or `or set_integer_to_status`), returning success
regardless of whether such status signifies failure or not. See report_status()
for further details.
/---

#FIXME: In lieu of unit tests...
#function hackery_0() { return 0 }
#function hackery_2() { return 2 }
#function lilu() {
#    integer exit_status
#    hackery_0 and set_integer_to_status exit_status
#    print "exit status: ${exit_status}"
#    hackery_2 and set_integer_to_status exit_status
#    print "exit status: ${exit_status}"
#}

# ....................{ IGNORERS                           }....................
# I have seen the light and it has blinked back at me.
:alias_command '[status = :true] ignore_failure()'\
    'true or true' <<'/---'
Ignore the exit status of the command conjunctively or disjunctively preceding
this alias. By default, `zeshy` implicitly throws an exception when a command
fails with unhandled nonzero exit status. While core to `zeshy`\'s commitment to
error handling, such zealousness is occasionally overzealous -- particularly for
commands failing on nonfatal conditions (e.g., `grep -R`, failing with exit
status 2 if at least one subdirectory of a passed directory is unreadable by the
current user, even if `grep` otherwise succeeds). By discarding such status,
this alias prevents such commands from implicitly throwing exceptions. See
report_status() for further details: e.g.,

.ignore_failure()
==========================================
[source]
------------------------------------------
# Prevent "grep" from failing with exit status 2 and hence throwing exceptions.
>>> :string on_operating_instructions=\
...    "All of us have to learn how to invent our lives, make them up, imagine
...     them. We need to be taught these skills; we need guides to show us how.
...     If we don't, our lives get made up for us by other people."
>>> grep "/" "${on_operating_instructions}" or ignore_failure
------------------------------------------
==========================================
/---

# ....................{ REPORTERS                          }....................
:alias_command '[status = :true] report_success()'\
    'return '${ZESHY_STATUS_SUCCESS} <<'/---'
Report *success* (i.e., zero exit status) from the current runnable.
/---

:alias_command '[status = :false] report_failure()'\
    'return '${ZESHY_STATUS_FAILURE} <<'/---'
Report *failure* (i.e., non-zero exit status) from the current runnable.
/---

:alias_command '[status = :int] report_integer(:int status)'\
    'return' <<'/---'
Report the passed *exit status* (i.e., 7-bit integer ranging `[0, 127]`, 0
signifying success and any other value failure) from the current runnable.
/---

# ....................{ REPORTERS ~ status                 }....................
# No, this is not crazy. This is zsh.
:alias_command '[status = :int] report_status()'\
    'return ${status} or return ${status}' <<'/---'
Return from the current runnable with the exit status of the command
conjunctively or disjunctively preceding this alias (i.e., of the command
suffixed by either `and report_status` or `or report_status`): e.g.,

.report_status()
==========================================
[source]
------------------------------------------
# Report the exit status of one of two randomly selected greps.
>>> :string on_wisdom=\
...    "From that time forth he believed that the wise man is one who never sets
...     himself apart from other living things, whether they have speech or not,
...     and in later years he strove long to learn what can be learned, in
...     silence, from the eyes of animals, the flight of birds, the great slow
...     gestures of trees."
>>> function on_later_years() {
...     if { is_odd $(get_random_number) } {
...         grep "${on_wisdom}" /earth and report_status
...     } else {
...         grep "${on_wisdom}" /sea   and report_status
...     }
... }
>>> on_later_years or :string.output\
...     "The more defensive a society, the more conformist."
The more defensive a society, the more conformist.
------------------------------------------
==========================================

== Usage ==

This alias should be preceded by either:

* `and`, in which case this alias _always_ returns such status -- even if such
  command *failed* (i.e., returned nonzero exit status).
* `or`, in which case this alias _only_ returns such status if such command
  failed. If such command *succeeded* (i.e., returned zero exit status), this
  alias is a noop.

== Motivation ==

Since `zeshy` defines TRAPZERR() to implicitly throw exceptions on non-zero exit
status, `zsh` global `${?}` cannot be reliably expanded for any purpose and
hence is effectively useless under `zeshy`: e.g.,

.${?} Rendered Useless
==========================================
[source]
------------------------------------------
# An exception will be thrown prior to returning ${?}.
>>> :string on_balance=\
...    "But we, insofar as we have power over the world and over one another, we
...     must learn to do what the leaf and the whale and the wind do of their
...     own nature. We must learn to keep the balance."
>>> function on_early_years() {
...     if { is_odd $(get_random_number) }
...         grep "${on_balance}" /farthest; return ${?}
...     } else {
...         grep "${on_balance}" /shore;    return ${?}
...     }
... }
>>> on_early_years or :string.output\
...    "Coercion is the least efficient means of obtaining order."
catamount_bad: "/farthest" not found
------------------------------------------
==========================================
/---

# Technically, such inversion is implementable with brute-force testing: e.g.,
#
#     if (( ${status[-1]} )) {
#         return 0
#     } else {
#         return 1
#     }
#
# While that certainly works, it's contemptibly overblown. Happily, such
# inversion is also implementable by noting that exponentiating 2 to the:
#
# * Zeroth power yields 1 (i.e., 2**0 == 1).
# * Any negative power yields a real number strictly less than 1 (e.g.,
#   2**-1 == 0.5).
#
# Since the negation of zero is still zero and since math function floor()
# returns the largest integer smaller than the passed real number, floor(2**-x)
# where x is a nonnegative integer yields either 1.0 if x is 0 or 0.0 otherwise.
# Casting such result to an integer completes the desired inversion. (We win.)
() {
    :string invert_status='return $(( int(floor(2 ** -status)) ))'
    :alias_command '[status = :int] report_status_inverted()'\
        "${invert_status} or ${invert_status}" <<'/---'
Report success if the command conjunctively or disjunctively preceding this
alias failed or failure if such command succeeded.  See report_status() for
further details: e.g.,

.report_status_inverted()
==========================================
[source]
------------------------------------------
>>> :string on_living=\
...    "I went to the woods because I wished to live deliberately, to front only
...     the essential facts of life, and see if I could not learn what it had to
...     teach, and not, when I came to die, discover that I had not lived. I did
...     not wish to live what was not life, living is so dear; nor did I wish to
...     practice resignation, unless it was quite necessary. I wanted to live
...     deep and suck out all the marrow of life, to live so sturdily and
...     Spartan-like as to put to rout all that was not life, to cut a broad
...     swath and shave close, to drive life into a corner, and reduce it to its
...     lowest terms, and, if it proved to be mean, why then to get the whole
...     and genuine meanness of it, and publish its meanness to the world; or if
...     it were sublime, to know it by experience, and be able to give a true
...     account of it in my next excursion."
>>> function on_not_living() {
...     if { is_even 1817 } {
...         is_string_contains "${on_living}" 'Spartan' and
...             report_status_inverted
...     } else {
...         is_string_contains "${on_living}" 'sublime' and
...             report_status_inverted
...     }
... }
>>> on_not_living and :string.output\
...     "As if you could kill time without injuring eternity."
As if you could kill time without injuring eternity.
------------------------------------------
==========================================
/---
}

# --------------------( WASTELANDS                         )--------------------
# Report the exit status of the command
# conjunctively or disjunctively preceding this alias ``inverted'' from the current runnable with . This alias succeeds if such command fails and fails if such command succeeds.  
# If such
# command *fails* (i.e., returns non-zero exit status), this alias *succeeds*
# (i.e., returns zero exit status); else, this alias fails.
#   'get_status | set_integer_to_stdin' <<'/---'
#   ':int.set ${status} or :int.set ${status}' <<'/---'
#   'set_integer_to_status__implementation ${pipestatus[-1]}' <<'/---'

#FUXME: "return" is a poor adjective for what such aliases do. Strings can be
#returned from functions and scripts. Exit status, however, cannot. So what is
#one doing, exactly, when one "returns" an exit status? Consider:
#
#* render (e.g., render_failure()).
#* report (e.g., report_failure()). Nice! Yes, I *QUITE* like this one.
#* retort (e.g., retort_failure()). (No.)

#Return from the current runnable with the exit status of the command
#piped to this alias inverted, squelching all output from such command. If such
#command *fails* (i.e., returns non-zero exit status), this alias *succeeds*
#(i.e., returns zero exit status); else, this alias fails. See
#report_status() for further details: e.g.,
#Due to `zsh` constraints, 
#FUXME: Rename to report_success().
#FUXME: Rename to report_failure().
#FUXME: Globally replace all instances of "or true" with
#"or ignore_failure". Prefer "or" to "and" in this case, merely for minor
#efficiency.

#FUXME: Globally rename "_status" to "_status". Such functionality is too
#core to waste on an unnecessary adjective.
#FUXME: Rename the parcel to @{status}.
#FUXME: Rename to ignore_failure().
#FUXME: Wait. No. This doesn't quite work. The "|" binds to only the last
#expression of get_status(), as expected (and hence only sets such integer
#under failure). Instead, we need something
#resembling... oh, bloody hell. It probably can't be done, after all. Ah! Wait.
#We *CAN* do it roundabouts, I expect. Consider:
#
#   ':string.output ${status} | {
#        integer exit_status__sites; exit_status__sites="$(get_stdin)" } or
#    :string.output ${status} | {
#        integer exit_status__sites; exit_status__sites="$(get_stdin)" }
#    {
#        :int.set "$(get_stdin)" "${exit_status__sites}"
#        undefine_variable exit_status__sites
#    } <<<'
#
#I mean, it's absolute *BALLS*. But it works, dunnit? Well, maybe... The whole
#affair's fairly hardcore. But I'll be eternally mundane if it it isn't
#eclectically jizz-worthy. "Do it, man. Do it!"

#Note also the need for separating this implementation between a front-facing
#alias and a backend function: the alias sends the proper exit status and
#integer name to the function in that order; the function then reserves the
#order of these arguments and calls :int.set(). Ideally, we'd just
#call .

#This must be called as a pipe rather than conjunction
#or disjunction: e.g.,
#    false | set_integer_to_status exit_status
        # Avoid calling print_stdin(), whose implementation implicitly performs
        # additional logic specific to traditional terminal output.
#       < "'${ZESHY_STDIN_PATH}'"
        # Return success.

#FUXME: Sadly, ${pipestatus[-1]} is not set correctly under all circumstances:
#e.g., "(( 0 )) or return ${pipestatus[-1]}" returns 0 rather than 1!
#alias report_status='return ${pipestatus[-1]} or return ${pipestatus[-1]}'
#   local invert='return $(( int(floor(2 ** -${pipestatus[-1]})) ))'

# ....................{ REPORTERS ~ status : silent        }....................
#FUXME: *THE FOLLOWING TWO ALIASES ARE FUNDAMENTALLY BROKEN AND CANNOT BE
#REPAIRED*. They simply don't work. For example, consider:
#     function evalo() { command ls /mmmmmm | true &>/dev/null && return ${pipestatus[-2]} }
#That doesn't do what you think, because "|" only pipes standard output -- not
#standard error. The caller would have to use "|&" rather than "|". But even
#then, the above *STILL* doesn't work. Try passing a path that actually exists
#-- say, "/etc". The above still fails. It always dies with non-zero exit
#status, probably because "ls" simply doesn't like being piped to "true". So
#piping isn't a solution at all. But that's the only way to squelch output,
#which means that the functions below can't be automated.
#FUXME: That said, report_status_inverted_silent() is generally useful
#enough to be retained (in heavily modified form) as a new function
#report_status_inverted(). I'm a tad too tired tonight, I'm afraid.

#alias report_status_inverted='true &>/dev/null and {
#    if (( ${pipestatus[-2]} )) {
#        return '${ZESHY_STATUS_SUCCESS}'
#    } else {
#        return '${ZESHY_STATUS_FAILURE}'
#    }
#}'

#:alias_command <<'/---'
#[status: int] report_status_silent()
#
#Return from the current function or script with the exit status of the command
#piped to this alias, squelching all output from such command. See
#report_status() for further details: e.g.,
#
#.report_status_silent()
#==========================================
#[source]
#------------------------------------------
#>>> string on_living=\
#...    "I went to the woods because I wished to live deliberately, to front only
#...     the essential facts of life, and see if I could not learn what it had to
#...     teach, and not, when I came to die, discover that I had not lived. I did
#...     not wish to live what was not life, living is so dear; nor did I wish to
#...     practice resignation, unless it was quite necessary. I wanted to live
#...     deep and suck out all the marrow of life, to live so sturdily and
#...     Spartan-like as to put to rout all that was not life, to cut a broad
#...     swath and shave close, to drive life into a corner, and reduce it to its
#...     lowest terms, and, if it proved to be mean, why then to get the whole
#...     and genuine meanness of it, and publish its meanness to the world; or if
#...     it were sublime, to know it by experience, and be able to give a true
#...     account of it in my next excursion."
#>>> function on_not_living() {
#...     if { is_even 1817 } {
#...         is "${on_living}" == *Spartan*  and report_status_silent
#...     } else {
#...         is "${on_living}" == *Athenian* and report_status_silent
#...     }
#... }
#>>> on_not_living or :string.output\
#...     "As if you could kill time without injuring eternity."
#As if you could kill time without injuring eternity."
#------------------------------------------
#==========================================
#/---
#alias report_status_silent='true &>/dev/null and return ${pipestatus[-2]}'

##FUXME: Manually change every "|" prefixing an expansion of such alias with
#"and". This is a bit annoying but certainly doable.
#:alias_command <<'/---'
#[status: int] report_status_inverted_silent()
#
#Return from the current function or script with the exit status of the command
#piped to this alias inverted, squelching all output from such command. If such
#command *fails* (i.e., returns non-zero exit status), this alias *succeeds*
#(i.e., returns zero exit status); else, this alias fails. See
#report_status() for further details: e.g.,
#
#.report_status_inverted_silent()
#==========================================
#[source]
#------------------------------------------
#>>> string on_mystery=\
#...    "Talk of mysteries! — Think of our life in nature, — daily to be shown
#...     matter, to come in contact with it, — rocks, trees, wind on our cheeks!
#...     The solid earth! the actual world! the common sense! Contact! Contact!
#...     Who are we? where are we?"
#>>> function on_matter() {
#...     if { is_odd 1862 } {
#...         is "${on_mystery}" == *Contact* and report_status_inverted_silent
#...     } else {
#...         is "${on_mystery}" == *High*    and report_status_inverted_silent
#...     }
#... }
#>>> on_matter and :string.output "The bluebird carries the sky on his back."
#The bluebird carries the sky on his back.
#------------------------------------------
#==========================================
#/---
#alias report_status_inverted_silent='true &>/dev/null and {
#    if (( ${pipestatus[-2]} )) {
#        return '${ZESHY_STATUS_SUCCESS}'
#    } else {
#        return '${ZESHY_STATUS_FAILURE}'
#    }
#}'

#As an alternative, consider simply prefixing such command with `not`. 
#alias report_status_silent='true &>/dev/null and return ${pipestatus[-2]}'
#alias report_status_inverted_silent='true &>/dev/null and {
#    if (( ${pipestatus[-2]} )) {
#        return '${ZESHY_STATUS_SUCCESS}'
#    } else {
#        return '${ZESHY_STATUS_FAILURE}'
#    }
#}'
#FUXME: This is *STUPID*. Just call "or report_status". (Yes, that actually
#works, despite the needless repetition; ideally, "zsh" should simply optimize
#such obvious repetition away.) Eliminate this function everywhere.
#:alias_command <<'/---'
#[stdout: string, status: int] report_status_if_failure()
#
#Return the exit status of the command conjunctively preceding this alias if such
#such status signifies *success* (i.e., is non-zero) or ignore such status
#otherwise. See report_status() for further details: e.g.,
#
#.report_status_if_failure()
#==========================================
#[source]
#------------------------------------------
#>>> function blue_dragon() {
#...     grep_path /glaucus atlanticus and report_status_if_failure
#...     :string.output "Flagellate flagon of the sea! Compel, return to me."
#... }
#>>> blue_dragon or :string.output "Azure indifference, indelicately sidereal."
#Azure indifference, indelicately sidereal.
#------------------------------------------
#==========================================
#/---
#alias report_status_if_failure='true and {
#    (( ${pipestatus[-2]} == '${ZESHY_STATUS_SUCCESS}' )) or
#        return ${pipestatus[-2]}
#}'

#"Tricolor ipomoea: the congress of concolor."
#>>> function catamount() {
#...     if { is_odd $(get_random_number) } {
#...         grep_path "$(get_home)" panthera and report_status
#...     } else {
#...         grep_path "$(get_home)"/concolor puma and report_status
#...     }
#... }
#>>> catamount or :string.output "Mountain lions abound, abiding ever on."
#Mountain lions abound, abiding ever on.
#; nonetheless, this alias
#always returns such status, even if such command failed with non-zero exit
#status
#Return the exit status of the runnable piped to this alias if such status is
#non-zero or return true: e.g.,

# Define return-specific aliases related to function and script return values.
# ....................{ REPORTERS ~ type                   }....................
#FUXME: Test return_boolean() and, once working, replicate this implementation
#to all similar aliases below. In fact, since every such implementation will be
#the exact same with only the call to "die_unless_${type}" dependent on type, we
#should probably define all such implementations with a for loop, ala:
#
#() {
#   for return_type (boolean character float integer) {
#       :alias_command <<"/---"
#string return_${return_type}(boolean value)
#
#Return the passed ${return_type} from the current function or script. See
#return_string() for further details.
#/---
#       alias return_${return_type}:catch'
#       {
#           # Validate standard input. For efficiency, avoid calling
#           # set_string_to_stdin_pipe().
#           string value__rrt; value__rrt="$(< "'${ZESHY_STDIN_PATH}'")"
#           die_unless_'${return_type}' "${value__rrt}"

#           # Print such boolean. For efficiency, avoid calling return_string(). For
#           # safety, avoid calling either :string.output() or print_stdin().
#           print -r -- "${value__rrt}"

#           # Return success.
#           report_success
#       } <<<'
#   }
#}
#
#Nothing could be simpler, really. Sweet, eh?

#:alias_command <<'/---'
#string return_boolean(boolean value)
#
#Return the passed boolean from the current function or script. See
#return_string() for further details.
#/---
#alias return_boolean='
#{
#    # Validate standard input. For efficiency, avoid calling
#    # set_string_to_stdin_pipe().
#    string boolean__rb; boolean__rb="$(< "'${ZESHY_STDIN_PATH}'")"
#    die_unless_boolean "${boolean__rb}"
#
#    # Print such boolean. For efficiency, avoid calling return_string(). For
#    # safety, avoid calling either :string.output() or print_stdin().
#    print -r -- "${boolean__rb}"
#
#    # Return success.
#    report_success
#} <<<'
#
#:alias_command <<'/---'
#string return_float(float value)
#
#Return the passed float from the current function or script. See
#return_string() for further details.
#/---
#alias return_float=return_string
#
#:alias_command <<'/---'
#string return_integer(integer value)
#
#Return the passed integer from the current function or script. See
#return_string() for further details.
#/---
#alias return_integer=return_string
#
#
## `zsh` global `${?}` _cannot_ be subsequently tested for failure:
##the conventional implementation of such logic (e.g., ). Due
##to `zeshy's` TRAPZERR() definition, such logic does not work as expected: e.g.,

#>>> function grep_etc_gentoo_release() {
#...     if { is_odd $(get_random_number) } {
#...         grep_path Gentoo /etc/gentoo-release  and report_status
#...     } else {
#...         grep_path release /etc/gentoo-release and report_status
#...     }
#... }
#>>> grep_etc_gentoo_release
#gentoo-release:1:Gentoo Base System release 2.1

#   >>> function catamount() {
#   ...     if is_odd $(get_random_number)
#   ...     then grep_path /onca panthera and report_status
#   ...     else grep_path /concolor puma and report_status
#   ...     fi
#   ... }
# >>> catamount or :string.output "Mountain lions abound, abiding ever on."
#   Mountain lions abound, abiding ever on.

# ....................{ GETTERS                            }....................
#FUXME: Rename to something indicating the need to pipe output. Say,
#print_stdin_and_get_status().
#FUXME: Actually, does anyone actually call this *ANYWHERE*? The problem, of
#course, is that it's difficult to reliably parse the printed output from exit
#status. This should probably be excised.
#:alias_command <<'/---'
#void get_status()
#
#Get the exit status of the runnable piped to this alias. See
#report_status() for further details and caveats: e.g.,
#
#.get_status()
#==========================================
#[source]
#------------------------------------------
## Output the exit status of one of two randomly selected greps.
#>>> grep "Lipotes vexillifer" /baiji | get_status
#2
#------------------------------------------
#==========================================
#/---
#alias get_status='true and :string.output ${pipestatus[-2]}'

    # See return_string() for further details.
#FUXME: Rename to report_status() or return_prior_status().
#I'm partial to the former, which nicely comports with Zeshy nomenclature.

