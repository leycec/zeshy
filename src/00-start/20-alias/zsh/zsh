#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core `zsh` aliases.
/---

# ....................{ TESTERS                            }....................
# Integer global ${ZSH_SUBSHELL} expands to the current subshell depth or 0 if
# the current shell is *NOT* a subshell. Hence, the current shell is a subshell
# if and only if such global is nonzero.
declare_alias_with_stdin\
    '[status: bool] is_shell_subshell(void)'\
    '(( ZSH_SUBSHELL ))' <<'/---'
Report success if the current shell is a *subshell* (i.e., a child `zsh` shell
forked from another `zsh` shell, typically via `(...)` or `$(...)` syntax).
/---

# ....................{ ENDERS                             }....................
declare_alias_with_stdin\
    'void :end_case(void)'\
    ';;' <<'/---'
Terminate the current `case` statement. Expand this alias _only_ in `case`
statement conditions, typically as the last command in such conditions: e.g.,

.:end_case()
==========================================
[source]
------------------------------------------
>>> :string on_living=\
...    "Don't mistake anything for reality. 'What have you seen in your
...     travels?' was asked of Sage Evemere. 'Follies!' was the reply. 'Follies,
...     follies everywhere!' We never live; we are always in the expectation of
...     living."
>>> case "${on_living}" {
... (*v?m?r*)
...     output_string\
...         "It must be obvious... that there is a contradiction in wanting to
...          be perfectly secure in a universe whose very nature is
...          momentariness and fluidity."
...     :end_case
... (*r?m?v*)
...     output_string\
...         "The greater part of human activity is designed to make permanent
...          those experiences and joys which are only lovable because they are
...          changing."
...     :end_case
... }
It must be obvious... that there is a contradiction in wanting to
be perfectly secure in a universe whose very nature is
momentariness and fluidity.
------------------------------------------
==========================================
/---

# ....................{ ITERATORS                          }....................
#FIXME: We've realized there's a simple means of eliminating the duplication in
#for loop iteration: e.g.,
#
#    # This is bad.
#    :string yum
#    for     yum ("${@}") { ... }
#
#    # This is good.
#    :for_string yum ("${@}") { ... }
#
#Sweet, no? Implement two aliases :for_string() and :for_int() in the
#expected here-document-driven manner. Should be fairly simple, but
#produces much more elegant code. Yay!
#FIXME: Ugh. As the half-hearted implementation below demonstrates, this isn't
#so simple after all and in fact requires the "~{"- and "}~"-delimited multiple
#argument approach: e.g.,
#
#    :for_string~{ yum mmy }~ ("${@}") { ... }
#
#That said, the bright side here is that (as the prior example demonstrates)
#such technique supports arbitrarily many arguments and hence variable names.
#Still, it will have to wait until we implement support for such aliases.

# declare_alias_with_stdin\
#     'void :for_string(string string_name, string code1, ...)'\
#     '{
#         # Localize such string.
#         :string string_name__fs; string_name__fs="$(get_stdin)"
#         :string "${string_name__fs}"
#     } <<<' <<'/---'
# Terminate the current `case` statement. Expand this alias _only_ in `case`
# statement conditions, typically as the last command in such conditions: e.g.,
# /---

# --------------------( WASTELANDS                         )--------------------
#Break from the currently matched condition of the current `case` statement. This
#is typically the last command in every such condition of most : e.g.,

# *`zsh` subshell* (i.e., child shells forked from other shells, typically
# using `(...)` and `$(...)` syntax) aliases.
