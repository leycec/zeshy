#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle core `zsh` aliases.
/---

# ....................{ TESTERS                            }....................
# Integer global ${ZSH_SUBSHELL} expands to the current subshell depth or 0 if
# the current shell is *NOT* a subshell. Hence, the current shell is a subshell
# if and only if such global is nonzero.
:alias_command.declare '[status = :bool] is_shell_subshell()'\
    '(( ZSH_SUBSHELL ))' <<'/---'
Report success if the current shell is a *subshell* (i.e., a child `zsh` shell
forked from another `zsh` shell, typically via `(...)` or `$(...)` syntax).
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to :break_case(), which is considerably more evocative of what
#such alias accomplishes. (Also, we prefer "stop" to "end" in zeshy
#nomenclature. Using "stop" here, however, would imply such alias to
#syntactically terminate the entire case() block, which isn't the case.)

# :alias_command.declare\
#     'void :for_string(string string_name, string code1, ...)'\
#     '{
#         # Localize such string.
#         :string string_name__fs; string_name__fs="$(get_stdin)"
#         :string "${string_name__fs}"
#     } <<<' <<'/---'
# Terminate the current `case` statement. Expand this alias _only_ in `case`
# statement conditions, typically as the last command in such conditions: e.g.,
# /---

#Break from the currently matched condition of the current `case` statement. This
#is typically the last command in every such condition of most : e.g.,

# *`zsh` subshell* (i.e., child shells forked from other shells, typically
# using `(...)` and `$(...)` syntax) aliases.
