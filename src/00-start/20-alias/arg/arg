#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *argument lists* (i.e., lists of all arguments passed to functions and
scripts).
/---

# ....................{ [AP|PRE]PENDERS                    }....................
#FIXME: Also implement an insertion method (i.e., inserting a string into an
#arbitrary argument index, pushing all subsequent indices down by one), which
#it turns out is efficiently implementable ala:
#
#    '{ argv[$(( arg_index - 1 ))]+="${arg_value}" } <<<'
#
#Alas, such alias expects two arguments and hence must be implemented as a
#split alias expandable as follows:
#
#    :arg.insert_at_index:: "my new arg" 3 ::
#FIXME: The above approach works for inserting to all indices *EXCEPT* the
#first, which requires a slightly more convoluted approach (i.e., shift all
#arguments down by 1 index, then set the first index). Of course, this is
#easiest (and probably most efficiently) implemented as:
#
#    set_args "${arg_value}" "${@}"

:alias_command\
    'void {prepend_arg, unshift_arg}(string arg)'\
    '{ set_args "$(get_stdin)" "${@}" } <<<' <<'/---'
Prepend the passed argument to the beginning of the current argument list. Due
to `zsh` constraints, this alias accepts only a single such argument.
/---

#FIXME: Actually, isn't this significantly more efficiently implementable as
#follows?
#
#   '{ argv+="$(get_stdin)" } <<<'
#
#Looks good to us. (Test us up, please...)
:alias_command\
    'void {append_arg, push_arg}(string arg1, ...)'\
    'set_args "${@}"' <<'/---'
Append the passed arguments to the end of the current argument list.
/---

# ....................{ SHIFTERS                           }....................
:alias_command 'void shift_args(int arg_count = 1)' 'shift --' <<'/---'
Remove the passed number of arguments (defaulting to 1) from the beginning of
the current argument list.
/---

:alias_command 'void shift_arg()' 'argv[1]=()' <<'/---'
Remove the first argument from the current argument list.
/---

:alias_command 'void shift_args_2()' 'argv[1,2]=()' <<'/---'
Remove the first two arguments from the current argument list.
/---

:alias_command 'void shift_args_3()' 'argv[1,3]=()' <<'/---'
Remove the first three arguments from the current argument list.
/---

# ....................{ POPPERS                            }....................
:alias_command\
    'void pop_args(integer argument_count)'\
    '{
        # Validate sanity.
        :string count__pa; count__pa="$(get_stdin)"
        die_unless_arg_index "${count__pa}"

        # Pop such arguments.
        argv[-${count__pa},-1]=()
    } <<<' <<'/---'
Remove the passed number of arguments from the end of the current argument list.
/---

:alias_command 'void pop_arg()' 'argv[-1]=()' <<'/---'
Remove the last argument from the current argument list.
/---

:alias_command 'void pop_args_2()' 'argv[-2,-1]=()' <<'/---'
Remove the last two arguments from the current argument list.
/---

:alias_command 'void pop_args_3()' 'argv[-3,-1]=()' <<'/---'
Remove the last three arguments from the current argument list.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Also define a new generalized remove_args() function 
