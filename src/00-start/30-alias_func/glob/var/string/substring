#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *substring globbers* (i.e., functions matching substrings within strings
against extended glob expressions).
/---

#FIXME: Refactor all such functions to accept a string variable instead.
#FIXME: For each such removal operation, there actually exist two different
#variants -- one removing shortest matches (e.g., "##") and the other longest
#matches (e.g., "#"). While this doesn't matter with raw string literals (the
#length of each match is obviously constrained, in that case), this *DOES*
#matter with globs. We'll need to distinguish between the two as follows:
#
#* :remove_string_prefix(). (No need to distinguish.)
#* :remove_string_prefix_matching_glob_longest().
#* :remove_string_prefix_matching_glob_shortest().
#FIXME: Hmm; we should probably define :remove_string_prefix_matching_glob() to
#match longest substrings by default, as that's how pretty much all string
#matching APIs behave. Then define the following:
#
#* :remove_string_prefix_matching_glob().
#* :remove_string_prefix_matching_glob_nongreedy().
#
#Don't bother defining :remove_string_prefix_matching_glob_longest()! This is
#already too many functions as it is. Note the use of adjective "_nongreedy" as
#well, permitting such adjective to be helpfully appended to such name.

# ....................{ REMOVERS                           }....................
:declare_func_ '<globbable> :string :remove_string_text_matching_glob(
    :string string_name, :string glob)' :declare_func{
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one glob.'
    :string string_name__rstmg="${1}" glob__rstmg="${2}"
    die_unless_string "${string_name__rstmg}"

    # Remove matching substrings from such string. Dismantled, this is:
    #
    # * "(X)", printing errors if such glob is invalid.
    # * "//", greedily removing longest substrings.
    :set_string_to_string\
        "${string_name__rstmg}"\
        "${(XP)string_name__rstmg//${~glob__rstmg}}"
}:declare_func <<'/---'
Remove all longest substrings from the value of the passed string variable
matching the passed *greedy glob* (i.e., removing longest rather than shortest
matching substrings): e.g.,

.:remove_string_text_matching_glob()
==========================================
[source]
------------------------------------------
>>> :string on_discipline=\
...    "The degradation which most workers experience on the job is the sum of
...     assorted indignities which can be denominated as \"discipline.\"
...     Foucault has complexified this phenomenon but it is simple enough.
...     Discipline consists of the totality of totalitarian controls at the
...     workplace – surveillance, rotework, imposed work tempos, production
...     quotas, punching -in and -out, etc."
>>> :remove_string_text_matching_glob "${on_discipline}" ' w'[[:graph:]]##
>>> get_string_line "${on_discipline}" 1
The degradation most experience on the job is the sum of
------------------------------------------
==========================================
/---

:declare_func_ '<globbable> :string :remove_string_text_matching_glob_nongreedy(
    :string string_name, :string glob)' :declare_func{
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one glob.'
    :string string_name__rstmgn="${1}" glob__rstmgn="${2}"
    die_unless_string "${string_name__rstmgn}"

    # Remove matching substrings from such string. Dismantled, this is:
    #
    # * "(X)", printing errors if such glob is invalid.
    # * "/", non-greedily removing longest substrings.
    :set_string_to_string\
        "${string_name__rstmgn}"\
        "${(XP)string_name__rstmgn/${~glob__rstmgn}}"
}:declare_func <<'/---'
Remove all shortest substrings from the value of the passed string variable
matching the passed *nongreedy glob* (i.e., removing shortest rather than longest
matching substrings): e.g.,

.:remove_string_text_matching_glob_nongreedy()
==========================================
[source]
------------------------------------------
>>> :string on_control=\
...    "Discipline is what the factory and the office and the store share with
...     the prison and the school and the mental hospital. It is something
...     historically original and horrible. It was beyond the capacities of such
...     demonic dictators of yore as Nero and Genghis Khan and Ivan the
...     Terrible. For all their bad intentions they just didn't have the
...     machinery to control their subjects as thoroughly as modern despots do.
...     Discipline is the distinctively diabolical modern mode of control, it is
...     an innovative intrusion which must be interdicted at the earliest
...     opportunity."
>>> :remove_string_text_matching_glob_nongreedy "${on_control}" ' w'[[:graph:]]##
>>> get_string_line "${on_control}" 1
Discipline is the factory and the office and the store share
------------------------------------------
==========================================
/---

# ....................{ REMOVERS ~ prefix                  }....................
:declare_func_ '<globbable> :string remove_string_prefix_matching_glob(
    :string text, :string glob)' :declare_func{
    # See :remove_string_text_matching_glob() for further details.
    die_unless_args_2 'Expected one string and one glob.'
    :output_string "${(X)1##${~2}}"
}:declare_func <<'/---'
Remove the longest prefix from the passed string matching the passed glob and
return the resulting string. If no such prefix exists, return such string as is:
e.g.,

.remove_string_prefix_matching_glob()
==========================================
[source]
------------------------------------------
>>> :string on_quietude=\
...    "Ask the world to reveal its quietude—
...     not the silence of machines when they are still,
...     but the true quiet by which birdsongs,
...     trees, bellows, snails, clouds, storms
...     become what they are, and are nothing else."
>>> remove_string_prefix_matching_glob "${on_quietude}" *'storms'[[:space:]]
become what they are, and are nothing else.
------------------------------------------
==========================================
/---

# ....................{ REMOVERS ~ suffix                  }....................
#FIXME: Split example at "Cruelty and injustice...".
:declare_func_ '<globbable> :string remove_string_suffix_matching_glob(
    :string text, :string glob)' :declare_func{
    # See :remove_string_text_matching_glob() for further details.
    die_unless_args_2 'Expected one string and one glob.'
    :output_string "${(X)1%%${~2}}"
}:declare_func <<'/---'
Remove the longest suffix from the passed string matching the passed glob and
return the resulting string. If no such suffix exists, return such string as is:
e.g.,

.remove_string_suffix_matching_glob()
==========================================
[source]
------------------------------------------
>>> :string on_obedience=\
...    "Good evening, London. Allow me first to apologize for this interruption.
...     I do, like many of you, appreciate the comforts of everyday routine –
...     the security of the familiar, the tranquility of repetition. I enjoy
...     them as much as any bloke. But in the spirit of commemoration, thereby
...     those important events of the past usually associated with someone's
...     death or the end of some awful bloody struggle, are celebrated with a
...     nice holiday, I thought we could mark this November the 5th, a day that
...     is sadly no longer remembered, by taking some time out of our daily
...     lives to sit down and have a little chat. There are of course those who
...     do not want us to speak. I suspect even now, orders are being shouted
...     into telephones, and men with guns will soon be on their way. Why?
...     Because while the truncheon may be used in lieu of conversation, words
...     will always retain their power. Words offer the means to meaning, and
...     for those who will listen, the enunciation of truth. And the truth is,
...     there is something terribly wrong with this country, isn't there?
...     Cruelty and injustice, intolerance and oppression. And where once you
...     had the freedom to object, to think and speak as you saw fit, you now
...     have censors and systems of surveillance coercing your conformity and
...     soliciting your submission. How did this happen? Who's to blame? Well
...     certainly there are those who are more responsible than others, and they
...     will be held accountable, but again truth be told, if you're looking for
...     the guilty, you need only look into a mirror. I know why you did it. I
...     know you were afraid. Who wouldn't be? War, terror, disease. There were
...     a myriad of problems which conspired to corrupt your reason and rob you
...     of your common sense. Fear got the best of you, and in your panic you
...     turned to the now high chancellor, Adam Sutler. He promised you order,
...     he promised you peace, and all he demanded in return was your silent,
...     obedient consent. Last night I sought to end that silence."
>>> remove_string_suffix_matching_glob\
...     "${on_obedience}" [[:space:]]'interruption'*
Good evening, London. Allow me first to apologize for this interruption.
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
 # By default, zsh silently
    #   ignores glob errors in parameter expansions.
