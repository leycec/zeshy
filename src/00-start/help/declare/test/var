#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Document all globals, functions, and aliases declared by @{*-test/var}.
/---

# ....................{ EXCEPTIONS                         }....................
:func.document <<'/---'
:void :var.die_unless_type_bool(^:string var_name1, ...)

Throw an exception unless all passed variables are existing booleans. See
:var.is_type_bool().
/---

:func.document <<'/---'
:void :var.die_unless_type_char(^:string var_name1, ...)

Throw an exception unless all passed variables are existing characters. See
:var.is_type_char().
/---

:func.document <<'/---'
:void :var.die_unless_type_float(^:string var_name1, ...)

Throw an exception unless all passed variables are existing floats. See
:var.is_type_float().
/---

:func.document <<'/---'
:void :var.die_unless_type_int(^:string var_name1, ...)

Throw an exception unless all passed variables are existing integers. See
:var.is_type_int().
/---

:func.document <<'/---'
:void :var.die_unless_type_list(^:string var_name1, ...)

Throw an exception unless all passed variables are existing lists. See
:list.is().
/---

:func.document <<'/---'
:void :var.die_unless_type_map(^:string var_name1, ...)

Throw an exception unless all passed variables are existing maps. See
:map.is().
/---

:func.document <<'/---'
:void :var.die_unless_type_string(^:string var_name1, ...)

Throw an exception unless all passed variables are existing strings. See
:var.is_type_string().
/---

# ....................{ EXCEPTIONS ~ metatype              }....................
:func.document <<'/---'
:void :var.die_unless_type_number(^:string var_name1, ...)

Throw an exception unless all passed variables are existing numbers. See
:var.is_type_number().
/---

:func.document <<'/---'
:void :var.die_unless_type_scalar(^:string var_name1, ...)

Throw an exception unless all passed variables are existing scalars. See
:var.is_type_scalar().
/---

# ....................{ TESTERS                            }....................
:func.document <<'/---'
[status = :bool] ::var.is_type_bool(^:string var_name1, ...)

Report success if all passed variables are existing booleans.
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_char(^:string var_name1, ...)

Report success if all passed variables are existing characters.
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_float(^:string var_name1, ...)

Report success if all passed variables are existing floats.
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_int(^:string var_name1, ...)

Report success if all passed variables are existing integers.
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_list(^:string var_name1, ...)

Report success if all passed variables are existing lists.
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_map(^:string var_name1, ...)

Report success if all passed variables are existing maps.
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_number(^:string var_name1, ...)

Report success if all passed variables are existing *numbers* (i.e., either
integers or floats).
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_scalar(^:string var_name1, ...)

Report success if all passed variables are existing *scalars* (i.e., either
booleans, characters, integers, floats, or strings).
/---

:func.document <<'/---'
[status = :bool] ::var.is_type_string(^:string var_name1, ...)

Report success if all passed variables are existing strings.
/---

# --------------------( WASTELANDS                         )--------------------
# Unlike
# ::var.is_type_string(), if any such variable does _not_ exist, failure is
# reported.
