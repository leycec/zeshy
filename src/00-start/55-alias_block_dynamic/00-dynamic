#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *dynamic block alias definers* (i.e., functions defining pairs of
related aliases accepting arbitrarily many passed arguments intended to be
expanded in proximity to each other, typically delimiting blocks of
user-defined code effectively evaluated by such aliases).
/---

#FIXME: :set_strings_to_list_items() is probably an interesting function.
#Here's a first stab at an implementation.
#FIXME: O.K.; :set_strings_to_list_items() is great, but overkill for use in
#*EVERY* block alias. Since the manner in which we define block aliases
#guarantees the existence of such local variables, we needn't revalidate their
#existence. Hence, inline the contents of :set_strings_to_list_items() in block
#aliases.
#FIXME: Document and shift such function elsewhere (e.g., @{var/list/set}).
function :set_strings_to_list_items() {
    # Validate sanity.
    die_unless_args_2_or_more\
        'Expected one or more string names and one list name.'
    :string list_name__sstli="${@[-1]}" list_item__sstli
    :var.die_unless_type_list "${list_name__sstli}"
    pop_arg

    #FIXME: We'd probably want to throw an exception unless the number of
    #passed string names is equal to the passed list size, as well.

    :var.die_unless_type_string "${@}"
    eval 'for '${*}' ("${'${list_name__sstli}'[@]}") { break }'

    #FIXME: How about this? Ugh. Maybe not. We'd probably need to iterate
    #with indices manually so as to index both lists. The above is
    #substantially cleverer.
    # for list_item__sstli ("${(@P)list_name__sstli}") {
    #     :string.set 
    # }
}

# ....................{ GLOBALS                            }....................
:int_global ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX=-1 <<'/---'
0-based index of the currently expanded block alias if at least one such alias
is expanded in the current context (i.e., function or script) or -1 otherwise.

== Motivation ==

Such alias internally expands such index to uniquify local variable names,
preventing variable name collisions when expanding block aliases within
expansions of the same block aliases (i.e., when nesting two or more of the
same block aliases).
/---

# Prefer low-level zsh to high-level zeshy exception handling here. Since
# exception handling largely remains the caller's responsibility, low-level
# exception handling suffices for our rather simplistic purposes.
:alias_command ':for_map_keys:'='ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX+=1
    {
        :list                "args__abd_${ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX}"
        :list.set_to_string "args__abd_${ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX}"'
:alias_global ':{'='
    function "::alias_block_dynamic:${ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX}"() {'

# While we *COULD* proactively undefine the temporary private function the
# prior expansion of global alias ":{" defined in the "always {...}" block
# below, there's little demonstrable point. Such function will simply be
# redefined by the next block alias expanded at the same nesting depth. Since
# leaving such function privately defined poses no harm, do so.
#
# For efficiency, inline such implementation. See :set_strings_to_list_items()
# for further details.
:alias_command '}:for_map_keys'='}
        eval ''
            (( ${#args__abd_''${ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX}''} == 2 )) or :die\
                "Expected one map name and one key name."
            :string map_name__fmk key_name__fmk
            for     map_name__fmk key_name__fmk (
                "${args__abd_''${ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX}''[@]}") {
                break
            }''
        eval ''
            :string ''${key_name__fmk}''
            for     ''${key_name__fmk}'' ("${(k@)''${map_name__fmk}''}") {
                ''${functions[::alias_block_dynamic:${ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX}]}''
        }''
    } always {
        ZESHY_ALIAS_BLOCK_DYNAMIC_INDEX+=-1
    }'

function fami() {
    :map mappo; mappo=( 'a oubou u' '0 3jkjk' 'jk kkjk kb' '2420u 1' )
    :for_map_keys: mappo key :{
        :string.output "key: ${key}"
    }:for_map_keys
}

#FIXME: *WE HAVE LIFTOFF*. It works. My Nordic faye, enter this fray! It's
#incomprehsibly convolute, but that's largely irrelevant. *IT WORKS*.

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Right! A bit heavyweight, clearly. That would certainly work, but
    #it'd be great to excise the additional eval().
    #FUXME: Nevermind. This is great -- assuming :die_unless_vars_string() is
    #even halfway efficient, which it probably isn't. (Could it be optimized to
    #be efficient, though?)

#FUXME: O.K.; :set_strings_to_list_items() is great, but overkill for use in
#*EVERY* block alias. Since the manner in which we define block aliases
#guarantees the existence of such local variables, we needn't revalidate their
#existence. Hence, inline the contents of :set_strings_to_list_items() as
#follows:
# () {
#     :map map; map=( 'a' '0' 'b' '1' )
# 
#     # Such integer global should be initialized to "-1".
#     ZESHY_ALIAS_BLOCK_INDEX+=1
# 
#     # Avoid use of ":try{...}:catch{...}:catch" here, which is somewhat too
#     # heavyweight and overkill for such simplistic use below.
#     {
#         :list                "args__abd_${ZESHY_ALIAS_BLOCK_INDEX}"
#         :list.set_to_string "args__abd_${ZESHY_ALIAS_BLOCK_INDEX}" map key
#         function "::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}"() {
#             :string.output "key: ${key}"
#         }
#         # This is what such block alias definer internally performs. Such logic
#         # remains the same for every block alias.
#         eval '
#         :string key_name__fmk map_name__fmk
#         for     key_name__fmk map_name__fmk (
#             "${args__abd_'${ZESHY_ALIAS_BLOCK_INDEX}'[@]}") { break }'
# 
#         # This is what the user passes such block alias definer. Such logic
#         # differs between block aliases.
#         eval '
#         :string '${key_name__fmk}'
#         for     '${key_name__fmk}' ("${(k@)'${map_name__fmk}'}") {
#             '${functions[::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}]}'
#         }'
#     } always {
#         { unfunction "::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}" } :silent_stderr
#         ZESHY_ALIAS_BLOCK_INDEX+=-1
#     }
# }
#FUXME: Intense, eh? Merely four lines of zsh expands into *THAT* monstrosity.
#But it *WILL* Work. We're reasonably confident of that. And as we explore this
#path further, we may yet uncover even more efficient means of implementing
#such logic.
#FUXME: Now, we have to begin work on the actual aliases. Let's go!

#FUXME: This...
# () {
#     :map map; map=( 'a' '0' 'b' '1' )
#     :for_map_keys: map key :{
#         :string.output "key: ${key}"
#     }:for_map_keys
# }

#FUXME: ...should expand to this:
# () {
#     :map map; map=( 'a' '0' 'b' '1' )
# 
#     # Such function should be defined to perform the equivalent of:
#     #     ZESHY_ALIAS_BLOCK_ARGS_STACK+="${(qq)@}"
#     :append_list_with_strings_quoted ZESHY_ALIAS_BLOCK_ARGS_STACK map key
#     ZESHY_ALIAS_BLOCK_LINE_NUMBER_START_STACK+="${LINENO}"
#     #FUXME: Woo. Nice. Perhaps a much simpler expansion avails itself! Let's try
#     #again, below.
#     function ::alias_block_placeholder() {
#         :string.output "key: ${key}"
#     }
#     ZESHY_ALIAS_BLOCK_ARGS_STACK[-1]=()
#     ZESHY_ALIAS_BLOCK_LINE_NUMBER_START_STACK[-1]=()
# }

#FUXME: ...should expand to *THIS* (one more time!):
# () {
#     :map map; map=( 'a' '0' 'b' '1' )
# 
#     # Such integer global should be initialized to "-1".
#     ZESHY_ALIAS_BLOCK_INDEX+=1
# 
#     # Avoid use of ":try{...}:catch{...}:catch" here, which is somewhat too
#     # heavyweight and overkill for such simplistic use below.
#     {
#         ZESHY_ALIAS_BLOCK_ARGS_NAME_STACK+="args__ab_${ZESHY_ALIAS_BLOCK_INDEX}"
#         :list                "${ZESHY_ALIAS_BLOCK_ARGS_NAME_STACK[-1]}"
#         :list.set_to_string "${ZESHY_ALIAS_BLOCK_ARGS_NAME_STACK[-1]}" map key
#         function "::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}"() {
#             :string.output "key: ${key}"
#         }
#         :string\
#             key_name__fmk="${${(@P)ZESHY_ALIAS_BLOCK_ARGS_NAME_STACK[-1]}[1]}"\
#             map_name__fmk="${${(@P)ZESHY_ALIAS_BLOCK_ARGS_NAME_STACK[-1]}[2]}"
#         eval '
#         :string '${key_name__fmk}'
#         for     '${key_name__fmk}' ("${(k@)'${map_name__fmk}'}") {
#             '${functions[::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}]}'
#         }'
#     } always {
#         { unfunction "::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}" } :silent_stderr
#         ZESHY_ALIAS_BLOCK_INDEX+=-1
#         ZESHY_ALIAS_BLOCK_ARGS_NAME_STACK[-1]=()
#     }
# }

#FUXME: O.K.; that's great, but a bit heavywinded. This can be reduced with
#judicious helper function use to the following:
# () {
#     :map map; map=( 'a' '0' 'b' '1' )
# 
#     # Such integer global should be initialized to "-1".
#     ZESHY_ALIAS_BLOCK_INDEX+=1
# 
#     # Avoid use of ":try{...}:catch{...}:catch" here, which is somewhat too
#     # heavyweight and overkill for such simplistic use below.
#     {
#         :list                "args__ab_${ZESHY_ALIAS_BLOCK_INDEX}"
#         :list.set_to_string "args__ab_${ZESHY_ALIAS_BLOCK_INDEX}" map key
#         function "::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}"() {
#             :string.output "key: ${key}"
#         }
#         :string key_name__fmk map_name__fmk
#         :set_strings_to_list_items\
#             key_name__fmk map_name__fmk "args__ab_${ZESHY_ALIAS_BLOCK_INDEX}"
#         eval '
#         :string '${key_name__fmk}'
#         for     '${key_name__fmk}' ("${(k@)'${map_name__fmk}'}") {
#             '${functions[::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}]}'
#         }'
#     } always {
#         { unfunction "::alias_block:${ZESHY_ALIAS_BLOCK_INDEX}" } :silent_stderr
#         ZESHY_ALIAS_BLOCK_INDEX+=-1
#     }
# }

#FUXME: Actually, there could still conceivably exist a solution -- but it's
#somewhat ugly. Actually, there exist two solutions:
#
#1. Dynamically redefine all functions to be compiled into the current digest
#   file immediately before compiling such file. Reduce all such function
#   definitions to the current expansion of "${functions[${function_name}]}",
#   guaranteeing ${LINENO} to always correspond to such expansion. However:
#   * The most grevious disadvantage of such approach is that all functions
#     expanding block aliases will be broken until *AFTER* compiling the
#     current digest file and must not be called beforehand. (Yeah, right.)
#2. We can obtain the current relative original line number with ${LINENO} and
#   the current absolute original line number with the ":"-prefixed suffix of
#   "${funcfiletrace[1]}". Given the latter, we could then parse the
#   corresponding file for such line numbers with ${mapfile}. Of course, that's
#   hideously inefficient, incurring an extreme number of disk accesses. The
#   solution, as ever, would be to cache. Specifically:
#   * Only perform such disk access *ONCE*, caching the resulting user-defined
#     block alias lines into a map keyed by "${funcfiletrace}" (i.e.,
#     ":"-delimited source file and line number).
#   * Flush out infrequently expanded block alias lines from such cache.
#
#O.K.; so, 2. certainly appears to be the more robust solution. Or does it?
#It's hideously complex, due to caching considerations. But there's a perhaps
#greater issue: *AFTER* being compiled into the digest file, there appears to
#be no means of obtaining the original source file from which a function was
#originally compiled. Since the zcompile() builtin provides no means of
#inspecting compiled function bodies, this is also a dead-end. Oh! Wait. Of
#course, our parcel mechanism already provides a means of mapping between the
#two. That said, the inefficiency involved here is somewhat unctuous. But
#perhaps not insurmountable.
#
#Alternatively, as discussed, we *COULD* reduce function definitions. This has
#a number of side benefits: namely, it would permit us to print the exact
#function lines that failed when an exception is thrown. That's great,
#actually, as we currently have no means of doing so.
#
#O.K.; the fringe benefits of solution 1. above have nigh sold us. But how can
#we solve the caveat of all block aliases in such functions failing prior to
#compilation? Simple! We either:
#
#1. Recompile them *IMMEDIATELY* after sourcing their parent parcels in
#   @{compile}. (Probably the ideal solution, requiring no existing changes.)
#2. Refactor :declare_func() to succeed rather than follow function definitions,
#   in which case :declare_func() could redefine the previously defined
#   function. However, this method is probably fraught with frightful
#   subtleties.
#
#So, go 1. If you consider it, we *STRONGLY* want to do this anyway at some
#future point, so that we can actually emit function contexts on all fatal
#errors -- which would be really great. The could should be fairly simple: the
#only complexities, really, will be obtaining the set of all functions defined
#by such parcel. While we *COULD* obtain such set without subshells by
#examining parcel mappings, such (admittedly efficient) approach has several
#disadvantages:
#
#* Such mappings are only established long after the fact for early parcels,
#  inducing odd (and possibly problematic) desynchronizations.
#* Such mappings fail to include functions defined in such parcels but not
#  formally declared. If such functions also include block aliases, the result
#  will be *HORRIBLE*!
#
#Instead, we'll probably have to take the brute-force approach. Wait... we've
#just realized that this can *STILL* be done without subshells. *sigh*
#
#Forehead smacking time. Given canonical list global ${functions}, we can
#efficiently obtain the set of all newly defined functions by capturing such
#list before sourcing the current script into a temporary list, then
#differencing the current contents of ${functions} with such temporary list
#after such sourcing. Super efficient! Indeed, such approach can (and *SHOULD*)
#be used elsewhere in @{compile} to perform efficient names differencing, and
#can (and *SHOULD*) be extended to both aliases and globals. Yay!
#FUXME: In summary:
#
#* Dynamically redefine all functions to be compiled into the current digest
#  file immediately *AFTER* sourcing such file by efficiently differencing
#  ${functions} with itself.
#* Reduce all such function definitions to the current expansion of
#  "${functions[${function_name}]}", guaranteeing ${LINENO} to always
#  correspond to such expansion.
#FUXME: It's critical to do so *AFTER* sourcing such file, to guarantee
#subsequent parcels access to properly defined functions. Wait. That's *REALLY*
#not good enough. We'd definitely like to leverage block aliases within digest
#precompilation functions, which we're in process of simply calling in-place
#now rather than as formally hooked functions. That implies we will need to
#provide some means of redefining functions *DURING* rather than merely *AFTER*
#script sourcing. Contemplate.
#FUXME: Fantastic! Function reduction is as simple as performing the identity
#mapping on ${functions}: e.g.,
#
#    # This actually works. Yay! Absurd efficiency for the win.
#    functions[lam]="${functions[lam]}"
#
#This implies *ALL* functions may be reduced with the following single
#function:
#
#    # This actually works, too. It's noticably slow (say, a full second), but
#    # the payoff is absolutely worth it. It's also worth noting that this is
#    # pretty much guaranteed to be the most efficient means of doing so,
#    # implying that individually reducing functions could be even slower.
#    functions=( "${functions[@]}" )

#FUXME: Hurah! We've uncovered a theoretical means of implementing dynamic
#blockof implementing dynamic blockof implementing dynamic block aliases:
#line numbers. Since zsh maintains the current function-local line number
#${LINENO}, recording such number immediately before and after the user-defined
#block to be handled by such block alias suffices to permit such block to be
#dynamically expanded into the desired eval() statement for that alias.
#FUXME: There exists one possible catch, however: the documentation for
#${LINENO} reads:
#
#   The line number of the current line within the current script, sourced
#   file,
#   or shell function being executed, whichever was started most recently. Note
#   that in the case of shell functions the line number refers to the function
#   as
#   it appeared in the original definition, not necessarily as displayed by the
#   functions builtin.
#
#That could be a problem, as we need the line number that ${LINENO} expands to
#to correspond to the contents of "${functions[${function_name}]}". That said,
#since we compile all such functions into current digest file, ${LINENO} is
#almost certainly the expected number *AFTER* autoloading such file. But what
#about *BEFORE*? No idea, sadly.
#FUXME: If ${LINENO} does constitute a problem, we may still be able to obtain
#the proper line number by examining ${functrace}. No, wait: that doesn't
#provide the *CURRENT* line number, of course.
#FUXME: Ugh. We can hardly believe it. To arrive so close, and yet fall so
#dismally far. Sadly, there appears to be *NO* means of obtaining the current
#line number in a form corresponding to that of "${functions[${function_name}]}".
#The latter is post-compilation, whereas ${LINENO} is pre-compilation. Well,
#that resolves that one, then. Another unsanctimonious end.
