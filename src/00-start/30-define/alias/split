#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *split alias definers* (i.e., functions defining pairs of related
aliases intended to be expanded together, the former typically accepting one or
more passed arguments operated on by the latter).
/---

# ....................{ ALIASES                            }....................
# Note the prefixing newline to separate such evaluation from the last argument
# "passed" to such alias, as required. Also note that if such string local is
# undefined, eval() reports failure with a suitable error message and hence
# throws a human-readable exception without any intervation on our part.
:declare_alias_simple <<'/---'
Terminate the preceding split alias. For convenience, this alias is global and
hence may be placed as either the last argument to the split alias it
terminates _or_ the next command following such alias.

== Implementation ==

This alias expands to an evaluation of string local
${zeshy_alias_split_expansion__}, presumably defined (by the expansion of the
split alias this alias terminates) to the true caller-passed expansion for such
split alias. See :define_alias_split() for further details.
/---
:alias_global '::'='
    eval "${zeshy_alias_split_expansion__}"'

# ....................{ DEFINERS                           }....................
#FIXME: Rewrite documentation in accordance with
#:define_alias_block_static_sans_args().
declare_function_with_stdin <<'/---'
void :define_alias_split(
    string alias_name,
    string args_list_name,
    string alias_expansion)

Define the passed *split alias* (i.e., alias split into one prefixing simple
alias defining a local list with the passed name containing all arguments
passed to such alias _and_ one suffixing global alias expanding to the passed
expansion presumably operating on such arguments). For clarity, this function
implicitly suffixes such alias name by `::` _and_ requires the last argument
passed to such alias also be `::`. If such alias has already been declared, an
exception is thrown: e.g.,

.:define_alias_split()
==========================================
[source]
------------------------------------------
>>> :define_alias_split :define_string_pair args '
...     :die_unless_list_size_2 args "Expected two string names."
...     :string string_name1="${args[1]}" string_name2="${args[2]}"
...     :die_unless_var_names "${string_name1}" "${string_name2}"
...     :string "${string_name1}"=\
...        "Each generation doubtless feels called upon to reform the world.
...         Mine knows that it will not reform it, but its task is perhaps even
...         greater."
...     :string "${string_name2}"=\
...        "It consists in preventing the world from destroying itself. Heir to
...         a corrupt history, in which are mingled fallen revolutions,
...         technology gone mad, dead gods, and worn-out ideologies, where
...         mediocre powers can destroy all yet no longer know how to convince,
...         where intelligence has debased itself to become the servant of
...         hatred and oppression, this generation starting from its own
...         has had to re-establish, both within and without, a little of that
...         which constitutes the dignity of life and death."'
>>> :define_string_pair:: on_destruction on_dignity ::
>>> get_string_line "${on_destruction}" 1
Each generation doubtless feels called upon to reform the world.
>>> get_string_line "${on_dignity}" 3
technology gone mad, dead gods, and worn-out ideologies, where
------------------------------------------
==========================================

== Motivation ==

By design, *non-suffix aliases* (i.e., simple and global aliases) cannot accept
or operate on passed arguments. At function and script definition time, `zsh`
unconditionally replaces all such aliases in-place by their corresponding
*expansions* (i.e., raw strings providing no function-like calling conventions
and hence no means of accepting or operating on passed arguments).

[[define_alias_split.circumvention]]
=== Constraints Unloosened ===

Such constraints are readily circumventable for non-suffix aliases either:

1. *Terminating with the name of an existing runnable* (e.g., alias, builtin,
   command, function). In such case, all arguments passed to such aliases will
   (after alias expansion) be passed to such runnables instead. Hence, such
   aliases neither accept or operate on such arguments -- they only simulate the
   act of doing so. Such runnables are typically functions designed explicitly
   for and hence intended to be called _only_ by such aliases: e.g.,
+
.:define_alias_split() Terminating-name Alternative
==========================================
[source]
------------------------------------------
>>> function ::set_string_to_arg_2() {
...     die_unless_args_2_or_more\
...         'Expected one string name and one or more strings.'
...     :set_string_to_string "${1}" "${3}"
... }
>>> alias :localize_arg_2='
...     :string arg_2
...     ::set_string_to_arg_2 arg_2'
>>> :localize_arg_2\
...    "No one is going to give you the education you need to overthrow them."
...    "Nobody is going to teach you your true history, teach you your true"
...    "heroes, if they know that that knowledge will help set you free."
>>> output_string "${arg_2}"
Nobody is going to teach you your true history, teach you your true
------------------------------------------
==========================================
1. *Accepting and operating on only one argument.* Such aliases are best
   defined as expanding to one `{`- and `}`-delimited block of code accepting
   such argument as a `<<<`-prefixed here-string from standard input: e.g.,
+
.:define_alias_split() Single-argument Alternative
==========================================
[source]
------------------------------------------
>>> alias :output_string_line_first='{ get_string_line "$(get_stdin)" 1 } <<<'
>>> :output_string_line_first\
...    "The goal of the future is full unemployment, so we can play. That's why
...     we have to destroy the present politico-economic system."
The goal of the future is full unemployment, so we can play. That's why
------------------------------------------
==========================================

=== Constraints Unchained ===

In either case, such aliases are trivially implemented and hence necessitate no
additional help from `zeshy`. However, what of aliases both accepting _and_
operating on two or more passed arguments? Are such aliases trivially
implementable -- or even implementable at all?

As the existence and definition of this function can attest:

* *Yes,* aliases both accepting _and_ operating on two or more passed arguments
  _are_ implementable.
* *No*, such aliases are _not_ trivially implementable. (It took us roughly
  two years to formulate the answer that eventually evolved into this function.
  Presumably, you could have done better.)

== Usage ==

*Consider calling this function _only_ for defining aliases necessarily
accepting _and_ operating on two or more passed arguments.* All aliases defined
by this function impose `zeshy`-specific calling conventions (e.g., requiring
callers _always_ pass `::` as the last alias argument) and non-negligible
internal inefficiencies (e.g., list assignments, eval() calls). As
<<define_alias_split.circumvention,previously demonstrated>>, aliases either
terminating with the name of an existing runnable _or_ accepting and operating
on only one passed argument suffer no such issues.

== Implementation ==

This function defines the passed alias to:

* Define string local ${zeshy_alias_split_expansion__} to:
** Undefine itself.
** Run the passed expansion, presumably expanding the passed list to access
   arguments passed to such alias.
* Locally define the passed list to all arguments passed to such alias.
/---
function :define_alias_split() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one alias name, one argument list name, and one alias expansion.'
    :string\
        alias_name__das="${1}"\
        list_name_args__das="${2}"\
        alias_expansion__das="${3}"
    is -n "${alias_name__das}" si or die\
        'Expected nonempty split alias name.'
    is -n "${alias_expansion__das}" si or die\
        'Expected nonempty split alias '${alias_name__das}'() expansion.'
    is "${list_name_args__das}" == ${~ZESHY_VAR_NAME_GLOB} si or die\
        'Argument list name "'${list_name_args__das}'" invalid.'

    # Suffix such alias name by the standard split alias suffix.
    alias_name__das+='::'

    # Escape all single quotes in such expansion, which we interpolate in a
    # single-quoted manner into the definition of such variable below.
    alias_expansion__das="${alias_expansion__das//'/''}"  # stifle vim errors: '}"

    # Define such alias.
    :define_alias_simple "${alias_name__das}" '
    :string zeshy_alias_split_expansion__=''
    unset   zeshy_alias_split_expansion__
    '${alias_expansion__das}'''

    :list '${list_name_args__das}'
    :set_list_to_strings '${list_name_args__das}
}

# ....................{ UNDEFINERS                         }....................
declare_function_with_stdin <<'/---'
void :undefine_alias_split(string alias_name1, ...)

Undefine all passed split aliases. See :define_alias_split() for further
details.
/---
function :undefine_alias_split() {
    # Such aliases are simple aliases with such names suffixed by "::".
    die_unless_args 'Expected one or more split alias names.'
    :undefine_alias_simple ${^@}'::'
}

#FIXME: In lieu of unit tests...
# function lile() {
#     # Define such alias to locally define all passed arguments as integers
#     # initialized to 42. (Undefine such alias if already defined.)
#     { :undefine_alias_split :sese } silent_stderr: or ignore_failure
#     :define_alias_split :sese args__s '
#     die_unless_list_nonempty args__s\
#         "Expected one or more integer variable names."
#     print_list args__s
# 
#     :string arg__s
#     for     arg__s ("${args__s[@]}") {
#         :die_unless_var_name "${arg__s}"
#         :int "${arg__s}"=42
#     }'
# 
#     # Dynamically define a function expanding such alias *AFTER*
#     # dynamically defining such alias above.
#     :redefine_func stile '
#         # Expand the previously defined alias.
#         :sese:: humdo lumro stimly ::
# 
#         # Ensure such variables were properly defined.
#         :print_var humdo lumro stimly'
# 
#     # Call such function.
#     stile
# }

# --------------------( WASTELANDS                         )--------------------
# :alias_global ':{'='
#     eval "${zeshy_alias_split_block_expansion__}"'

#FUXME: This is becoming a bit excessive. Split into at least two parcels:
#@{split} and @{split_block}. (We might also want a @{split_block_on_hook}
#parcel, given that hook-based and simple split block aliases are implemented
#in two completely different ways.)
#FUXME: Actually, @{split_block_on_hook} is a horrible name. How about
#@{block/static} and @{block/dynamic} instead? Yay!

# Handle *split alias definers* (i.e., functions dynamically defining alias-like
# runnables split into two or three low-level aliases, the former typically
# accepting one or more passed arguments operated on by the latter).

# Document this. This is crucial, guys.
# implicitly suffixes such alias name by `:`, 

#FUXME: Switch to an alternative syntactic style: e.g.,
#
#* ":sese::: humdo lumro stimly :::". (This one, we should think. The ":::"
#  maintains conformance with our syntactic namespace as well as aesthetically
#  appearing to be a horizontal barrier and hence delimiter.)
#* ":sese:: humdo lumro stimly ::". (Or perhaps this one? Clearly, either "::"
#  or ":::" achieve the desired effect. Since all other such global aliases are
#  exactly two characters *AND* since ":::" renders the resulting command
#  somewhat long, "::" might be the more desirable choice here.)
#* ":sese... humdo lumro stimly ...". (Aside from the fact that "..." is a
#  common English grammatical unit and hence intrinsically fails as a global
#  alias, "..." does *NOT* appear to be a horizontal barrier.)
#* ":sese~{ humdo lumro stimly }~". (No; avoid use of "{" in such delimiter,
#  which would imply the enclosed shell words to be evaluated code!)
#
#There we have it! ":sese:: humdo lumro stimly ::" it is.

# Indeed, _without_
#   reading examining the definition of this function, consider how such an implementation
#   might even be attempted. 
#   We're not terribly fast.)

# , the answers to these questions is

#with function-like calling conventions
# one or more passed arguments into  defined by this function 
#  to define in the context of such expansion to all arguments passed to
# such alias
# expand to the passed code with the passed list
# locally defined in the context of such expansion to all arguments passed to
# such alias
# low-level alias 
# low-level aliases, the former accepting one or more passed arguments operated
# on by the latter)
#FUXME: Document me. (Wow! This is well and truly insane. But it has the
#benefit of actually working, unlike effectively *EVERYTHING* else attempted.)

# ....................{ GLOBALS                            }....................
#FUXME: Document ${zeshy_alias_split_expansion__} *WITHOUT* defining such
#global. Is this feasible?

    # Define such alias to temporarily define string local ${zeshy_alias_split_expansion__} to:
    #
    # * Undefine itself in an "always ~{...}~" block, guaranteeing "}:" to be
    #   undefined even in the event of an exception being thrown prior to the
    #   expansion of "}:".
    # * Set such list to all arguments passed to such alias.
    #FUXME: Actually, it's unlikely that the current definition of "}:" *DOES*
    #guarantee its undefinition in the event of an exception. Why? Because such
    #exception will have been undefined prior to the expansion of "}:"!  If
    #this is the case, we'll probably need to implicitly undefine "}:" in the
    #low-level exception handler in @{main}. (We'll also want to reduce the
    #start of the definition of "}:" to merely:
    #
    #    :alias_global ''}:''=''
    #        undefine_alias "}:"
    #        '${alias_expansion}'

 # in an `always ={...}:always` block, guaranteeing `::` to be
 #  undefined even in the event of an exception being thrown prior to the
 #  expansion of "}:"
 
#FUXME: Actually, this is fairly wierd. For one, it's a bit unsafe. We need to
#throw exceptions if such alias doesn't exist. For another, couldn't we just
#eval() the contents of a local string variable? Hmm; perhaps not, given the
#perennial quoting issues surrounding eval(). If that could be made to work
#reliably, however, that would probably be preferable. (Why? Consider what would
#happen if such function attempted to dynamically define another function after
#calling a split alias. Since ::expand_alias_split() would have been defined...
#Actually, we see no issue there. Perhaps it's all sweet?)

    # :append_list_with_list_local:: list_src list_trg1 list_trg2 ::

    # :append_list_with_list_local::: list_src list_trg1 list_trg2 :::

    # :append_list_with_list_local... list_src list_trg1 list_trg2 ...

    # :append_list_with_list_local--- list_src list_trg1 list_trg2 ---

    # always ={ ugh }:always
    # :sese={ humdo lumro stimly }:always
    # :sese-{ humdo lumro stimly }-
    # :sese::: humdo lumro stimly :::
    # :sese... humdo lumro stimly ...
    # :sese=== humdo lumro stimly ===
    # :sese%%% humdo lumro stimly %%%
    # :sese~~~ humdo lumro stimly ~~~
    # :sese___ humdo lumro stimly ___
    # :sese-~= humdo lumro stimly =~-
    # :sese:{ humdo lumro stimly }:
    # :sese@{ humdo lumro stimly }@
    # :sese@@ humdo lumro stimly @@
    # :sese++ humdo lumro stimly ++
    # :sese^^ humdo lumro stimly ^^
    # :sese,, humdo lumro stimly ,,
    # :sese~~ humdo lumro stimly ~~
    # :sese%% humdo lumro stimly %%
    # :sese== humdo lumro stimly ==
    # :sese:: humdo lumro stimly ::
    # :sese:. humdo lumro stimly .:
    # :sese// humdo lumro stimly //
    # :sese/+ humdo lumro stimly +/
    # :sese/~ humdo lumro stimly ~/

    #FUXME: Agh! A bigger problem looms: the passed alias expansion
    #${alias_expansion} is interpolated into a string in such a manner that
    #single quotes (and *ONLY* single quotes, yes?) in such string must be
    #escaped. We think, anyway. Examine further.

        # :alias_global ''}:''=''
        #     }:always{
        #         undefine_alias "}:"
        #     }~

        #     '${alias_expansion}'''

        # :try{
        #     :list '${list_name_args}'
        #     :set_list_to_strings '${list_name_args}

    # string alias_name,
    # string alias_expansion,
    # string local_scalar_var_name_1, ...)
