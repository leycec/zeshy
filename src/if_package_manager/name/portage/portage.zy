#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Portage* (i.e., Gentoo package repository).
/---

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_portage_outdated()

Return success only if the local Portage tree is outdated and hence requires an
update against remote Portage trees.

This function treats Portage trees older than half a day to be outdated, which
may not necessarily coincide with caller expectations of ``outdated.''
/---
function is_portage_outdated() {
    die_if_args
    (( $(:path.mtime "$(get_portage_home)") <\
       $(get_time_unix_offset_by_hours -12) ))
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_portage_home()

Absolute path of the top-level Portage directory (e.g., `/usr/portage`).
/---
function get_portage_home() {
    die_if_args
    command portageq get_repo_path / gentoo
}


#FIXME: Rename to get_portage_download_binary_dir().
:func.doc <<'/---'
:str get_portage_binary_packages_dir()

Absolute path of the Portage directory storing binary packages (e.g.,
`/usr/portage/packages`).
/---
function get_portage_binary_packages_dir() {
    die_if_args
    command portageq pkgdir
}


#FIXME: Rename to get_portage_download_source_dir().
:func.doc <<'/---'
:str get_portage_source_archives_dir()

Absolute path of the Portage directory storing source archives (e.g.,
`/usr/portage/distfiles`).
/---
function get_portage_source_archives_dir() {
    die_if_args
    command portageq distdir
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str :print_portage_news_unread()

Print all unread Portage news.
/---
function :print_portage_news_unread() {
    die_if_args
    command eselect news read new
}

# ....................{ CHECKERS                           }....................
#FIXME: Rename to check_portage_repository_dir() and shift to a more appropriate
#parcel.
:func.doc <<'/---'
:str check_portage(?:str repository_dirname='$(get_dir)')

Check the passed Portage repository (defaulting to the repository containing
the current directory), for quality assurance.
/---
function check_portage() {
    die_unless_args_0_to_1 'Expected optional dirname.'

    if { is_args_0 } {
        command repoman
    } else {
        run_code_under_dir repoman "${(q)1}"
    }
}

# ....................{ EMERGERS                           }....................
:func.doc <<'/---'
[status=:bool] emerge_world()

Update:

* The main Portage tree and all added overlays with new ebuilds, if such tree
  is sufficiently outdated. See is_portage_outdated().
* All currently installed packages in the package set `world` (i.e., set of
  all packages explicitly installed by a human at the command line).
* All transitive dependencies of currently installed packages (i.e., set of
  all packages on which currently installed packages directly or indirectly
  depend).
/---
function emerge_world() {
    die_if_args

    # Update the Portage tree, if needed.
    if { is_portage_outdated } {
        update_portage
    }

    #FIXME: If "portage" itself has been updated, we need to update such ebuild
    #alone before attempting to update world below. This suggests a new tester
    #is_ebuild_outdated(). (How to implement such function efficiently, I dully
    #wonder...)

    # Update packages with updated ebuilds, ignoring non-zero exit status.
    # Ideally, of course, non-zero exit status should never be ignored; in this
    # case and below, however, "emerge" fails if at least one package fails to
    # install. Since this occurs surprisingly often, continue onward!
    print_message_item 'Updating world...'

    #FIXME: Permit these options to be customized by users. Heroic junebugs!
    {
        command emerge\
            --update --deep --newuse --verbose-conflicts @world
    } :=status.ignore_failure

    # Since there exists no reliable means of determining whether such
    # installation nominally succeeded, confirm this with the current user.
    is_query_character_yes 'Perform post-installation cleanup?' :or
        :failure.report

    # Update packages with reverse dependencies broken by the prior update
    # (i.e., packages dynamically linked to versioned shared libraries updated
    # and hence since removed by prior updates), ignoring non-zero exit status.
    #
    # While Portage feature "preserve-libs" has been enabled by default, such
    # feature cannnot be implicitly relied upon to perfectly correct all reverse
    # dependency issues. Moreover, such feature may be manually disabled.
    # "revdep-rebuild" thus provides a fallback in the event of bad things.
    print_message_item 'Updating broken reverse dependencies...'
    { command emerge @preserved-rebuild } :=status.ignore_failure
    { command revdep-rebuild --ignore --pretend } :=status.ignore_failure

    # Uninstall unused dependencies, ignoring non-zero exit status.
    print_message_item 'Uninstalling unused dependencies...'
    { command emerge --depclean } :=status.ignore_failure

    # Update shell variables. Since "/etc/profile" always contains only variable
    # declarations, sourcing such script without emulation *SHOULD* be safe.
    print_message_item 'Updating shell environment...'
    command env-update
    source /etc/profile

    # Update configuration files.
    print_message_item 'Updating configuration files...'
    command dispatch-conf
}


#FIXME: Add support for "emerge @live-rebuild", a builtin package set auto-
#rebuilding all installed live ebuilds. (Awesome.)

:func.doc <<'/---'
:void update_portage()

Update the main Portage tree and all added overlays with new ebuilds.

Unlike update_gentoo(), this function only updates rather than installing these
ebuilds.
/---
function update_portage() {
    die_if_args

    # Prefer "eix-sync" to "emerge". If installed, the former subsumes the
    # latter and updates the more efficient (and hence preferable) "eix" cache.
    if { :pathable.is eix } {
        update_portage_with_eix
    # Otherwise, update only the main Portage tree and possibly added overlays.
    } else {
        print_message_item 'Updating Portage...'
        command emerge --sync

        if { :is_portage_overlay_command_pathable } {
            print_message_item 'Updating Portage overlays...'
            update_overlays_gentoo
        }
    }
}
