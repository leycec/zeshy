#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Portage overlays.

== Local Overlays ==

*Local overlays* (i.e., filesystem-based overlays specific to the current
system) may be added by manually editing `/etc/layman/layman.cfg`. Append an
entry to the `overlays` variable prefixed by `file:///` succeeded by the
absolute path to that overlay's `overlay.xml` file: e.g.,

.Local Overlays
==========================================
------------------------------------------
overlays  : http://www.gentoo.org/proj/en/overlays/repositories.xml
            http://gpo.zugaina.org/lst/gpo-repositories.xml
            file:///home/leycec/bash/raia-gentoo/overlay.xml
------------------------------------------
==========================================
/---

#FIXME: Add support for Paludis-driven overlay management.

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_portage_overlay_command_pathable()

Report success only if at least one command for managing overlays (e.g.,
`layman`) has been installed.
/---
function :is_portage_overlay_command_pathable() {
    die_if_args
    :pathable.is layman
}

# ....................{ PRINTERS                           }....................
:func_ ':str :print_portage_overlay(:str overlay_name)' :func{
    die_unless_arg 'Expected one overlay name.'
    die_unless_pathable layman
    command layman --info="${1}"
}:func <<'/---'
Print the passed currently added overlay. If such overlay has not yet been
added, an exception is thrown.
/---


:func_ ':str :print_portage_overlays()' :func{
    die_if_args
    die_unless_pathable layman

    # Print these overlays.
    {
        print_message_heading 'Overlays (Added)'
        command layman --list-local

        print_message_heading 'Overlays (All)'
        command layman --list
    } | page_stdin
}:func <<'/---'
Print a human-readable synopsis of all currently added overlays.
/---

# ....................{ ADDERS                             }....................
:func_ ':void :add_portage_overlay(:str overlay_name ?:int priority=50)' :func{
    die_unless_args_1_to_2 'Expected one overlay name and optional priority.'
    die_unless_pathable layman
    command layman --fetch --add="${1}" --priority="${2:-50}"
}:func <<'/---'
Add the passed overlay with the passed priority (defaulting to 50). If `ALL`,
add all addable overlays. By default, the global Portage tree has a priority
of -1000. Since higher priority overlays take precedence over lower priority
overlays, this implies overlays added with default precedence take precedence
over the global Portage tree -- usually (but not always) what you want.
/---

# ....................{ REMOVERS                           }....................
:func_ ':void :remove_portage_overlay(:str overlay_name)' :func{
    die_unless_arg 'Expected one overlay name.'
    die_unless_pathable layman
    command layman --delete="${1}"
}:func <<'/---'
Remove the passed overlay from the current system. If such overlay is `ALL`,
remove all currently added overlays.
/---

# ....................{ UPDATERS                           }....................
:func.doc <<'/---'
:void update_portage_overlay(:str overlay_name)

Update the passed added overlay.

If `ALL`, all added overlays are updated as under update_portage_overlays().
/---
function update_portage_overlay() {
    die_unless_arg 'Expected one overlay name.'
    die_unless_pathable layman
    command layman --sync="${1}"
}


:func.doc <<'/---'
:void update_portage_overlays()

Update all added overlays and the list of addable overlays.
/---
function update_portage_overlays() {
    # "layman" fails with non-zero status if at least one overlay fails to
    # update. Since this routinely occurs (e.g., if a remote overlay is
    # temporarily unavailable), ignore such failure.
    die_if_args
    die_unless_pathable layman
    { command layman --sync-all } :=failure.ignore
}
