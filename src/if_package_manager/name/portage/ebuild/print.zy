#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Gentoo ebuild printers* (i.e., functions printing ebuild metadata).
/---

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_ebuild(:str ebuild_name)

Print a human-readable synopsis of the passed ebuild.
/---
function print_ebuild() {
    #FIXME: Should call a newly defined die_unless_ebuild() to verify such
    #ebuild actually exists. Shouldn't be terribly difficult, but I wonder what
    #the most efficient way to do so is? Naturally, call such function
    #everywhere an ebuild name is passed below.

    die_unless_arg 'Expected one ebuild name.'
    :str ebuild_name="${1}"

    # Print such ebuild.
    {
        print_ebuild_use_flags:           "${ebuild_name}"
        print_ebuild_metadata:            "${ebuild_name}"
        print_ebuild_changes_latest:      "${ebuild_name}"
        print_ebuild_dependencies_direct: "${ebuild_name}"
        print_ebuild_installed_paths:     "${ebuild_name}"
    } | :stdin.page
}

# ....................{ PRINTERS ~ changes                 }....................
:func.doc <<'/---'
:str print_ebuild_changes_latest:(:str ebuild_name)

Print a human-readable synopsis of the passed ebuild's *latest changes* (i.e.,
most recently recorded ChangeLog entries).
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
# If "equery" is pathable, prefer such command.
if { :pathable.is equery } {
    function print_ebuild_changes_latest:() {
        die_unless_arg 'Expected one ebuild name.'
        :str ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Changes (Latest)"
            command equery --no-pipe changes "${ebuild_name}"
        } | :stdin.page
    }
} else {
    function print_ebuild_dependencies_direct:() {
        :die '"equery" not installed.'
    }
}

# ....................{ PRINTERS ~ dependencies            }....................
:func.doc <<'/---'
:str print_ebuild_dependencies_direct:(:str ebuild_name)

Print a human-readable synopsis of the passed ebuild's *direct dependencies*
(i.e., all ebuilds such ebuild explicitly depends upon).
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
# If "equery" is pathable, prefer such command.
if { :pathable.is equery } {
    function print_ebuild_dependencies_direct:() {
        die_unless_arg 'Expected one ebuild name.'
        :str ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Dependencies (Direct)"
            command equery --no-pipe depgraph --depth=1 "${ebuild_name}"
        } | :stdin.page
    }
} else {
    function print_ebuild_dependencies_direct:() {
        :die '"equery" not installed.'
    }
}

# ....................{ PRINTERS ~ metadata                }....................
:func.doc <<'/---'
:str print_ebuild_metadata:(:str ebuild_name)

Print a human-readable synopsis of the passed ebuild's *metadata* (i.e., the
contents of the `metadata.xml` file in the directory containing such ebuild).
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
# If "equery" is pathable, prefer such command.
if { :pathable.is equery } {
    function print_ebuild_metadata:() {
        die_unless_arg 'Expected one ebuild name.'
        :str ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Metadata"
            command equery --no-pipe meta "${ebuild_name}"
        } | :stdin.page
    }
} else {
    function print_ebuild_metadata:() {
        :die '"equery" not installed.'
    }
}

# ....................{ PRINTERS ~ path                    }....................
:func.doc <<'/---'
:str print_ebuild_installed_paths:()

Print a human-readable synopsis of all files and directories currently installed
by the passed ebuild.
/---
# If "equery" is pathable, prefer such command to "qfile".
if { :pathable.is equery } {
    function print_ebuild_installed_paths:() {
        die_unless_arg 'Expected one ebuild name.'
        :str ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Installed Paths"
            command equery --no-pipe files --tree "${ebuild_name}"
        } | :stdin.page
    }
# Else, define such function to fail.
} else {
    function print_ebuild_installed_paths:() {
        :die '"equery" not installed.'
    }
}


:func.doc <<'/---'
:str print_ebuilds_installing_path(:str pathname)

Print all ebuilds installing into the passed path. If such path is a file, print
only the single ebuild installing such file; else, print all ebuilds installing
at least one file to such directory.
/---
# If "equery" is pathable, prefer this command to "qfile".
if { :pathable.is equery } {
    function print_ebuilds_installing_path() {
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Synchronize with below.
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        die_unless_arg 'Expected one pathname.'
        :str pathname="${1}"

        # If no such path exists, attempt to find a command with such name.
        :path.is "${pathname}" :or pathname="$(get_pathable_path "${pathname}")"

        # Since "equery" fails to print a helpful message until after its
        # search concludes, do so *BEFORE* searching.
        {
            print_message_heading "Ebuilds Installing \"${pathname}\""
            command equery --no-pipe belongs "${pathname}"
        } | :stdin.page
    }
# Else if "qfile" is pathable, fallback to this command.
} elif { :pathable.is qfile } {
    function print_ebuilds_installing_path() {
        die_unless_arg 'Expected one pathname.'
        :str pathname="${1}"
        :path.is "${pathname}" :or pathname="$(get_pathable_path "${pathname}")"
        {
            print_message_heading "Ebuilds Installing \"${pathname}\""
            command qfile "${pathname}"
        } | :stdin.page
    }
# Else, define this function to fail.
} else {
    function print_ebuilds_installing_path() {
        :die 'Neither "equery" or "qfile" installed.'
    }
}

# ....................{ PRINTERS ~ pcre                    }....................
:func.doc <<'/---'
:str print_ebuilds_matching_pcre:(:str pcre)

Print all ebuilds with package names or descriptions matching the passed PCRE.
If `eix` is pathable, this function defers to such command for efficiency.
(Naturally, this assumes that a prior call to update_eix() has already created
an `eix` cache of the local Portage tree). Else, this function inefficiently
falls back to `emerge`-based searching.
/---
# If "eix" is installed, prefer this command.
if { :pathable.is eix } {
    function print_ebuilds_matching_pcre:() {
        die_unless_arg 'Expected one PCRE.'
        :str pcre="${1}"
        :list eix eix_compact

        #FIXME: Replace with the customary call to
        #run_code_with_options_configured().

        # Command line to be run for customary output.
        eix=( command eix )

        # If standard output for the current shell is a terminal, force "eix" to
        # display colors. When piped and hence run under a subshell, "eix"
        # incorrectly assumes its output to be parsed by non-interactive scripts
        # rather than printed to an interactive terminal.
        if { :stdout.is_terminal } {
            eix+='--force-color'
        }

        # Command line to be run for compact output.
        eix_compact=( "${eix[@]}" --compact )

        # Search ebuild names and then descriptions. Avoid throwing exceptions
        # on failing to match either.
        {
            print_message_heading "Ebuild Names Matching /${pcre}/"
            { "${eix_compact[@]}" -- "${pcre}" } :=failure.ignore
            :stdout.echo_newline
            { "${eix[@]}"         -- "${pcre}" } :=failure.ignore

            print_message_heading "Ebuild Descriptions Matching /${pcre}/"
            { "${eix_compact[@]}" -S -- "${pcre}" } :=failure.ignore
            :stdout.echo_newline
            { "${eix[@]}"         -S -- "${pcre}" } :=failure.ignore
        } | :stdin.page
    }
# Else if "equery" is installed, fallback to this command.
} elif { :pathable.is equery } {
    function print_ebuilds_matching_pcre:() {
        die_unless_arg 'Expected one PCRE.'
        :str pcre="${1}"

        # First search ebuild names; then, descriptions. Avoid throwing exceptions
        # on failing to match either.
        {
            print_message_heading "Ebuild Names Matching /${pcre}/"
            command equery --no-pipe list --full-regex --portage-tree --\
                "${pcre}"
        } | :stdin.page
    }
# Else, defer to "emerge".
} else {
    function print_ebuilds_matching_pcre:() {
        die_unless_arg 'Expected one PCRE.'
        :str pcre="${1}"

        # Encourage the current user to install "eix", instead.
        :warning.print\
            '"eix" not installed. Deferring to inefficient "emerge"-based searching.'

        # Force interpretation of the passed pcre as a regular expression by
        # prefixing such pcre with "%". Avoid passing option "--searchdesc",
        # as regular expressions tend to play poorly with ebuild descriptions.
        {
            print_message_heading "Ebuild Names Matching /${pcre}/"
            command emerge --search -- "%${pcre}"
        } | :stdin.page
    }
}

# ....................{ PRINTERS ~ use                     }....................
:func.doc <<'/---'
:str print_ebuild_use_flags:(:str ebuild_name)

Print a human-readable synopsis of all USE flags used by the passed ebuild.
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
#Ah, yes. We could, of course, simply grep
#"/usr/portage/profiles/use.local.desc" for the program name. That gets us
#USE flag descriptions only for main tree ebuilds, however. But... *shrug*
# If "equery" is pathable, prefer such command.
if { :pathable.is equery } {
    function print_ebuild_use_flags:() {
        die_unless_arg 'Expected one ebuild name.'
        :str ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" USE Flags"
            command equery --no-pipe uses "${ebuild_name}"
        } | :stdin.page
    }
} else {
    function print_ebuild_use_flags:() {
        :die '"equery" not installed.'
    }
}
