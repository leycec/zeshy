#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
OpenRC services and runlevels.
/---

#FIXME: This parcel applies to OpenRC in general and hence should be shifted to
#a more general-purpose parent parcel. While Gentoo is presumably the most
#popular use case for OpenRC, alternative distros leveraging OpenRC do exist
#(e.g., Alpine Linux).

#FIXME: It would be helpful to add support for systemd-style services. Hmm...

# ....................{ ALIASES                            }....................
#FIXME: Terrible. Transition to configurable aliases.
alias_cli rca='add_portage_service_to_runlevel'
alias_cli rcr='remove_portage_service_from_runlevel'
alias_cli rcs=':openrc.start_service'
alias_cli rco=':openrc.stop_service'
alias_cli rcl='print_portage_services'

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_portage_service_home()

Absolute path of the directory containing Gentoo services.
/---
function get_portage_service_home() {
    #FIXME: I have no idea how to account for Gentoo Prefix, here and elsewhere.
    die_if_args
    :str service_home='/etc/init.d'
    :dir.die_unless "${service_home}"
    :str.return "${service_home}"
}


:func.doc <<'/---'
:str get_portage_service_file(:str service_name)

Absolute path of the Gentoo service with the passed name.
/---
function get_portage_service_file() {
    die_unless_arg 'expected one service name'
    :str service_file; service_file="$(get_portage_service_home)/${1}"
    die_unless_file "${service_file}"
    :str.return "${service_file}"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_portage_services()

Print a human-readable synopsis of Gentoo services and runlevels.
/---
function print_portage_services() {
    die_if_args
    :str is_terminal_color

    if { is_terminal_color } {
        is_terminal_color='yes'
    } else {
        is_terminal_color='no'
    }

    #FIXME: Should probably be transitioned to the conventional
    #run_code_with_options() model.
    command eselect --colour=${is_terminal_color} rc show --all --unused |
        :stdin.page
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void add_portage_service_to_runlevel(:str service_name +:str runlevels)

Add the passed Gentoo service to the passed runlevels (defaulting to
`default`, the customary runlevel).
/---
function add_portage_service_to_runlevel() {
    die_unless_args 'expected one service name and optional runlevels'
    command eselect rc add "${@}"
}


:func.doc <<'/---'
:void remove_portage_service_from_runlevel(:str service_name +:str runlevels)

Remove the passed Gentoo service from the passed runlevels (defaulting to
`default`, the customary runlevel).
/---
function remove_portage_service_from_runlevel() {
    die_unless_args 'expected one service name and optional runlevels'
    command eselect rc delete "${@}"
}

# ....................{ RUNNERS                            }....................
#FIXME: These are general enough to warrant extracting out to a new generalized
#parcel for managing system services and daemons -- say, "os/service.zy".
:func.doc <<'/---'
:void :openrc.start_service(+:str service_names)

(Re)start all passed OpenRC services, implicitly stopping before restarting each
such service that is currently running.
/---
function :openrc.start_service() {
    die_unless_args 'expected at least one service name'
    command eselect rc restart "${@}"
}


:func.doc <<'/---'
:void :openrc.stop_service(+:str service_names)

Stop all passed OpenRC services by any means necessary.
/---
function :openrc.stop_service() {
    die_unless_args 'expected at least one service name'

    # For the name of each service to stop...
    :str service_name
    for  service_name ("${@}") {
        # For safety, first attempt to gracefully stop this service.
        #
        # While the higher-level "eselect rc" command could technically be run
        # to do so, this command provides no corresponding "zap" subcommand and
        # hence *CANNOT* be called below to forcefully stop this service. For
        # orthogonality, the low-level "rc-service" command supporting both the
        # "stop" and "zap" subcommands is called instead.
        command rc-service "${service_name}" stop :or {
            #FIXME: Insufficient. This merely resets the service state; however,
            #the service may very well continue running. Hence, we also need to
            #(in order):
            #
            #1. First attempt to gracefully "kill -SIGTERM" all processes whose
            #   command basenames are the name of this service. To do so safely,
            #   we'll probably want to interactively query the user as to
            #   whether they wish to do so.
            #2. If that fails, next attempt to forcefully "kill -SIGKILL" these
            #   processes.
            command rc-service "${service_name}" zap 
        }
    }
}
