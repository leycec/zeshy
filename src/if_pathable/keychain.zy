#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`keychain`, a CLI front end to both `ssh-agent` and `gpg-agent` for caching SSH
and GnuPG keys.
/---

# Since "keychain" caches keys for a variety of cryptography applications, this
# parcel does not reside in an application-specific tree (e.g.,
# @{ssh/if_pathable}).

#FIXME: "keychain" is a single bash script that hasn't been updated since 2010
#and in all likelihood is gone dormant. Reimplement in pure zeshy to eliminate
#yet another deplorable dependency. Given the length of such script, this will
#be somewhat non-trivial -- but certainly worth the endeavor.

# --------------------( CACHERS                            )--------------------
#FIXME: Ideally, which keys are cached should be user-configurable. Consider
#adding a new *LIST* global ${ZY_SSH_KEYS_PUBLIC_CACHED_ON_STARTUP} to parcel
#@{ssh/if_pathable/ssh}. If such list is empty (as it should be by default),
#default to simply getting the default SSH public key (as we do already).

:func.doc <<'/---'
:void cache_ssh_key(+:str filenames)

Cache the passed SSH keys (either public or private) for the current user.

Specifically:

* If `ssh-agent` is _not_ currently running under such user, run `ssh-agent`.
* Add each such key _not_ already cached by `ssh-agent` to such cache.

If these keys have already been cached, this function thus reduces to a noop.
/---
function cache_ssh_key() {
    die_unless_args 'Expected one or more filenames.'

    # Cache these keys.
    :code.run_under_shell "$(keychain --eval --quick "${@}")" 'sh'
}

# --------------------( STARTUP                            )--------------------
# For safety, attempt to cache SSH keys on *EVERY* interactive zeshy startup.
# While such zealousness may smack of overkill, it incurs only slight overhead
# (e.g., 10ms) and helps ensure that SSH keys are recached in the event the
# cache is cleared (e.g., by shutdown of `ssh-keygen`).
:hook.shell_interactive.startup.add ::startup.keychain


:func_ ':void ::startup.keychain()' :func{
    # If this key exists, cache this key.
    :str filename
    if { filename="$(get_ssh_key_private_default_if_found)" } {
        cache_ssh_key "${filename}"
    }
}:func <<'/---'
Cache the current user's preferred SSH public-private key pair, if such pair
exists.

== See Also ==

* cache_ssh_key().
* get_ssh_key_public_default_if_found().
/---
