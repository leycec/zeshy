#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `keychain`, a CLI front end to both `ssh-agent` and `gpg-agent` for
caching SSH and GnuPG keys.
/---

# Since "keychain" caches keys for a variety of cryptography applications, this
# parcel does not reside in an application-specific tree (e.g.,
# @{ssh/if_pathable}).

#FIXME: "keychain" is a single bash script that hasn't been updated since 2010
#and in all likelihood is gone dormant. Reimplement in pure zeshy to eliminate
#yet another deplorable dependency. Given the length of such script, this will
#be somewhat non-trivial -- but certainly worth the endeavor.

# --------------------( CACHERS                            )--------------------
#FIXME: Ideally, which keys are cached should be user-configurable. Consider
#adding a new *LIST* global ${ZY_SSH_KEYS_PUBLIC_CACHED_ON_STARTUP} to parcel
#@{ssh/if_pathable/ssh}. If such list is empty (as it should be by default),
#default to simply getting the default SSH public key (as we do already).

:func.doc <<'/---'
void cache_ssh_key(string filename1, string filename2, ...)

Cache the passed SSH keys (either public or private) for the current user.
Specifically:

* If `ssh-agent` is _not_ currently running under such user, run `ssh-agent`.
* Add each such key _not_ already cached by `ssh-agent` to such cache.

If such keys have already been cached, this function thus reduces to a no-op.
/---
function cache_ssh_key() {
    die_unless_args 'Expected one or more filenames.'

    # Cache such keys.
    run_code_under_shell "$(keychain --eval --quick "${@}")" 'sh'
}

# --------------------( STARTUP                            )--------------------
# For safety, attempt to cache SSH keys on *EVERY* interactive zeshy startup.
# While such zealousness may smack of overkill, it incurs only slight overhead
# (e.g., 10ms) and helps ensure that SSH keys are recached in the event the
# cache is cleared (e.g., by shutdown of `ssh-keygen`).
:hook.shell_interactive.startup.add startup_zeshy_keychain

:func.doc <<'/---'
void startup_zeshy_keychain()

Cache the current user's preferred SSH public-private key pair, if such pair
exists. See cache_ssh_key() and get_ssh_key_public_default_if_found() for
further details.
/---
function startup_zeshy_keychain() {
    # Validate sanity.
    die_if_args

    # If such key exists, cache such key.
    string filename
    if {   filename="$(get_ssh_key_private_default_if_found)" } {
        cache_ssh_key "${filename}"
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Reenable after worky.

#:hook.shell_login.startup.add startup_zeshy_login_keychain
#       run_code_under_shell\
#           "$(keychain --eval --quick "${key_filename}")" 'sh'
    # If a permissible SSH public key exists for this user, cache it.
    #FUXME: Insufficient. "id_edcsa" (or some such) is also valid. Instead, call
    #the existing get_ssh_key_public_default() function of zeshy SSH.

#   if { ssh_key_filename="$(get_file_first_if_found\
#       "${HOME}/.ssh/id_rsa" "${HOME}/.ssh/id_dsa")" } {

    # If "ssh-agent" is already running and hence caching SSH
    # keys, return immediately. ("Nothin' to see here, folks...")
#   if { :is_process ssh-agent } {
#       :success.report
#   }

    # Remove all currently cached keys, for safety.
#   command keychain --clear

# ....................{ STARTUP                            }....................
#:hook.shell_login.startup.add startup_zeshy_keychain

#declare_function '
#void startup_zeshy_keychain()
#
#Cache available SSH and GnuPG keys for the current user, if not already cached.
#'
#function startup_zeshy_keychain() {
#    # Validate sanity. If "ssh-agent" is already running and hence caching SSH
#    # keys, return immediately. ("Nothin' to see here, folks...")
#    die_if_args
#    :is_process ssh-agent or :success.report
#
#    # Remove all currently cached keys, for safety.
#    keychain --clear
#
#    #FUXME: Insufficient. "id_edcsa" (or some such) is also valid. Instead, call
#    #the existing get_ssh_public_key_file() function of Zeshy SSH.
#
#    # If a permissible SSH public key exists for this user, cache it.
#    string ssh_key_filename; ssh_key_filename="$(get_file_first_if_found\
#        "${HOME}/.ssh/id_rsa" "${HOME}/.ssh/id_dsa")" and
#        run_code_under_shell "$(keychain --eval --quick "${ssh_key_filename}")" 'sh'
#}

# Remove all cached keys from the keychain, for safety. Note that all calls
# to this script must temporarily clear any "${GREP_OPTIONS}" when doing so,
# as this script expects default "grep" options. (Fair enough, friend.)
#GREP_OPTIONS='' keychain --clear
