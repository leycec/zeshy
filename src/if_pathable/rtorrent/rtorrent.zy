#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`rtorrent`, a CLI BitTorrent client.

By default, rtorrent provides no out-of-the-box support for:

* Daemonization and hence cannot be "detached" from its parent terminal and
  attached to a new terminal.
* Backgrounding and hence requires a dedicated parent terminal *ALWAYS*
  running "rtorrent".

Hence, rtorrent behavior fundamentally differs from that of most command line-
oriented system and user services. Enter stage left: the canonical terminal
multiplexer "screen" and derivatives (e.g., "tmux"). Multiplexers decouple
command from terminal lifecycle by allowing commands to be detached from
parent terminals and subsequently reattached to new terminals, thus rectifying
all deficiencies in rtorrent itself.
/---

#FIXME: Support alternative screen muxers (e.g., "tmux" and "dtach", in that
#order).
#FIXME: Consider enabling the "multiuser" screen option rather than using
#ZY_RTORRENT_USERNAME-style sudoing. That has several benefits, of which one
#is the ability to allow other users to open the deattached rtorrent session.
#FIXME: Perform automatic logging to a file when operating as a cronjob.

# ....................{ ALIASES                            }....................
alias_cli_substitution '{rt}orrent'='screenify rtorrent'

# ....................{ EXCEPTIONS                         }....................
#FIXME: Integrates poorly with TRAPZERR(), I'm assuming. Excise?
:func.doc <<'/---'
:void die_from_rtorrent_start_error()

If rtorrent failed to run for any reason other than it is already running
under an existing "screen" session, then print this reason by re-running
rtorrent as the target user.
/---
function die_from_rtorrent_start_error() {
    # If no rtorrent process has been screened, run rtorrent to emit an error.
    if { is_rtorrent_running } {
        if { :str.is_nonempty "${screen_pid}" } {
            :warning.print "rtorrent startup error for user ${ZY_RTORRENT_USERNAME} under screen PID ${screen_pid}."
        } else {
            :warning.print "rtorrent startup error for user ${ZY_RTORRENT_USERNAME}."
        }

        run_code_as_user "${ZY_RTORRENT_USERNAME}" "${RTORRENT}"
    }

    #FIXME: Hmm.
#   exit_with_failure
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_rtorrent_screen_session_running()

Report success only if `screen` maintains at least one rtorrent session for the
passed user.
/---
function is_rtorrent_screen_session_running() {
    die_if_args
    (( $(get_rtorrent_process_count) ))
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:int get_rtorrent_screen_session_count()

Number of rtorrent sessions and hence processes maintained by `screen`.
/---
function get_rtorrent_screen_session_count() {
    die_if_args
    get_screen_session_count "${ZY_RTORRENT_SCREEN_SESSION_NAME}"
}

# ....................{ RUNNERS                            }....................
#FIXME: Documentation woefully outdated.
:func.doc <<'/---'
:void start_rtorrent()

Daemonize `rtorrent` under the passed user (defaulting to
${ZY_RTORRENT_USERNAME} if this user exists or the current user otherwise).

${ZY_RTORRENT_USERNAME} defaults to "rtorrent", a hypothetical user
unlikely to exist on the current machine. Consider either passing or defining
${ZY_RTORRENT_USERNAME} to the non-root user you intend to run the
`rtorrent` daemon and hence actively manage torrents as. Also see the
`rtorrent` file in zeshy''s configuration directory (e.g., `~/.zeshy/config`).

Foreground a started `rtorrent` daemon by running `rtorrent` as this user.
Background a foregrounded `rtorrent` daemon by typing the key combination
specific to the terminal multiplexer daemonizing `rtorrent`:

* If screen, <Ctrl-a d>. `Ctrl-a` is a screen-specific prefix for entering
  screen commands and `d` the screen command for detaching (i.e.,
  backgrounding) the rtorrent screen session. (C''est simple, non?)

Stop a started `rtorrent` daemon by either calling stop_rtorrent(), passing
the same user, or typing <Ctrl-q> from a foregrounded `rtorrent` daemon.
/---
function start_rtorrent() {
    die_if_args

    # Stop all "rtorrent" processes running under the requested user. To avoid
    # false positives, first remove zombie screen sessions.
    remove_screen_sessions_dead
    if { is_rtorrent_screen_session_running } {
        stop_rtorrent
    }
    print_message_item 'Starting rtorrent...'

    # If there are other rtorrent screen sessions running, warn and press on.
    if { is_rtorrent_screen_session_running } {
        :warning.print\
            "$(get_rtorrent_screen_session_count) rtorrent screen session(s) already started."
    }

    # Start rtorrent as a screen session. Note that screen's argument passing
    # engine is fragile... Order is important in its list of arguments.
    command screen -d -m -fa -U -S "${SCREEN_SESSION}" "${RTORRENT}"
#       or die_from_rtorrent_start_error

    #FIXME: Convert to pure zsh.
    # Grep the PID of the screen process corresponding to the now-detached
    # rtorrent session by asking screen itself.
    string screen_pid
    screen_pid="$(command screen -list |\
        command grep --max-count=1 "\.${SCREEN_SESSION}[[:space:]]" |\
        command sed "s/^[[:space:]]*\([0-9][0-9]*\)\.${SCREEN_SESSION}[[:space:]].*$/\1/" -)"

    #FIXME: Convert to a simple glob match.
    # If "screen" lists no such rtorrent session for this user, fail.
    is_string_matches_pcre "${screen_pid}" '^[[:space:]]*$' :or
        :die "\"screen\" lists no rtorrent sessions."
##   if :stdout.echo "${screen_pid}" | is_string_matches_pcre '^[[:space:]]*$'; then
#       :warning.print "\"screen\" lists no rtorrent sessions"
#       die_from_rtorrent_start_error
#   fi

    #FIXME: This is generally useful. Shift into a @{process} parcel.

    # Unfortunately, ${screen_pid} gives the process ID of the screen process
    # hosting this rtorrent process rather than that rtorrent process itself. As
    # halting this rtorrent process requires we have its ID rather than screen's
    # ID, we now grep for that.
    #
    # Note, however, that this rtorrent process may not yet have actually started
    # up. Therefore, wait a sensible number of seconds for it to start up; if it
    # fails to do so, fail.
    integer start_time close_time rtorrent_pid
    (( close_time = $(get_time) + 8 ))
    while (( $(get_time) <= close_time )) {
        # If rtorrent is now running, break.
        rtorrent_pid=$(
            command pgrep -P "${screen_pid}" -fx "${RTORRENT}" 2>/dev/null) :and
            break

        # Else, sleep and try again.
        sleep_seconds 1
    }

    # If rtorrent is still not running, fail.
    die_unless_string_nonempty "${rtorrent_pid}"\
        "No rtorrent process running under \"screen\" PID ${screen_pid}."

    :str pid_filename="${ZY_USER_PID_DIR}/rtorrent"
    write_file_with_string "${pid_filename}" ${rtorrent_pid}

    print_message "Detached rtorrent PID ${rtorrent_pid} to screen PID ${screen_pid}."
}


:func.doc <<'/---'
:void stop_rtorrent()

Kill the `rtorrent` daemon running under the current user.

== See Also ==

* start_rtorrent().
/---
function stop_rtorrent() {
    :die 'unimplemented'
}
