#!/usr/bin/env zsh
# ====================[ convert                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle ImageMagick, a collection of CLI commands manipulating images.

# ....................{ CONVERTERS ~ quality               }....................
# Note: ImageMagick supports quality reduction for only the following filetypes:
# JPEG (".jpg"), MIFF (".miff"), and PNG (".png").

# void reduce_imagemagick_image_quality(
#   string source_filename,
#   string target_filename = "low_quality-$(source_filename)",
#   integer quality_percentage = 50)
#
# Recompress the passed source to target image with reduced compression quality
# corresponding to the passed quality as a percentage from 1 to 100, defaulting
# to 50 (i.e., reducing the target to half the quality of the source image).
function reduce_imagemagick_image_quality() {
    # Validate passed arguments.
    die_unless_args_1_to_3\
        'expected one source image and optional target image and'\
        'quality from 1 to 100'
    string source_image="${1}" target_image quality_percentage="${3:-50}"
    target_image="${2:-low_quality-${source_image}}"
    die_unless_file "${source_image}"
    die_unless_integer_between ${quality_percentage} 1 100\
        "\"${quality_percentage}\" not an integer in [1, 100]"

    # Recompress.
    print_message "reducing ${source_image} to ${target_image} at ${quality_percentage}% quality..."
    convert -quality "${quality_percentage}%"\
        "${source_image}" "${target_image}"
}

#FIXME: Combine the second and third arguments into a single argument: e.g.,
#     >> reduce_imagemagick_image_dir_quality ~/images/ ~/images/small/small__ 75
#...instead of:
#     >> reduce_imagemagick_image_dir_quality ~/images/ ~/images/small/ small__ 75

# void reduce_imagemagick_image_dir_quality(
#   string source_dirname = "$(get_dir)",
#   string target_path_dirname_prefix = "${source_dirname}",
#   string target_filename_prefix = 'low_quality-',
#   integer quality_percentage = 50)
#
# Recompress all images in the passed source directory to images in the passed
# target directory with the same basenames but prefixed with the passed prefix
# and with reduced compression quality corresponding to the passed quality as a
# percentage from 1 to 100: e.g.,
#
#     # Recompress all images in the current directory.
#     >> reduce_imagemagick_image_dir_quality
#
#     # Recompress all images in directory ~/images/ to ~/images/small/ with
#     # filenames prefixed by "small__" at 75% quality.
#     >> reduce_imagemagick_image_dir_quality ~/images/ ~/images/small/ small__ 75
function reduce_imagemagick_images_quality() {
    # Validate passed arguments.
    die_unless_args_0_to_4\
        'expected optional source dirname, target dirname, '\
        'target filename prefix, and quality from 1 to 100'
    string\
        source_dirname="${1:-$(get_dir)}"\
        target_path_dirname\
        target_filename_prefix="${3:-low_quality-}"\
        quality_percentage="${4:-50}"
    target_path_dirname="${2:-${source_dirname}}"

    # Validate passed argument contents.
    die_unless_dir "${source_dirname}"
    die_unless_dir "${target_path_dirname}"
    die_unless_integer_between ${quality_percentage} 1 100\
        "\"${quality_percentage}\" not an integer in [1, 100]"

    # Recompress all quality-respecting images in the passed source directory.
    string target_image
    for source_image ("${source_dirname}"/*.{jpg,miff,png}) {
        target_image="${target_path_dirname}/${target_filename_prefix}$(get_path_basename "${source_image}")"
        print_message "reducing ${source_image} to ${target_image} at ${quality_percentage}% quality..."
        convert -quality "${quality_percentage}%"\
            "${source_image}" "${target_image}"
    }
}

# --------------------( WASTELANDS                         )--------------------
    #FIXME: Generalize this for use elsewhere. Specifically, use the
    #deprioritize() function of "always/process".
    # If "nice" and/or "ionice" are installed, run "rsync" under whichever are
    # available to prevent CPU and hard-drive starvation.
#   is_pathable nice   and rsync=(   nice -n19    "${rsync[@]}" )
#   is_pathable ionice and rsync=( ionice -c2 -n7 "${rsync[@]}" )
