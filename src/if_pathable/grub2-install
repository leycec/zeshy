#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'---'
Handle *GRUB2*, a Linux boot loader.
---

# ....................{ INSTALLERS                         }....................
#FIXME: We don't actually default to "the first unmounted disk". We just default
#to "/dev/sda", which is rather shoddy. Let's try and get this right, please.
:func.document <<'/---'
void install_grub2_to_disk(string device_filename = "/dev/sda")

Install GRUB2 to the Master Boot Record (MBR) of the passed disk (defaulting to
the first unmounted disk) and a corresponding GRUB2 boot image to the "grub"
subdirectory of the boot partition.
/---
function install_grub2_to_disk() {
    # Validate sanity.
    if { is_context_cli_function } {
        die_unless_args_0_to_1 'Expected optional device filename.'
        is_arg or :args.set '/dev/sda'
    } else {
        die_unless_arg 'Expected one device filename.'
    }
    string device_filename="${1}"
    die_unless_disk "${device_filename}"

    #FIXME: The disk should probably be unmounted, no?
#   die_unless_disk_unmounted "${device_filename}"

    # If interactively confirmed, install GRUB2.
    if { is_query_line_yes\
        "Really overwrite the Master Boot Record (MBR) of \"${device_filename}\" with GRUB2?" } {
        mount_boot_dir_writable

        #FIXME: The boot partition doesn't necessarily mount to "/boot".
        #"grub2-install" defaults to such directory but also accepts an option
        #"--boot-directory=DIR", which we should probably always explicitly
        #pass. To do so, we'll need some means of reliably discerning the
        #"/boot" directory, probably leveraging "/etc/fstab". I'm thinking
        #we'll probably want to Google this one a bit, however.
        command grub2-install "${device_filename}"
    }
}

# ....................{ MAKERS                             }....................
#FIXME: *GENERALIZE.* Specifically:
#
#* Rename to make_boot_image(). Googling suggests this to be the proper noun for
#  such operation, happily.
#* Shift to new parcel "src/if_os/linux/os/boot".
#* Similarly, shift the existing parcel containing make_kernel to new parcel
#  "src/if_os/linux/os/kernel".
#* The operation of make_boot_image() should be user-configurable, suggesting a
#  new configuration file "src/if_os/linux/if_config/linux/os". How about a map
#  in such file -- say, ${ZESHY_SETTINGS_MAKE_BOOT_IMAGE} -- resembling:
#
#   ZESHY_SETTINGS_MAKE_BOOT_IMAGE=(
#       #FIXME: Actually, this should probably just be the far simpler:
#       #  initramfs_dir  '/usr/src/initramfs'
#       #This allows us to remove the rather silly global
#       #${ZESHY_INITRAMFS_HOME}, which really only has relevance here.
#       is_making_initramfs_if_dir "${ZESHY_BOOLEAN_TRUE}"
#
#       # This causes make_boot_image() to call
#       # make_${boot_loader}_boot_image() (e.g., make_grub2_boot_image()) after
#       # recompiling the kernel and, optionally, initramfs.
#       boot_loader grub2
#   )
#FIXME: It'd be nice to add an "always" block unmounting "/boot" if unmounted
#before entering this function, both to preserve security and user expectations.
#Do this everywhere else boot is mounted, as well.

:func.document <<'/---'
void make_grub2_boot_image()

Update the current kernel, initramfs, and GRUB2 installation to reflect
recent system changes (e.g., kernel upgrades). Specifically, in order:

* Rebuild and reinstall the current kernel (e.g., `/usr/src/linux`) to
  `/boot/kernel-${kernel_version}`.
* Reinstall the current initramfs (defined by ${ZESHY_INITRAMFS_HOME}) to
  `/boot/initramfs-${kernel_version}.img`, if such directory exists.
* Update the GRUB2 configuration file `/boot/grub2/grub.cfg` accordingly.
/---
function make_grub2_boot_image() {
    # Validate sanity.
    die_if_args

    # Update kernel installation.
    print_message_heading 'Kernel Compilation'
    make_kernel

    # Update initramfs installation, if available.
    if { is_dir "${ZESHY_INITRAMFS_HOME}" } {
        print_message_heading 'Initramfs Preparation'
        make_initramfs
    }

    # Update GRUB2.
    print_message_heading 'GRUB2 Image Installation'
    make_grub2_boot_configuration_file
}

:func.document <<'/---'
void make_grub2_boot_configuration_file()

Update the GRUB2 configuration file on the "/boot" partition to reflect the
set of all currently installed scripts and kernel and initramfs images.
/---
function make_grub2_boot_configuration_file() {
    # Validate sanity.
    die_if_args

    # Mount the "/boot" partition writably.
    mount_boot_dir_writable

    #FIXME: Magic strings are bad. Extract into a new function
    #get_grub2_configuration_file().

    # Update the GRUB2 configuration file.
    string grub2_config_file='/boot/grub2/grub.cfg'
    print_message_item "Updating \"${grub2_config_file}\"..."
    command grub2-mkconfig -o "${grub2_config_file}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to make_grub2_boot_image_image().
#FUXME: Add an alias to update_grub2_boot_image().
#   interactively print_message 'updating "/boot"...'
# Update the GRUB2 installation on the "/boot" partition or install GRUB2 on
# such partition if not previously with the current GRUB2 configuration.
# provides a one-stop-shop to
# updating the system after a change (e.g.,
# machine to reflect recent kernel, initramfs,
# and/or GRUB2 changes (e.g., kernel upgrades).
#
# Update the GRUB2 configuration file and install all images such file expects.
#
# Specifically, in order:
# Assuming the current kernel, optional initramfs, and GRUB2 installation to be
# properly configured, this function seemlessly updates the current machine to reflect
# recent changes (e.g., kernel upgrades, initramfs edits).
