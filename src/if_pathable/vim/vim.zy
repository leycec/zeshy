#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`vim`, the popular CLI editor.

== Vim Servers ==

Most functionality defined by this parcel interfaces with Vim via *Vim servers*
(i.e., Vim processes assigned process-specific names referenceable externally
for executing remote commands in such processes). Since Vim implements server
connectivity via X11 messages, Vim servers are available only under X11.

Vim guarantees a one-to-one correspondence between Vim processes and servers.
Vim prevents Vim server names from being concurrently shared between multiple
Vim processes by silently uniquifying Vim server names currently running in other
Vim processes, suffixing such names by a 1-based integer (e.g., running
`vim --servername A; vim --servername A` reserves server `A` for the first such
Vim process and server `A1` for the second).

To print the current Vim server name from within Vim, run:

.Vim server name()
==========================================
[source,vim]
------------------------------------------
:ec v:servername
------------------------------------------
==========================================
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :die_unless_vim_server(
    :str server_name
    ?:str error_message='No Vim process running server "${server_name}".')

Throw an exception with the passed message unless Vim server currently running
in another process on the same system.

== See Also ==

* is_vim_server:().
/---
function :die_unless_vim_server() {
    die_unless_args_1_to_2\
        'Expected one server name and optional error message.'
    :str server_name="${1}"
    is_vim_server: "${server_name}" :or :die\
        "${2-No Vim process running server \"${server_name}\".}"
}

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
[status=:boolean] is_vim_server:(:str server_name)

Report success only if at least one Vim process is currently running a Vim
server with the passed name.
/---
function is_vim_server:() {
    die_unless_arg 'Expected one server name.'
    is_string_line "$(command vim --serverlist)" "${1}"
}

# ....................{ CHANGERS                           }....................
:func.doc <<'/---'
:void change_vim_dir:(?:str dirname="$(get_dir)")

Change the current directory in the default Vim server currently running in
another process on the same system (i.e., a Vim server with name
${ZY_VIM_SERVER_NAME_DEFAULT}) to the passed directory (defaulting to the
current directory, if called directly from the command line).
/---
function change_vim_dir:() {
    #FIXME: Non-ideal. Ideally, the server name should be dynamically parsed
    #from the command-line with which the most recent Vim process in the current
    #shell was invoked. Since we only expect one Vim process per shell, such
    #Vim server should correspond *MUCH* more closely to what the user expects.
    :context.ignore_func_current
    change_vim_server_dir: "${ZY_VIM_SERVER_NAME_DEFAULT}" "${@}"
}


:func.doc <<'/---'
:void change_vim_server_dir:(:str server_name ?:str dirname="$(get_dir)")

Change the current directory in the passed Vim server currently running in
another process on the same system to the passed directory (defaulting to the
current directory, if called directly from the command line) if this server is
currently running *or* throw an exception otherwise.
/---
function change_vim_server_dir:() {
    if { :context.is_cli_func } {
        die_unless_args_1_to_2 'Expected one server name and optional dirname.'
        is_args_2 :or :arg.append "$(get_dir)"
    } else {
        die_unless_args_2 'Expected one server name and one dirname.'
    }
    :str server_name="${1}" dirname="${2}"
    :die_unless_vim_server "${server_name}"
    die_unless_dir "${dirname}"

    # Set such directory.
    command vim\
        --servername "${server_name}"\
        --remote-send ':cd "'${dirname}'"<CR>'
}

# ....................{ VIMMERS                            }....................
:func.doc <<'/---'
:full vim_path_with_options:(*:str vim_options *:str pathnames)

Edit the passed paths with `vim` under both the passed and currently configured
`vim`-specific options (e.g., ${ZY_OPTIONS_VIM}).

If a Vim server name was _not_ explicitly passed and a default has been
configured for such name (i.e., if option `--servername` was _not_ passed and
string global ${ZY_VIM_SERVER_NAME_DEFAULT} is nonempty), this function
implicitly enables the Vim server with such name for this editing session (i.e.,
passing option `--servername ${ZY_VIM_SERVER_NAME_DEFAULT}` to `vim`).
/---
function vim_path_with_options:() {
    # If a default is set for this server name, run Vim under this server.
    if {
        :str.is_nonempty "${ZY_VIM_SERVER_NAME_DEFAULT}" :and
        :not :arg.is_== '--servername'
    } {
        vim_path_under_server_with_options:\
            "${@}" "${ZY_VIM_SERVER_NAME_DEFAULT}"
    # Else, run Vim under no such server.
    } else {
        run_code_with_options_configured 'command vim' 'ZY_OPTIONS_VIM'\
            "${(q)@}"
    }
}


:func.doc <<'/---'
:full vim_path_under_server_with_options:(
    *:str vim_options *:str pathnames :str server_name)

Edit the passed paths with `vim` under both the passed and currently configured
`vim`-specific options (e.g., ${ZY_OPTIONS_VIM}), enabling a Vim server with
the passed name in this editing session.
/---
function vim_path_under_server_with_options:() {
    die_unless_args\
        'Expected optional "vim" options, optional pathnames, and one server name.'
    :str server_name="${@[-1]}"
    :args.pop 1

    # Edit these paths with ViM.
    run_code_with_options_configured 'command vim' 'ZY_OPTIONS_VIM'\
        --servername "${server_name}" "${(q)@}"
}
