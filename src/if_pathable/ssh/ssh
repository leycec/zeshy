#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle `ssh`, the canonical CLI for the cryptographic network protocol *SSH*
(Secure Shell).
-/-

#FIXME: Implement a "mosh" zeshy component. Since "mosh" depends on "ssh", such
#component should resemble the current "sshfs" component.

# ....................{ ALIASES                            }....................
#FIXME: We really want a configuration file-based alias calling a Zeshy
#function, here.
alias_cli_substitution scp='scp -Crv'

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_ssh_dot_dir()

Get the absolute path of the top-level directory under the current user storing
SSH configuration files (e.g., `~/.ssh/`).
/---
function get_ssh_dot_dir() {
    die_if_args
    :string.output "${HOME}/.ssh"
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Ideally, keys should be checked for valid 
    #For a list of all keytypes, grep "man sshd" for a sentence resembling:
    #
    #   "For protocol version 2 the keytype is “ecdsa-sha2-nistp256”,
    #    “ecdsa-sha2-nistp384”, “ecdsa-sha2-nistp521”, “ssh-dss” or “ssh-rsa”."

#       if { is_arg } {
#       } else {
#           list ssh_key_filenames;  ssh_key_filenames=( "$(get_ssh_home)"/*.pub )
#           die_unless_list_nonempty ssh_key_filenames
#           ssh_key_filename="${ssh_key_filenames[1]}"
#   #       ="${1:-${HOME}/.ssh/id_rsa.pub}"
#       }

#*keytype* (i.e., the `-`-delimited word
#prefixing the text file contents of such key) matching (in order):
#
#* `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp256`. Such
#  keys comply with the *Elliptic Curve Digital Signature Algorithm* (ECDSA).

#basename:
#
#* Prefixed by `id_ecdsa` and suffixed by `.pub` (i.e., protocol 2 public key).
#  *Elliptic Curve Digital Signature Algorithm* (ECDSA)
#* Prefixed by `id_` and suffixed by `.pub` (i.e., protocol 2 public key).
#* Prefixed by `identity` and suffixed by `.pub` (i.e., protocol 1 public key).
#* Suffixed by `.pub`.

#, regardless of whether such path exists.
#FUXME: It'd be nice to generalize such getters to accept an optional username.

    #FUXME: Call which_files_nonfatal() to test any number of possible keys
    #(e.g., "id_dsa.pub"). Actually, just glob!

# Zeshy SSH, implementing -specific functionality. See also
# Zeshy SSHfs, implementing SSH mounting with FUSE filesystems.
#alias_cli ssh='TERM="xterm" ssh -v'
#alias ssh-secondary-control-master="ssh -o \"ControlPath ~/tmp/ssh_controlmaster2-%r@%h:%p\""

#FUXME: Sensible, but doesn't belong here. Hmm...
# ....................{ GLOBALS                            }--------------------
# If "cvs" is also installed, encrypt non-pserver CVS connections via "ssh".
#is_pathable cvs and string_global_export CVS_RSH=ssh
