#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *SSH keys* (i.e., manually generated public-private key pairs permitting
passwordless authentication of SSH connections).
-/-

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_ssh_key_private_default(void)

Get the absolute path of the first private key in the current user's SSH dot
directory or throw an exception if no such key exists. See
get_ssh_key_private_default_if_found() for further details.
/---
function get_ssh_key_private_default() {
    die_if_args
    get_ssh_key_private_default_if_found or die\
        "\"$(get_ssh_dot_dir)\" contains no canonical private SSH keys."
}

declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] get_ssh_key_private_default_if_found(void)

Get the absolute path of the first private key in the current user's SSH dot
directory or return failure if no such key exists. If multiple such keys
exist, return the first such key whose basename (in order):

* Matches `id_ecdsa`, an SSH protocol 2 private key generated with the
  *Elliptic Curve Digital Signature Algorithm* (ECDSA). Such keys have keytype
  `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp256`,
  depending on bit strength, and now constitute the SSH default.
* Matches `id_rsa`, an SSH protocol 2 private key generated with the
  *Rivest, Shamir, and Adelman* algorithm (RSA). Such keys have keytype
  `ssh-rsa`, but have (largely) been superceded by keys generated with more
  recent algorithms.
* Matches `id_dsa`, an SSH protocol 2 private key generated with the
  *Digital Signature Algorithm* (DSA). Such keys have keytype `ssh-dsa`, but
  have entirely been superceded by keys generated with more recent algorithms.
* Matches `identity`, an SSH protocol 1 private key generated with the
  *Rivest, Shamir, and Adelman* algorithm (RSA), as above. Such protocol is
  increasingly uncommon in the networked wild.
/---
function get_ssh_key_private_default_if_found() {
    die_if_args
    get_file_globbed_first_if_found\
        "$(get_ssh_dot_dir)"/('id_'('ecdsa'|'rsa'|'dsa')|'identity')
}

# ....................{ GETTERS ~ text                     }....................
declare_function_with_stdin <<'/---'
string get_ssh_key_fingerprint(
    string ssh_key_filename = "$(get_ssh_key_public_default)")

Get the *fingerprint* (i.e., the 128-bit MD5 hash) of the passed SSH key
(defaulting to the current user's preferred public SSH key, if called from the
command line). SSH key fingerprints are typically used to authenticate the
validity of public keys.
/---
function get_ssh_key_fingerprint() {
    # Validate sanity.
    string ssh_key_filename
    if { is_context_cli } {
        die_unless_args_0_to_1 'Expected optional key filename.'
        ssh_key_filename="${1:-$(get_ssh_key_public_default)}"
    } else {
        die_unless_arg 'Expected one key filename.'
        ssh_key_filename="${1}"
    }
    die_unless_file_text "${ssh_key_filename}"

    # Fingerprint such key.
    command ssh-keygen -lf -- "${ssh_key_filename}"
}

# --------------------( WASTELANDS                         )--------------------
#* Is suffixed by `.pub`, as a desperate fallback.
#       "$(get_ssh_dot_dir)"/('id_'('ecdsa'|'rsa'|'dsa')|'identity'|*)'.pub'
#function publ() { get_ssh_key_public_default_if_found }
#FUXME: We probably want this function to throw an exception and another to
#return false if no such file exists. The latter function is of use in Zeshy
#Keychain and probably elsewhere.

    #FUXME: Hmm; it'd be nice to generalize get_file_first() into a new function
    #accepting both a glob (e.g., "{id_,identity,}*.pub") and a glob qualifier
    #(e.g., "(-.)"). Consider it.

    # Validate sanity.
#   die_if_args
#   list filenames

    # Glob the expected files in the expected order into a list.
#   filenames=( "$(get_ssh_dot_dir)"/{id_,identity,}*.pub(-.) )

    # If some such file exists, return the first; otherwise, throw an exception.
#   die_unless_list_nonempty filenames\
#       "public key not found in \"$(get_ssh_dot_dir)\""
#   :output_string "${filenames[1]}"

#   list ssh_key_filenames;  ssh_key_filenames=( "$(get_ssh_home)"/*.pub )
#   die_unless_list_nonempty ssh_key_filenames
#   ssh_key_filename="${ssh_key_filenames[1]}"
