#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*SSH keys* (i.e., manually generated public-private key pairs permitting
passwordless authentication of SSH connections).
/---

#FIXME: Refactor all getters into setters.

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_ssh_key_private_default()

Absolute path of the first private key in the current user's SSH dot directory
if such a key exists _or_ throw an exception otherwise.

== See Also ==

* get_ssh_key_private_default_if_found().
/---
function get_ssh_key_private_default() {
    die_if_args
    get_ssh_key_private_default_if_found :or :die\
        '"'$(get_ssh_dot_dir)'" contains no canonical private SSH keys.'
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_ssh_key_private_default_if_found()

Absolute path of the first private key in the current user's SSH dot
directory if such a key exists _or_ report failure otherwise.

If multiple such keys exist, this function returns the first such key whose
basename (in order):

* Matches `id_ecdsa`, an SSH protocol 2 private key generated with the
  *Elliptic Curve Digital Signature Algorithm* (ECDSA). Such keys have keytype
  `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp256`,
  depending on bit strength, and now constitute the SSH default.
* Matches `id_rsa`, an SSH protocol 2 private key generated with the
  *Rivest, Shamir, and Adelman* algorithm (RSA). Such keys have keytype
  `ssh-rsa`, but have (largely) been superceded by keys generated with more
  recent algorithms.
* Matches `id_dsa`, an SSH protocol 2 private key generated with the
  *Digital Signature Algorithm* (DSA). Such keys have keytype `ssh-dsa`, but
  have entirely been superceded by keys generated with more recent algorithms.
* Matches `identity`, an SSH protocol 1 private key generated with the
  *Rivest, Shamir, and Adelman* algorithm (RSA), as above. Such protocol is
  increasingly uncommon in the networked wild.
/---
function get_ssh_key_private_default_if_found() {
    die_if_args
    :str filename
    :File.^=_first_if_found filename\
        "$(get_ssh_dot_dir)"/('id_'('ecdsa'|'rsa'|'dsa')|'identity')
    :stdout.echo "${filename}"
}

# ....................{ GETTERS ~ text                     }....................
:func.doc <<'/---'
:str get_ssh_key_fingerprint(
    ?:str ssh_key_filename="$(get_ssh_key_public_default)")

*Fingerprint* (i.e., 128-bit MD5 hash) of the passed SSH key (defaulting to the
current user's preferred public SSH key, if called interactively from the
command line).

SSH key fingerprints are typically used to authenticate the validity of public
keys.
/---
function get_ssh_key_fingerprint() {
    :str ssh_key_filename
    if { :context.is_cli } {
        die_unless_args_0_to_1 'Expected optional key filename.'
        ssh_key_filename="${1:-$(get_ssh_key_public_default)}"
    } else {
        die_unless_arg 'Expected one key filename.'
        ssh_key_filename="${1}"
    }
    :file.text.die_unless "${ssh_key_filename}"

    # Fingerprint such key.
    command ssh-keygen -lf -- "${ssh_key_filename}"
}
