#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `mysql`, a CLI interfacing with local MySQL servers.

== Security Concerns ==

For security, no functions accept passwords as arguments. Doing so would,
without further management, cache passwords in the `zsh` history. Hence, all
functions requiring passwords do so interactively.
/---

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_mysql_user_password(string username = "root")

Set the passed password for the passed MySQL username. Username defaults to
`root`, if not passed. Note that new users are best created via interactive
`CREATE USER` SQL commands entered as the root user: e.g.,

.SQL User Creation
==========================================
[source]
------------------------------------------
# Enter the interactive MySQL shell.
>>> mysql
# Create a new user and password.
CREATE USER 'new_username'@'localhost' IDENTIFIED BY 'password_for_new_username';
# Assign privileges to this user.
GRANT ALL ON *.* TO 'new_username'@'localhost';
# And... we're done.
exit
------------------------------------------
==========================================
/---
function set_mysql_user_password() {
    # Validate sanity.
    die_unless_args_0_to_1 'Expected optional username.'
    string username="${1:-root}"

    #FIXME: Does MySQL attempt to read an interactive password or do we need do
    #it ourselves? Not terribly hard, but...
#   read password
    command mysqladmin -u "${username}" password
}

# ....................{ PRINTERS                           }....................
#FIXME: Trivially silly as defined. Improve in accordance with @{apache2}.

declare_function_with_stdin <<'/---'
string print_mysql()

Print MySQL-specific metadata, including:

* Version.
/---
function print_mysql() {
    die_if_args
    command mysql -V
}

# ....................{ MAKERS                             }....................
#FIXME: Correct documentation.
declare_function_with_stdin <<'/---'
void make_mysql_database(string database_name, string username = "root")

Make a new database using the passed MySQL username (defaulting to `root`).
For security, the current user will be interactively queried for such user's
password.
/---
function make_mysql_database() {
    # Validate sanity.
    die_unless_args_1_to_2\
        'Expected one database name and optional username.'
    string database_name="${1}" username="${2:-root}"

    # Make such database.
    print_message_item\
        "Creating database \"${database_name}\" as user \"${username}\"..."
    command mysqladmin\
        -u "${username}" -p "${password}" create "${database_name}"
}

# ....................{ SHELL                              }....................
#FIXME: Change function signature to:
#
#[stdout: string, stderr: string, status: integer]
#   shell_mysql_with_options(string option1, string option2, ...)
#
#The username should internally default to ${ZESHY_MYSQL_USERNAME}, itself
#defaulting to "root" and defined by "if_config/command/mysql" -- unless a
#username option is passed, of course, in which case such option should not be
#overwritten by a default.
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: integer] shell_mysql_with_options:(
    string username = 'root',
    string mysql_arg1)

Run the interactive MySQL shell with sane option defaults under the passed
username and password. Username defaults to "root", if not passed.
/---
function shell_mysql_with_options:() {
    # Validate sanity.
    die_unless_args_0_to_1\
        'Expected one database name and optional username.'
    string username="${1:-root}"

    # Run such shell.
    command mysql "${ZESHY_OPTIONS_MYSQL[@]}" -u "${username}" "${@}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Unsafe. Passwords should only be accepted as stdin -- not cached in the
#zsh history as recallable commands.
#   if is_args_2; then
#       username="${1}"; shift
#       password="${2}"; shift
#   elif :var.is '1'
#   then username="${1}"; shift
#   else username=root
#   fi
    # Yes, the absence of a space after "-p" is intentional. Thanks, MySQL!
#   print_message "logging in as \"${username}\"..."
#   interactively print_message "setting \"${username}\" password..."
