#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle `fcrontab`, the CLI frontend for the `fcron` *periodic command
scheduler* (i.e., `cron` daemon).

== See Also ==

* http://fcron.free.fr/doc/en/fcrontab.5.html[`man 5 fcrontab`], official
  documentation for `fcron` crontab syntax and semantics.
/---

# ....................{ CHANGERS                           }....................
declare_function_with_stdin <<'/---'
void :update_fcron_crontab_system(string filename = "/etc/fcrontab")

Replace the contents of the current *`fcron` system crontab* (i.e., the `fcron`
crontab run on a per-system rather than -user basis and hence with superuser
privileges) with the contents of the passed text file (defaulting to the first
of `/etc/fcrontab` and `/etc/crontab` that is an existing file, if called
directly from the command line).
/---
function :update_fcron_crontab_system() {
    # Validate sanity.
    if { is_context_cli_function } {
        die_unless_args_0_to_1 'Expected optional crontab filename.'
        is_arg or {
            if { :is_file '/etc/fcrontab' } {
                :args.set '/etc/fcrontab'
            } elif { :is_file '/etc/crontab' } {
                :args.set     '/etc/crontab'
            } else {
                :die 'Neither "/etc/fcrontab" or "/etc/crontab" found.'
            }
        }
    } else {
        die_unless_arg 'Expected one crontab filename.'
    }
    :string filename_crontab="${1}"

    # Basename of the "fcron"-specific command installing system crontabs from
    # contents of external files.
    filename_updater='check_system_crontabs'

    # Absolute path of such command. Unfortunately, "fcron" frequently installs
    # such command to directories *NOT* commonly residing in the current
    # ${PATH} and hence not pathable (e.g., "/usr/libexec", mandated by POSIX
    # to only contain private commands intended *ONLY* to be run internally by
    # public commands already in such ${PATH}). While "fcron" is absolutely in
    # error here, there's little we can do but hack around it.
    is_pathable "${filename_updater}" or {
        #FIXME: Implement :die_unless_file_executable().
        filename_updater="/usr/libexec/${filename_updater}"
        :die_unless_file_executable "${filename_updater}"
    }

    # Install such crontab.
    command "${filename_updater}" -v -i -f -C "${filename_crontab}"
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string :print_fcron_crontab_system()

Print the contents of the current system crontab for `fcron`.
/---
function :print_fcron_crontab_system() {
    # Validate sanity.
    die_if_args

    # Print such synopsis.
    {
        print_message_heading 'fcron System Crontab'
        command fcrontab -usystab -l
    } | page_stdin
}

# --------------------( WASTELANDS                         )--------------------
