#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'---'
Handle Drush *site aliases* (i.e., `@`-prefixed labels referring to local and/or
remote Drupal sites).
---

#FIXME: Add support for site specifications. Since pretty much everyone uses
#site aliases in lieu of specifications, this isn't terribly critical. For the
#same reason, there basically exists no decent online documentation for the
#syntax for site specifications. In fact, I had to go burrowing about the
#"drush" source to find such syntax. See the discussion preceding function
#drush_sitealias_get_record() in "/usr/share/drush/includes/sitealias.inc".

# ....................{ EXCEPTIONS                         }....................
:func.document <<'/---'
void die_unless_drush_site_alias(
    string site_alias,
    string error_message = "Site alias \"${site_alias}\" undefined.")

Throw an exception with the passed message (defaulting to the above message)
unless the`drush` configuration for the current user defines the passed site
alias. See is_drush_site_alias() for further details.
/---
function die_unless_drush_site_alias() {
    die_unless_args_1_to_2\
        'Expected one site alias and optional error message.'
    string site_alias="${1}"
    is_drush_site_alias "${site_alias}" or
        :die "${2:-Site alias \"${site_alias}\" undefined.}"
}

# ....................{ TESTERS                            }....................
:func.document <<'/---'
string is_drush_site_alias(string site_alias_name)

Return success if the `drush` configuration for the current user defines the
passed site alias (e.g., in `~/.drush/aliases.drushrc.php`).
/---
function is_drush_site_alias() {
    # Validate sanity.
    die_unless_arg 'Expected one site alias.'
    string site_alias="${1}"

    # If such alias is syntactically invalid, throw an exception. According to
    # function drush_sitealias_valid_alias_format() in
    # "/usr/share/drush/includes/sitealias.inc", the only requirement (appears)
    # to be that such alias is prefixed by "@".
    is_string_prefix "${site_alias}" '@' or :die\
        "Site alias \"${site_alias}\" syntactically invalid (i.e., not prefixed by \"@\")."

    # Test the newline-delimited string of all such aliases for a line equal to
    # such alias.
    is_string_line "$(command drush site-alias)" "${site_alias}"
}

# ....................{ GETTERS                            }....................
:func.document <<'/---'
string get_drush_site_alias_default()

Get the first site alias defined by the `drush` configuration for the current
user (e.g., in `~/.drush/aliases.drushrc.php`), excluding pseudo-site alias
`@none`. If no such alias exists, an exception is thrown.
/---
function get_drush_site_alias_default() {
    # Validate sanity.
    die_if_args
    :listset site_aliases

    # List of all site aliases.
    set_list_to_drush_site_aliases site_aliases

    # If such list is empty, throw an exception.
    die_unless_list_nonempty site_aliases\
        '"drush" configuration defines no site aliases (e.g., by "~/.drush/aliases.drushrc.php").'

    # Else, get the first site alias.
    :string.output "${site_aliases[1]}"
}

# ....................{ SETTERS                            }....................
:func.document <<'/---'
void set_list_to_drush_site_aliases(string list_name)

Set the passed list (ideally, list set) to all site alias defined by `drush`
configuration files for the current user (e.g., `~/.drush/aliases.drushrc.php`),
excluding the pseudo-site alias `@none`.
/---
function set_list_to_drush_site_aliases() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    string list_name__sltdsa="${1}" site_aliases__sltdsa
    :var.die_unless_type_list "${list_name__sltdsa}"

    # Set such list to such aliases, split on newline.
    set_list_to_string_lines\
        "${list_name__sltdsa}" "$(command drush site-alias)"

    # Remove site alias "@none" from such list, if found.
    remove_list_items "${list_name__sltdsa}" '@none'
}

# --------------------( WASTELAND                          )--------------------
    # If such list is nonempty, return the first item from such list.
#   if { is_list_nonempty site_aliases } {
#       return_string "${site_aliases[1]}"
    # Else, throw an exception.
#   } else {
#       :die 'No "drush" site aliases defined (e.g., by "~/.drush/aliases.drushrc.php").'
#   }
