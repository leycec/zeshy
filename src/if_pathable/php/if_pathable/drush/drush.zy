#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Drush, a CLI utility for manipulating both local and remote Drupal sites.

== Configuration ==

Since `drush` provides robust facilities for both system-wide configuration
(e.g., `/etc/drush/drushrc.php`) and user-specific configuration (e.g.,
`~/.drush/drushrc.php`), this parcel offers comparatively little configuration.
When configuring `drush` through its configuration files, recommended options
include:

.Recommended `~/.drush/drushrc.php` Options
==========================================
[source]
------------------------------------------
// Enable debug and verbose modes.
$options['d'] = 1;
$options['v'] = 1;
------------------------------------------
==========================================
/---

#FIXME: Integrate "/usr/share/doc/drush-*/examples/example.bashrc.bz2", an
#absurdly complete bash-specific "drush" implementation -- including drush
#completions, aliases, functions, globals, and so on.

# ....................{ ARCHIVERS                          }....................
:func.doc <<'/---'
:str backup_drush_site(*:str site_aliases)

Backup all Drupal sites corresponding to the passed `drush` site aliases
(defaulting to the first such alias defined by the current user's `drush`
configuration, if called from the command line) to local archives in the
backup directory defined by the current user's `drush` configuration (e.g.,
`~/drush-backups`).

== Backup Contents ==

`drush` backups each site into a single compressed archive in such directory,
containing all code, files, and database entries comprising such site. Since
`drush` backups are reliably complete, subsequently passing such archives to
restore_drush_site_from_backup() restores such sites to their prior state at the
time of such backup.

These backups are `drush`-specific and hence unrelated to popular Drupal module
``Backup and Migrate''.
/---
function backup_drush_site() {
    if { :context.is_cli_func } {
        is_args :or :args.set "$(get_drush_site_alias_default)"
    } else {
        die_unless_args 'Expected one or more site aliases.'
    }

    # Backup these sites.
    :str site_alias
    for  site_alias ("${@}") {
        print_message_heading "${site_alias} Backup"
        command drush "${site_alias}" archive-backup
    } |& :stdin.page
}


:func.doc <<'/---'
:full restore_drush_site_from_backup(
    ?:str site_alias='$(get_drush_site_alias_default)' :str filename)

Restore the Drupal site corresponding to the passed `drush` site alias
(defaulting to the first such alias defined by the current user's `drush`
configuration, if called directly from the command line) from the passed
`drush`-specific backup archive if the current user interactively confirms
such restoration _or_ return failure otherwise.

== Site Alias Configuration ==

Site aliases _must_ be explicitly configured by the current user's `drush`
configuration to support such automated restoration. Consider running
`print_drush_help archive-restore` for further details on the requisite PHP
array key-value pairs: e.g.,

.restore_drush_site_from_backup() Site Alias Configuration
==========================================
[source]
------------------------------------------
$aliases['megiddo'] = array(
    ...
    'command-specific' => array(
        'archive-restore' => array(
            'destination' => '/tar/megiddo.com',
            'db-su' =>       'root',
            'db-su-pw' =>    'tel_megiddo',
            'overwrite' =>   TRUE,
    ),
  ),
);
------------------------------------------
==========================================

== See Also ==

* backup_drush_site().
/---
function restore_drush_site_from_backup() {
    if { :context.is_cli_func } {
        die_unless_args_1_to_2\
            'Expected optional site alias and one backup filename.'
        is_args_2 :or :arg.prepend "$(get_drush_site_alias_default)"
    } else {
        die_unless_args_2 'Expected one site alias and one backup filename.'
    }
    :str site_alias="${1}" filename "${2}"
    die_unless_drush_site_alias "${site_alias}"
    die_unless_file "${filename}"
    die_unless_shell_interactive

    # If the user confirms such restoration, restore such site; else, fail.
    is_query_line_yes\
        'Really restore site '${site_alias}' from backup "'${filename}'"?' :and {
        print_message_heading "${site_alias} Restoration"
        command drush "${site_alias}" archive-restore "${filename}"
    } | :stdin.page
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str print_drush_help(?:str subcommand_name="")

Print a human-readable synopsis of the passed Drush subcommand (e.g., `status`,
`archive-backup`) if passed such a command _or_ of all Drush options and
commands otherwise.
/---
function print_drush_help() {
    command drush help "${@}" | :stdin.page
}


:func.doc <<'/---'
:str print_drush_site_status(*:str site_aliases)

Print a human-readable synopsis of all Drupal sites corresponding to the passed
`drush` site aliases (defaulting to the first such alias defined by the current
user's `drush` configuration, if called from the command line).
/---
function print_drush_site_status() {
    if { :context.is_cli_func } {
        die_unless_args_0_to_1 'Expected optional site alias.'
        is_arg :or :args.set "$(get_drush_site_alias_default)"
    } else {
        die_unless_arg 'Expected one site alias.'
    }
    :str site_alias="${1}"
    die_unless_drush_site_alias "${site_alias}"

    # Print this status.
    {
        print_message_heading "${site_alias} Status"
        command drush "${site_alias}" status

        print_message_heading "${site_alias} Status Report"
        command drush "${site_alias}" status-report
    } | :stdin.page
}
