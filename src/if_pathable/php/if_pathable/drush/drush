#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle Drush, a CLI utility for manipulating both local and remote Drupal sites.

== Configuration ==

Since `drush` provides robust facilities for both system-wide configuration
(e.g., `/etc/drush/drushrc.php`) and user-specific configuration (e.g.,
`~/.drush/drushrc.php`), this parcel offers comparatively little configuration.
When configuring `drush` through its configuration files, recommended options
include:

.Recommended `~/.drush/drushrc.php` Options
==========================================
[source]
------------------------------------------
// Enable debug and verbose modes.
$options['d'] = 1;
$options['v'] = 1;
------------------------------------------
==========================================
-/-

#FIXME: Integrate "/usr/share/doc/drush-*/examples/example.bashrc.bz2", an
#absurdly complete bash-specific "drush" implementation -- including drush
#completions, aliases, functions, globals, and so on.

# ....................{ ARCHIVERS                          }....................
declare_function_with_stdin <<'/---'
string backup_drush_site(
    string site_alias1 = "$(get_drush_site_alias_default)", ...)

Backup all Drupal sites corresponding to the passed `drush` site aliases
(defaulting to the first such alias defined by the current user's `drush`
configuration, if called from the command line) to local archives in the
backup directory defined by the current user's `drush` configuration (e.g.,
`~/drush-backups`).

== Backup Contents ==

`drush` backups each site into a single compressed archive in such directory,
containing all code, files, and database entries comprising such site. Since
`drush` backups are reliably complete, subsequently passing such archives to
restore_drush_site_from_backup() restores such sites to their prior state at the
time of such backup.

Such backups are `drush`-specific and hence unrelated to popular Drupal module
``Backup and Migrate''.
/---
function backup_drush_site() {
    # Validate sanity.
    if { is_context_cli_function } {
        is_args or :args.set "$(get_drush_site_alias_default)"
    } else {
        die_unless_args 'Expected one or more site aliases.'
    }

    # Backup such sites.
    string site_alias
    for    site_alias ("${@}") {
        print_message_heading "${site_alias} Backup"
        command drush "${site_alias}" archive-backup
    } |& page_stdin
}

declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] restore_drush_site_from_backup(
    string site_alias = "$(get_drush_site_alias_default)", string filename)

Restore the Drupal site corresponding to the passed `drush` site alias
(defaulting to the first such alias defined by the current user's `drush`
configuration, if called directly from the command line) from the passed
`drush`-specific backup archive if the current user interactively confirms
such restoration or return failure otherwise. See backup_drush_site() for
further details.

== Site Alias Configuration ==

Site aliases _must_ be explicitly configured by the current user's `drush`
configuration to support such automated restoration. Consider running
`print_drush_help archive-restore` for further details on the requisite PHP
array key-value pairs: e.g.,

.restore_drush_site_from_backup() Site Alias Configuration
==========================================
[source]
------------------------------------------
$aliases['megiddo'] = array(
    ...
    'command-specific' => array(
        'archive-restore' => array(
            'destination' => '/tar/megiddo.com',
            'db-su' =>       'root',
            'db-su-pw' =>    'tel_megiddo',
            'overwrite' =>   TRUE,
    ),
  ),
);
------------------------------------------
==========================================
/---
function restore_drush_site_from_backup() {
    # Validate arguments.
    if { is_context_cli_function } {
        die_unless_args_1_to_2\
            'Expected optional site alias and one backup filename.'
        is_args_2 or :arg.prepend "$(get_drush_site_alias_default)"
    } else {
        die_unless_args_2 'Expected one site alias and one backup filename.'
    }
    string site_alias="${1}" filename "${2}"
    die_unless_drush_site_alias "${site_alias}"
    die_unless_file "${filename}"
    die_unless_shell_interactive

    # If the user confirms such restoration, restore such site; else, fail.
    is_query_line_yes\
        'Really restore site '${site_alias}' from backup "'${filename}'"?' and {
        print_message_heading "${site_alias} Restoration"
        command drush "${site_alias}" archive-restore "${filename}"
    } | page_stdin
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_drush_help(string subcommand_name = "")

Print a human-readable synopsis of the passed Drush subcommand (e.g., `status`,
`archive-backup`) if passed such a command or of _all_ Drush options and
commands otherwise.
/---
function print_drush_help() {
    command drush help "${@}" | page_stdin
}

declare_function_with_stdin <<'/---'
string print_drush_site_status(
    string site_alias1 = "$(get_drush_site_alias_default)", ...)

Print a human-readable synopsis of all Drupal sites corresponding to the passed
`drush` site aliases (defaulting to the first such alias defined by the current
user's `drush` configuration, if called from the command line).
/---
function print_drush_site_status() {
    # Validate sanity.
    if { is_context_cli_function } {
        die_unless_args_0_to_1 'Expected optional site alias.'
        is_arg or :args.set "$(get_drush_site_alias_default)"
    } else {
        die_unless_arg 'Expected one site alias.'
    }
    string site_alias="${1}"
    die_unless_drush_site_alias "${site_alias}"

    # Print such status.
    {
        print_message_heading "${site_alias} Status"
        command drush "${site_alias}" status

        print_message_heading "${site_alias} Status Report"
        command drush "${site_alias}" status-report
    } | page_stdin
}

# --------------------( WASTELAND                          )--------------------
#FUXME: Defaulting unpassed arguments *ONLY* if called directly from the command
#line is a fantastic idea I can't believe I only conceived of now. Revise
#everywhere we currently default unpassed arguments to only do so when called
#from the CLI, just like here. A simple change to effect, happily.

#   :string.output "context: ${ZSH_EVAL_CONTEXT}"
    #FUXME: Not terribly fond of this technique. Just prepend the site alias to
    #the argument list.
    # Localize arguments.
#   string site_alias filename
#   if { is_context_cli_function } {
#       die_unless_args_1_to_2\
#           'Expected optional site alias and one backup filename.'
#       if { is_args_2 } { site_alias="${1}"
#       } else           { site_alias="$(get_drush_site_alias_default)" }
#   } else {
#       die_unless_args_2 'Expected one site alias and one backup filename.'
#       site_alias="${1}"
#   }
#   filename="${@[-1]}"

    # Validate sanity.
#    die_unless_drush_site_alias "${site_alias}"
#    die_unless_file "${filename}"
#    die_unless_shell_interactive

#       if { is_args_2 } { site_alias="${1}"
#       } else           { site_alias="$(get_drush_site_alias_default)" }

    #FUXME: Inefficient implementation for a function called as often as this
    #one is. Reimplement this to directly capture the output of
    #"drush site-alias" into a string; then, simply call is_string_line() to
    #test .
    # List of all such aliases.
#   listset site_aliases; set_list_to_drush_site_aliases site_aliases

    # Test such list for such alias.
#   is_list_item site_aliases "${site_alias}"

# (e.g., due to no such file existing or such file failing to define an alias)

#    config_filename="$(get_drush_config_file_site_aliases)"
#    die_unless_file_text "${config_filename}"
#    get_file_text_matches_glob_
#    [[:blank:]]#'$aliases['("'"[^\']#"'"|'"'('\"'|[^\"])#'"')']'[[:blank:]]#'='*
#declare_function_with_stdin <<'/---'
#string get_drush_config_file_site_aliases()
#
#Get the absolute path of the user-specific `drush` configuration file of site
#aliases (e.g., `~/.drush/aliases.drushrc.php`).
#/---
#function get_drush_config_file_site_aliases() {
#    #FUXME: There exist a number of possible configuration files defining such
#    #aliases, of which this is merely the most common.
#    die_if_args
#    :string.output "${HOME}/.drush/aliases.drushrc.php"
#}
