#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle Drush, a CLI utility for manipulating both local and remote Drupal sites.
-/-

#FIXME: Integrate "/usr/share/doc/drush-*/examples/example.bashrc.bz2", an
#absurdly complete bash-specific "drush" implementation -- including drush
#completions, aliases, functions, globals, and so on.
#FIXME: Add support for site specifications. Since pretty much everyone uses
#site aliases in lieu of specifications, this isn't terribly critical. For the
#same reason, there basically exists no decent online documentation for the
#syntax for site specifications. In fact, I had to go burrowing about the
#"drush" source to find such syntax. See the discussion preceding function
#drush_sitealias_get_record() in "/usr/share/drush/includes/sitealias.inc".

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_drush_site_alias(
    string site_alias,
    string error_message = \"drush\" site alias \"${site_alias}\" undefined.")

Throw an exception with the passed message (defaulting to the above message)
unless the`drush` configuration for the current user defines the passed site
alias. See is_drush_site_alias() for further details.
/---
function die_unless_drush_site_alias() {
    die_unless_args_1_to_2\
        'expected one site alias and optional error message'
    string site_alias="${1}"
    is_drush_site_alias "${site_alias}" or
        die "${2:-\"drush\" site alias \"${site_alias}\" undefined.}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
string is_drush_site_alias(string site_alias_name)

Return success if the `drush` configuration for the current user defines the
passed site alias (e.g., in `~/.drush/aliases.drushrc.php`).
/---
function is_drush_site_alias() {
    # Validate sanity.
    die_unless_arg 'expected one site alias'
    string site_alias="${1}"

    # If such alias is syntactically invalid, throw an exception. According to
    # function drush_sitealias_valid_alias_format() in
    # "/usr/share/drush/includes/sitealias.inc", the only requirement (appears)
    # to be that such alias is prefixed by "@".
    is_string_prefix "${site_alias}" '@' or die\
        "\"drush\" site alias \"${site_alias}\" syntactically invalid (i.e., not prefixed by \"@\")."

    # Test the newline-delimited string of all such aliases for a line equal to
    # such alias.
    is_string_line "$(command drush site-alias)" "${site_alias}"
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_drush_site_alias_default(void)

Get the first site alias defined by the `drush` configuration for the current
user (e.g., in `~/.drush/aliases.drushrc.php`), excluding pseudo-site alias
`@none`. If no such alias exists, an exception is thrown.
/---
function get_drush_site_alias_default() {
    # Validate sanity.
    die_if_args
    list_set site_aliases

    # List of all such aliases.
    set_list_to_drush_site_aliases site_aliases

    # If such list is empty, throw an exception.
    die_unless_list_nonempty site_aliases '"drush" site aliases undefined'

    # Else, return the first item from such list.
    output_string "${site_aliases[1]}"
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_list_to_drush_site_aliases(string list_name)

Set the passed list (ideally, list set) to all site alias defined by `drush`
configuration files for the current user (e.g., `~/.drush/aliases.drushrc.php`),
excluding the pseudo-site alias `@none`.
/---
function set_list_to_drush_site_aliases() {
    # Validate sanity.
    die_if_args
    string list_name__sltdsa="${1}" site_aliases__sltdsa
    die_unless_list "${list_name__sltdsa}"

    # Set such list to such aliases, split on newline.
    set_list_to_string_lines list_name__sltdsa "$(command drush site-alias)"

    # Remove site alias "@none" from such list, if found.
    remove_list_items "${list_name__sltdsa}" '@none'
}

# ....................{ PRINTERS                           }....................
#FIXME: Defaulting unpassed arguments *ONLY* if called directly from the command
#line is a fantastic idea I can't believe I only conceived of now. Revise
#everywhere we currently default unpassed arguments to only do so when called
#from the CLI, just like here. A simple change to effect, happily.

declare_function_with_stdin <<'/---'
string print_drush_site_status(
    string site_alias = "$(get_drush_site_alias_default)")

Print a human-readable synopsis of the local or remote Drupal site corresponding
to the passed `drush` site alias (defaulting to the first such alias defined by
the current user's `drush` configuration, if called from the command line).
/---
function print_drush_site_status() {
    # Validate sanity.
    string site_alias
    if { is_context_cli } {
        die_unless_args_0_to_1 'expected optional site name'
        site_alias="${1:-$(get_drush_site_alias_default)}"
    } else {
        die_unless_arg 'expected one site name'
        site_alias="${1}"
    }
    die_unless_drush_site_alias "${site_alias}"

    # Print such status.
    {
        print_heading "\"${site_alias}\" status"
        command drush "${site_alias}" status

        print_heading "\"${site_alias}\" status report"
        command drush "${site_alias}" status-report
    } | page_stdin
}

# --------------------( WASTELAND                          )--------------------
    #FUXME: Inefficient implementation for a function called as often as this
    #one is. Reimplement this to directly capture the output of
    #"drush site-alias" into a string; then, simply call is_string_line() to
    #test .
    # List of all such aliases.
#   list_set site_aliases; set_list_to_drush_site_aliases site_aliases

    # Test such list for such alias.
#   is_list_item site_aliases "${site_alias}"

# (e.g., due to no such file existing or such file failing to define an alias)

#    config_filename="$(get_drush_config_file_site_aliases)"
#    die_unless_file_text "${config_filename}"
#    get_file_text_matches_glob_
#    [[:blank:]]#'$aliases['("'"[^\']#"'"|'"'('\"'|[^\"])#'"')']'[[:blank:]]#'='*
#declare_function_with_stdin <<'/---'
#string get_drush_config_file_site_aliases(void)
#
#Get the absolute path of the user-specific `drush` configuration file of site
#aliases (e.g., `~/.drush/aliases.drushrc.php`).
#/---
#function get_drush_config_file_site_aliases() {
#    #FUXME: There exist a number of possible configuration files defining such
#    #aliases, of which this is merely the most common.
#    die_if_args
#    output_string "${HOME}/.drush/aliases.drushrc.php"
#}
