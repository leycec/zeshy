#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle *WINEPREFIXes* (i.e., directories emulating Windows installations).
-/-

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_wine_prefix(
    string pathname,
    string error_message = "\"${pathname}\" not a WINEPREFIX")

Throw an exception with the passed message unless the passed path is a
WINEPREFIX. See is_wine_prefix() for further details.
/---
function die_unless_wine_prefix() {
    die_unless_args_1_to_2 'expected one pathname and optional error message'
    string pathname="${1}"
    is_wine_prefix "${pathname}" or :die "${2:-\"${pathname}\" not a WINEPREFIX}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_wine_prefix(string pathname)

Return success if the passed path is an existing *WINEPREFIX* (i.e., a directory
containing files `system.reg` and `user.reg`).
/---
function is_wine_prefix() {
    # Validate passed arguments.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"

    # Test such path for containment of two canonical WINEPREFIX files. This
    # certainly does not suffice to prove such path to be a WINEPREFIX, but
    # currently suffices.
    is_dir "${dirname}" and :is_files_simple "${dirname}/"{system,user}.reg
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_wine_prefix()

Get the current WINEPREFIX, defaulting to `~/.wine` if no WINEPREFIX is set.
/---
function get_wine_prefix() {
    die_if_args
    :string.output "${WINEPREFIX-${HOME}/.wine}"
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_wine_prefix(string dirname)

Set the current WINEPREFIX to the passed directory. If such directory contains
no WINEPREFIX, throw an exception.
/---
function set_wine_prefix() {
    # Validate passed arguments.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_unless_wine_prefix "${dirname}"

    # Set such global.
    string_global_export WINEPREFIX="${dirname}"
}

# ....................{ MAKERS                             }....................
declare_function_with_stdin <<'/---'
void make_wine_prefix(string dirname)

Make a new WINEPREFIX at the passed directory of the same architecture as the
current system (i.e., 64-bit if such system is 64-bit; else, 32-bit). Consider
calling make_wine_prefix_32_bit() if such defaults are undesirable.
/---
function make_wine_prefix() {
    # Validate passed arguments. Since "wineboot" requires such directory to not
    # exist, throw an exception if such directory exists.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_if_dir "${dirname}"

    # Make such Prefix. Oddly, Wine overloads external command "wineboot" to
    # make, reboot, and shutdown WINEPREFIXes. Even more oddly, running
    # "wineboot" without options either makes or reboots the current WINEPREFIX
    # depending on whether or not such WINEPREFIX already exists.
    #
    # *THIS IS WHY ZESHY EXISTS*, people. (Jeebus Christos, but who in their
    # oxycontin-addled half-minds applauded such pantently nonsensical misuse of
    # overloading?)
    WINEPREFIX="${dirname}" command wineboot
}

declare_function_with_stdin <<'/---'
void make_wine_prefix_32_bit(string dirname)

Make a new 32-bit WINEPREFIX at the passed directory.
/---
function make_wine_prefix_32_bit() {
    # Validate passed arguments. Since "wineboot" requires such directory to not
    # exist, throw an exception if such directory exists.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_if_dir "${dirname}"

    # Make such prefix. See make_wine_prefix() for further details.
    WINEPREFIX="${dirname}" WINEARCH='win32' command wineboot
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: If such directory contains no WINEPREFIX, throw an exception.
#   list wine_filenames
#   wine_filenames=( "${dirname}/"{system,user}.reg(.) )
#   (( ${#wine_filenames} == 2 ))
    #FUXME: If such directory already contains a WINEPREFIX, throw an exception.
