#!/usr/bin/env zsh
# ====================[ prefix                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle WINEPREFIXes (i.e., directories emulating a Windows installation).

# ....................{ EXCEPTIONS                         }....................
document_function '
void die_unless_wine_prefix(
  string pathname,
  string error_message = "\"${pathname}\" not a WINEPREFIX")

Throw an exception with the passed message unless the passed path is an existing
plain file. See is_file_plain() for further details.
'
function die_unless_wine_prefix() {
    die_unless_args_1_to_2 'expected one pathname and optional error message'
    string pathname="${1}"
    is_wine_prefix "${pathname}" or die "${2:-\"${pathname}\" not a WINEPREFIX}"
}

# ....................{ TESTERS                            }....................
document_function '
boolean is_wine_prefix(string dirname)

Return true if the passed directory exists and is a WINEPREFIX (i.e., contains
files "system.reg" and "user.reg").
'
function is_wine_prefix() {
    # Validate passed arguments.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"

    # Test such path for containment of two canonical WINEPREFIX files. This
    # certainly does not suffice to prove such path to be a WINEPREFIX, but
    # currently suffices.
    is_files_plain "${dirname}/"{system,user}.reg
}

# ....................{ GETTERS                            }....................
document_function '
string get_wine_prefix(void)

Get the current WINEPREFIX, defaulting to "~/.wine" if no such Prefix is set.
'
function get_wine_prefix() {
    die_if_args
    print_string "${WINEPREFIX-${HOME}/.wine}"
}

# ....................{ SETTERS                            }....................
document_function '
void set_wine_prefix(string dirname)

Set the current WINEPREFIX to the passed directory. If such directory contains
no WINEPREFIX, throw an exception.
'
function set_wine_prefix() {
    # Validate passed arguments.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_unless_wine_prefix "${dirname}"

    # Set such Prefix.
    string_global_export WINEPREFIX="${dirname}"
}

# ....................{ MAKERS                             }....................
document_function '
void make_wine_prefix(string dirname)

Make a new WINEPREFIX under the passed directory.
'
function make_wine_prefix() {
    # Validate passed arguments. Since "wineboot" requires such directory to not
    # exist, throw an exception if such directory exists.
    die_unless_arg 'expected one dirname'
    string dirname="${1}"
    die_if_dir "${dirname}"

    # Make such Prefix. Oddly, Wine overloads external command "wineboot" to
    # make, reboot, and shutdown WINEPREFIXes. Even more oddly, running
    # "wineboot" without options either makes or reboots the current WINEPREFIX
    # depending on whether or not such WINEPREFIX already exists.
    #
    # *THIS IS WHY ZESHY EXISTS*, people.
    WINEPREFIX="${dirname}" wineboot
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: If such directory contains no WINEPREFIX, throw an exception.
#   list wine_filenames
#   wine_filenames=( "${dirname}/"{system,user}.reg(.) )
#   (( ${#wine_filenames} == 2 ))
    #FUXME: If such directory already contains a WINEPREFIX, throw an exception.
