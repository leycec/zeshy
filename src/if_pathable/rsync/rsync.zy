#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `rsync`, a CLI utility for synchronizing local with remote paths.
/---

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:str get_rsync_modules(:str hostname)

Newline-delimited list of all modules exposed by the remote `rsync` daemon at
the passed hostname.

== Examples ==

.get_rsync_modules()
==========================================
[source]
------------------------------------------
>>> get_rsync_modules "o.isis.com"
und
osiris
------------------------------------------
==========================================
/---
function get_rsync_modules() {
    die_unless_arg 'Expected one hostname.'
    command rsync --no-motd -- "${1}"::
}

# ....................{ SYNCHRONIZERS                      }....................
#FIXME: Split into interactive and non-interactive versions, the latter of
#course named rsync_with_options().
:func.doc <<'/---'
:str rsync_uri_with_options(
    *:str rsync_options
    +:str source_uris
    :str target_uri
)
 
Synchronize the passed source URIs to the passed target URI with `rsync`,
passing the ZY_OPTIONS_RSYNC* family of default options supplemented by the
passed custom options.

If running under an interactive shell, this function interactively lists and
require the user confirm these changes prior to permanently doing so.

== Arguments ==

Source and target URIs may be any of the following, `[` and `]` delimiters
signifying optional parameters:

* Local paths (e.g., `/zauber/flote/`).
* SSH-style remote paths shuttled under a remote shell transport, specified as
  `[${username}@]${hostname}:${path}` (e.g., `holle@papa:/gena/`).
* rsync-style remote paths shuttled under the TCP-driven rsync daemon protocol,
  specified as either `[${username}@]${hostname}::${module}` or
  `rsync://[${username}@]${hostname}[:${port}]/${module}` (e.g.,
  `rache@papa::geno`, `rsync://herzen@papa:446/geno`). rsync modules are
  effectively pathnames mapped by the remote rsync daemon to absolute paths on
  that remote host.

If passing:

* Exactly one source URI directory, such directory should typically be
  suffixed with a trailing `/`. Omitting `/` instructs rsync to create a
  directory under the target URI directory having the same basename as such
  directory, a rarely useful instruction.
* Two or more source URI directories, such directories should typically not be
  suffixed with a trailing `/`. (See above.)

Target URIs should typically be absolute paths.

== Caveats ==

`rsync` behaves (un)intentionally destructively under certain options (e.g.,
`--delete`). As a precaution against catastrophic large-scale changes, consider
calling this function interactively when devising new synchronizations.
/---
function rsync_uri_with_options() {
    die_unless_args_2_or_more\
        'Expected optional rsync options, one or more source URIs, and one target URI.'
    :str last_source_uri="${@[-2]}" target_uri="${@[-1]}"
    :list rsync_command

    #FIXME: Shift to a run_code_with_options_configured()-based implementation.

    # Command line to be run.
    rsync_command=(
        :run_command_with_priority_lowest
        command rsync "${ZY_OPTIONS_RSYNC[@]}"
    )

    #FIXME: Clearly, we want a new function is_path_relative(). This is awkward.

    # If either the last source URI or target URI are *NOT* absolute paths, this
    # synchronization is (probably) synchronizing either to or from some remote
    # host. Append appropriate user-configured options (e.g., "--compress").
    :path.is_absolute "${last_source_uri}" :or
        rsync_command+=( "${ZY_OPTIONS_RSYNC_IF_SOURCE_REMOTE[@]}" )
    :path.is_absolute "${target_uri}" :or
        rsync_command+=( "${ZY_OPTIONS_RSYNC_IF_TARGET_REMOTE[@]}" )

    # If the current shell is interactive, interactively list and require the
    # current user confirm all filesystem changes to be performed prior to
    # permanently doing so.
    #
    # Run "rsync" deprioritized to avoid resource starvation of other processes.
    if { :shell.is_interactive } {
        rsync_command+=( "${ZY_OPTIONS_RSYNC_IF_INTERACTIVE[@]}" )

        # List all filesystem changes to be performed prior to doing so. Since
        # users often prematurely terminate such listing with <Ctrl-C>, ignore
        # nonzero exit status.
#       print_message "running \"${rsync[@]} ${@}\"..."; sleep 2s
        print_message_item "Simulating synchronization to \"${target_uri}\"."
        { "${rsync_command[@]}" --dry-run "${(q)@}" } :=failure.ignore

        # If the current user still wants to do so, do.
        is_query_line_yes\
            "Synchronize to \"${target_uri}\"?" :or :failure.report
        print_message_item "Synchronizing to \"${target_uri}\"."
        "${rsync_command[@]}" "${(q)@}"
    # Else, synchronize without interactive confirmation. Since this is
    # inherently unsafe, output a terse warning.
    } else {
        :print_warning_item\
            "Synchronizing to \"${target_uri}\" without safe simulation."
        "${rsync_command[@]}"\
            "${ZY_OPTIONS_RSYNC_IF_NONINTERACTIVE[@]}"\
            "${(q)@}"
    }
}
