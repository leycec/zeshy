#!/usr/bin/env zeshy

:parcel <<'/---'
Configure `zeshy`-specific `git` functionality.
/---

# ....................{ ALIASES                            }....................
# See "00-core/alias" for further details.
#
# Note the following git-specific nomenclature:
#
# * "master" is the local master branch.
# * "origin master" is the remote master branch (i.e., branch "master" on the
#   remote repository symbolically referred to as "origin").
# * "origin/master" is the local master tracking branch (i.e., the local
#   copy of "origin master" and hence tracking such remote branch).

ZY_ALIAS_CLI_ABBREVIATIONS+=(
    {gitcl}one  'command git clone'
    {gitd}iff   'command git diff'
    {gitp}u{l}l 'command git pull'
    {gitp}u{s}h 'command git push'
    {gits}tatus 'command git status'

    # ==================[ BRANCH                            ]==================
    # Switch to the passed branch.
    {gitb}ranch 'command git checkout'

    # Create and switch to the passed branch.
    {gitb}ranch{c}reate 'command git checkout -b'

    # Create the passed branch, remaining on the current branch.
    {gitb}ranch{c}reate{s}tay 'command git branch'

    #FIXME: This should definitely require interactive zeshy confirmation and
    #hence a new function.
    # Delete the passed branch.
    {gitb}ranch{d}elete 'command git branch -D'

    # List all branches.
    {gitb}ranch{l}ist 'command git branch --'

    # Switch to the local master branch.
    {gitb}ranch{m}aster 'command git checkout master'

    # ==================[ CHERRY PICK                       ]==================
    {gitc}herry{p}ick 'command git cherry-pick'

    # ==================[ COMMIT                            ]==================
    {gitc}ommit             'command git commit'
    {gitc}ommit{a}ll        'command git commit --all'
    {gitc}ommit{a}ll{a}mend 'command git commit --all --amend'

    #FIXME: This should definitely require interactive zeshy confirmation and
    #hence a new function.

    # Uncommit the prior commit, preserving both the working tree and index.
    {gitc}ommit{u}ndo 'command git reset --soft HEAD~1'

    # ==================[ CONFIGURE                         ]==================
    {git}con{f}ig               'command git config'
    {git}con{f}ig{l}ist         'command git config --list'
    {git}con{f}ig{s}ystem       'command git config --system'
    {git}con{f}ig{s}ystem{l}ist 'command git config --system --list'
    {git}con{f}ig{u}ser         'command git config --global'
    {git}con{f}ig{u}ser{l}ist   'command git config --global --list'

    # ==================[ GARGABE COLLECTION                ]==================
    #FIXME: Potentially risky, although usually safe. Pruning untracked
    #objects, while typically desirable, does prevent recovery of such objects.
    #In other words, interactively confirm such action with the user.
    {git}{pr}une='command git gc --prune'

    # ==================[ GREP                              ]==================
    {gitg}rep       ':grep_git_with_options'
    {gitg}rep{r}oot ':grep_git_root_with_options'

    # ==================[ INDEX                             ]==================
    # Stage all passed files to the index.
    {giti}ndex{a}dd 'command git add'

    # Stage all edited files to the index.
    {giti}ndex{a}dd{a}ll 'command git add --all'

    # Unstage all passed files from the index.
    {giti}ndex{u}nstage 'command git rm --cache'

    # ==================[ LOG                               ]==================
    {gitl}og        'command git log'
    {gitl}og{g}raph 'command git log --graph --decorate --abbrev-commit --pretty=oneline'

    # ==================[ MERGE                             ]==================
    {gitm}erge 'command git merge'

    # ==================[ REBASE                            ]==================
    # Automatically rebase the current branch to the passed branch, thus moving
    # the HEAD of the former to the HEAD of the latter.
    {gitr}ebase 'command git rebase'

    {gitr}ebase{c}ontinue    'command git rebase --continue'
    {gitr}ebase{i}nteractive 'command git rebase --interactive'

    # Automatically rebase the current branch to the remote master (e.g., to
    # eliminate extraneous "Merged from..." commits implicitly produced by
    # unconflicting merges.)
    {gitr}ebase{o}rigin{m}aster 'command git rebase origin/master'

    # Interactively rebase the current branch to the local master, permitting
    # all new commits in the former since the last push to the latter to be
    # selectively reordered and/or squashed. After doing so, such commits may
    # be moved to the master with the following workflow:
    #
    #     # Switch to the desired branch.
    #     >>> gitb existingbranch
    #     # Interactively rebase such branch to the local master.
    #     >>> gitrim
    #     # Switch to the local master.
    #     >>> gitbm
    #     # Move the HEAD of the local master to the HEAD of such branch.
    #     >>> gitr existingbranch
    {gitr}ebase{i}nteractive{m}aster 'command git rebase --interactive master'

    # Interactively rebase the local master to the remote master, permitting all
    # new commits in the former since the last push to the latter to be
    # selectively reordered and/or squashed.
    {gitr}ebase{i}nteractive{o}rigin{m}aster
        'command git rebase --interactive origin/master'

    # ==================[ RESET                             ]==================

    #FIXME: Wrap with a function requiring the user interactively confirm such
    #reset.

    # Reset. Before calling such alias, *ALWAYS* commit all uncommitted changes
    # *AND* store all commits to be purged by such reset into a branch (either
    # existing or newly created for the purpose of storing such commits). That
    # is to say, consider a workflow resembling:
    #
    # * If storing such commits in a new branch, simply create such branch.
    #   Since branches are simply commit pointers, this preserves a pointer to
    #   the current commit and hence all prior commits to "master": e.g.,
    #
    #    # Create the temporary branch but remain in "master".
    #    >>> gitbc newbranch
    #    # Either reset to the remote origin or...
    #    >>> gitresho
    #    # ...manually purge prior commits. (Here, the prior three commits.)
    #    >>> gitresh HEAD~3
    #    # Switch to such branch.
    #    >>> gitb newbranch
    #
    # * Else, such commits must be manually merged into an existing branch:
    #   e.g.,
    #
    #    # Switch to such branch.
    #    >>> gitb existingbranch
    #    # Merge all commits from "master" into such branch.
    #    >>> gitm master
    #    # Switch back to "master".
    #    >>> gitbm
    #
    #    # Either reset to the remote origin or purge prior commits, as above.
    #    >>> gitresho        # Either this...
    #    >>> gitresh HEAD~3  # ...or this.
    #
    #    # Return to such branch.
    #    >>> gitb existingbranch
    {gitres}et{h}ard         'command git reset --hard'
    {gitres}et{h}ard{o}rigin 'command git reset --hard origin/master'

    # ==================[ STASH                             ]==================
    # Since git implicitly merges all uncommitted changes to the current
    # working tree when switching branches, stash changes *BEFORE* switching
    # branches to prevent changes from "leaking" between branches.

    # Stash all uncommitted changes and revert to the current branch's most
    # recent commit (i.e., "HEAD").
    {git}s{t}ash         'command git stash'

    # List all prior stashes.
    {git}s{t}ash{l}ist   'command git stash list'

    # Merge all uncommitted changes in the passed stashed (defaulting to the
    # most recent stash) into the current working tree.
    {git}s{t}ash{a}pply  'command git stash apply'

    # Merge as above *AND* remove such stash from the stash list.
    {git}s{t}ash{a}pply{d}elete 'command git stash pop'

    # Remove the passed stash from the stash list.
    {git}s{t}ash{d}elete 'command git stash drop'

    # Create a new branch with the passed name, check out the most recent
    # commit from the branch from which the passed stash (defaulting to the
    # most recent stash) was originally stashed into the new branch, merge all
    # uncommited changes from such stash into the new branch, and remove such
    # stash if such changes merged successfully.
    {git}s{t}ash{b}ranch 'command git stash branch'
)

# ....................{ OPTIONS                            }....................
:list.global ZY_OPTIONS_GIT_GREP <<'/---'
`git grep` options for `zeshy`-specific greppers (e.g., :grep_git()).
/---
ZY_OPTIONS_GIT_GREP=(
    -I
    --perl-regexp
)


:list.global ZY_OPTIONS_GIT_GREP_IF_INTERACTIVE <<'/---'
`git grep` options when run interactively.
/---
ZY_OPTIONS_GIT_GREP_IF_INTERACTIVE=(
    --break
    --color=always
    --heading
    --line-number

    # Uncomment to print one line of context both above and below matched lines.
    #--context 1
)


:list.global ZY_OPTIONS_GIT_GREP_IF_NONINTERACTIVE <<'/---'
`git grep` options when run non-interactively.
/---
ZY_OPTIONS_GIT_GREP_IF_NONINTERACTIVE=(
    --color=never
)
