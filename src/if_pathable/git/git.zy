#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
`git`, the official CLI for the distributed version control system (DVCS) of the
same name.
/---

# For maintainability, only :die_unless_path_git(), :is_path_git(), and
# :set_string_to_path_git_dir_root_if_found() may accept the path of the file or
# directory residing in the git repository to be operated on. All other
# functions must assume the git repository containing the current directory, in
# accordance with git usage.

#FIXME: Add functionality for the following sweet git commands:
#
#* git history grepping, also referred to as the "git pickaxe":
#
#  # Search *ALL* project history for the passed search substring.
#  >>> git log -S${search_substring}
#FIXME: Implement risky commands by simply confirming such operations
#beforehand: e.g.,
#
#   # Revert the repository to the remote master. The user had better confirm!
#   >>> git reset --hard origin/master

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :die_unless_git(
    ?:str error_message='Current directory "$(get_dir)" not under git control.')

Throw an exception unless the current directory resides in a `git` repository.

== See Also ==

* :is_git().
/---
function :die_unless_git() {
    die_unless_args_0_to_1 'Expected optional error message.'
    :is_git :or {
        :str dirname; dirname="$(get_dir)"
        :die "${1-Current directory \"${dirname}\" not under git control.}"
    }
}


:func.doc <<'/---'
:void :die_unless_path_git(
    :str pathname
    ?:str error_message='Path "${pathname}" not under git control.')

Throw an exception unless the passed path resides in a `git` repository.

== See Also ==

* :is_path_git().
/---
function :die_unless_path_git() {
    die_unless_args_1_to_2 'Expected one pathname and optional error message.'
    :str pathname="${1}"
    :is_path_git "${pathname}" :or
        :die "${2-Path \"${pathname}\" not under git control.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :is_git()

Report success only if the current directory resides in a `git` repository.

== See Also ==

* :is_path_git().
/---
function :is_git() {
    # Yes, this *IS* the most expedient means of testing such condition.
    die_if_args
    { command git rev-parse } :=silent
}


:func.doc <<'/---'
[status=:bool] :is_path_git(:str pathname)

Report success only if the passed path resides in a `git` repository (i.e., if
either this directory or some parent of this directory contains either a
directory `.git` containing a valid git tree or file `.git` containing the
pathname of this tree).
/---
function :is_path_git() {
    die_unless_arg 'Expected one pathname.'
    :str pathname="${1}" dirname_git_top

    # Test such path. While this is also implementable by changing the current
    # directory to such path and calling :is_git(), the
    # possibility such path is a file rather than directory complicates doing
    # so. The following implementation is simpler.
    :set_string_to_path_git_dir_root_if_found\
        dirname_git_top "${pathname}"
}

# ....................{ SETTERS ~ root                     }....................
:func.doc <<'/---'
:void :set_string_to_git_dir_root(:Str string_name)

Set the passed string variable to the absolute path of the top-level directory
for the `git` repository containing the current directory.
/---
function :set_string_to_git_dir_root() {
    die_unless_arg 'Expected one string name.'
    :die_unless_git

    # Set this string to this directory.
    :Str.set "${1}" "$(command git rev-parse --show-toplevel)"
}


:func.doc <<'/---'
[status=:bool] :set_string_to_path_git_dir_root_if_found(
    :Str string_name :str pathname)

Set the string variable with the passed name to the absolute path of the
top-level directory for the `git` repository containing the passed path if such
path resides in such a repository or report failure otherwise.
/---
function :set_string_to_path_git_dir_root_if_found() {
    die_unless_args_2 'Expected one string name and one pathname.'
    :str\
        string_name__sstprgdtif="${1}"\
        pathname__sstprgdtif="${2}"\
        dirname_git_dir__sstprgdtif
    die_unless_path "${pathname__sstprgdtif}"
    :Str.die_unless "${string_name__sstprgdtif}"

    #FIXME: Unfortunately, an as-yet-undetermined version of zsh >= 5.0.5
    #has subtly broken parsing of global aliases embedded in process
    #substitutions. Specifically, global aliases following "}" delimiters in
    #such substitutions are erroneously parsed as syntactic errors rather
    #expanded as expected. Until this is resolved, we defer to the manual
    #approach and avoid trailing global aliases in process substitutions.

    # Get the absolute path of the ".git" directory for the git repository
    # containing such path if such path resides in such a repository or report
    # failure otherwise. While this is also implementable by changing the
    # current directory to such path and running "command git rev-parse
    # --show-toplevel", the possibility such path is a file rather than
    # directory complicates doing so. The following implementation is simpler.
    # dirname_git_dir__sstprgdtif=$(
    #     { command git rev-parse --resolve-git-dir "${pathname__sstprgdtif}" } :=stderr.silent) :or
    #         :failure.report
    dirname_git_dir__sstprgdtif=$(
        { command git rev-parse --resolve-git-dir "${pathname__sstprgdtif}" } 2>/dev/null) :or
            :failure.report

    # Strip the suffixing "/.git" from such directory, if found.
    remove_string_suffix dirname_git_dir__sstprgdtif '/.git'

    # Set this string to this directory.
    :Str.set "${string_name__sstprgdtif}" "${dirname_git_dir__sstprgdtif}"
}

# ....................{ SETTERS ~ branch                   }....................
:func.doc <<'/---'
:void :set_string_to_git_branch(:Str string_name)

Set the string variable with the passed name to the current branch of the `git`
working tree containing the current directory.
/---
function :set_string_to_git_branch() {
    die_unless_arg 'Expected one string name.'
    :die_unless_git
    :Str.set "${1}" "$(command git symbolic-ref --short HEAD)"
}

# ....................{ STORERS                            }....................
:func.doc <<'/---'
:void :store_git_dir_root()

Change the current directory to the top-level directory for the `git` repository
containing the current directory and push such directory to the top of the
directory stack.

== See Also ==

* :store_dir().
/---
function :store_git_dir_root() {
    die_if_args
    :die_unless_git
    :str git_dir_root

    # Store this directory.
    :set_string_to_git_dir_root git_dir_root
    store_dir "${git_dir_root}"
}

# ....................{ DIFFERENCERS                       }....................
:func.doc <<'/---'
:str :difference_git_from_revision(:str git_revision)

Print all differences between the current and passed revision for the `git`
repository containing the current directory in
https://en.wikipedia.org/wiki/Diff#Unified_format[*unified `diff` format*]
(e.g., `y_u_no.c`, "HEAD^^^^:i/c_u.no").
/---
function :difference_git_from_revision() {
    die_unless_arg 'Expected one git revision.'
    :die_unless_git
    command git show -- "${1}"
}

# ....................{ GREPPERS                           }....................
:func.doc <<'/---'
:full :grep_git_with_options(
    *:str git_grep_options :str pattern *:str globs)

Grep all files matching the passed glob expressions in the current directory and
all subdirectories of such directory in the `git` repository containing such
directory for files with lines matching the passed pattern with both the passed
and currently configured `git grep`-specific options (e.g.,
${ZY_OPTIONS_GIT_GREP}).

== Caveats ==

When only one argument is passed, this function implicitly interprets such
argument as a pattern by passing option `-e` prior to such pattern. When passing
multiple arguments, the caller _must_ explicitly pass such option prior to all
passed patterns.
/---
function :grep_git_with_options() {
    die_unless_args\
        'Expected optional "git grep" options, one pattern, and optional globs.'

    # If only one argument was passed, interpret such argument as a pattern.
    if { is_arg } {
        :arg.prepend '-e'
    }

    # Grep these files.
    run_code_with_options_configured\
        'run_code_paged command git grep' ZY_OPTIONS_GIT_GREP "${(q)@}"
}


:func.doc <<'/---'
:full :grep_git_root_with_options(
    *:str git_grep_options :str pattern *:str globs)

Grep all files matching the passed glob expressions in the `git` repository
containing the current directory for files with lines matching the passed
pattern with both the passed and currently configured `git grep`-specific
options (e.g., ${ZY_OPTIONS_GIT_GREP}).

== See Also ==

* :grep_git_with_options().
/---
function :grep_git_root_with_options() {
    die_unless_args\
        'Expected optional "git grep" options, one pattern, and optional globs.'

    # Grep these files.
    :store_git_dir_root
    :try{
        :grep_git_with_options "${@}"
    }:catch{
        restore_dir
    }:catch
}

# ....................{ PATCHES                            }....................
#FIXME: Hideously old-style. Revise for nebulous profit and fun.

:func.doc <<'/---'
:void :apply_git_patch_uri(+:str uris)

Temporarily download the passed URIs to local patch files, apply such files to
the local git repository containing the current directory, and remove all such
files that successfully applied to such repository.

For verification, all such files that failed to apply to such repository will be
locally preseved.
/---
function :apply_git_patch_uri() {
    die_unless_args 'Expected one or more patch URIs.'
    :str patch_dirname patch_filename

    ::set_git_globals:
    print_message "Applying remote patches to \"${GIT_ROOT}\"..."

    # Temporary directory to which such patches will be downloaded to.
    patch_dirname="$(make_dir_temporary)"

    :try{
        :str patch_uri patch_uri_basename
        for  patch_uri ("${@}") {
            # If such URI is prefixed by an unsupported protocol, throw an
            # exception.
            :is "${patch_uri}" == ('http'|'https'|'ftp')'://'* :si :or
                :die 'Patch URI "'${patch_uri}'" protocol unsupported (i.e., neither "http://", "https://", or "ftp://").'

            # If such URI is suffixed by a backslash, remove such character.
            remove_string_suffix patch_uri '/'

            # Temporary file to which such patch will be downloaded to.
            :set_string_to_path_basename patch_uri_basename "${patch_uri}"
            patch_filename="${patch_dirname}/${patch_uri_basename}"

            # Retrieve such URI to such file.
            :download_url_to_file "${patch_uri}" "${patch_filename}"

            # Apply such patch.
            print_message "Applying \"${patch_filename}\"."
            if { command git am "${patch_filename}" } {
                print_message "Removing \"${patch_filename}\"."
                remove_file "${patch_filename}"
            }
        }
    }:catch{
        # Remove such temporary directory and patch files.
        remove_path_recursive "${patch_dirname}"
    }:catch
}
