#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle `cpufrequtils`, a collection of CPU frequency scaling CLI utilities.
-/-

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_processor_governor(
    string governor_name,
    string error_message =
        "processor governor \"${governor_name}\" unavailable")

Throw an exception with the passed message unless the passed CPU governor
exists. See is_processor_governor() for further details.
/---
function die_unless_processor_governor() {
    die_unless_args_1_to_2\
        'expected one governor name and optional error message'
    string governor_name="${1}"
    is_governor_name "${governor_name}" or die\
        "${2:-processor governor \"${governor_name}\" unavailable}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_processor_governor(string governor_name)

Return success if the passed processor governor exists (i.e., if the current
kernel has builtin or module support for such governor).
/---
function is_processor_governor() {
   die_unless_arg 'expected one governor name'
   string governor_name="${1}" governor_names

   #FIXME: Extract into a new function get_processor_governors() listing such
   #governor names.
   governor_names="$(cpufreq-info -g)"
   is_string_pcre_matches "${governor_names}" "\b${governor_name}\b"
}

# ....................{ GETTERS                            }....................
#FIXME: Unsure what I was thinking with this function name. Rename post-haste to
#get_processor_index_governor(). Stop defaulting to "1", as well. There's little
#sense in such optional arguments, generally.
declare_function_with_stdin <<'/---'
string get_processor_governor(integer processor_index = 1)

Get the frequency scaling governor currently assigned to the processor with
the passed 1-based index (defaulting to 1, the first processor).
/---
get_processor_governor() {
    # Validate passed arguments.
    die_unless_args_0_to_1 'expected optional processor index'
    string processor_index="${1:-1}"
    die_unless_processor_index "${processor_index}"

    # Convert 1- to 0-based processor indices.
    (( processor_index-- ))

    #FIXME: It'd probably be slightly better to parse "cpufreq-info -o" instead.
    #Actually, it'd be *ALOT* better. This is hideously Linux-specific. Though,
    #to be far, so is "cpufreq", I think. In which case, perhaps this doesn't
    #matter at all... *shrug*

    # Print the contents of the corresponding pseudo-file.
    print_file_text\
        "/sys/devices/system/cpu/cpu${processor_index}/cpufreq/scaling_governor"
}

# ....................{ SETTERS                            }....................
#FIXME: I'm not fond of defaulting to all processors. We really want a separate
#new function set_processors_all_governor().
declare_function_with_stdin <<'/---'
string set_processor_governor(
    string processor_index1, string processor_index2, ...,
    string governor_name)

Set the processors with the passed 1-based indices (defaulting to all
available indices) to the passed processor governor (e.g., `ondemand`). Note
set_processor_frequency() implicitly resets the governor for such processors
to `userspace`, when called.
/---
function set_processor_governor() {
    # Pop off the passed governor name from the passed arguments.
    die_unless_args 'expected optional processor indices and one governor name'
    string governor_name="${@[-1]}"
    die_unless_processor_governor "${governor_name}"
    pop_arg

    # Default indices to all available.
    is_args or set_args $(get_processor_indices)

    # Set governors.
    string processor_index
    for    processor_index ("${@}") {
        # Validate the current processor index.
        die_unless_processor_index "${processor_index}"
        print_message_interactively\
            "setting processor ${processor_index} to governor \"${governor_name}\"..."

        # Convert 1- to 0-based processor indices.
        (( processor_index-- ))
        cpufreq-set -c ${processor_index} -g ${governor_name}
    }

    # If interactive, show the truth of all things.
    if { is_shell_interactive } { print_processor_scaling }
}

#FIXME: I'm not fond of defaulting to all processors. We really want a separate
#new function set_processors_all_frequency().
declare_function_with_stdin <<'/---'
string set_processor_frequency(
    string processor_index1, string processor_index2, ...,
    string frequency)

Set the processors with the passed 1-based indices (defaulting to all
available indices) to the passed human-readable frequency (e.g., `1.8GHz`)
under the `userspace` governor.
/---
function set_processor_frequency() {
    # See set_processor_governor() for details.
    die_unless_args 'expected optional processor indices and one frequency'
    string frequency="${@[-1]}"
    die_unless_string_glob_matches "${frequency}" '\d+(\.\d+)?[TGMK]?Hz'\
        "\"${frequency}\" not a valid CPU frequency (e.g., \"1.8GHz\")"
    pop_arg
    is_args_0 and set_args $(get_processor_indices)

    string processor_index
    for    processor_index ("${@}") {
        die_unless_processor_index "${processor_index}"
        print_message_interactively\
            "setting processor ${processor_index} to frequency \"${frequency}\"..."
        (( processor_index-- ))
        cpufreq-set -c ${processor_index} -f ${frequency}
    }

    if { is_shell_interactive } { print_processor_scaling }
}

# ....................{ PRINTERS                           }....................
#FIXME: I'm not fond of defaulting to all processors. We really want a separate
#new function print_processors_all_scaling(). In this case, the two
#implementations are entirely separate anyway.
declare_function_with_stdin <<'/---'
string print_processor_scaling(string processor_index)

Print a human-readable profile of frequency scaling (e.g., overclocking,
underclocking) for the processor with the passed 1-based index (defaulting to
all available indices).
/---
function print_processor_scaling() {
    # Validate sanity.
    die_unless_args_0_to_1 'expected optional processor index'
    string processor_index="${1:-}"

    # Handle previously updated standard output tracking.
    print_whitespace_if_needed

    # If a processor index was passed, output "cpufreq-info" without
    # intermediate "cpufreq-info -o" output. The latter accepts no "-c" argument
    # and hence does not apply, here.
    if { is_string_nonempty "${processor_index}" } {
        die_unless_processor_index "${processor_index}"
        command cpufreq-info -c "${processor_index}"
    # Capture "cpufreq-info" output. Since "cpufreq-info" sans options prefixes
    # output with a two-line header and since "cpufreq-info -o" yields a more
    # concise synopsis, sandwich the output of the latter between the header and
    # all remaining output of the former.
    } else {
        string output; output="$(cpufreq-info)"
#       get_string_lines "${output}" 1 2
        command cpufreq-info -o
        get_string_lines "${output}" 3 -1
    } | page_stdin

    # Update standard output tracking in preparation for subsequent handling.
    update_terminal_stdout_tracking
}

# --------------------( WASTELANDS                         )--------------------
#   is_args_0 and {
#       integer processor_count; processor_count="$(get_processor_count)"
#       set_args "$(list_ranging_integers 1 ${processor_count})"
#   }
#   string filename="/sys/devices/system/cpu/cpu${processor_index}"
#   print_file_text "${filename}"
