#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `pdftotext`, converting PDF files to plaintext.
/---

# ....................{ CONVERTERS                         }....................
#FIXME: "pdftotext" takes a large number of arguments. Add a new configuration
#file with such options and run "pdftotext" here under run_code_with_options().
#FIXME: If passed two arguments and the second such argument ends in anything
#other than ".pdf", interpret the latter as the target of a single conversion
#rather than a second PDF file to be converted.
#FIXME: After implementing all such improvements, enable:
#alias_cli_substitution {pdf}to{t}ext='convert_pdf_to_file_text'

:func.doc <<'/---'
void convert_file_pdf_to_text(string pathname1 = "$(get_dir)/*.pdf", ...)

Convert the passed PDF files (defaulting to all PDF files in the current
directory, if called directly from the command line) to text files containing a
facsimile of all text content in such PDF files. If such path is a:

* File, convert such PDF file to plaintext.
* Directory, convert all PDF files in such directory to plaintext.
/---
function convert_file_pdf_to_text() {
    # Validate sanity.
    die_unless_args 'Expected one or more pathnames.'

    # Convert such arguments.
    string filename
    for    filename ("${@}") {
        :die_unless_file_type_equals "${filename}" pdf
        die_unless_file "${filename}"
        command pdftotext -- "${filename}"
    }
}

# ....................{ GREP                               }....................
#FIXME: It'd be great to incorporate such functionality into the grep_path_*()
#family of functions. Ideally, such functions would implicitly *TEMPORARILY*
#convert all passed binary files to plaintext prior to grepping. (Naturally,
#this is probably a bad idea when operating recursively. Or perhaps not? I mean,
#as long as we output "grep" progress in real-time, it's hard to see any
#complaints. Right. Make it so, then!)

:func.doc <<'/---'
[stdout: string, status: boolean] grep_path_pdf(
    string pathname1 = "$(get_dir)/*.pdf", ...,
    string pattern)

Grep the passed PDF files (defaulting to all PDF files in the current directory,
if called directly from the command line) for text matching the passed `grep`
pattern.
/---
function grep_path_pdf() {
    # Validate sanity.
    if { :context.is_cli_func } {
        die_unless_args 'Expected optional filenames and one grep pattern.'

        # Default such arguments to all PDF files in the current directory.
        is_args_2_or_more or :args.set *.pdf "${1}"
    } else {
        die_unless_args_2_or_more\
            'Expected one or more filenames and one grep pattern.'
    }
    string pattern="${@[-1]}"
    pop_arg

    #FIXME: Ugh. Not quite right. If passed directories, we want to non-
    #recursively search such directories for PDF files. *sigh* This suggests a
    #preliminary loop initializing a "list filenames" with such files prior to
    #actually grepping such files here.

    string pathname basename
    for    pathname ("${@}") {
        # Silently skip non-PDF files.
        is "${filename}" == *.pdf si or continue

        #FIXME: Not right. It'd be much more helpful to colorfully prefix "grep"
        #output with the PDF filename, mimicing actual "grep" :str.output on files.
        basename="$(get_path_basename "${filename}")"
        print_message_heading "${basename}"

        #FIXME: Implement a new grep_stdin() function and pipe to such function
        #instead.

        # Grep this PDF file for such pattern.
        command pdftotext "${filename}" - | command grep "${pattern}"
    } | page_stdin
}

# --------------------( WASTELANDS                         )--------------------
#   list filenames; filenames=( "${@}" )
#   is_string_nonempty "${filenames[@]}" or filenames=( *.pdf )
#   echo "files: ${filenames[@]}"
        #FIXME: I'm fairly sure "pdftotext" outputs to a file in the current
        #directory rather than the parent directory as the passed file. If so,
        #default to:
        #
        #* If the parent directory of the passed file is writable, :str.output to a
        #  file with the same basename excluding ".pdf" under such directory.
        #* Else, omit the second argument as we currently do.
#grep_pdf_page() {
#    page grep_pdf "${@}"
#}

#       output_line_horizontal #"==============================================================================="
#       print_message "grepping \"${filename:t}\"..."
#   string pathname; pathname="${1:-$(get_dir)}"
#   if :is_file "${pathname}"
#   then pdftotext "${pathname}"
    #FIXME: This is demonstrably horrible. Zeshify.
#   else  # if is_dir "${pathname}"
#       interactively print_message "converting PDF files to plaintext in \"${dirname}\"..."
#       pushd "${dirname}"
#       find -iname '*.pdf' -exec pdftotext {} \;
#       popd
#   fi

#       interactively print_message "converting PDF files to plaintext in \"${dirname}\"..."
#       pushd "${dirname}"
#       find -iname '*.pdf' -exec pdftotext {} \;
#       popd

# ....................{ ALIASES                            }....................
#FIXME: It'd be far more elegant to rewrite grep_recursive() to manually
#reprint_warning over files rather than leverage the "--recry" option and, for each
#found PDF file, to call pdftotext() prior to calling grep on that file.
#Somewhat more work than I'm willing to invest in at the moment, however.
#alias grpdf="grep_pdf_page"

#   echo "grepping: ${filenames[@]}"
#FIXME: Obsolete.
#die "\"${filename}\" not a PDF file" #| "${PAGER}"
