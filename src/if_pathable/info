#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `info`, the CLI for the GNU info help system.
/---

# ....................{ ALIASES                            }....................
#FIXME: Shift to an "info"-specific configuration file.
#FIXME: Uncomment after we actually implement view_info_menu_with_options()!
#alias_cli_substitution {in}fo='view_info_menu_with_options'  #info --vi-keys'
alias_cli_abbreviation {in}fo{p}age='page_info_menu_recursive'

# ....................{ SHOWERS                            }....................
#FIXME: If "pinfo" is available, prefer that; else, default to "info". We'll
#probably want a new ${ZESHY_INFO_COMMAND_NAME} string global initialized on
#zeshy precompilation. (Err, where do we currently initialize ${PAGER}? It'd be
#nice to initialize ${ZESHY_INFO_COMMAND_NAME} there as well -- so long as we
#can do so without throwing an exception if no such command exists.)
#FIXME: We'll need to dynamically select the options global to use (e.g., if
#using "pinfo", we want to expand ZESHY_INFO_OPTIONS_PINFO; else
#ZESHY_INFO_OPTIONS_INFO). Not terribly difficult, thankfully. We do, however,
#need to do so both here and below. Hmm; perhaps we want to just copy either
#ZESHY_INFO_OPTIONS_PINFO or ZESHY_INFO_OPTIONS_INFO as appropriate into
#ZESHY_INFO_OPTIONS at zeshy precompilation time? Sounds good to me!

declare_function_with_stdin <<'/---'
string view_info_menu_with_options(
    string info_option1?, ...,
    string menu_name1, ...)

Display the contents of the passed `info` menu with the current user's preferred
`info` browser (e.g., `pinfo`) and the passed and currently configured options
for such browser. The first passed menu is the name of a **top-level `info`
menu** (i.e., a menu in the root `info` node `(dir)Top') and is mandatory. The
second optionally passed menu is the name of a menu in the first passed menu; the
third optionally passed menu is the name of a menu in the second passed menu; and
so forth, defining a path from the root node `(dir)Top' to the desired node.
/---
function view_info_menu_with_options() {
    #FIXME: Implement me! grep_path_with_options() would probably be a decent
    #starting place.
    :die
}

# ....................{ PAGERS                             }....................
declare_function_with_stdin <<'/---'
string page_info_menu_recursive(string menu_name1, ...)

Page the contents of the passed `info` menu and all submenus of such menu
through the current user's preferred pager (e.g., `less`) rather than the
current user's preferred `info` browser. This function is principally intended
for those who prefer `vi` to `emacs` key bindings, enabling browsing of `info`
documentation via `vi`-style pager key bindings rather than the customary
`emacs`-style `info` key bindings. See view_info_menu_with_options() for
further details.
/---
function page_info_menu_recursive() {
    die_unless_arg 'Expected one menu name and optional submenu names.'
    run_code_with_options_configured 'command info' ZESHY_INFO_OPTIONS\
        '--subnodes -o -' -- "${(q)@}"
}

# --------------------( WASTELANDS                         )--------------------
