#!/usr/bin/env zsh
# ====================[ font                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle X11 font caching.

# ....................{ PRINTERS                           }....................
declare_function '
string print_x_fonts(void)

Print a human-readable list of all fonts in the current user''s X11 font cache.
'
function print_x_fonts() {
    die_if_args
    run_command_paged fc-cat -rv
}

# ....................{ CACHERS                            }....................
declare_function '
void cache_x_font_dir(string dirname = "$(get_dir)")

Permanently add all fonts in the passed directory (defaulting to the current
working directory) to the current user''s X11 font cache.
'
function cache_x_font_dir() {
    # Validate passed arguments.
    die_unless_args_0_to_1 'expected optional font directory'
    string font_dir; font_dir="${1:-$(get_dir)}"
    die_unless_pathable mkfontdir
    die_unless_pathable mkfontscale
    die_unless_pathable xset

    # Temporarily change to such directory.
    set_dir "${font_dir}"

    {
        # Make cache files "fonts.dir" and "fonts.scale" in such directory.
        print_message "preparing \"${font_dir}\" for caching..."
        mkfontdir
        mkfontscale

        #FIXME: The repeated print_newline() pattern suggests an analogue to
        #print_heading() -- how about something resembling
        #print_message_grouped(). Of course, this suggests splitting a new
        #print_heading_grouped() from print_heading().

        # Add such directory to the font cache.
        print_newline
        print_message "caching \"${font_dir}\"..."
        xset fp+ "${font_dir}"

        # Update the font cache in a manner compatible with older systems.
        print_newline
        print_message 'updating "xset" font cache...'
        xset fp rehash

        # "fc-cache" is a dynamic alternative to the above. Older systems have no
        # "fc-cache" installed, however. For safety, do both.
        is_pathable fc-cache and {
            print_newline
            print_message 'updating "fc-cache" font cache...'
            run_command_as_superuser fc-cache -v
        }
    } always {
        pop_dir_stack_and_set_dir_to_top
    }
}

# --------------------( WASTELANDS                         )--------------------
#function add_x_font_cache_dir() {
#function add_dir_to_x_font_cache() {
    # If non-empty, this function pushed the passed directory onto the stack and
    # must thus pop it from the stack prior to returning
#   bool is_pushing_directory

    # Font directory to be cached.
#   if is_string_nonempty "${1}"; then
#       font_dir="${1}"
#       is_pushing_directory=1
#       set_dir "${font_dir}"
#   else
#       font_dir="${PWD}"
#   fi
