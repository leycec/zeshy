#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `bzip2`, a popular archival format and CLI utility for such format.
/---

#FIXME: This parcel is hideously outdated. No, really.
#FIXME: We should instead implement a new generalized head function working
#transparently on all compressed files -- not simply bzip2-compressed files.
#FIXME: Ditto for bzcat(). In fact, the prior generalization requires a
#generalized `bzcat` function as a dependency.

# ....................{ ALIASES                            }....................
#FIXME: Supplant options with "ZY_BZIP2_OPTIONS" and so on.
alias_cli_substitution bzip2='bzip2 --keep --best'
alias_cli_substitution bunzip2='bunzip2 --keep'
alias_cli_substitution bzcat='run_code_paged bzcat'
alias_cli_abbreviation bzhead='run_code_paged bunzip2_head'

# ....................{ DECOMPRESSORS                      }....................
#FIXME: Rename to get_file_text_lines_bunzip2() and switch the order of passed
#arguments. Honestly, though, we probably just want a more generalized
#get_file_text_lines() function whose behavior context-sensitively depends on
#the filetype of the passed file. Specifically, if such file:
#
#* Is *NOT* archived, defer to "head".
#* Else, defer to the "cat" equivalent for such archive type (e.g.,
#  "bzcat") and pipe such output to "head".
:func.doc <<'/---'
string bunzip2_head(
    string filename,
    string head_option1, string head_option2, ...)

Print the first portion of the passed bz2-compressed filename according to the
passed `head` options, defaulting to the first 1,000 file lines if no such
options are specified.
/---
function bunzip2_head() {
    # Validate passed arguments.
    die_unless_args 'expected at least a filename'
    string bz2_file="${1}"
    shift_arg

    #FIXME: Clearly, reimplement this in terms of run_code_with_options().
    # Strip such head.
    list head_options; head_options=( "${@}" )
    :str.is_nonempty "${head_options[@]}" or head_options=( '-1000' )
    bzcat "${bz2_file}" | head "${head_options[@]}"
}

# ....................{ COMPRESSORS                        }....................
#FIXME: This is pretty terrible, too. We should probably just entirely excise
#this (and hence this entire component) in favor of the existing make_archive().
:func.doc <<'/---'
void bzip2_path(string pathname)

Recursively bzip2 the passed pathname into an archive having the same name but
suffixed by `.tar.bz2` under the current pathectory.
/---
function bzip2_path() {
    die_unless_arg 'expected one pathname'
    archive_path "${1}" tar.bz2\
        tar '-cjvf' ''\
        tar '-tjvf' ''
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Obsolete.
# string bzcat_page(string bzcat_option1, string bzcat_option2, ...)
#
# Print the passed bz2-compressed filename under the current pager.
#bzcat_page() {
#    page bzcat "${@}"
#}
