#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle `screen`, a shell multiplexer.
/---

# ....................{ ALIASES                            }....................
#FIXME: Shift to a "screen"-specific config file. Since forcing option "-U" is
#terrible, I've temporarily disabled this. Shift such default to a proper list
#${ZY_OPTIONS_SCREEN}.

#alias_cli_substitution {sc}reen='screen -U'
alias_cli_abbreviation {sc}reen{r}eattach='reattach_screen_session'

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
integer get_screen_session_count(string session_name)

Get the number of `screen` sessions with the passed name.
/---
function get_screen_session_count() {
    die_unless_arg 'Expected one session name.'
    string session_name="${1}"

    #FIXME: Horrible. Use a glob.
    # Count matching sessions.
    command screen -list |
        get_string_pcre_multiline_match_count "^\.${session_name}[[:space:]]"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
string print_screen_sessions()

Print all `screen` sessions attached to the current user.
/---
function print_screen_sessions() {
    die_if_args
    command screen -list
}

# ....................{ MUNGERS                            }....................
:func.doc <<'/---'
void remove_screen_dead_sessions()

Remove all dead (i.e., destroyed, killed, zombie) `screen` sessions.
/---
function remove_screen_dead_sessions() {
    die_if_args
    string username; username=${1:-$(get_user)}

    # Remove such sessions. Avoid "screen -wipe" returning non-zero exit status
    # when no such sessions exist.
    { run_code_silent command screen -wipe } :=failure.ignore
}

:func.doc <<'/---'
void reattach_screen_session(string session_name)

Reattach (i.e., display) the passed (presumably currently detached) `screen`
session.
/---
function reattach_screen_session() {
    die_unless_arg 'Expected one screen session name.'
    command screen -d -a -A -r -- "${1}"
}

# ....................{ RUNNERS                            }....................
:func.doc <<'/---'
void screenify(string command_name, string command_arg1?, ...)

Screenify the passed command. Specifically:

* If a `screen` session with name the basename of the passed command is attached
  to the current user, reattach this session.
* Else, attach a new `screen` session with this name running this command.
/---
function screenify() {
    # Validate sanity.
    die_unless_args 'Expected one command name and optional arguments.'
    string command="${@}" session_name
    integer session_count
    session_name="$(get_path_basename "$(get_string_word "${command}" 1)")"

    # Locate "screen" and check whether or not a session already exists.
#   string screen=$(which_command screen)
    session_count="$(get_screen_session_count "${session_name}")"
#   print_message "session_count: ${session_count}"

    # screen's argument passing engine is a wee faulty. Order is important in
    # the argument list below, therefore.
    if (( session_count == 0 )) {
#       print_message_interactively "attaching ${session}..."
        command screen -m -fa -U -S "${session}" "${command}"
    } elif (( session_count == 1 )) {
#       print_message_interactively "reattaching ${session}..."
        command screen -d -a -A -r "${session}"
    } else {
        :die "${session_count} \"${session}\" screen sessions already started."
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: The current approach of individial functions accepting the user to run
#such function under as an optional argument is simply *HORRIBLE*. No, really.
#Extending this approach to the entire Zeshy codebase is the very definition of
#reductio ad absurdum. Instead, it should be the *CALLER'S* responsibility to
#call such functions under the desired users if they so choose. Undo this
#nonsense *IMMEDIATELY* please. (kthx.)

#FUXME: Unconvinced "reattach" is an appropriate verb here. How about simply
#"reattach", which is the verb most multiplexers use?
#       get_string_line_match_count "^.${session_name}[[:space:]]"
#   screen_session_count="$(run_code_as_user "${screen_username}" 'screen -list' | get_string_line_match_count ".${screen_session_name}[[:space:]]")"
    #FUXME: Call get_string_pcre_multiline_match_count() here rather than "grep".
#   screen_session_count="$(run_code_as_user "${screen_username}" "screen -list | grep --count '\.${screen_session}[[:space:]]'")"
