#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *USE flags* (i.e., Gentoo-specific lowercase words instructing ebuilds to
enable support for the corresponding feature). 
-/-

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_use_flag_valid(string use_flag)

Report success if the passed string is a syntactically valid USE flag
(regardless of whether any ebuild on the current system actually employs such
flag).
/---
function is_use_flag() {
    # While there appears to currently exist no formal constraints on USE flag
    # syntax, an informal survey of
    # "$(get_portage_home)/profiles/use."{,local.}desc" suggests the following.
    die_unless_arg 'Expected one USE flag.'
    is "${1}" == [a-z0-9_-]## si
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
void print_use_flags_matching_grep(string grep_pattern)

Print a human-readable synopsis of all USE flags matching the passed case-
insensitive `grep` pattern.
/---
function print_use_flags_matching_grep() {
    # Validate sanity.
    die_unless_arg 'Expected one grep pattern.'
    string use_flag="${1}"
    list use_flag_filenames

    # List of absolute paths of files describing USE flags.
    use_flag_filenames=( "$(get_portage_home)/profiles/use."{,local.}desc )

    # Grep such flags.
    {
        #FIXME: "euse" is an absolutely insane 1,300-line bash script (...yup).
        #Convert the relevant functionality for option "--info-installed" to
        #pure zeshy. Hey: you know you want to.

        # If "euse" is installed and such pattern is a syntactically valid USE
        # flag rather than a pattern, describe such flag with "euse".
        print_message_heading 'USE Flag Name Matches'
        if { is_use_flag_valid "${use_flag}" and is_pathable euse } {
            command euse --info-installed -- "${use_flag}"
        # Else, grep USE flag names for such pattern.
        } else {
            grep_path "${use_flag_filenames[@]}" ":${use_flag} - "
        }

        # If such pattern contains at least one PCRE-reserved character and
        # hence resembles a PCRE, grep USE flag descriptions for such pattern
        # "as is."
        print_message_heading 'USE Flag Description Matches'
        if { is_string_contains_characters_pcre  "${use_flag}" } {
            grep_path "${use_flag_filenames[@]}" "${use_flag}"
        # Else, grep USE flag descriptions for such flag at any position
        # *EXCEPT* where preceded by a colon, thus ignoring USE flag names.
        # Since punctuation often connotes pattern syntax conflicting with such
        # colon, this is only "safe" under patterns containing no punctuation.
        } else {
            grep_path "${use_flag_filenames[@]}" "[^:]${use_flag}"
        }
    } | page_stdin
}

# --------------------( WASTELANDS                         )--------------------
#declare_function_with_stdin <<'/---'
#void print_use_flag(string use_flag1, ...)
#
#Print a human-readable synopsis of the passed USE flags.
#/---
#function print_use_flag() {
#    # Validate sanity.
#    die_unless_args 'Expected one or more USE flags.'
#
#    # Prefer "euse" to manually grepping files.
#    {
#        print_message_heading 'USE flags'
#
#        string use_flag
#        for    use_flag ("${@}") {
#            if { is_pathable euse } {
#                command euse --info  "${use_flag}"
#            } else {
#                grep_path ":${use_flag} - "\
#                    "$(get_portage_home)/profiles/use."{,local.}desc
#            }
#        }
#    } | page_stdin
#}
