#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handling Gentoo overlays.

== Local Overlays ==

*Local overlays* (i.e., filesystem-based overlays specific to the current
system) may be added by manually editing `/etc/layman/layman.cfg`. Append an
entry to the `overlays` variable prefixed by `file:///` succeeded by the
absolute path to that overlay's `overlay.xml` file: e.g.,

.Local Overlays
==========================================
------------------------------------------
overlays  : http://www.gentoo.org/proj/en/overlays/repositories.xml
            http://gpo.zugaina.org/lst/gpo-repositories.xml
            file:///home/leycec/bash/raia-gentoo/overlay.xml
------------------------------------------
==========================================
-/-

#FIXME: Add support for Paludis-driven overlay management.

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] is_overlay_gentoo_command_pathable(void)

Report success if at least one command for managing overlays has been installed.
/---
function is_overlay_gentoo_command_pathable() {
    die_if_args
    is_pathable layman
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_overlay_gentoo(string overlay_name)

Print the passed currently added overlay. If such overlay has not yet been
added, an exception is thrown.
/---
function print_overlay_gentoo() {
    die_unless_arg 'Expected one overlay name.'
    die_unless_pathable layman
    command layman --info="${1}"
}

declare_function_with_stdin <<'/---'
string print_overlays_gentoo(void)

Print a human-readable synopsis of all currently added overlays.
/---
function print_overlays_gentoo() {
    # Validate sanity.
    die_if_args
    die_unless_pathable layman

    # Print such overlays.
    {
        print_message_heading 'Overlays Added'
        command layman --list-local

        print_message_heading 'Overlays (All)'
        command layman --list
    } | page_stdin
}

# ....................{ ADDERS                             }....................
declare_function_with_stdin <<'/---'
void add_overlay_gentoo(string overlay_name, integer priority = 50)

Add the passed overlay with the passed priority (defaulting to 50). If `ALL`,
add all addable overlays. By default, the global Portage tree has a priority
of -1000. Since higher priority overlays take precedence over lower priority
overlays, this implies overlays added with default precedence take precedence
over the global Portage tree -- usually (but not always) what you want.
/---
function add_overlay_gentoo() {
    die_unless_args_1_to_2 'Expected one overlay name and optional priority.'
    die_unless_pathable layman
    command layman --fetch --add="${1}" --priority="${2:-50}"
}

# ....................{ REMOVERS                           }....................
declare_function_with_stdin <<'/---'
void remove_overlay_gentoo(string overlay_name)

Remove the passed overlay from the current system. If such overlay is `ALL`,
remove all currently added overlays.
/---
function remove_overlay_gentoo() {
    die_unless_arg 'Expected one overlay name.'
    die_unless_pathable layman
    command layman --delete="${1}"
}

# ....................{ UPDATERS                           }....................
declare_function_with_stdin <<'/---'
void update_overlay_gentoo(string overlay_name)

Update the passed added overlay. If `ALL`, update all added overlays as under
update_overlays_gentoo().
/---
function update_overlay_gentoo() {
    die_unless_arg 'Expected one overlay name.'
    die_unless_pathable layman
    command layman --sync="${1}"
}

declare_function_with_stdin <<'/---'
void update_overlays_gentoo(void)

Update all added overlays and the list of addable overlays.
/---
function update_overlays_gentoo() {
    # "layman" fails with non-zero status if at least one overlay fails to
    # update. Since this routinely occurs (e.g., if a remote overlay is
    # temporarily unavailable), ignore such failure.
    die_if_args
    die_unless_pathable layman
    command layman --sync-all or ignore_failure
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to is_overlay_gentoo_command_pathable().
#FUXME: Globally rename "_overlay_gentoo" to "_overlay_gentoo", the canonical
#zeshy nomenclature for such concept.
#FUXME: Clumsy. Rename to is_overlay_gentoo_command().
#alias_cli_abbreviation {lay}man='layman'
#declare_function '
#string print_overlays_gentoo_all(void)
#
#Print all addable overlays (i.e., currently added or not).
#'
#function print_overlays_gentoo_all() {
#    die_if_args
#    run_code_paged layman --list
#}

# ....................{ UPDATERS ~ overlays                }....................
# void update_overlays_gentoo_if_possible(void)
#
# If at least one command for managing overlays has been installed, update all
# added overlays and the list of addable overlays.
#update_overlays_gentoo_if_possible() {
#    is_overlay_gentoo_command_pathable and update_overlays_gentoo
#}
