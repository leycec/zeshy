#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle `eix`, a Gentoo-specific CLI caching Portage metadata for efficient
ebuild querying and searching.
/---

#FIXME: It'd be great to also support "pkgcore", which appears to offer numerous
#improvements over "eix" (namely that "pkgcore" operates directly on the Portage
#tree). See: http://draketo.de/light/pkgcore-vs-eix-pix-find-packages-gentoo

# ....................{ ALIASES                            }....................
#FIXME: Shift to a new "if_installed/q" component. Also, this should be calling
#a new print_ebuild_files_installed:() function (or some such).
alias_cli_abbreviation {e}merge{q}uery{l}ist='run_code_paged qlist'

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] is_eix-sync_updating_overlays:(void)

Report success if `eix-sync` is configured to synchronize both the Portage tree
_and_ added overlays. Specifically, report success if the `eix-sync`
configuration file (e.g., `/etc/eix-sync.conf`) exists and contains single
character `*`.
/---
function is_eix-sync_updating_overlays:() {
    #FIXME: Incorrect. We actually need to grep such file for a line containing
    #only "*". Not terribly hard; we appear to lack such a function at the
    #moment, however. We'll simply need a new is_file_text_line_equals()
    #function.

    die_if_args
    is_file_text_equals "$(get_eix-sync_config_file:)" '*'
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_eix-sync_config_file:(void)

Get the absolute path of `eix`\'s  synchronization-specific configuration file
(e.g., `/etc/eix-sync.conf`).
/---
function get_eix-sync_config_file:() {
    die_if_args
    output_string '/etc/eix-sync.conf'
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_eix_settings(void)

Print a human-readable list of current `eix` settings, complete with comments.
/---
function print_eix_settings() {
    die_if_args
    command eix --dump | page_stdin
}

# ....................{ UPDATERS                           }....................
declare_function_with_stdin <<'/---'
void update_portage_with_eix(void)

Update the main Portage tree, all available overlays, and the `eix` cache with
new or revised ebuilds.
/---
function update_portage_with_eix() {
    # Validate sanity.
    die_if_args

    # If "eix" is *NOT* configured to synchronize added overlays and "layman" is
    # installed, synchronize such overlays with "layman".
    if { is_eix-sync_updating_overlays: and
         is_overlay_gentoo_command_pathable } {
        print_message_item 'Updating Portage overlays...'
        update_overlays_gentoo
    }

    # Update the main Portage tree and possibly all added overlays.
    print_message_item 'Updating Portage...'
    command eix-sync

    # Update the "eix" cache with all ebuilds in all overlays, added or not.
    if { is_overlay_gentoo_command_pathable } {
        print_message_item 'Caching remote Portage overlays...'
        command eix-remote update
    }
}

# --------------------( WASTELANDS                         )--------------------
# declare_function_with_stdin <<'/---'
# string print_eix_ebuild_matches_pcre(string pcre)
# 
# Print all ebuilds whose names and/or descriptions match the passed PCRE. This
# assumes a prior call to update_eix() has already created an `eix` cache.
# /---
# function print_eix_ebuild_matches_pcre() {
#     # Validate sanity.
#     die_unless_arg 'Expected one PCRE.'
#     string pcre="${1}"
#     list eix
# 
#     #FIXME: Replace with the customary call to
#     #run_code_with_options_configured().
# 
#     # Command line to be run. If attached to a terminal, force "eix" to display
#     # colors. Running under run_code_paged() wickedly seduces "eix" into believing
#     # that it's not attached to a terminal -- when, in fact, it is (by proxy of
#     # the pager paging its output).
#     eix=( command eix )
#     if { is_stdout_terminal } {
#         eix+='--force-color'
#     }
# 
#     # First search ebuild names; then, descriptions. Avoid throwing exceptions
#     # on failing to match either.
#     {
#         print_message_heading 'Ebuild Name Matches'
#         "${eix[@]}"    -- "${pcre}" or ignore_failure
# 
#         print_message_heading 'Ebuild Description Matches'
#         "${eix[@]}" -S -- "${pcre}" or ignore_failure
#     } | page_stdin
# }

    # Unless "/etc/eix-sync.conf" contains only "*", report false.
#FUXME: Rename to update_portage_eix().
#       print_message_heading "matching ebuild names matching \"${regex}\""
#       "${eix[@]}"    -- "${regex}" or true
#       print_message_heading "ebuild descriptions matching \"${regex}\""
#   boolean is_first_section_printed
#       is_first_section_printed=1
#   if is_string_nonempty "${is_first_section_printed}"
#   then interactively say_next_section  'updating portage'
#   else interactively say_first_section 'updating portage'
#   fi
    # Unless "/etc/eix-sync.conf" exists, return false.
#   eix_sync_filename="$(get_eix-sync_config_file:)"
#   is_file "${eix_sync_filename}" or report_failure

#   is "$(get_file_text "${eix_sync_filename}")" == '*' si
#   eix_sync_contents="$(get_file_text "${eix_sync_filename}")"
#   is "${eix_sync_contents}" == '*' si

    #FUXME: Add support for Paludis-driven overlay synchronization. This
    #suggests a new is_overlays_gentoo_supported() function returning true if
    #either "layman" or "cave" are installed.

    # If no ebuild name matches, attempt to match ebuild descriptions as a
    # desperate, doomed fallback.
