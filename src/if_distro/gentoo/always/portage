#!/usr/bin/env zsh
# ====================[ portage                            ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Portage, handling the Gentoo package repository.

# ....................{ ALIASES                            }....................
interactive_alias em='emerge'
interactive_alias emu='print_use_flags_matching'

# ....................{ GETTERS                            }....................
# char *get_portage_home(void)
#
# Get the absolute path of the top-level Portage directory (e.g.,
# "/usr/portage").
get_portage_home() {
    die_if_args
    portageq portdir
}

# char *get_portage_binary_packages_dir(void)
#
# Get the absolute path of the Portage directory storing binary packages (e.g.,
# "/usr/portage/packages").
get_portage_binary_packages_dir() {
    die_if_args
    portageq pkgdir
}

# char *get_portage_source_archives_dir(void)
#
# Get the absolute path of the Portage directory storing source archives (e.g.,
# "/usr/portage/distfiles").
get_portage_source_archives_dir() {
    die_if_args
    portageq distdir
}

# ....................{ PRINTERS                           }....................
# void print_use_flag(char *use_flag_name)
#
# Print all descriptions for the passed USE flag.
print_use_flag() {
    # Localize passed arguments.
    die_unless_one_arg 'expected one USE flag'
    string use_flag="${1}"

    # Prefer "euse" to manually grepping files.
    if is_installed euse
    then euse --info "${use_flag}"
    else grep_path_caselessly "${use_flag} - "\
        "$(get_portage_home)"/profiles/use.{,local.}desc
    fi
}

# void print_use_flags_matching(char *grep_pattern)
#
# Print all descriptions for USE flags matching the passed "grep" pattern.
print_use_flags_matching() {
    # Localize passed arguments.
    die_unless_one_arg 'expected one pattern'
    grep_path_caselessly "${1}"\
        "$(get_portage_home)"/profiles/use.{,local.}desc
}

# ....................{ UPDATERS                           }....................
# void update_gentoo(void)
#
# Update all currently installed packages in the "world" package set (i.e.,
# the set of all packages explicitly installed at the command line) and
# transitive dependencies of such packages.
update_gentoo() {
    #FIXME: It'd be nice to check the mtime of "$(get_portage_home)" and if
    #older than, say, 6 hours (seems reasonable, a quarter of a day), then
    #implicitly force a Portage update. That's pretty much what one always wants
    #to happen, anyway, so...
    die_if_args
    interactively utter\
        'consider first synchronizing Portage with "update_portage".'

    # Update packages with updated ebuilds.
    interactively utter_first_section 'updating world...'
    emerge --update --deep --newuse world

    # Update packages with reverse dependencies broken by the prior update
    # (i.e., packages dynamically linked to versioned shared libraries updated
    # and hence since removed by the prior update).
    interactively utter_next_section 'updating broken reverse dependencies...'
    revdep-rebuild

    # Update shell variables.
    interactively utter_next_section 'updating shell environment...'
    env-update
    source /etc/profile

    # Update configuration files.
    interactively utter_next_section 'updating configuration files...'
    dispatch-conf
}

# void update_portage(void)
#
# Update the main Portage tree and all currently added overlays. Unlike
# update_gentoo(), update no packages -- just ebuilds.
update_portage() {
    die_if_args

    # Prefer "eix-sync" to "emerge". If installed, the former subsumes the
    # latter *AND* updates the "eix" cache.
    interactively utter_first_section 'updating portage...'
    if is_installed eix
    then eix-sync
    else emerge --sync
    fi

    #FIXME: This appears to take an effectively infinite amount of time with no
    #appreciable output. I can't be bothered to debug it, at the moment. So...
    # Update the metadata cache with the contents of updated overlays.
#   interactively utter_next_section 'updating portage metadata...'
#   egencache --update
}

# --------------------( WASTELANDS                         )--------------------
    # Update ebuilds.
#   update_portage

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#
# Copyright 2007-2012 by Cecil Curry.
#
#   http://www.raiazome.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
