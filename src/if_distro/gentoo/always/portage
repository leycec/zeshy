#!/usr/bin/env zsh
# ====================[ portage                            ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Handle Portage, the Gentoo package repository.

# ....................{ ALIASES                            }....................
interactive_abbreviation {em}erge='emerge'
interactive_abbreviation {em}erge{w}orld='emerge_world'
interactive_abbreviation {em}erge{p}ortage='emerge_portage'
interactive_abbreviation {e}merge{q}uery{u}se='print_use_flags_matching'

# ....................{ GETTERS                            }....................
# string get_portage_home(void)
#
# Get the absolute path of the top-level Portage directory (e.g.,
# "/usr/portage").
get_portage_home() {
    die_if_args
    portageq portdir
}

# string get_portage_binary_packages_dir(void)
#
# Get the absolute path of the Portage directory storing binary packages (e.g.,
# "/usr/portage/packages").
get_portage_binary_packages_dir() {
    die_if_args
    portageq pkgdir
}

# string get_portage_source_archives_dir(void)
#
# Get the absolute path of the Portage directory storing source archives (e.g.,
# "/usr/portage/distfiles").
get_portage_source_archives_dir() {
    die_if_args
    portageq distdir
}

# ....................{ PRINTERS                           }....................
# void print_use_flag(string use_flag_name)
#
# Print all descriptions for the passed USE flag.
print_use_flag() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one USE flag'
    string use_flag="${1}"

    # Prefer "euse" to manually grepping files.
    if is_installed euse
    then euse --info "${use_flag}"
    else grep_path_caselessly "${use_flag} - "\
        "$(get_portage_home)/profiles/use."{,local.}desc
    fi
}

# void print_use_flag_matches(string grep_pattern)
#
# Print all descriptions for USE flags matching the passed "grep" pattern.
print_use_flag_matches() {
    # Validate passed arguments.
    die_unless_one_arg 'expected one grep pattern'
    grep_path_caselessly "${1}"\
        "$(get_portage_home)/profiles/use."{,local.}desc
}

# ....................{ EMERGERS                           }....................
# void emerge_portage(void)
#
# Update the main Portage tree and all added overlays with new ebuilds. Unlike
# update_gentoo, this only updates rather than installing such ebuilds.
emerge_portage() {
    # Validate passed arguments.
    die_if_args

    # Prefer "eix-sync" to "emerge". If installed, the former subsumes the
    # latter and updates the more efficient (and hence preferable) "eix" cache.
    if is_installed eix
    then update_eix
    # Otherwise, update only the main Portage tree and possibly added overlays.
    else
        interactively say_first_section 'updating portage'
        emerge --sync

        is_gentoo_overlay_command_installed and {
            interactively say_next_section 'updating overlays'
            update_gentoo_overlays
        }
    fi

    #FIXME: This appears to take an effectively infinite amount of time with no
    #appreciable output. I can't be bothered to debug it, at the moment. So...
    # Update the metadata cache with the contents of updated overlays.
#   interactively say_next_section 'updating portage metadata...'
#   egencache --update
}

# void emerge_world(void)
#
# Update all currently installed packages in the "world" package set (i.e.,
# the set of all packages explicitly installed at the command line) and
# transitive dependencies of such packages.
emerge_world() {
    #FIXME: It'd be nice to check the mtime of "$(get_portage_home)" and if
    #older than, say, 6 hours (seems reasonable, a quarter of a day), then
    #implicitly force a Portage update. That's pretty much what one always wants
    #to happen, anyway, so... **YES** ~ make this happen, please!
    # Validate passed arguments.
    die_if_args
    interactively say\
        'consider first synchronizing Portage with "update_portage"'

    # Update packages with updated ebuilds.
    interactively say_first_section 'updating world'
    emerge --update --deep --newuse world

    # Update packages with reverse dependencies broken by the prior update
    # (i.e., packages dynamically linked to versioned shared libraries updated
    # and hence since removed by the prior update).
    interactively say_next_section 'updating broken reverse dependencies'
    revdep-rebuild

    # Update shell variables.
    interactively say_next_section 'updating shell environment'
    env-update
    source /etc/profile

    # Update configuration files.
    interactively say_next_section 'updating configuration files'
    dispatch-conf
}

# --------------------( WASTELANDS                         )--------------------
#   interactively say_first_section 'updating portage...'
    # Update ebuilds.
#   update_portage
