#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *Gentoo ebuild printers* (i.e., functions printing ebuild metadata).
/---

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_ebuild(string ebuild_name)

Print a human-readable synopsis of the passed ebuild.
/---
function print_ebuild() {
    #FIXME: Should call a newly defined die_unless_ebuild() to verify such
    #ebuild actually exists. Shouldn't be terribly difficult, but I wonder what
    #the most efficient way to do so is? Naturally, call such function
    #everywhere an ebuild name is passed below.

    # Validate sanity.
    die_unless_arg 'Expected one ebuild name.'
    string ebuild_name="${1}"

    # Print such ebuild.
    {
        print_ebuild_use_flags:           "${ebuild_name}"
        print_ebuild_dependencies_direct: "${ebuild_name}"
        print_ebuild_metadata:            "${ebuild_name}"
        print_ebuild_changes_latest:      "${ebuild_name}"
        print_ebuild_installed_paths:     "${ebuild_name}"
    } | page_stdin
}

# ....................{ PRINTERS ~ changes                 }....................
declare_function_with_stdin <<'/---'
string print_ebuild_changes_latest:(string ebuild_name)

Print a human-readable synopsis of the passed ebuild's *latest changes* (i.e.,
most recently recorded ChangeLog entries).
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
# If "equery" is pathable, prefer such command.
if { is_pathable equery } {
    function print_ebuild_changes_latest:() {
        die_unless_arg 'Expected one ebuild name.'
        string ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Changes (Latest)"
            command equery --no-pipe changes "${ebuild_name}"
        } | page_stdin
    }
} else {
    function print_ebuild_dependencies_direct:() {
        die '"equery" not installed.'
    }
}

# ....................{ PRINTERS ~ dependencies            }....................
declare_function_with_stdin <<'/---'
string print_ebuild_dependencies_direct:(string ebuild_name)

Print a human-readable synopsis of the passed ebuild's *direct dependencies*
(i.e., all ebuilds such ebuild explicitly depends upon).
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
# If "equery" is pathable, prefer such command.
if { is_pathable equery } {
    function print_ebuild_dependencies_direct:() {
        die_unless_arg 'Expected one ebuild name.'
        string ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Dependencies (Direct)"
            command equery --no-pipe depgraph --depth=1 "${ebuild_name}"
        } | page_stdin
    }
} else {
    function print_ebuild_dependencies_direct:() {
        die '"equery" not installed.'
    }
}

# ....................{ PRINTERS ~ metadata                }....................
declare_function_with_stdin <<'/---'
string print_ebuild_metadata:(string ebuild_name)

Print a human-readable synopsis of the passed ebuild's *metadata* (i.e., the
contents of the `metadata.xml` file in the directory containing such ebuild).
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
# If "equery" is pathable, prefer such command.
if { is_pathable equery } {
    function print_ebuild_metadata:() {
        die_unless_arg 'Expected one ebuild name.'
        string ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Metadata"
            command equery --no-pipe meta "${ebuild_name}"
        } | page_stdin
    }
} else {
    function print_ebuild_metadata:() {
        die '"equery" not installed.'
    }
}

# ....................{ PRINTERS ~ path                    }....................
declare_function_with_stdin <<'/---'
string print_ebuild_installed_paths:(void)

Print a human-readable synopsis of all files and directories currently installed
by the passed ebuild.
/---
# If "equery" is pathable, prefer such command to "qfile".
if { is_pathable equery } {
    function print_ebuild_installed_paths:() {
        die_unless_arg 'Expected one ebuild name.'
        string ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" Installed Paths"
            command equery --no-pipe files --tree "${ebuild_name}"
        } | page_stdin
    }
# Else, define such function to fail.
} else {
    function print_ebuild_installed_paths:() {
        die '"equery" not installed.'
    }
}

declare_function_with_stdin <<'/---'
string print_ebuilds_installing_path(string pathname)

Print all ebuilds installing into the passed path. If such path is a file, print
only the single ebuild installing such file; else, print all ebuilds installing
at least one file to such directory.
/---
# If "equery" is pathable, prefer such command to "qfile".
if { is_pathable equery } {
    function print_ebuilds_installing_path() {
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # Synchronize with below.
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        # Validate sanity.
        die_unless_arg 'Expected one pathname.'
        string pathname="${1}"

        # If no such path exists, attempt to find a command with such name.
        is_path "${pathname}" or pathname="$(get_pathable_path "${pathname}")"

        # Since "equery" fails to print a helpful message until after its
        # search concludes, do so *BEFORE* searching.
        {
            print_message_heading "Ebuilds Installing \"${pathname}\""
            command equery --no-pipe belongs "${pathname}"
        } | page_stdin
    }
# Else if "qfile" is pathable, fallback to such command.
} elif { is_pathable qfile } {
    function print_ebuilds_installing_path() {
        die_unless_arg 'Expected one pathname.'
        string pathname="${1}"
        is_path "${pathname}" or pathname="$(get_pathable_path "${pathname}")"
        {
            print_message_heading "Ebuilds Installing \"${pathname}\""
            command qfile "${pathname}"
        } | page_stdin
    }
# Else, define such function to fail.
} else {
    function print_ebuilds_installing_path() {
        die 'Neither "equery" or "qfile" installed.'
    }
}

# ....................{ PRINTERS ~ pcre                    }....................
declare_function_with_stdin <<'/---'
string print_ebuilds_matching_pcre:(string pcre)

Print all ebuilds with package names or descriptions matching the passed PCRE.
If `eix` is pathable, this function defers to such command for efficiency.
(Naturally, this assumes that a prior call to update_eix() has already created
an `eix` cache of the local Portage tree). Else, this function inefficiently
falls back to `emerge`-based searching.
/---
# If "eix" is installed, prefer such command.
if { is_pathable eix } {
    function print_ebuilds_matching_pcre:() {
        # Validate sanity.
        die_unless_arg 'Expected one PCRE.'
        string pcre="${1}"
        list eix eix_compact

        #FIXME: Replace with the customary call to
        #run_code_with_options_configured().

        # Command line to be run for customary output.
        eix=( command eix )

        # If standard output for the current shell is a terminal, force "eix" to
        # display colors. When piped and hence run under a subshell, "eix"
        # incorrectly assumes its output to be parsed by non-interactive scripts
        # rather than printed to an interactive terminal.
        if { is_stdout_terminal } {
            eix+='--force-color'
        }

        # Command line to be run for compact output.
        eix_compact=( "${eix[@]}" --compact )

        # Search ebuild names and then descriptions. Avoid throwing exceptions
        # on failing to match either.
        {
            print_message_heading "Ebuild Names Matching /${pcre}/"
            "${eix_compact[@]}" -- "${pcre}" or ignore_failure
            output_newline
            "${eix[@]}"         -- "${pcre}" or ignore_failure

            print_message_heading "Ebuild Descriptions Matching /${pcre}/"
            "${eix_compact[@]}" -S -- "${pcre}" or ignore_failure
            output_newline
            "${eix[@]}"         -S -- "${pcre}" or ignore_failure
        } | page_stdin
    }
# Else if "equery" is installed, fallback to such command.
} elif { is_pathable equery } {
    function print_ebuilds_matching_pcre:() {
        # Validate sanity.
        die_unless_arg 'Expected one PCRE.'
        string pcre="${1}"

        # First search ebuild names; then, descriptions. Avoid throwing exceptions
        # on failing to match either.
        {
            print_message_heading "Ebuild Names Matching /${pcre}/"
            command equery --no-pipe list --full-regex --portage-tree --\
                "${pcre}"
        } | page_stdin
    }
# Else, defer to "emerge".
} else {
    function print_ebuilds_matching_pcre:() {
        # Validate sanity.
        die_unless_arg 'Expected one PCRE.'
        string pcre="${1}"

        # Encourage the current user to install "eix", instead.
        print_warning\
            '"eix" not installed. Deferring to inefficient "emerge"-based searching.'

        # Force interpretation of the passed pcre as a regular expression by
        # prefixing such pcre with "%". Avoid passing option "--searchdesc",
        # as regular expressions tend to play poorly with ebuild descriptions.
        {
            print_message_heading "Ebuild Names Matching /${pcre}/"
            command emerge --search -- "%${pcre}"
        } | page_stdin
    }
}

# ....................{ PRINTERS ~ use                     }....................
declare_function_with_stdin <<'/---'
string print_ebuild_use_flags:(string ebuild_name)

Print a human-readable synopsis of all USE flags used by the passed ebuild.
/---
#FIXME: Any other utilities capable of displaying such data? Google us up.
#Ah, yes. We could, of course, simply grep
#"/usr/portage/profiles/use.local.desc" for the program name. That gets us
#USE flag descriptions only for main tree ebuilds, however. But... *shrug*
# If "equery" is pathable, prefer such command.
if { is_pathable equery } {
    function print_ebuild_use_flags:() {
        die_unless_arg 'Expected one ebuild name.'
        string ebuild_name="${1}"
        {
            print_message_heading "\"${ebuild_name}\" USE Flags"
            command equery --no-pipe uses "${ebuild_name}"
        } | page_stdin
    }
} else {
    function print_ebuild_use_flags:() {
        die '"equery" not installed.'
    }
}

# ....................{ WASTELANDS                         }....................
 # Sadly, "equery" offers insufficient
        # options for running under run_code_paged(). Attempting to do so, even after
        # passing "--no-pipe", causes "equery" to squelch all colors. Hence, run
        # "equery" as is and require the user to manually page if needed.
 # for user it's not
        # attached to a terminal -- when, in fact,
        # it is (by proxy of the pager paging its output)
    # function print_ebuilds_matching_pcre:() {
    #     # Validate sanity.
    #     die_unless_arg 'Expected one PCRE.'
    #     string pcre="${1}"

    #     # Prefer "eix" to "emerge". In fact, if "eix" is not installed, print a
    #     # warning strongly suggesting doing so.
    #     if { is_pathable eix } {
    #         print_eix_ebuild_matches_pcre "${pcre}"
    #     } else {
    #         print_warning\
    #             '"eix" not installed. Deferring to inefficient "emerge"-based searching...'

    #         # Force interpretation of the passed pcre as a regular expression by
    #         # prefixing such pcre with "%". Avoid passing option "--searchdesc",
    #         # as regular expressions tend to play poorly with ebuild descriptions.
    #         command emerge --search -- "%${pcre}" | page_stdin
    #     }
    # }

#   if not is_path "${pathname}"; then
#       noop
#       pathname="$(get_pathable_path "${pathname}")"
#   fi

    #FUXME: Well, we tripped across our first zsh error. It was bound to happen.
    #I'm inclined to let it lie for a bit. (Laziness.) If this ever bites us
    #again (...and it will), post a bug report. Here's how it triggers: the
    #*FIRST* statement in an "if" block has no ZERR testing done for it. This is
    #easy to verify. All subsequent statements and statements *NOT* in "if"
    #blocks do have ZERR testing done. I assume zsh internally optimizes single-
    #statement "if" blocks to "||" commands, in which case ZERR would indeed not
    #apply. Well, it's merely a supposition. Correcting this is as simple as
    #prefixing the previously first statement with noop().
    #if not is_path "${pathname}"; then
    #    noop
    #    pathname="$(get_pathable_path "${pathname}")"
    #fi


#   print_message "making manifest \"${ebuild_filename}\" manifest..."
    # Since the ebuild name and version are split by hyphen and such
    # versions never contain hyphens, splitting on the last hyphen suffices to
    # split ebuild names from versions. Luckily, the "sort" command implements
    # such sorting for us via option "-V".
        # If the "sort" command supports option "-V", run "sort".
#       if run_code_silent 'print 1 | sort -V -'
#       then ebuild_filename="$(join_list_to_lines ebuild_filenames | sort -V -)"
        # Otherwise, default to lexicographic order.
#       else ebuild_filename="${ebuild_filenames[-1]}"
#       fi
