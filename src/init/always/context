#!/usr/bin/env zsh
# ====================[ context                            ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# ZeshyInit Context, contextualizing the shell environment by:
#
# * Autoloading all autoloadable functions bundled with Zsh itself.
# * Loading all useful third-party modules bundled with Zsh itself.
# * Setting Zsh shell options to useful defaults.

# ....................{ AUTOLOADS                          }....................
# Automatically recompile all compiled files in function path "${FPATH}" whose
# corresponding uncompiled files have since changed.
autoload -U zrecompile; zrecompile -p

# Autoload all autoloadable files in function path "${FPATH}", eliminating the
# need to manually load such files prior to use (e.g., "zsh-mime-setup" rather
# than "autoload -U zsh-mime-setup; zsh-mime-setup"). Dismantled, this is:
#
# * "fpath", the list of all directories with autoloadable files.
# * "^", iteratively expanding to each such directory.
# * "/*", each immediate file and subdirectory of such directory.
# * "N", ignoring non-extant files and subdirectories.
# * ".", excluding subdirectories.
# * ":t", the tail (i.e., basename) of such file.
#
# This matches all basenames of immediate files of directories in the function
# path. (Since this is also the set of all autoloadable function names,
# autoloading such basenames autoloads all autoloadable functions.) Oh!
for autoloadable_function_name in ${^fpath}/*(N.:t); do
#   print "autoloading \"${autoload_function_name}\"..."
    
    # Autoload this autoloadable function, suppressing alias expansion until
    # the the first call of such function with option "-U".
    autoload -U "${autoloadable_function_name}"
done

# ....................{ MODULES                            }....................
#FIXME: Hmm; these should be autoloaded, no?

# Zsh modules are C-implemented shared libraries optionally loadable at runtime.
# Zeshy loads the following Zsh modules by default, due to their common
# helpfulness.

# Stat module wrapping the stat() system call with the zstat() Zsh function. Do
# not load this module via "zmodload zsh/stat", as that wraps the stat() system
# call with a stat() Zsh function, conflicting with the "stat" command.
zmodload -F zsh/stat b:zstat

# Math module. While Zsh provides rudimentary math functionality out of the box,
# some pivotal functions (e.g., exponentiation) are only provided by this.
zmodload zsh/mathfunc

# Module exposing Zsh's C-based internal dictionaries as Zsh-based associative
# arrays, including:
#
# * "$funcstack", having the current function call stack for user inspection.
# * "$functions", having the current set of all functions for redefinition and
#   later restoration of differing function definitions.
zmodload zsh/parameter

# Perl-Compatible Regular Expression (PCRE) module. Note that, although
# enabling the "rematch_pcre" option below implicitly loads this module on the
# first use of the "=~" operator in a test, all code prior to that will not
# have access to methods exposed by this module. Thus, simply import it
# explicitly.
#
# See "String matching" below for use notes.
zmodload zsh/pcre

# Utility module adding additional built-ins, including the commonly called
# "zformat", "zparseopts", and "zstyle" functions.
zmodload zsh/zutil

# ....................{ OPTIONS                            }....................
# Command history.
setopt appendhistory     # share history between multiple ZSH sessions
setopt extendedhistory   # save timestamps in history
setopt histignorealldups # don't ignore dups in history
setopt histignoredups    # ignore consecutive dups in history
setopt histnostore       # don't store history related functions
setopt incappendhistory  # incrementally add items to history

# Path changing.
setopt autocd            # automatically cd to a directory if not cmd
setopt autopushd         # automatically pushd directories on dirstack
setopt pushdignoredups   # don't push dups on stack
setopt pushdsilent       # be quiet about pushds and popds

# File globbing.
setopt nocaseglob        # glob case-insensitively, as this is usually desirable
setopt extendedglob      # enable extended globbing (#, ~, ^)
setopt globdots          # ???
setopt no_nomatch        # don't print errors on non-matching globs

# I/O.
setopt interactivecomments  # allow '#' comments in interactive commands
setopt noflowcontrol     # don't use flow control (^S/^Q)
setopt printeightbit     # allow eight bit output for completion lists

# Process control.
setopt longlistjobs      # list jobs in long format
setopt nonotify          # report job status only before prompt printing

# Prompt.
#
# Enable variable substitution in prompt definitions. This dynamically re-
# expands each prompt definition and variables referenced in that definition
# immediately prior to displaying that prompt; by default, on the other hand,
# Zsh statically caches the expansion of each prompt definition for quick re-
# use when displaying those prompts. (While marginally faster, the latter is
# remarkably less useful as it requires redefining and exporting a prompt to
# alter the display of that prompt.)
setopt prompt_subst

# String matching.
#
# This enables Perl-Compatible Regular Expression (PCRE) matching via the "=~"
# test operator, by implicitly loading the "zsh/pcre" module when requested.
# This module matches the entire match into "${MATCH}" and each group match
# into array elements of "${match[@]}" where the first match is "${match[1]}".
# For additional documentation on the "zsh/pcre" module, see:
# http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#SEC192
#
# Note that traditional glob matching is always available via the "==" test
# operator: e.g.,
#     [[ $(whence -cp fahey) == *" not found" ]] && echo "Farewell."
setopt rematch_pcre      # prefer Perl-Compatible Regular Expression matching

# Tab completion.
setopt automenu          # use menu completion after 2 tabs
setopt completeinword    # complete inside words
setopt nolistambiguous   # only list matches if ambiguous

# Variable expansion.
#
# Enforce strictness for safety as under conventional high-level languages.
setopt nounset           # attempting to expand unset parameters raises an error
setopt warn_create_global # attempting to set untyped parameters raises an error

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
