#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *string setters* (i.e., functions setting the values of string
variables).
/---

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_string_if_empty_to_string(string string_name, string text)

Set the passed string variable if unset or empty to the passed string: e.g.,

.set_string_if_empty_to_string()
==========================================
[source]
------------------------------------------
>>> :string on_dmt on_the_chrysanthemum=\
...    "A complete rupture of the mundane plane. And you fall back into this
...     hallucinogenic space. And what you see is a slowly rotating red and
...     orange kind of thing, which over the years we've nicknamed \"The
...     Chrysanthemum.\" And this represents some kind of disequilibrium state
...     that has its roots in the synapses. What's happening as you're watching
...     this Chrysanthemum is that millions and then hundreds of millions of
...     DMT molecules are rushing into these serotonin bond sites in the
...     synaptic cleft and disrupting the serotonin and switching the electron
...     spin resonance signature of these neural junctions in this \"other\"
...     direction... And then, if you've taken enough DMT, something happens
...     for which there are no words. A membrane is rent, and you are propelled
...     into this \"place.\" And language cannot describe it accurately.
...     Therefore I will inaccurately describe it. The rest is now lies."
>>> set_string_if_empty_to_string "${on_dmt}" "${on_the_chrysanthemum}"
>>> get_string_line "${on_dmt}" 1
A complete rupture of the mundane plane. And you fall back into this
------------------------------------------
==========================================
/---
function set_string_if_empty_to_string() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one string.'
    :string string_name__ssiets="${1}"
    die_unless_string "${string_name__ssiets}"

    # Set such string.
    noop "${(P)string_name__ssiets:=${2}}"
}

# ....................{ SETTERS ~ evaluation               }....................
# There exists no corresponding set_string_if_unset_to_evaluation() function,
# as functions cannot declare local variables in the caller's context. Sadly,
# such function cannot reasonably be implemented as an alias, due to awkwardness
# in herestring-based calling conventions under two or more arguments.

#FIXME: Rename to :set_string_to_code().
#FIXME: Hmm; shouldn't this function instead set such string as follows:
#
#   eval 'noop ${'${string_name__sste}'::='${evaluation__sste}'}'
#
#This should be far safer, as there's no need for the caller to quote-protect
#double quotes in such string. They *WILL* need to quote-protect "}" characters,
#but they'd have to so that anyway under the current implementation. Reimplement
#as above and note such caveat.

declare_function_with_stdin <<'/---'
void set_string_to_evaluation(string string_name, string code)

Set the passed string variable to the dynamic expansion of the passed code in a
*double-quoted context* (i.e., as `"${expression}"`): e.g.,

.set_string_to_evaluation()
==========================================
[source]
------------------------------------------
>>> :string on_tykes on_elves=\
...    "You burst into this space. It's lit, socketed lighting, some kind of
...     indirect lighting you can't quite locate. But what is astonishing and
...     immediately riveting is that in this place there are entities. There
...     are these things, which I call \"self-transforming machine elves.\" I
...     also call them \"self-dribbling basketballs.\" They are, but they are
...     none of these things. I mean, you have to understand: these are
...     metaphors in the truest sense, meaning they're lies! It's a jeweled
...     self-transforming basketball, a machine elf. I name them \"Tykes\",
...     because tyke is a word that means to me a small child. And I was
...     fascinated by the 54th fragment of Heraclitis where he says: \"The
...     Aeon is a child at play with colored balls." And when you burst into the
...     DMT space, this is the Aeon: it's a child, and it's at play with colored
...     balls, and I am in eternity, apparently, in the presence of this thing."
>>> set_string_to_evaluation "${on_tykes}" '$(output_string "${on_elves}")'
>>> get_string_line "${on_tykes}" 8
self-transforming basketball, a machine elf. I name them "Tykes",
------------------------------------------
==========================================
/---
function set_string_to_evaluation() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one statement.'
    :string string_name__sste="${1}" evaluation__sste="${2}"
    :die_unless_var_string "${string_name__sste}"

    # Set such string.
    eval ${string_name__sste}'="'${evaluation__sste}'"'
}

#FIXME: Rename to :set_string_if_empty_to_code_expanded().
declare_function_with_stdin <<'/---'
void set_string_if_empty_to_evaluation(string string_name, string code)

Set the passed string variable if unset or empty to the dynamic evaluation of
the passed code in a double-quoted context. See set_string_to_evaluation() for
further details: e.g.,

.set_string_if_empty_to_evaluation()
==========================================
[source]
------------------------------------------
>>> :string on_lesser_lights on_faberge_eggs=\
...    "And then they proceed to sing objects into existence. Amazing objects.
...     Objects that are FabergÃ© Eggs. Things made of pearl, and metal, and
...     glass, and gel, and you. When you're shown one of these things, a single
...     one of them, you look at it. And you know without a shadow of a doubt,
...     in the moment of looking at this thing, that if it were right here,
...     right now, this world would go mad. It's like something from another
...     dimension. It's like an artifact from a flying saucer. It's like
...     something falling out of the mind of God. Such objects do not exist in
...     this universe. And yet you're looking at it. And they're clamoring for
...     your attention. \"Look at this! Look at this! Look at THIS!\" And they
...     pull these things. And each one, you look into it and it begins to open
...     into this wonder that you must fight. You say: \"No, don't look at it!
...     Look away from it! Because it's so wonderful that it's swamping my
...     objectivity and destroying my ability to function in this space.\""
>>> set_string_if_empty_to_evaluation "${on_lesser_lights}"\
...     '$(output_string "'${on_faberge_eggs}'")'
>>> get_string_line "${on_lesser_lights}" 1
And then they proceed to sing objects into existence. Amazing objects.
------------------------------------------
==========================================
/---
function set_string_if_empty_to_evaluation() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one statement.'
    :string string_name__ssiete="${1}" evaluation__ssiete="${2}"
    die_unless_string "${string_name__ssiete}"

    # Set such string.
    eval 'noop ${'${string_name__ssiete}':='${evaluation__ssiete}'}'
}

# ....................{ SETTERS ~ [pre|suf]fix             }....................
declare_function_with_stdin <<'/---'
void ::set_string_to_string_sans_prefix(
    string string_name,
    string text
    string prefix)

Set the passed string variable to the passed string stripped of the passed
prefix if such string is prefixed by such prefix or simply to the passed string
otherwise: e.g.,

.::set_string_to_string_sans_prefix()
==========================================
[source]
------------------------------------------
>>> :string on_barbarous_times on_feudal_obligations=\
...    "We cry shame on the feudal baron who forbade the peasant to turn a clod
...     of earth unless he surrendered to his lord a fourth of his crop. We call
...     those the barbarous times. But if the forms have changed, the relations
...     have remained the same, and the worker is forced, under the name of free
...     contract, to accept feudal obligations. For, turn where he will, he can
...     find no better conditions. Everything has become private property, and
...     he must accept, or die of hunger."
>>> ::set_string_to_string_sans_prefix on_barbarous_times\
...     "${on_feudal_obligations}"\
...     "$(get_string_lines "${on_feudal_obligations}" 1 -2)"
>>> output_string "${on_barbarous_times}"
of hunger.
------------------------------------------
==========================================
/---
function ::set_string_to_string_sans_prefix() {
    die_unless_args_3 'Expected one string name, one string, and one prefix.'
    :set_string_to_string "${1}" "${2#${3}}"
}

declare_function_with_stdin <<'/---'
void ::set_string_to_string_sans_suffix(
    string string_name,
    string text,
    string suffix)

Set the passed string variable to the passed string stripped of the passed
suffix if such string is suffixed by such suffix or simply to the passed string
otherwise: e.g.,

.::set_string_to_string_sans_suffix()
==========================================
[source]
------------------------------------------
>>> :string on_soul_echoes on_animal_soup=\
...    "What sphinx of cement and aluminium bashed open their skulls and ate up
...     their brains and imagination?
...     Moloch! Solitude! Filth! Ugliness! Ashcans and unobtainable dollars!
...     Children screaming under the stairways! Boys sobbing in armies! Old men
...     weeping in the parks!
...     Moloch! Moloch! Nightmare of Moloch! Moloch the loveless! Mental Moloch!
...     Moloch the heavy judger of men!"
>>> ::set_string_to_string_sans_suffix on_soul_echoes\
...     "${on_animal_soup}"\
...     "$(get_string_lines "${on_animal_soup}" 2 -1)"
>>> output_string "${on_soul_echoes}"
What sphinx of cement and aluminium bashed open their skulls and ate up
------------------------------------------
==========================================
/---
function ::set_string_to_string_sans_suffix() {
    die_unless_args_3 'Expected one string name, one string, and one suffix.'
    :set_string_to_string "${1}" "${2%${3}}"
}

# ....................{ SETTERS ~ split                    }....................
#FIXME: Improve example.
declare_function_with_stdin <<'/---'
void set_strings_to_string_split_on_string(
    string string_name1,
    string string_name2,
    string text,
    string delimiter)

Split the substring of the passed string preceding the first instance of the
passed delimiter into the first passed list and the remainder (excluding the
passed delimiter) into the second passed list. Such delimiter may be of any non-
zero length. If such string contains no such delimiter, throw an exception:
e.g.,

.set_strings_to_string_split_on_string()
==========================================
[source]
------------------------------------------
>>> :string prefix suffix
>>> set_strings_to_string_split_on_string pre suf "wol==hea==soc" "=="
>>> output_string "prefix: ${prefix}\nsuffix: ${suffix}"
prefix: wol
suffix: hea==soc
------------------------------------------
==========================================
/---
function set_strings_to_string_split_on_string() {
    # Validate sanity.
    die_unless_args_4\
        'Expected one prefix name, one suffix name, one string, and one delimiter.'
    :string\
        prefix_name__sstspod="${1}"\
        suffix_name__sstspod="${2}"\
        text__sstsps="${3}"\
        separator__sstsps="${4}"
    die_unless_string "${prefix_name__sstsps}"
    die_unless_string "${suffix_name__sstsps}"
    die_unless_string_nonempty "${separator__sstsps}" 'Expected nonempty separator.'

    #FIXME: Generalize into a new :die_unless_string_contains() exception handler.
    # If such string contains no such delimiter, throw an exception.
    is_string_contains "${text__sstsps}" "${separator__sstsps}" or
        die "String \"${text__sstsps}\" contains no separator \"${separator__sstsps}\"."

    #FIXME: Conjoin into a single "//"-style match enabling "(#b)" to capture
    #the two groups, then set such strings with such groups. This also helps to
    #rid us of the unwieldy test above, assuming we detect such match failing
    #with non-zero exit status.
    #FIXME: Just use single "#" with "(#b)". See set_list_to_stdin().
    # Split such string.
    :set_string_to_string\
        "${prefix_name__sstsps}" "${text__sstsps%%${separator__sstsps}*}"
    :set_string_to_string\
        "${suffix_name__sstsps}" "${text__sstsps#*${separator__sstsps}}"
}

# --------------------( WASTELANDS                         )--------------------
# declare_function_with_stdin <<'/---'
# void :set_string_to_string(
#     string string_name,
#     string text, ...)
# 
# Set the passed string variable to the undelimited concatenation of all passed
# strings (i.e., without separation between such strings): e.g.,
# 
# .:set_string_to_string()
# ==========================================
# [source]
# ------------------------------------------
# >>> :string on_dmt on_entelechy on_mundanity
# >>> on_entelechy=\
# ...    "There's this feeling which comes over your body: half arousal, half
# ...     anaesthesia. The air appears to suddenly have been sucked out of the
# ...     room because all the colors brighten visibly, as though some intervening
# ...     medium has been removed. And then there's a sound, like a piece of bread
# ...     wrapper or cellophane being scrunched up and thrown away. A friend of
# ...     mine says this is radio-entelechy leaving the anterior fontanelle at the
# ...     top of your head."
# >>> on_mundanity=\
# ...    "I'm not sure I want to line up with that, but a membrane is being
# ...     ripped; something is being torn. And then there is a total â what
# ...     Mircea Eliade called in a wonderful phrase â \"a complete rupture of
# ...     the mundane plane.\" You know? That's like a hit and run accident except
# ...     the car came from hyperspace."
# >>> :set_string_to_string on_dmt "${on_entelechy}" "${on_mundanity}"
# >>> get_string_line "${on_dmt}" 1
# There's this feeling which comes over your body: half arousal, half
# >>> get_string_line "${on_dmt}" -1
# the car came from hyperspace.
# ------------------------------------------
# ==========================================
# /---
# function :set_string_to_string() {
#     # Validate sanity.
#     die_unless_args_2_or_more\
#         'Expected one string name and one or more strings.'
#     :string string_name__ssts="${1}"
#     die_unless_string "${string_name__ssts}"
#     shift_arg
# 
#     # If only one such string was passed, no concatenation is needed. In such
#     # case, set such string with a simple copy.
#     if { is_arg } {
#         noop "${(P)string_name__ssts::=${1}}"
#     # Else, two or more such strings were passed, in which case concatenation
#     # is needed.
#     #
#     # Set such string to the undelimited concatenation of all such strings. 
#     } else {
#         # Locally clear canonical string global ${IFS} (i.e., the internal
#         # field separator). Since zsh implicitly delimits strings concatenated
#         # with "*" by such global's value, clearing such global guarantees
#         # undelimited concatenation. This incantation was surprisingly arduous
#         # to unearth. In particular, note that if "*" is *NOT* double-quoted,
#         # zsh ignores the value of ${IFS} during concatenation and hence
#         # delimits such strings by single spaces. (Ugh.)
#         :string IFS=
# 
#         # Set such string with undelimited concatenation.
#         noop "${(P)string_name__ssts::=${*}}"
#     }
# }

        # eval ${string_name__ssts}'="${*}"'

    # # Validate sanity.
    # die_unless_args_3 'Expected one string name, one string, and one prefix.'
    # :string string_name__sstssp="${1}" text__sstssp="${2}" prefix__sstssp="${2}"

    # # Set such string.
    # :set_string_to_string "${string_name__sstssp}" "${text__sstssp}"

#FUXME: Uhm; this doesn't actually execute such evaluation in double quotes,
#unlike the prior function. I substantially doubt this function generally
#behaves as advertised.

#declare_function_with_stdin <<'/---'
#void set_string_if_unset_to_evaluation(
#    string string_name, string expression)
#
#Set the passed string variable if unset to the dynamic evaluation of the passed
#expression in a double-quoted context. See set_string_to_evaluation() for
#further details: e.g.,
#
#.set_string_if_unset_to_evaluation()
#==========================================
#[source]
#------------------------------------------
#>>> string on_upward_mobility on_the_great_gatsby_curve=\
#...    "In a nation ruled by swine, all pigs are upward-mobile â and the rest of
#...     us are fucked until we can put our acts together: Not necessarily to
#...     Win, but mainly to keep from Losing Completely. We owe that to ourselves
#...     and our crippled self-image as something better than a nation of
#...     panicked sheep... but we owe it especially to our children, who will
#...     have to live with our loss and all its long-term consequences."
#>>> set_string_if_unset_to_evaluation "${on_upward_mobility}"\
#...     '$(output_string "'${on_the_great_gatsby_curve}'")'
#>>> get_string_line "${on_the_lesser_lights_of_the_bardo}" 1
#And then they proceed to sing objects into existence. Amazing objects.
#------------------------------------------
#==========================================
#/---
#function set_string_if_unset_to_evaluation() {
#    # Validate sanity.
#    die_unless_args_2 'expected one variable name and one statement'
#    string string_name__ssiute="${1}"
#    :die_unless_var_string "${string_name__ssiute}"
#
#    # Set such string.
#    eval "noop \${(P)string_name__ssiute="${2}"}"
#}

#>>> cat /buddha
#Three pounds of flax.
#>>> string what_is_the="tozan" tozan
#>>> set_string_if_empty_to_evaluation "${what_is_the}" '$(cat /buddha)'
#>>> print_string "${tozan}"
#Three pounds of flax.

#...    "A membrane is rent, and you are propelled into this place. And language
#...     cannot describe it accurately. Therefore I will inaccurately describe
#...     it. (The rest is now lies.) When you break into this space, you have
#...     several impressions simultaneously that are a kind of gestalt. First of
#...     all (and why, I don't know) you have the impression that you are
#...     underground - far underground. You can't say why, but there's just this feeling of immense weight above you but you're in a large space, a vaulted dome. People even call it "The DMT dome" I have said, had people say to me, "Have you been under the dome?" and I knew exactly what they meant. "
#
#And this is taking, you know, 30 or 40 seconds, and there's this rising
#...     hum, this ____nnnmmmmmMMMMMMMM^^^^^ That rising tone: the flying saucer
#...     tone of Hollywood B movies! You actually hear this thing. And then, if
#...     you've taken enough DMT â and it has to do entirely with physical
#...     capacity (\"Did you take, did you cross the threshold?\") â something
#...     happens for which there are no words. 
