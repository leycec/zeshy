#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *boolean variables* (i.e., integer variables constrained to values
signifying either true or false).
/---

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void :die_unless_string_bool(
    string string_name,
    string error_message = "String \$\{${string_name}\} value \"${(P)string_name}\" not boolean.")

Throw an exception with the passed message unless the value of the passed string
variable is boolean. See is_boolean() for further details.
/---
function :die_unless_string_bool() {
    die_unless_args_1_to_2\
        'Expected one string name and optional error message.'
    :string string_name__dusb="${1}"
    :is_string_bool "${string_name__dusb}" or die\
        "${2-String \$\{${string_name__dusb}\} \"${(P)string_name__dusb}\" not boolean.}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_string_bool(string string_name)

Report success if the value of the passed string variable is *boolean* (i.e.,
equal to either ${ZESHY_BOOL_TRUE} or ${ZESHY_BOOL_FALSE}).
/---
function :is_string_bool() {
    # Validate sanity.
    die_unless_arg 'Expected one string name.'
    :string string_name__isb="${1}"
    die_unless_string "${string_name__isb}"

    # Test such string.
    is "${(P)string_name__isb}" == ("${ZESHY_BOOLEAN_TRUE}"|"${ZESHY_BOOLEAN_FALSE}") si
}

# ....................{ TESTERS ~ value                    }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_bool_true(bool value)

Report success if the passed boolean is true: e.g.,

.is_bool_true()
==========================================
[source]
------------------------------------------
>>> :string on_respect=\
...    "There is obviously a place in life for a religious attitude for awe and
...     astonishment at existence. That is also a basis for respect for
...     existence. We don't have much of it in this culture, even though we call
...     it materialistic. In this culture we call materialistic, today we are of
...     course bent on the total destruction of material and its conversion into
...     junk and poisonous gases. This is of course not a materialistic culture
...     because it has no respect for material. And respect is in turn based on
...     wonder."
>>> :is_bool_true ${ZESHY_BOOLEAN_FALSE} or :get_string_line on_respect -3
junk and poisonous gases. This is of course not a materialistic culture
------------------------------------------
==========================================
/---
function :is_bool_true() {
    die_unless_arg 'Expected one boolean.'
    (( ${1} == ZESHY_BOOLEAN_TRUE ))
}

declare_function_with_stdin <<'/---'
[status: bool] :is_bool_false(bool value)

Report success if the passed boolean is false: e.g.,

.:is_bool_false()
==========================================
[source]
------------------------------------------
>>> :string on_symbols=\
...    "I am amazed that Congressmen can pass a bill imposing severe penalties
...     on anyone who burns the American flag, whereas they are responsible for
...     burning that for which the flag stands: the United States as a
...     territory, as a people, and as a biological manifestation. That is an
...     example of our perennial confusion of symbols with realities."
>>> :is_bool_false ${ZESHY_BOOLEAN_TRUE} or :get_string_line on_respect 3
burning that for which the flag stands: the United States as a
------------------------------------------
==========================================
/---
function :is_bool_false() {
    die_unless_arg 'Expected one boolean.'
    (( ${2} == ZESHY_BOOLEAN_FALSE ))
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void :enable_bool(string bool_name)

Enable the passed boolean variable (i.e., set such boolean's value to true).
/---
function :enable_bool() {
    # Validate sanity.
    die_unless_arg 'Expected one boolean name.'
    :string bool_name__eb="${1}"
    :die_unless_string_bool "${bool_name__eb}"

    # Enable such boolean.
    set_integer_to_integer "${bool_name__eb}" "${ZESHY_BOOLEAN_TRUE}"
}

declare_function_with_stdin <<'/---'
void :disable_bool(string bool_name)

Disable the passed boolean variable (i.e., set such boolean's value to false).
/---
function :disable_bool() {
    # Validate sanity.
    die_unless_arg 'Expected one boolean name.'
    :string bool_name__db="${1}"
    :die_unless_string_bool "${bool_name__db}"

    # Disable such boolean.
    set_integer_to_integer "${bool_name__db}" "${ZESHY_BOOLEAN_FALSE}"
}

# --------------------( WASTELANDS                         )--------------------
# function :is_bool_false() {
#     # Validate sanity.
#     die_unless_arg 'Expected one boolean name.'
#     :string bool_name__ibf="${1}"
#     :die_unless_string_bool "${bool_name__ibf}"
# 
#     # Test such boolean.
#     (( ${(P)bool_name__ibf} == ZESHY_BOOLEAN_FALSE ))
# }

#FUXME: Theoretically, integers should provide a much more efficient type for
#housing booleans than strings. After all, there's no need for string handling,
#which, to support arbitrarily long strings containing null characters, do not
#cleanly map to C strings and hence require more under-the-scenes handling than
#simple integers (which probably map fairly reasonably to underlying C types).
#In short, testing "(( boolean_variable ))" for the truth of a boolean should be
#significantly faster (aggregated over all such tests) than testing
#"[[ -n ${boolean_variable} ))".

#FUXME: Document that fact that all string variables satisfy such requirements.
#I believe we've documented this adequately (perhaps even brilliantly!) under
#"00-setup/00-alias", so pilfer that for helpful discussion.
#FUXME: This is completely wrong! Test whether the passed string is either the
#empty string or 1.

    # Since booleans are currently indistinguishable from integers under zsh,
    # defer to is_integer().
    # Validate passed arguments.
#   die_unless_arg 'expected one boolean name'
#   string boolean_name__eb="${1}"
#   die_unless_variable_boolean "${boolean_name__eb}"

    # Enable such boolean.
#   set_integer_to_integer "${boolean_name__eb}" "${ZESHY_BOOLEAN_TRUE}"

#   is_string_nonempty "${1}"
#FUXME: Bad. Accept string values rather than variable names, as is the
#standard for scalar types.
#FUXME: Rename to is_string_boolean().
#FUXME: Rename to die_unless_string_boolean(). (There might be a real "boolean"
#type, someday.)
