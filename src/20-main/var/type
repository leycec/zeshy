#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle variable types.
/---

#FIXME: Globally rename ${ZESHY_VAR_*} to ${ZESHY_VAR_*}.

#FIXME: Grep the codebase for other parcels accessing these globals. Most
#shouldn't be! Bad premature optimization, we're afraid. Refactor all such code
#to call testers and setters defined by this parcel, instead.
#FIXME: Indeed, since *NO* other parcels should be accessing such string
#globals, refactor such string globals into a single map global or local of the
#anonymous function below: e.g.,
#
#     :map_global ZESHY_VAR_TYPE_TO_ZSH_GLOB; ZESHY_VAR_TYPE_TO_ZSH_GLOB=(
#         :float 'float*'
#         :int   'integer*'
#         :list  '(array|list)*'
#     )

#FIXME: Define :is_string() to report success if the passed name corresponds to
#an existing string variable, much like :is_list() and :is_map().

# ....................{ GLOBALS                            }....................
declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_FLOAT='float*' <<'/---'
Glob matching float variable type strings.
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_INTEGER='integer*' <<'/---'
Glob matching integer variable type strings.
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_LIST='(array|list)*' <<'/---'
Glob matching list variable type strings.
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_MAP='association*' <<'/---'
Glob matching map variable type strings.
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_STRING='scalar*' <<'/---'
Glob matching string variable type strings.
/---

# ....................{ GLOBALS ~ zeshy                    }....................
# Globs matching zeshy-specific types depending on the prior canonical types.

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_BOOLEAN="${ZESHY_VAR_TYPE_GLOB_INTEGER}" <<'/---'
Glob matching boolean variable type strings.
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_CHARACTER="${ZESHY_VAR_TYPE_GLOB_STRING}" <<'/---'
Glob matching character variable type strings.
/---

# ....................{ GLOBALS ~ plural                   }....................
# Globs matching two or more of the prior canonical types.

#FIXME: Rename to ${ZESHY_VAR_TYPE_GLOB_NUMERIC}.
declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_NUMBER='(float|integer)*' <<'/---'
Glob matching type strings of *numeric variables* (i.e., floats and integers).
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_SCALAR='(float|integer|scalar)*' <<'/---'
Glob matching type strings of *scalar variables* (i.e., floats, integers, and
strings).
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_NONSCALAR='(array|association|list)*' <<'/---'
Glob matching type strings of *nonscalar variables* (i.e., lists and maps).
/---

# ....................{ GLOBALS ~ scope                    }....................
declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_LOCAL='*-local' <<'/---'
Glob matching type strings of local variables.
/---

declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_EXPORTED='*-exported' <<'/---'
Glob matching type strings of exported variables.
/---

# Sadly, type strings of local but *NOT* global variables are explicitly
# suffixed by a suffix specific to such variables. Thus, type strings of the
# latter are matchable only by matching type strings either:
#
# * *NOT* containing delimiter "-" (and hence implicitly global).
# * Containing delimiter "-" suffixed by an suffix other than "local" (and
#   hence implicitly global).
#
# While extended globs lack support for the generalized negative lookahead and
# lookbehind assertions now supported by most PCRE implementations, they *DO*
# support negative character classes. Since no type suffix other than "-local"
# starts with "l", negating such letter suffices to match the desired strings.
declare_global_with_stdin string\
    ZESHY_VAR_TYPE_GLOB_GLOBAL='([^-]##|*-[^l]*)' <<'/---'
Glob matching type strings of global variables.
/---

# ....................{ TESTERS                            }....................
# See above for :is_var_list() and :is_var_map(), which share semantics
# closer to those of the exception handlers defined above.

declare_function_with_stdin <<'/---'
[status = :bool] is_list(:string var_name)

Report success if the passed variable both exists and is a list. Unlike
:is_var_list(), an exception is _not_ thrown if such variable does not exist.
/---
function is_list() {
    # Validate sanity.
    die_unless_arg 'Expected one variable name.'
    :string var_name__il="${1}"

    # Test such variable. For both efficiency and stability, inline the value of
    # ${~ZESHY_VAR_TYPE_GLOB_LIST}.
    is "${(tP)var_name__il-}" == ('array'|'list')* si
}

declare_function_with_stdin <<'/---'
[status = :bool] is_map(:string var_name)

Report success if the passed variable both exists and is a map. Unlike
:is_var_map(), an exception is _not_ thrown if such variable does not exist.
/---
function is_map() {
    # Validate sanity.
    die_unless_arg 'Expected one variable name.'
    :string var_name__im="${1}"

    # Test such variable. For both efficiency and stability, inline the value of
    # ${~ZESHY_VAR_TYPE_GLOB_MAP}.
    is "${(tP)var_name__im-}" == 'association'* si
}

# ....................{ TESTERS ~ type                     }....................
declare_function_with_stdin <<'/---'
[status = :bool] :is_var_numeric(:string:var? var_name)

Report success if the passed variable is *numeric* (i.e., was originally
declared as a scalar variable of type either float or integer).
/---
function :is_var_numeric() {
    # Validate sanity.
    die_unless_arg 'Expected one variable name.'
    :string var_name__ivn="${1}" var_type__ivn

    # Type of such variable.
    :set_string_to_var_type var_type__ivn "${var_name__ivn}"

    # Test such type.
    is "${var_type__ivn}" == ${~ZESHY_VAR_TYPE_GLOB_NUMBER} si
}

# ....................{ SETTERS                            }....................
#FIXME: Actually call this setter elsewhere rather than manually expanding
#"${(tP)...}" everywhere, except where efficiency *ABSOLUTELY* demands such
#optimization.

declare_function_with_stdin <<'/---'
:void :set_string_to_var_type(
    :string:string? string_name,
    :string:var var_name)

Get the `zsh`-specific lowercase type of the passed variable.

Set the passed string to the passed variable's *type string* (i.e., `zsh`-
specific lowercase string succinctly synopsizing both the type and scope such
variable was originally declared as): e.g.,

.:set_string_to_var_type()
==========================================
[source]
------------------------------------------
>>> :string type_string
>>> :list on_employment; on_employment=(
...     "Most men would feel insulted if it were proposed to employ them in"
...     "throwing stones over a wall, and then in throwing them back, merely"
...     "that they might earn their wages. But many are no more worthily"
...     "employed now." )
>>> :set_string_to_var_type type_string on_employment
>>> :output_string "${type_string}"
array-local
------------------------------------------
==========================================

== Variable Type Strings ==

Such type string consists of such variable's type _and_ scope delimited by `-`
(e.g., `array-local`, the type string for local lists). If such scope is
global, such type string omits such scope and hence consists only of such
variable's type without a suffixing `-`.

=== Type ===

If such variable was declared as type:

* Float, such type string is prefixed by `float`.
* Integer, such type string is prefixed by `integer`.
* Map, such type string is prefixed by `association`.
* String, such type string is prefixed by `scalar`.
* List _and_ is a:
** *Canonical `zsh` global* (e.g., ${match}, ${path}), such type string is
   prefixed by `array`.
** *Non-canonical variable* (i.e., user- or `zeshy`-specific), such type string
   is prefixed by `list`.

=== Scope ===

If such variable was declared with scope:

* Local, such type string is suffixed by `-local`.
* Global, such type string omits such scope.
* Exported, such type string is suffixed by `-exported`.
/---
function :set_string_to_var_type() {
    # Validate sanity.
    die_unless_args_2 'Expected one string name and one variable name.'
    :string string_name__sstvt="${1}" var_name__sstvt="${2}"
    :die_unless_var "${var_name__sstvt}"

    # Set such string to such variable's type. Dismantled, this is:
    #
    # * "P", expanding to such variable's name.
    # * "t", expanding to such variable's type.
    :set_string_to_string "${string_name__sstvt}" "${(tP)var_name__sstvt}"
}

# ....................{ DEFINERS                           }....................
() {
    # Validate sanity.
    die_if_args
    :string\
        func_names_die_unless_singular\
        func_names_die_unless_plural\
        func_names_test_singular\
        is_var_type_matches\
        string_name_type_glob\
        var_type_capital\
        var_type_singular\
        var_type_plural

    # For each zeshy-specific variable type, declare and define exception
    # handler and tester functions specific to such type.
    :string var_type
    for     var_type (
        # zsh types.
        float integer list map string

        # zsh type aggregators.
        number scalar nonscalar

        # zeshy types.
        boolean character
    ) {
        # If the first letter of such type is a vowel, prefix such type by "an".
        # with "an".
        if :is "${var_type[1]}" == [aeiou] :si {
            var_type_singular="an ${var_type}"
        # Else, the first letter of such type is a consonant. Prefix such type
        # by "a".
        } else {
            var_type_singular="a ${var_type}"
        }

        # Capitalize such type.
        var_type_capital="${(C)var_type[1]}${var_type[2,-1]}"

        # Pluralize such type, suffixing such type by "s".
        var_type_plural="${var_type}s"

        # If such type is nonscalar *OR* string, declare a pair of singular and
        # a pair of plural exception handlers for such type. In each such pair,
        # the first handler explicitly prefixes such type with "_variable" and
        # the second handler omits such word. In either case, there exists no
        # meaningful difference between such handlers for such types, as:
        #
        # * All nonscalar types must be passed to functions as variable names.
        # * All scalar variable values reduce to typeless strings when expanded
        #   and hence passed to functions.
        #
        # Since there do exist meaningful differences between such handlers for
        # all other types, declare handlers omitting the word "_variable" for
        # all other types differently below. For example, while
        # :die_unless_var_integer() throws an exception if the passed string
        # is not the name of an integer variable, :die_unless_int() throws an
        # exception if the passed string is not a syntactically valid integer.
        if :is "${var_type}" == ('list'|'map'|'string') :si {
            func_names_die_unless_singular=":die_unless_var_${var_type}, die_unless_${var_type}"
            func_names_die_unless_plural=":die_unless_vars_${var_type}, die_unless_${var_type_plural}"
        # Else, such type is scalar. Declare only one singular and one plural
        # exception handler for such type.
        } else {
            func_names_die_unless_singular=":die_unless_var_${var_type}"
            func_names_die_unless_plural=":die_unless_vars_${var_type}"
        }

        # Since :is_var_list() and :is_var_map() imply different
        # function semantics from is_list() and is_map() (simply by virtue of
        # function name), define only the former here. See below for the latter.
        func_names_test_singular=":is_var_${var_type}"

        # Name of the string global matching such variable's type.
        string_name_type_glob="ZESHY_VAR_TYPE_GLOB_${(U)var_type}"

        # If such global is undefined or of an unexpected type, throw an
        # exception. See die_unless_string() for further details.
        :is "${(tP)string_name_type_glob-}" == 'scalar'* :si or :die\
            'String ${'${string_name_type_glob}'} undefined or not a string.'

        # Code snippet reporting success if the variable with name
        # ${var_name__vt} exists and is of the desired type. If such variable
        # does not exist, an exception is thrown.
        is_var_type_matches='
    :die_unless_var "${var_name__vt}"
    :is "${(tP)var_name__vt}" == '${(P)string_name_type_glob}' :si'

        # Declare and define such functions. For efficiency, inline variable
        # type tests rather than call :is_var_type_matches_glob() -- an overly
        # heavyweight tester for such frequently called functions.
        :declare_func\
    ':void {'${func_names_die_unless_singular}'}(
        :string var_name,
        :string error_message =
            "'${var_type_capital}' \$\{${var_name}\} not '${var_type_singular}'.")' '
    :string var_name__vt="${1}"
    '${is_var_type_matches}' or :die\
        "${2-'${var_type_capital}' \$\{${var_name__vt}\} not '${var_type_singular}':${ZESHY_ASCII_NEWLINE}$(:print_var "${var_name__vt}")}"' <</---
Throw an exception with the passed message unless the passed variable exists
and is ${var_type_singular}.
/---

        :declare_func\
    ':void {'${func_names_die_unless_plural}'}(:string:var? var_name1, ...)' '
    :string var_name__vt
    for     var_name__vt ("${@}") {
        '${is_var_type_matches}' or
            :die_unless_var_'${var_type}' "${var_name__vt}"
    }' <</---
Throw an exception with a stock message unless all passed variables exist and
are ${var_type_plural}.
/---

        :declare_func\
    '[status = :bool] {'${func_names_test_singular}'}(:string:var? var_name)' '
    :string var_name__vt="${1}"
    '${is_var_type_matches} <</---
Report success if the passed variable is ${var_type_singular}. If such
variable does not exist, an exception is thrown.
/---
    }
}

# --------------------( WASTELANDS                         )--------------------
    # die_unless_args_1_to_2\
    #     "Expected one variable name and optional error message."
    # die_unless_args "Expected one or more variable names."
    # die_unless_arg "Expected one variable name."

# ....................{ MAIN                               }....................
# ::define_var_type_functions

# #FUXME: Document me.
# declare_function_with_stdin <<'/---'
# :void ::define_var_type_functions()
# /---
# ::define_var_type_functions
    # Comma-delimited string lists of function names to be declared.
    # :string\
    #     func_names_die_unless_singular\
    #     func_names_die_unless_plural\
    #     func_names_test_singular

    # # Name of the string global matching such variable's type.
    # :string string_name_type_glob

    # # Code snippet used to programmatically construct function definitions.
    # :string is_var_type_matches

    # # Human-readable singular and plural variants of such variable type,
    # # prefixed with appropriate articles (e.g., "an integer", "a string").
    # :string var_type_singular var_type_plural var_type_capital

        #FUXME: We're currently inducing subtle errors here. This will *ALL* go
        #away after we transition the declarations and definitions below to
        #simply call our new :declare_func() instead; hence, don't worry about
        #correcting the prior way of declaring and defining functions. Just
        #focus on transitioning everything below to :declare_func(), and this
        #will *ALL* work itself out. (Nice, eh?)

#         # Document such functions.
#         declare_function_with_stdin <</---
# void {${func_names_die_unless_singular}}(
#     string var_name,
#     string error_message = "\\\${\${var_name}\\} not ${var_type_singular}.")
# 
# Throw an exception with the passed message unless the passed variable exists and
# is ${var_type_singular}.
# /---
#         declare_function_with_stdin <</---
# void {${func_names_die_unless_plural}}(string var_name1, ...)
# 
# Throw an exception with a stock message unless all passed variables exist and
# are ${var_type_plural}.
# /---
#         declare_function_with_stdin <</---
# [status: bool] {${func_names_test_singular}}(string var_name)
# 
# Report success if the passed variable is ${var_type_singular}. If such
# variable does not exist, an exception is thrown.
# /---
# 
#         # Get the name of the string global matching such variable's type.
#         string_name_type_glob="ZESHY_VAR_TYPE_GLOB_${(U)var_type}"
# 
#         #FUXME: Nonsense. Just call :is_var() here. Naturally, this requires
#         #such function be defined here, which raises another question: does
#         #this parcel still need to reside under @{00-start}? The answer is
#         #most likely: absolutely not. Contemplate shifting this to
#         #@{*-main/var/type} and renaming @{*-main/var/var} to @{*-main/var/00-var}, to ensure
#         #:is_var() is defined by the time this parcel is sourced.
#         #FUXME: Actually, just shift @{*-main/var/var} to @{*-start/var/var}.
# 
#         # If such global does *NOT* exist, throw an exception. See :is_var()
#         # for further details.
#         (( ${+parameters[string_name_type_glob]} )) or
#             :die '${'${string_name_type_glob}'} undefined.'
# 
#         # Code snippet returning success if the variable with name
#         # ${var_name__vt} exists and is of the desired type. If such variable
#         # does not exist, throw an exception.
#         is_var_type_matches='
#     :die_unless_var "${var_name__vt}"
#     is "${(tP)var_name__vt}" == '${(P)string_name_type_glob}' si'
# 
#         #FUXME: Silly. We define :define_func() and should be utilizing such
#         #function here rather than defining functions manually. (Ugh.)
# 
#         # Define such functions. For efficiency, inline their implementations
#         # rather than call :is_var_type_matches_glob() -- an overly
#         # heavyweight tester for such frequently called functions.
#         eval '
# function '${func_names_die_unless_singular}'() {
#     die_unless_args_1_to_2\
#         "Expected one variable name and optional error message."
#     :string var_name__vt="${1}"
# 
#     '${is_var_type_matches}' or
#         :die "${2-Variable \$\{${var_name__vt}\} not '${var_type_singular}' but defined as:
# $(:print_var "${var_name__vt}")}"
# }
# 
# function '${func_names_die_unless_plural}'() {
#     die_unless_args "Expected one or more variable names."
# 
#     :string var_name__vt
#     for     var_name__vt ("${@}") {
#         '${is_var_type_matches}' or
#             :die_unless_var_'${var_type}' "${var_name__vt}"
#     }
# }
# 
# function '${func_names_test_singular}'() {
#     die_unless_arg "Expected one variable name."
#     :string var_name__vt="${1}"
#     '${is_var_type_matches}'
# }'
#     }

#         eval '
# function '${function_names_die_unless_singular}'() {
#     die_unless_args_1_to_2\
#         "Expected one variable name and optional error message."
#     :string var_name__vt="${1}"
# 
#     '${is_var_type_matches}' or
#         die "${2-Variable \$\{${var_name__vt}\} not '${var_type_singular}' but defined as:
# $(:print_var "${var_name__vt}")}"
# }
# 
# function '${function_names_die_unless_plural}'() {
#     die_unless_args "Expected one or more variable names."
# 
#     :string var_name__vt
#     for     var_name__vt ("${@}") {
#         '${is_var_type_matches}' or
#             :die_unless_var_'${var_type}' "${var_name__vt}"
#     }
# }
# 
# function '${function_names_test_singular}'() {
#     die_unless_arg "Expected one variable name."
#     :string var_name__vt="${1}"
#     '${is_var_type_matches}'
# }'
# 
# ....................{ GETTERS                            }....................
#FUXME: Refactor into :set_string_to_var_type().

# declare_function_with_stdin <<'/---'
# string get_var_type(string var_name)
# 
# Get the `zsh`-specific lowercase type of the passed variable. If such variable
# is:
# 
# * A float, `float` prefixes such type.
# * An integer, `integer` prefixes such type.
# * A map, `association` prefixes such type.
# * A string, `scalar` prefixes such type.
# * A user- or `zeshy`-defined list, `list` prefixes such type.
# * A canonical `zsh` list variables (e.g., ${match}, ${path}), `array` prefixes
#   such type.
# 
# If such variable was declared with scope:
# 
# * Local, `-local` suffixes such type.
# * Exported, `-exported` suffixes such type.
# 
# For example:
# 
# .get_var_type()
# ==========================================
# [source]
# ------------------------------------------
# >>> list on_employment; on_employment=(
# ...     "Most men would feel insulted if it were proposed to employ them in"
# ...     "throwing stones over a wall, and then in throwing them back, merely"
# ...     "that they might earn their wages. But many are no more worthily"
# ...     "employed now." )
# >>> get_var_type on_employment
# array-local
# ------------------------------------------
# ==========================================
# /---
# function get_var_type() {
#     # Validate sanity.
#     die_unless_arg 'Expected one variable name.'
#     :string var_name__gvt="${1}"
#     :die_unless_var "${var_name__gvt}"
# 
#     # Get such type. Dismantled, this is:
#     #
#     # * "P", expanding to the variable with the passed name.
#     # * "t", expanding such variable's type.
#     :output_string "${(tP)var_name__gvt}"
# }

#             die "${Variable \$\{${var_name__vt}\} not '${var_type_singular}' but defined as:
# $(:print_var "${var_name__vt}")}"

# :is_var "${var_name__im}" and 

 # For efficiency, inline such
 #        # implementation. See :is_var() for further details.
 #        is_var_type_matches='
 #    is -n "${(P)var_name__vt+x}" si or
 #        die '''${(C)var_type}' ${''${var_name__vt}''} undefined.''
    # :is_var "${var_name__vt}" or
    #     die '''${(C)var_type}' ${''${var_name__vt}''} undefined.''

        # is -n "${(P)string_name_type_glob+x}" si or
        # If such global does *NOT* exist, throw an exception. See :is_var()
        # for further details.
        # is -n "${(P)string_name_type_glob+x}" si or

    # Test such variable. For both efficiency *AND* stability, inline both
    # :is_var() and ${~ZESHY_VAR_TYPE_GLOB_LIST}.
    # is (( "${(P)var_name__il+x}" and

        # complies with scalar nomenclature; the latter complies with
        # nomenclature specific to such type (e.g., set_list_to_list()).
        # Declare documentation for such function(s). For simplicity, avoid
        # passing documentation as standard input.

    #FUXME: Ugh. While this works, it's rather inefficient. Consider optimizing.
    #Ideally, we shouldn't require a loop here. 

# The following aggregate types match two or more of the above.
        # If debugging zeshy, guarantee the existence of the string global
        # matching such variable's type by throwing an exception if such global
        # does not exist. Since such global *ALWAYS* exists under normal
        # conditions, this is purely a debug sanity check.
#       if (( ZESHY_IS_DEBUG )) {
#           :is_var_type_matches='
#   (( ${+'${string_name_type_glob}'} )) or
#       die "global \${'${string_name_type_glob}'} undefined"'
        # Else, initialize such logic to the empty string.
#       } else {
#           :is_var_type_matches=''
#       }

#   is -n "${(P)var_name__vt+x}" si or
#* `association` for map variables.
#* `array` and `array-special` for `zsh`-specific canonical list variables (e.g.,
#  ${match}, ${path}).
#* `float` for float variables.
#* `integer` for integer variables.
#* `list` for list variables.
#* `scalar` for string variables.

#           function_names_test_singular=":is_var_${var_type} is_${var_type}"
    #FUXME: Might as well declare ":is_var_${var_type}" functions as
    #well, yes? When we do so, we'd might as well inline the calls to
    #:is_var_type_matches_glob(). Indeed, at that point, we'd might as well
    #eliminate such function altogether. It's rather heavyweight, pointlessly.

#FUXME: Extract the globs repeated below (e.g., ('list'|'array')* into globals,
#reducing repetition and explanation elsewhere.

    # Documentation-specific string list of function names to be declared.
#   string\
#       function_names_die_singular_help\
#       function_names_die_plural_help\
#       function_names_test_singular_help

# ....................{ TESTERS                            }....................
#declare_function_with_stdin <<'/---'
#<globbable> [status: bool] :is_var_type_matches_glob(
#    string var_name, string glob)
#
#Report success if the type of the passed variable matches the passed glob: e.g.,
#
#.:is_var_type_matches_glob()
#==========================================
#[source]
#------------------------------------------
#>>> map on_industry=(
#...     "If"    "a man walk in the woods for love of them half of each day,"
#...     "he"    "is in danger of being regarded as a loafer; but if he spends"
#...     "his"   "whole day as a speculator, shearing off those woods and making"
#...     "Earth" "bald before her time, he is esteemed an industrious"
#...     "and"   "enterprising citizen. As if a town had no interest in
#...     "its"   "forests but to cut them down!" )
#>>> :is_var_type_matches_glob on_industry "map*" and
#...     print_string "You must get your living by loving."
#You must get your living by loving.
#------------------------------------------
#==========================================
#/---
#function :is_var_type_matches_glob() {
#    # Validate sanity.
#    die_unless_args_2 'expected one variable name and one glob'
#    string var_name__ivtm="${1}" glob__ivtm="${2}"
#    :die_unless_var "${var_name__ivtm}"
#
#    # If such variable exists, match its type against the passed glob.
#    :is_string_matches_glob\
#        "$(get_var_type "${var_name__ivtm}")"\
#        "${glob__ivtm}"
#}
#
## ....................{ TESTERS ~ type                     }....................
#declare_function_with_stdin <<'/---'
#[status: bool] :is_var_float(string var_name)
#
#Report success if the passed variable was declared to be a float.
#/---
#function :is_var_float() {
#    die_unless_arg 'expected one variable name'
#    :is_var_type_matches_glob "${1}" 'float*'
#}
#
#declare_function_with_stdin <<'/---'
#[status: bool] :is_var_integer(string var_name)
#
#Report success if the passed variable was declared to be an integer.
#/---
#function :is_var_integer() {
#    die_unless_arg 'expected one variable name'
#    :is_var_type_matches_glob "${1}" 'integer*'
#}
#
#declare_function_with_stdin <<'/---'
#[status: bool] :is_var_string(string var_name)
#
#Report success if the passed variable was declared to be a string.
#/---
#function :is_var_string() {
#    die_unless_arg 'expected one variable name'
#    :is_var_type_matches_glob "${1}" 'scalar*'
#}
#
#declare_function_with_stdin <<'/---'
#[status: bool] {:is_var_list, is_list}(string var_name)
#
#Report success if the passed variable was declared to be a *list* (i.e.,
#sequential array).
#/---
#function :is_var_list is_list() {
#    die_unless_arg 'expected one variable name'
#    :is_var_type_matches_glob "${1}" '(list|array)*'
#}
#
#declare_function_with_stdin <<'/---'
#[status: bool] {:is_var_map, is_map}(string var_name)
#
#Report success if the passed variable was declared to be a *map* (i.e.,
#associative array).
#/---
#function :is_var_map is_map() {
#    die_unless_arg 'expected one variable name'
#    :is_var_type_matches_glob "${1}" 'association*'
#}
#
#           function_names_die_plural_help="{:die_unless_vars_${var_type}, die_unless_${var_type_plural}}"
#           function_names_test_singular_help="{:is_var_${var_type}, is_${var_type}}"
#           function_names_die_singular_help="{:die_unless_var_${var_type}, die_unless_${var_type}}"

    # If such variable does not exist, throw an exception. See :is_var() for
    # further details.
#   is -n "${(P)var_name__vt+x}" si or
#       die "variable \"${var_name__vt}\" undefined"

    # If such variable is of improper type, throw an exception.
#   is "${(tP)var_name__vt}" == ${~ZESHY_VAR_TYPE_GLOB_'${(U)var_type}'} si or

#FUXME: While the efficiency is appreciated, the extreme reduplication here
#absolutely isn't. Minimize this by dynamically declaring all such functions and
#function documentation. This is surprisingly simpler than you'd think. We'll
#need to iterate on lowercase type, which we uppercase as needed with builtin
#parameter flags. Nothing could be simpler! We can (and should) incorporate list
#and map types into such iteration, which require special handling. Each
#iteration, simply test whether the current type matches "(list|map)" and, if
#so, provide multiple names for such function. Shouldn't be tremendously hard.

# For efficiency, such functions inline their implementations rather than call
# :is_var_type_matches_glob() -- an overly heavyweight if useful tester for
# functions called as commonly as these.

#declare_function_with_stdin <<'/---'
#void :die_unless_var_float(
#    string var_name,
#    string error_message = "variable \"${var_name}\" not a float")
#
#Throw an exception with the passed message unless the passed variable was
#declared to be a float.
#/---
#function :die_unless_var_float() {
#    # Validate sanity.
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string var_name__duvf="${1}"
##
#    # If such variable does not exist, throw an exception. See :is_var() for
#    # further details.
#    is -n "${(P)var_name__duvf+x}" si or
#        die "variable \"${var_name__duvf}\" undefined"
#
#    # If such variable is of improper type, throw an exception. See
#    # :is_var_float() for further details.
#    is "${(tP)var_name__duvf}" == ${~ZESHY_VAR_TYPE_GLOB_INTEGER}* si or
#        die "${2:-variable \"${var_name__duvf}\" not a float but defined as:${ZESHY_ASCII_NEWLINE}$(:print_var "${var_name__duvf}")}"
#}
#
#declare_function_with_stdin <<'/---'
#void :die_unless_var_integer(
#    string var_name,
#    string error_message = "variable \"${var_name}\" not an integer")
#
#Throw an exception with the passed message unless the passed variable was
#declared to be an integer.
#/---
#function :die_unless_var_integer() {
#    # Validate sanity.
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string var_name__duvi="${1}"
#
#    # If such variable does not exist, throw an exception. See :is_var() for
#    # further details.
#    is -n "${(P)var_name__duvi+x}" si or
#        die "variable \"${var_name__duvi}\" undefined"
#
#    # If such variable is of improper type, throw an exception. See
#    # :is_var_integer() for further details.
#    is "${(tP)var_name__duvi}" == 'integer'* si or
#        die "${2:-variable \"${var_name__duvi}\" not an integer but defined as:${ZESHY_ASCII_NEWLINE}$(:print_var "${var_name__duvi}")}"
#}
#
#declare_function_with_stdin <<'/---'
#void :die_unless_var_string(
#    string var_name,
#    string error_message = "variable \"${var_name}\" not a string")
#
#Throw an exception with the passed message unless the passed variable was
#declared to be a string.
#/---
#function :die_unless_var_string() {
#    # Validate sanity.
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string var_name__duvs="${1}"
#
#    # If such variable does not exist, throw an exception. See :is_var() for
#    # further details.
#    is -n "${(P)var_name__duvs+x}" si or
#        die "variable \"${var_name__duvs}\" undefined"
#
#    # If such variable is of improper type, throw an exception. See
#    # :is_var_string() for further details.
#    is "${(tP)var_name__duvs}" == 'scalar'* si or
#        die "${2:-variable \"${var_name__duvs}\" not a string but defined as:${ZESHY_ASCII_NEWLINE}$(:print_var "${var_name__duvs}")}"
#}
#
#declare_function_with_stdin <<'/---'
#void {:die_unless_var_list, die_unless_list}(
#    string var_name,
#    string error_message = "variable \"${var_name}\" not a list")
#
#Throw an exception with the passed message unless the passed variable was
#declared to be a list.
#/---
#function :die_unless_var_list die_unless_list() {
#    # Validate sanity.
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string var_name__duvl="${1}"
#
#    # If such variable does not exist, throw an exception. See :is_var() for
#    # further details.
#    is -n "${(P)var_name__duvl+x}" si or
#        die "variable \"${var_name__duvl}\" undefined"
#
#    # If such variable is of improper type, throw an exception. See
#    # :is_var_list() for further details.
#    is "${(tP)var_name__duvl}" == ('list'|'array')* si or
#        die "${2:-variable \"${var_name__duvl}\" not a list but defined as:${ZESHY_ASCII_NEWLINE}$(:print_var "${var_name__duvl}")}"
#}
#
#declare_function_with_stdin <<'/---'
#void {:die_unless_var_map, die_unless_map}(
#    string var_name,
#    string error_message = "\"${var_name}\" not a map")
#
#Throw an exception with the passed message unless the passed variable was
#declared to be a map.
#/---
#function :die_unless_var_map die_unless_map() {
#    # Validate sanity.
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string var_name__duvm="${1}"
#
#    # If such variable does not exist, throw an exception. See :is_var() for
#    # further details.
#    is -n "${(P)var_name__duvm+x}" si or
#        die "variable \"${var_name__duvm}\" undefined"
#
#    # If such variable is of improper type, throw an exception. See
#    # :is_var_map() for further details.
#    is "${(tP)var_name__duvm}" == 'association'* si or
#        die "${2:-variable \"${var_name__duvm}\" not a map but defined as:${ZESHY_ASCII_NEWLINE}$(:print_var "${var_name__duvm}")}"
#}
#
#
#FUXME: These functions are called commonly enough that their implementations
#should be inlined. :is_var_type_matches_glob() is *FAR* too heavyweight a
#function to call so frequently.

#   die_unless_args_1_to_2\
#       'expected one variable name and optional error message'
#   string var_name__duvm="${1}"
#   is_map "${var_name__duvm}" or
#       die "${2:-\"${var_name__duvm}\" not a map}"

    # Validate sanity.
#   die_unless_args_1_to_2\
#       'expected one variable name and optional error message'
#   string var_name__duvl="${1}"

    #FUXME: Quite helpful; replicate above and elsewhere. Actually, since such
    #code would more-or-less be exact duplicates, extricate into a helper function.

    # If such variable is not a list...
#   is_list "${var_name__duvl}" or
#   die_unless_args_1_to_2\
#       'expected one variable name and optional error message'
#   string var_name__duvs="${1}"
#   :is_var_string "${var_name__duvs}" or
#       die "${2:-variable \"${var_name__duvs}\" not a string}"
#   die_unless_args_1_to_2\
#       'expected one variable name and optional error message'
#   string var_name__duvi="${1}"
#   :is_var_integer "${var_name__duvi}" or
#       die "${2:-variable \"${var_name__duvi}\" not an integer}"

        # If such variable exists, append such variable's current definition to
        # the exception's message.
#       string message=
#       :is_var "${var_name__duvl}" and {
#           message+=" "
#           message+="${ZESHY_ASCII_NEWLINE}original type: $(get_var_type "${var_name__duvl}")"
#       }

        # Throw such exception.
#   :is_var_float "${var_name__duvf}" or
#       die "${2:-\"${var_name__duvf}\" not an float}"
    # Global lists have type "list", local lists "list-local", and zsh-specific
    # global lists (e.g., "${path}") "array" or "array-special".
    # Global maps have type "association" and local maps "association-local".
#By `zsh` precedent, such type is
#of the form `${typename}-${locality}`, where `${typename}` is such type (e.g.,
#`array`, `string`) and `${locality}` is either:
#
#* `global`, if such variable is global.
#* `local`, if such variable is local.
#
#For example:

# :is_var_type_matches_glob "${var_name__duvl}" 'array-local' and message+='hmm!!!!!!!'
#   print -r -- "${(tP)var_name__gvt}"
#       "${glob__ivtm}" or {
#       print_string "variable type not matching \"${glob__ivtm}\": $(get_var_type "${var_name__ivtm}")"
#   }
#FUXME: Add support for function name synonyms to declare_function().
#void :die_unless_var_list [or] die_unless_list(
#void :die_unless_var_list [or] die_unless_list(
#void :die_unless_var_list <or> die_unless_list(
#void :die_unless_var_list OR die_unless_list(
#void :die_unless_var_list --or-- die_unless_list(
#void :die_unless_var_list --OR-- die_unless_list(
#void :die_unless_var_list|die_unless_list(

#string die_unless_list_documentation='  string var_name,
#  string error_message = "\"${var_name}\" not a list")
#
#Throw an exception unless the passed variable is a list.
#'
#
#declare_function "
#void die_unless_list(
#"
