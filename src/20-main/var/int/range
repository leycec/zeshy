#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle integer ranges.
/---

# ....................{ EXCEPTIONS                         }....................
#FIXME: Excise horrible synonym. See below.
declare_function_with_stdin <<'/---'
void {:die_unless_int_at_least,:die_unless_int_exceeds_or_equals}(
    int number, int minimum,
    string error_message = "${number} less than ${minimum}.")

Throw an exception with the passed message unless the first passed integer is
greater than or equal to the second passed integer.
/---
function :die_unless_int_at_least :die_unless_int_exceeds_or_equals() {
    die_unless_args_2_to_3\
        'Expected one integer, one integer minimum, and optional error message.'
    :is_int_at_least "${1}" "${2}" or {
        :string number="${1}" number_minimum="${2}"
        die "${3-${number} less than ${number_minimum}.}"
    }
}

declare_function_with_stdin <<'/---'
void {:die_unless_int_at_most,:die_unless_int_deceeds_or_equals}(
    int number, int maximum,
    string error_message = "${number} greater than ${maximum}.")

Throw an exception with the passed message unless the first passed integer is
less than or equal to the second passed integer.
/---
function :die_unless_int_at_most :die_unless_int_deceeds_or_equals() {
    die_unless_args_2_to_3\
        'Expected one integer, one integer minimum, and optional error message.'
    :is_int_at_most "${1}" "${2}" or {
        :string number="${1}" number_maximum="${2}"
        die "${3-${number} greater than ${number_maximum}.}"
    }
}

declare_function_with_stdin <<'/---'
void :die_unless_int_in_range(
    int number, int minimum, int maximum,
    string error_message = "${number} not in [${minimum}, ${maximum}]}.")

Throw an exception with the passed message unless the passed string is an
integer in the passed range. See :is_int_in_range() for further details.
/---

function :die_unless_int_in_range() {
    die_unless_args_3_to_4\
        'Expected one integer, one integer minimum, one integer maximum, and optional error message.'
    :is_int_in_range "${1}" "${2}" "${3}" or {
        :string number="${1}" number_minimum="${2}" number_maximum="${3}"
        die "${4-${number} not in [${number_minimum}, ${number_maximum}].}"
    }
}

# ....................{ TESTERS                            }....................
#FIXME: Ugh! :is_int_exceeds_or_equals() is simply detestable. Ensure we call
#it nowhere and then excise such nonsense aliases here, above, and below.

declare_function_with_stdin <<'/---'
[status: bool] {:is_int_at_least, :is_int_exceeds_or_equals}(
    int number, int minimum)

Report success if the first passed integer is greater than or equal to the
second passed integer.
/---
function :is_int_at_least :is_int_exceeds_or_equals() {
    # Validate sanity.
    die_unless_args_2 'Expected two integers.'
    :string left="${1}" right="${2}"
    :die_unless_ints "${left}" "${right}"

    # Test such integer.
    (( left >= right ))
}

#FIXME: Ugh! :is_int_deceeds_or_equals() is simply detestable. See above.
declare_function_with_stdin <<'/---'
[status: bool] {:is_int_at_most, :is_int_deceeds_or_equals}(
    int number, int maximum)

Report success if the first passed integer is less than or equal to the second
passed integer.
/---
function :is_int_at_most :is_int_deceeds_or_equals() {
    # Validate sanity.
    die_unless_args_2 'Expected two integers.'
    :string left="${1}" right="${2}"
    :die_unless_ints "${left}" "${right}"

    # Test such integer.
    (( left <= right ))
}

declare_function_with_stdin <<'/---'
[status: bool] :is_int_in_range(int number, int minimum, int maximum)

Report success if the passed integer is in the passed range (i.e., greater than
or equal to the passed minimum and less than or equal to the passed maximum):
e.g.,

.:is_int_in_range()
==========================================
[source]
------------------------------------------
>>> :is_int_in_range 1776 1694 1913 and print_string\
...    "If history shows anything, it is that there's no better way to justify
...     relations founded on violence, to make such relations seem moral, than
...     by reframing them in the language of debt — above all, because it
...     immediately makes it seem that it's the victim who's doing something
...     wrong."
If history shows anything, it is that there's no better way to justify
relations founded on violence, to make such relations seem moral, than
by reframing them in the language of debt — above all, because it
immediately makes it seem that it's the victim who's doing something
wrong.
------------------------------------------
==========================================
/---
function :is_int_in_range() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one integer, one integer minimum, and one integer maximum.'
    :string number="${1}" minimum="${2}" maximum="${3}"
    :die_unless_ints "${number}" "${minimum}" "${maximum}"
    (( minimum <= maximum )) or
        die "Minimum ${minimum} greater than maximum ${maximum}."

    # Test such integer.
    (( minimum <= number && number <= maximum ))
}

# ....................{ GETTERS                            }....................
#FIXME: Rename to get_integers_in_range(). If the passed range is sufficiently
#large, this silently terminates the current shell, which is terrible. This
#appears to be somewhere between 100,000 to 1,000,000 elements. Hence, if such
#range is larger than 100000, just throw an exception. There's really no point
#in ever listing that many integers anyway, so this is a helpful reality check
#as well.
declare_function_with_stdin <<'/---'
int get_integers_in_range(int minimum, int maximum)

List all integers in the passed inclusive range, delimited by spaces: e.g.,

.get_integers_in_range()
==========================================
[source]
------------------------------------------
>>> get_integers_in_range 19450806 19450809
19450806 19450807 19450808 19450809
------------------------------------------
==========================================
/---
function get_integers_in_range() {
    die_unless_args_2 'Expected one minimum integer and one maximum integer.'
    get_integers_in_range_with_step "${1}" "${2}" 1
}

declare_function_with_stdin <<'/---'
int get_integers_in_range_with_step(
    int start, int end, int step)

List all integers in the passed inclusive range incremented by the passed
``step'' starting at the first passed integer and stopping at the second passed
integer, delimited by spaces. See for_integers_in_range_with_step() for further
details: e.g.,

.get_integers_in_range_with_step()
==========================================
[source]
------------------------------------------
>>> get_integers_in_range_with_step1 19551101 19750430 300000
19551101 19581101 19611101 19641101 19671101 19701101 19731101
------------------------------------------
==========================================
/---
function get_integers_in_range_with_step() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one start integer, one end integer, and one step.'
    string start="${1}" end="${2}" step="${3}"
    :die_unless_ints "${start}" "${end}"
    :die_unless_int_nonzero "${step}"

    # If such range exceeds an experimentally (if non-rigorously) verified
    # maximum, throw an exception. Since attempting to make a list of integers
    # in such range induces zsh to silently terminate the current shell,
    # throwing an exception is the lesser of two certain evils.
    (( abs((stop - start) / step) < 100000 )) or
        die "Range [${start}, ${stop}] with step ${step} exceeds zsh limits."

    # Get such integers.
    output_string {${start}..${end}..${step}}
}

# ....................{ ITERATORS                          }....................
declare_function_with_stdin <<'/---'
string for_integers_in_range(
    string integer_name = "INTEGER",
    int minimum,
    int maximum,
    string command)

Run the passed command for each integer in the passed inclusive range in
ascending order, setting the passed local variable (defaulting to `${INTEGER}`)
to each such integer starting at the passed minimum and stopping at the passed
maximum: e.g.,

.for_integers_in_range()
==========================================
[source]
------------------------------------------
>>> for_integers_in_range reconstruction_year 1869 1929\
...     '(( reconstruction_year % 10 )) or output_string ${reconstruction_year}'
1870
1880
1890
1900
1910
1920
------------------------------------------
==========================================
/---
function for_integers_in_range() {
    die_unless_args_3_or_4\
        'Expected optional integer name, one minimum integer, one maximum integer, and one command.'
    if { is_args_3 } {
        for_integers_in_range_with_step "${@[1,2]}" 1 "${3}"
    } else {
        for_integers_in_range_with_step "${@[1,3]}" 1 "${4}"
    }
}

declare_function_with_stdin <<'/---'
string for_integers_in_range_with_step(
    string integer_name = "INTEGER",
    int start,
    int stop,
    int step,
    string command)

Run the passed command for each integer in the passed inclusive range, setting
the passed local variable (defaulting to `${INTEGER}`) to each such integer
incremented by the passed ``step'' starting at the first passed integer and
stopping at the second passed integer. If such step is:

* Positive, the starting integer should be less than or equal to the stopping
  integer. If this is the case, such integers are incremented in ascending
  order; else, this function silently returns without running such command.
* Negative, the starting integer should be greater than or equal to the stopping
  integer. If this is the case, such integers are decremented in descending
  order; else, this function silently returns without running such command.
* Zero, an exception is thrown to avoid an infinite loop.

If such step does _not_ evenly divides the absolute difference of such starting
and stopping integers, the last integer to be visited strictly precedes (i.e.,
is less than but _not_ equal to) such stopping integer. For example:

.for_integers_in_range_with_step()
==========================================
[source]
------------------------------------------
>>> for_integers_in_range_with_step first_plague_year 541 747 42\
...     'output_string ${first_plague_year}'
541
583
625
667
709
>>> for_integers_in_range_with_step second_plague_year 1844 1346 -84\
...     'output_string ${second_plague_year}'
1844
1760
1676
1592
1508
1424
1340
------------------------------------------
==========================================
/---
function for_integers_in_range_with_step() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize changes with get_integers_in_range_with_step().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate sanity. For orthogonality with both the glob operator ".." and
    # common sense, do *NOT* throw an exception if such start exceeds such stop
    # integer and .
    die_unless_args_4_or_5\
        'Expected optional integer name, one starting integer, one stopping integer, one step integer, and one command.'
    :string\
        integer_name='INTEGER'\
        start="${@[-4]}"\
        stop="${@[-3]}"\
        step="${@[-2]}"\
        command="${@[-1]}"
    if { is_args_5 } { integer_name="${1}" }
    :die_unless_var_name "${integer_name}"
    :die_unless_ints "${start}" "${stop}"
    :die_unless_int_nonzero "${step}"
    die_unless_string_nonempty "${command}" 'Expected nonempty command.'

    # If such range is sufficiently small, make and iterate an ordered list of
    # all integers in such range. Practical (if non-rigorous) experimentation
    # demonstrates that making lists an order of magnitude larger induces
    # discernable slowdown and lists at least two orders of magnitude larger
    # termination of the current shell. In either case, the costs are
    # unacceptable. See "BRACE EXPANSION" under "man zshexpn" for further
    # details on the brace operator "..".
    if (( abs((stop - start) / step) <= 10000 )) {
        # Iterate such integers. Since brace operator ".." requires a positive
        # step for prroper iteration, pass the absolute value of such step.
        eval "for ${integer_name} ({${start}..${stop}..$(( abs(step) ))}) {
            ${command}
        }"
    # Else, such range is sufficiently large to require a just-in-time
    # alternative avoiding list construction: namely, for loop iteration.
    #
    # If such step is positive, iterate upwards.
    } elif (( step < 0 )) {
        eval "for ((
            ${integer_name}=${start};
            ${integer_name} <= ${stop};
            ${integer_name}+=${step} )) {
            ${command}
        }"
    # Else, such step is negative; iterate downwards.
    } else {
        eval "for ((
            ${integer_name}=${start};
            ${integer_name} >= ${stop};
            ${integer_name}+=${step} )) {
            ${command}
        }"
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: With yawning horror, I've begun to realize that *ALL* such testers
#should accept a scalar variable rather than a scalar value. After all, 

    # If such step is positive, ensure such start is less than such stop.
#   if (( step > 0 )) {
#       :die_unless_int_at_most "${start}" "${stop}"
    # If such step is negative, ensure such start is greater than such stop.
#   } elif (( step < 0 )) {
#       :die_unless_int_at_least "${start}" "${stop}"
    # Else, such step is zero. To avoid infinite loops, throw an exception.
#   } else {
#       die 'expected nonzero step'
#   }

#(defaulting to `${INTEGER}`) 
#   string start="${1}" end="${2}"
#   :die_unless_ints "${start}" "${end}"

    # Get such integers.
#   output_string {${start}..${end}}

#   string start="${1}" stop="${2}" integer_name='INTEGER' command="${@[-1]}"
#   is_args_4 and key_name="${3}"
#   :die_unless_int_deceeds "${start}" "${stop}"
#   die_unless_string_nonempty "${integer_name}" 'expected nonempty integer name'
#   die_unless_string_nonempty "${command}" 'expected nonempty command'

    # If such range is sufficiently small, make and iterate an ordered list of
    # all integers in such range. Practical (if non-rigorous) experimentation
    # demonstrates that making lists an order of magnitude larger induces
    # discernable slowdown and lists at least two orders of magnitude larger
    # termination of the current shell. In either case, such unacceptable costs
    # must be explicitly avoided.
    #
    # See "BRACE EXPANSION" under "man zshexpn" for further details on the brace
    # operator "..".
#   if (( abs((stop - start) / step) <= 10000 )) {
#       eval "for ${integer_name} ({${start}..${stop}}) {
#           ${command}
#       }"
#   # Else, such range is sufficiently large to require a just-in-time
#   # alternative avoiding list construction: namely, for loop iteration.
#   } else {
#       #FUXME: This only works for *INCREASING* iteration.
#       eval "for ((
#           ${integer_name}:always${start};
#           ${integer_name} <= ${stop};
#           ${integer_name}+=${step} )) {
#           ${command}
#       }"
#   }

    # Iterate such integers. See "BRACE EXPANSION" under "man zshexpn" for
    # further details on the brace operator "..".
#   eval "for ${integer_name} ({${start}..${stop}..${step}}) {
#       ${command}
#   }"

#FUXME: Rename to get_integers_in_range(). Actually, this isn't terribly
#helpful. This function is a poor idea for the same reason that the equivalent
#Python functions were poor ideas. We *REALLY* want an iterator, instead -- say,
#for_integers_in_range(). Note also that we'll want an additional function
#for_integers_in_range_with_step() accepting an additional third integer
#specifying how much to add to the initial integer each increment. How about
#for_integers_in_range_incremented() instead? Nah; I prefer "_with_step", as
#that explicitly specifies a sensible noun. Right. Now, note that
#for_integers_in_range() can simply call
#for_integers_in_range_with_step() with a step of "1". Note also that
#for_integers_in_range_with_step() should be implemented so as to accept the
#start larger than the end *ONLY* if passed a negative step. All around
#sweetness, no?
#FUXME: Poor names, now that I contemplate it. Rename to
#:die_unless_int_greater_than_or_equals() and likewise. Sweet name, no? Ah!
#Actually, there's better: exceeds. What's great is this permits us to employ my
#favorite foundling neologism, deceeds, as its antonym. So, go with:
#:die_unless_int_exceeds_or_equals()
