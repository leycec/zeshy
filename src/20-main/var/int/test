#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *integer testers* (i.e., functions testing integer values).
/---

# ....................{ EXCEPTIONS                         }....................
#FIXME: Actually, this function only matches decimal integers. Hence, rename
#this function to die_unless_decimal() and create a new die_unless_integer()
#function properly matching *ALL* integer strings. Such functions needs to match
#both "0x"- and "16#"-style base prefixes.
declare_function_with_stdin <<'/---'
void die_unless_integer(
    string value,
    string error_message = "\"${value}\" not an integer value.")

Throw an exception with the passed message unless the passed string is an
integer. See is_integer() for further details.
/---
function die_unless_integer() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :string value="${1}"
    is_integer "${value}" or die "${2-\"${value}\" not an integer value.}"
}

declare_function_with_stdin <<'/---'
void die_unless_integers(string value1, ...)

Throw an exception with a stock message unless all passed strings are integers.
See is_integer() for further details.
/---
function die_unless_integers() {
    die_unless_args 'Expected one or more strings.'
    :string value
    for     value ("${@}") { die_unless_integer "${value}" }
}

# ....................{ EXCEPTIONS ~ emptiness             }....................
declare_function_with_stdin <<'/---'
void die_unless_integer_nonzero(
    string integer,
    string error_message = "\"${integer}\" not a nonzero integer value.")

Throw an exception with the passed message unless the passed string is a nonzero
integer. See is_integer_nonzero() for further details.
/---
function die_unless_integer_nonzero() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :string integer="${1}"
    is_integer_nonzero "${integer}" or
        die "${2-\"${integer}\" not a nonzero integer value.}"
}

# ....................{ EXCEPTIONS ~ sign                  }....................
declare_function_with_stdin <<'/---'
void die_unless_integer_positive(
    string integer,
    string error_message = "\"${integer}\" not a positive integer value.")

Throw an exception with the passed message unless the passed string is a
positive integer. See is_integer_positive() for further details.
/---
function die_unless_integer_positive() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :string number="${1}"
    is_integer_positive "${number}" or
        die "${2-\"${number}\" not a positive integer value.}"
}

declare_function_with_stdin <<'/---'
void die_unless_integer_negative(
    string integer,
    string error_message = "\"${integer}\" not a negative integer value.")

Throw an exception with the passed message unless the passed string is a
negative integer. See is_integer_negative() for further details.
/---
function die_unless_integer_negative() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    :string number="${1}"
    is_integer_negative "${number}" or
        die "${2-\"${number}\" not a negative integer value.}"
}

declare_function_with_stdin <<'/---'
void die_unless_integer_nonnegative(
    string integer,
    string error_message = "\"${integer}\" not a nonnegative integer value.")

Throw an exception with the passed message unless the passed string is a
nonnegative integer. See is_integer_nonnegative() for further details.
/---
function die_unless_integer_nonnegative() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    is_integer_nonnegative "${1}" or {
        :string value="${1}"
        die "${2-\"${value}\" not a nonnegative integer value.}"
    }
}

declare_function_with_stdin <<'/---'
void die_unless_integer_nonpositive(
    int value,
    string error_message = "Value \"${integer}\" not a nonpositive integer.")

Throw an exception with the passed message unless the passed integer is
nonpositive. See is_integer_nonpositive() for further details.
/---
function die_unless_integer_nonpositive() {
    die_unless_args_1_to_2\
        'Expected one string and optional error message.'
    is_integer_nonpositive "${1}" or {
        :string value="${1}"
        die "${2-Value \"${value}\" not a nonpositive integer.}"
    }
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] is_integer(string value)

Report success if the passed string is an *integer* (i.e., consists of only an
optional negative sign followed by one or more digits).
/---
function is_integer() {
    # Dismantled, this is:
    #
    # * "(-|)", matching an optional prefixing negative sign.
    # * "<->", matching one or more digits. An obscure, but helpful, zsh-ism.
    die_unless_arg 'Expected one string.'
    is "${1}" == ('-'|)<-> si
}

declare_function_with_stdin <<'/---'
[status: bool] is_integer_nonzero(int value)

Report success if the passed integer is *nonzero* (i.e., any integer except 0).
If such value is _not_ an integer, an exception is thrown.
/---
function is_integer_nonzero() {
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"
    (( value ))
}

# ....................{ TESTERS ~ sign                     }....................
declare_function_with_stdin <<'/---'
[status: bool] is_integer_positive(int value)

Report success if the passed integer is *positive* (i.e., if `value > 0`). If
such value is _not_ an integer, an exception is thrown.
/---
function is_integer_positive() {
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"
    (( value > 0 ))
}

declare_function_with_stdin <<'/---'
[status: bool] is_integer_negative(int value)

Report success if the passed integer is *negative* (i.e., if `value < 0`). If
such value is _not_ an integer, an exception is thrown.
/---
function is_integer_negative() {
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"
    (( value < 0 ))
}

declare_function_with_stdin <<'/---'
[status: bool] is_integer_nonnegative(int value)

Report success if the passed integer is *nonnegative* (i.e., if `value >= 0`).
If such value is _not_ an integer, an exception is thrown.
/---
function is_integer_nonnegative() {
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"
    (( value >= 0 ))
}

declare_function_with_stdin <<'/---'
[status: bool] is_integer_nonpositive(int value)

Report success if the passed integer is *nonpositive* (i.e., if `value <= 0`).
If such value is _not_ an integer, an exception is thrown.
/---
function is_integer_nonpositive() {
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"
    (( value <= 0 ))
}

# ....................{ TESTERS ~ parity                   }....................
declare_function_with_stdin <<'/---'
[status: bool] is_integer_even(int value)

Report success if the passed integer is even. If such value is _not_ an
integer, an exception is thrown.
/---
function is_integer_even() {
    # Validate sanity.
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"

    # Test such parity.
    not (( value & 1 ))
}

declare_function_with_stdin <<'/---'
[status: bool] is_integer_odd(int value)

Report success if the passed integer is odd. If such value is _not_ an
integer, an exception is thrown.
/---
function is_integer_odd() {
    # Validate sanity.
    die_unless_arg 'Expected one integer.'
    :string value="${1}"
    die_unless_integer "${value}"

    # Test such parity.
    (( value & 1 ))
}

declare_function_with_stdin <<'/---'
[status: bool] is_integer_parity_equals(int value1, int value2)

Report success if the passed integers share the same *parity* (i.e., are either
both even or both odd). If either such value is _not_ an integer, an exception
is thrown.
/---
function is_integer_parity_equals() {
    # Validate sanity.
    die_unless_args_2 'Expected two integers.'
    :string value1="${1}" value2="${2}"
    die_unless_integers "${value1}" "${value2}"

    # Test such parity by recalling that two integers share the same parity if
    # and only if their sum is even.
    is_integer_even $(( value1 + value2 ))
}

# --------------------( WASTELANDS                         )--------------------
