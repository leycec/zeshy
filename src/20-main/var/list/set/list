#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *list-based list setters* (i.e., functions setting list variables to the
contents of other list variables).
/---

#FIXME: Most (if not all) inefficient calls to builtin eval() below can be
#replaced by efficient calls to builtin set(): e.g.,
#
#    set -A "${list_name__sltl}" "${@}"
#
#Interestingly, there even exists a variant of the above suitable for setting
#arbitrarily large slices rooted at the *FIRST* element of such array:
#
#    "If +A is used and NAME is an array, the given arguments will
#     replace the initial elements of that array."
#
#Somewhat bizarre, but we could doubtless leverage that *SOMEWHERE*.
#FIXME: Likewise, we believe we've uncovered a technique for dynamically
#setting arbitrary single list items. Note the implementation of
#:set_map_key_to_string(). Now, if we just take that implementation and set and
#change the "key" to be set to the list index one past the current last list
#item, we've effectively implemented a dynamic list appending without eval().
#Nice, eh?

# ....................{ SETTERS                            }....................
#FIXME: Rename to :list.set_to_expansion().
#FIXME: *WAIT*. No need to use coprocesses at all -- which is great, as
#coprocesses are fairly hideous. Just do the following:
#
#* Perform such list assignment in the current shell.
#* If such assignment fails:
#  * Perform such list assignment in a subshell, capturing standard error from
#    such subshell into a string local.
#  * If such string local is nonempty, throw an exception with such standard
#    error.
#  * Else, ignore such list assignment failure. Probably a non-fatal path glob
#    warning (e.g., due to the current user having insufficient permissions to
#    access subdirectories on recursive globbing).
#FIXME: Great example, but somewhat ludicrously long. Split in twain, and shift
#half of it elsewhere.

:func.document <<'/---'
:void set_list_to_evaluation(^:list list_name, :string code)

Set the passed list to the dynamic expansion of the passed code in a *list
context* (i.e., as `( ${code} )`): e.g.,

.set_list_to_evaluation()
==========================================
[source]
------------------------------------------
>>> :list on_struggle=(
...     "To grasp the full enormity of our deterioration, however, consider the"
...     "earliest condition of humanity, without government or property, when we"
...     "wandered as hunter-gatherers. Hobbes surmised that life was then nasty,"
...     "brutish and short. Others assume that life was a desperate unremitting"
...     "struggle for subsistence, a war waged against a harsh Nature with death"
...     "and disaster awaiting the unlucky or anyone who was unequal to the"
...     "challenge of the struggle for existence. Actually, that was all a"
...     "projection of fears for the collapse of government authority over"
...     "communities unaccustomed to doing without it, like the England of
...     "Hobbes during the Civil War. Hobbes' compatriots had already"
...     "encountered alternative forms of society which illustrated other ways"
...     "of life – in North America, particularly – but already these were too"
...     "remote from their experience to be understandable. (The lower orders,"
...     "closer to the condition of the Indians, understood it better and often"
...     "found it attractive. Throughout the seventeenth century, English"
...     "settlers defected to Indian tribes or, captured in war, refused to"
...     "return. But the Indians no more defected to white settlements than"
...     "Germans climb the Berlin Wall from the west.) The \"survival of the"
...     "fittest\" version – the Thomas Huxley version – of Darwinism was a"
...     "better account of economic conditions in Victorian England than it was"
...     "of natural selection, as the anarchist Kropotkin showed in his book"
...     "Mutual Aid, A Factor of Evolution. (Kropotkin was a scientist – a"
...     "geographer – who'd had ample involuntary opportunity for fieldwork"
...     "whilst exiled in Siberia: he knew what he was talking about.) Like most"
...     "social and political theory, the story Hobbes and his successors told"
...     "was really unacknowledged autobiography." )
>>> set_list_to_evaluation on_struggle "'\"'${^on_struggle}'...\"'"
>>> :output_string "${on_struggle[1]}"
"To grasp the full enormity of our deterioration, however, consider the..."
------------------------------------------
==========================================
/---
function set_list_to_evaluation() {
    # Validate sanity.
    die_unless_args_2 'Expected one list name and one list operation.'
    :string list_name__slte="${1}" list_operation__slte="${2}" stderr__slte
    :var.die_unless_type_list "${list_name__slte}"
    die_unless_string_nonempty "${list_operation__slte}"\
        'Expected nonempty list operation.'

    # Set such list. Since such setting tends to return spurious non-zero exit
    # status (e.g., if any globbed path is not readable by the current user),
    # ignore the resulting status. Moreover, since such setting fails to return
    # non-zero exit status on genuine error (e.g., invalid glob qualifiers),
    # capture standard error into a string local to be subsequently tested.
#   :output_string "setting ${list_name__slte}:catch( ${list_operation__slte} ) or ignore_failure"
#   eval ${list_name__slte}'=( '${list_operation__slte}' ) or ignore_failure'
    :run_code_silent_and_set_string_to_stderr_by_coprocess\
        ${list_name__slte}'=( '${list_operation__slte}' ) or ignore_failure'\
        stderr__slte
#   print "${list_name__slte}: ${list_name__slte[*]}\nstderr: ${stderr__slte}"

    # If an error was output, throw an exception given such error.
    if { is_string_nonempty "${stderr__slte}" } {
        # If such error is prefixed by "zsh: ", remove such prefix.
        remove_string_prefix stderr__slte 'zsh: '
        die 'List assignment "'${list_name__slte}'=( '${list_operation__slte}')" invalid:'${ZESHY_ASCII_NEWLINE}${stderr__slte}
    }
}

# ....................{ SETTERS ~ list                     }....................
#FIXME: Rename to :list.set().
#FIXME: Refactor to accept multiple source list names, implemented by simply
#appending all such source lists in the passed order.
#FIXME: Overly long example. Split!

declare_function_with_stdin <<'/---'
:void set_list_to_list(^:list target_list_name, ^:list source_list_name)

Set the passed target to the passed source list (i.e., copy the latter into the
former): e.g.,

.set_list_to_list()
==========================================
[source]
------------------------------------------
>>> :list on_venality on_richard_nixon; on_richard_nixon=(
...    "What we are looking at on all our TV sets is a man who finally, after"
...    "24 years of frenzied effort, became the President of the United States"
...    "with a personal salary of $200,000 a year and an unlimited expense"
...    "account including a fleet of private helicopters, jetliners, armored"
...    "cars, personal mansions and estates on both coasts and control over a"
...    "budget beyond the wildest dream of King Midas... and all the dumb"
...    "bastard can show us, after five years of total freedom to do anything"
...    "he wants with all this power, is a shattered national economy,"
...    "disastrous defeat in a war we could have ended four years ago on far"
...    "better terms than he finally came around to, and a hand-picked personal"
...    "staff put together through five years of screening, whose collective"
...    "criminal record will blow the minds of high-school American History"
...    "students for the next 100 years. Nixon's hand-picked Vice President is"
...    "about to be indicted for Extortion and Bribery; his former campaign"
...    "manager and his former Secretary of Commerce & personal fund-raiser"
...    "have already been indicted for Perjury, two of his ranking campaign"
...    "managers have already pleaded guilty to Obstruction of Justice, the"
...    "White House counsel is headed for prison on more felony counts than I"
...    "have room to list here, and before the trials are finished..." )
>>> set_list_to_list on_presidential_pardons on_richard_nixon
>>> :output_string "${on_venality[1]}"
What we are looking at on all our TV sets is a man who finally, after
------------------------------------------
==========================================
/---
function set_list_to_list() {
    # Validate sanity.
    die_unless_args_2 'Expected one target list name and one source list name.'
    :string list_name_target__sltl="${1}" list_name_source__sltl="${2}"
    :var.die_unless_type_list "${list_name_target__sltl}" "${list_name_source__sltl}"

    # Copy such list.
    eval ${list_name_target__sltl}'=( "${'${list_name_source__sltl}'[@]}" )'
}

#FIXME: Rename to :list.set_reversed().

declare_function_with_stdin <<'/---'
:void set_list_to_list_reversed(
    ^:list target_list_name, ^:list source_list_name)

Set the passed target list to the *reverse* of the passed source list (i.e., to
all list items of the passed source list in the reverse order): e.g.,

.set_list_to_list_reversed()
==========================================
[source]
------------------------------------------
>>> :list politizane politizane_reversed
>>> politizane=( wealth inequality in america )
>>> set_list_to_list_reversed politizane_reversed politizane
>>> :output_string "${politizane_reversed}"
america in inequality wealth
------------------------------------------
==========================================
/---
function set_list_to_list_reversed() {
    # Validate sanity.
    die_unless_args_2 'Expected one target list name and one source list name.'
    :string list_name_target__sltlr="${1}" list_name_source__sltlr="${2}"
    :var.die_unless_type_list "${list_name_target__sltlr}" "${list_name_source__sltlr}"

    # Reverse such list. Dismantled, this is:
    #
    # * "@P", expanding the source list.
    # * "Oa", reversing the order of list expansion.
    eval ${list_name_target__sltlr}'=( "${(Oa@P)list_name_source__sltlr}" )'
}

# ....................{ SETTERS ~ list : set               }....................
#FIXME: Rename to :list.set_difference().

declare_function_with_stdin <<'/---'
:void set_list_to_list_difference(
    ^:list target_list_name,
    ^:list source_left_list_name, ^:list source_right_list_name)

Difference the second and third passed lists into the first. Formally, perform
the asymmetric set difference
`target_list = source_left_list - source_right_list`: e.g.,

.set_list_to_list_difference()
==========================================
[source]
------------------------------------------
>>> list a
>>> list y; y=( slimy things did crawl with legs )
>>> list e; e=( upon the slimy sea )
>>> set_list_to_list_difference a y e
>>> :output_string "${a[@]}"
things did crawl with legs
------------------------------------------
==========================================
/---
function set_list_to_list_difference() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one target list name and two source list names.'
    :string\
        list_name_target__sltld="${1}"\
        list_name_left__sltld="${2}"\
        list_name_right__sltld="${3}"
    :var.die_unless_type_list\
        "${list_name_target__sltld}"\
        "${list_name_left__sltld}"\
        "${list_name_right__sltld}"

    # Difference such lists. Bless your pithy soul, zsh 5.x.x.
    eval ${list_name_target__sltld}'=(
        ${'${list_name_left__sltld}'[@]:|'${list_name_right__sltld}'} )'
}

#FIXME: Rename to :list.set_intersection().

declare_function_with_stdin <<'/---'
:void set_list_to_list_intersection(
    ^:list target_list_name,
    ^:list source_list_name1, ^:list source_list_name2, ...)

Set the passed target list to the intersection of the passed source lists, in
arbitrary order. Specifically, set such target list to the first source list and
for each additional source list, eliminate all elements from the target list not
in such source list. Such intersection is symmetric and hence performed in
arbitrary order. At least two source lists must be passed: e.g.,

.set_list_to_list_intersection()
==========================================
[source]
------------------------------------------
>>> list a
>>> list y; y=( slimy things did crawl with legs )
>>> list e; e=( upon the slimy sea )
>>> list h; a=( and a thousand thousand slimy things )
>>> set_list_to_list_intersection a y e h
>>> print "${h[@]}"
slimy
------------------------------------------
==========================================
/---
function set_list_to_list_intersection() {
    # Validate sanity, popping the last such argument off as the
    # target list name. Hence, all remaining arguments are source list names.
    die_unless_args_3_or_more\
        'Expected one target list name and two or more source list names.'
    :string\
        list_name_target__sltli="${@[1]}"\
        list_name_source1__sltli="${@[2]}"\
        list_name_source2__sltli="${@[3]}"
    :var.die_unless_type_list\
        "${list_name_target__sltli}"\
        "${list_name_source1__sltli}"\
        "${list_name_source2__sltli}"
    shift_args_3

    # Intersect the first two source lists into the target list.
    eval ${list_name_target__sltli}'=(
        ${'${list_name_source1__sltli}'[@]:*'${list_name_source2__sltli}'} )'

    # Intersect each remaining source list with the target list back into the
    # target list. Bless your extreme utility, zsh 5.x.x.
    :string list_name_source__sltli
    for     list_name_source__sltli ("${@}") {
        :var.die_unless_type_list "${list_name_source__sltli}"
        eval ${list_name_target__sltli}'=(
            ${'${list_name_source__sltli}'[@]:*'${list_name_target__sltli}'} )'
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to :list.set_to_code_expanded_by_coprocess(). It's critical we
#inform the caller that we're internally closing and reopening the coprocess.
#Likewise, all functions transitively calling *THIS* function should be
#similarly renamed.
#FUXME: *WAIT*. No need to use coprocesses at all. Just do the following:

# ....................{ SETTERS ~ string                   }....................
#FUXME: Add example.
# declare_function_with_stdin <<'/---'
# void :list.set_to_string(
#     string list_name,
#     string text1, ...)
# 
# Set the passed list to each of the passed strings (in the passed order).
# ------------------------------------------
# ==========================================
# /---
# function :list.set_to_string() {
#     # Validate sanity.
#     die_unless_args_2_or_more 'Expected one list name and one or more strings.'
#     :string list_name__slts="${1}"
#     shift_arg
#     :var.die_unless_type_list "${list_name__slts}"
# 
#     # Set such list to the argument list, now consisting only of such strings.
#     eval ${list_name__slts}'=( "${@}" )'
# }

    # # If only one such character was passed, avoid iteration.
    # :string separator__sltssoc IFS
    # if { is_arg } {
    #     separator__sltssoc="${1}"
    #     :die_unless_char "${separator__sltssoc}"
    #     IFS="${separator__sltssoc}${separator__sltssoc}"
    # # Else, iterate such characters.
    # } else {
    #     for separator__sltssoc ("${@}") {
    #         :die_unless_char "${separator__sltssoc}"
    #         IFS+="${separator__sltssoc}${separator__sltssoc}"
    #     }
    # }

    # For the same reason, specify such separator twice when setting such IFS.
    # :string IFS="${separator__sltssoc}${separator__sltssoc}"

# To avoid string copies, avoid localizing such text.
#FUXME: Rereading "man zshparam", it's fairly clear this is completely wrong.
#${IFS} doesn't provide a means of splitting on one or more characters *UNLESS*
#such characters are either space, tab, or newline. (Not terribly helpful.) We
#should probably simply excise this function.
#FUXME: Happily, this function's (totally broken) implementation leads to an
#optimization for the above :set_list_to_string_split_on_char(). Namely:
#
#* If the passed character is *NOT* whitespace, perform a unique ${IFS}-based
#  solution identical to that used below.
#* Else, defer to :list.set_to_string_split_on_string() as currently above.
#
#Then excise this function entirely.

#declare_function_with_stdin <<'/---'
#void :set_list_to_string_split_on_char_1_or_more(
#    string list_name, string text, character separator)
#
#Split the passed string on one or more of the passed characters into the passed
#list: e.g.,
#
#.:set_list_to_string_split_on_char_1_or_more()
#==========================================
#[source]
#------------------------------------------
#>>> string on_old_age="
#...     I grow old ... I grow old ...
#...     I shall wear the bottoms of my trousers rolled.
#...
#...     Shall I part my hair behind? Do I dare to eat a peach?
#...     I shall wear white flannel trousers, and walk upon the beach.
#...     I have heard the mermaids singing, each to each.
#...
#...     I do not think that they will sing to me."
#>>> list under_inanity
#>>> :set_list_to_string_split_on_char_1_or_more\
#...     under_golden_youth "${on_old_age}" '.'
#>>> print_string "${under_golden_youth[2]}"
# I grow old
#------------------------------------------
#==========================================
#/---
#function :set_list_to_string_split_on_char_1_or_more() {
#    # Validate sanity.
#    die_unless_args_3\
#        'Expected one list name, one string, and one separator character.'
#    string\
#        list_name__sltssoc1om="${1}"\
#        text__sltssoc1om="${2}"\
#        separator__sltssoc1om="${3}"
#    :var.die_unless_type_list "${list_name__sltssoc1om}"
#    :die_unless_char "${separator__sltssoc1om}"
#
#    # Split such string by temporarily setting the internal field separator
#    # (IFS) to such separator and passing read() such string on standard input
#    # via here-string syntax. Dismantled, this is:
#    #
#    # * "IFS...", setting the internal field separator to such character,
#    #   specified twice to prevent whitespace characters from being treated in a
#    #   special manner. (See "IFS" under "man zshparam" for further details.)
#    # * "-r", enabling raw mode, preventing read() from interpreting "\" at line
#    #   ends as line continuations and "\" elsewhere as character escapes.
#    # * "-d ''", preventing read() from halting until reading the entire string.
#    #   By default, read() halts on reading a newline.
#    # * "-A ...", writing all split substrings into such list.
#    # * "<<< ...", passing such string on standard input as a "here document."
#    IFS="${separator__sltssoc1om}${separator__sltssoc1om}"\
#        read -r -d '' -A "${list_name__sltssoc1om}" <<<"${text__sltssoc1om}"
#}

    # If such character does *NOT* constitute whitespace (e.g., newline, space,
    # tab), split such string by .
    # :list.set_to_string_split_on_string "${1}" "${2}" "${separator__sltssoc}"

#, the former
#should implement a unique ${IFS}-based solution identical to that used below.
#In other words, rename this function to :set_list_to_string_split_on_char()
#and delete the above now-redundant :set_list_to_string_split_on_char().

#       token__sltssos="$(get_string_parameter_expansion_token_if_found\
#       "${separator__sltssos}")" } {

#   eval ${list_name__sltsl}'=( "${(@s:'${ZESHY_ASCII_NEWLINE}':)2}" )'
#FUXME: Separate the "split_"-specific setters into a new parcel @{split}.

#Intersect all passed lists excluding the first into the first. Formally, perform
#the symmetric set intersection
#`target_list = source_list_1 & source_list_2 & ...`: e.g.,

# ....................{ SETTERS ~ split : file             }....................
#function set_list_to_file_text_split_on_string() {
#}

#           'append_list "'${list_name__sltssos}'" "${match[1]}"'
#>>> string on_national_bankruptcy="
#...     As the United States goes bankrupt trying to maintain its global empire,
#...     and industrial civilization as a whole slides down the far side of a
#...     dizzying range of depletion curves, it's becoming harder by the day for
#...     Americans to make believe that the old saws of upward mobility and an
#...     ever brighter future have any relevance to their own lives--and yet
#...     those beliefs are central to the psychology, the self-image, and the
#...     worldview of most Americans."
#>>> list a_culture_of_make_believe
#>>> :set_list_to_string_split_on_char_1_or_more\
#...     a_culture_of_make_believe "${on_national_bankruptcy}" '-'
#>>> print_string "${a_culture_of_make_believe[-2]}"
#and yet
#those beliefs are central to the psychology, the self

    # Else if such separator is a single character, split such list by
    # temporarily setting the internal field separator (IFS) to such separator
    # and passing read() such string on standard input as a "here document."
    # Dismantled, this is:
    #
    # * "IFS...", setting the internal field separator to such character,
    #   specified twice to prevent whitespace characters from being treated in a
    #   special manner. (See "IFS" under "man zshparam" for further details.)
    # * "-r", enabling raw mode, preventing read() from interpreting "\" at line
    #   ends as line continuations and "\" elsewhere as character escapes.
    # * "-d ''", preventing read() from halting until reading the entire string.
    #   By default, read() halts on reading a newline.
    # * "-A ...", writing all split substrings into such list.
    # * "<<< ...", passing such string on standard input as a "here document."
#   } elif { :is_char "${separator__sltssos}" } {
#       IFS="${separator__sltssos}${separator__sltssos}"\
#           read -r -d '' -A "${list_name__sltssos}" <<< "${text__sltssos}"
#   }

        # For each shortest substring of such string preceding such separator,
        # append such substring to such list. For generality, escape all glob-
        #FUXME: Generalize into for_string_matches_nongreedily_with_capturing().
#       noop "${(S)text__sltssos//(#b)(*)${separator_escaped__sltssos}/$(\
#           append_list "${list_name__sltssos}" "${match[1]}")}"

        # Escape all PCRE-reserved characters in such separator.
#       string separator_escaped__sltssos
#       separator_escaped__sltssos="$(escape_string ${separator__sltssos})"
#           (#b)(*)"${separator_escaped__sltssos}"\

        # Append each split substring to such list. Since the prior conditional
        # failed, such separator is a string of length at least two and hence
        # must be negated with a negative lookahead assertion rather than a
        # negative character class. Since glob syntax does not support such
        # assertions, resort to to a PCRE.
#       for_string_text_matching_pcre: "${text__sltssos}"\
#           "(.*?)${separator_escaped__sltssos}" -s\
#           'append_list "'${list_name__sltssos}'" "${match[1]}"'

    #FUXME: Implement this with PCRE-based iteration.
        # Append each split substring to such list. Since the prior conditional
        # failed, such separator is a string of length at least two and hence
        # must be negated with a negative lookahead assertion rather than a
        # negative character class. Since glob syntax does not support such
        # assertions, resort to to a PCRE. Dismantled, this is:
        # * "(...)*", capturing each substring preceding such separator to
        #   "${match[1]}" with:
        #   * "(?:(?!...).)*", matching the longest substring *NOT* containing
        #     such separator.
#           "((?:(?!${separator_escaped__sltssos}).)*)${separator_escaped__sltssos}"

#       noop "${text__sltssos//${separator__sltssos}/${list_name__sltssos}
#           )}"
        #FUXME: Implement a new function for_string_matches_glob() and call here.
        #FUXME: Fairly certain this is more efficiently implementable as follows:
        #IFS="${separator__sltssos}" 
    #FUXME: If get_string_parameter_expansion_token_if_found() returns false
    #(as occurs when such string contains all possible tokens), this function
    #throws an exception. Ideally, we would test for failure and, in such case,
    #defer to an external split command or more expensive zsh technique. If all
    #else fails, couldn't we implement this with PCRE-based iteration?
    #Naturally, we'd need to escape the passed separator... but, that doesn't
    #seem particularly difficult.

    #FUXME: O.K.; if the passed separator is only a single character, we can always
    #reliably use IFS to split strings. Else, we'll need to use the above PCRE
    #solution. The most efficient way to use IFS is as follows:
    #    read -r -d '' -A "${list_name__sltssos}" <<< "${text__sltssos}"
    #FUXME: Reliably restoring the IFS requires use of a loop. I'm thinking we
    #want a new set of functions reliably setting and restoring the IFS, yes?
    #We'll want to replace all current IFS uses with such functions, naturally.

# Dismantled, this is:
    # * "(@P)list_name_left", expanding all elements of the first passed list.
    # * ":|", excluding all elements of the second passed list.
    # Dismantled,
    # this is:
    #
    # * "${...:*...}", performing the symmetric set intersection of:
    #   * "(@P)1", the first source list.
    #   * "${2}", the name of the second source list.
#FUXME: An extraordinarily silly over-complexification obfuscating the simple,
#underlying implementation and damaging overall efficiency. Excise!
#declare_function_with_stdin <<'/---'
#void set_list_to_evaluation(string list_name, string code)
#
#Set the passed list to the dynamic evaluation of the passed code in a list
#context (i.e., in an expression resembling `( ${code} )`): e.g.,
#
#.set_list_to_evaluation()
#==========================================
#[source]
#------------------------------------------
#>>> list ndaa
#>>> set_list_to_evaluation ndaa ''${(z)$(uname -a)}''
#>>> print_string "${ndaa[-1]}"
#GNU/Linux
#------------------------------------------
#==========================================
#/---
#function set_list_to_evaluation() {
#    # Validate sanity.
#    die_unless_args_2 'expected one list name and one code snippet'
#    string list_name__slte="${1}"
#    :var.die_unless_type_list "${list_name__slte}"
#
#    # Set such list.
#   print_string "set list ${list_name__slte}:catch( ${2} )"
#    eval "${list_name__slte}:catch( ${2} )"
#}

#FUXME: Rename to set_strings_to_string_split_on_string(). More readable and
#in keeping with nomenclature elsewhere.
#FUXME: Shift to "variable/string/separator".
    # If such delimiter contains no caret, efficiently default the split token
    # to a caret. Since caret is usually the least common punctuation character,
    # this condition is more likely to succeed than conditions on more common
    # punctuation characters and hence is optimized for the common case.
#   if { not is_string_contains "${separator__sltssod}" '^' } {
#       split_token__sltssod='^'
    #FUXME: This *GREAT* algorithm should be generalized into an external function.
    #It's insanely useful elsewhere, as I recently discovered in repeat_string().
    #See such function for documentation on doing so.
    #FUXME: For efficiency, globalize ${split_tokens__sltssod} into a global list.
    # Else, such delimiter contains a caret. To efficiently find the first
    # possible split token not already contained in such delimiter:
    #
    # * Define a list containing each possible split token as a list element.
    # * Split such string on characters into a list set, thus containing each
    #   unique character of such delimiter in arbitrary order.
    # * Difference the latter from the former list into a third list, thus
    #   containing each possible split token *NOT* a unique character of such
    #   delimiter.
    # * Arbitrarily select the first element of this third list as the split
    #   token. (Any element would do, but the first is... first!)
    #
    # This is considerably more efficient than iterative searching for the first
    # non-contained split token. In any case, this condition should rarely (if
    # ever) trigger.
#   } else {
        # List of all possible split tokens, excluding caret (which such string
        # has already been shown to contain).
#       list split_tokens__sltssod; split_tokens__sltssod=(
#           ',' '.' ';' ':' '~' '`' "'" '"' '=' '+' '@' '#' '$' '%' '-' '&' '*'
#           '-' '_' '\' '|' '/' '?'
#       )

        # List set of all unique delimiter characters. Only this list need be a
        # list set (i.e., no other lists need be list sets).
#       list_set separator_chars__sltssod
#       set_list_to_string_characters\
#           separator_chars__sltssod "${separator__sltssod}"

        # Difference the latter from the former into a third list.
#       list split_tokens_available__sltssod
#       set_list_to_list_difference\
#           split_tokens_available__sltssod\
#           split_tokens__sltssod\
#           separator_chars__sltssod

        # If no split token is available (i.e., the passed delimiter contains
        # all possible split tokens, an insane feat worthy of jeering applause),
        # throw an exception.
#       die_unless_list_nonempty split_tokens_available__sltssod\
#           "delimiter \"${separator__sltssod}\" contains all possible punctuation and hence split tokens"

        # Arbitrarily select the first available split token.
#       split_token__sltssod="${split_tokens_available__sltssod[1]}"
#   }

    # If the passed delimiter is a colon, delimit such delimiter by periods.
#   split_token__sltssod=''
#   if is_string_contains "${delimiter__sltssod}" ':'; then
#       set_list_to_evaluation "${list_name__sltssod}" '${(s.:.)text__sltssod}'
    # Otherwise, delimit such delimiter by colons.
#   else
#       set_list_to_evaluation "${list_name__sltssod}"\
#           "\${(s:${delimiter__sltssod}:)text__sltssod}"
#   fi
#   :die_unless_char delimiter__sltssod
#FUXME: Generalize to strings longer than one character. Surely this is feasible
#with an iterative PCRE, no?
# string set_list_to_string_words(string list_name, string text)
#
# Split the passed string on words into the passed list. Since zsh supports list-
# style character indexing and slicing out of the box, this function is useful
# only where explicit list types are required: e.g.,
#
#     >>> list words
#     >>> set_list_to_string_words words 'Time held me green and dying'
#     >>> print_string ${words[1]} ${words[4]} ${words[5]}
#     Time green dying
#function set_list_to_string_words() {
    # Validate sanity.
#    die_unless_args_2 'expected one list name and one string'
#    string list_name="${1}" __text__="${2}"
#    :var.die_unless_type_list "${list_name}"

    # Split with parameter expansion flag "(z)".
#    set_list_to_evaluation "${list_name}" '${(z)__text__}'
#}
