#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *list iterators* (i.e., functions iterating list elements).
/---

# ....................{ ITERATORS                          }....................
declare_function_with_stdin <<'/---'
[stdout: string, stderr: string, status: integer]
    for_list_items_sorted_lexically_ascending(
        string list_name,
        string element_name = "ELEMENT",
        string command)

Run the passed command for each element of the passed list in lexical ascending
order, setting the passed local variable (defaulting to `${ELEMENT}`) to each
such element: e.g.,

.for_list_items_sorted_lexically_ascending()
==========================================
[source]
------------------------------------------
>>> list on_doublethink; on_doublethink=(
...     "His mind slid away into the labyrinthine world of doublethink. To know"
...     "and not to know, to be conscious of complete truthfulness while"
...     "telling carefully constructed lies, to hold simultaneously two"
...     "opinions which cancelled out, knowing them to be contradictory and"
...     "believing in both of them, to use logic against logic, to repudiate"
...     "morality while laying claim to it, to believe that democracy was"
...     "impossible and that the Party was the guardian of democracy, to forget,"
...     "whatever it was necessary to forget, then to draw it back into memory"
...     "again at the moment when it was needed, and then promptly to forget it"
...     "again, and above all, to apply the same process to the process itself"
...     "— that was the ultimate subtlety; consciously to induce"
...     "unconsciousness, and then, once again, to become unconscious of the act"
...     "of hypnosis you had just performed. Even to understand the word
...     "'doublethink' involved the use of doublethink." )
>>> for_list_items_sorted_lexically_ascending on_doublethink doublethought\
...     ':is_string_matches_glob "${doublethought}" [aoeui]* and
...         :output_string "${doublethought}"'
and not to know, to be conscious of complete truthfulness while
again, and above all, to apply the same process to the process itself
again at the moment when it was needed, and then promptly to forget it
impossible and that the Party was the guardian of democracy, to forget,
of hypnosis you had just performed. Even to understand the word
opinions which cancelled out, knowing them to be contradictory and
unconsciousness, and then, once again, to become unconscious of the act
------------------------------------------
==========================================
/---
function for_list_items_sorted_lexically_ascending() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize changes to for_list_items_sorted_lexically_descending().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate passed arguments.
    die_unless_args_2_to_3\
        'expected one list name, optional element name, and one command'
    string\
        list_name__flesla="${1}"\
        element_name__flesla='ELEMENT'\
        command__flesla="${@[-1]}"
    is_args_3 and element_name__flesla="${2}"
    :die_unless_var_list "${list_name__flesla}"
    :die_unless_var_name "${element_name__flesla}"
    die_unless_string_nonempty "${command__flesla}" 'expected nonempty command'

    # Iterate such elements. For efficiency, evaluate once rather than on each
    # iteration. When paired with flag "v", flag "o" iterates all keys and
    # values and not simply keys in lexically ascending order. Since such
    # iteration is entirely unhelpful, there exists no corresponding
    # for_map_element_value_pairs_with_keys_sorted_lexically_ascending().
    eval "for ${element_name__flesla} (\"\${(o)${list_name__flesla}}\") {
        ${command__flesla}
    }"
}

declare_function_with_stdin <<'/---'
string for_list_items_sorted_lexically_descending(
    string list_name,
    string element_string_name = "ELEMENT",
    string command)

Run the passed command for each element of the passed list in lexical descending
order, setting the passed local variable (defaulting to `${ELEMENT}`) to each
such element: e.g.,

.for_list_items_sorted_lexically_descending()
==========================================
[source]
------------------------------------------
>>> list on_newspeak; on_newspeak=(
...     "It's a beautiful thing, the destruction of words. Of course the great"
...     "wastage is in the verbs and adjectives, but there are hundreds of"
...     "nouns that can be got rid of as well. It isn't only the synonyms; there"
...     "are also the antonyms. After all, what justification is there for a"
...     "word which is simply the opposite of some other word? A word contains"
...     "its opposite in itself. Take \"good\", for instance. If you have a word"
...     "like \"good\", what need is there for a word like \"bad\"? \"Ungood\""
...     "will do just as well — better, because it's an exact opposite, which"
...     "the other is not. Or again, if you want a stronger version of \"good\","
...     "what sense is there in having a whole string of vague useless words"
...     "like \"excellent\" and \"splendid\" and all the rest of them?"
...     "\"Plusgood\" covers the meaning, or \"doubleplusgood\" if you want
...     "something stronger still. Of course we use those forms already, but in"
...     "the final version of Newspeak there'll be nothing else. In the end the"
...     "whole notion of goodness and badness will be covered by only six words"
...     "— in reality, only one word. Don't you see the beauty of that,"
...     "Winston?" )
>>> for_list_items_sorted_lexically_descending on_newspeak newspoken\
...     ':is_string_matches_glob "${newspoken}" w* and
...         :output_string "${newspoken}"'
word which is simply the opposite of some other word? A word contains
will do just as well — better, because it's an exact opposite, which
whole notion of goodness and badness will be covered by only six words
what sense is there in having a whole string of vague useless words
wastage is in the verbs and adjectives, but there are hundreds of
------------------------------------------
==========================================
/---
function for_list_items_sorted_lexically_descending() {
    # See for_list_items_sorted_lexically_ascending() for further details.
    die_unless_args_2_to_3\
        'expected one list name, optional element name, and one command'
    string\
        list_name__flesla="${1}"\
        element_name__flesla='ELEMENT'\
        command__flesla="${@[-1]}"
    is_args_3 and element_name__flesla="${2}"
    :die_unless_var_list "${list_name__flesla}"
    :die_unless_var_name "${element_name__flesla}"
    die_unless_string_nonempty "${command__flesla}" 'expected nonempty command'
    eval "for ${element_name__flesla} (\"\${(O)${list_name__flesla}}\") {
        ${command__flesla}
    }"
}

# --------------------( WASTELANDS                         )--------------------
