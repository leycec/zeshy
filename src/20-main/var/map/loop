#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'-/-'
Handle *map iterators* (i.e., functions iterating map keys and/or values).
-/-

# ....................{ ITERATORS                          }....................
declare_function_with_stdin <<'/---'
string for_map_key_value_pairs(
    string map_name,
    string key_string_name = "KEY",
    string value_string_name = "VALUE",
    string command)

Run the passed command for each key of the passed map in arbitrary order,
setting the first passed local variable (defaulting to `${KEY}`) to each such
key and the second passed local variable (defaulting to `${VALUE}`) to the
value for such key: e.g.,

.for_map_key_value_pairs()
==========================================
[source]
------------------------------------------
>>> map on_flesh; on_flesh=(
...     '"Imagine,"' 'he said,'
...     '"All'       'the flesh that is eaten'
...     'The teeth'  'tearing into it'
...     'The tongue' 'tasting it''s savour'
...     'And'        'the hunger for that taste'
...     'Now'        'take away that flesh," he said,'
...     '"Take'      'away the teeth and the tongue'
...     'The taste'  'and the hunger'
...     'Take'       'away everything as it is'
...     'That'       'was my plan'
...     'My'         'own special plan for this world"' )
>>> for_map_key_value_pairs on_flesh laughter screams\
...     'is_string_prefix "${laughter}" "The" and
...         :string.output "${laughter} -- ${screams}"'
The teeth -- tearing into it
The tongue -- tasting it's savour
The taste -- and the hunger
------------------------------------------
==========================================
/---
function for_map_key_value_pairs() {
    # Validate passed arguments.
    die_unless_args_2_to_4\
        'expected one map name, optional key name, optional value name, and one command'
    string\
        map_name__fmkvp="${1}"\
        key_name__fmkvp='KEY'\
        value_name__fmkvp='VALUE'\
        command__fmkvp="${@[-1]}"
    is_args_3_to_4 and key_name__fmkvp="${2}"
    is_args_4    and value_name__fmkvp="${3}"
    :var.die_unless_type_map "${map_name__fmkvp}"
    :die_unless_var_names "${key_name__fmkvp}" "${value_name__fmkvp}"
    die_unless_string_nonempty "${command__fmkvp}" 'expected nonempty command'

    # Iterate such pairs. For efficiency, evaluate once rather than on each
    # iteration.
    eval "
    string ${key_name__fmkvp} ${value_name__fmkvp}
    for    ${key_name__fmkvp} ${value_name__fmkvp} (
        \"\${(kv@)${map_name__fmkvp}}\") {
        ${command__fmkvp}
    }"
}

# ....................{ ITERATORS ~ key                    }....................
declare_function_with_stdin <<'/---'
string for_map_keys(
    string map_name,
    string key_string_name = "KEY",
    string command)

Run the passed command for each key of the passed map in arbitrary order,
setting the passed local variable (defaulting to `${KEY}`) to each such key:
e.g.,

.for_map_keys()
==========================================
[source]
------------------------------------------
>>> map on_this_world; on_brainless_beacons=(
...     "When everyone"   "you have ever loved is finally gone"
...     "When everything" "you have ever wanted is finally done with"
...     "When all"        "of your nightmares are for a time obscured"
...     "As"              "by a shining brainless beacon"
...     "Or a blinding"   "eclipse of the many terrible shapes of this world"
...     "When you"        "are calm and joyful"
...     "And"             "finally entirely alone"
...     "Then"            "in a great new darkness"
...     "You"             "will finally execute your special plan" )
>>> for_map_keys on_brainless_beacons tiny_limbs\
...     'is_string_prefix "${tiny_limbs}" "When" and
...         :string.output "${tiny_limbs} -- ${on_this_world[${tiny_limbs}]}"'
When everyone -- you have ever loved is finally gone
When everything -- you have ever wanted is finally done with
When all -- of your nightmares are for a time obscured
When you -- are calm and joyful
------------------------------------------
==========================================
/---
function for_map_keys() {
    # Validate passed arguments.
    die_unless_args_2_to_3\
        'expected one map name, optional key name, and one command'
    string map_name__fmk="${1}" key_name__fmk='KEY' command__fmk="${@[-1]}"
    is_args_3 and key_name__fmk="${2}"
    :var.die_unless_type_map "${map_name__fmk}"
    :die_unless_var_name "${key_name__fmk}"
    die_unless_string_nonempty "${command__fmk}" 'expected nonempty command'

    # Iterate such keys. For efficiency, evaluate once rather than on each
    # iteration.
    eval "
    string ${key_name__fmk}
    for    ${key_name__fmk} (\"\${(k@)${map_name__fmk}}\") {
        ${command__fmk}
    }"
}

#FIXME: Actually, we *CAN* implement a comparable
#for_map_key_value_pairs_with_keys_sorted_lexically_ascending(). Such function
#should simply defer to this function, preceding the passed command in the
#loop body with something simply resembling:
#     ${value_name__fmkvpwksla}:catch\"\${${map_name__fmkvpwksla}[\${(P)key_name__fmkvpwksla}]}\"

# Sadly, implementing a comparable
# for_map_key_value_pairs_with_keys_sorted_lexically_ascending() is currently
# infeasible. See the function body for further details.
declare_function_with_stdin <<'/---'
string for_map_keys_sorted_lexically_ascending(
    string map_name,
    string key_string_name = "KEY",
    string command)

Run the passed command for each key of the passed map in lexical ascending
order, setting the passed local variable (defaulting to `${KEY}`) to each
such key: e.g.,

.for_map_keys_sorted_lexically_ascending()
==========================================
[source]
------------------------------------------
>>> map on_going_home; on_going_home=(
...     "Even"  "while I dreamed I prayed that what I saw was only fear and"
...     "no"    "foretelling, for I saw the last known landscape destroyed for"
...     "the"   "sake of the objective, the soil bludgeoned, the rock blasted."
...     "Those" "who had wanted to go home would never get there now." )
>>> for_map_keys_sorted_lexically_ascending on_going_home far_distance\
...     ':is_string_matches_glob "${far_distance}" [Tt]h* and
...         :string.output "${far_distance} / ${on_going_home[${far_distance}]}"'
the / sake of the objective, the soil bludgeoned, the rock blasted.
Those / who had wanted to go home would never get there now.
------------------------------------------
==========================================
/---
function for_map_keys_sorted_lexically_ascending() {
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize all changes to for_map_keys_sorted_lexically_descending().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # Validate passed arguments.
    die_unless_args_2_to_3\
        'expected one map name, optional key name, and one command'
    string\
        map_name__fmksla="${1}"\
        key_name__fmksla='KEY'\
        command__fmksla="${@[-1]}"
    is_args_3 and key_name__fmksla="${2}"
    :var.die_unless_type_map "${map_name__fmksla}"
    :die_unless_var_name "${key_name__fmksla}"
    die_unless_string_nonempty "${command__fmksla}" 'expected nonempty command'

    # Iterate such keys. For efficiency, evaluate once rather than on each
    # iteration. When paired with flag "v", flag "o" iterates all keys and
    # values and not simply keys in lexically ascending order. Since such
    # iteration is entirely unhelpful, there exists no corresponding
    # for_map_key_value_pairs_with_keys_sorted_lexically_ascending().
    eval "
    string ${key_name__fmksla}
    for    ${key_name__fmksla} (\"\${(ok@)${map_name__fmksla}}\") {
        ${command__fmksla}
    }"
}

declare_function_with_stdin <<'/---'
string for_map_keys_sorted_lexically_descending(
    string map_name,
    string key_string_name = "KEY",
    string command)

Run the passed command for each key of the passed map in lexical descending
order, setting the passed local variable (defaulting to `${KEY}`) to each
such key: e.g.,

.for_map_keys_sorted_lexically_descending()
==========================================
[source]
------------------------------------------
>>> map on_the_objective; on_the_objective=(
...     "I"      "visited the offices where for the sake of the objective"
...     "the"    "planners planned at blank desks set in rows. I visited the"
...     "loud"   "factories where the machines were made that would drive"
...     "ever"   "forward toward the objective. I saw the forest reduced to"
...     "stumps" "and gullies; I saw the poisoned river, the mountain cast"
...     "into"   "the valley; I came to the city that nobody recognized because"
...     "it"     "looked like every other city. I saw the passages worn"
...     "by"     "the unnumbered footfalls of those whose eyes were fixed"
...     "upon"   "the objective." )
>>> for_map_keys_sorted_lexically_descending on_the_objective forgotten\
...     ':is_string_matches_glob "${forgotten}" [Ii]* and
...         :string.output "${forgotten} / ${on_the_objective[${forgotten}]}"'
I / visited the offices where for the sake of the objective
into / the valley; I came to the city that nobody recognized because
it / looked like every other city. I saw the passages worn
------------------------------------------
==========================================
/---
function for_map_keys_sorted_lexically_descending() {
    # See for_map_keys_sorted_lexically_ascending() for further details.
    die_unless_args_2_to_3\
        'expected one map name, optional key name, and one command'
    string\
        map_name__fmksld="${1}"\
        key_name__fmksld='KEY'\
        command__fmksld="${@[-1]}"
    is_args_3 and key_name__fmksld="${2}"
    :var.die_unless_type_map "${map_name__fmksld}"
    :die_unless_var_name "${key_name__fmksld}"
    die_unless_string_nonempty "${command__fmksld}" 'expected nonempty command'
    eval "
    string ${key_name__fmksld}
    for    ${key_name__fmksld} (\"\${(Ok@)${map_name__fmksld}}\") {
        ${command__fmksld}
    }"
}

# --------------------( WASTELANDS                         )--------------------
