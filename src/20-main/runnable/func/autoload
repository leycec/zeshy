#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *autoloadable functions* (i.e., functions defined in a just-in-time (JIT)
manner on the first call to such functions).

== See Also ==

* Section ``AUTOLOADING FUNCTIONS'' of `man zshmisc`, reference documentation
  for function autoloading.
/---

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_function_autoloadable(
    string function_name,
    string error_message =
        "Function ${function_name}() already defined or not found in the current \$\{FPATH\}.")

Throw an exception with the passed message unless the passed function is
autoloadable. See :is_func_autoloadable() for further details.
/---
function die_unless_function_autoloadable() {
    die_unless_args_1_to_2\
        'Expected one function name and optional error message.'
    :string function_name="${1}"
    :is_func_autoloadable "${function_name}" or die\
        "${2-Function ${function_name}() already defined or not found in the current \$\{FPATH\}.}"
}

declare_function_with_stdin <<'/---'
void :die_unless_functions_autoloadable(string function_name1, ...)

Throw an exception with a stock message unless all passed functions are
autoloadable. See :is_func_autoloadable() for further details.
/---
function :die_unless_functions_autoloadable() {
    die_unless_args_1_to_2\
        'Expected one function name and optional error message.'
    :is_func_autoloadable "${@}" or {
        :string function_name
        for     function_name ("${@}") {
            :die_unless_function_autoloadable "${function_name}"
        }
    }
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_func_autoloadable(string function_name1, ...)

Report success if all passed functions are *autoloadable* (i.e., are currently
undefined _and_ found in the current function path ${FPATH}, typically in a file
of the same name in a directory in such list). See section ``AUTOLOADING
FUNCTIONS'' of `man zshmisc` for further details.
/---
function :is_func_autoloadable() {
    # Validate sanity.
    die_unless_args 'Expected one or more function names.'

    # While zsh provides no explicit means of testing autoloadability
    # idempotently (i.e., without side effects), it *DOES* provide a means of
    # doing so non-idempotently (i.e., with side effects). Since such side
    # effects are undetectably reversible, we fake an idempotent test by first
    # performing a non-idempotent test and then undoing the side effects of such
    # test. This is rather obtuse, but the best we can currently do.
    #
    # To simplify such logic, note that if any such function is already defined
    # such function is *NOT* autoloadable. In such case, report failure.
    if { :func.is "${@}" } {
        report_failure
    # Else, all such functions are undefined, implying such functions may be
    # safely undefined if autoload() defines such functions.
    } else {
        # Attempt to define all such functions via ${PATH}, reporting:
        #
        # * Success if all such functions were both undefined and autoloadable.
        # * Failure otherwise, in which case autoload() prints an ignorable
        #   error to standard error.
        #
        # Since such code is guaranteed to throw no exception, undo such
        # definitions with a low-level zsh rather than high-level zeshy
        # exception handler (e.g., ":try{...}").
        {
            { autoload +X -- "${@}" } :silent and report_status
        # In either case, undefine all functions defined by autoload() above.
        } always {
            :undefine_func "${@}"
        }
    }
}

# ....................{ AUTOLOADERS                        }....................
declare_function_with_stdin <<'/---'
void autoload_function(string function_name1, ...)

Autoload the passed previously undefined functions. This function defines each
such function to load its true definition from the current function path on the
first call to such function. If such functions are non-`zeshy` `zsh` functions,
consider calling :autoload_function_zsh() instead to ensure expected behaviour.
See :is_func_autoloadable() for further details.
/---
function autoload_function() {
    # Validate sanity. Since autoload() fails to report failure when some such
    # function is not autoloadable, do so before such call.
    die_unless_args 'Expected one or more function names.'
    :die_unless_functions_autoloadable "${@}"

    # Autoload such function. Since such function is assumed to conform to zeshy
    # rather than zsh standards, avoid passing option "-U" suppressing alias
    # expansion. Dismantled, this is:
    #
    # * "-z", forcing zsh- rather than ksh-style autoloads and hence ignoring
    #   shell option "ksh_autoload".
    #
    # See :autoload_function_zsh() for further details.
    autoload -z -- "${@}"
}

# ....................{ AUTOLOADERS ~ zsh                  }....................
#FIXME: Add example demonstrating the need to call functions autoloaded in this
#manner with run_code_under_zsh_defaults().

declare_function_with_stdin <<'/---'
void :autoload_function_zsh(string function_name1, ...)

Autoload all passed previously undefined non-`zeshy` `zsh` functions. Since such
functions will be both loaded and called under *`zsh` emulation* (i.e., default
`zsh` options and traps), only pass non-`zeshy` `zsh` functions to this function
(typically, autoloadable functions bundled with `zsh` itself). See
:autoload_function() for further details.

== Caveats ==

*Non-`zeshy` functions are only safely callable when passed to
run_code_under_zsh_defaults().* Nearly all such functions assume standard `zsh`
options and traps (particularly the lack of a ZERR trap throwing exceptions on
nonzero exit status) and hence _cannot_ be safely called in the same manner as
conventional `zeshy` functions.
/---
function :autoload_function_zsh() {
    # Validate sanity.
    die_unless_args 'Expected one or more function names.'
    :die_unless_functions_autoloadable "${@}"

    # Autoload such functions.
    ::autoload_function_zsh_unsafe "${@}"
}

declare_function_with_stdin <<'/---'
void ::autoload_function_zsh_unsafe(string function_name1, ...)

Autoload all passed previously undefined non-`zeshy` `zsh` functions _without_
checking whether such functions are autoloadable. This function circumvents
inefficiencies in the current implementation of
:die_unless_functions_autoloadable(), but should _only_ be passed functions
guaranteed to be autoloadable. See :autoload_function_zsh() for further details.
/---
function ::autoload_function_zsh_unsafe() {
    # Validate sanity.
    die_unless_args 'Expected one or more function names.'

    # Autoload such non-zeshy functions. Dismantled, this is:
    #
    # * "-U", suppressing alias expansion. For safety, this prevents expansion
    #   of zeshy aliases when declaring core zsh functions implemented with no
    #   such aliases in mind.
    # * "z", forcing zsh- rather than ksh-style autoloads and hence ignoring
    #   shell option "ksh_autoload".
    #
    # Ideally, such functions would be autoloaded under "sticky" zsh emulation,
    # ensuring such functions would be both loaded and called as zsh functions
    # (e.g., with default zsh options and traps). Unfortunately, doing so is
    # only partially feasible. The following command ensures such functions
    # would be both loaded and called with default zsh options but *NOT* traps:
    #
    #     emulate -R zsh -c "autoload -Uz -- ${(q)*}"
    #
    # Attempting to pass option -L to localize traps as well fails with error
    # "emulate: option -L incompatible with -c". Until such issues are resolved,
    # there remains no benefit to only partially emulating a zsh environment --
    # particularly as there exist other significant issues with doing so:
    #
    # * Functions autoloaded under emulation are specific to the current
    #   function and hence undefined on such function returning. Ensuring such
    #   functions remain callable thus requires converting this function into an
    #   alias accepting multiple arguments -- a nontrivial zeshy feature.
    # * Even converting this function into such an alias would probably *NOT*
    #   suffice to allow autoloaded zsh functions to be called globally (e.g.,
    #   from the CLI, other functions, or other scripts), thus rendering such
    #   autoloading largely useless. (After all, the principal benefit of
    #   autoloading functions is to obviate the need to explicitly load the
    #   script defining such function prior to calling such function).
    #
    # In short, this function will probably *NEVER* autoload zsh functions under
    # "sticky" emulation.
    autoload -Uz -- ${@}
    # print "autoloading: ${(q)@}"
}

# ....................{ STARTUP                            }....................
# Autoload zsh module-defined functions at the beginning rather than end of
# zeshy startup, thus avoiding errors when subsequent zeshy startup functions
# call such functions.
#
# Unlike zsh modules, do *NOT* autoload stock zsh functions before sourcing the
# zeshy codebase. For both efficiency and robustness, top-level zeshy functions
# should *NEVER* call autoloadable zsh functions requiring zsh emulation.
run_hook_on_zeshy_startup_first ::startup_zeshy_autoload_functions_zsh

declare_function_with_stdin <<'/---'
void ::startup_zeshy_autoload_functions_zsh()

Autoload all *autoloadable non-`zeshy` `zsh` functions* (i.e., all non-dotfile
files in directories in the current function path). This typically includes only
functions bundled with `zsh` itself.
/---
function ::startup_zeshy_autoload_functions_zsh() {
    # Validate sanity.
    die_if_args
    :list function_names

    #FIXME: Be nice to generalize this into a new list setter -- say,
    #:set_list_to_dir_file_basenames_sans_dotfiles(). Call it here like so:
    #
    #:set_list_to_dir_file_basenames_sans_dotfiles function_names "${fpath[@]}"
    #
    #Nice, eh?

    # Do *NOT* attempt to autoload extraneous dotfiles as zsh functions (e.g.,
    # ".keep_app-shells_zsh-0" under Gentoo). While we could also effect this
    # with an exclusion in the glob expression below (e.g.,
    # "${^fpath}/*~*/.[^/]#(.:t)"), this is presumably more efficient.
    :enable_option_local no_glob_dots

    # List of the names of all autoloadable functions in all directories in the
    # current function path. Happily, the set of all basenames of all non-
    # dotfile simple files in all directories in such list is exactly the set of
    # desired names. Dismantled, this is:
    #
    # * "${^fpath}", iteratively expanding to each directory containing
    #   autoloadable function files.
    # * "/*", non-recursively globbing all files and subdirectories of such
    #   directory.
    # * ".", excluding non-simple files (e.g., device files, directories).
    # * ":t", expanding to the basename of each such file.
    #
    # Ideally, zeshy would perform such autoloading at recompilation time.
    # Unfortunately, zsh cannot compile autoload stubs into digest files.
    function_names=( ${^fpath}/*(.:t) )

    # Autoload all such functions. Since such functions are guaranteed to be
    # autoloadable by the prior glob, avoid testing whether such functions are
    # autoloadable before doing so by calling a low-level autoloader.
    ::autoload_function_zsh_unsafe "${function_names[@]}"
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Should probably be generalized into a new function run_code_as_zsh()
    #if not already.
    #FUXME: This is almost certainly insufficient, due to zeshy-specific traps.
    #Would temporarily disabling such traps within such evaluated code *BEFORE*
    #calling autoload() suffice? No idea. This all strikes us as rather hacky.
    #See run_code_under_shell() for proper zsh emulation code.

    # by passing 
    # s under zsh emulation. While unclear why this works
    # as advertised, the "info zsh" entry for autoload() insists it does.
    #
    # * "-R", resetting shell options to the default expected by such shell.
    # * "(q)", escaping reserved characters in such function names.
    # emulate -R zsh -c "autoload -Uz -- ${(q)*}"

# , obsoleting manual autoloading of such
    # functions
# * All autoloadable functions and globals defined by precompiled `zsh` modules,
#   thus deferring loading each such module until the first call of such function
#   or expansion of such variable.

#FUXME: Such function behaves non-idempotently. (Just try running it with the
#same function name twice consecutively. The first call succeeds; the second
#fails. Indeed, the first call replaces the placeholder definition of such
#function with such function's actual definition. Doh!) We believe the only sane
#implementation is one similar to that of :is_module(): iterate the function
#path, searching for a file in a directory in such path with basename such
#function name. Rather lame, but there we are.
#FUXME: Oh. No. That doesn't really work, due to digest files. Hmm...
#FUXME: Alternatively, if the call to "autoload +X" succeeds (and hence defines
#such function), perhaps we could immediately undefine it, thus simulating
#idempotency? This will probably be significantly faster than searching the
#filesystem for such function as above.

# ....................{ MAIN                               }....................
# Autoload all stock zsh functions *BEFORE* the remainder of the zeshy codebase.
# ::autoload_functions_zsh

# , ensuring zsh both loads and
    # calls such function under default shell options
    # Autoload such functions.
    # :string function_name
    # for     function_name ("${@}") {
    #     # Since "autoload -U" fails to report failure when such function is not
    #     # autoloadable, do so before calling such builtin.
    #     die_unless_function_autoloadable "${function_name}"

    #     # Autoload such function. Dismantled, this is:
    #     #
    #     # * "-U", suppressing alias expansion. For safety, this prevents
    #     #   expansion of zeshy aliases when declaring core zsh functions
    #     #   implemented with no such aliases in mind.
    #     # * "z", forcing zsh- rather than ksh-style autoloads and hence ignoring
    #     #   shell option "ksh_autoload".
    #     autoload -Uz -- "${function_name}"
    # }

    # For granular exception messages, test such conditions separately.
    # not :func.is "${function_name}" or
    #     die "${2-Function ${function_name}() already defined.}"

    # If only one function was passed, the most efficient implementation of such
    # test is as follows:
    # if { is_arg } {
    #     :string function_name="${1}"
    # }

    # # Ideally, we would perform such test with a single command: e.g.,
    # #
    # #    if { { autoload +X -- "${@}" } :silent } {
    # #        ...
    # #    }
    # #
    # # Unfortunately, undoing the side effects of such test such command
    # :string 

    # Dismantled, this is:
    #
    # * "+X", reporting success if such function is autoloadable and failure
    #   otherwise, in which case autoload() prints an error to standard error.
    # { autoload +X -- "${@}" } :silent

    # See
    # autoload_function() for further details.
# demand by the `zsh`
# interpreter -- namely, on th
# with `zsh` as discrete `zsh` scripts).

#FUXME: Woops. We currently *ALSO* load modules in @{zsh/module}. Clearly, one
#or the other is the correct version. Probably the latter?

    # :string function_name
    # for     function_name ("${@}") {
    # Since the set of all basenames of all plain files in all directories in
    # such list is exactly the set of all autoloadable function names, globbing
    # such basenames suffices to find all such names. Dismantled, this is:
    # For efficiency, inline such implementation. See autoload_function() for
    # further details.
#     :string function_name
#     for  function_name (${^fpath}/*(.:t)) {
# #       print "autoloading \"${function_name}\"..."
#         autoload -Uz -- "${function_name}"
#     }

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with :autoload_functions_zsh().
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    # * "run_code_silent", silencing errors autoload() prints on failure.
    # * "(q)", quote-protecting such name as run_code() requires.
        # Avoid
        # For safety, autoload this function under option "-U" to suppress alias
        # expansion. This prevents expansion of zeshy- and user-specific aliases
        # under core zsh functions implemented with no such aliases in mind.
        # Avoid calling autoload_function(), which is (unsurprisingly) slow
        # under iteration.

        # For safety, autoload such function under option "-U" to suppress alias
        # expansion. This prevents expansion of Zeshy- and user-specific aliases
        # under core zsh functions implemented with no such aliases in mind.

#FUXME: run_hook_on_zeshy_startup_first() -- or, rather, the way "src/compile"
#is currently calling such function -- requires a look. Ideally, all startup
#hooks should be called *AFTER* defining all initial values for globals and
#aliases, thus providing such hooks access to such values. We appear, however,
#to 

    #FUXME: Bizarre. I feel like I've confronted this issue before, but...
    #here we go again. This function is unaware of aliases defined by a prior
    #function. Presumably, so are *ALL* other startup functions. The solution,
    #I strongly suspect (and am unclear as to why I haven't already implemented)
    #is to:
    #
    #* Extract *JUST* the call to startup_zeshy_aliases() (and *NOT the
    #  similar call to startup_zeshy_globals(), which appears to work) from
    #  startup_zeshy().
    #* Explicitly call startup_zeshy_aliases() immediately before calling
    #  startup_zeshy() in "src/main".
    #
    #This is a bit crazy, but not *TOO* far off the map. Document voluminously,
    #of course.
#   print ":enable_option_local:"
#   which :enable_option_local
#:run_hook_on_zeshy_precompile precompile_zeshy_autoloads

#function precompile_zeshy_autoloads() {
    # Validate sanity.
#   die_if_args

    # Do *NOT* attempt to autoload extraneous dotfiles as zsh functions (e.g.,
    # ".keep_app-shells_zsh-0" under Gentoo). While we could also effect this
    # with an exclusion in the glob expression below (e.g.,
    # "${^fpath}/*~*/.[^/]#(.:t)"), zsh options are somewhat more efficient.
#   :enable_option_local no_glob_dots

    # Define autoloads for all autoloadable functions in the current user's
    # function path list, obsoleting manual autoloading of such functions.
    # Since the set of all basenames of all plain files in all directories in
    # such list is exactly the set of all autoloadable function names, globbing
    # such basenames suffices to find all such names. Dismantled, this is:
    #
    # * "${^fpath}", iteratively expanding to each directory containing
    #   autoloadable function files.
    # * "/*", globbing all files and subdirectories of such directory.
    # * ".", excluding non-plain files (e.g., device files, directories).
    # * ":t", expanding to the tail (i.e., basename) of each such file.
#   for function_name (${^fpath}/*(.:t)) {
        # For safety, autoload this function under option "-U" to suppress alias
        # expansion. This prevents expansion of Zeshy- and user-specific aliases
        # under core zsh functions implemented with no such aliases in mind.
        # Avoid calling autoload_function(), which is (unsurprisingly) slow
        # under iteration.
#       print "autoloading \"${function_name}\"..."
#       autoload -U -- "${function_name}"
#   }
#}

#   for function_name (${^fpath}/*~*/.[^/]#(.:t)) {
#FUXME: Change to :run_hook_on_zeshy_precompile_first() after creating such a
#function.
#:run_hook_on_zeshy_precompile precompile_zeshy_autoloads

# "os/kernel"
#     Handling *nix kernel modules.
