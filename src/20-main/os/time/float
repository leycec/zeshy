#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'-/-'
Handle system time in float format.
-/-

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
float get_time()

Get the current time in high-resolution fractional seconds since the *Unix
epoch* (i.e., January 1st, 1970), where the definition of ``high-resolution''
depends on system-specific properties as follows:

[quote, ${EPOCHREALTIME}, `man zshmodules`]
The notional accuracy is to nanoseconds if the `clock_gettime` call is available
and to microseconds otherwise, but in practice the range of double precision
floating point and shell scheduling latencies may be significant effects.

Since most modern systems provide `clock_gettime`, the returned time is
typically accurate to the nanosecond. For example:

.get_time()
==========================================
[source]
------------------------------------------
>>> get_time
1369342884.3084030151
------------------------------------------
==========================================
/---
function get_time() {
    # Thank *YOU*, module "zsh/datetime".
    die_if_args
    :string.output "${EPOCHREALTIME}"
}

#FIXME: Rename to get_time_offset_by_hours().
declare_function_with_stdin <<'/---'
float get_time_unix_offset_by_hours(float hour_offset)

Get the current time in high-resolution fractional seconds since the Unix epoch,
offset by the passed positive or negative hour offset. See get_time() for
further details: e.g.,

.get_time_unix_offset_by_hours()
==========================================
[source]
------------------------------------------
>>> get_time
3141592653
>>> get_time_unix_offset_by_hours -6.5
3141569253
------------------------------------------
==========================================
/---
function get_time_unix_offset_by_hours() {
    # Validate passed arguments.
    die_unless_arg 'expected one integer'
    string hour_offset="${1}"
    :int.die_unless "${hour_offset}"

    # Offset such time.
    :string.output $((\
        $(get_time) + $(convert_hours_to_seconds ${hour_offset}) ))
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Rename to simply get_time(), thus corresponding with get_path_mtime(),
#etc. nomenclature. This is the fundamental timestamp and deserves a name as
#such.
#   date +'%s'
