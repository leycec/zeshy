#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle *initramfs images* (i.e., archives uncompressed by boot loaders on bootup
into temporary in-memory root filesystems).
-/-

# ....................{ GETTERS                            }....................
#FIXME: Rename to get_kernel_initramfs().
#FIXME: Ah; right. Split this parcel into two parcels, @{initramfs} and
#@{kernel}. Shift functions containing "_kernel_" into the latter and for each
#such function, create a comparable function *NOT* containing "_kernel" into the
#latter. For example, shift get_kernel_initramfs() to @{kernel} and create a new
#get_initramfs() in @{initramfs}. This dispenses with the currently awkward and
#bug-prone default arguments approach below, thus improving sanity. Yay!

declare_function_with_stdin <<'/---'
string get_initramfs_file(string kernel_home = "$(get_kernel_home)")

Get the absolute path of the initramfs image installed under the `/boot`
partition for the passed kernel (defaulting to the current kernel).
/---
function get_initramfs_file() {
    # Validate sanity.
    die_unless_args_0_to_1 'Expected optional kernel dirname.'
    string kernel_home; kernel_home="${1:-$(get_kernel_home)}"

    #FIXME: Replace the hardcode "/boot" with a call to get_boot_dir().
    #FIXME: Grep the codebase and make similar replacements elsewhere.

    # Print such path.
    :string.output "/boot/initramfs-$(get_kernel_version "${kernel_home}").img"
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_initramfs(string filename = "$(get_initramfs_file)")

List the contents of the passed initramfs image (defaulting to the image
installed under the `/boot` partition for the current kernel).
/---
function print_initramfs() {
    # Validate sanity.
    die_unless_args_0_to_1 'Expected optional filename.'
    string filename; filename="${1:-$(get_initramfs_file)}"
    die_unless_file "${filename}"

    # List such initramfs.
    command gunzip -c "${filename}" | command cpio -tv
}

# ....................{ EXTRACTERS                         }....................
#FIXME: Generalize to a two-argument form permitting the target directory to be
#extracted into to be passed: e.g.,
#
#void extract_initramfs(
#    string source_filename = "$(get_initramfs_file)",
#    string target_dirname = "$(get_dir)")
declare_function_with_stdin <<'/---'
void extract_initramfs(string filename = "$(get_initramfs_file)")

Extract the passed initramfs image (defaulting to that installed under the
`/boot` partition for the current kernel) into the current working directory.
/---
function extract_initramfs() {
    # Validate sanity.
    die_unless_args_0_to_1 'Expected optional filename.'
    string filename; filename="${1:-$(get_initramfs_file)}"
    die_unless_file "${filename}"

    # Extract such initramfs.
#   print_message "extracting \"${filename}\"..."
    command gunzip -c "${filename}" | command cpio -id --no-absolute-filenames
}

# ....................{ MAKERS                             }....................
#FIXME: Rename to make_kernel_initramfs().
#FIXME: Add a synonym to update_kernel_initramfs().
#FIXME: Switch the argument order in lieu of the nomenclature change: e.g.,
#
#void make_kernel_initramfs(
#    string kernel_home = "$(get_kernel_home)",
#    string initramfs_home = "${ZESHY_INITRAMFS_HOME}")
declare_function_with_stdin <<'/---'
void make_initramfs(
    string initramfs_home = "${ZESHY_INITRAMFS_HOME}",
    string kernel_home = "$(get_kernel_home)")

Reinstall the passed initramfs (defaulting to `${ZESHY_INITRAMFS_HOME}`) to the
boot partition as `/boot/initramfs-${kernel_version}.img`, a filename format
implicitly expected by GRUB2, where `${kernel_version}` is the version of the
passed kernel (defaulting to `/usr/src/linux`).
/---
function make_initramfs() {
    # Validate sanity.
    die_unless_args_0_to_2\
        'Expected optional initramfs dirname and kernel dirname.'
    string source_dirname target_filename kernel_home
    source_dirname="${1:-${ZESHY_INITRAMFS_HOME}}"
    kernel_home="${2:-$(get_kernel_home)}"
    target_filename="$(get_initramfs_file "${kernel_home}")"
    die_unless_dir "${source_dirname}"

    # Curse for all dynamically linked binaries in the passed source directory.
    # Since initramfses are notoriously intolerant of dynamic linking, use of a
    # single such binary is likely to raise boot-time issues.
    if { is_dir "${source_dirname}/bin" } {
        #FIXME: Generalize to a new iterator function
        #for_dir_files_executable(), probably residing in a new parcel
        #@{path/glob/loop}.

        string filename
        for    filename ("${source_dirname}/bin/"*(x)) {
            if { is_binary_executable "${filename}" and
                 is_binary_executable_dynamic "${filename}" } {
                print_warning\
                    "Initramfs executable \"${filename}\" dynamically linked and hence likely to induce boot-time failure."
            }
        }
    }

    # Mount the "/boot" partition writably.
    mount_boot_dir_writable

    # Ensure the passed source directory is the root of the installed target
    # image by temporarily changing to such directory.
    store_dir "${source_dirname}"

    # Install. Note that "cpio" expects input in the form of one input file or
    # directory per line. Since "cpio" does *NOT* reprint_warning into subdirectories,
    # do so for it with "**/*". Since "gzip" fails to return non-zero exit
    # status when "cpio" returns non-zero exit status, do so for "gzip" by
    # throwing an exception in such case. While "cpio" and "gzip" are blatantly
    # brain-dead, we are not.
    {
        print_message_item\
            "Archiving \"${source_dirname}/\" to \"${target_filename}\"..."
        remove_file_if_found "${target_filename}"

        # Pipe the null-delimited :string.output of "find" to "cpio". Technically,
        # running a pure-zsh alternative to "find" should be feasible (e.g.,
        # "print_strings_nulled ./**/* |"). Unfortunately, "cpio" is a strangely
        # testy command, effectively tolerating only "find" output.
        command find . -print0 |
            command cpio --null -o -H newc |
            command gzip -9 > "${target_filename}"
    # Regardless of whether such installation succeeds, always revert the
    # current directory to its prior path (as the user expects).
    } always {
        restore_dir
    }

    # List the contents of the newly installed target image.
    print_message_item "Listing \"${target_filename}\"..."
    print_initramfs "${target_filename}"
}

# --------------------( WASTELANDS                         )--------------------
#       die_if_piped_command_failed

#           cpio -o -H newc --quiet |
#       print_strings_nulled ./**/* |
#   print_path_verbosely "${filename}"
# Remove the target image if already installed to avoid errors below.

# ....................{ GETTERS ~ current                  }....................
#FIXME: Blatantly Linux-specific. Generalize us up.
# string get_kernel_home()
#
# Get the absolute path of the root directory for the current kernel: e.g.,
#
#     >>> get_kernel_home
#     /usr/src/linux
#get_initramfs_home() {
#    die_if_args
#    :string.output      "${ZESHY_INITRAMFS_HOME}"
#}
