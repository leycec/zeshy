#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle path listings by *size* (i.e., disk usage).
/---

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] print_path_size(string pathname1, ...)

Recursively print disk usage for the passed paths with the currently configured
`du`-specific options (e.g., ${ZESHY_OPTIONS_DU}). See
print_path_size_with_options() for further details.
/---
function print_path_size() {
    die_unless_args 'Expected on or more pathnames.'
    print_path_size_with_options -- "${@}"
}

declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] print_path_size_with_options(
    string du_option1?, ...,
    string pathname1 = "$(get_dir)", ...)

Recursively print disk usage for the passed paths (defaulting to the current
directory, if called directly from the command line) with both the passed and
currently configured `du`-specific options (e.g., ${ZESHY_OPTIONS_DU}). If any
such path does not exist, failure is returned.
/---
function print_path_size_with_options() {
    # Validate sanity. If called directly from the command line, no validation
    # is required (as, if passed no arguments, "du" already defaults to the
    # current directory).
    if { not is_context_cli_function } {
        die_unless_args 'Expected one or more pathnames.'
    }

    # Print such usage.
    run_code_with_options_configured\
        'run_code_paged command du' ZESHY_OPTIONS_DU "${(q)@}"
}

# ....................{ PRINTERS ~ sorted                  }....................
declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] print_path_size_sorted(string pathname1, ...)

Recursively print disk usage for the passed paths sorted with the currently
configured `du`-specific options (e.g., ${ZESHY_OPTIONS_DU}). See
print_path_size_sorted_with_options() for further details.
/---
function print_path_size_sorted() {
    die_unless_args 'Expected one or more pathnames.'
    print_path_size_sorted_with_options -- "${@}"
}

declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] print_path_size_sorted_with_options(
    string du_option1?, ...,
    string pathname1 = "$(get_dir)", ...)

Recursively print disk usage for the passed paths (defaulting to the current
directory, if called directly from the command line) sorted with both the passed
and currently configured `du`-specific options (e.g., ${ZESHY_OPTIONS_DU}). If
any such path does not exist, failure is returned. Assuming default options,
such usage is sorted in descending order.
/---
function print_path_size_sorted_with_options() {
    # Validate sanity. If called directly from the command line, no validation
    # is required (as, if passed no arguments, "du" already defaults to the
    # current directory).
    if { not is_context_cli_function } {
        die_unless_args 'Expected one or more pathnames.'
    }

    # Sort such usage. Pipe the output of "du" to "sort". To ensure
    # run_code_paged() pages the output of such pipe, single quote the latter.
    run_code_with_options_configured\
          'run_code_paged command du' ZESHY_OPTIONS_DU "${(q)@}"\
        '| run_code_with_options_configured "command sort" ZESHY_OPTIONS_DU_SORT'
}

# --------------------( WASTELANDS                         )--------------------
#   die_unless_args 'Expected one or more pathnames.'
    # We can hardly believe this works. Astonishingly, it does! "And the elves
    # did croon their merry tune."

#   interactively print_message "sorting path sizes recursively..."
#   interactively print_message "getting path sizes recursively..."
#       ZESHY_OPTIONS_DU "${(q)@}" '| '\
#       run_code_with_options_configured 'command sort' ZESHY_OPTIONS_DU_SORT
#       ZESHY_DU_SORTED_OPTIONS "${(q)@}" '| sort -hr'
#   ZESHY_DU_SORTED_OPTIONS\
#   ZESHY_DU_SORTED_OPTIONS_IF_SHELL_INTERACTIVE\
#   ZESHY_DU_SORTED_OPTIONS_IF_SHELL_NONINTERACTIVE\
#declare_global '
#list ZESHY_DU_SORTED_OPTIONS
#
#"du" options specific to the print_path_size_sorted*() functions.
#'
#ZESHY_DU_SORTED_OPTIONS=( "${ZESHY_OPTIONS_DU[@]}" )
#
#declare_global '
#list ZESHY_DU_SORTED_OPTIONS_IF_SHELL_INTERACTIVE
#
#"du" options if sorting disk usage interactively.
#'
#ZESHY_DU_SORTED_OPTIONS_IF_SHELL_INTERACTIVE=()

#declare_global '
#list ZESHY_DU_SORTED_OPTIONS_IF_SHELL_NONINTERACTIVE
#
#"du" options if sorting disk usage non-interactively.
#'
#ZESHY_DU_SORTED_OPTIONS_IF_SHELL_NONINTERACTIVE=()

#declare_function '
#string print_path_size_sorted(string pathname1, string pathname2, ...)
#
#List disk usage for the passed paths (defaulting to the current directory)
#recursively, sorted by descending usage.
#'
#function print_path_size_sorted() {
#    run_code_with_options "run_code_paged command du" ZESHY_OPTIONS_DU "${@}" "| sort -hr"
#}

#   run_code_with_options "run_code_paged 'command du" ZESHY_OPTIONS_DU "${@}"\
#       "| sort -hr'"
# * Symbolic link, this is the dereferenced size of the non-symbolic link such
#   link transitively links to (i.e., of the eventual target file or directory).
#Dismantled, this is:
    #
    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.
#   else zstat -L +size "${pathname}"
#FIXME: Rename to print_path_size*() in conformance with get_path_size().
