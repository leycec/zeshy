#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *non-directory file testers* (i.e., functions testing whether passed
paths both exist and are _not_ directories).
/---

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_file(
    string pathname,
    string error_message = "File \"${pathname}\" not found or not a file.")

Throw an exception with the passed message unless the passed path is an
existing file. See :is_file() for further details.
/---
function die_unless_file() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    :is_file "${1}" or {
        :string pathname="${1}"
        die "${2-File \"${pathname}\" not found or not a file.}"
    }
}

declare_function_with_stdin <<'/---'
void die_unless_files(string pathname1, ...)

Throw an exception with a stock message unless all passed paths are existing
files. See :is_file() for further details.
/---
function die_unless_files() {
    die_unless_args 'Expected one or more filenames.'
    :is_file "${@}" or {
        :string pathname
        for     pathname ("${@}") { die_unless_file "${pathname}" }
    }
}

# ....................{ EXCEPTIONS ~ permissions           }....................
declare_function_with_stdin <<'/---'
void :die_unless_file_executable(
    string filename,
    string error_message =
        "File \"${filename}\" not executable by user \"$(get_user)\".")

Throw an exception with the passed message unless the passed file is executable
by the current user. See :is_file() for further details.
/---
function :die_unless_file_executable() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    :is_file_executable "${1}" or {
        :string filename="${1}"
        die "${2-File \"${filename}\" not executable by user \"$(get_user)\".}"
    }
}

# ....................{ EXCEPTIONS ~ emptiness             }....................
declare_function_with_stdin <<'/---'
void die_unless_file_nonempty(
    string filename,
    string error_message = "File \"${filename}\" empty (i.e., 0-byte).")

Throw an exception with the passed message unless the passed file exists and is
larger than 0 bytes in size. See is_file_nonempty() for further details.
/---
function die_unless_file_nonempty() {
    die_unless_args_1_to_2\
        'Expected one filename and optional error message.'
    is_file_nonempty "${1}" or {
        :string filename="${1}"
        die "${2-File \"${filename}\" empty (i.e., 0-byte).}"
    }
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_file(string pathname1, ...)

Report success if all passed paths are *existing files* (i.e., existing paths
of any type except directories). Equivalently, report failure if at least one
passed path either does _not_ exist or is an existing directory.
/---
function :is_file() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one path was passed, test such path with test() operators.
    if { is_arg } {
        :string pathname="${1}"
        :is -e "${pathname}" and not -d "${pathname}" :si
    # Else, at least two paths were passed. Test such paths with glob
    # qualifiers. While such test is also inefficiently implementable by manual
    # iteration, glob qualifiers are both simpler and more efficient.
    } else {
        :list filenames
        :int filenames_count

        # List of all such paths that are *NOT* directories.
        set_list_to_paths_matching_qualifier filenames "${@}" '^/'

        # Number of such paths.
        :set_int_to_list_size filenames_count filenames

        # Report success only if there exist exactly as many such paths as
        # passed paths, in which case all such paths are *NOT* directories.
        :is_arg_count_equals "${filenames_count}"
    }
}

declare_function_with_stdin <<'/---'
[status: bool] :is_file_1_or_more(string pathname1, ...)

Report success if at least one of the passed paths is an existing file. See
:is_file() for further details.
/---
function :is_file_1_or_more() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one path was passed, such test is equivalent to testing whether
    # such path is a file. Hence, defer to such function.
    if { is_arg } {
        :is_file "${1}"
    # Else, at least two paths were passed. Test such paths with glob
    # qualifiers.
    } else {
        # List of all such paths that are *NOT* directories.
        :list filenames
        set_list_to_paths_matching_qualifier filenames "${@}" '^/'

        # Report success only if there exist at least one such path.
        is_list_nonempty filenames
    }
}

# ....................{ TESTERS ~ permissions              }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_file_executable(string filename1, ...)

Report success if all passed files are executable by the current user.
/---
function :is_file_executable() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one file was passed, test such files with test() operators.
    if { is_arg } {
        # Validate additional sanity.
        :string filename="${1}"
        die_unless_file "${filename}"

        # Test such file.
        :is -x "${filename}" :si
    # Else, at least two files were passed. Test such files with glob
    # qualifiers.
    } else {
        # Validate additional sanity.
        die_unless_files "${@}"
        :list filenames_executable

        #FIXME: Given the complexity of such expressions, it'd be great to
        #define a new :set_list_to_paths_matching_code() function generalizing
        #such logic in a safe manner. (Shouldn't be hard: just escape single
        #quotes, we should think.)
        #FIXME: Also refactor is_path_executable() accordingly.

        # List of all such files executable by the current user.
        set_list_to_paths_matching_qualifier\
            filenames_executable "${@}" '(e:''[[ -x "${REPLY}" ]]'':)'

        # Report success only if there exist exactly as many such files as
        # passed files, in which case all such files are executable.
        :is_arg_count_equals filenames_executable
    }
}

# ....................{ TESTERS ~ size                     }....................
declare_function_with_stdin <<'/---'
[status: bool] is_file_nonempty(string filename1, ...)

Report success if all passed files are *nonempty* (i.e., larger than 0 bytes in
file size).
/---
function is_file_nonempty() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one file was passed, test such files with test() operators.
    if { is_arg } {
        # Validate additional sanity.
        :string filename="${1}"
        die_unless_file "${filename}"

        # Test such file.
        :is -s "${filename}" :si
    # Else, at least two files were passed. Test such files with glob
    # qualifiers.
    } else {
        # Validate additional sanity.
        die_unless_files "${@}"
        :list filenames_nonempty

        # List of all such files of nonempty size. Dismantled, this is:
        #
        # * "L+0", including only files strictly larger than 0 bytes.
        set_list_to_paths_matching_qualifier filenames_nonempty "${@}" 'L+0'

        # Report success only if there exist exactly as many such files as
        # passed files, in which case all such files are nonempty.
        :is_arg_count_equals filenames_nonempty
    }
}

declare_function_with_stdin <<'/---'
[status: bool] is_file_empty(string filename1, ...)

Report success if all passed files are *empty* (i.e., 0 bytes in file size).
/---
function is_file_empty() {
    # Validate sanity.
    die_unless_args 'Expected one or more filenames.'

    # If only one file was passed, such test is equivalent to testing whether
    # such file is not nonempty. Hence, defer to such function.
    if { is_arg } {
        not is_file_nonempty "${1}"
    # Else, at least two files were passed. Test such files with glob
    # qualifiers.
    } else {
        # Validate additional sanity.
        die_unless_files "${@}"
        :list filenames_empty

        # List of all such files of empty size. Dismantled, this is:
        #
        # * "L0", including only files exactly 0 bytes in size.
        set_list_to_paths_matching_qualifier filenames_empty "${@}" 'L0'

        # Report success only if there exist exactly as many such files as
        # passed files, in which case all such files are nonempty.
        :is_arg_count_equals filenames_empty
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Implement :die_unless_file_executable().
#FUXME: Rename to :is_file_runnable(), in accordance with zeshy nomenclature,
#and is_path_executable() as well.

    #FUXME: Inefficient. Use a glob qualifiers filtering approach (e.g.,
    #filtering out non-files), then compare the list sizes of the passed
    #argument list and resulting filtered list. If such sizes differ, the set
    #of all non-files is given by the set difference between such lists, in
    #which case die_unless_file() may be arbitrarily passed the first such
    #list. Relatively simple, no?

#FUXME: Refactor to accept an arbitrary number of filenames and use glob
#qualifiers in the event that more than one such filename is passed (e.g.,
#qualifiers "L+1"). See :is_file_executable() for similar logic.

#FUXME: Horrible. Refactor :is_file() to efficiently accept an arbitrary number
#of passed files. Then, excise :is_files() entirely.

    #FUXME: There probably exist *MUCH* more efficient implementations.
    #Right. See :die_unless_files() for extensive commentary on such
    #alternatives.
        # If at least one such file exists, return success; else, failure.
        # Interestingly, this is effectively the inverse of is_files().
        # :string filename
        # for     filename ("${@}") {
        #     if { :is_file "${filename}" } {
        #         report_success
        #     }
        # }
        # report_failure

# declare_function_with_stdin <<'/---'
# [status: bool] is_files(string filename1, ...)
# 
# Report success if all passed paths are existing files, thus returning failure
# if at least one such path is _not_ an existing file.
# /---
# function is_files() {
#     # Validate sanity.
#     die_unless_args 'Expected one or more filenames.'
# 
#     #FUXME: There probably exist *MUCH* more efficient implementations.
#     #Right. See :die_unless_files() for extensive commentary on such
#     #alternatives.
# 
#     # If at least one such file does *NOT* exist, report failure; else, success.
#     :string filename
#     for     filename ("${@}") {
#         :is_file "${filename}" or report_failure
#     }
#     report_success
# }

# , thus including special files

#    is_files "${@}" or {
#    }

    # Reimplement is_files() to permit intelligent exception throwing.
#See remove_file_if_found() for an alternative not throwing such exceptions.
    #FUXME: This doesn't really work.
#   if is_shell_interactive; then
#       option_list_names+=' ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE'

#       if is_args_1_to_3
#       then option_list_names+=ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3
#       else option_list_names+=ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_4_AT_LEAST
#       fi
#   else option_list_names+=ZESHY_OPTIONS_RM_IF_SHELL_NONINTERACTIVE
# ....................{ ALIASES                            }....................
#alias_cli_substitution rm='remove_file'

#FUXME: Not right. Should be passing default and non-interactive "rm" options.
#   run_code_silent command rm -- "${@}"
    #FUXME: We should, actually, be utilizing run_code_with_options(). Do so once we
    #refactor such function to accept a list of options list names.
#   list rm; rm=( command rm "${ZESHY_OPTIONS_RM[@]}" )
#   if is_shell_interactive; then
#       if is_args_1_to_3
#       then rm+=( "${ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_1_TO_3}" )
#       else rm+=( "${ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE_AND_ARGS_4_AT_LEAST}" )
#       fi

#        "${rm[@]}" "${ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE[@]}" -- "${@}"
#   else "${rm[@]}" "${ZESHY_OPTIONS_RM_IF_SHELL_NONINTERACTIVE[@]}" -- "${@}"
#   fi

#FUXME: Not right. Should remove the filetype returned by get_file_type -- not
#simply the rightmost filetype.
# If this filename has a filetype, this excludes only
# the rightmost filetype#   :string.output "${1%.*}"
#FUXME: Poor idea. Invites race conditions.
# void die_if_file(
#   string pathname,
#   string error_message = "\"${pathname}\" is an existing file")
#
# Throw an exception if the passed file exists.
#function die_if_file() {
#    die_unless_args_1_to_2\
#        'expected one pathname and optional error message'
#    string pathname="${1}"
#    :is_file "${pathname}" and die "${2:-\"${pathname}\" is an existing file}"
#}

#   print_message "passed...";  print -l -- ${^@}
#   print_message "setting..."; print -l -- ${^@}(e:'[[ -e "${REPLY}" ]]':)
# See remove_file() for further discussion.
# If interactive and the current user has not reconfigured
# ${ZESHY_OPTIONS_RM_IF_SHELL_INTERACTIVE[@]} and:
#
# * Only one, two, or three files were passed, confirm each such removal.
# * Four or more files were passed, confirm only the first such removal.    #FUXME: Poor implementation. We should, instead, use additional list
    #globals: ${ZESHY_OPTIONS_RM_IF_FEW_ARGUMENTS} and
    #${ZESHY_OPTIONS_RM_IF_MANY_ARGUMENTS}.
        # If the caller passed no more than three files to be deleted, require
        # manual confirmation for each such deletion.
        # If the caller passed at least four files to be deleted *AND* requests
        # interactive confirmation with option "-i", require only one initial
        # confirmation implicitly covering all deletions with option "-I".
        # Otherwise, delete all passed files without confirmation.
#We hereafter use "file" to mean plain file.

    # Localize and validate passed arguments.
#   string source_filename="${1}" target_filename="${1}"
#   die_unless_file "${source_filename}"

    # Copy.
#   then "${copy[@]}" "${CP_OPTIONS_IF_SHELL_INTERACTIVE}" "${source_filename}" "${target_filename}"
#   setopt local_options
#   die_unless_files "${@}"
#   touch -c -- "${@}"

    # List of filenames filtered from the passed list of pathnames. Dismantled,
    # this is:
    #
    # * "${^@}", iteratively expanding to each passed pathname.
    # * "(.)", excluding non-filenames.
#   list filenames; filenames=( ${^@}(.) )

    # If filenames were filtered from the list of passed pathnames, die.
#   (( "${#filenames}" == "${#@}" )) or
#       die "${2:-\"${filename}\" not all found or not all files}"

#   run_code_silent ls -- "${@}" or die ''
#           "$(find "${pathname}" -type f -printf '%A@\t%p\n' | sort -r -k1 | head -n1 | cut -f2)"
#
#   readlink --canonicalize-existing "${1}"
# string which_command(string command_name)
#
# If found, get the absolute path to the command with the passed name;
# otherwise, return false. All but the first whitespace-delimited word of this
# string is ignored: e.g.,
#
#     >>> which_command zsh
#     /bin/zsh
#     >>> which_command "zsh -x -o shwordsplit scr"
#     /bin/zsh
#which_command() {
#    die_unless_arg 'expected one command name'
#    string command_name="${1[(w)1]}"
#    string command_path="${command_name:c}"
#
#    # If no such command exists, print an error message and return with failure.
#    if is "${command_path:c}" != /* si; then
#        print_warning "\"${command_name}\" not found"
#        report_failure
#    fi
#
#    # Otherwise, print the absolute path of this command.
#    print "${command_path}"
#}

#   if not command_path="$(whence -p "${command_name}")"; then
#
# ....................{ FILENAMES ~ lists                 }....................
# string *get_filenames(string dirname = '')
#
# Return a stringified list of all files in the passed directory or, if no such
# directory was passed, the current working directory. Callers should
# destringify the return value by calling the expand_list() function.
#get_filenames() {
#    die_unless_args_0_to_1 'expected at most one optional dirname'
#    string dirname="${1:-${PWD}}"
#    die_unless_dir "${dirname}"
#    list filenames; filenames=( "${dirname}"/*(N) )
#    return_list filenames
#}

#      file --mime-encoding "${pathname}" | grep --quiet ': binary$'
#      file --mime-encoding "${pathname}" | grep --quiet --invert-match ': binary$'

#       die "neither \"${user_temporary_dir}\" or \"${root_temporary_dir}\""\
#           "found; no temporary directory found"
#alias -g get_filenames="( *(N) )"

#lias get_next_arg_as='string __tmp__="${1}"; shift; print "${__tmp__}"'
#lias get_next_arg_as='string __tmp__="${1}"; shift; print "${__tmp__}"'
#       filename="$(get_next_arg)"
#       get_next_arg_as filename
