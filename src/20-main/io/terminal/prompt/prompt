#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle interactive shell prompts.

== See Also ==

* Phillip Gold's http://aperiodic.net/phil/prompt[zsh prompt treatise] --
  arguably, a precursor to modern `zsh` configuration frameworks.
/---

#FIXME: Fairly cool (and very fast) command-line syntax highlighting of zsh
#while you type it, using Pygments:
#
#    https://bitbucket.org/ZyX_I/zsh-pygments-highlighting/src
#
#The traditional alternative to the above is a script entitled
#zsh-syntax-highlighting (available on Github), which is purportedly slow-as-
#blazes, to the point of unusability (particularly on long multi-lines). The
#above script suffers no such delusional slowness.

#FIXME: O.K.! Before we do *ANYTHING* else, we need to resolve a core issue:
#dark-on-light color schemes. I know; you're probably thinking, "wat?" Sadly,
#dark-on-light color schemes are the default under most terminals -- even today.
#But zeshy's prompt displays interactive user input as bold white, rendering the
#most important of all possible text invisible. Words cannot express how
#*HORRIBLE* this is. It renders zeshy extremely unusable under default settings.
#So how do we fix this? And clearly, it can be done. I note, for example, that
#if I run "rxvt-unicode" under default settings interactive input is in bold
#white until I attempt a tab completion, at which point "zsh" forces the current
#color to normal black and hence readable. Woh! It doesn't do that normally,
#implying it has some means of deciding that the current color is inappropriate
#for displaying text. Presumably, zeshy can perform similar logic. ("vim" also
#gets this right, of course, as do most terminal applications. How?)
#
#Until I discover what that is, though, we should probably just behave like
#"vim": namely, force the background color to black. But I don't even know how
#to effect *THAT* under a shell in the general case. Are there "stty" settings
#or echotc() arguments appropriate for doing so? There *MUST* be. But if there
#aren't, we should simply forcefully print a background color preceding each
#output prompt foreground color. This is quite lame, of course, but has the
#benefit of actually working... It's ugly, though, and hence *NOT* a reasonable
#long-term solution.
#
#Eventually, we need a general-purpose means of:
#
#* Deciding whether the current terminal color scheme is dark-on-light or light-
#  on-dark and dynamically changing the current prompt accordingly. (Indeed,
#  *ALL* color styles should presumably be changed as well.) Perhaps we want
#  new maps ${ZESHY_STYLE_TO_COLOR_IF_TERMINAL_SCHEME_DARK_ON_LIGHT} and
#  ${ZESHY_STYLE_TO_COLOR_IF_TERMINAL_SCHEME_LIGHT_ON_DARK}? Synchronization
#  will, of course, rear its head. But it's a bit hard to see how to dynamically
#  support both dark-on-light and light-on-dark terminals with a single zeshy
#  configuration reasonably otherwise. *shrug*
#* In the event that we can't decide whether such scheme is dark-on-light or
#  light-on-dark for the current terminal, fallback to forcefully setting the
#  current background to black. Actually, this should probably be governed by a
#  boolean, yes? Say, ${ZESHY_TERMINAL_SCHEME_IS_LIGHT_ON_DARK} defaulting to
#  true. (Which should be the sanest default for most users.) Based on the value
#  of such boolean, forcefully set the current background accordingly.
#FIXME: Interesting. I like the prior
#${ZESHY_STYLE_TO_COLOR_IF_TERMINAL_SCHEME_LIGHT_ON_DARK} idea, as it provides a
#sane way of allowing the user to customize the default background and
#foreground colors to be used under such terminal: e.g., via new map keys
#"terminal.background" and "terminal.foreground" (and possibly dim and bright
#variants of both for good measure.)
#FIXME: Name such map global ${ZESHY_STYLE_TO_COLOR_IF_BACKGROUND_DARK}. Much
#more readable, needless to say.
#FIXME: O.K.; it looks like modern terminals export a variable "${COLORFGBG}"
#whose sole purpose appears to be notifying applications of whether or not the
#current background color is dark or light. Here's a fairly simple "bash"
#startup script leveraging such variable to adjust colors accordingly:
#https://github.com/alexlegg/Config/blob/master/.bash/colors
#Googling shows no pertinent hits for "zsh COLORFGBG", which is... interesting.
#I'm reasonably surprised that "oh-my-zsh" doesn't handle such defaults. Well;
#there's a first time for everything then, isn't there?

#FIXME: Use the "vcs_info" zsh module for displaying VCS-specific metadata in a
#VCS-agnostic fashion. For extensive documentation on such module, see
#"man zshcontrib". Interestingly, such module requires use of zstyle() for all
#user configuration: e.g.,
#
#    zstyle ':vcs_info:*' actionformats \
#        '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
#    zstyle ':vcs_info:*' formats       \
#        '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
#    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
#    precmd () { vcs_info }
#    PS1='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_}%f%# '
#
#Why zstyle()? Is it because "vcs_info" is a module and that's the only
#effective means of facilitating user-module communication? Or is something
#slightly more pernicious going on here? Out of perverse curiosity, investigate.
#
#I should also note that "vcs_info" is *HUGE*. It's arguably the most extremely
#configurable zsh component outside of the completion system. Beware! There lurk
#time sinks here.

#FIXME: Incorporate the following other prompt scripts:
#Has a fantastic series of functions for setting the terminal title!
#http://www.semicomplete.com/misc/rcfiles/zshrc
#FIXME: Ridiculously cool dynamic prompt, embedding such interesting iota as
#average CPU load, average of all CPU and motherboard heat sensors, whether or
#not the current user has write access to the current directory, great git
#integration, and so on:
#
#    https://github.com/nojhan/liquidprompt
#
#We're not terribly fond of the way it dynamically shifts a single-line prompt
#right, however. To integrate such ideas this with our current prompt, we'd
#probably like to have a prefixing prompt line containing such factotum. Such
#dynamism is hardly essential, but does seem substantially interesting.
#(Indeed, I'd also like to display remaining disk space on the partition
#containing the current directory as a percentage, which "liquidprompt" appears
#not to support. I can imagine why: it's not exactly straightforward. Then
#again, none of this functionality is! I can't imagine authoring such a behemoth
#in raw bash or zsh, honestly.)

#FIXME: Simple function testing whether or not the current process is run from
#within an ssh session:
#
#    function :is_ssh_session() {
#        die_if_args
#        :is_var SSH_CLIENT
#    }
#
#If such function reports success, we should probably adjust our prompt
#accordingly to indicate that.

#FIXME: Interestingly, zsh provides out-of-the-box support for prompt themes via
#"/usr/share/zsh/5.*/functions/Prompts/promptinit". Any such support we
#implement should be marginally inspired (but probably *NOT* dependent) on such
#autoloadable function.

# ....................{ SPLASH                             }....................
# Display introductory "splash" text. This is a line or two of text displayed
# prior to displaying the shell prompt, on initial start-up of the shell.
#
# This text is defined and displayed according to ZSH shell prompt syntax.
# Thus, see "info zsh" for details.

# void precmd()
#
# Modifies the current shell environment prior to printing the current prompt.
# zsh runs this function immediately after the process for the previous command
# completes but immediately before printing another prompt for the next command.
#precmd() {
#}

# void preexec(string command_name, string command_arg_1, ...)
#
# Modifies the current shell environment prior to running the passed command.
# zsh runs this function immediately after the current user inputs a command at
# the current prompt and then inputs <Enter>, but immediately before executing
# the command.

# ....................{ STARTUP                            }....................
run_hook_on_zeshy_startup_if_interactive startup_zeshy_prompt

declare_function_with_stdin <<'/---'
void startup_zeshy_prompt()

Define prompt strings for the current interactive shell. This includes:

* ${PROMPT}, the default leftmost prompt string.
* ${PROMPT2}, the leftmost prompt string for continuation lines.
* ${PROMPT3}, the leftmost prompt string for "select" loops.
* ${PROMPT4}, the leftmost prompt string for runtime traces.
* ${RPROMPT}, the default rightmost prompt string.
* ${SPROMPT}, the leftmost prompt string for spelling mistake corrections.
/---
function startup_zeshy_prompt() {
    # Validate sanity.
    die_if_args
    die_unless_shell_interactive
    string style_prefix

    # Set superuser-specific colors if the current user is the superuser or
    # non-superuser-specific colors otherwise.
    if { is_superuser } {
        style_prefix='startup_zeshy_prompt.superuser.'
    } else {
        style_prefix='startup_zeshy_prompt.superuser_not.'
    }

    #FIXME: Define a new print_prompt() function printing the current prompt(s).
    #Don't bother with implementing a "vared PS1" wrapper; that hardly makes
    #sense, given the current prompt implementation.

    # Define (and export) the ANSI shell prompt. To view this prompt as colorized
    # output, type "print -P $PS1"; and to view and edit this prompt as plaintext
    # source, type "vared PS1".
    #
    # This text is defined and displayed according to ZSH shell prompt syntax.
    # See "info zsh" for details.
    PROMPT=''

    # Print the current hostname and username.
    PROMPT+="${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}brace]-}[${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}host]-}%m ${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}user]-}%n${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}brace]-}}"

    # Print the current path.
    PROMPT+="${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}path]-}%~"

    # Print an indication of whether the prior command succeeded or failed.
    PROMPT+="%(1/?%(0??${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}prior_command_succeeded]-}/?${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}prior_command_failed]-}!)?)"

    # Set colors for subsequent command line input.
    PROMPT+="${ZESHY_STYLE_TO_COLOR_PROMPT[${style_prefix}input]-}"

    # Set no rightmost prompt, for the moment.
    RPROMPT=
}

# --------------------( WASTELANDS                         )--------------------
#   print -Pn -- "${ZESHY_STYLE_TO_COLOR[color.reset]-}"
#FUXME: Integrate with a new "zsh/hook" component. According to "man zshall",
#zsh has builtin support for global arrays ${precmd_functions},
#${preexec_functions}, and so on, so all such component needs provide are
#appropriate append_* and prepend_* functions -- ideally with more human-
#readable names than "precmd" and "preexec".

    # Set superuser-specific colors if the current user is the superuser or
    # non-superuser-specific colors otherwise.
#   string prefix
#   if is_superuser
#   then prefix='startup_zeshy_terminal_prompt.superuser.'
#   else prefix='startup_zeshy_terminal_prompt.nonsuperuser.'
#   fi

#   string color_command color_machine color_path color_status_nonzero
#%B
    #FUXME: Extract into color styles.
    # Define user-specific colors to be used in prompts below.
#   if is_superuser; then
#       color_command="${ZESHY_COLOR_PROMPT[grey]}"
#       color_machine="${ZESHY_COLOR_PROMPT[red]}"
#       color_path="${ZESHY_COLOR_PROMPT[white]}"
#       color_status_nonzero="${ZESHY_COLOR_PROMPT[magenta]}"
#   else
#       color_command="${ZESHY_COLOR_PROMPT[white_bold]}"
#       color_machine="${ZESHY_COLOR_PROMPT[cyan]}"
#       color_path="${ZESHY_COLOR_PROMPT[green]}"
#       color_status_nonzero="${ZESHY_COLOR_PROMPT[red]}"
#   fi

    # Define (and export) the ANSI shell prompt. To view this prompt as colorized
    # output, type "print -P $PS1"; and to view and edit this prompt as plaintext
    # source, type "vared PS1".
    #
    # This text is defined and displayed according to ZSH shell prompt syntax.
    # See "info zsh" for details.
#   PROMPT=''
#   PROMPT+="${color_command}[${color_machine}%m %B%n${color_command}}"   # user
#   PROMPT+="${color_path}%~"                                             # path
#   PROMPT+="%B%(1/?%(0??${color_path}/?${color_status_nonzero}!)?)" # last process failed?
#   PROMPT+="${color_command}"                                            # input

    #FUXME: This can be simplified by noting the only difference between the root
    #and non-root prompts are the colors and that, therefore, this difference may
    #be abstracted out by defining these colors in a pre-prompt zsh function.

    # Coerce command output to be bold white, regardless of the previous
    # color output by the prior prompt.
#   export RPROMPT=
#   print "PS1: ${PS1}"
#       color_command=${ZESHY_COLOR_PROMPT_BLACK_BOLD}
#   export PS1
    #export PS1="%(!?${ZESHY_COLOR_BLACK_BOLD}[${ZESHY_COLOR_RED}%m %B%n${ZESHY_COLOR_BLACK_BOLD}}${ZESHY_COLOR_WHITE}%~%B%(1/?%(0??${ZESHY_COLOR_WHITE}/?${ZESHY_COLOR_RED}!)?)${ZESHY_COLOR_BLACK_BOLD}?${ZESHY_COLOR_WHITE_BOLD}[${ZESHY_COLOR_CYAN}%m %B%n${ZESHY_COLOR_WHITE_BOLD}}${ZESHY_COLOR_GREEN}%~%B%(1/?%(0??${ZESHY_COLOR_GREEN}/?${ZESHY_COLOR_RED}!)?)${ZESHY_COLOR_WHITE_BOLD})"

#FUXME: Obsolete.
# * "${PS1}", the core shell prompt variable, in a root-aware manner.
# * Splash message, terse introductory text welcoming the current user to Zeshy.
# * Help message, verbose synopsizing Zeshy functionality, issues, and usage
