#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *terminal setters* (i.e., functions setting the values of passed
variables to terminal attributes pertaining to the current terminal).
/---

# ....................{ GETTERS                            }....................
#FIXME: Refactor into setters.

# declare_function_with_stdin <<'/---'
# string get_terminal(void)
# 
# Get the current terminal's *name* (i.e., unique identifier).
# 
# == Overwriting Terminal Names ==
# 
# There exists no corresponding setter set_terminal() for overwriting such name.
# Doing so is feasible (and common practice amongst new users) by directly setting
# environment variable ${TERM} -- but strongly discouraged and almost always the
# wrong thing to do. (If doing so doesn't come back to haunt you now, it probably
# will in the near future. Murphy and his Laws lurk in the shadows.)
# 
# To correct remote terminal issues (e.g., SSH connection warnings resembling
# `rxvt-unicode-256color': unknown terminal type.`), copy the local `terminfo`
# file for your current terminal to the corresponding single-letter subdirectory
# of the `~/.terminfo` directory on the remote machine: e.g.,
# 
# .Correcting Remote Terminal Issues
# ==========================================
# [source]
# ------------------------------------------
# # If connecting to such machine as "deathcubek@bucketheadland.com", do:
# >>> ssh deathcubek@bucketheadland.com mkdir -p .terminfo/r/
# >>> scp /usr/share/terminfo/r/rxvt-unicode-256color deathcubek@bucketheadland.com:.terminfo/r/
# ------------------------------------------
# ==========================================
# /---
# function get_terminal() {
#     # "tset -q" also (inefficiently) suffices.
#     die_if_args
#     output_string "${TERM}"
# }
# 
# declare_function_with_stdin <<'/---'
# integer get_terminal_width(void)
# 
# Get the width in characters of the current terminal.
# /---
# function get_terminal_width() {
#     # "tput columns" also (inefficiently) suffices.
#     die_if_args
#     output_string "${COLUMNS}"
# }
# 
# declare_function_with_stdin <<'/---'
# integer get_terminal_height(void)
# 
# Get the height in lines of the current terminal.
# /---
# function get_terminal_height() {
#     # "tput lines" also (inefficiently) suffices.
#     die_if_args
#     output_string "${LINES}"
# }

# --------------------( WASTELANDS                         )--------------------
