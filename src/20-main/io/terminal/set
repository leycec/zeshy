#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *terminal setters* (i.e., functions setting the values of passed
variables to terminal attributes pertaining to the current terminal).
/---

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void :set_string_to_terminal_id(string string_name)

Set the passed string to the string uniquely identifying the current terminal.
If the current shell is *headless* (i.e., _not_ running under terminal
emulation), an exception is thrown.

== Changing the Terminal ID ==

There exists no corresponding function to change such identifier (e.g.,
set_terminal_id()). While doing so _is_ trivially feasible by changing the
value of environment variable ${TERM}, such value uniquely identifies the
current terminal and its corresponding capabilities and hence should typically
be treated as read-only. Changing such value is strongly discouraged and almost
always the wrong thing to do. (If doing so doesn't come back to haunt one now,
it probably will in the near future. Murphy and Her Laws lurk in the shadows.)

=== Correcting Remote Terminal Issues ===

The customary reason to change such identifier is to correct remote terminal
issues (e.g., SSH connection warnings resembling
`rxvt-unicode-256color': unknown terminal type.`) However, the proper means of
correcting such issues is to copy the local `terminfo` file for the current
terminal to the appropriate single-letter subdirectory of directory
`~/.terminfo/` on such remote machine: e.g.,

.Correcting Remote Terminal Issues
==========================================
[source]
------------------------------------------
# If connecting to such machine as "deathcubek@bucketheadland.com", do:
>>> ssh deathcubek@bucketheadland.com mkdir -p .terminfo/r/
>>> scp /usr/share/terminfo/r/rxvt-unicode-256color deathcubek@bucketheadland.com:.terminfo/r/
------------------------------------------
==========================================
/---
function :set_string_to_terminal_id() {
    # Validate sanity.
    die_unless_arg 'Expected one string name.'
    :die_unless_terminal

    # Set such integer. Note that capturing the output of running external
    # command "tset -q" also inefficiently suffices.
    :string.set "${1}" "${TERM}"
}

# ....................{ SETTERS ~ height                   }....................
declare_function_with_stdin <<'/---'
void :set_int_to_terminal_height(string int_name)

Set the passed integer variable to the height in characters of the current
terminal. If the current shell is *headless* (i.e., _not_ running under
terminal emulation), an exception is thrown.
/---
function :set_int_to_terminal_height() {
    # Validate sanity.
    die_unless_arg 'Expected one integer name.'
    :die_unless_terminal

    # Set such integer. Note that capturing the output of running external
    # command "tput lines" also inefficiently suffices.
    :int.set "${1}" "${LINES}"
}

# ....................{ SETTERS ~ width                    }....................
declare_function_with_stdin <<'/---'
void :set_int_to_terminal_width_if_found_or_default(string int_name)

Set the passed integer variable to the width in characters of the current
terminal if the current shell is running under a terminal or a sensible default
appropriate for headless logging otherwise (e.g., 80).
/---
function :set_int_to_terminal_width_if_found_or_default() {
    # Validate sanity.
    die_unless_arg 'Expected one integer name.'
    :string int_name__sittwifod="${1}"

    # If the current shell is running under a terminal, set such integer to
    # such terminal's current width. See :set_int_to_terminal_width() for
    # further details.
    if { :is_terminal } {
        :int.set "${int_name__sittwifod}" "${COLUMNS}"
    # Else, set such integer to a sensible default.
    } else {
        :int.set "${int_name__sittwifod}" 80
    }
}

declare_function_with_stdin <<'/---'
void :set_int_to_terminal_width(string int_name)

Set the passed integer variable to the width in characters of the current
terminal. If the current shell is *headless* (i.e., _not_ running under
terminal emulation), an exception is thrown.
/---
function :set_int_to_terminal_width() {
    # Validate sanity.
    die_unless_arg 'Expected one integer name.'
    :die_unless_terminal

    # Set such integer. Note that capturing the output of running external
    # command "tput columns" also inefficiently suffices.
    :int.set "${1}" "${COLUMNS}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Create a new :set_int_to_terminal_width_if_found_or_default() and call
#replace most existing calls to :set_int_to_terminal_width() by calls to such
#function.
