#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'-/-'
Handle the current user's preferred *locale* (i.e., set of global variables
defining language, location, country, and culture preferences).

== Globals ==

The X/Open CAE Specification defines at least six primary globals
${LC_COLLATE}, ${LC_CTYPE}, ${LC_MESSAGES}, ${LC_MONETARY}, ${LC_NUMERIC}, and
${LC_TIME} and two secondary globals ${LC_ALL} and ${LANG}. Collectively, such
globals define the current user's wanted locale. ${LC_ALL} supersedes all
primary globals, themselves superseding ${LANG}. ${LC_ALL} and ${LANG} have
no use apart from deciding the value of primary globals. Avoid setting
${LC_ALL} unless testing, since such setting cannot be overridden.

To decide the value of a primary global (say, ${LC_CTYPE}), the official
algorithm and hence `locale` command:

* If ${LC_ALL} is set, expands such global, which overrides all other globals.
* Else if the wanted primary global is set, expands such global.
* Else if ${LANG} is set, expands such global, which provides a default value
  for all unset globals.
* Else, adopts the default `C` locale.

== See Also ==

* http://pubs.opengroup.org/onlinepubs/007908799/xbd/envvar.html[Official documentation]
  for all locale environment variables (e.g., ${LC_ALL}).
-/-

#FIXME: Be nice to check LC_* sanity. Namely, either ${LANG} should be set or all
#"LC_*" globals excluding "LC_ALL" should be set. "LC_ALL" should never be
#set, since such setting cannot subsequently be overridden. See:
#http://www.gentoo.org/doc/en/guide-localization.xml
#If neither condition holds, we should try to set a sane default LANG value.
#* If *ALL* "LC_*" globals *AND* ${LANG} are empty, set LANG to a sensible
#  locale supported under the current system -- ideally, "en_US.utf8". (Print out
#  a warning message suggesting the user set either ${LANG} or ${LC_ALL}.) Ah-ha!
#  So. We can run "locale -a" to print out all public locales. Filter the
#  ubiquitous "C" from such list and use the first remaining line. Done!
#* Else if ${LANG} and ${LC_ALL} are empty but some "LC_*" global is not, set
#  LANG to such global. (Print out a warning message suggesting the user set
#  either ${LANG} or ${LC_ALL}.)
#* Else, do nothing.
#FIXME: It'd be great to begin providing hooks for a Zeshy message catalog of
#internationalized messages (e.g., errors, warnings, headers). I note that,
#while there's little to no zsh-specific content on i18n, Bash-specific
#content is of growing interest: e.g.,
#http://www.linuxjournal.com/content/internationalizing-those-bash-scripts
#The key takeaway appears to be ".po" (Portable Object)-format files
#consisting of a fairly awkward key-value driven textual syntax:
#
#    File: en.po
#    msgid "Main Greeting"
#    msgstr "Welcome, what do you want to do today?"
#    msgid "Missing File Error"
#    msgstr "File Not Found"
#
#Executing the "msgfmt" command converts such human-readable text files to a
#machine-readable binary format whose filename is in a format referred to as
#a "text domain." Each application defines its own "text domain" hopefully
#globally unique to that application, to avoid conflicts with other installed
#".mo" files when installed under system-wide paths. In our case, the "text
#domain" is simply "zeshy": e.g.,
#
#    # Generate the machine-readable ".mo" file from the human-readable
#    # ".po" file above.
#    msgfmt -o zeshy.mo en.po
#    # Install such file to a system-recognized path.
#    cp -p zeshy.zsh.mo $HOME/locale/en/LC_MESSAGES/
#
#System-wide ".mo" files reside under "/usr/share/locale" on Gentoo systems,
#for example. Ah; nice. Looks like we set application-specific text domains
#like so, thus avoiding installation in such system-specific paths:
#
#    string_global_export TEXTDOMAIN='zeshy'
#    string_global_export TEXTDOMAINDIR="${ZESHY_HOME}/locale"
#
#Ah. Actually, we probably shouldn't set that. Zeshy is an application
#wrapper; individual Zeshy applications could be expected to set such globals,
#thus conflicting with Zeshy use. Instead, just pass such strings as hard-
#coded options to every call of "gettext" and "ngettext". (Nice!)
#
#So, Zeshy'll need a new top-level "locale" directory with structure like
#that of "/usr/share/locale". We'll also want to auto-generate such directory
#on any change to *ANY* underlying ".po" file if in debug mode (since the
#current locale may be changed while running Zeshy without restarting Zeshy).
#
#Actually using such strings is equally simple. Run "gettext", which
#implicitly opens the ".mo" file corresponding to the current locale and
#retrieves the string corresponding to the passed key:
#
#    # If the current locale is English, print:
#    #     "Welcome, what do you want to do today?"
#    gettext -s "Main Greeting"
#
#Mmmmm. Intriguing. Bash (and presumably zsh) appear to offer a convient
#language-centric wrapper around "gettext": $"..." and $'...'. If the
#embedded string is a key contained by the ".mo" file for this text domain,
#Bash substitutes such string with the corresponding value; otherwise, Bash
#ignores the prefixing '$' character and expands such string as is. Uhm. Hm!
#GNU *STRONGLY DISCOURAGES* such usage due to security and portability flaws:
#    https://www.gnu.org/software/gettext/manual/html_node/bash.html
#
#Interesting. "gettext" distributes a "gettext.sh" script defining a few
#helper functions, documented here:
#    https://www.gnu.org/software/gettext/manual/gettext.html
#
#The "Preparing Shell Scripts for Internationalization" section recommends to
#"Simplify translatable strings so that they don't contain command substitution
# ("`...`" or "$(...)"), variable access with defaulting (like
# ${variable-default}), access to positional arguments (like $0, $1, ...) or
# highly volatile shell variables (like $?)." In other words, interpolated
#variables must have purely alphabetic names. I'm fairly certain we adhere
#to such suggests everywhere, except in a few exception error messages where
#we interpolate in "${1}" or "${2}". *shrug*
#
#For strings interpolating no variables, calling "gettext" suffices (as above).
#For strings interpolating at least one variable, we'll need to call the
#eval_gettext() defined by the gettext.sh script. Actually, let's just rip
#that function definition into a new Zeshy-specific eval_gettext() function.
#Interestingly, this implies the msgid key actually contains the desired
#"$"-prefixed variable names, which will naturally be interpolated into such
#string *AFTER* mapping to the desired msgstr value.
#
#Interesting: strings requiring plural handling use "ngettext" and
#eval_ngettext(), instead. Quite a bit to read up on, here!
#
#We should be able to write a single function encapsulating the above four
#commands: e.g.,
#
#* If passed no plurality parameters and:
#  * If passed a msgid matching *'$'*, call eval_gettext() (or the Zeshy
#    equivalent thereof).
#  * Else, run "gettext".
#* Else:
#  * If passed a msgid matching *'$'*, call eval_ngettext() (or the Zeshy
#    equivalent thereof).
#  * Else, run "ngettext".
#Right. So, regardless of the low-level interface discussed above, the high-
#level interface should be encapsulated by the following three functions:
#
#   void die_localized(string error_msgid, string text_domain = 'zeshy', string text_domain_dirname = "${ZESHY_HOME}/locale")
#   void cry_localized(string warning_msgid, string text_domain = 'zeshy', string text_domain_dirname = "${ZESHY_HOME}/locale")
#   void say_localized(string info_msgid, string text_domain = 'zeshy', string text_domain_dirname = "${ZESHY_HOME}/locale")
#
#Fairly self-explanatory. Zeshy scripts are welcome to pass script-specific
#text domains and dirnames (and probably define helper functions of their
#own); Zeshy functions, on the other hand, merely call such functions as is,
#relying on the default values to provide sensible behavior.
#
#Also, I note most of the above examples to equate the default English msgid
#and msgstr. This is, of course, terrible. The msgids passed to the above
#functions should *ALWAYS* be concise descriptors, perhaps simply the name
#of the calling function or component for language-agnostic behavior: e.g.,
#
#   function im_gonna_die() {
#       # Print the error message with msgid "im_gonna_die".
#       die_localized 'im_gonna_die'
#   }
#
#   Sweet. I reckon that covers things, yes?
#FIXME: Indeed, assuming msgids to always be runnable names, die_localized()
#should default the msgid if unpassed to the caller's name: e.g.,
#
#   function im_gonna_die() {
#       # This just works.
#       die_localized
#   }
#FIXME: Ah; better function names might include:
#
#   void die_locale_message(string error_msgid, string text_domain = 'zeshy', string text_domain_dirname = "${ZESHY_HOME}/locale")
#   void cry_locale_message(string warning_msgid, string text_domain = 'zeshy', string text_domain_dirname = "${ZESHY_HOME}/locale")
#   void say_locale_message(string info_msgid, string text_domain = 'zeshy', string text_domain_dirname = "${ZESHY_HOME}/locale")
#
#Errr, perhaps not. I mean, this just doesn't read sensibly at all:
#
#   function im_gonna_die() {
#       # Well, what's the message then?
#       die_locale_message
#   }
#
#Right! die_localized() and friends it is.
#FIXME: I'm not entirely convinced that msgids are the way to go. They only work
#when the exception message to be printed is statically known at compile time.
#In numerous cases, however, the exception message to be printed either depends
#on runtime state *OR* is technically known at compile time but somewhat
#convoluted to decide (e.g., get_path_matching_glob_qualifier_first()). Perhaps
#we could allow for both? As in:
#
#* If the passed msgid matches glob [a-z_]##, then such msgid is a simple ID.
#  This is the ideal case.
#* Else, such msgid is the exception message to be localized. This isn't quite
#  as ideal, as it requires duplication of such message; but, hey. It works.

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_locale_character()

Get the current character locale. By definition, this is the first nonempty
variable in the following list (in order): ${LC_ALL}, ${LC_CTYPE}, and ${LANG}:
e.g.,

.get_locale_character()
==========================================
[source]
------------------------------------------
>>> print_string "${LC_ALL}"
en_CA.utf8
>>> get_locale_character
en_CA.utf8
------------------------------------------
==========================================
/---
function get_locale_character() {
    # Get such locale. See "locale" documentation for algorithm details.
    die_if_args
    get_variable_value_first_if_found LC_ALL LC_CTYPE LANG or
        :output_string 'C.ISO-8859-1'
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void set_locale_default(string locale)

Set the current default locale (i.e., ${LANG}) to the passed locale, a string
typically of the format "${language_code}_${region_code}.${encoding_code}":

* `${language_code}`, two lowercase letters signifying such language (e.g.,
  "en" for English, "fr" for French).
* `${region_code}`, two uppercase letters signifying such region (e.g.,
  "AU" for Australia, "CA" for Canada).
* `${encoding_code}`, one or more letters signifying such encoding (e.g.,
  "UTF-8" for Unicode UTF-8, "US-ASCII" for North American ASCII).
/---
function set_locale_default() {
    # Validate passed arguments.
    die_unless_arg 'expected one locale'
    string locale="${1}"
    die_unless_locale_public "${locale}"

    # Set such locale.
    string_global_export LANG="${locale}"
}

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string print_locale()

Print a human-readable synopsis of the current locale.
/---
function print_locale() {
    #FIXME: "locale" output is not terribly helpful. Annotating such output
    #with human-readable labels would be helpful. Actually... depending on
    #"locale" is a tad silly, here. Since it refuses to print human-readable
    #output, let's do so in its stead. Ah, *NO*. "locale" output is actually
    #awesome, since it implicitly incorporates ${LANG} defaulting and so on.
    die_if_args
    die_unless_pathable locale
    command locale
}

# --------------------( WASTELANDS                         )--------------------
    #FUXME: Rename to get_variable_value_first_if_nonempty(). In fact, all
    #of the get_first_X() functions should be renamed to get_X_first().

# ....................{ I18N                               }....................
#FUXME: Is this globally safe? Assuming no terminal device, this *SHOULD* be safe.
#If this shell is attached to a terminal device, however, we should probably
#only accept UTF-8 print_string under terminal devices accepting such input. Perhaps
#the terminfo database publishes such details? Investigate.

# Uncomment one or both of the following definitions to enable default English
# Unicode support, if not already enabled.
#   LANG\
#   LC_ALL\

# Default locale for all globals matching "LC_*" (e.g., "LC_CTYPE", "LC_TIME").
#LANG="${LANG-en_US.utf8}"

# Global locale overriding all globals matching "LC_*".
#LC_ALL="${LC_ALL-en_US.utf8}"

    #FUXME: Antiquated. Just call locale.
#   get_first_nonempty_variable_value_if_found LC_ALL LC_CTYPE LANG or
#       print_string "C"
# ${LC_ALL} supersedes ${LC_CTYPE} superseding ${LANG} for purposes of
# ascertaining the character locale, according to:
#
#     http://rosettacode.org/wiki/Terminal_control/Unicode_output
#   if is_string_nonempty LC_ALL
#   then print_string ${LC_ALL}
#   elif is_string_nonempty LC_CTYPE
#   then print_string ${LC_CTYPE}
#   elif is_string_nonempty LANG
#   then print_string ${LANG}
#   else die 'environment variables "LC_ALL", "LC_CTYPE", and "LANG" either not defined or empty'
#   fi

    #FUXME: We *REALLY* want to verify the passed string is a valid locale
    #under the current system, since we're not actually calling a command. How?
# While the Linux community appears to prefer the
# former, enough systems use the latter to necessitate matching both.#
