#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle color-specific ANSI escape sequences.
/---

# ....................{ REMOVERS                           }....................
#FIXME: Is this still called anywhere? Contemplate excising. For any reasonable
#efficiency, it would need be converted into a setter anyway.
declare_function_with_stdin <<'/---'
string remove_string_ansi(string text1, ...)

Get the passed strings stripped of all color-specific ANSI escape codes. The
resulting string thus retains only non-color-specific ANSI escape codes (e.g.,
`\033[J`, clearing from the current cursor to the end of the current screen).
/---
function remove_string_ansi() {
    # Avoid calling remove_string_text_matching_glob(). zsh fails with "bad pattern"
    # when expanding ${ZESHY_ANSI_CSI} as a glob expression (e.g., as
    # "${~ZESHY_ANSI_CSI}").
    die_unless_args 'Expected one or more strings.'
    output_string "${*//${~ZESHY_ANSI_GLOB}}"
}

# --------------------( WASTELANDS                         )--------------------
# ....................{ GETTERS                            }....................
#FUXME: Remove entirely. Existing calls to this function should be changed to
#call get_string_ansiless_length_printable() instead. The whole "_sans_ansi" concept is
#fundamentally flawed, as discussed below.
#declare_function_with_stdin <<'/---'
#integer get_string_length_printable(string text1, ...)
#
#Get the total length in printable multibyte characters of the passed strings
#excluding ANSI escape sequences in such strings. See
#set_integer_to_string_length_printable() for a setter analogue and
#get_string_ansiless_length_printable() for further details: e.g.,
#
#.get_string_length_printable()
#==========================================
#[source]
#------------------------------------------
#>>> string on_flag_and_wind=\
#...    "A temple flag flapped in the wind. Two monks stood watching. One said to
#...     the other, \"The flag is moving.\" The other replied, \"The wind is
#...     moving.\" The sixth patriarch, Eno, overheard this and said, \"It is not
#...     the wind or the flag. The mind is moving.\""
#>>> get_string_length_printable "${on_flag_and_wind}"
#248
#>>> get_string_length_printable\
#...     "${ZESHY_STYLE_TO_COLOR[color.reset]}${on_flag_and_wind}"
#248
#------------------------------------------
#==========================================
#/---
#function get_string_length_printable() {
#    # For efficiency, inline the equivalent of:
#    # 
#    #     >>> get_string_ansiless_length_printable "$(remove_string_ansi "${@}")"
#    die_unless_args 'Expected one or more strings.'
#    output_string "${(m)#${*//${~ZESHY_ANSI_GLOB}}}"
#}
#
## ....................{ GETTERS                            }....................
##FUXME: Bad nomenclature, I'm afraid. set_integer_to_string_length_printable()
##should be a general-purpose function and hence exclude the length of non-
##printable ANSI escape sequences. Hence, this function should be renamed to
##set_integer_to_string_length_printable() and shifted to a more appropriate
##parcel (e.g., @{variable/string/set}). Naturally, the existing
##get_string_ansiless_length_printable() function should internally defer to
##set_integer_to_string_length_printable().
#declare_function_with_stdin <<'/---'
#void set_integer_to_string_length_printable(
#    string integer_name,
#    string text1, ...)
#
#Set the passed integer to the total length in printable multibyte characters of
#the passed strings excluding ANSI escape sequences in such strings. See
#get_string_length_printable() for a getter analogue and
#get_string_ansiless_length_printable() for further details. e.g.,
#
#.set_integer_to_string_length_printable()
#==========================================
#[source]
#------------------------------------------
#>>> integer length
#>>> string on_theology=\
#...    "Nobushige, a respected samurai, came to Hakuin and asked, \"Is there
#...     really a heaven and hell?\"
#...     \"Who are you?\" inquired Hakuin.
#...     \"A samurai,\" Nobushige replied.
#...     \"You, a samurai!\" exclaimed Hakuin. \"What kind of ruler would have
#...     you as his guard? Your face looks like that of a beggar.\"
#...     In anger, Nobushige drew his sword. Hakuin continued, \"Oh, you have a
#...     sword? Your weapon is probably too dull to even cut off my head.\"
#...     As Nobushige raised his sword, Hakuin remarked, \"Here open the gates of
#...     hell.\"
#...     As Nobushige lowered his sword, Hakuin intoned, \"Here open the gates of
#...     heaven.\""
#>>> set_integer_to_string_length_printable length "${on_theology}"
#>>> output_string "${length}"
#568
#>>> set_integer_to_string_length_printable length\
#...     "${ZESHY_STYLE_TO_COLOR[color.black]}${on_theology}"
#>>> output_string "${length}"
#568
#------------------------------------------
#==========================================
#/---
#function set_integer_to_string_length_printable() {
#    # Validate sanity.
#    die_unless_args_2_or_more\
#        'Expected one integer name and one or more strings.'
#    string integer_name__sitslpsa="${1}"
#    shift_arg
#
#    # Set such length. For efficiency, inline such implementation. See
#    # get_string_length_printable() for further details.
#    set_integer_to_integer\
#        "${integer_name__sitslpsa}" "${(m)#${*//${~ZESHY_ANSI_GLOB}}}"
#}

#FUXME: Call everywhere get_string_length_printable() is referenced.
#>>> gret_string_length_printable_sans_ansi\
#...     "${on_flag_and_wind}" "${on_heaven_and_hell}"
#831
#>>> get_string_length_printable\
#...     "${ZESHY_STYLE_TO_COLOR[anaximander]}"
#0
#>>> get_string_length_printable\
#...     "${ZESHY_STYLE_TO_COLOR[diogenes]}Gnomon"
#6

# Select Graphics Rendition (SGR) ANSI escape codes, used for
#setting color attributes of the current terminal.
#   get_string_ansiless_length_printable "$(remove_string_ansi "${@}")"
    #FUXME: This should simply be fixed. Ideally, ${ZESHY_ANSI_CSI} should be
    #integrated into ${ZESHY_ANSI_SGR_GLOB}. How?
#${ZESHY_ANSI_CSI}
#The interpretation of such index depends on the number of c
#in either:
#Such sequence displays the color with such index in such terminal's pallette.

#, displaying the color indexed by such integer
#  in the 8-bit `xterm` pallette.

    #FUXME: Rename "background_" to "background=" (e.g., "background_black" to
    #"background=black"). It's important we *NOT* use ":" as a delimiter, as ":"
    #already delimits ANSI attributes external to map keys. And yes, I've confirmed
    #that map keys resembling "background=black" are usable in lists and maps
    #without requiring explicit quotation. Looks pretty nifty too, eh?

    #FUXME: Rename "intense_(*)" to "$1_intense" (e.g., "intense_black" to
    #"black_intense").
    #FUXME: Rename "background_" to "background-" (e.g., "background_black" to
    #"background-black").
#FUXME: Do the following two substrings apply only to CSI sequences or to OSC
#sequences as well? In the former case, we should probably rename this to, say,
#${ZESHY_ANSI_CSI_SGR_SUFFIX_NEXT}.

#substrings may be listed in any order within such string
#While substrings may be repeated, this is
#probably _not_ a wise idea.
#
#such that each element of such list is a `:`-delimited substring of such string
#${ZESHY_COLOR} keys (e.g., `grey_bold_italic`, the color grey in
#bold-italic typeface), whose corresponding values are the ANSI escape codes
#enabling such colors on the current terminal. See such map for further details.
#
#Colors include the canonical eight
#colors supported by most terminal emulators as well as "grey", a Zeshy-specific
#color leveraging "intense" ANSI attributes supported by most modern terminal
#emulators (e.g., rxvt-unicode). Color names include:

#>>> string on_salvia_divinorum=\
#...    "${ZESHY_STYLE_TO_COLOR[uroboros]} In all of our Pharmako/Poeia, this plant
#...     is the hidden pearl. Poets, like vintners, love such surprises, and seek
#...     them out beyond their better known brothers and sisters: an unknown poet
#...     found in a faded chapbook with light in his verses, an obscure vintage
#...     the reviewers missed, dust-covered, but filled with mouthfuls of
#...     delight. The little leaves, hiding off in the mountains, have
#...     successfully avoided the front pages for four centuries."
#>>> string on_hojas_de_la_pastora=\
#...    "${ZESHY_STYLE_TO_COLOR[bathyscaphe]} A Taoist sage, in another range of
#...     mountains, after many years of studying the secrets of alchemy with his
#...     master, feeling fully accomplished, descended the mountain to move into
#...     the world. When evening approached, he stopped at an inn. The people at
#...     the inn marveled at the light that seemed to hover about him â€“ a sort of
#...     magical glow. The sage was chagrined, realizing that his studies were
#...     only half completed, and returned immediately to his teacher."
#...    "${ZESHY_STYLE_TO_COLOR[uroboros]} In all of our Pharmako/Poeia, this plant
#...     is the hidden pearl. Poets, like vintners, love such surprises, and seek
#...     them out beyond their better known brothers and sisters: an unknown poet
#...     found in a faded chapbook with light in his verses, an obscure vintage
#...     the reviewers missed, dust-covered, but filled with mouthfuls of
#...     delight. The little leaves, hiding off in the mountains, have
#...     successfully avoided the front pages for four centuries."
#>>> string on_hojas_de_la_pastora=\
#...    "${ZESHY_STYLE_TO_COLOR[bathyscaphe]} A Taoist sage, in another range of
#...     mountains, after many years of studying the secrets of alchemy with his
#...     master, feeling fully accomplished, descended the mountain to move into
#...     the world. When evening approached, he stopped at an inn. The people at
#...     the inn marveled at the light that seemed to hover about him â€“ a sort of
#...     magical glow. The sage was chagrined, realizing that his studies were
#...     only half completed, and returned immediately to his teacher."
#>>> get_string_length_printable\
#Excrutiatingly helpful dissection of ANSI escape codes.
#function yoyo() {
#    is "${ZESHY_STYLE_TO_COLOR[color.reset]}" == ${ZESHY_ANSI_CSI}${~ZESHY_ANSI_SGR_GLOB} si
#    string yoyo="$(remove_string_ansi "${ZESHY_STYLE_TO_COLOR[color.reset]}")"
#    print "reset after ANSI removed: $yoyo (${#yoyo}) ($(get_string_length_printable "${yoyo}"))"
#}
# Unfortunately, zsh fails with a "bad pattern" error when aggregating the
# following CSI and SGR globs into a single glob. Gotta keep them separated.
