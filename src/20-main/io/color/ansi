#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle color-specific ANSI escape sequences.

== See Also ==

* https://en.wikipedia.org/wiki/ANSI_escape_code[ANSI escape code] reference.
/---

# ....................{ GLOBALS                            }....................
# Effectively, "<Esc>[".
declare_global_with_stdin string ZESHY_ANSI_CSI=$'\E\[' <<'/---'
2-byte Control Sequence Introducer (CSI) prefixing all *standard ANSI escape
sequences* (i.e., sequences supported by all ANSI-conformant terminals),
including sequences for displaying both 3- and 8-bit colors.
/---

# Effectively, "<Esc>]".
declare_global_with_stdin string ZESHY_ANSI_OSC=$'\E\]' <<'/---'
2-byte Operating System Command (OSC) prefixing all *nonstandard ANSI escape
sequences* (i.e., sequences supported by only a subset of ANSI-conformant
terminals), including sequences for associating color indices with arbitrary
RGB values.
/---

declare_global_with_stdin string ZESHY_ANSI_SUFFIX_NEXT=';' <<'/---'
1-byte Select Graphics Rendition (SGR) delimiter for delimiting subsequences in
both standard and nonstandard ANSI escape sequences (i.e., CSI and OSC).
/---

declare_global_with_stdin string ZESHY_ANSI_SUFFIX_LAST='m' <<'/---'
1-byte Select Graphics Rendition (SGR) suffix for both standard and nonstandard
ANSI escape sequences (i.e., sequences prefixed by either the ANSI CSI or OSC).
/---

# ....................{ GLOBALS ~ pattern                  }....................
# Define such globals after prior globals. Dismantled, this is:
#
# * $'...''[...], matching the CSI or OSC prefixing such sequences. Since
#   ${ZESHY_ANSI_CSI} and ${ZESHY_ANSI_OSC} do not escape the corresponding
#   glob-reserved characters, such globals cannot be expanded into this glob.
# * (...)m", matching zero or more Select Graphic Rendition (SGR)
#   parameters also referred to as color indices:
#   * "|", matching the empty string and hence the ANSI escape code
#     "CSI m" identical to "<Esc>[0m" resetting all SGR parameters.
#   * "[0-9](#c1,3)", matching an 8-bit integer expressed as one to three
#     digits as the first SGR parameter.
#   * "(;[0-9](#c1,3))#", matching zero or more sequences of a semicolon
#     followed by an 8-bit integer as all following SGR parameters.
declare_global_with_stdin string\
    ZESHY_ANSI_GLOB=$'\E''[\[\]](|[0-9](#c1,3)('${ZESHY_ANSI_SUFFIX_NEXT}'[0-9](#c1,3))#)'${ZESHY_ANSI_SUFFIX_LAST} <<'/---'
Glob matching a single ANSI escape sequence, including both standard CSI- and
nonstandard OSC-prefixed ANSI sequences.
/---

declare_global_with_stdin string\
    ZESHY_ANSI_PCRE=$'\E''[\[\]](?:[0-9]{1,3}(?:'${ZESHY_ANSI_SUFFIX_NEXT}'[0-9]{1,3})*)?'${ZESHY_ANSI_SUFFIX_LAST} <<'/---'
PCRE matching a single ANSI escape sequence, including both standard CSI- and
nonstandard OSC-prefixed ANSI sequences.
/---

# ....................{ GLOBALS ~ sgr                      }....................
#FIXME: Rename to ${ZESHY_ANSI_SGR_COLOR_INDEXED}.
declare_global_with_stdin string ZESHY_ANSI_SGR_INDEXED_COLOR='5' <<'/---'
1-byte Select Graphics Rendition (SGR) attribute, when preceded by the extended
SGR foreground or background attribute and followed by a color index, for
displaying the color with such index in the color pallette for such terminal.
Such index must be an integer in either:

* [0, 255] on 256-color terminals (e.g., `xterm`, `rxvt-256color`).
* [0, 87] on 88-color terminals (e.g., `rxvt`).

See define_global_x11_color_name_to_color_ansi_256() for further details.
/---

declare_global_with_stdin map ZESHY_ANSI_SGR_NAME_TO_VALUE <<'/---'
Map from lowercase color attribute name to the Select Graphics Rendition (SGR)
integer configuring such attribute when preceded by ${ZESHY_ANSI_CSI}.
/---
ZESHY_ANSI_SGR_NAME_TO_VALUE=(
    # Attribute resetters.
    reset 0

    # Attribute enablers.
    bold      1
    weak      2
    italic    3
    underline 4
    blink     5
    reverse   7
    conceal   8
    normal   22

    # Attribute disablers.
    bold_off      22
    italic_off    23
    underline_off 24
    blink_off     25
    reverse_off   27
    conceal_off   28

    # Foreground colors.
    black   30
    red     31
    green   32
    yellow  33
    blue    34
    magenta 35
    cyan    36
    white   37
    indexed 38
    default 39

    # Background colors.
    background=black   40
    background=red     41
    background=green   42
    background=yellow  43
    background=blue    44
    background=magenta 45
    background=cyan    46
    background=white   47
    background=indexed 48
    background=default 49

    #FIXME: Rename to "black_intense" and such.
    # Foreground high-intensity colors.
    intense_black   90
    intense_red     91
    intense_green   92
    intense_yellow  93
    intense_blue    94
    intense_magenta 95
    intense_cyan    96
    intense_white   97
    intense_default 99

    #FIXME: Rename to "background=black_intense" and such.
    # Background high-intensity colors.
    background=intense_black   100
    background=intense_red     101
    background=intense_green   102
    background=intense_yellow  103
    background=intense_blue    104
    background=intense_magenta 105
    background=intense_cyan    106
    background=intense_white   107
    background=intense_default 109
)

# ....................{ REMOVERS                           }....................
#FIXME: Right. This *SHOULD* be called elsewhere. We currently simply inline its
#implementation elsewhere, which is patently wrong. Grep the codebase for use of
#${~ZESHY_ANSI_GLOB}.
#FIXME: Add example.

declare_function_with_stdin <<'/---'
void :remove_string_ansi(string string_name)

Remove all ANSI escape sequences from the value of the passed string variable.
/---
function :remove_string_ansi() {
    die_unless_arg 'Expected one string name.'
    :remove_string_text_matching_glob "${1}" "${ZESHY_ANSI_GLOB}"
    # :output_string "${*//${~ZESHY_ANSI_GLOB}}"
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Is this still called anywhere? Refactor into an in-place setter. No name
#change required, presumably.
#FUXME: Rename to ${ZESHY_COLOR_ANSI_GLOB}.
#FUXME: Rename to ${ZESHY_COLOR_ANSI_PCRE}.

# Such value thus retains only non-color-specific ANSI escape
# codes (e.g., `\033[J`, clearing from the current cursor to the end of the
# current screen).

    #FUXME: Uhm; this proscription would seem to no longer apply. Just call
    #:remove_string_text_matching_glob().

    # Avoid calling :remove_string_text_matching_glob(). zsh fails with "bad
    # pattern" when expanding ${ZESHY_ANSI_CSI} as a glob expression (e.g., as
    # "${~ZESHY_ANSI_CSI}").
#FUXME: Uhm; why isn't ${~ZESHY_ANSI_GLOB} declared here anymore? *sigh*

# ....................{ GETTERS                            }....................
#FUXME: Remove entirely. Existing calls to this function should be changed to
#call get_string_ansiless_length_printable() instead. The whole "_sans_ansi" concept is
#fundamentally flawed, as discussed below.
#declare_function_with_stdin <<'/---'
#integer get_string_length_printable(string text1, ...)
#
#Get the total length in printable multibyte characters of the passed strings
#excluding ANSI escape sequences in such strings. See
#:set_int_to_string_length_printable() for a setter analogue and
#get_string_ansiless_length_printable() for further details: e.g.,
#
#.get_string_length_printable()
#==========================================
#[source]
#------------------------------------------
#>>> string on_flag_and_wind=\
#...    "A temple flag flapped in the wind. Two monks stood watching. One said to
#...     the other, \"The flag is moving.\" The other replied, \"The wind is
#...     moving.\" The sixth patriarch, Eno, overheard this and said, \"It is not
#...     the wind or the flag. The mind is moving.\""
#>>> get_string_length_printable "${on_flag_and_wind}"
#248
#>>> get_string_length_printable\
#...     "${ZESHY_STYLE_TO_COLOR[color.reset]}${on_flag_and_wind}"
#248
#------------------------------------------
#==========================================
#/---
#function get_string_length_printable() {
#    # For efficiency, inline the equivalent of:
#    # 
#    #     >>> get_string_ansiless_length_printable "$(remove_string_ansi "${@}")"
#    die_unless_args 'Expected one or more strings.'
#    :output_string "${(m)#${*//${~ZESHY_ANSI_GLOB}}}"
#}
#
## ....................{ GETTERS                            }....................
##FUXME: Bad nomenclature, I'm afraid. :set_int_to_string_length_printable()
##should be a general-purpose function and hence exclude the length of non-
##printable ANSI escape sequences. Hence, this function should be renamed to
##:set_int_to_string_length_printable() and shifted to a more appropriate
##parcel (e.g., @{variable/string/set}). Naturally, the existing
##get_string_ansiless_length_printable() function should internally defer to
##:set_int_to_string_length_printable().
#declare_function_with_stdin <<'/---'
#void :set_int_to_string_length_printable(
#    string integer_name,
#    string text1, ...)
#
#Set the passed integer to the total length in printable multibyte characters of
#the passed strings excluding ANSI escape sequences in such strings. See
#get_string_length_printable() for a getter analogue and
#get_string_ansiless_length_printable() for further details. e.g.,
#
#.:set_int_to_string_length_printable()
#==========================================
#[source]
#------------------------------------------
#>>> integer length
#>>> string on_theology=\
#...    "Nobushige, a respected samurai, came to Hakuin and asked, \"Is there
#...     really a heaven and hell?\"
#...     \"Who are you?\" inquired Hakuin.
#...     \"A samurai,\" Nobushige replied.
#...     \"You, a samurai!\" exclaimed Hakuin. \"What kind of ruler would have
#...     you as his guard? Your face looks like that of a beggar.\"
#...     In anger, Nobushige drew his sword. Hakuin continued, \"Oh, you have a
#...     sword? Your weapon is probably too dull to even cut off my head.\"
#...     As Nobushige raised his sword, Hakuin remarked, \"Here open the gates of
#...     hell.\"
#...     As Nobushige lowered his sword, Hakuin intoned, \"Here open the gates of
#...     heaven.\""
#>>> :set_int_to_string_length_printable length "${on_theology}"
#>>> :output_string "${length}"
#568
#>>> :set_int_to_string_length_printable length\
#...     "${ZESHY_STYLE_TO_COLOR[color.black]}${on_theology}"
#>>> :output_string "${length}"
#568
#------------------------------------------
#==========================================
#/---
#function :set_int_to_string_length_printable() {
#    # Validate sanity.
#    die_unless_args_2_or_more\
#        'Expected one integer name and one or more strings.'
#    string integer_name__sitslpsa="${1}"
#    shift_arg
#
#    # Set such length. For efficiency, inline such implementation. See
#    # get_string_length_printable() for further details.
#    :set_int_to_int\
#        "${integer_name__sitslpsa}" "${(m)#${*//${~ZESHY_ANSI_GLOB}}}"
#}

#FUXME: Call everywhere get_string_length_printable() is referenced.
#>>> gret_string_length_printable_sans_ansi\
#...     "${on_flag_and_wind}" "${on_heaven_and_hell}"
#831
#>>> get_string_length_printable\
#...     "${ZESHY_STYLE_TO_COLOR[anaximander]}"
#0
#>>> get_string_length_printable\
#...     "${ZESHY_STYLE_TO_COLOR[diogenes]}Gnomon"
#6

# Select Graphics Rendition (SGR) ANSI escape codes, used for
#setting color attributes of the current terminal.
#   get_string_ansiless_length_printable "$(remove_string_ansi "${@}")"
    #FUXME: This should simply be fixed. Ideally, ${ZESHY_ANSI_CSI} should be
    #integrated into ${ZESHY_ANSI_SGR_GLOB}. How?
#${ZESHY_ANSI_CSI}
#The interpretation of such index depends on the number of c
#in either:
#Such sequence displays the color with such index in such terminal's pallette.

#, displaying the color indexed by such integer
#  in the 8-bit `xterm` pallette.

    #FUXME: Rename "background_" to "background=" (e.g., "background_black" to
    #"background=black"). It's important we *NOT* use ":" as a delimiter, as ":"
    #already delimits ANSI attributes external to map keys. And yes, I've confirmed
    #that map keys resembling "background=black" are usable in lists and maps
    #without requiring explicit quotation. Looks pretty nifty too, eh?

    #FUXME: Rename "intense_(*)" to "$1_intense" (e.g., "intense_black" to
    #"black_intense").
    #FUXME: Rename "background_" to "background-" (e.g., "background_black" to
    #"background-black").
#FUXME: Do the following two substrings apply only to CSI sequences or to OSC
#sequences as well? In the former case, we should probably rename this to, say,
#${ZESHY_ANSI_CSI_SGR_SUFFIX_NEXT}.

#substrings may be listed in any order within such string
#While substrings may be repeated, this is
#probably _not_ a wise idea.
#
#such that each element of such list is a `:`-delimited substring of such string
#${ZESHY_COLOR} keys (e.g., `grey_bold_italic`, the color grey in
#bold-italic typeface), whose corresponding values are the ANSI escape codes
#enabling such colors on the current terminal. See such map for further details.
#
#Colors include the canonical eight
#colors supported by most terminal emulators as well as "grey", a Zeshy-specific
#color leveraging "intense" ANSI attributes supported by most modern terminal
#emulators (e.g., rxvt-unicode). Color names include:

#>>> string on_salvia_divinorum=\
#...    "${ZESHY_STYLE_TO_COLOR[uroboros]} In all of our Pharmako/Poeia, this plant
#...     is the hidden pearl. Poets, like vintners, love such surprises, and seek
#...     them out beyond their better known brothers and sisters: an unknown poet
#...     found in a faded chapbook with light in his verses, an obscure vintage
#...     the reviewers missed, dust-covered, but filled with mouthfuls of
#...     delight. The little leaves, hiding off in the mountains, have
#...     successfully avoided the front pages for four centuries."
#>>> string on_hojas_de_la_pastora=\
#...    "${ZESHY_STYLE_TO_COLOR[bathyscaphe]} A Taoist sage, in another range of
#...     mountains, after many years of studying the secrets of alchemy with his
#...     master, feeling fully accomplished, descended the mountain to move into
#...     the world. When evening approached, he stopped at an inn. The people at
#...     the inn marveled at the light that seemed to hover about him – a sort of
#...     magical glow. The sage was chagrined, realizing that his studies were
#...     only half completed, and returned immediately to his teacher."
#...    "${ZESHY_STYLE_TO_COLOR[uroboros]} In all of our Pharmako/Poeia, this plant
#...     is the hidden pearl. Poets, like vintners, love such surprises, and seek
#...     them out beyond their better known brothers and sisters: an unknown poet
#...     found in a faded chapbook with light in his verses, an obscure vintage
#...     the reviewers missed, dust-covered, but filled with mouthfuls of
#...     delight. The little leaves, hiding off in the mountains, have
#...     successfully avoided the front pages for four centuries."
#>>> string on_hojas_de_la_pastora=\
#...    "${ZESHY_STYLE_TO_COLOR[bathyscaphe]} A Taoist sage, in another range of
#...     mountains, after many years of studying the secrets of alchemy with his
#...     master, feeling fully accomplished, descended the mountain to move into
#...     the world. When evening approached, he stopped at an inn. The people at
#...     the inn marveled at the light that seemed to hover about him – a sort of
#...     magical glow. The sage was chagrined, realizing that his studies were
#...     only half completed, and returned immediately to his teacher."
#>>> get_string_length_printable\
#Excrutiatingly helpful dissection of ANSI escape codes.
#function yoyo() {
#    is "${ZESHY_STYLE_TO_COLOR[color.reset]}" == ${ZESHY_ANSI_CSI}${~ZESHY_ANSI_SGR_GLOB} si
#    string yoyo="$(remove_string_ansi "${ZESHY_STYLE_TO_COLOR[color.reset]}")"
#    print "reset after ANSI removed: $yoyo (${#yoyo}) ($(get_string_length_printable "${yoyo}"))"
#}
# Unfortunately, zsh fails with a "bad pattern" error when aggregating the
# following CSI and SGR globs into a single glob. Gotta keep them separated.
