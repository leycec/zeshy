#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

#FIXME: All such documentation should be declared under the corresponding parcel
#rather than the current script. Naturally, this extends to *ALL* related
#scripts in this subdirectory as well.

declare_parcel_as_script_with_stdin <<'/---'
Document all globals, functions, and aliases declared by @{main}.
/---

# ....................{ GLOBALS                            }....................
declare_global_with_stdin string ZESHY_VERSION <<'/---'
Current `zeshy` version specifier as a non-numeric string (e.g., `0.2.4`).
Consider calling :is_zeshy_version_at_least() when attempting to test such
specifier.
/---

#FIXME: This documentation makes little sense. Happily, such global *SHOULD* be
#eventually going away. See @{main} for further commentary.
declare_global_with_stdin integer ZESHY_PID_LAST_LOADED_BY <<'/---'
Process ID of the most recent `zsh` process in the call stack to load `zeshy`.
/---

# ....................{ GLOBALS ~ exception                }....................
declare_global_with_stdin string ZESHY_EXCEPTION_MESSAGE <<'/---'
Message associated with the most recently thrown exception. See
throw_exception() for further details.
/---

declare_global_with_stdin string ZESHY_EXCEPTION_STATUS <<'/---'
Exit status associated with the currently thrown exception. See
throw_exception() for further details.
/---

declare_global_with_stdin list ZESHY_EXCEPTION_FUNCSTACK <<'/---'
Copy of canonical list global ${funcstack} at the time of the currently
thrown exception. See throw_exception() for further details.
/---

declare_global_with_stdin list ZESHY_EXCEPTION_FUNCFILETRACE <<'/---'
Copy of canonical list global ${funcfiletrace} at the time of the currently
thrown exception. See throw_exception() for further details.
/---

declare_global_with_stdin list ZESHY_EXCEPTION_FUNCSOURCETRACE <<'/---'
Copy of canonical list global ${funcsourcetrace} at the time of the currently
thrown exception. See throw_exception() for further details.
/---

# ....................{ GLOBALS ~ path                     }....................
declare_global_with_stdin string ZESHY_HOME <<'/---'
Absolute path of the directory containing the codebase for the currently
executed version of `zeshy`. Assuming default installation, such path is usually
that of a system-wide subdirectory (e.g., `/usr/share/zeshy`).
/---

declare_global_with_stdin string ZESHY_MAIN_SCRIPT <<'/---'
Relative or absolute path of the `zsh` script initializing the currently
executed version of `zeshy`. Assuming default installation, such path is usually
that of a system-wide script in ${ZESHY_HOME} (e.g., `/usr/share/zeshy/main`).

To support comparison of this path with canonical system properties (e.g., `zsh`
${funcstack} elements, Linux `/proc/self/cmdline` file contents), such script
sets this path to the initial value of ${0} (i.e., the relative or absolute path
with which such script was externally run) rather than canonicalizing such value
into an absolute path. To perform the latter, consider passing such path to
canonicalize_path().
/---

declare_global_with_stdin string ZESHY_OVERLAY_DIR <<'/---'
Absolute path of the (typically system-wide) directory containing all `zsh`
scripts in the `zeshy` codebase for the currently installed version of `zeshy`.
/---

declare_global_with_stdin string ZESHY_DOT_DIR <<'/---'
Absolute path of the current user's topmost *`zeshy` dot directory* (i.e., `.`-
prefixed and hence hidden directory containing _all_ `zeshy` files and
directories specific to such user).

== Configuration ==

Such directory defaults to `"${HOME}/${ZESHY_DOT_DIR_BASENAME}"` (e.g.,
`~/.zeshy), but may be changed _before_ `zeshy` startup by passing command-line
option `--zeshy-dot-dir="${ZESHY_DOT_DIR}"` to the `zeshy` command. For safety,
such directory should _not_ be changed after `zeshy` startup.
/---

declare_global_with_stdin string ZESHY_DOT_DIR_BASENAME <<'/---'
Default basename of _all_ `zeshy` dot directories under the currently
executed version of `zeshy`.
/---

declare_global_with_stdin string ZESHY_USER_CONFIG_ROOT_DIRNAME <<'/---'
Absolute path of the current user's topmost `zeshy` configuration directory
(i.e., subdirectory of such user's `zeshy` dot directory containing _all_
configuration files specific to and hence editable by such user).
/---

declare_global_with_stdin string ZESHY_USER_DIGEST_ROOT_DIRNAME <<'/---'
Absolute path of the current user's topmost *`zeshy` digest directory* (i.e.,
subdirectory of such user's `zeshy` cache directory containing _all_ `zeshy`
digest files previously compiled for such user).
/---

declare_global_with_stdin string ZESHY_USER_CACHE_DIR <<'/---'
Absolute path of the current user's topmost *`zeshy` cache directory* (i.e.,
subdirectory of such user's `zeshy` dot directory containing _all_ `zeshy`-
specific temporary files and directories).
/---

declare_global_with_stdin string ZESHY_USER_OVERLAY_DIR <<'/---'
Absolute path of the current user's topmost *`zeshy` overlay directory* (i.e.,
subdirectory of such user's `zeshy` dot directory containing third-party `zeshy`
parcels -- including plugins, styles, and themes).
/---

# ....................{ GLOBALS ~ digest                   }....................
declare_global_with_stdin boolean ZESHY_USER_DIGEST_FILE_IS_INDEPENDENT <<'/---'
If true, the current digest file will be recompiled on startup regardless of
whether outdated and hence requiring any recompilation.
/---

declare_global_with_stdin boolean ZESHY_USER_DIGEST_FILE_IS_DEPENDENT_ON_ZESHY_HOME <<'/---'
If true, the current digest file will also depends on all files and directories
in the `zeshy` codebase. In such case, modifying any such file or directory will
induce recompilation of such digest on startup. Regardless of the state of this
boolean, note that `zeshy` _always_ recompiles such digest on upgrading such
codebase to a new version.
/---

# ....................{ EXCEPTIONS ~ throw                 }....................
declare_function_with_stdin <<'/---'
[status: int] TRAPZERR(int signal_number = SIGZERR)

Trap SIGZERR, a `zsh`-specific signal triggered by `zsh` on any command
reporting *unhandled failure* (i.e., nonzero exit status _not_ handled by an
`or` or `and` operator, an `if` conditional, or a `while` loop). Specifically,
run all SIGZERR hooks previously registered by run_hook_code_on_signal_zerr()
and convert such failure to an exception by throwing an exception capturing
the current runtime environment: namely, command exit status and call stack.

== Shell Options ==

By converting command failure to thrown exceptions, this trap handler could be
considered a `zeshy`-specific alternative to globally enabling `zsh` option
`ERR_RETURN` or general shell option `set -e`. Unlike `zsh` option `ERR_EXIT`,
the exception thrown by this handler explicitly unwinds the call stack of only
the current shell rather than all parent shells.
/---

declare_function_with_stdin <<'/---'
void {die,throw_exception}(string error_message1 = "", ...)

Throw an exception consisting of the passed error message (defaulting to the
empty string) and exit status of the command immediately preceding the call to
this function. Assuming such exception was thrown from the `try {...}` block of
a `try {...} always :{...}:` construct, such exception may be subsequently
caught by calling an exception catcher (e.g.,
catch_exception_matching_glob_if_found()) from any `always :{...}:` block on the
call path to such call including the corresponding `always :{...}:` block.

== Exit Status ==

If the command immediately preceding the call to this function *succeeded*
(i.e., reported zero exit status), this function forces such status to *failure*
(i.e., nonzero exit status) by associating such exception with the default
failure exit status ${ZESHY_STATUS_FAILURE} -- typically, 1.

== Uncaught Exceptions ==

If no `always :{...}:` block catches such exception, such exception remains
*uncaught*. In such case:

* Such exception is automatically caught according to the current user's
  `zeshy` configuration, with output redirected to standard error. Specifically:
** If boolean global ${ZESHY_IS_PRINTING_EXCEPTION_UNCAUGHT_CALL_STACK} is
   enabled, a stack trace of the current shell at the time of such exception.
   See output_exception_call_stack() for further details.
** If boolean global ${ZESHY_IS_PRINTING_EXCEPTION_UNCAUGHT_CALL_SOURCE} is
   enabled, the source code of the runnable originally throwing such exception.
** If boolean global ${ZESHY_IS_PRINTING_EXCEPTION_UNCAUGHT_HELP} is enabled,
   documentation for the topmost runnable throwing such exception.
* The call stack for the current shell is *unwound* (i.e., all functions on such
  stack are iteratively terminated).
* And:
** If such shell is interactive, the current user is returned to the interactive
   prompt. Uncaught exceptions do _not_ terminate interactive shells.
** Else, such shell is terminated with *failure* (specifically, the nonzero exit
   status of the prior command).

== Caveats ==

*Only call this function from `zeshy`-specific `try {...} always :{...}:` blocks
rather than `zsh`-specific `{...} always {...}` blocks.* While the former always
handle uncaught exceptions (e.g., by printing a stack trace of such exception to
standard error), the latter _never_ handle such exceptions and hence only
silently unwind the call stack on uncaught exceptions. (Needless to say, that's
not very useful.)

*Avoid calling the canonical `zsh` function throw()*, autoloadable under all
`zsh` installations and the traditional mechanism for invoking exceptions. Such
function fails to associate such exception with _any_ critical metadata (e.g.,
exit status of the prior command, call stack at the point of such exception)
except such exception's error message and hence performs poorly under `zeshy`.
/---

declare_function_with_stdin <<'/---'
void store_exception_with_status(string exception_message, int exit_status)

Store the passed exception message, exit status, and current call stack to
globals. Although `zsh` lacks builtin support for exception handling, such
globals supply a reasonable facade of such support. Specifically:

* Store such message to string global ${EXCEPTION}, a canonical `zsh` global
  first invented by non-`zeshy` functions throw() and catch(). For backwards
  compatibility with existing `zsh` code, `zeshy` preserves such nomenclature.
* Store such status to integer global ${ZESHY_EXCEPTION_STATUS}.
* Store list globals ${funcstack} and ${funcfiletrace} to list globals
  ${ZESHY_EXCEPTION_FUNCSTACK} and ${ZESHY_EXCEPTION_FUNCFILETRACE}.
/---

# ....................{ EXCEPTIONS ~ catch                 }....................
declare_function_with_stdin <<'/---'
[stderr: string] print_exception_if_unhandled()

Catch an *unhandled exception* (i.e., an exception caught by no `always :{...}:`
block on the call path for the current shell) by printing such exception to
standard error or return silently if no such exception was thrown. Specifically,
standard error is printed to if all of the following conditions apply:

* An exception was thrown (i.e., `zsh` string global ${EXCEPTION} is defined).
* This function was called from within the topmost `always :{...}:` block on
  the call path for the current shell.
* Such block failed to catch such exception.
/---

declare_function_with_stdin <<'/---'
[stderr: string] print_exception_unhandled(void)

Print the currently thrown exception to standard error. See
store_exception_with_status() for further details.
/---

# ....................{ DEBUGGING                          }....................
declare_alias_with_stdin <<'/---'
[status: bool] :is_debugging(void)

Report success if this is a *debug build* of `zeshy` (i.e., an unoptimized and
overly verbose version of `zeshy` compiled with developer-specific logic).
Specifically, report success if the current instance of `zeshy` either:

* Resides in a developer-specific `git` repository.
* Was passed command-line options `--verbose` or `--digest-debug`. (Such options
  are currently synonymous but likely to differ at some future date.)

== Debug Releases ==

Debug builds of `zeshy` enable expensive developer-specific logic -- including:

* Printing verbose debug messages on `zeshy` startup.
* Printing verbose trace messages on `zeshy` startup to measure startup cost.
* Recompiling `zeshy`\'s user digest file on changes to the `zeshy` codebase. For
  `zeshy` developers, such recompilation is essential to fast development. For
  `zeshy` non-developers, detecting such changes is unnecessarily wasteful.
/---

declare_alias_with_stdin <<'/---'
[stdout: string, stderr: string, status: int] :run_line_if_debugging(
    string line)

Run the passed line if this is a debug build of `zeshy` or *noop* (i.e., report
success without running such command) otherwise. This alias expands either to
the empty string when debugging or to the comment prefix `#` otherwise,
effectively optimizing away such line in the latter case. See :is_debugging()
for further details.

== Caveats ==

Such line may contain quoted newlines (e.g., as literal newlines in single or
double quotes or as symbolic newlines in `$'\n'`) but _not_ unquoted newlines
(e.g., by suffixing such line with line continuation operator `\`).
/---

declare_alias_with_stdin <<'/---'
string :output_line_if_debugging(string line)

Print the passed line if this is a debug build of `zeshy` or noop otherwise.
See :run_line_if_debugging() for further details.
/---

# --------------------( WASTELANDS                         )--------------------
#FUXME: Excise!
# declare_global_with_stdin string ZESHY_ZSH_VERSION_REQUIRED <<'/---'
# Oldest `zsh` version under which `zeshy` is known to run without error.
# /---
# #FUXME: We no longer require this, since we're hardcoding such test below.
# typeset -g ZESHY_ZSH_VERSION_REQUIRED='5.0.0'

# declare_global_with_stdin string ZESHY_USER_VERSION_FILE <<'/---'
# Absolute path of the user-specific file caching `zeshy`\''s current version.
# /---

#split across multiple lines 
# Run the passed line if this is a debug build of `zeshy` is currently being *debugged* (i.e., if `zeshy`
# either resides in a developer-specific `git` repository _or_ was passed
# command-line option `--verbose`) or *noop* (i.e., report success without running
# such command) otherwise. Specifically, this alias expands to the empty string

#In the latter case, such noop enables `zsh` to optimize
#such code away from release builds of `zeshy`.

# * `--zeshy-dot-dir={dot_dir}`, this is such directory instead.
# * `--zeshy-dot-dir=` or `--no-zeshy-dot-dir`, this is the empty string instead.

#declare_function_with_stdin <<'/---'
#void clear_exception(void)
#
#Clear the currently thrown exception. After calling this function, no exception
#will appear to have been thrown (e.g., is_exception() will report failure).
#Specifically, this function undefines all exception-specific globals previously
#defined by store_exception_with_status() at the time of such exception. See
#such function for further details.
#
#For most purposes, consider calling a high-level exception catcher (e.g.,
#catch_exception_matching_glob_if_found()) rather than this low-level function.
#/---

# (e.g., by printing a stack trace, documentation, and/or
# code concerning such exception)
#FUXME: Complete such documentation. Specifically, why does function throw()
#perform poorly under "zeshy"? Also, document the need for this function to be
#thrown from within a "try {...} always :{...}:" block rather than an older
#"{...} always {...}" block. Document what happens if this function is called
#from within the latter: namely, such exception is immediately printed. Document
#what happens if this function is called from within no such block (i.e., if
#such exception is unhandled): namely, such exception is immediately printed and
#the call stack for the current shell is fully unwound.

#== throw_exception() versus throw() ==
#
#`zsh` also provides an autoloadable function throw(), implementing similar
#functionality. Such function performs poorly under `zeshy`, however.

#If no exception is currently thrown, an
#exception is thrown indicating such error; else, 
