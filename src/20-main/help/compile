#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Document all globals, functions, and aliases declared by @{compile}.
/---

# ....................{ GLOBALS                            }....................
declare_global_with_stdin list_set ZESHY_HOOKS_RUN_ON_ZESHY_PRECOMPILE <<'/---'
List of commands to be run before compiling `zeshy`\'s user digest file.
/---

declare_global_with_stdin string ZESHY_SCRIPT_NAME_GLOB <<'/---'
Glob expression strictly matching only *`zsh` scripts* (i.e., regular files or
symbolic links to such files, excluding ignorable temporary files).
/---

declare_global_with_stdin string ZESHY_ZSH_GLOBAL_NAMES_GLOB <<'/---'
Glob expression matching the names of all canonical `zsh` global variables.
/---

# ....................{ GLOBALS ~ local                    }....................
# For safety, compile_zeshy_source() localizes rather than globalizes the
# following variables. Since such variables nonetheless behave as and are
# expanded throughout the zeshy codebase as globals, document such variables
# here.

#FIXME: Actually, we just want to document such global without declaring it as
#such. We probably want a new :document_global() function to be called here.
#FIXME: Also, whatever source_script*() functions we define should also use this
#global. Discovering the current shell script name is intolerably obtuse under
#both bash and zsh. This global cleanly solves that. Use it *EVERYWHERE*!

declare_global_with_stdin string ZESHY_SCRIPT_NAME <<'/---'
Absolute path of the `zeshy` script currently sourced by compile_zeshy_source().
For safety, such function unsets this global immediately after sourcing all
`zeshy` scripts to be compiled into the current digest file.
/---

# ....................{ COMPILERS                          }....................
declare_function_with_stdin <<'/---'
void :compile_zeshy(void)

Compile the current digest file from all functions defined by all `zsh` scripts
residing in all `zeshy` overlays applicable to the current system and user.
/---

declare_function_with_stdin <<'/---'
void ::compile_zeshy_setup(void)

Prepare for sourcing the `zeshy` codebase. Specifically, record the names of all
currently defined aliases, functions, and globals. Due to already being defined
and hence _not_ defined by the `zeshy` codebase, such objects should _not_ be
subsequently compiled into the current digest file.
/---

declare_function_with_stdin <<'/---'
void ::compile_zeshy_source(void)

Source the `zeshy` codebase. Specifically, find which `zeshy` overlays apply to
the current system and user, then source all `zsh` scripts in such overlays.
registered listed by ${ZESHY_OVERLAY_FILENAMES}. The set difference between the
lists of functions defined before and after such sourcing is the subset of `zeshy`-
specific functions to be subsequently compiled into the current digest file.
/---

declare_function_with_stdin <<'/---'
void ::compile_zeshy_digest(void)

Compile the current digest file, given the names of all such functions.
/---

# ....................{ COMPILERS ~ overlay                }....................
declare_function_with_stdin <<'/---'
void ::compile_zeshy_overlay_root(string overlay_dirname)

Perform a depth-first search of the passed root overlay and all applicable
suboverlays of such overlay for all `zsh` scripts applicable to the current
system and user. For efficiency, search non-recursively in a stack-based manner.

== Root Overlay ==

Root overlays commonly include:

* The main system-wide `zeshy` overlay (e.g., `/usr/share/zeshy`).
* The main user-specific `zeshy` overlay (e.g., `~/.zeshy/src`).

Such roots typically contain additional suboverlays as subdirectories (e.g.,
`/usr/share/zeshy/if_pathable/X`), only a subset of which apply to the current
system and user. On discovering such a suboverlay, this function pushes such
suboverlay onto ${ZESHY_OVERLAY_DIRNAMES} (a local FIFO stack recording such
suboverlays in discovery order).
/---

#FIXME: Documentation requires *SIGNIFICANT* updating. In particular, we now
#support both ordered and unordered suboverlays.
declare_function_with_stdin <<'/---'
void ::compile_zeshy_overlay(string overlay_dirname)

Prepare the passed `zeshy` overlay directory for digest compilation, as detailed
above in "OVERLAYS". For each:

* `zsh` script in such overlay containing autoloadable functions to be compiled
  into the current digest file, append such script to the list of such files.
* Subdirectory in such overlay:
  * That is itself an overlay, append such subdirectory to the overlay stack.
  * Recursively containing `zsh` scripts containing autoloadable functions to be
    compiled into `zeshy`\'s digest file, append such subdirectory to the list of
    such subdirectories. (Subdirectories may either be overlays or directly
    contain `zsh` scripts, but not both.)
/---

declare_function_with_stdin <<'/---'
void ::compile_zeshy_suboverlay_simple(string suboverlay_dirname)

Compile the passed directory into the current digest file as a *simple
suboverlay* (i.e., containing files and subdirectories unconditionally compiled
into such digest regardless of pathname or content). Specifically, register all
files in such directory _and_ subdirectories of such directory as `zsh` scripts
to be subsequently sourced.
/---

declare_function_with_stdin <<'/---'
void ::compile_zeshy_suboverlay_if_config(string suboverlay_dirname)

Compile the passed directory into the current digest file as a *configuration
suboverlay* (i.e., containing user-editable configuration files). Specifically:

* Register all files in such directory _and_ subdirectories of such directory as
  `zsh` scripts to be subsequently sourced.
* Copy all such scripts _not_ already found in the current user's `zeshy`
  configuration directory to the latter directory.
/---

#FIXME: Correct and expand documentation once we properly refactor this.
declare_function_with_stdin <<'/---'
void ::compile_zeshy_suboverlay_if_distro(string suboverlay_dirname)

Compile the passed directory into the current digest file as a *distribution
suboverlay* (i.e., containing Linux distribution-specific files).
/---

declare_function_with_stdin <<'/---'
void ::compile_zeshy_suboverlay_if_pathable(string suboverlay_dirname)

Compile the `passed directory into the current digest file as a *pathable
suboverlay* (i.e., containing files and subdirectories whose basenames are the
names of external commands to be searched for in the current command hash).
Specifically, this function filters the list of all files and subdirectories in
such directory for paths whose basenames are external commands in the current
user's *command hash* (e.g., in such user's ${PATH}) and for each path that:

* Is a file, registers such file as a `zsh` script to be subsequently sourced.
* Is a subdirectory, registers such subdirectory as a *`zeshy` overlay* (i.e.,
  appends such subdirectory to the overlay stack) to be subsequently compiled.
/---

# ....................{ RUNNERS                            }....................
declare_function_with_stdin <<'/---'
void :run_hook_on_zeshy_precompile(string code)

Run the passed code immediately before compiling the current digest file.
/---

# ....................{ PRECOMPILERS                       }....................
declare_function_with_stdin <<'/---'
void ::precompile_zeshy(void)

Run all *`zeshy` precompilation hooks* (i.e., code previously registered by
calling :run_hook_on_zeshy_precompile()) immediately prior to compiling the
current digest file.
Finalize all `zeshy`-specific aliases, functions, and globals to be compiled
into `zeshy`\''s user digest file immediately before compiling such file.
Specifically, run all commands in list ${ZESHY_HOOKS_RUN_ON_ZESHY_PRECOMPILE}
(e.g., as added by prior calls to append_precompile_zeshy_command()).
/---

declare_function_with_stdin <<'/---'
void ::precompile_zeshy_names(void)

Prepare for compiling the current digest file after sourcing the `zeshy`
codebase. Specifically, record the names of all currently defined aliases,
functions, and globals again, then difference such names with the names that
:compile_zeshy_setup() previously recorded. Their difference is exactly the set
of all such names defined by the `zeshy` codebase and hence to be compiled into
the current digest file.
/---

declare_function_with_stdin <<'/---'
void ::precompile_zeshy_cache(void)

Store metadata describing the current digest file to temporary files in the
cache subdirectory of the current user's `zeshy` dot directory, including:

* ${ZESHY_USER_DIGEST_DEPENDENCIES_FILE}, caching the list of paths on which
  `zeshy`\''s user digest file depends. Since `zeshy` requires such list
  before autoloading such file, such list must be cached to an external file.
* ${ZESHY_USER_NAMES_FILE}, caching lists of names of `zeshy`-specific aliases,
  suffix aliases, functions, and globals. Such lists are both too resource
  consumptive and too infrequently accessed to warrant compilation into
  startup_zeshy_globals() with the customary `zeshy` globals.
/---

# ....................{ PRECOMPILERS ~ startup             }....................
declare_function_with_stdin <<'/---'
void ::precompile_zeshy_startup(void)

Dynamically define startup_zeshy() and related functions, including:

* startup_zeshy(), run on `zeshy` startup and calling all other functions below.
* startup_zeshy_if_shell_interactive(), run on `zeshy` startup if the current
  shell is interactive.
* startup_zeshy_if_shell_login(), run on `zeshy` startup if the current shell
  is a login shell.
* startup_zeshy_aliases(), run on `zeshy` startup to declare and define all
  `zeshy`-specific aliases.
* startup_zeshy_globals(), run on `zeshy` startup to declare and define all
  `zeshy`-specific globals.
/---

declare_function_with_stdin <<'/---'
void startup_zeshy(void)

Run all `zeshy` startup hooks, including (in order):

. startup_zeshy_globals(), declaring and defining all `zeshy`-specific globals.
. startup_zeshy_aliases(), declaring and defining all `zeshy`-specific aliases.
. startup_zeshy_if_shell_interactive(), if the current shell is interactive.
. startup_zeshy_if_shell_login(), if the current shell is a login shell.
/---

declare_function_with_stdin <<'/---'
void startup_zeshy_globals(void)

Declare and define all `zeshy`-specific globals on `zeshy` startup. Since
this function is called before all other startup logic, all startup functions
may reliably expand such globals.
/---

declare_function_with_stdin <<'/---'
void startup_zeshy_aliases(void)

Declare and define all `zeshy`-specific aliases on `zeshy` startup. Since
this function is called before all other startup logic, all startup functions
may reliably expand such aliases.
/---

declare_function_with_stdin <<'/---'
void startup_zeshy_if_shell_interactive(void)

Runs all `zeshy` startup hooks specific to interactive shells _after_ running
all other startup logic (but _before_ running hooks specific to login shells).
/---

declare_function_with_stdin <<'/---'
void startup_zeshy_if_shell_login(void)

Runs all `zeshy` startup hooks specific to login shells _after_ running all
other startup logic (including running hooks specific to interactive shells).
/---

# --------------------( WASTELANDS                         )--------------------
# Compile the `if_config` subdirectory of the passed directory into the current
# digest file if such subdirectory exists or return immediately otherwise. In the
# former case, this function:

  # `startup_zeshy_`-prefixed functions.

# ....................{ APPENDERS                          }....................
# declare_function_with_stdin <<'/---'
# void :append_zeshy_digest_source_dir(string dirname)
# 
# Append all `zsh` scripts in the passed directory _and_ subdirectories of such
# directory to ${ZESHY_OVERLAY_FILENAMES}, the list of all such scripts to be
# subsequently sourced.
# /---

# ", performing last-minute functionality immediately
# before doing so. (Namely, dynamically synthesize all remaining functions to be
# compiled into such digest.)

# Prepare command-specific zsh scripts in the passed `zeshy` overlay directory.
# Namely, append:
# 
# * All `zsh` scripts in this overlay's command directory matching commands in
#   the current user's $PATH to the list of autoloadable files.
# * All subdirectories in this overlay's command directory matching such
#   commands to the overlay stack.

# Recursively copy all files from the `if_config` subdirectory of the passed
# overlay directory to `zeshy`\'s user configuration directory, if not already
# found in the latter.
