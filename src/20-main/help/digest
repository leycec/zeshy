#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Document all globals, functions, and aliases declared by @{digest}.
/---

# ....................{ GLOBALS                            }....................
declare_global_with_stdin string ZESHY_USER_DIGEST_FILENAME <<'/---'
Absolute path of the current digest file. :digest_zeshy() compiles the subset of
the `zeshy` codebase applicable to the current system and user into such file on
startup if :is_zeshy_digest_outdated() suggests such file to be outdated.
/---

declare_global_with_stdin string ZESHY_USER_CONFIG_DIRNAME <<'/---'
Absolute path of the current configuration directory. :compile_zeshy() compiles
the subset of such directory applicable to the current system and user into the
current digest file on startup if :is_zeshy_digest_outdated() suggests such file
to be outdated.
/---

declare_global_with_stdin list_set ZESHY_USER_DIGEST_DEPENDENCY_PATHNAMES <<'/---'
List set of the absolute paths of all *extraneous files and directories* the
current digest file depends upon (i.e., files and directories other than those
in the current ${PATH} or `zeshy` configuration, which such digest file already
unconditionally depends upon).

== Usage ==

::precompile_zeshy_cache() serializes such list during digest compilation to the
user-specific cache file ${ZESHY_USER_DIGEST_DEPENDENCIES_FILENAME}.
:is_zeshy_digest_outdated() sources such file on subsequent `zeshy` startups to
decide whether such paths have been modified since such digest compilation.
/---

declare_global_with_stdin string ZESHY_USER_DIGEST_DEPENDENCIES_FILENAME <<'/---'
Absolute path of the file caching the list of the absolute paths of all
extraneous files and directories the current digest file depends upon. See
${ZESHY_USER_DIGEST_DEPENDENCY_PATHNAMES} for further details.
/---

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_zeshy_digest_outdated(void)

Report success if the current digest file is outdated and hence requires
recompilation. This is the case when any of the following conditions are
satisfied:

* Such digest file does not exist. This occurs under both non-erroneous and
  erroneous conditions, including:
** First installation of `zeshy`.
** First use of `zeshy` by the current user.
** First use of `zeshy` under a new operating system or window manager.
** Accidental deletion of such digest file. (_"No problem, mam."_)
* Such digest file exists but has a modification time older than that of the
  most recently modified file or directory such digest file depends upon,
  including all:
** Directories in the current user's ${PATH} (e.g., `/sbin`, `/usr/bin`).
** File and directories registered as digest dependencies by calls to
   add_zeshy_digest_dependency_path() during the last compilation of such
   digest file (i.e., files in ${ZESHY_USER_DIGEST_DEPENDENCY_PATHNAMES} cached to
   ${ZESHY_USER_DIGEST_DEPENDENCIES_FILENAME}).
** User-specific `zeshy` configuration files (i.e., files in
   ${ZESHY_USER_CONFIG_ROOT_DIRNAME}).
* Such digest file exists but 

For convenience, this function also sets integer
${ZESHY_USER_DIGEST_FILE_DEPENDENCY_NEWEST_MTIME} to the modification time of
the newest path such digest file depends upon.
/---

# ....................{ ADDERS                             }....................
declare_function_with_stdin <<'/---'
void add_zeshy_digest_dependency_path(string pathname1, ...)

Add the passed absolute paths to the list of such paths the current digest file
depends upon. Doing so ensures that, on subsequently detecting a change to
either the content or metadata of such path (as indicated by a more recent
change time for such path than that of such digest file), `zeshy` will
implicitly recompile such digest file. See ${ZESHY_USER_DIGEST_DEPENDENCY_PATHNAMES} for
further details.
/---

# ....................{ DIGESTERS                          }....................
declare_function_with_stdin <<'/---'
void :digest_zeshy(void)

Recompile the current digest file if outdated as well as autoload all functions
such file defines (regardless of whether such file was outdated). See
:is_zeshy_digest_outdated() for further details.
/---

declare_function_with_stdin <<'/---'
void ::digest_zeshy_inspect(void)

Inspect the current system for high-level metadata on which the choice of
current digest file depends (e.g., operating system, display server).
Specifically:

* Source @{inspect}, defining functionality performing such inspection.
* Call such functionality.
* Set the following globals:
** ${ZESHY_USER_CONFIG_DIRNAME}.
** ${ZESHY_USER_DIGEST_FILENAME}.
** ${ZESHY_USER_DIGEST_DEPENDENCIES_FILENAME}.
/---

declare_function_with_stdin <<'/---'
void ::digest_zeshy_compile(void)

Compile the current digest file. After doing so, coerce the modification time of
such file to the modification time of the newest path such file depends on and
autoload all functions newly compiled into such file.
/---

# --------------------( WASTELANDS                         )--------------------
# # ....................{ OUTPUTTERS                         }....................
# declare_function_with_stdin <<'/---'
# void ::output_digest_metadata(void)
# 
# Ouput metadata describing the current digest file, including the modification
# times of both such file and the newest path such file depends upon. Note this
# function is called only under debug builds of `zeshy`.
# /---

# == Caveats ==
# 
# Such compilation assumes system- and user-specific state (e.g., command paths),
# implying such file to be system- and user-specific and hence _not_ reliably
# portable between systems and users.

#FUXME: Update documentation, now significantly outdated. (The irony.)
# ** Migration of an existing  The current *system ID* (i.e., string uniquely identifying the current
#   operating system and window manager if any) differs from 

# * The main system-wide command directories (e.g., `/bin`, `/usr/bin`).
#   Installing or uninstalling commands requires recompiling command autoloads.
# This file contains theme settings, which when
  # edited require recompiling theme autoloads.
