#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Document all globals, functions, and aliases declared by @{*-set}.
/---

# ....................{ SETTERS                            }....................
:document_func <<'/---'
:void :set_list_to_string(
    :string:list list_name,
    :string text1, ...)

Set the passed list to all passed strings (in the passed order): e.g.,

.:set_list_to_string()
==========================================
[source]
------------------------------------------
>>> :list on_revolution
>>> :string on_war=\
...    "A true revolution of values will lay hands on the world order and say of
...     war: \"This way of settling differences is not just.\" This business of
...     burning human beings with napalm, of filling our nation's homes with
...     orphans and widows, of injecting poisonous drugs of hate into veins of
...     people normally humane, of sending men home from dark and bloody
...     battlefields physically handicapped and psychologically deranged, cannot
...     be reconciled with wisdom, justice and love."
>>> :string on_revolution=\
...    "A true revolution of values will lay hands on the world order and say of
>>> :string on_death=\
...    "A nation that continues year after year to spend more money on military
...     defense than on programs of social uplift is approaching spiritual
...     death."
>>> :set_list_to_string on_revolution "${on_war}" "${on_death}"
>>> get_string_line "${on_revolution[1]}" 1
A true revolution of values will lay hands on the world order and say of
------------------------------------------
==========================================
/---

:document_func <<'/---'
:void :set_string_to_string(
    :string:string string_name,
    :string text1, ...)

Set the passed string variable to the undelimited concatenation of all passed
strings (i.e., without separation between such strings): e.g.,

.:set_string_to_string()
==========================================
[source]
------------------------------------------
>>> :string on_dmt
>>> :string on_entelechy=\
...    "There's this feeling which comes over your body: half arousal, half
...     anaesthesia. The air appears to suddenly have been sucked out of the
...     room because all the colors brighten visibly, as though some intervening
...     medium has been removed. And then there's a sound, like a piece of bread
...     wrapper or cellophane being scrunched up and thrown away. A friend of
...     mine says this is radio-entelechy leaving the anterior fontanelle at the
...     top of your head."
>>> :string on_mundanity=\
...    "I'm not sure I want to line up with that, but a membrane is being
...     ripped; something is being torn. And then there is a total – what
...     Mircea Eliade called in a wonderful phrase – \"a complete rupture of
...     the mundane plane.\" You know? That's like a hit and run accident except
...     the car came from hyperspace."
>>> :set_string_to_string on_dmt "${on_entelechy}" "${on_mundanity}"
>>> get_string_line "${on_dmt}" 1
There's this feeling which comes over your body: half arousal, half
>>> get_string_line "${on_dmt}" -1
the car came from hyperspace.
------------------------------------------
==========================================
/---

# ....................{ SETTERS ~ prototype                }....................
:document_func <<'/---'
:void ::set_string_to_runnable_prototype_name_with_label(
    :string string_name,
    :string runnable_prototype,
    :string runnable_label)

Set the passed string variable to the single runnable name declared by the
passed *runnable prototype* (i.e., string documenting a function or alias
signature -- including attributes, return types, names, and argument types and
order -- in machine-readable format akin to that of conventional C function
prototypes), prefixing all thrown exception messages by the passed human-
readable label describing such type of runnable. If such prototype declares
more than one name (e.g., via `{...,...}` syntax), an exception is thrown.
/---

# ....................{ OBSOLETE                           }....................
#FIXME: Obsolete. Excise me.

:document_func <<'/---'
void set_list_and_map_to_runnable_prototype_name_or_names:(
    string list_name,
    string map_name,
    string matched_runnable_name,
    string matched_runnable_names)

Set the passed list to all runnable names in the passed string of single or
multiple runnable names, presumably matched from the prototype of an alias or
function help string. For each such runnable name, add a new key-value pair to
the passed map mapping such name to the first such name in such string. This
function is a helper parser intended to be called _only_ by runnable declarators
(e.g., declare_alias(), declare_function()).
/---

:document_func <<'/---'
:void run_runnable_with_stdin[
    args =  (:string runnable_name, :string arg1, ...),
    stdin = (:string input)]

Run the passed *runnable* (i.e., alias, function, command), passing such
function first all passed arguments in the passed order and finally all standard
input to this function as a single argument. For safety, this function closes
such input immediately after running such runnable: e.g.,

.run_runnable_with_stdin()
==========================================
[source]
------------------------------------------
>>> :string on_commodities=\
...     "In proportion as the bourgeoisie, i.e., capital, is developed, in the
...      same proportion is the proletariat, the modern working class, developed
...      — a class of labourers, who live only so long as they find work, and
...      who find work only so long as their labour increases capital. These
...      labourers, who must sell themselves piecemeal, are a commodity, like
...      every other article of commerce, and are consequently exposed to all
...      the vicissitudes of competition, to all the fluctuations of the market."
>>> :output_string "${on_commodities}" | run_runnable_with_stdin head -2 -
In proportion as the bourgeoisie, i.e., capital, is developed, in the
same proportion is the proletariat, the modern working class, developed
------------------------------------------
==========================================
/---

# --------------------( WASTELANDS                         )--------------------
