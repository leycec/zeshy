#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

#FIXME: This isn't right, of course. We're declaring documentation under the
#current parcel, currently. See ={parcel} for further discussion.

declare_parcel_as_script_with_stdin <<'/---'
Document all globals, functions, and aliases declared by ={*-pcre}.
/---

# ....................{ GLOBALS                            }....................
:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_TYPE_IS_RELAXED

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *type relaxant* (i.e., character
signifying such type to _not_ require validation throwing an exception if such
argument's value violates such type in the body of such runnable). If
specified, such argument must be manually validated.
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_TYPE_IS_INDIRECT

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *type indirective* (i.e., character
signifying such argument to be a string expanding to the name of a variable of
such type). Such character is convenient shorthand for the equivalent longhand
type `:string/var+${type}`, where `${type}` is the type of the variable such
argument refers to (e.g., `:string/var+char`, equivalent to `*:char`).
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_SUBTYPE_LOCAL

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's mandatory *local subtype* (i.e., name of the alias
locally declaring such argument in the body of such runnable).
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_SUBTYPE_MAJOR

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *major subtype* (i.e., implying the name
of the function validating such argument in the body of such runnable to be
`:${subtype_major}.die_unless_${subtype_minor}` if a minor subtype is also
specified or `:${subtype_major}.die_unless` otherwise). If unspecified, such
subtype defaults to such argument's type.

== Examples ==

As example, assuming such argument's type to be `:string` and:

* No major or minor subtype to be specified, such runnable validates such
  argument by passing such argument to function :string.die_unless().
* No major subtype to be specified and minor subtype to be `nonempty`, such
  runnable validates such argument by passing such argument to function
  :string.die_unless_nonempty().
* Major subtype to be `var` and no minor subtype to be specified, such runnable
  validates such argument by passing such argument to function :var.die_unless().
* Major subtype to be `var` and minor subtype to be `char`, such runnable
  validates such argument by passing such argument to function
  :var.die_unless_char().
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_SUBTYPE_MINOR

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *minor subtype* (i.e., implying the name
of the function validating such argument in the body of such runnable to be
`:${subtype_major}.die_unless_${subtype_minor}` if a major subtype is also
specified or `:${type}.die_unless_${subtype_minor}` otherwise). See
${ZESHY_RUNNABLE_ARG_MATCH_INDEX_SUBTYPE_MAJOR} for further details.
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_NAME_IS_RELAXED

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *name relaxant* (i.e., character
signifying such argument to _not_ require copying into a local variable of the
same name in the body of such runnable). If specified, such argument must be
manually localized.
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_NAME_SUFFIX

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *name suffix* (i.e., suffixing the name of
the local variable to which such argument's value is copied in the body of such
runnable). If specified, such suffix will be hidden in all external
documentation for such prototype and hence principally serves to produce more
human-readable argument names in such documentation.

== Example ==

For example, assuming such argument's name to be `serenity_painted` and name
suffix to be `__death`, such argument's:

* Internal name in such runnable's body would be `serenity_painted__death`.
* External name in documentation would be merely `serenity_painted`.
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_NAME

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's mandatory *name* (i.e., of the local variable to
which such argument's value is copied in the body of such runnable).
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_IS_ABSENTABLE

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *absentability* (i.e., character
signifying such argument to be absentable, permitting such argument to be
unpassed without requiring such argument be initialized to a default value).

== Optional Arguments ==

Absentable arguments are a simple form of *optional argument* (i.e., argument
callers may elect _not_ to pass); defaultable arguments are another. While
absentable arguments have _no_ value when unpassed, defaultable arguments are
assigned a default value when passed and hence always have _some_ value.
Absentable arguments and defaultable arguments thus signify differing
semantics, necessitating syntactic distinction.

Most high-level languages support defaultable arguments; few, however, support
absentable arguments. Thanks to the generality of `zsh` functions, `zeshy`
transparently supports both.
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_DEFAULT_VALUE_IS_RELAXED

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *default value relaxant* (i.e., character
signifying such argument's default value to _not_ require copying into a local
variable of the same name in the body of such runnable if unpassed). If
specified, such argument must be manually defaulted.
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_DEFAULT_VALUE

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *default value* (i.e., to which such
argument is initialized in the body of such runnable if unpassed).
/---

:global.document <<'/---'
:int ZESHY_RUNNABLE_ARG_MATCH_INDEX_IS_VARIADIC

When parsing runnable prototype arguments with
${ZESHY_PROTOTYPE_RUNNABLE_ARGS_NEXT_PCRE}, the ${match} index for the
currently parsed argument's optional *variadicity* (i.e., substring signifying
such argument and hence function to be variadic).
/---

# --------------------( WASTELANDS                         )--------------------
