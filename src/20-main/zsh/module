#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *`zsh` modules* (i.e., C extensions commonly installed with `zsh`).
/---

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void :die_unless_modules(string module_name1, ...)

Throw an exception with the passed message unless all passed modules are
available under the current `zsh` interpreter. See is_module() for further
details.
/---
function :die_unless_modules() {
    die_unless_args_1_or_more 'Expected one or more module names.'
    :string module_name
    for     module_name ("${@}") { :die_unless_module "${module_name}" }
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_module_loaded(string module_name1, ...)

Report success if all passed `zsh` modules are currently loaded.
/---
function :is_module_loaded() {
    # Validate sanity.
    die_unless_args 'Expected one or more module names.'
    :die_unless_modules "${@}"

    # Test such modules.
    zmodload -e -- "${@}"
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor from getters to setters.

declare_function_with_stdin <<'/---'
string get_module_features(string module_name)

List each feature provided by the passed `zsh` module, delimited by newlines.
/---
function get_module_features() {
    # Validate sanity.
    die_unless_arg 'Expected one module name.'
    :string module_name="${1}"
    :die_unless_module "${module_name}"

    #FIXME: Since "zmodload -Fl" fails if such module has not yet been loaded,
    #this could arguably be improved as follows: if such module has not yet been
    #loaded, do so, run "zmodload -Fl", and then immediately unload such module.
    #*DON'T FORGET TO UNLOAD*, in such case; unloading arbitrary modules can
    #often have dangerous side effects. Nonetheless, this seems quite sensible.
    #FIXME: Ah! Right. This is easily safely implemented by confining such
    #operating to a subshell, which we'll need to do *ANYWAY* when refactoring
    #this implementation into a setter. Sweeet.

    # Get such features. Dismantled, this is:
    #
    # * "-F", handling module features.
    # * "-l", listing such features.
    zmodload -Fl -- "${1}"
}

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void :set_list_to_modules(string list_name)

Set the passed list (ideally, list set) to the set of all `zsh` modules in the
current module path (in arbitrary order). Assuming such path retains its default
value, this is the set of all available `zsh` modules on the current system
loadable by calling load_module().
/---
function :set_list_to_modules() {
    # Validate sanity.
    die_unless_arg 'Expected one list name.'
    :string list_name__sltm="${1}"
    :var.die_unless_type_list "${list_name__sltm}"

    #FIXME: Don't forget to exclude dotfiles with the
    #@{runnable/function/autoload} approach.
    #FIXME: This can be dramatically improved by defining a new string global
    #${ZESHY_SHARED_LIBRARY_FILETYPE} to the filetype for shared libraries
    #specific to the current operating system -- probably best defined in
    #@{*-test/*-os} for now: e.g.,
    #
    #    case "${os_name}" {
    #    (aix*)     ZESHY_SHARED_LIBRARY_FILETYPE='a';;
    #    (darwin*)  ZESHY_SHARED_LIBRARY_FILETYPE='dylib';;
    #    (linux*)   ZESHY_SHARED_LIBRARY_FILETYPE='so';;
    #    (hpux*)
    #        # Technically, HP-UX on IA64 leverages a different type of shared library
    #        # format (".so") than that of HP-UX on PA-RISC (".sl"). Since the
    #        # latter has been discontinued, however, we assume the former.
    #        ZESHY_SHARED_LIBRARY_FILETYPE='so'
    #        :case.break
    #    (solaris*) ZESHY_SHARED_LIBRARY_FILETYPE='so';;
    #    (windows*) ZESHY_SHARED_LIBRARY_FILETYPE='dll';;
    #    }
    #
    #Then match only shared libraries below as follows:
    #
    #   '${list_name__sltm}'+=( "${modules_dirname}/**/*".${ZESHY_SHARED_LIBRARY_FILETYPE}"(#q.) )
    #FIXME: Note that, while there appears to exist no canonical online mapping
    #between OSes and the shared library filetypes each requires, the answer to
    #question "Which DLL's do I need to distribute with my application?" at the
    #FAQ below is a meager start:
    #    http://xerces.apache.org/xerces-c/faq-distrib-2.html

    # Append all files recursively found in all directories in the current
    # module path to such list.
    eval '
    :string modules_dirname
    for     modules_dirname ("${module_path[@]}") {
        '${list_name__sltm}'+=( "${modules_dirname}/**/*"."*(#q.) )
    }'
}

# ....................{ LOADERS                            }....................
declare_function_with_stdin <<'/---'
void load_module(string module_name1, ...)

Load the passed `zsh` modules.
/---
function load_module() {
    die_unless_args 'Expected one or more module names.'
    zmodload -- "${@}"
}

#FIXME: Excise this and :unload_module_mapfile() in favor of
#":with_mapfile{...}:with_mapfile"

declare_function_with_stdin <<'/---'
void :load_module_mapfile()

Load `zsh` module `mapfile` exporting map global ${mapfile}: e.g.,

.:load_module_mapfile()
==========================================
[source]
------------------------------------------
>>> :load_module_mapfile
>>> :try{
...     :string filename="/culture/is/not/your/friend" on_culture=\
...        "But we are led by the least among us: the least intelligent, the
...         least noble, the least visionary. We are led by the least among us
...         and we do not fight back against the dehumanizing values that are
...         handed down as control icons. Culture is not your friend. It is not
...         your friend. It insults you. It disempowers you. It uses and abuses
...         you. The culture is a perversion. It fetishizes objects, creates
...         consumer mania. It preaches endless forms of false happiness,
...         endless forms of false understanding in the form of squirrelly
...         religions and silly cults. It invites people to diminish themselves
...         and dehumanize themselves by behaving like machines, meme
...         processors of memes passed down from Madison Avenue and Hollywood."
...     mapfile[${filename}]="${on_culture}"
...     get_string_line "${mapfile[${filename}]}" 1
...     unset 'mapfile[${filename}]'
...     die_unless_file "${filename}"
... }:catch{
...     :unload_module_mapfile
... }:
But we are led by the least among us: the least intelligent, the
┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• die_unless_file() Exception •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
┋ die() failed with exit status 1.                                              ┋
┋ ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ ┋
┋ "/culture/is/not/your/friend" not a file.                                     ┋
┠┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
>>> :is_module_loaded zsh/mapfile or print '"zsh/mapfile" unloaded.'
"zsh/mapfile" unloaded.
------------------------------------------
==========================================

== Caveats ==

*${mapfile} is the most dangerous global in the `zsh` cannon.* While such map
_does_ offer more efficient read-write access to text file contents than
simpler, arguably safer techniques (e.g., `$(< "${filename}")`,
`$(cat "${filename}")`), unsetting ${mapfile} keys has the non-idempotent side
effect of silently and permanently deleting the corresponding files!

To mitigate these risks, consider unsetting ${mapfile} and unloading `mapfile`
immediately after use. Specifically, either:

* Call :run_code_with_mapfile(), which safely handles such lifecycle issues on
  your behalf, rather than this function.
* Call :unload_module_mapfile() from an `always :{...:}` block situated
  immediately _after_ calling this function, as in the prior example.
/---
function :load_module_mapfile() {
    die_if_args
    load_module zsh/mapfile
}

# ....................{ UNLOADERS                          }....................
declare_function_with_stdin <<'/---'
void unload_module(string module_name1, ...)

Unload all passed currently loaded `zsh` modules.
/---
function unload_module() {
    # Dismantled, this is:
    #
    # * "u", unloading this module.
    # * "i", a noop if this module is not currently loaded.
    die_unless_args 'Expected one or more module names.'
    zmodload -ui -- "${@}"
}

declare_function_with_stdin <<'/---'
void :unload_module_mapfile()

Unload `zsh` module `mapfile`. See :load_module_mapfile() for further details.
/---
function :unload_module_mapfile() {
    die_if_args
    unload_module zsh/mapfile
}

# --------------------( WASTELANDS                         )--------------------
# function yim() {
#     # typeset -g EXCEPTION='uh oh'
#     return 1
#     # readonly THROW=
#     # THROW= 2>/dev/null
#     die 'Test.'
#     print 'Herehere!'
# }
# yim

# function yim() {
#     # typeset -g EXCEPTION='uh oh'
#     # return 1
#     # readonly THROW=
#     # THROW= 2>/dev/null
#     die 'Test.'
#     print 'Herehere!'
# }
# yim

    # Test such module. Since zsh guarantees such command not to output, the
    # following suffices:
    #
    # * "-F", handling module features.
    # * "-e", reporting success if such module is loaded and failure otherwise.
    # zmodload -Fe -- "${module_name}"

#FUXME: Currently broken. Any idea how to cogently implement this?
    #FUXME: Ugh. "zmodload -Fe" only reports success if such module has been
    #loaded *AND* provides at least one passed feature. Oddly, such builtin
    #prints no errors if no features were passed but does report failure. Since
    #it's unclear how to implement this, at the moment, throw an exception.
    # die 'is_module_loaded() unimplemented.'

    #FUXME: Finish me. To append to a list dynamically, we'll probably want a
    #new :append_list_with_code() function.
#FUXME: Odd example. We should do actually something constructive with
#${mapfile} in the example, which we certainly don't at the moment.

#Such map and hence module remains inherently unsafe. 
# Define builtins pcre_compile(), pcre_study(), and pcre_match() to autoload
# module "zsh/pcre" defining such builtins.
# Define globals keymaps() and widgets() to autoload module "zsh/zleparameter".
# Define the passed builtins to autoload the passed module defining such builtins:

#FUXME: If such approach is inefficient, we could always optimize it as follows:
#
#* Cache the absolute paths of all files recursively in all directories in
#  ${module_path} into keys of a temporary map local.
#* Perform lookups on such map rather than calls to is_module().
#
#That said, my spidey sense is tingling "Extreme premature optimization!" Just
#go with the above approach. *shakes head*

#* Iterate directory names in list global ${module_path} and for each
#  listed directory that exists, set the result of globbing for
#  'terminfo.'* into a local list.
#* If such list is nonempty, successfully break such iteration.
#* Else if such list is still empty at the end of such iteration, the
#  current system does *NOT* provide a "terminfo" database. In such case, set
#  integer global ${ZESHY_TERMINAL_COLOR_COUNT} to 2 (i.e., black and white).

    #FUXME: *UGH*. We should *REALLY* have become familiar with "man zshparams"
    #sooner. Look, all we have to do is manually search each path in list global
    #${module_path} for a file matching such module name. It's really simple.
    #Honestly... *sigh*

    # # If such module is already loaded, such module exists. Avoid calling
    # # is_module_loaded(), which implicitly calls this function. Dismantled,
    # # this is:
    # #
    # # * "-F", testing module features.
    # # * "-e", returning success if such module is loaded and failure otherwise.
    # #
    # # Since zsh guarantees such command not to output, this suffices.
    # zmodload -Fe -- "${module_name}" or (
    #     # Else, if loading such module succeeds, such module exists.
    #     # Astonishingly, zsh offers no means of testing whether such module
    #     # exists without loading such module. Since merely loading numerous
    #     # modules can have unpleasant side effects (e.g., resource consumption
    #     # under "zsh/zprof" profiling), we take the following precautions:
    #     #
    #     # * Load such module in a subshell rather than the current shell (e.g.,
    #     #   with a "("- and ")"- rather than "{"- and "}"-delimited block).
    #     # * Immediately unload such module if successfully loaded.
    #     #
    #     # Due to said side effects, avoid calling zeshy functions here.
    #     if { zmodload     -- "${module_name}" &>/dev/null } {
    #          zmodload -ui -- "${module_name}" &>/dev/null
    #     }
    # )

    #FUXME: Actually, there is a way of improving this. It's fairly sneaky, but
    #it should work. Note that if you run "zmodload oeuntoheuntoheuntoehunotehu"
    #with an arbitrarily long string basically guaranteed to fail, zsh always
    #responds with an error message giving the absolute path of the directory
    #containing such modules: e.g.,
    #
    #    zsh: failed to load module `oeuntoheuntoheuntoehunotehu': /usr/lib64/zsh/5.0.2/oeuntoheuntoheuntoehunotehu.so: cannot open shared object file: No such file or directory
    #
    #There's no other reliable means of determining such path, but the above at
    #least works (and hopefully portably).
    #
    #For efficiency (and safety), we could parse such message *AT DIGEST COMPILE
    #TIME* for such path and store such path in a string global to be serialized
    #into such digest -- say, ${ZESHY_ZSH_MODULE_DIR}. Then, this function could
    #perform the following test:
    #
    #* First, try 'zmodload -Fe -- "${module_name}"' as we currently do.
    #* Failing that, try ':is_file "${ZESHY_ZSH_MODULE_DIR}/${module_name}"'.
    #  *NO MODULE LOAD REQUIRED*.
    #
    #Actually, it's not *QUITE* that simple. Modules can be statically linked
    #into the "zsh" binary itself, in which case the above isn't quite enough.
    #Hence, we require a third test doing exactly what we do now: try loading it
    #manually. *sigh* Can't really get away from that; but, the above does at
    #least substantially reduce the likelihood of spurious module loads, as one
    #would only ever call this function with a module likely to exist as a
    #dynamically linked library on most systems.

# Ensure "mapfile" to be unloaded despite throwing an exception.

# Whenever calling this function, _always_ call :unload_module_mapfile() on no
# longer requiring ${mapfile} access -- even if such access throws an exception

#FUXME: Uhm; how actually does one do this? The zsh manual explicitly suggests
#the best method is:
#
#    run_code_silent zmodload "${1}"
#
#But that's demonstrably silly. A test method shouldn't actually have non-
#idempotent side effects. In lieu of any builtin method, the best way might
#simply be to search the appropriate path under "/usr/share/zsh" for filenames
#corresponding to passed modules.

# void load_mapfile()
#
# Load zsh module "mapfile". This module is *INHERENTLY* dangerous; in
# particular, unsetting list elements permanently and silently deletes files
# with the same name as such elements. To prevent accidental calamity, either:
#
# * If possible, call run_code_with_mapfile:() rather than this function, which safely
#   handles such lifecycle issues for you.
# * Otherwise, unload "mapfile" immediately after use via unload_mapfile().
#function load_mapfile() {
#    load_module zsh/mapfile
#}

# void unload_mapfile()
#
# Unload zsh module "mapfile". See load_mapfile().
#function unload_mapfile() {
#    unload_module zsh/mapfile
#}

