#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle `zsh` variable syntax.

== See Also ==

* http://stackoverflow.com/questions/2821043/allowed-characters-in-linux-environment-variable-names[Variable syntax, complete with citations].
/---

# ....................{ GLOBALS                            }....................
# See @{00-startup/00-declare/*-global} for related string global
# ${ZESHY_VAR_NAME_GLOB}.

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void :die_unless_var_name(
    string variable_name,
    string error_message = "Variable name \"${variable_name}\" invalid.")

Throw an exception with the passed message unless the passed `zsh` variable name
is syntactically valid. See :is_var_name() for further details.
/---
function :die_unless_var_name() {
    die_unless_args_1_to_2\
        'Expected one variable name and optional error message.'
    string variable_name="${1}"
    :is_var_name "${variable_name}" or
        die "${2-Variable name \"${variable_name}\" invalid.}"
}

declare_function_with_stdin <<'/---'
void :die_unless_var_names(string variable_name1, ...)

Throw an exception with a stock message unless all passed `zsh` variable names
are syntactically valid. See :is_var_name() for further details.
/---
function :die_unless_var_names() {
    # Validate passed arguments.
    die_unless_args 'Expected one or more variable names.'

    #FIXME: 

    # Test such names. For efficiency, inline such tests.
    string variable_name
    for    variable_name ("${@}") {
        is "${variable_name}" == ${~ZESHY_VAR_NAME_GLOB} si or
            :die_unless_var_name "${variable_name}"
    }
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: boolean] :is_var_name(string name)

Report success if the passed string is a syntactically valid `zsh` variable
name: e.g.,

.:is_var_name()
==========================================
[source]
------------------------------------------
>>> string on_maladjustment=\
...    "There are certain things in our nation and in the world [to] which I am
...     proud to be maladjusted... I say very honestly that I never intend to
...     become adjusted to segregation and discrimination. I never intend to
...     become adjusted to religious bigotry. I never intend to adjust myself to
...     economic conditions that will take necessities from the many to give
...     luxuries to the few [and] leave millions of God's children smothering
...     in an airtight cage of poverty in the midst of an affluent society. I
...     never intend to adjust myself to the madness of militarism, to self-
...     defeating effects of physical violence. But in a day when sputniks and
...     explorers are dashing through outer space and guided ballistic missiles
...     are carving highways of death through the stratosphere, no nation can
...     win a war. It is no longer the choice between violence and nonviolence.
...     It is either nonviolence or nonexistence."
>>> :is_var_name "MKULTRA!?" and print_string "${on_maladjustment}"
>>> :is_var_name "COINTELPRO" or print_string "${on_maladjustment}"
------------------------------------------
==========================================
/---
function :is_var_name() {
    die_unless_arg 'Expected one string.'
    is "${1}" == ${~ZESHY_VAR_NAME_GLOB} si
}

declare_function_with_stdin <<'/---'
[status: boolean] :is_var_definition(string definition)

Report success if the passed string is a syntactically valid `zsh` variable
definition: e.g.,

.:is_var_definition()
==========================================
[source]
------------------------------------------
>>> string on_endurance=\
...    "To our most bitter opponents we say: \"We shall match your capacity to
...     inflict suffering by our capacity to endure suffering. We shall meet
...     your physical force with soul force. Do to us what you will, and we
...     shall continue to love you. We cannot in all good conscience obey your
...     unjust laws because noncooperation with evil is as much a moral
...     obligation as is cooperation with good. Throw us in jail and we shall
...     still love you. Bomb our homes and threaten our children, and we shall
...     still love you. Send your hooded perpetrators of violence into our
...     community at the midnight hour and beat us and leave us half-dead, and
...     we shall still love you. But be ye assured that we will wear you down by
...     our capacity to suffer. One day we shall win freedom but not only for
...     ourselves. We shall so appeal to your heart and conscience that we shall
...     win you in the process and our victory will be a double victory.\""
>>> :is_var_definition "FALSE=flag " or print_string "${on_endurance}"
>>> :is_var_definition "BLACK!flag" and print_string "${on_endurance}"
------------------------------------------
==========================================
/---
function :is_var_definition() {
    die_unless_arg 'Expected one string.'
    is "${1}" == ${~ZESHY_VAR_NAME_GLOB}'='* si
}

# --------------------( WASTELANDS                         )--------------------
    # Test such names. For efficiency, inline such tests.
#   string variable_name
#   for    variable_name ("${@}") {
#       is "${variable_name}" == ${~ZESHY_VAR_NAME_GLOB} si or
#           :die_unless_var_name "${variable_name}"
#   }

#[a-zA-Z_][a-zA-Z0-9_]#
    # Test such name. For efficiency, inline such test.
# ....................{ GLOBALS                            }....................
#declare_function_with_stdin <<'/---'
#string ZESHY_VAR_NAME_GLOB
#
#Extended glob matching syntactically valid `zsh` variable names.
#/---
## Dismantled, this is:
##
## * "[a-zA-Z_]", matching the first character of a valid zsh variable name.
## * "[a-zA-Z0-9_]#", matching all remaining characters of such name.
#ZESHY_VAR_NAME_GLOB='[a-zA-Z_][a-zA-Z0-9_]#'

# I never intend to adjust myself to the madness of militarism, to self-
#...     defeating effects of physical violence. But in a day when sputniks and
#...     explorers are dashing through outer space and guided ballistic missiles
#...     are carving highways of death through the stratosphere, no nation can
#...     win a war. It is no longer the choice between violence and nonviolence.
#...     It is either nonviolence or nonexistence.
#...    "There are certain things in our nation and in the world to which I am
#...     proud to be maladjusted and to which I hope all men of goodwill will be
#...     maladjusted, until the good societies realize. I say very honestly that
#   case "${variable_type}" {
#   integer*|float*) (( ${(P)variable_name} )) and report_status_silent;;
#   *)          is -n "${(P)variable_name}" si and report_status_silent;;
#   }

#Serialize the passed variables to the passed file, appending the contents
#of such file with the current definitions of such variables. Subsequently call
#:source_script() to deserialize such variables from such file.

#FUXME: Silly function. Replace everywhere with a call to
#die_unless_string_nonempty(). (The reason? For safety, the passed variable name
#is usually suffixed by something resembling "__duvn", which is hardly human-
#readable. This function promotes bad output and hence bad behavior. Excise!)
#declare_function '
#void :die_unless_var_nonempty(
#    string variable_name,
#    string error_message = "\"${variable_name}\" not set or empty")
#
#Throw an exception unless the passed variable is set to a non-empty value.
#See :is_var_empty() for the definition of "empty value."
#'
#function :die_unless_var_nonempty() {
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string variable_name="${1}"
#    :is_var_nonempty "${variable_name}" or
#        die "${2:-\"${variable_name}\" not set or empty}"
#}

#FUXME: No longer fond of such nomenclature. The script is the dominant object
#to which the action "write" is applied -- not the variable. Hence, rename to
#:write_script_with_var_binding().
        #FUXME: Implement new get_zsh_path() and get_zsh_shebang_line()
        #functions. The latter function should first test if either "env" is a
        #pathable and, if so, print a shebang line to such command; otherwise,
        #default to get_zsh_path(), as implemented below.

        # For safety, ensure the first line of such script is a zsh shebang.
#       string zsh_path; zsh_path="$(get_pathable_path zsh)"
#       print_string "#!${zsh_path}"

# -- particularly, names, types, values, and related metadata
# (e.g., globality, writability)
#       variable_type="$(get_variable_type "${variable_name}")"
#       print_string "variable type: ${variable_type}\nglob: ${glob}"
#       :is_string_matches_glob "${variable_type}" "${glob}" # do not quote such glob!
    # * "is -n ... si", true if such expansion is non-empty and thus the passed
    #   valiable is set.
#FUXME: I'm somewhat unhappy with the nomenclature of the current write_*() and
#append_*() methods. Reconsider. (These function names, however, are great.)

# ....................{ FREEZERS                           }....................
#FUXME: Fairly certain all of the freeze_*() and unfreeze_*() functions below
#are fundamentally dangerous. The reason, unfortunately, is that each call of
#typeset() on a variable replaces all prior attributes of such variable rather
#than merely supplementing them. The result? Unhappy chaos. This is
#astonishingly hard to do, actually. I suspect the best will be to first
#print out the current definitions of all passed variables with
#'typeset -p -- "${@}"', string munge such definitions to remove all "-r" flags,
#and then embed the munged definitions in an "eval" statement. Ugly and rather
#inefficient, but I don't see why it wouldn't work. That said, I don't currently
#require such functionality, so... cut 'em!

# void freeze_variable(string variable_name1, string variable_name2, ...)
#
# Make the passed variables read-only (e.g., "const", "final").
#function freeze_variable() {
#    die_unless_args 'expected at least one variable name'
#    :die_unless_vars "${@}"
#    die 'implement me'
#}

# void unfreeze_variable(string variable_name1, string variable_name2, ...)
#
# Make passed variables writable (i.e., non-read-only).
#function unfreeze_variable() {
#    die_unless_args 'expected at least one variable name'
#    :die_unless_vars "${@}"
#    die 'implement me'
#}

# ....................{ FREEZERS ~ glob                    }....................
# void freeze_variables_matching(string glob)
#
# Make all variabless matching the passed glob read-only (e.g., "const").
#function freeze_variables_matching() {
#    die_unless_arg 'expected one glob'
#    die 'implement me'
#   typeset -mr -- "${1}"
#}

# void unfreeze_variables_matching(string glob)
#
# Make all variabless matching the passed glob writable (i.e., non-read-only).
#function unfreeze_variables_matching() {
#    die_unless_arg 'expected one glob'
#    die 'implement me'
#   typeset -m +r -- "${1}"
#}

# ....................{ UNDEFINERS                         }....................
#FUXME: Define corresponding undefine_local() *ALIASES*. It's critical they not
#be functions to guarantee correct scope. *WAIT.* These functions are
#practically useless; there appears to be no coherent means of undefining
#global variables from a function context. At least, I couldn't do it!
#Unsetting just unsets locally, which seems miserably stupid. *sigh*
#We'd need to define these as aliases; but then, of course, there's no means of
#adding in the essential "typeset +r". In any case, the resulting aliases
#*STILL* wouldn't work globally - just in the local function context.

# void undefine_global(string global_name1, string global_name2, ...)
#
# Undefine the passed global variables.
#function undefine_global() {
    # Validate passed arguments.
#    die_unless_args 'expected at least one global name'

    # zsh refuses to unset read-only globals. But zsh didn't count on us. Mark
    # such globals writable before undefining such globals. Haha!
#   unfreeze_global_export "${@}"
#   typeset +r ZESHY_GLOB_SHELL_EMULATABLE_DIRECTLY\
#       ZESHY_MAP_SHELL_NAME_TO_EMULATABLE_SHELL_NAME
#   typeset -p -- "${@}"
#    typeset +r -- "${@}"
#   for variable_name ("${@}") {
#       env --unset="${variable_name}" &>/dev/null
#   }
#    unset -- "${@}"
#   typeset +r ZESHY_GLOB_SHELL_EMULATABLE_DIRECTLY=2
#   typeset -p -- "${@}"
#   print_string "unset: "
#   print_strings_newlined "${@}"
#   [[ -n "${ZESHY_GLOB_SHELL_EMULATABLE_DIRECTLY+x}" ]] and print 'hmmmmm'
#}

# void undefine_globals_matching(string glob)
#
# Undefine all global variables matching the passed glob.
#function undefine_globals_matching() {
    # See undefine_global() for discussion.
#    die_unless_arg 'expected one glob'
#    string glob="${1}"
#    typeset -m +rg -- "${@}"
#    unset -m -- "${glob}"
#}

#   unfreeze_variables_matching "${glob}"
#FUXME: Improve to accept multiple variable names. Requires a loop, amusingly,
#to manually ensure each such variable exists.

#   for variable_name ("${@}"
#   string variable_name="${1}"
#   :die_unless_var "${variable_name}"
#   string variable_name="${1}" filename="${2}"
#   :die_unless_var "${variable_name}"

    # Write such variable. Dismantled, this is:
    #
    # * "-p", printing the current definition of such variable.
    # * ">!", forcefully overwriting such file if already extant.
#   typeset -p "${variable_name}" >! "${filename}"
# read_variables_from_file() to deserialize such variable from such file.
# ....................{ READERS                            }....................
# void read_variable_from_file(string variable_name, string filename)
#
# Deserialize the passed variable from the passed file, presumably written by a
# prior call to write_variable_to_file().
# :set_var_to_file_contents() to deserialize such variable from such file.
#function read_variable_from_file() {

#, concatenated into a single string.
        # If this word defines a global variable, continue to the next; else,
        # break with this word. Dismantled, this is:
        # * "[a-zA-Z_]", matching the first character of a variable name.
        # * "[a-zA-Z0-9_]#", matching all remaining characters of such name.
        # * '=', a "=" delimiter.
        # * "*", matching zero or more characters as the variable value.
#       is "${word}" == [a-zA-Z_][a-zA-Z0-9_]#'='* si or break
# Clearly, these
#functions should all be shifted to the same component.
#FUXME: Fails to account for prefixing temporary globals: e.g.,
#   LD_PATH="oeu=oeu" ssh -o hmm
#       is "${word}" == *?'='* si or break
# This function currently fails to return the expected name for exotic command
# lines containing pathological, but technically valid, syntax (e.g.,
# '"{!! This is a sadistic variable name !!}"="===" ls').
#   list words; words=( "${(z)*}" )
#   for word ("${words[@]}") {
#   string args; args="$(get_args)"
    # Exclude prefixing temporary global variable definitions.
    # Return the first shell word of remaining arguments.
#   get_word "${args}" 1
        # If such variable's type is numeric, emptiness is equality with zero;
        # otherwise, emptiness is equality with the empty string.
#FUXME: Remove at least two of the following functions. I'm thinking
#get_variable_first_or() and get_variable_value_first_or().
#FUXME: Rename "_if_found" back to "_if_found" *EVERYWHERE*. Much more readable.

    # Validate passed arguments.
#   die_unless_arg 'expected one variable name'
#   string variable_name; variable_name="${1}"

    # If such variable exists, test such variable's value for emptiness
    # depending on its type.
#   :is_var "${variable_name}" and {
#       string variable_type; variable_type="$(get_variable_type)"

#       case "${variable_type}" in
        # If such variable's type is numeric, emptiness is equality with zero.
#       integer*|float*) (( "${(P)variable_name}" == 0 )) and report_status;;
        # Otherwise, emptiness is equality with the empty string.
#       *) is -z "${(P)variable_name}" si and report_status;;
#       esac
#   }

#FUXME: Such functions only return string values; rename to
#get_variable_first_expansion_if_found().
    # If the passed variable is unset, expand to the empty string; otherwise,
    # expand as is. Return true if such expansion is non-empty.
#   is -n "${${(P)1-}#0}" si

# string get_variable_first_or(
#   string default_value,
#   string variable_name1, variable_name2, ...)
#
# Get the name of the first passed variable with non-empty value or the passed
# default value if no such variable has a non-empty value: e.g.,
#
#     >>> unset_variable PEGANUM HARMALA
#     >>> get_variable_first_or('Thank you, Iran.' PEGANUM HARMALA)
#     Thank you, Iran.
#function get_variable_first_or() {
#    die_unless_args_2_or_more\
#        'expected one default value and at least one variable name'
#    get_variable_first_if_found "${@[2,-1]}" or print_string "${@[1]}"
#}

# string get_variable_value_first_or(
#   string default_value,
#   string variable_name1, variable_name2, ...)
#
# Get the value of the first passed variable with non-empty value or the passed
# default value if no such variable has a non-empty value: e.g.,
#
#     >>> unset_variable PEGANUM
#     >>> string HARMALA='Esfand svanta'
#     >>> get_variable_value_first_or('Thank you.' PEGANUM HARMALA)
#     Esfand svanta
#function get_variable_value_first_or() {
#    die_unless_args_2_or_more\
#        'expected one default value and at least one variable name'
#    get_variable_value_first_if_found "${@[2,-1]}" or print_string "${@[1]}"
#}

    # If the passed variable is unset, expand to "x"; otherwise, expand as is.
    # Return true if such expansion is empty. Dismantled, this is:
    #
    # * "#0", removing a prefixing "0" if present and hence treating "0" as
    #   empty. By default, zsh only treats the empty string as empty. Since
    #   integers are scalars that are *ALWAYS* some integer and hence never the
    #   empty string, integers would never be treated as empty without such fix.
#   is -z "${${(P)1-x}#0}" si

#       string*)
#       array*|association*) (( "${(P)variable_name}" == 0 ));;
# or throw an
# exception if no such object exists# void die_unless_unset(string variable_name, string error_message = 'already set')
#
# Throw an exception unless the variable with the passed name is unset.
#function die_unless_unset() {
#    die_unless_args_1_to_2\
#        'expected one variable name and optional error message'
#    string variable_name="${1}"
#    is_undeclared "${variable_name}" or die "${2:-\"${variable_name}\" already set}"
#}

    # Validate passed arguments.
    # Iterate passed arguments for the first non-empty variable or return false.
# boolean :is_var(string text)
#
# Return true if the variable with the passed name is unset (i.e., undeclared).
#function :is_var() {
    # Negate the condition :is_var_declared() tests for.
#    die_unless_arg 'expected one variable name'
#    is -z "${(P)1+x}" si
#}

#FUXME: I'm no longer enamoured with our use of "set" in this context, which
#conflicts with our use of "set" when referring to list and map sets. Rather,
#let's rename the former uses of "set" with "defined": e.g.,
# string get_first_defined_nonempty_variable(...)

#FUXME: Uhm... what? I'm fairly certain we never call this. Doesn't is_declared()
#suffice? We probably want to replace this with a new is_global() function.
# boolean :is_var(string variable_name)
#
# Return true if there exists a variable with the passed name.
#:is_var() {
#    die_unless_arg 'expected one name'
#    is_string_nonempty "${(tP)1}"  # see get_type() for details
#}

#FUXME: Rename is_local().
#       string object_type
#       object_type="$(whence -w -- "${object_name}")" or true  # ignore errors

# * Reflection functionality for dynamically inspecting functions and aliases
#   like first-class constructs.
#FUXME: Uhm; shouldn't "_runnable" be "_callable" everywhere below? Do we really
#need a distinction between the two? Arguably, functions aren't runnable and
#commands and builtins aren't callable. Perhaps

# ....................{ DEPENDENCIES                       }....................
#FUXME: This is generic functionality which should probably be provided by
#"core". Shift us up the genericity!
# void _zeshy_type(void)
#
# Import Zeshy components specific to the current OS.
#_zeshy_type() {
#    string current_dir="$(dirname "${zeshy_script_path}")"
#    is_dir "${current_dir}" and zimport "${current_dir}"
#}

# ....................{ MAIN                               }....................
# Call and then immediately unset (i.e., delete) _zeshy_os().
#_zeshy_os
#unset _zeshy_os
