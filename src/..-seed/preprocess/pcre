#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

#FIXME: Convert into parcel documentation.
# --------------------( SYNOPSIS                           )--------------------
# Define PCREs required by preprocessors.

# ....................{ GLOBALS                            }....................
# PCRE globals defined below.
typeset -g\
    ZESHY_MACRO_PCRE\
    ZESHY_MACRO_ARG_BLOCK_BODY_PCRE

# ....................{ CLEARERS                           }....................
#FIXME: Document me.
# :void ::preprocessor_pcres.clear()
function ::preprocessor_pcres.clear() {
    (( # == 0 )) || :die 'Expected no arguments.'
    ZESHY_MACRO_PCRE=
}

# ....................{ MAKERS                             }....................
#FIXME: Document me.
# :void ::preprocessor_pcres.make_if_needed()
function ::preprocessor_pcres.make_if_needed() {
    (( # == 0 )) || :die 'Expected no arguments.'
    [[ -n ${ZESHY_MACRO_PCRE} ]] || ::preprocessor_pcres.make
}

#FIXME: Document me.
# :void ::preprocessor_pcres.make()
function ::preprocessor_pcres.make() {
    #FIXME: Replace subroutine calls called in only one place with low-level
    #variable expansions.
    #FIXME: Compress PCREs together. For example, we don't benefit from
    #separate ${pcre_macro_arg} and ${pcre_macro_args} PCREs.

    #FIXME: Capture block arguments. 
    #FIXME: Define match index globals. This is going to considerably more
    #troublesome than it otherwise would, due to each named group being
    #unconditionally captured. We'll have to ignore all such groups in a sane
    #way -- probably by incrementing in integer local here immediately after
    #defining any ignorable named group (which will be most if not all of them).

    # Validate sanity. Since subsequent locals often depend on prior locals
    # locals, define one local per line below.
    (( # == 0 )) || :die 'Expected no arguments.'

    # All subroutines defined above, concatenated in a manner preventing such
    # definitions from matching. Such subroutines remain callable and hence are
    # defined only for efficiency and readability purposes.
    #
    # First, a bit of useful background. As in Perl but not Ruby, "libpcre"
    # subroutine calls (e.g., "(?&soma)") do *NOT* capture the substring
    # matched by such call. As in both Perl and Ruby, subroutine definitions
    # (e.g., "(?<soma>All the advantages of Christianity and alcohol; none of
    # their defects.)" capture the substring matched by such definition. For
    # further details, see:
    #
    #     http://www.regular-expressions.info/recursecapture.html
    #
    # While non-orthogonal, such behaviour improves efficiency (by *NOT*
    # forcing all subroutine calls to inefficiently capture) and simplifies the
    # subsequent definitions of numbered group indices (by substantially
    # reducing the number of such groups). While these are good things, the
    # fact that subroutine definitions unconditionally capture is somewhat
    # noxious. In most cases, we would prefer such definitions to *NOT*
    # capture. To ensure this, we append each subroutine definition to this
    # string local and then interpolate such string into a PCRE guaranteed to
    # never match and hence capture.
    local subroutines

    # ..................{ MACRO                              }..................
    # One or more command-specific whitespace sequences (i.e., all substrings
    # connoting whitespace *NOT* terminating the current command), including
    # all whitespace except newlines *NOT* prefixed by "\". While "\"-prefixed
    # newlines are line continuations preserving the current command,
    # unprefixed newlines are effectively semicolons terminating such command.
    subroutines+='(?<spaces>(?:\h|\\\R)*\h(?:\h|\\\R)*)'

    # Character class matching shell-reserved characters.
    local char_class_reserved='''"$<>{}|`'

    # Unquoted shell word.
    local pcre_word_unquoted+='[^\s'${char_class_reserved}']++'

    # Unquoted inescapable shell word, comprising one or more arbitrary
    # characters excluding:
    #
    # * Whitespace characters.
    # * Shell-reserved characters.
    # * Escape prefix "\".
    local pcre_word_unquoted_inescapable='[^\s'${char_class_reserved}'\\]++'
    local pcre_word_unquoted_inescapable_grouped='('${pcre_word_unquoted_inescapable}')'

    # Shell word excluding here-documents and -strings, comprising one of the
    # prior syntactic constructs. Ideally, this matches any standard argument
    # passable to a zsh command. Here-documents and -strings are *NOT* freely
    # mixable with standard arguments and hence unmatched here.
    subroutines+='(?<word>'${pcre_word_unquoted}'|(&quote)|(?&sub))'

    # One or more runs of whitespace or shells words ending in a shell word.
    # The latter condition prevents this PCRE from matching substrings ending
    # in a run of whitespace, ensuring such whitespace will be matched only as
    # the non-optional whitespace prefixing a subsequent block argument if any
    # or otherwise unmatched. In both zsh and zeshy, unquoted whitespace is
    # significant only for argument delimitation. Hence, trailing unmatched
    # whitespace is safely ignorable.
    local pcre_words_sans_here='(?:(?&word)|(?&spaces))*(?&word)'

    # Single-quoted string *NOT* supporting escaped single quotes.
    local          pcre_quotes_single_inescapable="'[^']*+'"
    local pcre_quotes_single_inescapable_grouped="'([^']*+)'"

    # Double-quoted string *NOT* supporting escape prefix "\".
    local          pcre_quotes_double_inescapable='"[^"]*+"'
    local pcre_quotes_double_inescapable_grouped='"([^"\]*+)"'

    # Single-quoted string in zsh format and hence supporting escaped single
    # quotes (i.e., "''").
    local pcre_quotes_single="'(?:[^']|'')*')"

    # Double-quoted string in zsh format and hence supporting escaped double
    # quotes (i.e., '\"'). Unlike the prior PCRE, character class [^"] also
    # matches "\" and hence must be matched *AFTER* matching the latter.
    #
    # Since zsh appears to parse terminating '"' delimiters in a phase *BEFORE*
    # that of variable expansions, this PCRE can (and possibly should) avoid
    # matching such expansions here. Since such behaviour is arguably either
    # a bug or unreliable implementation detail, however, we match
    # substitutables embedded in double quotes in the same manner as that of
    # substitutables embedded in other syntax (e.g., arithmetic substitutions).
    local pcre_quotes_double='"(?:\\["$`]|[^"$`]|(?&sub))*"'

    # Single- or double-quoted string.
    subroutines+='(?<quote>'${pcre_quotes_single}'|'${pcre_quotes_double}')'

    # Here-document or -string. Unfortunately, matching all possible
    # here-document strings is infeasible within the purview of a pure PCRE.
    # Matching here-document delimiters embedding escaped characters (e.g.,
    # '<<"mother\"destroyer"') requires unescaping such characters -- a simple
    # operation that, by definition, exceeds the purview of pure PCREs.
    #
    # Hence, match only the proper subset of here-document strings with
    # delimiters containing no escaped characters. Since few to no real-world
    # here-document strings (certainly, none zeshy itself leverages) require
    # delimiters containing escaped characters, this is moderately ignorable.
    local pcre_here_doc_prefix='-?\s*+(?|'${pcre_quotes_single_inescapable_grouped}'|'${pcre_quotes_double_inescapable_grouped}'|'${pcre_word_unquoted_inescapable_grouped}')\R'
    local pcre_here_doc_body='.*?'
    local pcre_here_doc_suffix='\R(?-1)'
    local pcre_here_doc=${pcre_here_doc_prefix}${pcre_here_doc_body}${pcre_here_doc_suffix}
    local pcre_here_string='<\s*+(?&word)+'
    subroutines+='(?<here><<(?:'${subroutine_here_doc}'|'${subroutine_here_string}')'

    # Possibly recursively nested variable expansion. While we would prefer
    # *NOT* to capture such expansion, recursive pattern matching in "libpcre"
    # requires interior back references to the outermost syntactic construct
    # recapitulating such recursion. Such groups are recursion-specific and
    # hence *MUST* be explicitly ignored for all other purposes.
    #
    # Since we prefix such PCRE by "$" below, avoid doing so here.
    local pcre_var_expansion_recursive='\{(?:\\[$}`]|[^$}`]|(?&sub))*\}'

    # Non-recursive variable expansion *OR* a literal "$" character. To match
    # the latter, match zero or more such characters. See
    # ${ZESHY_VAR_NAME_GLOB}.
    #
    # Since we prefix such PCRE by "$" below, avoid doing so here.
    local pcre_var_expansion_nonrecursive='[a-zA-Z_][a-zA-Z0-9_]*+'

    # Variable expansion.
    local pcre_var_expansion='(?:'${pcre_var_expansion_nonrecursive}'|'${pcre_var_expansion_recursive}')'

    # Possibly recursively nested arithmetic substitution.
    local pcre_math_substitution='\(\((?:\\[$`]|(?!\)\))[^$`]|(?&sub))*\)\)'

    # Possibly recursively nested process substitution.
    local pcre_process_substitution_recursive='\((?:\\[)''"$`<]|(?!<<)[^)''"$`]|(?&code))*\)'

    # Any of the above "$"-prefixed syntactic constructs.
    subroutines+='(?<dollar>\$(?:'${pcre_var_expansion}'|'${pcre_math_substitution}'|'${pcre_process_substitution_recursive}'))'

    # Non-recursive process substitution. Since the named group "<sub>" matches
    # non-recursive process substitution, such group *CANNOT* be referenced
    # here. (Doing so would permit such substitutions to be recursively
    # nested.) Instead, match all groups matched by such group excluding
    # non-recursive process substitution.
    local pcre_process_substitution_nonrecursive='`(?:\\[''"$`<]|(?!<<)[^''"$`]|(&quote)|(&dollar)|(&here))*`'

    # Recursively substitutable or expandable syntactic construct. Since
    # arithmetic substitution syntax greedily overlaps that of process
    # substitution syntax, match the former prior to the latter.
    subroutines+='(?<sub>(&dollar)|'${pcre_process_substitution_nonrecursive}')'

    # Shell code, comprising all syntactic constructs obstructing zeshy
    # preprocessing and hence parsing of unquoted "{" and "}" characters.
    # Unlike shell word matching, this does *NOT* include unquoted characters.
    subroutines+='(?<code>(&quote)|(?&sub)|(&here))'

    # Macro indentation. Since *ALL* zeshy scripts are currently guaranteed to
    # be prefixed by a shebang line, all non-shebang and hence macro lines are
    # guaranteed to be prefixed by a newline.
    local pcre_macro_indentation='\R\h*+'

    # Macro name, dynamically constructed from the current set of all declared
    # macro names. By macro design, such names are guaranteed to contain no
    # PCRE-reserved characters and hence require no escaping here. See :macro()
    # and :list.join_to_string_on_char().
    local pcre_macro_name_grouped='('${(j:|:)ZESHY__MACRO_NAMES}')'

    # Block argument (i.e., "{"- and "}"-delimited substring containing
    # arbitrary zeshy code, including block arguments nested at deeper
    # indentation levels) specific to preprocessor macros.
    #
    # Such "{" must be prefixed by at least one horizontal space. Since the
    # PCRE embedding this PCRE guarantees that, avoid matching such space here.
    #
    # Such "}" must be suffixed by at least one horizontal space or the end of
    # such code. To support macros accepting two or more consecutive argument
    # blocks, merely assert this constraint with positive lookahead.
    local pcre_macro_arg_block_prefix='\{(?&spaces)'
    local pcre_macro_arg_block_suffix='(?&blockend)'
    local pcre_macro_arg_block_nested_prefix=${pcre_macro_arg_block_prefix}
    local pcre_macro_arg_block_body='(?:(?!(?&blockend))(?&blockcode))*'
    local pcre_macro_arg_block_body_grouped='('${pcre_macro_arg_block_body}')'
    local pcre_macro_arg_block_nested_body='(?&blockcode)*'
    local pcre_macro_arg_block=${pcre_macro_arg_block_prefix}${pcre_macro_arg_block_body}${pcre_macro_arg_block_suffix}
    local pcre_macro_arg_block_nested=${pcre_macro_arg_block_nested_prefix}${pcre_macro_arg_block_nested_body}${pcre_macro_arg_block_suffix}
    subroutines+=(
        '(?<block>'${pcre_macro_arg_block_nested}')'
        '(?<blockcode>(?&spaces)(?&block)?|\\[''"$`<]|(?!<<)[^''"$`]|(?&code))'
        '(?<blockend>(?&spaces)\}(?:(?&spaces)|\Z))'
    )

    # Block argument prefixed by one or more horizontal whitespace characters
    # followed by zero or more shell words, capturing such block's body.
    local pcre_macro_arg_block_match_prefix='(?&spaces)(?:'${pcre_words_sans_here}'(?&spaces))?'${pcre_macro_arg_block_prefix}
    local pcre_macro_arg_block_match_grouped=${pcre_macro_arg_block_match_prefix}${pcre_macro_arg_block_body_grouped}${pcre_macro_arg_block_suffix}

    # Zero or more arguments of any type.
    local pcre_macro_args_optional='(?:(?&spaces)(?:'${pcre_words_sans_here}'|'${pcre_macro_arg_block}'))*'
    # local pcre_macro_args_optional_grouped='('${pcre_macro_args_optional}')'

    # ..................{ FUNCTION PROTOTYPE                 }..................
    #FIXME: Shift here from ={*-start/*-declare/*-pcre}.

    # ..................{ PCRE                               }..................
    # All subroutines defined above, concatenated in a manner preventing such
    # definitions from matching. See ${subroutines}.
    local pcre_subroutines='(?:'${subroutines}'){0}'

    # PCRE capturing the macro name and all block argument bodies in a
    # preprocessor macro. To distinguish syntactically valid from invalid
    # preprocessor macros, render all syntax following the macro name is
    # optional.
    ZESHY_MACRO_PCRE=${pcre_macro_indentation}${pcre_macro_name_grouped}${pcre_macro_args_optional}${pcre_subroutines}

    # PCRE capturing the next block argument body in a macro argument list.
    ZESHY_MACRO_ARG_BLOCK_BODY_PCRE=${pcre_macro_arg_block_match_grouped}${pcre_subroutines}

    # ..................{ INDICES                            }..................
    #FIXME: All such integers should be declared to be constants.
    #Unfortunately, attempting to do so currently fails, as digest compilation
    #fails to adequately support constant globals. *sigh*

    # For each match group captured by each PCRE global declared above
    # capturing four or more such groups, declare one human-readable integer
    # global expanding to such group's 1-based index. For robustness, declare
    # such globals iteratively rather than manually.
    local match_index_name
    integer match_index

    # Declare indices matched by ${ZESHY_MACRO_PCRE}, ignoring match groups
    # required only for internal use in such PCRE -- including:
    #
    # * Match group 1, capturing prefixing indentation.
    match_index=2
    for match_index_name (
        ZESHY_MACRO_MATCH_INDEX_NAME
    ) {
        integer -g ${match_index_name}=$(( match_index++ ))
        print -r ${match_index_name}': '${(P)match_index_name}
    }
}

# --------------------( WASTELANDS                         )--------------------
    # ZESHY_MACRO_PCRE=${pcre_macro_indentation}${pcre_macro_name}${pcre_macro_args_optional_grouped}${pcre_subroutines}

    #FUXME: Convert ${pcre_macro_arg_block} into a subroutine.

    # Zero or more arguments of any type. Since we match a run of shell words
    # greedily, avoid matching consecutive runs of shell words for efficiency.

    # local pcre_macro_args_optional='(?:(?&spaces)(?:'${pcre_words_sans_here}'(?:(?&spaces)'${pcre_macro_arg_block}')?|'${pcre_macro_arg_block}'))*'

    #FUXME: This may be optimizable by noting that ${pcre_words_sans_here}
    #matches greedily and hence cannot by definition match consecutively.
    # local pcre_macro_args_optional_grouped='((?:(?&spaces)(?:'${pcre_words_sans_here}'|'${pcre_macro_arg_block}'))*)'

# local pcre_macro_args_optional_grouped='((?:(?&spaces)(?:'${pcre_macro_arg_block}'|'${pcre_words_sans_here}'(?&spaces))?'${pcre_macro_arg_block}'))*)'
    # Zero or more runs of whitespace or shells words ending in a shell word.
    # local pcre_words_sans_here_optional='(?:'${pcre_words_sans_here}')?'

    # Argument of any type prefixed by one or more horizontal whitespace
    # characters followed by zero or more shell words.
    # local         pcre_macro_arg=${pcre_macro_arg_block}
    # local pcre_macro_arg_grouped='(?&spaces)'${pcre_words_sans_here_optional}${pcre_macro_arg_block_grouped}

#matched from a previously captured macro argument list
#'(?&spaces)'
    #FUXME: For efficiency, split the "(?&spaces)" prefixing each such PCRE out
    #into this PCRE instead.

    # local pcre_macro_arg_block_prefix='(?&spaces)\{(?&spaces)'
    # local    pcre_macro_arg_block_nested_prefix='\{(?&spaces)'

    # local        pcre_macro_arg_block_suffix='(?&spaces)\}(?:(?&spaces)|\Z)'
    # local pcre_macro_arg_block_nested_suffix='(?&spaces)\}(?&spaces)'

    # local pcre_words_sans_here='(?&spaces)(?:(?&word)|(?&spaces))*(?&word)'

    #FUXME: Define all remaining ${ZESHY_MACRO_MATCH_INDEX_ARG_*} globals.

        # ZESHY_MACRO_MATCH_INDEX_ARG_1
        # ZESHY_MACRO_MATCH_INDEX_ARG_2
        # ZESHY_MACRO_MATCH_INDEX_ARG_3

    # Empty group, typically used to align group indices in a list of
    # "(?|"-driven alternatives.
    # local pcre_empty_group='()'

    # local        pcre_macro_arg_block_nested_body='(?<blockb>(?:(?&spaces)(?&block)?|\\[''"$`<]|(?!<<)[^''"$`]|(?&code))*'
    # local pcre_macro_arg_block_body='(?:(?!'${pcre_macro_arg_block_suffix}')'${pcre_macro_arg_block_nested_body}')'

    # local        pcre_macro_arg_block_body='(?:(?&spaces)(?&block)?|\\[''"$`<]|(?!<<)[^)''"$`]|(?&code))*?'
    # local pcre_macro_arg_block_nested_body=${pcre_macro_arg_block_body}

 # While we would prefer
    # *NOT* to capture such expansion, recursive pattern matching in "libpcre"
    # requires interior back references to the outermost syntactic construct
    # recapitulating such recursion. Such groups are recursion-specific and
    # hence *MUST* be explicitly ignored for all other purposes.
    # Macro indentation. Since *ALL* zeshy scripts are currently guaranteed to
    # be prefixed by a shebang line, all non-shebang and hence macro lines are
    # guaranteed to be prefixed by a newline.
    #
    # Since such indentation is guaranteed to be the first match group, we
    # match such indentation with numbered back references (e.g., "\g1").
    # local pcre_macro_indentation_grouped='(\R\h*+)'

    # Block argument (i.e., "{"- and "}"-delimited substring containing
    # arbitrary zeshy code, including block arguments nested at deeper
    # indentation levels) specific to preprocessor macros. Since such macros
    # are currently matched solely by prefixing indentation regardless of zsh
    # context (i.e., ignoring string literals, variable expansions, and other
    # syntactic constructs), the "}" delimiting such argument is also matched
    # solely by the same prefixing indentation.
    #
    # Such "}" must be suffixed by at least one horizontal space or the end of
    # such code. To support macros accepting two or more consecutive argument
    # blocks, merely assert this constraint with positive lookahead.
    # local pcre_macro_arg_block_prefix='(?&spaces)\{(?&spaces)'
    # local pcre_macro_arg_block_body='.*?'
    # local pcre_macro_arg_block_body_grouped='('${pcre_macro_arg_block_body}')'
    # local pcre_macro_arg_block_suffix='\g1\}(?:(?&spaces)|\Z)'
    # local         pcre_macro_arg_block=${pcre_macro_arg_block_prefix}${pcre_macro_arg_block_body}${pcre_macro_arg_block_suffix}
    # local pcre_macro_arg_block_grouped=${pcre_macro_arg_block_prefix}${pcre_macro_arg_block_body_grouped}${pcre_macro_arg_block_suffix_ahead}

    # local pcre_macro_arg_block_suffix='\g1\}(?:(?&spaces)|\Z)'
    # local pcre_macro_arg_block_suffix_ahead='\g1\}(?=(?&spaces)|\Z)'
    # local         pcre_macro_arg_block=${pcre_macro_arg_block_prefix}${pcre_macro_arg_block_body}${pcre_macro_arg_block_suffix}
    # local pcre_macro_arg_block_grouped=${pcre_macro_arg_block_prefix}${pcre_macro_arg_block_body_grouped}${pcre_macro_arg_block_suffix_ahead}

#         ZESHY_MACRO_MATCH_INDEX_ARGS_END
# ${pcre_empty_group}
    # local pcre_macro_args_optional_grouped='(?:(?:'${pcre_words}'|'${pcre_macro_arg_block_grouped}')((?:'${pcre_words}'|'${pcre_macro_arg_block_grouped}')*))?'

        # ZESHY_MACRO_MATCH_INDEX_ARG_1
        # ZESHY_MACRO_MATCH_INDEX_ARGS_2_OR_MORE

    #FUXME: Not quote right. We require spaces after a macro name *AND* before
    #a "{", but we can only match such spaces once. How?

    # '(?:'${pcre_words}'|'${pcre_macro_arg_block_grouped}')*'
    # '(?:'${pcre_macro_args_optional_grouped}')?'${pcre_subroutines}
    # ZESHY_MACRO_PCRE=${pcre_macro_indentation_grouped}${pcre_macro_name}'(?:'${pcre_spaces}${pcre_macro_args_grouped}')?'${pcre_subroutines}

    # One or more runs of whitespace or shells words both initiating and
    # terminating in a shell word.
    #
    # The former condition is purely an optimization concern. The latter
    # condition, however, is not; it prevents this PCRE from matching
    # substrings ending in a run of whitespace, ensuring such whitespace will

    #FUXME: Such subroutines are embedded only in the following PCRE fragment:
    #    (?=\$)(?:(?&var)|(?&math)|(?&proc))
    #Hence, simplify this by refactoring this and the other subroutines into
    #PCREs and embedding them directly in a new subroutine <dollar>.

    #FUXME: Insufficient, as it currently fails to match multiple adjacent line
    #continuations. Hmmm.

    # subroutines+='(?<spaces>(?:\\\R)?(?:\h++(?:\\\R)?)+)'

    #FUXME: Such "}" must be matched as prefixed by a newline (\R) followed by
    #the same exact horizontal whitespace as the initial macro. We currently
    #match this as named group "(?&indent)" below. Such group *MUST* contain
    #such newline.

# (?=\$)(?:(?&var)|(?&math)|(?&proc))

    #FUXME: Match the same embedded constructs as above.
    #FUXME: Perhaps simpler to replicate the definition of
    #${pcre_process_sub_recursive} here, augmented with a negative lookahead
    #assertion to prevent matching of an unescaped "`". Ignore for now;
    #somewhat too much complexity, here!

    # local pcre_process_substitution_nonrecursive='`(?:\\[''"$`<]|(?!<<)[^''"$`]|(&squote)|(&dquote)|(&here)|(?=\$)(?:(?&var)|(?&math)|(?&proc)))*`'

    # Unquoted shell word.
    # subroutines+='(?<uword>[^\s'${char_class_reserved}']++)'

    # Character class matching shell-reserved characters.
    # local char_class_reserved='''"$<>{}|`'
    # local pcre_word_unquoted_inescapable='[^\s\\'${char_class_reserved}']++'

    #FUXME: For each named subroutine below, we need to directly embed the
    #definition of such subroutine somewhere in ${ZESHY_MACRO_PCRE} --
    #ideally, before the first call to such subroutine in such PCRE. (Yes, this
    #is somewhat annoying.)

    # Suffix suffixing all subroutines defined below, preventing such
    # subroutines from matching. Since such subroutines remain callable, To ensure this:
    #
    # * Suffix each subroutine definition by a suffix guaranteeing such
    #   definition to never match.

    # local pcre_subroutine_suffix='{0}'

    # As in Perl (but not Ruby), "libpcre" subroutine calls (e.g.,
    # "(?&soma)") do *NOT* capture the substring matched by such call if any.
    # As in both Perl and Ruby, subroutine definitions (e.g.,
    # "(?<soma>All the advantages of Christianity and alcohol; none of their defects.)"
    # capture the substring matched by such definition.
    #
    # While non-orthogonal, such behaviour improves efficiency (by *NOT*
    # forcing all subroutine calls to inefficiently capture) and simplifies the
    # subsequent definitions of numbered group indices (by substantially
    # reducing the number of such groups). While these are good things, the
    # fact that subroutine definitions unconditionally capture is somewhat
    # noxious. In most cases, we would prefer such definitions to *NOT*
    # capture. Unfortunately, we have little alternative but to ignore the
    # groups captured by such matches.
    #
    # To facilitate this, increment ${match_count_ignore} (an integer local
    # counting the total number of ignorable match groups) after every
    # subroutine defined below.

    #FUXME: We had a reasonably clever idea. Will it work? Only CLI testing
    #will demonstrate the feasibility of the idea. If it *DOES* work, that'd be
    #reasonably awesome. So, what's the idea? Since subroutine definitions
    #implicitly capture *AND* since that's bad, shift all such definitions past
    #the valid end of the PCRE (e.g., "$") into a region guaranteed *NOT* to
    #match, reserved for only defining subroutines. Such subroutines would
    #never be matched as definitions but only called, avoiding all such
    #capturing issues.
    #FUXME: Sweet. Both of the following work as advertised:
    #
    #    >>> :is yum =~ '(?&yam)(?<yam>yum){0}' :si and print ok
    #    ok
    #    >>> :is yum =~ '(?<yam>yum){0}(?&yam)' :si and print ok
    #    ok
    #
    #Subroutine definitions suffixed by "{0}" are thus guaranteed to never
    #match and hence capture. Fairly awesome!

    #FUXME: Suffix all subroutines defined below by such PCRE fragment.

    # # Declare indices matched by ${ZESHY_MACRO_PCRE}.
    # match_index=1

    # #FUXME: Correct names.
    # # Declare indices preceding the first ignorable match group.
    # for match_index_name (
    #     ZESHY_CALLABLE_PROTOTYPE_MATCH_INDEX_ATTRS
    #     ZESHY_CALLABLE_PROTOTYPE_MATCH_INDEX_NAME
    # ) {
    #     integer -g ${match_index_name}=$(( match_index++ ))
    #     print -r ${match_index_name}': '${(P)match_index_name}
    # }

    # # Increment the index of the next ignorable match group past all
    # # intermediate match groups.
    # match_index+=${match_count_ignore}

    # #FUXME: Declare subsequent groups.

    # integer match_count_ignore=0
    # match_count_ignore+=1

 # Right? Wrong. There appears to be a bug in either
    #"libpcre" or zsh (...guess which, presumably?) forcing
    # local pcre_spaces='(?:\h|\\\R)++'

 # all macros (including names and block arguments) in
    # arbitrary code.

    #FUXME: Use of named references complicates match indexing. I beliewe we
    #can circumvent this, however, by leveraging named subroutines: that is,
    #declaring *ALL* named references at the very end of the regex.

    # # Argument of any type.
    # local pcre_macro_arg='(?:'${pcre_words}'|'${pcre_macro_arg_block}')'

    # # One or more arguments of any type.
    # local pcre_macro_args=${pcre_macro_arg}'+'

    #FUXME: This still used? Probably... not.

    # One or more arbitrary characters excluding shell-reserved characters.
    # local pcre_chars_unreserved='(?:\\\R|[^\v'${char_class_ureserved}'])++'

    # ZESHY__MACRO_NAMES_PCRE
    # ZESHY__MACRO_NAMES_PCRE=${}

    #FUXME: Excise me.

    # One or more whitespace-delimited shells words.
    # local pcre_words='(?:'${pcre_spaces}'|'${pcre_word}')+'

    #FUXME: Match only whitespace delimiting such words -- *NOT* prefixing such
    #words. This should simplify matching of block arguments a bit.
    # local pcre_words='(?:(?:'${pcre_word}'(?:\\\R)?\h++(?:\\\R)?))*(?&word))?'

    # local pcre_macro_arg_block_prefix='(?<=[ \t]|\\\v)\{'

    #FUXME: This is actually used. ${pcre_spaces}, however, doesn't really
    #appear to be. Excise the latter and shift such documentation here.
    # local pcre_spaces='(?:\h|\\\R)+'

    # local pcre_macro_arg_block_prefix='(?:\h(?:\\\R)?|(?:\\\R)?\h)\{'

    #FUXME: Excise. This is wrong, anyway. Matching line continuations is
    #*USELESS*, if one considers. We don't care about line continuations. They
    #signify 

    # local pcre_macro_arg_block_prefix='(?<=[ \t]|\\\v)\{'

 # Hence, we
    #really can't match this outside of the full PCRE. *shrug* 
# '(?:'${pcre_macro_arg}')*(?&arg)'

    # Customary argument for zsh commands, comprising one or more of the prior
    # syntactic constructs.
    # local pcre_macro_arg_command='(&word)+'

# '(?<word>(&uword)|(&squote)|(&dquote)|(?&sub))'

# ${pcre_chars_unreserved}'|'${pcre_quotes_single}'|'${pcre_quotes_double}'|'${pcre_substitutable}'
    #FUXME: Correct me. Then just 
    # local pcre_code_sans_process_sub_nonrecursive='(?<codet>))'

    #FUXME: Erhm. Excise?
    # local pcre_codes='(?:\\[''")$`<]|(?!<<)[^''")$`]|(?&code))*'

    #FUXME: A non-recursive version (e.g., matching "$ughugh") needs to be
    #defined as well, and a new umbrella PCRE matching both recursive and non-
    #recursive variable expansions assigned the overarching group "<var>".

    # local pcre_quotes_single_grouped="'((?:[^']|'')*)'"
    # local pcre_quotes_double_grouped='"((?:\\"|[^"])*)"'

    #FUXME: Also match process substitutions (of both ilk).
    #
    #Since zsh appears to search for terminating '"' delimiters in a prior
    #phase to that of variable expansions, we do *NOT* need to match variable
    #expansion here. (Isn't that nice?)

    #FUXME: Embedding ${pcre_quotes_single} here clearly isn't quite right.
    #While we *DO* want to match single quotes, we want to do so in a
    #"(?qsingle)" manner. Moreover, we want to match considerably more than
    #simply that: double quotes, here-doc strings, and so forth. *sigh*

    #FUXME: Unify with ${pcre_word}, perhaps?
    #FUXME: Right. ${pcre_code} should subsume ${pcre_word}, adding support for
    #here-documents and -strings. (Anything else?)

    # Here-document. Unfortunately, matching all possible here-document strings
    # is infeasible within the purview of a pure PCRE. Matching here-document
    # delimiters embedding escaped characters (e.g., '<<"mother\"destroyer"')
    # requires unescaping such characters -- a simple operation that, by
    # definition, exceeds the purview of pure PCREs.
    #
    # Hence, match only the proper subset of here-document strings with
    # delimiters containing no escaped characters. Since few to no real-world
    # here-document strings (certainly, none zeshy itself leverages) require
    # delimiters containing escaped characters, this is moderately ignorable.
    # local pcre_here_doc_prefix='<<-?\s*+(?|'${pcre_quotes_single_inescapable_grouped}'|'${pcre_quotes_double_inescapable_grouped}'|'${pcre_word_unquoted_inescapable_grouped}')\R'
    # local pcre_here_doc_body='.*?'
    # local pcre_here_doc_suffix='\R(?-1)'
    # local pcre_here_doc=${pcre_here_doc_prefix}${pcre_here_doc_body}${pcre_here_doc_suffix}

    # Here-string.
    # local pcre_here_string='<<<\s*+(?&word)'

    #FUXME: Excise the above? Shift documentation here!

    #FUXME: No longer required, seemingly. Now that we've merged such matching
    #into ${pcre_chars_unreserved}, excise such PCRE.

 # (Since this PCRE is principally used to match here
    #FUXME: Minor issue. If the captured here-document word embeds quote
    #escapes (e.g., "ugh\"umu"), we have no sane means of matching the
    #corresponding terminator (e.g., in the prior example, we would need to
    #match 'ugh"umu' rather than the literally captured string). We're inclined
    #to ignore this, at the moment. (Indeed, fixing this may be infeasible!)
    #FUXME: Honestly, this is rather difficult to implement correctly. Given
    #such difficulty, we're inclined to instead 

    # cannot 
    #
    # we have no sane means of
    # matching the
    #corresponding terminator (e.g., in the prior example, we would need to
    #match 'ugh"umu' rather than the literally captured string).
    #
    # Why? Character escapes.  We're inclined
    #to ignore this, at the moment.

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with ={*-soil/*-declare/*-pcre}.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    #FUXME: Fairly sure we can simplify this quite a bit. We don't *NEED* to
    #match individual arguments on the initial match of the full macro string.
    #In fact, we're fairly sure we don't *EVER* need to match individual
    #arguments. Hence, we can probably generalize ${pcre_macro_arg_command} above
    #with whitespace as follows:
    #
    #    local pcre_macro_arg_command='(?:'${pcre_spaces}'|'${pcre_sans_quotes_spaces}'|'${pcre_quotes_single}'|'${pcre_quotes_double}'|'${pcre_var_expansion}')+'
    #
    #Of course, that immediately suggests we combine ${pcre_spaces} and
    #${pcre_sans_quotes_spaces} -- probably by omitting "\s" from the
    #definition of the latter. (In any case, it's all for the morrow!)

    # "$"- or "`"-prefixed embedded substitutable.
    # local pcre_substitutable_embedded='(?=[$`])(?&sub)'

# (?>[$`])

    #FUXME: O.K.; we're not going to be able to substitute this below as is.
    #The reason why is the "[^$]". We're afraid that will need to be extended
    #on a case-by-case basis. After doing so, we'll probably want to excise
    #this local entirely.

    # Any character excluding "$" *OR* a "$"-prefixed substitutable.
    # local pcre_char_or_substitutable='\\$|[^$]|(?&sub)'

    #FUXME: Also match recursively nestable process substitution.

    # While we prefer *NOT* to explicitly
    # match arithmetic substitutions, matching only the latter would match one ")" delimiter
    # in arithmetic substitutions as terminating such substitutions -- which,
    # clearly, is not the case.

    #FUXME: For maintainability, we probably want to use embedded named
    #references everywhere we currently use zsh variable embedding below.

    # Arbitrary string of one or more characters excluding characters reserved
    # for strict zsh argument parsing. This includes:
    #
    # * Dollar signs.
    # * Single and double quotes.
    # * Whitespace.
    # local pcre_sans_quotes_spaces='[^\s''"$]++'

    # local pcre_macro_arg_command='(?:'${pcre_sans_quotes_spaces}'|'${pcre_quotes_single}'|'${pcre_quotes_double}'|'${pcre_var_expansion}')+'

    #FUXME: Interestingly, this must be constructed at runtime, implying this
    #entire anonymous function should be converted into a named function
    #::preprocessor_pcres.make() called on *EACH* call to :macro(). Hmm. For
    #efficiency, perhaps:
    #
    #* :macro() should simply set ${ZESHY_MACRO_PCRE} to the empty string.
    #* :code.preprocess() should call ::preprocessor_pcres.make() if
    #  ${ZESHY_MACRO_PCRE} is the empty string.
    #
    #This permits multiple macros to be defined by a single parcel without
    #triggering multiple redundant PCRE compilations, which seems sensible.
    #FUXME: For usability, define a function ::preprocessor_pcres.clear() in
    #this parcel clearing such PCRE globals.

    # One or more such arguments.
    # Unquoted word in the strict zsh sense, comprising one or more characters
    # excluding whitespace and shell-reserved characters.
    # local pcre_word_unquoted='[^]'

    #FUXME: We *DO* need to match variables as well. Here's why:
    #
    #    >>> print ${:-
    #    ... :func
    #    ... }
    #
    #    :func
    #
    #Yes, that actually works. It's a hell of an edge case, but edge case
    #nonetheless. For robustness, we *MUST* account for all such cases.

    #FUXME: Minor issue. If the captured here-document word embeds quote
    #escapes (e.g., "ugh\"umu"), we have no sane means of matching the
    #corresponding terminator (e.g., in the prior example, we would need to
    #match 'ugh"umu' rather than the literally captured string). We're inclined
    #to ignore this, at the moment. (Indeed, fixing this may be infeasible!)
    #FUXME: Honestly, this is rather difficult to implement correctly. Given
    #such difficulty, we're inclined to instead 

    # local pcre_here_doc_prefix='<<-?\s*+(?|'${ZESHY_SYNTAX_QUOTES_SINGLE_GROUPED_PCRE}'|'${ZESHY_SYNTAX_QUOTES_DOUBLE_GROUPED_PCRE}'|(\S++)\n'
    # local pcre_here_doc_body='.*?'
    # local pcre_here_doc_suffix='\g{-1}'
    # local pcre_here_doc=${pcre_here_doc_prefix}${pcre_here_doc_body}${pcre_here_doc_suffix}

#FUXME: Document me.
# # PCRE globals defined below.
# typeset -g\
#     ZESHY_SYNTAX_QUOTES_SINGLE_PCRE\
#     ZESHY_SYNTAX_QUOTES_DOUBLE_PCRE\
#     ZESHY_SYNTAX_QUOTES_SINGLE_GROUPED_PCRE\
#     ZESHY_SYNTAX_QUOTES_DOUBLE_GROUPED_PCRE
# 
# # PCREs matching single-quoted strings in zsh format and hence supporting
# # escaped single quotes (i.e., "''").
#          ZESHY_SYNTAX_QUOTES_SINGLE_PCRE="'(?:[^']|'')*'"
# ZESHY_SYNTAX_QUOTES_SINGLE_GROUPED_PCRE="'((?:[^']|'')*)'"
# 
# # Double-quoted string in zsh format and hence supporting escaped double
# # quotes (i.e., '\"'). Unlike the prior PCRE, character class [^"] also
# # matches "\" and hence must be matched *AFTER* matching the latter.
#          ZESHY_SYNTAX_QUOTES_DOUBLE_PCRE='"(?:\\"|[^"])*"'
# ZESHY_SYNTAX_QUOTES_DOUBLE_GROUPED_PCRE='"((?:\\"|[^"])*)"'

    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # Synchronize with ={*-soil/*-declare/*-pcre}.
    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
