#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'/---'
Configure *CLI aliases* (i.e., aliases expanded only when run interactively from
the command line).

== See Also ==

* print_aliases_cli(), listing all currently defined CLI aliases --
  abbreviations, substitutions, or otherwise.
* alias_cli_abbreviation(), for further details on interactive abbreviations.
* alias_cli_substitution(), for further details on interactive substitutions.
/---

# ....................{ ABBREVIATIONS                      }....................
declare_global_with_stdin map ZESHY_ALIAS_CLI_ABBREVIATIONS <<'/---'
Map alias abbreviation names to the *runnables* (i.e., external commands or
`zsh` aliases, builtins, or functions) such aliases expand to when run
interactively from the command line. Since such aliases abbreviate rather than
replace existing runnables, abbreviation names _must_ differ from the runnable
names they expand to (e.g., `lsd 'ls -d'` rather than `ls 'ls -d'`).

== Comparison to CLI Substitution Aliases ==

By contrast, the CLI substitution aliases listed by
${ZESHY_ALIAS_CLI_SUBSTITUTIONS} _always_ replace existing runnables.

CLI abbreviation aliases are ideal for abbreviating the typically longer human-
readable function names called by shell scripts to the typically shorter human-
typeable alias names expanded at the command line (e.g., abbreviating
list_path_recursive_verbosely_with_options() to simply `lr`).

== Comparison to Normal zsh Aliases ==

For typical uses (e.g., abbreviating frequently typed commands at the command
line), most users will probably find CLI aliases to be safer than and hence
preferable to normal `zsh` aliases. The latter never change, even when the
underlying runnables such aliases expand to are renamed, removed, or otherwise
rendered unavailable. CLI aliases, however, dynamically adapt on each `zeshy`
digest recompilation to reflect current system and user state -- including:

* Whether such alias is expanded directly from the command line. If such alias
  is expanded from any other context (e.g., a non-interactive shell script) and
  such alias is:
** An abbreviation, an exception will be thrown.
** A substitution, the runnable being substituted will be silently run instead.
* Whether such alias abbreviates or substitutes an existing runnable. If:
** Such runnable exists and such alias is an abbreviation, an exception will be
   thrown on the next recompilation of `zeshy`\'s user digest (since
   abbreviations never replace existing runnables).
** Such runnable does _not_ exist and such alias is a substitution, an exception
   will be thrown on the next recompilation of `zeshy`\'s user digest (since
   substitutions always replace existing runnables).

For example:

.CLI Abbreviation Aliases vs. Normal `zsh` Aliases
==========================================
[source]
------------------------------------------
# A normal zsh alias, always expanding "lr" to "ls -lR".
>>> alias lr="ls -lR"

# A CLI abbreviation alias, only expanding "lr" to "ls -lR" if:
#
# * Run directly from the command line.
# * "lr" is not already an existing runnable. If "lr" is an existing
#   runnable, `zeshy` iteratively tries the following alias names until
#   either finding a name not already taken by an existing runnable or
#   exhausting all available choices, in which case an exception is thrown:
#   "lsr", "lsre", "lsrec", "lsrecu", "lsrecur", "lsrecurs", "lsrecurse".
>>> alias_cli_abbreviation {l}s{r}ecurse="ls -lR"
------------------------------------------
==========================================

== CLI Alias Names ==

The actual name `zeshy` assigns each CLI alias dynamically depends on current
system and user state, including:

* Which directories are in the current user's ${PATH}.
* Which commands are currently installed to such directories.
* Which `zsh` aliases and functions are currently defined.

=== Embedded CLI Abbreviation Alias Names ===

CLI abbreviation and substitution aliases both extend normal `zsh` aliases by
permitting `{`- and `}`-delimited substrings to be embedded within alias names.
Such substrings denote the preferred CLI abbreviation name for such alias. If
such abbreviation name has not already been taken by an existing runnable on the
current system, `zeshy` abbreviates such alias to such name; else, `zeshy`
incrementally lengthens such name until finding the shortest abbreviation name
not already taken by an existing runnable on the current system. (Specifically,
`zeshy` iteratively shifts the leftmost `}` in such name to the right one
character and tries again until finding a name not already an existing runnable
_or_ shifting the leftmost `}` past the `=`, in which case an error is printed.)

Embedding abbreviation names thus improves portability and safety. In general,
_all_ CLI abbreviation and substitution alias names should contain at least one
`{`- and `}`-delimited substring: e.g.,

.Interactive Abbreviation Search Algorithm
==========================================
[source]
------------------------------------------
# The specified key-value pair below induces the following search:
#
# * First, try "md". If "md" is not already an existing runnable name, this is
#   equivalent to "alias_cli md=make_dir_if_not_found_with_options".
# * Else, try "mkd". If "mkd" is not already an existing runnable name, this is
#   equivalent to "alias_cli mkd=make_dir_if_not_found_with_options".
# * Else, try "mkdi". If "mkdi" is not already an existing runnable name, this
#   is equivalent to "alias mkdi=make_dir_if_not_found_with_options".
# * Else, repeat until eventually trying "mkdirparents". Assuming that also is
#   an existing runnable name (however unlikely that may be), print an error.
#
# In any case, `zeshy` continues to the next key-value pair.
>>> ZESHY_ALIAS_CLI_ABBREVIATIONS=(
...            ...
...     {m}k{d}irparents "make_dir_if_not_found_with_options"
...            ...
... )
------------------------------------------
==========================================
/---
ZESHY_ALIAS_CLI_ABBREVIATIONS=(
    # Core.
    {c}h{m}od{r}ecursive  'change_path_permissions_recursive_with_options'
    {c}h{o}wn{r}ecursive  'change_path_ownership_recursive_with_options'
    {c}p{r}ecursive       'copy_path_recursive_with_options'
    {lns}ymbolic          'make_link_symbolic_with_options'
    {r}m{r}ecursive       'remove_path_recursive_with_options'

    # Calendar.
    {cal}endar{q}uarter 'print_calendar_quarter'
    {cal}endar{y}ear    'print_calendar_year'

    # Compressed archives.
    {ar}chive{e}xtract 'extract_archive'
    {ar}chive{l}ist    'print_archive'
    {ar}chive{m}ake    'make_archive'

    #FIXME: Actually, this doesn't quite work. We'll need to wire such aliases
    #with the same completions as such builtins. Investigate.
    # Directory stack. (Use "zsh" primitives rather than zeshy functions, for
    # the moment; try hitting <Tab> after typing either to see why.)
    {c}hange{b}ackward 'rotate_dir_stack_backward'
    {c}hange{f}orward  'rotate_dir_stack_forward'
#   {c}hange{b}ackward 'cd -'
#   {c}hange{f}orward  'cd +'

    # File counters.
    {wcl}ine{r}ecursive 'get_file_text_line_count_recursive'

    # File grepping.
    {g}rep{i}nsensitive            'grep_path_caseless_with_options'
    {g}rep{r}ecursive              'grep_path_recursive_with_options'
    {g}rep{r}ecursive{i}nsensitive 'grep_path_recursive_caseless_with_options'

    #FIXME: Add a new entry resembling
    #"{l}s{d}irectory 'list_dir_verbosely_with_options'". Naturally, we'll need
    #define list_dir_verbosely_with_options(). Such function should pass option
    #"-d" to "ls", forcing directories to be listed as is rather than the
    #contents of such directories listed. This is principally useful for
    #recursively listing all directories matching a glob: e.g.,
    #
    #    >>> lsd **/*tor*(/)
    #    p2p/share/tor
    #    p2p/share/i2p/bridge/i2p2tor

    # Help.
    {h}elp 'print_zeshy_help'

    # Kernel modules.
    {mod}ule{p}rint  'print_kernel_module'
    {mod}ule{l}oad   'load_kernel_module'
    {mod}ule{u}nload 'unload_kernel_module'

    # Libraries.
    {l}s{b}inary{e}xecutable 'print_binary_executable'

    #FIXME: Ugh! Reenable usage of such zeshy functions when working.
    # Mounts.
    {mo}unt{u}n 'command umount'
    # {umo}unt  'unmount_dir_statically'

    #FIXME: Bit silly: "lr" and "llr" currently show (seemingly) identical
    #output. If this is intentional, "llr" should probably be excised in favor
    #of simply "lr". If this is a bug, this should certainly be corrected.

    # Path listing.
    {l}s{l}ong            'list_path_verbosely_with_options'
    {l}s{l}ong{r}ecursive 'list_path_recursive_verbosely_with_options'
    {l}s{r}ecursive       'list_path_recursive_with_options'
    {l}s{d}irs{r}ecursive ':list_dir_dirs_recursive_sorted_by_mtime_descending'

    # Shell.
    {e}xit{z}sh      'exit_zsh'
    {re}start{z}eshy 'restart_zeshy'
    {re}startz{s}h   'restart_zsh'

    #FIXME: Expand to proper zeshy functions.
    {d}ate 'date'
    {k}ill{a}ll    'killall'
    {k}ill{a}ll{9} 'killall -9'
    {f}g   'fg'
    {j}obs 'jobs'
)

# ....................{ SUBSTITUTIONS                      }....................
# See the section above for further details on "="-delimited alias syntax.

#FIXME: For safety, excise this map and shift *ALL* elements in such map to
#${ZESHY_ALIAS_CLI_SUBSTITUTIONS_IF_RUNNABLE}. While such runnables should
#reliably exist, throwing exceptions when this is not the case is simply far too
#fragile. Strictness is unhelpful, here.

declare_global_with_stdin map ZESHY_ALIAS_CLI_SUBSTITUTIONS <<'/---'
Map alias substitution names to the *runnables* (i.e., external commands or
`zsh` aliases, builtins, or functions) such aliases expand to when run
interactively from the command line. Since such aliases always replace existing
runnables, substitution names _must_ be identical to the runnable names they
expand to (e.g., `ls 'ls -d'` rather than `lsd 'ls -d'`). Such aliases are ideal
for hiding, shadowing, or otherwise wrapping external runnables with `zeshy`-
enabled functionality (e.g., replacing `ls` with list_path_with_options()).

By contrast, the CLI abbreviation aliases listed by
${ZESHY_ALIAS_CLI_ABBREVIATIONS} _never_ replace existing runnables. See such
map for further details on usage, syntax, and motivation.
/---
ZESHY_ALIAS_CLI_SUBSTITUTIONS=(
    #FIXME: Clearly, any function called below *MUST* be suffixed by
    #_with_options() and implemented accordingly. We're about halfway there, I'd
    #say. Not a pleasant chore, but it really must be done for `zeshy` to be
    #widely applicable. Start with the heavy hitters: "grep", "cat", and so on.
    #"mount" will probably be an absolute nightmare, so save for last! :)

    # Unabbreviated substitutions.
    cd 'change_dir_with_options'
    du 'print_path_size_sorted_with_options'

    # Abbreviated substitutions.
    {ca}t     'print_file_text'
    {c}h{m}od 'change_path_permissions_with_options'
    {c}h{o}wn 'change_path_ownership_with_options'
    {c}p      'copy_path_with_options'
    {di}rs    'print_dir_stack'
    {fr}ee    'print_memory_use'
    {g}rep    'grep_path_with_options'
    {l}s      'list_path_with_options'
    {l}s{m}od 'print_kernel_modules'
    {m}k{d}ir 'make_dir_if_not_found_with_options'
    {m}v      'move_path_with_options'
    {r}m      'remove_path_with_options'
    {r}m{d}ir 'remove_dir_empty_with_options'

    #FIXME: Ugh! Reenable usage of such zeshy functions when working.
    {mo}unt     'command mount'
    # {mo}unt   'mount_nicely'

    #FIXME: Expand to proper zeshy functions.
    df 'command df --human-readable --sync'
)

declare_global_with_stdin map ZESHY_ALIAS_CLI_SUBSTITUTIONS_IF_RUNNABLE <<'/---'
Map alias substitution names to the *runnables* (i.e., external commands or
`zsh` aliases, builtins, or functions) such aliases expand to when run
interactively from the command line if such runnables exist or silently ignore
such aliases otherwise. See ${ZESHY_ALIAS_CLI_ABBREVIATIONS} for further
details.
/---
ZESHY_ALIAS_CLI_SUBSTITUTIONS_IF_RUNNABLE=(
    #FIXME: While this works, it also deactivates default "man" completions.
    #Before reenabling this, discover how to reactivate such completions.
    #FIXME: O.K.; it should be as simple as the following:
    #    >>> compdef _man ${alias_name}
    #So, how should we handle this? It'd be *GREAT* if this could *ALL* be
    #implicitly automated. Specifically:
    #
    #* If our low-level alias declaration function discovers a function with
    #  name "_${alias_expansion}", the former should run
    #  "compdef _${alias_expansion} ${alias_name}" to enable identical
    #  completions for such alias.
    #* Such call to compdef() will probably, depending on how such function
    #  is internally implemented, need to be performed on *EVERY* zeshy
    #  startup. This in turns implies we need a new map -- say,
    #  ${ZESHY_STARTUP_COMPLETION_FUNCTION_NAME_TO_RUNNABLE_NAME} -- from
    #  completion function names to the runnable names such completions should
    #  be defined for at startup.
    #
    #Fairly trivial, hopefully. I'm happy to have this reasonably locked down...
#   {ma}n       'man'

    #FIXME: Shift to new parcel @{src/if_pathable/info/info}.
    # Abbreviated substitutions.
    {i}nfo      'info'                         # GNU info reader.

    # Superuser commands. Since such commands are typically under "/sbin", such
    # aliases depend on the current ${PATH} containing such path.
    {fs}ck    'check_disk'
)

declare_global_with_stdin list ZESHY_CLI_SUBSTITUTION_NAMES_IF_RUNNABLE_RUN_DISOWNED <<'/---'
List of *runnables* (i.e., external commands or `zsh` aliases, builtins, or
functions) to be *disowned* (i.e., _not_ terminated on termination of their
parent shell) when run from directly from the command line, ignoring nonextant
runnables. Since CLI commands should be terminated on termination of their
parent shell, consider listing only GUI and headless daemon commands here. See
See ${ZESHY_ALIAS_CLI_ABBREVIATIONS} for further details: e.g.,

.${ZESHY_CLI_SUBSTITUTION_NAMES_IF_RUNNABLE_RUN_DISOWNED}
==========================================
[source]
------------------------------------------
# The specified list element below induces a search as described under
# ${ZESHY_ALIAS_CLI_ABBREVIATIONS}. Assuming "calibre" is installed in the
# current user's ${PATH} and "cali" is *NOT* an existing runnable, this is
# equivalent to:
#
#     alias_cli_substitution calibre="run_code_disowned calibre"
#     alias_cli_abbreviation cali="run_code_disowned calibre"
#
# If "calibre" is *NOT* installed, the element is ignored. If "cali" is an
# existing runnable, `zeshy` iteratively attempts to abbreviate such runnable
# to "calib" and "calibr" in that order.
#
# In any case, `zeshy` continues to the next list element.
>>> ZESHY_CLI_SUBSTITUTION_NAMES_IF_RUNNABLE_RUN_DISOWNED=(
...        ...
...     {cali}bre
...        ...
... )
------------------------------------------
==========================================
/---
ZESHY_CLI_SUBSTITUTION_NAMES_IF_RUNNABLE_RUN_DISOWNED=(
    {abi}word                            # AbiWord processor.
    {acr}oread                           # Adobe Acrobat.
    {ama}rok                             # Amarok music player.
    {aud}acity                           # Audacity audio editor.
    {ca}li{b}re                          # Calibre eBook manager.
    {ch}romium                           # Google Chromium browser.
    {ch}rome                             # Google Chrome browser.
    {dvds}tyler                          # DVDStyler DVD creator.
    dia                                  # GNOME Dia.
    {ecl}ipse                            # Eclipse IDE.
    {ema}cs                              # GNU Emacs IDE.
    {fbr}eader                           # FreeBookReader document reader.
    {f}ire{f}ox                          # Mozilla Firefox browser.
    {f}ile{li}ght                        # KDE Filelight.
    {fo}nt{fo}rge                        # FontForge.
    {gco}lor2                            # GNOME color picker.
    {g}ee{q}ie                           # Geeqie image viewer.
    {gim}p                               # GNU Image Manipulation Program.
    {gl}x{g}ears                         # GLXGears OpenGL tester.
    {gpa}rted                            # GNOME Partition Editor.
    {gpi}ck                              # GNOME color picker.
    {gth}umb                             # GNOME Thumbnail viewer.
    {gv}im                               # Graphical ViM IDE.
    #FIXME: For obvious reasons, "imule" should only ever be run as follows:
    #    >>> :run_command_with_priority_lowest imule &!
    #Hence, replace this with a new parcel @{if_pathable/imule/imule},
    #implemented in the expected manner.
    {imu}le                              # I2P iMule client/server.
    {ink}scape                           # Inkscape vector graphics editor.
    kile                                 # KDE Integrated LaTEX Environment.
    {kon}tact                            # KDE Kontact e-mail reader.
    {kto}rrent                           # KDE KTorrent.
    {l}ibre{o}ffice                      # LibreOffice suite.
    {li}nks                              # Links browser.
    lyx                                  # LyX editor.
    {mp}layer2                           # Media Player.
    {n}et{b}eans                         # NetBeans IDE.
    {ok}ular                             # KDE Okular document reader.
    {oo}ffice                            # Apache OpenOffice suite.
    {pdfs}am                             # PDF Split and Merge utility.
    {pi}d{g}en                           # Pidgin Chat Client.
    {p}lay{o}n{l}inux                    # PlayOnLinux WINE frontend.
    {pu}tty                              # PuTTY SSH client.
    {scr}ibus                            # Scribus document creator.
    {smp}layer                           # Simple (?) Media Player.
    start-{t}or-{b}rowser                # Tor Browser Bundle.
    {thu}nderbird                        # Mozilla Thunderbird e-mail reader.
    {ump}layer                           # Universal Media Player.
    {une}tbootin                         # Universal Netboot Installer.
    vlc                                  # VLC media player.
    x64                                  # VICE Commodore 64 emulator.
    x64sc                                # VICE Commodore 64 emulator (accurate).
    {zat}hura                            # Zathura document reader.
)
