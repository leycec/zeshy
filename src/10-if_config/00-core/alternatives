#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'/---'
Configure *command alternatives* (i.e., lists of all possible external commands
providing similar functionality, listed in descending order of preference).

== Motivation ==

Many `zeshy` functions require functionality provided only by external commands
(i.e., either _not_ provided by `zsh` itself or _not_ practically implementable
in `zsh`). In most cases, there exist multiple commands independently
reimplementing such functionality -- any one of which would satisfy the function
requiring such functionality. (Praise be to the truculent wisdom of the
http://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar[open-source bazaar]!)

Suppose only one such command is installed on the current system. In this case,
the decision of which command to implement such function in terms of is simple:
such function _must_ be implemented in terms of such command.

Suppose, however, that several such commands are installed on the current
system. In this case, the same decision is _not_ simple: ideally, such function
should be implemented in terms of the subjectively ``best'' command for the job
(and the rest ignored). To ensure this, `zeshy` orders each command in such list
according to informal estimations of its efficacy, reliability, and suitability
in solving such problem. However, such ordering is only a recommended default.
The decision of which command to implement such function in terms of ultimately
reduces to user requirements and personal preference -- which is to say, *you*.

== Example ==

Consider :screenshot_screen_to_file(), capturing screenshots of the current
screen to disk. Such functionality is neither provided by `zsh` itself _or_
practically implementable in `zsh` and thus requires one of several alternative
commands -- including ImageMagick's `import`, independently developed `scrot`,
Enlightenment's `imlib2_grab`, and X.org's `xwd` and `xwdtopnm`. This is the
same order in which such commands are generally preferred, yielding a list of
command alternatives for :screenshot_screen_to_file() resembling:

.:screenshot_screen_to_file() Command Alternatives
==========================================
[source]
------------------------------------------
>>> ZESHY_ALTERNATIVES_SCREENSHOT_SCREEN=(
...     import scrot imlib2_grab 'xwd && xwdtopnm' )
------------------------------------------
==========================================

`zeshy` then follows the following algorithm when defining such function:

* If `import` is *pathable* (i.e., in the current command hash, typically due to
  residing in the current user's ${PATH}), :screenshot_screen_to_file() will be
  defined to run such command.
* Else if `scrot` is pathable, :screenshot_screen_to_file() will be defined to
  run such command.
* Else if `imlib2_grab` is pathable, :screenshot_screen_to_file() will be
  defined to run such command.
* Else if both `xwd` _and_ `xwdtopnm` are pathable, :screenshot_screen_to_file()
  will be defined to run such command.
* Else, :screenshot_screen_to_file() will _not_ be defined. Whenever such
  function is called, an exception will be thrown at the point of such call.

== Syntax ==

Each item in a list of command alternatives must be either:

* The name of a single external command (e.g., `misaka`). If such command is
  pathable, the corresponding `zeshy` function will be defined in terms of only
  such command.
* The names of multiple external commands delimited by `and` (e.g.,
  `greer and kunstler and orlov`). If all such commands are pathable, the
  corresponding `zeshy` function will be defined in terms of all such commands.
* The names of multiple external commands delimited by `or` (e.g.,
  `holmgren or mollison or barnhart`). If at least one such command is pathable,
  the corresponding `zeshy` function will be defined in terms of one or more
  such commands.
/---

# ....................{ ABBREVIATIONS                      }....................
# declare_global_with_stdin\
#     list ZESHY_ALTERNATIVES_SCREENSHOT_IF_DISPLAY_SERVER_X <<'/---'
# List of the names of all possible commands which which to implement
# screenshotters (e.g., :screenshot_screen_to_file()) if the current display
# server supports the X11 protocol (in descending order of preference).
# /---
# ZESHY_ALTERNATIVES_SCREENSHOT_IF_DISPLAY_SERVER_X=(
#     import scrot imlib2_grab 'xwd and xwdtopnm' )
