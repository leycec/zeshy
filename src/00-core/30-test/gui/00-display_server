#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *display server testers* (i.e., high-level functions testing whether the
current display server -- the core component of windowing systems, defining the
communications protocol with which client GUI applications receive input and
render output -- is or is compatible with various well-known display servers).
/---

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] :is_display_server_mir(void)

Report success if the current display server is *Mir* (i.e., the display server
underlying newer versions of Ubuntu's Unity UI).
/---
function :is_display_server_mir() {
    # Mir *ALWAYS* exports such variable to Mir clients as the named socket for
    # the current Mir display server. To quote a recent Mir commit: "Servers now
    # set the $MIR_SOCKET environment variable to their own socket name for any
    # direct children's benefit." See :is_display_server_x() for further
    # discussion.
    die_if_args
    (( ${+MIR_SOCKET} ))
}

declare_function_with_stdin <<'/---'
[status: bool] :is_display_server_x(void)

Report success if the current display server supports *X11* (i.e., the core
communications protocol of the X Window System). Such protocol is also referred
to as *X* or *X.Org* (i.e., the current reference implementation of an X11
display server developed by the X.Org Foundation).

== Caveats ==

*Success implies only that X11 applications may be reliably run.* Success does
_not_ imply that CLI utilities commonly bundled with the X.Org Server (e.g.,
"xauth", "xrdb") are pathable or otherwise available. Rephrased, success only
implies the current display server to _support_ X11 rather than to _be_ the
X.Org Server -- a significantly stronger claim. Indeed, several windowing
systems unaffiliated with the X.Org Foundation provide optional display servers
supporting the X11 protocol but _not_ such CLI utilities (e.g., XWayland, XMir).
/---
function :is_display_server_x() {
    # X *ALWAYS* exports such variable to X clients as a string describing the
    # connection to the current X display server, formatted as a ":"-delimited
    # optional hostname followed by mandatory display number. In any case, the
    # existence of such global unambiguously implies the current shell to be
    # running under X. Indeed, setting such variable in an environment *NOT*
    # running under X provokes calamity, suggesting that should never happen.
    #
    # To corroborate such test, we could also test the existence of at least one
    # process running "${commands[X]}" as the current user *AND* listening to
    # the current value of ${DISPLAY}. However, since this function is called
    # comparatively early in zeshy startup, inlining process testing
    # functionality here would both be somewhat burdensome and inefficient. In
    # the immortal words of Malcolm Reynolds, "Frack that."
    die_if_args
    (( ${+DISPLAY} ))
}

declare_function_with_stdin <<'/---'
[status: bool] :is_display_server_wayland(void)

Report success if the current display server is a *Wayland compositor* (i.e., a
display server supporting the Wayland communication protocol).
/---
function :is_display_server_wayland() {
    # Wayland *ALWAYS* exports such variable to Wayland clients as the named
    # socket for the current Wayland display server. To quote "man weston":
    # "Weston will export WAYLAND_DISPLAY with this value in the environment for
    # all child processes to allow them to connect to the right server
    # automatically." See :is_display_server_x() for further discussion.
    die_if_args
    (( ${+WAYLAND_DISPLAY} ))
}

# --------------------( WASTELANDS                         )--------------------
# *Such success does _not_ imply the current display server to be X11.* , a weaker claim than the implication that such server _is_ X11

#FUXME: Ugh. Detecting whether the current shell is running under Mir or Wayland
#appears to be rather difficult. Neither appears to interect in any way closely
#with the shell. In particular, neither appears to export any requisite global
#variables. So how *DO* we detect such servers? Grep the process list. (Yes,
#this verascibly sucks.) For example, one suggested method online for checking
#whether or not Mir is currently running is:
#
#    >>> ps afx | grep unity-system-compositor
#
#But even *THAT* doesn't necessarily imply that the current shell is running
#under Mir (e.g., such shell could simply be running under a virtual console).
#For a truly reliable check, we'd need to test whether the current shell is
#transitively descended from such process.
#
#Now, you're probably thinking: that's horrible. And it is. *BUT*, since Mir and
#Wayland are effectively Linux-specific (although we recall reading about an
#effort to port Wayland to FreeBSD), we can effectively assume the GNU/Linux
#ecosystem of CLI utilities exists to implement such tests, which dramatically
#simplifies things. In any case, discomforting topics for another langorous day.
