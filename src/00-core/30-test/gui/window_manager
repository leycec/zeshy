#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle *window manager testers* (i.e., high-level functions testing whether the
current window manager -- the component of the current windowing system managing
window appearance and placement -- is or is compatible with various well-known
window managers).
/---

#FIXME: This turns out to be *HIGHLY* non-trivial unless external command
#"wmctrl" is installed, in which case this is trivially resolved by parsing the
#output of "wmctrl -m". For further details, see:
#
#    http://askubuntu.com/questions/72549/how-to-determine-which-window-manager-is-running
#
#We're half-inclined to make "wmctrl" at least a soft (i.e., recommended)
#"zeshy" dependency. There's simply no other reliable means of obtaining such
#metadata. (None that I'm willing to stoop to, anyway!)
#
#O.K.; we've manually verified the window manager is reliably obtainable from
#the "Name:" but *NOT* "Class:" field output by "wmctrl -m". (The latter is
#frequently, though not necessarily "N/A".) Note that while the name is case-
#sensitive but usually lowercase (e.g., "compiz", "awesome"), such name is
#actually capitalized under a few window managers (e.g., "FVWM"). In other
#words, force such name to lowercase before testing.
#
#Examples of such output culled from both first- and third-person use:
#
#    >>> wmctrl -m
#    Name: FVWM
#    Class: fvwm
#    PID: N/A
#    Window manager's "showing the desktop" mode: N/A
#
#    >>> wmctrl -m
#    Name: compiz
#    Class: N/A
#    PID: N/A
#    Window manager's "showing the desktop" mode: OFF
#
#Clearly, trivial to match, if a little expensive. We certainly wouldn't want to
#invoke a subshell and perform such parsing on *EVERY* call to a tester function
#defined below, so define a new :set_string_to_window_manager() function. For
#efficiency, such function should internally cache to string global
#${ZESHY_WINDOW_MANAGER} on the first call to such function and thereafter
#reuse the cached value of such global. Testers then call such function without
#having to worry about caching or efficiency.
#
#As a caveat, it should be noted that "wmctrl" is X11-specific and hence Linux-
#specific. Under proprietary operating systems, such function does *NOT* require
#"wmctrl", since the windowing manager in that case is given by the operating
#system name, and hence can be efficiently implemented at digest compile time as
#such. On BSD derivatives, however, I genuinely have no idea how to query for
#such metadata reliably. Perhaps one simply can't? In any case, we should still
#be able to reliably query every non-BSD OS for such metadata. Make it so,
#please!
#FIXME: Woo! After trolling through the *VERY* simple "wmctrl" codebase
#(basically, a single C file "main.c"), it's clear that we should be able to
#retrieve such name using standard CLI utilities bundled with X.Org. Take a
#look at function wm_info() in such codebase, which (in order):
#
#* Dies unless the root window supports *EITHER* property
#  "_NET_SUPPORTING_WM_CHECK" or "_WIN_SUPPORTING_WM_CHECK".
#* Assuming it does, retrieves the value of the "_NET_WM_NAME" property on the
#  root window.
#
#That's it. Serious! Dead simple, right? So, given that, all we have to do is
#obtain such properties... which, fortuitously, command "xprop -root" provides.
#"We're soo there, dude." Interestingly, despite the simplicity, *NOBODY* else
#appears to have ever thought of this. Not on stackexchange.com; not on
#commandlinefu.com; not on askubuntu.com. Nowhere! Bizarre, but we personally
#vouch for the following as reliably working and *NOT* requiring "wmctrl". Given
#the number of posts on this exact same question, we should probably post this
#to stackexchange (answer our own question! har):
#
#    # Need to also check "_WIN_SUPPORTING_WM_CHECK" if this fails, as above.
#    >>> command xprop -root _NET_SUPPORTING_WM_CHECK
#    _NET_SUPPORTING_WM_CHECK(WINDOW): window id # 0x80001a
#    >>> command xprop -id 0x80001a _NET_WM_NAME
#    _NET_WM_NAME(UTF8_STRING) = "FVWM"
#
#Dark voodoo here, but it *DOES* work reliably. Basically, under X11, the root
#window actually appears to have an invisible pseudo-parent window, which when
#queried provides metadata not about itself but the current window manager. Yes,
#this is insanity. This is X11.
#
#Now, we should note that the above output is somewhat cumbersome to parse and
#will require at least two separate subshells to fully capture, thus justifying
#our use of caching here. We can't avoid the subshells, but we *CAN* avoid the
#parsing by requesting "xprop" output in a simplified format: e.g.,
#
#    # Just capture the second word, below! (Alternately, just truncate
#    # everything preceding the only space in such line. Unsure which is more
#    # efficient, here.)
#    #
#    # Need to also check "_WIN_SUPPORTING_WM_CHECK" if this fails, as above.
#    >>> command xprop -root -notype -f _NET_SUPPORTING_WM_CHECK 32x ' $0' _NET_SUPPORTING_WM_CHECK 
#    _NET_SUPPORTING_WM_CHECK 0x80001a
#
#    # This is slightly harder to parse, since we'll need to strip the
#    # delimiting double quotes. Sadly, there appears to be *NO* means of
#    # instructing "xprop" to drop such quotes. *shrug* Anyway, since they
#    # always appear, they can be efficiently dropped by just stripping
#    # everything preceding the first '"' in such line *AS WELL AS* the final
#    # character of such line. Simple and efficient, if slightly annoying.
#    >>> command xprop -id 0x80001a -notype -f _NET_WM_NAME 8u ' $0' _NET_WM_NAME
#    _NET_WM_NAME "FVWM"
#
#Given the above complexity, we probably want to define a new
#:set_int_to_x_window_id_for_window_manager() setter, performing the first
#operation above. Oh, wait... Since we have *NOTHING* to query the window
#manager about except its name, that's probably a tad overkill. Just perform
#both operations in the same :set_string_to_window_manager() function. "Bam!"

# ....................{ TESTERS                            }....................
# --------------------( WASTELANDS                         )--------------------
