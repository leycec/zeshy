#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

declare_parcel_as_script_with_stdin <<'/---'
Handle open-source Linux and BSD distributions.

== See Also ==

* Canonical list of Linux- and BSD-specific
  http://linuxmafia.com/faq/Admin/release-files.html[`-release` and `_version` filenames and file contents].
/---

#FIXME: Refactor in accordance with @{10-os}.
#FIXME: Indeed, this has largely been obsoleted by new functionality in
#@{inspect}.

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] is_distro_arch(void)

Report success if the current distribution is Arch Linux.
/---
function is_distro_arch() {
    die_if_args
    is "$(get_unix_distro:)" == 'Arch' si
}

declare_function_with_stdin <<'/---'
[status: bool] is_distro_debian(void)

Report success if the current distribution is Debian Linux.
/---
function is_distro_debian() {
    die_if_args
    is "$(get_unix_distro:)" == 'Debian' si
}

declare_function_with_stdin <<'/---'
[status: bool] is_distro_gentoo(void)

Report success if the current distribution is Gentoo Linux.
/---
function is_distro_gentoo() {
    die_if_args
    is "$(get_unix_distro:)" == 'Gentoo' si
}

declare_function_with_stdin <<'/---'
[status: bool] is_distro_ubuntu(void)

Report success if the current distribution is Ubuntu Linux.
/---
function is_distro_ubuntu() {
    die_if_args
    is "$(get_unix_distro:)" == 'Ubuntu' si
}

# ....................{ GETTERS                            }....................
#FIXME: Refactor into setters, naturally.

declare_function_with_stdin <<'/---'
string get_unix_distro:(void)

Get the capitalized name of the current distribution: e.g.,

.get_unix_distro:()
==========================================
[source]
------------------------------------------
>>> get_unix_distro:
Debian  # under Debian Linux installations
Gentoo  # under Gentoo Linux installations
------------------------------------------
==========================================
/---
function get_unix_distro:() {
    # Validate sanity.
    die_if_args
    list release_files

    #FIXME: Actually implement
    #is_file_text_matching_pcre_group_multiline:!

    # If "lsb_release" is installed, get such command's output.
    if { is_pathable lsb_release } {
        command lsb_release -si and report_status
    # Else if "/etc/os-release" exists and contains a line prefixed by "NAME=",
    # get the substring following such prefix. Since such substring may
    # optionally be delimited by quotes, strip such quotes if found.
    } elif {\
        is_file /etc/os-release and
        is_file_text_matching_pcre_group_multiline: /etc/os-release\
            '^NAME=(?|"([^"]++)"|([^"]++))$' } {
        # If such substring is suffixed by a whitespace-prefixed operating
        # system name (e.g., " Linux"), strip such suffix.
        remove_string_suffix "${match[1]}" ' Linux'
        report_success
    }

    #FIXME: Generalize such admittedly odd syntax to a new setter
    #:set_list_to_glob_qualified_paths_not_matching_glob:(). Sweet!
    #FIXME: As well as doing that, also generalizing the setting of such exact
    #list below to a new setter set_list_to_unix_files_release_nonstandard:().
    #Such functionality is shared with get_unix_distro_version:() below and
    #hence of common interest.

    # List of all files matching /etc/*-release, /etc/*_version, and
    # /etc/*-version -- excluding "/etc/lsb-release". While command "lsb_release" and
    # hence the latter should be unavailable here, better comfy than
    # core-dumped.
    release_files=( /etc/*{-release,-version,_version}~/etc/(lsb|os)-release(.) )

    # If at least one such file matches, take the prefix preceding the last
    # dash or hyphen in the basename of the first such filename to be the distro
    # name. Note that some distro names themselves contain dashes and hyphens.
    # Thus, match suffixes non-greedily.
    if { is_list_nonempty release_files } {
        return_string "$(capitalize_string "$(get_path_basename\
            "${release_files[1]%[_-]*}")")"
    # Else, return the current operating system name.
    } else {
        get_os
    }
}

declare_function_with_stdin <<'/---'
integer get_unix_distro_version:(void)

Get the version number of the current distribution: e.g.,

.get_unix_distro_version:()
==========================================
[source]
------------------------------------------
>>> get_unix_distro_version:
2.1
/---
function get_unix_distro_version:() {
    # Validate sanity.
    die_if_args
    :string release_text
    :list release_files

    # If "lsb_release" is installed, return such command's output.
    if { is_pathable lsb_release } {
        command lsb_release -sr and report_status
    }

    # Else, attempt to match such version from a system-wide file.
    #
    # List of all files matching /etc/*-release, /etc/*_version, and
    # /etc/*-version excluding "/etc/lsb-release", specific to the prior
    # pathable "lsb_release" guaranteed *NOT* to exist on this system.
    release_files=( /etc/*{-release,-version,_version}~/etc/(lsb|os)-release(.) )
    die_unless_list_nonempty release_files\
        'OS distribution version not found (i.e., command "lsb_release" not found and no system-wide release or version files found).'

    #FIXME: We clearly have no access to function get_file_text() here. Inline
    #such implementation!
    #FIXME: Should probably grep the file for a pattern matching a version
    #specifier, but... *meh* Hmm; actually, yeah. This is rather shoddy. I have
    #little confidence in the current version. Reconsider!
    #FIXME: Iteratively search all such files for the first whose contents match
    #a version specifier. See the "Canonical list..." URL, above.

    # Get the last column in the text contents of the first such file.
    release_text="$(get_file_text "${release_files[1]}")"
    output_string "${release_text[(w)-1]}"
}

# --------------------( WASTELANDS                         )--------------------
    # get_string_word "$(get_file_text "${release_files[1]}")" -1

#FUXME: Since the concept of "distribution" only applies to open OSes
#(principally Linux and BSD), this parcel is inherently nonportable. Honestly,
#such functionality should at least be shifted to a new tree @{src/if_os/unix}.

#FUXME: Desynchronized with get_unix_distro:() and probably non-working, we're
#afraid. In particular, we want to parse 
    #FUXME: Bit awkward. We really want a new run_code
    # If at least one such file matches, return the last column in the contents
    # of the first such file.
#   if { is_list_nonempty release_files } {
#       get_string_word "$(get_file_text "${release_files[1]}")" -1
    # Else, throw an exception.
#   } else {
#   }
#       string release_filename="${release_files[1]}"
#       if { is_file_text "${release_filename}" } and {
#FUXME: Rename to is_distro_unix_arch() and similarly elsewhere below. There's
#technically a separate Gentoo BSD, for example, that
