#!/usr/bin/env zsh
# ====================[ ebuild                             ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy ebuild, handling Gentoo ebuild management.

# ....................{ PRINTERS                           }....................
# char *print_ebuilds_installing_path(char *pathname)
#
# Print all ebuilds installing into the passed path. If this path is a file,
# print only the one ebuild installing such file; otherwise, print all ebuilds
# installing at least one file to such directory.
print_ebuilds_installing_path() {
    # Localize and validate passed arguments.
    die_unless_one_arg 'expected one pathname'
    string pathname="${1}"
    die_unless_found "${pathname}"

    # Prefer "equery" to "qfile" for finding such ebuilds. "equery" waits to
    # print a helpful message until after finding. Since such finding is slow,
    # print a helpful message *BEFORE* finding.
    interactively utter "searching ebuild database for \"${pathname}\"..."
    if is_installed equery
    then equery belongs "${pathname}"
    elif is_installed qfile
    then qfile "${pathname}"
    else die 'neither "equery" or "qfile" installed'
    fi
}

# char *print_ebuild_dependencies(char *ebuild_name)
#
# Print all ebuilds on which the passed ebuild directly depends.
print_ebuild_dependencies() {
    # Localize passed arguments.
    die_unless_one_arg 'expected one ebuild name'
    string ebuild_name="${1}"

    #FIXME: Any other utilities capable of displaying such data? Google us up.
    if is_installed equery
    then equery depgraph "${ebuild_name}"
    else die '"equery" not installed'
    fi
}

# char *print_ebuild_use_flags(char *ebuild_name)
#
# Print all USE flags used by the passed ebuild.
print_ebuild_use_flags() {
    # Localize passed arguments.
    die_unless_one_arg 'expected one ebuild name'
    string ebuild_name="${1}"

    #FIXME: Any other utilities capable of displaying such data? Google us up.
    #Ah, yes. We could, of course, simply grep
    #"/usr/portage/profiles/use.local.desc" for the program name. That gets us
    #USE flag descriptions only for main tree ebuilds, however. But... *shrug*
    if is_installed equery
    then equery uses "${ebuild_name}"
    else die '"equery" not installed'
    fi
}

# ....................{ WRITERS                            }....................
# void update_ebuild_manifest(char *ebuild_filename = '')
#
# Updates or creates if not currently found the "Manifest" file for the passed
# ebuild (defaulting to the newest ebuild in the current directory). See the
# "man ebuild" for details. This function resolves errors resembling:
#
#     !!! Fetched file: howl-6.3.1926.tar.bz2 VERIFY FAILED!
#     !!! Reason: Insufficient data for checksum verification
update_ebuild_manifest() {
    die_unless_at_most_one_arg 'expected optional filename'
    string ebuild_filename

    # If no arguments were passed, default to the last ebuild in the current
    # directory. The "ebuild" command behaves the same regardless of which
    # ebuild we pass it, so this is entirely arbitrary.
    if is_no_args; then
        # List all ebuild files in the current directory.
        string current_dir; current_dir="$(get_current_dir)"
        list ebuild_filenames
        ebuild_filenames=( "${current_dir}/"*.ebuild )

        # Arbitrarily select the last in lexicographic order.
        die_if_list_empty ebuild_filenames\
            "\"${current_dir}\" contains no ebuilds"
        ebuild_filename="${ebuild_filenames[-1]}"
    # Otherwise, the passed argument is an ebuild.
    else ebuild_filename="${1}"
    fi

    # Update.
#   utter "updating \"${ebuild_filename}\" manifest..."
    die_unless_file "${ebuild_filename}"
    ebuild "${ebuild_filename}" manifest
}

# ....................{ WASTELANDS                         }....................
    # Since the ebuild name and version are split by hyphen and such
    # versions never contain hyphens, splitting on the last hyphen suffices to
    # split ebuild names from versions. Luckily, the "sort" command implements
    # such sorting for us via option "-V".
        # If the "sort" command supports option "-V", run "sort".
#       if quietly 'print 1 | sort -V -'
#       then ebuild_filename="$(join_list_to_lines ebuild_filenames | sort -V -)"
        # Otherwise, default to lexicographic order.
#       else ebuild_filename="${ebuild_filenames[-1]}"
#       fi

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
