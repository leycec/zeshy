#!/usr/bin/env zsh
# ====================[ output                             ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Output, handling standard output and error.
#
# --------------------( TODO                               )--------------------
# * Wherever we currently call "print" unsafely (which is pretty much
#   everywhere), we should instead call utter_raw().

# ....................{ PRINTERS                           }....................
# void utter_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with default trailing newline.
# Unlike utter(), print no theme-specific nonsense (e.g., ANSI color codes).
# Avoid calling echo() or print(), which fail on hyphen-prefixed strings: e.g.,
#
#     # Bad. Never do this, unless guaranteed no hyphens prefix such string.
#     # If "is ${1} == -* si", Zsh interprets the first word of such string as
#     # options to the "print" command.
#     print "${1}"
#
#     # Good. Always do this.
#     utter_raw "${1}"
utter_raw() {
    die_unless_args 'expected at least one string'
    print -- "${@}"
}

# void curse_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard error with default trailing newline.
# Unlike curse(), print no theme-specific nonsense (e.g., ANSI color codes).
curse_raw() {
    die_unless_args 'expected at least one string'
    print -- "${@}" 2>&1
}

# ....................{ PRINTERS ~ nulls                   }....................
# void utter_null_delimited(char *string1, char *string2, ...)
#
# Print the passed strings to standard output delimited and terminated by nulls
# (i.e., such that a null '\0' separates each such string from the next and the
# last such string is followed by a null '\0').
utter_null_delimited() {
    die_unless_args 'expected at least one string'
    print -N -- "${@}"
}

# ....................{ PRINTERS ~ newlines                }....................
# void utter_newline_delimited(char *string1, char *string2, ...)
#
# Print the passed strings to standard output delimited by newlines (i.e., such
# that a newline separates each such string from the next).
utter_newline_delimited() {
    die_unless_args 'expected at least one string'
    print -l -- "${@}"
}

# void utter_no_newline_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
utter_no_newline_raw() {
    die_unless_args 'expected at least one string'
    print -n -- "${@}"
}

# void curse_no_newline_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard error with no default trailing newline.
curse_no_newline_raw() {
    die_unless_args 'expected at least one string'
    print -n -- "${@}"
}

# ....................{ PRINTERS ~ blank lines             }....................
# void utter_blank_line(void)
#
# Print a blank line to standard output.
utter_blank_line() {
    die_if_args
    print
}

# void curse_blank_line(void)
#
# Print a blank line to standard error.
curse_blank_line() {
    die_if_args
    print 2>&1
}

#FIXME: Obsolete.
# ....................{ PRINTERS                           }....................
# char *utter_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output. Unlike utter(), this function
# prints no theme-specific embellishment (e.g., ANSI color codes).
#utter_raw() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}"
#}

# char *curse_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard error. Unlike curse(), this function
# prints no theme-specific embellishment (e.g., ANSI color codes).
#curse_raw() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}" 2>&1
#}

# char *utter_no_newline_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
#utter_no_newline_raw() {
#    die_unless_args 'expected at least one string'
#    print -n -- "${@}"
#}

# char *curse_no_newline_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
#curse_no_newline_raw() {
#    die_unless_args 'expected at least one string'
#    print -n -- "${@}" 2>&1
#}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
