#!/usr/bin/env zsh
# ====================[ output                             ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Shell Output, handling raw standard output and error.

# ....................{ PRINTERS                           }....................
# void sputter(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with default trailing newline.
# Unlike utter(), print no theme-specific nonsense (e.g., ANSI color codes).
# Avoid calling echo() or print(), which fail on hyphen-prefixed strings: e.g.,
#
#     >>> string lammoth='-z' morgoth='rm -rf *'
#
#     # Bad. Never do this! Unless guaranteed no hyphens prefix such string.
#     # If "is ${1} == -* si", Zsh interprets the first word of such string as
#     # options to the "print" command. (Any user executing the following
#     # command is likely to frown and...and then what!?)
#     >>> print "${lammoth}" "${morgoth}"
#     >>> rm -rf *   # don't accidentally hit <Enter> here; what, you just did?
#
#     # Good. Always do this.
#     >>> sputter "${lammoth}" "${morgoth}"
#     -z rm -rf *    # that's more like it
sputter() {
    die_unless_args 'expected at least one string'
    print -- "${@}"
}

# void accurse(char *string1, char *string2, ...)
#
# Print the passed strings to standard error with default trailing newline.
# Unlike curse(), print no theme-specific nonsense (e.g., ANSI color codes).
accurse() {
    die_unless_args 'expected at least one string'
    print -- "${@}" 2>&1
}

# ....................{ PRINTERS ~ blank lines             }....................
# void sputter_blank_line(void)
#
# Print a blank line to standard output.
sputter_blank_line() {
    die_if_args
    print
}

# void accurse_blank_line(void)
#
# Print a blank line to standard error.
accurse_blank_line() {
    die_if_args
    print 2>&1
}

# ....................{ PRINTERS ~ escapes                 }....................
# void sputter_unescaped(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with default trailing newline and
# no escapes escaped (i.e., printed as is): e.g.,
#
#     >>> sputter_unescaped "\a\b\r\a\c\a\b\a\b\a"  # good
#     \a\b\r\a\c\a\b\a\b\a
#     >>> sputter           "\a\b\r\a\c\a\b\a\b\a"  # just try it; noooo, don't!
sputter_unescaped() {
    die_unless_args 'expected at least one string'
    print -r -- "${@}"
}

# void accurse_unescaped(char *string1, char *string2, ...)
#
# Print the passed strings to standard error with default trailing newline and
# no escapes escaped, as with sputter_unescaped().
accurse_unescaped() {
    die_unless_args 'expected at least one string'
    print -r -- "${@}" 2>&1
}

# ....................{ PRINTERS ~ nulls                   }....................
# void sputter_null_delimited(char *string1, char *string2, ...)
#
# Print the passed strings to standard output delimited and terminated by nulls
# (i.e., such that a null '\0' separates each such string from the next and the
# last such string is followed by a null '\0').
sputter_null_delimited() {
    die_unless_args 'expected at least one string'
    print -N -- "${@}"
}

# ....................{ PRINTERS ~ newlines                }....................
# void sputter_newline_delimited(char *string1, char *string2, ...)
#
# Print the passed strings to standard output delimited by newlines (i.e., such
# that a newline separates each such string from the next): e.g.,
#
#     >>> sputter_newline_delimited sludge elf transmuter
#     sludge
#     elf
#     transmuter
sputter_newline_delimited() {
    die_unless_args 'expected at least one string'
    print -l -- "${@}"
}

# void sputter_newline_delimited_list(
#   char *list_name, int start_index = 1, int end_index = -1)
#
# Print the elements between the passed start and end indices (defaulting to the
# first and last elements) of the list with the passed name to standard output
# delimited by newlines. If no indices are passed, all elements are printed; if
# one index is passed, only that index is passed. Negative indices are offset
# from the end: e.g.,
#
#     >>> list runes; runes=( abyss crypt pan tomb vaults )
#     >>> sputter_newline_delimited_list runes
#     abyss
#     crypt
#     pan
#     tomb
#     vaults
#     >>> sputter_newline_delimited_list runes 3
#     pan
#     >>> sputter_newline_delimited_list runes 3 -1
#     pan
#     tomb
#     vaults
sputter_newline_delimited_list() {
    # Validate.
    die_unless_one_to_three_args\
        'expected one variable name and optional start and end indices'
    string list_name="${1}" beg_index="${2:-}" end_index="${3:-}"
    check_list_args "${list_name}" beg_index end_index

    # Sputter.
#   print "beg: ${beg_index}\nend: ${end_index}"
    print -l -- "${${(@P)list_name}[${beg_index},${end_index}]}"
}

# ....................{ PRINTERS ~ no newline              }....................
# void sputter_no_newline(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
sputter_no_newline() {
    die_unless_args 'expected at least one string'
    print -n -- "${@}"
}

# void accurse_no_newline(char *string1, char *string2, ...)
#
# Print the passed strings to standard error with no default trailing newline.
accurse_no_newline() {
    die_unless_args 'expected at least one string'
    print -n -- "${@}"
}

# --------------------( WASTELANDS                         )--------------------
# * I'm strongly in favor of:
#   sputter() or stutter() or mutter()
#   accurse() or ???????()
#   Yeah, sputter() and accurse() read quite well.

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#
# Copyright 2007-2012 by Cecil Curry.
#
#   http://www.raiazome.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
