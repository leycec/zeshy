#!/usr/bin/env zsh
# ====================[ os                                 ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy OS, implementing operating system-handling functionality.
#
# --------------------( SEE ALSO                           )--------------------
# http://linuxmafia.com/faq/Admin/release-files.html
#   Canonical list of *nix distro-specific "-release" and "_version" files.

# ....................{ GETTERS                            }....................
# char *get_architecture_name(void)
#
# Get the canonicalized name of the current machine architecture: e.g.,
#
#     >>> get_os_name
#     x86_64  # under 64-bit Intel and AMD architectures
#     i386    # under 32-bit Intel architectures (older)
#     i686    # under 32-bit Intel architectures (recent)
get_architecture_name() {
    die_if_args

    if is_installed arch
    then arch
    else uname -m
    fi
}

# char *get_os_name(void)
#
# Get the canonicalized name of the current operating system: e.g.,
#
#     >>> get_os_name
#     FreeBSD  # under FreeBSD systems
#     Linux    # under GNU/Linux systems
get_os_name() {
    die_if_args
    uname -s
}

# ....................{ GETTERS ~ distro                   }....................
# char *get_distro_name(void)
#
# Get the canonicalized name of the current distribution: e.g.,
#
#     >>> get_distro_name
#     Debian  # under Debian Linux installations
#     Gentoo  # under Gentoo Linux installations
get_distro_name() {
    die_if_args

    # If "lsb_release" is available, defer to its standardized output.
    if is_installed lsb_release; then
        lsb_release -si
        return_success
    fi

    # List of all files matching /etc/*-release, /etc/*_version, and
    # /etc/*-version excluding "/etc/lsb-release". While "lsb_release" and hence
    # the latter should be unavailable here, 'tis better comfy than core-dumped.
    list release_files
    release_files=( /etc/*{-release,-version,_version}~/etc/lsb-release(.) )

    # If at least one such file matches, take the prefix preceding the last
    # dash or hyphen in the basename of the first such filename to be the distro
    # name. Note that some distro names themselves contain dashes and hyphens.
    # Thus, match suffixes non-greedily.
    if is_list_nonempty release_files; then
        print "$(capitalize "$(get_basename "${release_files[1]%[_-]*}")")"
        return_success
    fi

    # Otherwise, return the current operating system name.
    get_os_name
}

# int get_distro_version(void)
#
# Get the version number of the current distribution: e.g.,
#
#     >>> get_distro_version
#     2.1
get_distro_version() {
    die_if_args

    # If "lsb_release" is available, defer to its standardized output.
    if is_installed lsb_release; then
        lsb_release -sr
        return_success
    fi

    # List of all files matching /etc/*-release, /etc/*_version, and
    # /etc/*-version excluding "/etc/lsb-release".
    list release_files
    release_files=( /etc/*{-release,-version,_version}~/etc/lsb-release(.) )

    #FIXME: Should probably grep the file for a pattern matching a version
    #specifier, but... *meh*
    # If at least one such file matches, return the last column in the contents
    # of the first such file.
    if is_list_nonempty release_files; then
        print ${$(< "${release_files[1]}")[(w)-1]}
        return_success
    fi

    # Otherwise, raise an exception.
    die '"lsb_release" not installed and no system-wide release or version file found'
}

# ....................{ OS ~ undefined                     }....................
#FIXME: Nice, but currently unused. Uncomment when adding support for non-Linux
#POSIX-compatible systems.
# The following functions are OS-specific, and thus defined for each OS-specific
# Zeshy component, elsewhere. By default, each dies with error.

# char *get_current_process_basename(void)
#
# Get the basename of the binary corresponding to the current process.
#get_current_process_basename() { die "unimplemented on $(get_os_name)" }

# char *get_current_process_command_line(void)
#
# Get the command line under which the current process is executing. This is a
# single string having these parts:
#
# * Absolute OR relative path to the executable file from which the process was
#   executed. Note that, in the latter case, there is no reliable mechanism for
#   converting the relative path into an absolute path.
#
# Due to the above unreliabilities, this string is best used for displaying non-
# critical log and user interface labels rather than critical functionality.
#get_current_process_command_line() { die "unimplemented on $(get_os_name)" }
 
#FIXME: Obsolete.
    # List of all files matching /etc/*_version and /etc/*-version.
#   list version_files; version_files=( /etc/*{_,-}version(.) )

    # If at least one such file matches, take the prefix preceding
    # "-release" in the basename of such filename to be the distro name.
#   if is_list_nonempty version_files; then
#       print "$(capitalize "$(get_basename "${version_files[1]%[_-]version}")")"
#       return_success
#   fi

# Get the canonicalized name of the current operating system. This name is
# strictly lowercase with backslashes replaced by dashes and hence suitable for
# use in pathnames: e.g.,
#
#     >>> get_os_name
#     FreeBSD  # under FreeBSD systems
#     Linux    # under GNU/Linux systems
    # "uname" reports Linux as "GNU/Linux", so replace backslashes with dashes.
#   print "${$(lowercase "$(uname -o)")//\//-}"

#FIXME: Hmm; I could quite see the caller wanting the original name, as well.
    #FIXME: Alternate implementations; keep around!
    #echo $(match_multiline '^Mem:\s+(\d+)' "$(free -bt)")
    #$(cat '/proc/meminfo' | awk -F '[ ]+' '/^MemTotal/ { print $2 }')

#   string os_name="$(lowercase "$(uname -o)")"
#   os_name="${os_name//\//-}"
#   print "${os_name}"
    
# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
