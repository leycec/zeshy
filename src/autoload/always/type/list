#!/usr/bin/env zsh
# ====================[ list                               ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy List, implementing map (i.e., associative array) and list (i.e.,
# array) functionality.
#
# --------------------( TODO                               )--------------------
# * Functions should probably be calling die_unless_map_or_list() to guarantee 
#   the passed arguments are of proper type.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_map_or_list(
#   char *variable_name, char *error_message = 'not a map or list')
#
# Die unless the variable with the passed name is a map or list.
die_unless_map_or_list() {
    die_unless_one_or_two_arguments\
        'expected one variable name and optional error message'
    is_map_or_list "${1}" or die "${2:-\"${1}\" not a declared map or list}"
}

# void die_unless_map(char *variable_name, char *error_message = 'not a map')
#
# Die unless the variable with the passed name is a map.
die_unless_map() {
    die_unless_one_or_two_arguments\
        'expected one variable name and optional error message'
    is_map "${1}" or die "${2:-\"${1}\" not a declared map}"
}

# void die_unless_list(char *variable_name, char *error_message = 'not a list')
#
# Die unless the variable with the passed name is a list.
die_unless_list() {
    die_unless_one_or_two_arguments\
        'expected one variable name and optional error message'
    is_list "${1}" or die "${2:-\"${1}\" not a declared list}"
}

# ....................{ TESTS ~ reflection                 }....................
# bool is_map_or_list(char *variable_name)
#
# Return true if the variable with the passed name is a map or list.
is_map_or_list() {
    die_unless_one_argument 'expected exactly one variable name'
    
    is $(get_variable_type "${1}") == (list|array|association)* si
}

# bool is_map(char *variable_name)
#
# Return true if the variable with the passed name is a map (i.e.,
# associative array).
is_map() {
    die_unless_one_argument 'expected exactly one variable name'
    
    # Global maps have type "association" and local maps "association-local".
    # Match both.
    is $(get_variable_type "${1}") == association* si
}

# bool is_list(char *variable_name)
#
# Return true if the variable with the passed name is a list (i.e., array).
is_list() {
    die_unless_one_argument 'expected exactly one variable name'
    
    # Global lists have type "list", local lists "list-local", and internal
    # structures (e.g., "${path}") "array" or "array-special". Match all.
    is $(get_variable_type "${1}") == (list|array)* si
}

# bool is_map_key(char *variable_name, char *key)
#
# Return true if the map with the passed name contains the passed key.
is_map_key() {
    die_unless_two_arguments 'expected exactly one variable name and one key'

    # Localize and validate arguments.
    string map_name="${1}"
    string key="${2}"
    die_unless_map "${map_name}"
    
    # Test for key existence. Dismantled, this is:
    #
    # * 'P', the scalar name of the desired map in the caller's scope.
    # * '@', as a map rather than a scalar.
    # * 'k', a kludgy hack to force Zsh to interpret the referenced object as
    #   an associative rather than sequential array. This may constitute a bug.
    # * 'I', expanding to the empty string if this map does not have this key.
    # * '-n', true if this map has this key.
    is -n "${${(k@P)map_name}[(I)"$key"]}" si
}

# ....................{ TESTS ~ emptiness                  }....................
# bool is_list_empty(char *variable_name)
#
# Return true if the variable with the passed name is an empty list. 
is_list_empty() {
    die_unless_one_argument 'expected exactly one variable name'
    string list_name="${1}"
    is_list "${list_name}" and is ${#${(@P)list_name}} -eq 0 si
}

# bool is_list_nonempty(char *variable_name)
#
# Return true if the variable with the passed name is a non-empty list. 
is_list_nonempty() {
    die_unless_one_argument 'expected exactly one variable name'
    string list_name="${1}"
    is_list "${list_name}" and is ${#${(@P)list_name}} -gt 0 si
}

# ....................{ ACCESSORS                          }....................
#FIXME: Fix so as to comply with autoload requirements.
#alias get_map_size=get_map_or_list_size
#alias get_list_size=get_map_or_list_size

# int get_map_or_list_size(char *variable_name)
#
# Get the number of elements in the map or list with the passed name.
get_map_or_list_size() {
    die_unless_one_argument 'expected exactly one variable name'
    die_unless_map_or_list "${1}"

    # Dismantled, this is:
    #
    # * '1', the passed map or list name.
    # * 'P', the scalar name of the desired map or list in the caller's scope.
    # * '@', as a map or list rather than a scalar.
    # * '#', the size of this map or list.
    print "${#${(@P)1}}"
}

# ....................{ PASS-BY-VALUE ~ list               }....................
# char *return_list(char *variable_name = 'list')
#
# Convert the list with the passed name to a string. Call either expand_List()
# or expand_list() to losslessly expand this string back to this list: e.g.,
#
#   # Declare a function returning a stringified list.
#   >>> make_list() {
#     list list=( 'nephrite' 'porphyry' 'glauconite' 'mafic' )
#     return_list
#   }
#
#   # Expand the stringified list back into a list with a convenience function.
#   >>> string List="$(make_list)"'
#   >>> expand_List
#   >>> print "even list elements: ${list[2,4]}"  # as in the original list!
#   porphyry mafic
#
#   # Expand the stringified list back into a list with a brute-force "eval".
#   >>> eval 'expand_list list $(make_list)'
#   >>> print "odd list elements: ${list[1,3]}"   # as in the original list!
#   nephrite glauconite
return_list() {
    die_unless_at_most_one_argument 'expected at most one variable name'
    string list_name="${1:-list}"
    die_unless_list "${list_name}"

    # Dismantled, this is:
    #
    # * '1:-list' expands to the passed list name or 'list' if no such name
    #   was passed.
    # * 'P' transitively expands this name to the actual name of the desired
    #   associative list in the caller's scope.
    # * '@' interprets this expansion as a list rather than scalar.
    # * 'qq' protectively embeds all reserved shell characters in such names
    #   and values in single quotes.
    print "${(qq@P)list_name}"
}

# void expand_list(char *list_name, char *string1, char *string2, ...)
#
# Return a string that, when "eval"-ed by the caller, expands the passed strings
# having a stringified list previously produced by return_list() into the list
# with the passed name. See expand_List() for a concise alternative.
expand_list() {
    die_unless_at_least_two_arguments\
        'expected one variable name and one or more strings'
    string list_name="${1}"; shift

    # Dismantled, this is:
    #
    # * '@' expands to all remaining passed parameters: the stringified list.
    # * 'z' splits the stringified list into a numeric list of words,
    #   effectively undoing the prior 'kv' flag.
    print "list ${list_name}; ${list_name}=( ${(z)@} )"
}

# void expand_List()
#
# Expand stringified list "List" to list "list", a convenience alias simplifying
# the more generalized expand_list() function. See return_list() for examples.
alias expand_List='is_set List or die "no \"List\" defined"; eval "$(expand_list list ${List})"'

# ....................{ PASS-BY-VALUE ~ map                }....................
# char *return_map(char *variable_name = 'map')
#
# Convert the map with the passed name to a string. Call either expand_Map()
# or expand_map() to losslessly expand this string back to this map.
return_map() {
    die_unless_at_most_one_argument 'expected at most one variable name'

    # Dismantled, this is as in the return_list() function except:
    #
    # * 'kv', a string concatenating all map keys and values, delimited by whitespace.
    print "${(qqkv@P)1:-map}"
}

# void expand_Map()
#
# Expand stringified map "Map" to map "map", a convenience alias simplifying
# the more generalized expand_map() function. See return_map() for examples.
alias expand_Map='is_set Map or die "no \"Map\" defined"; eval "$(expand_map map ${Map})"'

#FIXME: Obsolete.
    # Declare a list with the passed name if no such list exists.
#   is_unset "${list_name}" or print "list ${list_name}; "

#   die_unless_list "${list_name}"
#
# Map-specific analogues of the above list-specific functions.
# ....................{ INITIALIZATION                     }....................
#   die_unless_two_to_three_arguments\
#       'expected one string name, one list name, and one optional separator'
#   string string_name="${1}" list_name="${2}" separator="${3}"

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
