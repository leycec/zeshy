#!/usr/bin/env zsh
# ====================[ device                             ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2012 by Cecil Curry.
# See "COPYING" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Device, handling devices and device files.

# ....................{ EXCEPTIONS                         }....................
# void die_unless_device(char *pathname, char *error_message = '')
#
# Throw an exception unless the passed device file exists.
die_unless_device() {
    die_unless_one_or_two_args\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_device "${pathname}" or
        die "${2:-\"${pathname}\" not found or not a device}"
}

# ....................{ TESTS                              }....................
# bool is_device(char *pathname)
#
# Return true if the passed path is an existing device file (i.e., either block-
# or character-special).
is_device() {
   die_unless_one_arg 'expected one pathname'
   is -b "${1}" or -c "${1}" si
}

# ....................{ GETTERS                            }....................
# char *get_first_device(char *filename1, *filename2, ...)
#
# Get the absolute path of the first device file in the passed list of filenames
# to exist or raise an exception if no such file exists.
get_first_device() {
    # Dismantled, this is:
    #
    # * "-", resolving symbolic links prior to matching.
    # * "%", matching device files.
    get_first_path_matching_glob_qualifiers\
        'a device file' 'device files'\
        '-%' "${@}"
}

# char *get_random_decimal_device(void)
#
# Get the absolute path of the first random number-generating device file in the
# following list to exists:
#
# * "/dev/frandom", a non-blocking generator commonly cited as faster than
#   "/dev/urandom", but available only after installing third-party software.
# * "/dev/erandom", a non-blocking generator by the same author as
#   "/dev/frandom", but consuming no entropy.
# * "/dev/urandom", the canonical non-blocking generator.
# * "/dev/random", the canonical blocking generator.
get_random_decimal_device() {
    die_if_args
    get_first_device /dev/{f,e,u,}random
}

# --------------------( WASTELANDS                         )--------------------
#   utter "really format "${device_file}" as ${filesystem_type}? [yes/no] "
#   string is_sure
#   read   is_sure
#   if is "${is_sure}" == y || "${is_sure}" == ye || "${is_sure}" == yes si; then
#       utter      "formatting \"${device_file}\" as ${filesystem_type}..."
