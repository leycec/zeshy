#!/usr/bin/env zsh
# ====================[ processor                          ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Processor, handling CPU profiling and reporting.

# ....................{ GETTERS                            }....................
# char *get_processor_profile_file(void)
#
# Get the absolute filename of the pseudo-file containing human-readable
# profiles of processors on the current machine.
get_processor_profile_file() {
    die_if_args
    string filename

    #FIXME: Generalize to BSD, etc.
    filename='/proc/cpuinfo'
    die_unless_file "${filename}"
    sputter "${filename}"
}

# ....................{ GETTERS ~ load                     }....................
#FIXME: Incorporate into "theme/prompt".
# float get_processor_load_as_one_minute_normalized_average(void)
#
# Get the system load averaged over the last minute normalized by the number of
# available logical processors. This is a non-negative float rounded to four
# decimal places of accuracy such that:
#
# * If 0.00 to 0.33, the system is extremely underloaded.
# * If 0.33 to 0.66, the system is moderately underloaded.
# * If 0.66 to 0.99, the system is slightly underloaded.
# * If 1.00, the system is perfectly loaded.
# * Else, system load is greater than 1.00 and the system is overloaded. One or
#   more processes are currently CPU starved - and should be terminated.
get_processor_load_as_one_minute_normalized_average() {
    get_processor_load_as_normalized_average_from_word -3
}

# float get_processor_load_as_five_minute_normalized_average(void)
#
# Get the system load averaged over the last five minutes normalized by the
# number of available logical processors. See
# get_processor_load_as_five_minute_normalized_average() for details.
get_processor_load_as_five_minute_normalized_average() {
    get_processor_load_as_normalized_average_from_word -2
}

# float get_processor_load_as_fifteen_minute_normalized_average(void)
#
# Get the system load averaged over the last fifteen minutes normalized by the
# number of available logical processors. See
# get_processor_load_as_fifteen_minute_normalized_average() for details.
get_processor_load_as_fifteen_minute_normalized_average() {
    get_processor_load_as_normalized_average_from_word -1
}

# float get_processor_load_as_normalized_average_from_word(int word_index)
#
# Get the system load averaged over the time period implied by the passed word
# index into the output of "uptime" normalized by the number of available
# logical processors. This function is a helper intended to be called only by
# the get_processor_load_as_*_minute_normalized_average() family of functions.
get_processor_load_as_normalized_average_from_word() {
    # Capture "uptime" output, resembling:
    #     27:17:57 up  3:17,  1 user,  load average: 0.15, 0.12, 0.10
    die_unless_one_arg 'expected one field index'
    die_unless_integer "${1}"
    integer word_index=${1}
    string uptime_output; uptime_output="$(uptime)"

    # Unnormalized processor load. Dismantled, this is:
    #
    # * "[(w)-3]", expanding to the third to last word of the output.
    # * "%,", removing the trailing comma if present.
    float uptime_load; uptime_load="${uptime_output[(w)${word_index}]%,}"

    # Normalize such load by the number of logical processors, rounded to four
    # decimal places of accuracy.
    integer processor_count; processor_count=$(get_logical_processor_count)
    round_float $(( uptime_load / processor_count )) 4
}

# ....................{ GETTERS ~ counts                   }....................
# int get_logical_processor_count(void)
#
# Get the number of logical processors available in the current machine. If
# this machine supports CPU hyperthreading, this is the number of physical
# threads of physical cores of physical CPUs; else, the number of physical
# cores of physical CPUs.
get_logical_processor_count() {
    die_if_args

    #FIXME: This is probably Linux-specific. *massive shrug*
    string proc_filename; proc_filename="$(get_processor_profile_file)"
    cat "${proc_filename}" | get_pcre_line_match_count '^processor\s*:'
}

# int get_physical_processor_count(void)
#
# Get the number of physical processors available in the current machine. If
# this machine supports CPU hyperthreading, this is the return value of
# get_logical_processor_count() less the number of logical threads; else,
# get_logical_processor_count().
get_physical_processor_count() {
    #FIXME: Also implementable on "/proc/cpuinfo" itself, but much more
    #long-winded and requires Zeshyfication:
    #
    #   cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l
    #
    #To quote: "This command squishes the /proc/cpuinfo physical id and core id for
    #each logical CPU on to the same line, and then sorts them and runs uniq to
    #remove the extra hyperthreading logical CPU's. The final result is the number
    #of CPU cores on your Linux system." Courtesy:
    #
    #   https://www.ibm.com/developerworks/mydeveloperworks/blogs/brian/entry/linux_show_the_integer_of_cpu_cores_on_your_system17?lang=en
    #
    #Quite clever, actually.
    die_if_args
    die_unless_installed lscpu

    # The number of uncommented lines "lscpu -p" outputs very concisely yields
    # the number of physical processors.
    lscpu -p | get_pcre_line_match_count '^\d+,'
}

# ....................{ PRINTERS                           }....................
# char *print_processor_load(void)
#
# Print a human-readable profile of current system load as running averages.
print_processor_load() {
    die_if_args
    uptime
}

# void print_processor(void)
#
# Print a human-readable profile of all processors (e.g., threads on cores on
# CPUs on sockets on nodes) the current machine exposes.
print_processor() {
    die_if_args

    {
        # If "lscpu" is installed, run that first. "lscpu" prints a helpful
        # synopsis, if somewhat lacking in detail.
        is_installed lscpu and {
            utter_first_section 'running "lscpu"...'
            lscpu
        }

        # Print the contents of the processor profile file.
        string proc_filename; proc_filename="$(get_processor_profile_file)"
        is_file "${proc_filename}" and {
            utter_next_section "printing \"${proc_filename}\"..."
            print_text_file_paged '/proc/cpuinfo'
        }
    } | run_paged
}

# --------------------( WASTELANDS                         )--------------------
        # Otherwise, raise an exception.
#       else die '"lscpu" not installed and "/proc/cpuinfo" not found'

    # Capture "uptime" output, resembling:
    #     27:17:57 up  3:17,  1 user,  load average: 0.15, 0.12, 0.10
#   die_if_args
#   string uptime_output; uptime_output="$(uptime)"

    # Unnormalized processor load. Dismantled, this is:
    #
    # * "[(w)-3]", expanding to the third to last word of the output.
    # * "%,", removing the trailing comma.
#   float uptime_load; uptime_load="${uptime_output[(w)-3]%,}"

    # Normalize such load by the number of logical processors, rounded to four
    # decimal places of accuracy.
#   integer processor_count; processor_count=$(get_logical_processor_count)
#   round_float $(( uptime_load / processor_count )) 4
#Quite clever, actually. Though, it's probably far easier to simply parse the
#machine-readable output of "lscpu -p"; theoretically, the number of lines
#output by "lscpu -p" *NOT* prefixed with "#" are the number of physical
#processors. (Double-check, of course.)

# int get_cpu_physical_core_count(void)
#
# Get the number of physical CPU cores available in the current machine. This
# excludes available logical CPU cores (e.g., hyperthreaded cores).
#get_cpu_physical_core_count() {
#    die_if_args
#    sputter ${"${"$(free -bt)"[(f)2]}"[(w)2]}
#}

# int get_cpu_logical_core_count(void)
#
# Get the number of logical CPU cores available in the current machine. This
# includes physical cores and logical cores the hardware makes available (e.g.,
# hyperthreaded cores).
#get_cpu_logical_core_count() {
#    die_if_args
#    cat /proc/cpuinfo | grep processor | wc -l
#}
# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#
# Copyright 2007-2012 by Cecil Curry.
#
#   http://www.raiazome.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
