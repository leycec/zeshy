#!/usr/bin/env zsh
# ====================[ list                               ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy List, handling file and directory sizes (i.e., disk usage).

# ....................{ ALIASES                            }....................
is_zeshy_wrapping_core_commands and
interactive_alias du='print_path_size_sorted'

# ....................{ GETTERS                            }....................
# int get_path_size(char *pathname)
#
# Get the size in bytes of the passed path. If such path is:
#
# * A directory, this is the recursive disk usage reported by the "du" command.
# * A symbolic link, this is the non-dereferenced file size of such link. To get
#   the dereferenced file or directory size of the non-symbolic target of such
#   link, explicitly call canonicalize_path() prior to this function.
# * Anything else (e.g., device node, plain file), this is the typical file size
#   reported by the "stat" command.
# 
# Regardless of type, such size is always the physical space allocated to such
# path by the filesystem containing such path and *NOT* the logical space such
# path pretends to consume (e.g., due to contiguous runs of logical zeroes in
# the case of sparse files).
get_path_size() {
    # Localize and validate passed arguments.
    die_unless_one_arg 'expected one pathname'
    string pathname="${1}"
    die_unless_found "${pathname}"

    # If the passed path is a directory, get its recursive disk usage.
    # Dismantled, this is:
    #
    # * "-s", a summary of the form "4815162342 /the/numbers".
    # * "-B1", in bytes rather than the default kilobytes.
    # * "[(w)1]", the first word and hence size in bytes.
    if is_dir "${pathname}"; then
        string disk_usage_summary="$(command du -s -B1 "${pathname}")"
        return_integer ${disk_usage_summary[(w)1]}
    # Otherwise, the passed path is a non-directory file (e.g., symbolic link,
    # device node, plain file). Dismantled, this is:
    #
    # * "-L", preserving rather than dereferencing symbolic links. (In contrast
    #   to some commands, zstat() dereferences by default.)
    # * "+size", expanding to such file's size in bytes.
    else zstat -L +size "${pathname}"
    fi
}

# ....................{ PRINTERS                           }....................
# char *print_path_size(char *pathname1, char *pathname2, ...)
#
# List disk usage for the passed paths (defaulting to the current directory)
# recursively.
print_path_size() {
    run_with_options 'run_paged command du' 'ZESHY_DU_OPTIONS' "${@}"
}

# char *print_path_size_sorted(char *pathname1, char *pathname2, ...)
#
# List disk usage for the passed paths (defaulting to the current directory)
# recursively, sorted by descending usage.
print_path_size_sorted() {
    run_with_options "run_paged 'command du" 'ZESHY_DU_OPTIONS' "${@}"\
        "| sort -hr'"
}

# ....................{ WASTELANDS                         }....................
# * Symbolic link, this is the dereferenced size of the non-symbolic link such
#   link transitively links to (i.e., of the eventual target file or directory).
#Dismantled, this is:
    #
    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.    # * "-L", *NOT* dereferencing symbolic links. (Oddly, zstat() dereferences
    #   symbolic links by default.)
    # * "+size", expanding to such file's disk usage in bytes.
#   else zstat -L +size "${pathname}"
#FIXME: Rename to list_path_size*() in conformance with get_path_size().

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
