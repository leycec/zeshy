#!/usr/bin/env zsh
# ====================[ pathname                           ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Pathname.
#
# --------------------( TODO                               )--------------------
# * It'd be nice to render remove_filename() an uber-powerful meta-remove command used in
#   place of "rmdir", "rm -rf *", etc. The essential ideas are:
#   * Add a config file option ${ZESHY_IS_RECYCLING}, disabled by default but, when
#     enabled, auto-moving all removed files to a new path
#     "${ZESHY_RECYCLE_BIN)/$(date +'%N')/', the former defaulting to
#     "${HOME}/tmp/zeshy.recycled". This effectively guarantees no
#     collision (still test such collision, and simply repeat until non-colliding).
#     I'll probably enable this locally, I imagine. Obviously, such auto-moving
#     such test for sufficient free disk space on the mounted disk to be moved to
#     prior to doing so and fail with error if insufficient disk space remains.
#     *ALSO*, note that no recycling must be done on paths in the recycler: an "rm"
#     within the recycler is always perma-death.
#   * Add implicit support for "rmdir". Basically, if the passed path is an empty
#     directory, use "rmdir"; otherwise, either "rm -ri ${DIRNAME}" or
#     "rm -rI ${DIRNAME}", depending on how many files or subdirectories exist
#     in such directory.
# * It'd be nice to incorporate "zmv", for those who want and/or expect it.
#   "zmv" is a built-in shell function applying extended glob patterns to
#   the usual "mv" command, thus allowing batch renaming of file- and path-names.
#   (Use option "-n" before permanently applying any such pattern, so as to
#   prete[n]d- apply the pattern as initial "trial run;" or, use option "-i" to
#   force "zmv" to [i]nteractively ask your permission to perform each rename.)
#   For example: zmv -n '(*).txt' '$1.xtx'  # renames files ending in 'txt' to
#   end in 'xtx'. Naturally, "zmv" is an autoloadable function: e.g.,
#   autoload -U zmv

# ....................{ EXCEPTIONS                         }....................
# void die_unless_found(char *pathname, char *error_message = 'not found')
#
# Raise an exception unless the passed path exists.
die_unless_found() {
    die_unless_one_or_two_arguments\
        'expected one pathname and optional error message'
    string pathname="${1}"
    is_found "${pathname}" or die "${2:-\"${pathname}\" not found}"
}

# ....................{ TESTS                              }....................
# bool is_found(char *pathname)
# 
# Return true if the passed path exists.
is_found() {
    die_unless_one_argument 'expected exactly one pathname'
    is -e "${1}" si
}

# bool is_runnable(char *pathname)
# 
# Return true if the passed path exists and is runnable by the current user.
is_runnable() {
    die_unless_one_argument 'expected exactly one pathname'
    is -x "${1}" si
}

# bool is_readable(char *pathname)
# 
# Return true if the passed path exists and is readable by the current user.
is_readable() {
    die_unless_one_argument 'expected exactly one pathname'
    is -r "${1}" si
}

# bool is_writable(char *pathname)
# 
# Return true if the passed path exists and is writable by the current user.
is_writable() {
    die_unless_one_argument 'expected exactly one pathname'
    is -w "${1}" si
}

# bool is_absolute_path(char *pathname)
#
# Return true if the passed path is absolute (i.e., begins with an "/"),
# regardless of whether it actually exists.
is_absolute_path() {
    die_unless_one_argument 'expected exactly one pathname'
    is "${1[1]}" == '/' si
}

# ....................{ GETTERS                            }....................
# char *canonicalize_pathname(char *pathname)
#
# Get the canonicalized form of the passed absolute path. Canonicalization
# reduces this path to standard form, such that two canonical paths are equal
# if and only if they represent the same file. Note that this is not
# necessarily the case with non-canonical paths (e.g., "/tmp" and
# "/tmp/../tmp/./" are not equal but represent the same directory).
# Specifically, canonicalization:
#
# * Expands every pseudo-directory component (e.g., "./", "../") iteratively,
#   until the resulting path contains no pseudo-directory components.
# * Expands every symlink in every component of the passed path recursively,
#   until the resulting path contains no symlinks.
canonicalize_pathname() {
    die_unless_one_argument 'expected exactly one pathname'
    string pathname="${1}" 
    die_unless_found "${pathname}"
    print "${pathname}"(:A)
#   string canonical_pathname=( "${pathname}"(:A) )
#   is_nonempty "${canonical_pathname}" or die "\"${pathname}\" "
}

# char *get_basename(char *pathname)
#
# Get the basename of the passed path (i.e., sans parent directory name).
get_basename() {
    die_unless_one_argument 'expected exactly one pathname'
    print "${1:t}"
}

# char *get_dirname(char *pathname)
#
# Get the dirname of the passed path (i.e., sans basename).
get_dirname() {
    die_unless_one_argument 'expected exactly one pathname'
    print "${1:h}"
}

# char *get_filename_sans_filetype(char *filename)
#
# Get the filename of the passed filename sans filetype. If this filename has
# no filetype, this is the filename itself. By design, this only excludes the
# rightmost filetype: e.g.,
#
#     >>> get_basename_sans_filetype '/endymion/hastur.tar.gz'
#     /endymion/hastur.tar
get_filename_sans_filetype() {
    die_unless_one_argument 'expected exactly one filename'
    print "${1%.*}"
}

# char *get_filetype(char *filename)
#
# Get the filetype of the passed filename. If this filename has no filetype,
# this is the empty string. Note the only matches the rightmost filetype: e.g.,
#
#     >>> get_filetype 'hastur.tar.gz'
#     gz
get_filetype() {
    die_unless_one_argument 'expected exactly one filename'
    string filename="${1}"
    string filetype="${filename##*.}"

    # If this filename has no filetype, then the prior parameter expansion
    # matched the filename itself, in which case we test for and ignore this. 
    is "${filetype}" == "${filename}" si or print "${filetype}"
}

# ....................{ GETTERS ~ mtime                    }....................
# int get_modification_time(char *pathname)
#
# Get the mtime (i.e., modification time) of the passed path in Unix time,
# reflecting the most recent time of path creation or change of path content
# (i.e., file content for files and the list of files and subdirectories for
# directories), filename, or permissions. For directories, mtime does *NOT*
# reflect change of file or subdirectory content or permissions.
get_modification_time() {
    die_unless_one_argument 'expected exactly one pathname'
    zstat +mtime "${1}"
}

# int get_modification_time_recursive(char *pathname)
#
# Get the recursive mtime (i.e., modification time) of the passed path in Unix
# time. For files, this is the same time as returned by the non-recursive
# get_modification_time() function. For directories, this reflects the most recent time
# of recursive path creation or change of path content, filename, or
# permissions. This function is considerably more costly than get_modification_time().
get_modification_time_recursive() {
    die_unless_one_argument 'expected exactly one pathname'
    string pathname="${1}"

    if is_file "${pathname}"
    then get_modification_time "${pathname}"
    elif is_dir "${pathname}"
    # Dismantled, this is:
    #
    # * "${pathname}"/**/*, all files and subdirectories of this directory.
    # * "om", such files and subdirectories in ascending order by mtime.
    # * "[1]", the first and hence newest such file or subdirectory.
    then get_modification_time "${pathname}"/**/*(om[1])
    else die "\"${pathname}\" not found or not a file or directory"
    fi
}

# ....................{ SETTERS ~ mtime                    }....................
# void set_modification_time(char *pathname, int mtime)
#
# Set the mtime (i.e., modification time) of the passed path in Unix time.
set_modification_time() {
    die_unless_two_arguments 'expected exactly one pathname and one mtime'
    string pathname="${1}"
    integer mtime="${2}"
    die_unless_found "${pathname}"
    touch -m --date=@"${mtime}" -- "${pathname}"
}

# ....................{ WRITERS                            }....................
# void remove_path(char *pathname1, char *pathname2, ...)
#
# Permanently remove the passed files.
remove_path() {
    die_unless_at_least_one_argument 'expected at least one pathname'

    # If called from an interactive shell, require the user confirm deletion.
    if is_interactive; then
        # If the caller passed no more than three files to be deleted, require
        # manual confirmation for each such deletion.
        if (( # <= 3 ))
        then rm -i -- "${@}"
        # Otherwise, require only one initial confirmation implicitly covering
        # all such deletions.
        else rm -I -- "${@}"
        fi
    # Otherwise, delete without confirmation.
    else rm -- "${@}"
    fi
}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
