#!/usr/bin/env zsh
# ====================[ grep                               ]====================
#                     [ Time-stamp: "2009-04-18 19:29:36 leycec" ]
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Grep, performing recursive pattern matching on file content.
#
# --------------------( TODO                               )--------------------
# * It'd be nice to emit a progress bar for long "grep" operations. Investigate.
#   Yes. It looks like this is halfway there:
#   find . -name "*.rb" | pv | xargs grep
#   Note that we should use "zargs" instead, that we'll need to explicitly pass
#   the total number of files to "pv" (...perhaps it has a mode or option for
#   this already), and that...uhm. Well, it'll be a bit of work, anyway! But
#   it's well doable.

# ....................{ ALIASES                            }....................
interactive_alias g='grep_paths'
interactive_alias grep='grep_paths'
interactive_alias gi='grep_paths_caselessly'
interactive_alias gr='grep_paths_recursively'
interactive_alias gri='grep_paths_recursively_caselessly'

# ....................{ GREP                               }....................
# char *grep_paths(char *grep_argument1, char *grep_argument2, ...)
#
# Match the contents of the passed files against the passed "grep" pattern.
grep_paths() {
    die_unless_at_least_two_arguments\
        'expected at least one grep expression and filename'

    # Call is_interactive() rather than is_interactive_directly(). The embedded
    # conditional below implicitly implements the latter, already.
    if is_interactive; then
        # "grep" command to be run.
        list grep
        grep=( page_safely command grep "${ZESHY_GREP_OPTIONS}" )
#       grep+="${ZESHY_GREP_OPTIONS}"

        # If the topmost function on the function stack is "grep"-specific,
        # the current user called this function directly from the command-line.
        if (( ${#funcstack} == 1 )) or is "${funcstack[-2]}" == grep* si
        then "${grep[@]}" "${ZESHY_GREP_OPTIONS_IF_INTERACTIVE[@]}" "${@}"
        else "${grep[@]}" "${ZESHY_GREP_OPTIONS[@]}" "${@}"
        fi
    # If running non-interactively, pass *NO* Zeshy-specific options to "grep".
    # Doing so breaks non-interactive shell scripts and functions expecting
    # default "grep" behavior (e.g., basic patterns).
    else command grep "${@}"
    fi
}

# char *grep_paths_caselessly(char *grep_argument1, char *grep_argument2, ...)
#
# Match the contents of the passed files against the passed "grep" pattern case-
# insensitively.
grep_paths_caselessly() {
    grep_paths -i "${@}"
}

# ....................{ GREP ~ recursive                   }....................
# char *grep_paths_recursively(char *pattern, char *pathname = '.')
#
# Recursively match the contents of all files in the passed paths (defaulting to
# the current working directory) against the passed "grep" pattern.
grep_paths_recursively() {
    die_unless_at_least_one_argument 'expected at least one grep expression'
    string grep_pattern="${1}"
    shift_one_argument
    grep_paths -r "${grep_pattern}" "${@:-${PWD}}"
}

# char *grep_paths_recursively_caselessly(char *pattern, char *pathname = '.')
#
# Recursively match the contents of all files in the passed paths (defaulting to
# the current working directory) against the passed "grep" pattern case-
# insensitively.
grep_paths_recursively_caselessly() {
    die_unless_at_least_one_argument 'expected at least one grep expression'
    string grep_pattern="${1}"
    shift_one_argument
    grep_paths -ri "${grep_pattern}" "${@:-${PWD}}"
}

#FIXME: Obsolete.
#grep_caseless() {
#    die_unless_at_least_two_arguments\
#        'expected at least one grep pattern and filename'
#
##    # See interactive_alias().
#    disable_function grep
#    if is_interactive; then
#        if (( #funcstack == 1 ))
#        then grep --ignore-case "${ZESHY_GREP_OPTIONS_IF_INTERACTIVE[@]}" "${@}"
#        else grep --ignore-case "${ZESHY_GREP_OPTIONS[@]}" "${@}"
#        fi
#    # If running non-interactively, pass *NO* Zeshy-specific options to "grep".
#    # Doing so breaks non-interactive shell scripts and functions expecting
#    # default "grep" behavior (e.g., basic patterns).
#    else grep "${@}"
#    fi
#    enable_function grep
#}
#
## ....................{ RECURSIVE                          }....................
##FIXME: Reimplement to resemble the implementation of grep(), above.
## char *grep_recursively(char *pattern, char *path)
##
## Recursively match all file contents under the passed path against the passed
## POSIX-style regular expression. If no path is passed, this recursively matches
## under the current path. Thusly, the simplest usage of this shell script is:
##
##   # Find all text files whose contents match "Wisdom ~ \d\d ~ Outlays".
##   >>> grep-recursively 'Wisdom ~ \d\d ~ Outlays'
#grep_recursively() {
#    die_unless_at_least_one_argument 'expected at least a regular expression'
#    string grep_pattern="${1}"; shift
#
##   utter 'grepping...'
#    page_safely grep\
#        --recursive "${ZESHY_GREP_OPTIONS_IF_INTERACTIVE[@]}"\
#        "${grep_pattern}" "${@:-${PWD}}"
#}
#
## char *grep_caseless_recursively(char *pattern, char *path)
##
## Recursively match all file contents under the passed path against the passed
## POSIX-style regular expression, case-insensitively.
#grep_caseless_recursively() {
#    die_unless_at_least_one_argument 'expected at least a regular expression'
#    string grep_pattern="${1}"; shift
#
##   utter 'grepping case-insensitively...'
#    page_safely grep\
#        --recursive "${ZESHY_GREP_OPTIONS_IF_INTERACTIVE[@]}" --ignore-case\
#        "${grep_pattern}" "${@:-${PWD}}"
#}
#
#list ZESHY_GREP_OPTIONS_MORE
#interactive_alias gr="grep ${ZESHY_GREP_OPTIONS_IF_INTERACTIVE[@]}"
#interactive_alias gri="grep ${ZESHY_GREP_OPTIONS_IF_INTERACTIVE[@]}"

# This
#   includes the standard retinue of *NIX commands, like "awk", "grep", "sed", 
#   and so forth.
        #as a directory, ignoring non-text files, dotfiles, and \"test\" subdirectories..."
#FIXME: Bizarre. "grep --include" does absolutely nothing. O_o
#alias grg="grep_glob"
#alias grgi="grep_glob_insensitively"
#
## char *grep_glob(char *grep_pattern, char *glob_expression)
##
## Grep all files matching the passed glob expression (e.g., "*.txt") against the
## passed grep pattern (e.g., "^unity in faith$").
#grep_glob() {
#    [[ ${#} -eq 1 || ${#} -eq 2 ]] ||
#        die "expected at least one regular expression"
#
#    local grep_pattern="${1}"
#    local glob_pattern="${2:-*.txt}"
#
#    utter "grepping \"${glob_pattern}\"..."
#    grep --include "${glob_pattern}" ${=ZESHY_GREP_OPTIONS}\
#        "${grep_pattern}" | "${PAGER}"
#}
#
## char *grep_glob_insensitively(char *grep_pattern, char *glob_expression)
##
## Grep all files matching the passed glob expression (e.g., "*.txt") against the
## passed grep pattern (e.g., "^unity in faith$") insensitively.
#grep_glob_insensitively() {
#    [[ ${#} -eq 1 || ${#} -eq 2 ]] ||
#        die "expected at least one regular expression"
#
#    local grep_pattern="${1}"
#    local glob_pattern="${2:-*.txt}"
#
#    utter "grepping \"${glob_pattern}\" case-insensitively..."
#    grep --include="${glob_pattern}" ${=ZESHY_GREP_INSENSITIVELY_OPTIONS}\
#        "${grep_pattern}"
#}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
