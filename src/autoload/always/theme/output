#!/usr/bin/env zsh
# ====================[ output                             ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Output, theming standard output and error.
#
# --------------------( TODO                               )--------------------
# * Theme support requires a new user-specific "~/.zeshy/theme/" directory
#   containing user-installable themes. For clarity, we should probably shift
#   "~/.zeshy/{completion,compinit,digest.zwc}" to a new "~/.zeshy/cache/"
#   directory. Then, anything under "~/.zeshy" NOT under "~/.zeshy/cache/" is
#   user-configurable. Simple. Hmmm. Interesting. For forward-compatibility,
#   how about a "~/.zeshy/autoload/if_theme/" directory structure instead? The
#   beauty of this setup is that it directly, cleanly "overlays" Zeshy's
#   existing system-wide directory structure. Zeshy should implicitly create
#   such structure where not already found, for safety. Sweeet.

# ....................{ PRINTERS ~ banners                 }....................
# char *utter_banner(void)
#
# Print a single-line banner to standard output demarcating subsequent from
# prior lines. 
utter_banner() {
    die_if_args

    # Empty local variable, required to avoid "parameter not set" errors below.
    string placeholder

    # Dismantled, this is:
    #
    # * "(l:..::..:)", expanding to the second argument padded (i.e., repeated)
    #   to the length specified with the first argument.
    utter_raw ${(l:$(get_terminal_width)::=:)placeholder}
}

# ....................{ PRINTERS ~ newlines                }....................
# void utter_no_newline(char *string1, char *string2, ...)
#
# Print the passed message to standard output with no default trailing newline.
utter_no_newline() {
    string text; text="$(get_script_name): ${@}"
    utter_no_newline_raw "${text}"
}

# void curse_no_newline(char *string1, char *string2, ...)
#
# Print the passed message to standard error with no default trailing newline.
curse_no_newline() {
    string text; text="$(get_script_name): ${@}"
    curse_no_newline_raw "${text}"
}

# ....................{ WASTELANDS                         }....................
# * Theme support really needs to be tightened up. Ideally, all themes should
#   implicitly inherit from "gwydden": which is to say that all theme function
#   implementations should auto-default to the "gwydden" implementation unless
#   implemented by such theme. Fortunately, doing so is pretty simple. Move the
#   "if_theme/gwydden" to "always/theme". Add a new "if_theme/vanilla" theme
#   with empty contents. Then, theme functions implicitly default to their core
#   "always/theme" implementations until overriden by theme-specific functions.

    # Capture command substitution output in a definition to signal TRAPZERR on 
    # command failure.

    #FIXME: Nonsensical. Obliterate all reference to "ZESHY_IS_CRONJOB"
    #everywhere.
    #and, if a cron job, the notice stream of cron's logging facility
#   is_set ZESHY_IS_CRONJOB and logger -p cron.notice -- "${message}"

#FIXME: Rename utter_no_newline() to utter_newlinelessly(), perhaps?

#   #FIXME: Rename run_paged() to page_nicely(). Rename all other *_safely()-style
#functions, as well. (Other possible suffixes: page_well(), page_truly()). Hmmm;
#no, page_nicely is the best fit. It reads well and best describes the
#underlying intent.
#die_unless_args 'expected one command or one or more files to be paged'

    # If the first passed argument is a runnable command, assume the argument
    # list is a command line to be run and do so. Dismantled, this is:
    #
    # * "${(q)@}", quoting this command as required by the run() function.
    # * "1>&1", preserving standard output prior to its subsequent redirection
    #   and hence the assignment of output to variable "output".
    # * "1>&2", redirecting standard output to error. Since command substitution
    #   only captures the former, this immediately prints all output produced by
    #   running such command.
#   string first_arg="${1}" output
#   if is_installed "${first_arg}"
#   then output="$(run "${(q)@}" 1>&1 1>&2)"
    # If the first passed argument is a readable file, assume the argument list
    # is a list of files to be paged and do so.
#   elif is_file "${first_arg}"; then
#       for filename ("${@}") {
#           output+="$(< "${filename}" 1>&1 1>&2)"
#       }
    # Otherwise, throw an exception.
#   else die "\"${first_arg}\" neither an installed command or readable file"
#   fi

#   integer exit_status=${ZESHY_SUCCESS_CODE}
# ....................{ PRINTERS                           }....................
# char *utter_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output. Unlike utter(), this function
# prints no theme-specific embellishment (e.g., ANSI color codes).
#utter_raw() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}"
#}

# char *curse_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard error. Unlike curse(), this function
# prints no theme-specific embellishment (e.g., ANSI color codes).
#curse_raw() {
#    die_unless_args 'expected at least one string'
#    print -- "${@}" 2>&1
#}

# char *utter_no_newline_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
#utter_no_newline_raw() {
#    die_unless_args 'expected at least one string'
#    print -n -- "${@}"
#}

# char *curse_no_newline_raw(char *string1, char *string2, ...)
#
# Print the passed strings to standard output with no default trailing newline.
#curse_no_newline_raw() {
#    die_unless_args 'expected at least one string'
#    print -n -- "${@}" 2>&1
#}

# --------------------( COPYRIGHT AND LICENSE              )--------------------
# The information below applies to everything in this distribution,
# except where noted.
#              
# Copyright 2007-2012 by Cecil Curry.
#   
#   http://www.raiazome.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
