#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *POSIX signals* (i.e., scalar identifiers supporting simple, asynchronous
inter-process and -thread communication).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_signal(
    string signal,
    string error_message = "Signal \"${signal}\" invalid.")

Throw an exception with the passed message unless the passed string is a valid
POSIX signal. See is_signal() for further details.
/---
function :die_unless_signal() {
    die_unless_args_1_to_2 'Expected one signal and optional error message.'
    string signal=${1}
    :is_signal "${signal}" :or :die ${2-Signal \"${signal}\" invalid.}
}

# ....................{ TESTERS                            }....................
#FIXME: Complete documentation by documenting signal formats. *sigh*
:func.doc <<'/---'
[status: bool] :is_signal(string signal)

Report success if the passed string is a valid *POSIX signal* (i.e., a scalar
identifier supporting simple, asynchronous inter-process and -thread
communication). Specifically, report success if such string matches one of the
following formats:
/---
function :is_signal() {
    # Validate sanity.
    die_if_args
    :str signal="${1}"

    # If such signal is an integer, report success only if such integer is one
    # less than an index of canonical list global ${signals}. Since POSIX
    # assigns signals 0-based indices and zsh lists 1-based indices, subtracting
    # by one converts the former to latter.
    if { :int.is "${signal}" } {
        { (( 0 <= signal && signal <= ${#signals} - 1 )) } =status.report
    # Else, such signal is a string. Report success only if such string is the
    # value of any item of canonical list global ${signals}.
    } else {
        # Since all such items exclude prefix "SIG" (e.g., "TERM" rather than
        # "SIGTERM"), strip such prefix from such string if found.
        :Str.remove_prefix signal 'SIG'

        # If such signal exists, report success.
        if { is_list_item signals "${signal}" } {
            :success.report
        }
    }
}

# ....................{ PRINTERS                           }....................
#FIXME: Colorize. UTF8ize. You know the stylish drill.
:func.doc <<'/---'
string :print_signals()

Print a human-readable synopsis of all signals available on the current system.
For each such signal, print the signal number and name identifying such signal.
/---
function :print_signals() {
    # Validate sanity.
    die_if_args
    list signal_mappings

    #FIXME: The list global ${signals} is rather unhelpful. For example, it
    #fails to specify SIGRTMIN. (To be fair, neither do kill() or "/bin/kill"
    #-- which is actually fairly concerning. How does one reliably determine
    #their values, if at all?) For another thing, the indices of the list are
    #clearly "off by one", as demonstrated below. Create new map globals
    #${ZY_SIGNAL_NUMBER_TO_NAME} and ${ZY_SIGNAL_NAME_TO_NUMBER}, probably
    #initialized from ${signals} in a precompilation function.
    #FIXME: Use such maps here rather than ${signals} to avoid such off by one
    #issues.
    #FIXME: Strip SIGZERR and SIGDEBUG from such maps. Such signals *CANNOT* be
    #sent with either the builtin kill() or external "/bin/kill" and hence are
    #not signals in the commonly understand sense. Document this, naturally.
    #FIXME: Prefix single-digit signal numbers with "0" for uniform output.

    # Construct a list of human-readable signal number to name mappings.
    integer signal_number
    for     signal_number ({1..${#signals}}) {
        signal_mappings+="$(( signal_number - 1 ))] SIG${signals[signal_number]}"
    }

    # Columnate such list. Since there typically exist 32 canonical signals,
    # columnating into five columns tends to produce a quasi-rectangle of
    # approximately equally long columns.
    join_list_into_column_count_vertical signal_mappings 5
}

# ....................{ SIGNALERS ~ pid                    }....................
:func.doc <<'/---'
void :signal_pid(int pid1, ..., string signal)

Signal all processes with the passed IDs with the passed POSIX signal. See
:is_signal() for further details.
/---
function :signal_pid() {
    # Validate sanity.
    die_unless_args_2_or_more 'Expected one or more PIDs and one signal.'
    :str signal="${@[-1]}"
    :list signal_command
    :die_unless_signal "${signal}"
    pop_arg

    # If such signal is in integer format, pass the corresponding option.
    if { :int.is "${signal}" } {
        signal_command=( kill -n "${signal}" )
    # Else, such signal is in string format. Pass the corresponding option.
    } else {
        signal_command=( kill -s "${signal}" )
    }

    # Signal such processes.
    :str pid
    for     pid ("${@}") {
        die_unless_pid "${pid}"
        "${signal_command[@]}" "${pid}"
    }
}

:func.doc <<'/---'
void :signal_pid_interrupt(int pid1, ...)

Signal all processes with the passed IDs with the *interrupt signal* (i.e.,
SIGINT). See run_hook_on_signal_interrupt() for further details.
/---
function :signal_pid_interrupt() {
    die_unless_args 'Expected one or more PIDs.'
    :signal_pid "${@}" INT
}

:func.doc <<'/---'
void :signal_pid_user1(int pid1, ...)

Signal all processes with the passed IDs with the *first user-defined signal*
(i.e., SIGUSR1). See run_hook_on_signal_user1() for further details.
/---
function :signal_pid_user1() {
    die_unless_args 'Expected one or more PIDs.'
    :signal_pid "${@}" USR1
}

:func.doc <<'/---'
void :signal_pid_user2(int pid1, ...)

Signal all processes with the passed IDs with the *second user-defined signal*
(i.e., SIGUSR2). See run_hook_on_signal_user1() for further details.
/---
function :signal_pid_user2() {
    die_unless_args 'Expected one or more PIDs.'
    :signal_pid "${@}" USR2
}

# ....................{ SIGNALERS ~ command                }....................
:func.doc <<'/---'
void :signal_processes(string command_name, string signal)

Signal all processes running the passed command with the passed POSIX signal.
See :is_signal() for further details.
/---
# If "pkill" is pathable, prefer such command.
if { :pathable.is pkill } {
    function :signal_processes() {
        # Validate sanity.
        die_unless_args_2 'Expected one command name and one signal.'
        :str command_name="${1}" signal="${2}"
        :die_unless_process "${command_name}"
        :die_unless_signal "${signal}"

        # Signal such processes. Call "pkill" according to whether the absolute
        # path or only basename of such command was passed.
        if { :path.is_absolute "${command_name__sltppif}" } {
            command pkill --signal "${signal}" --exact --full -- "${command_name}"
        } else {
            command pkill --signal "${signal}" --exact        -- "${command_name}"
        }
    }
# Else if "killall" is pathable *AND* the current operation system is *NOT* a
# Unix System V derivative (e.g., Solaris), prefer such command. Under such
# systems, "killall" exists but behaves inherently destructively, sending *ALL*
# processes the current user has permissions to signal (rather than merely
# matching processes) such signal. Hence, such command behaves particularly
# catastrophic when run as the superuser.
} elif { :pathable.is killall and not :is_os_trait_sysv } {
    function :signal_processes() {
        # Validate sanity.
        die_unless_args_2 'Expected one command name and one signal.'
        :str command_name="${1}" signal="${2}"
        :die_unless_process "${command_name}"
        :die_unless_signal "${signal}"

        #FIXME: We probably also want to pass "--verbose" if interactive,
        #suggesting the run_code_with_options() approach.

        # Signal such processes. Unlike "pkill", "killall" implicitly detects
        # whether the absolute path or only basename of such command was passed.
        command killall --exact -- "${command_name}"
    }
# Else, fallback to manually finding and signalling all such processes.
} else {
    function :signal_processes() {
        # Validate sanity.
        die_unless_args_2 'Expected one command name and one signal.'
        :str command_name="${1}" signal="${2}"
        :list process_pids
        :die_unless_signal "${signal}"

        # Get the PIDs of all such processes if found or throw an exception.
        :set_list_to_process_pids process_pids "${command_name}"

        # Signal such processes.
        :signal_pid "${process_pids[@]}"
    }
}

:func.doc <<'/---'
void :signal_processes_user1(string command_name)

Signal all processes running the passed command with the *first user-defined
signal* (i.e., SIGUSR1). See run_hook_on_signal_user1() for further details.
/---
function :signal_processes_user1() {
    die_unless_arg 'Expected one command name.'
    :signal_processes "${1}" USR1
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Obviously insufficient. We need to map such process name to the set
#of all PIDs matching such name and call :signal_pid() for each.
#FUXME: Looks like there's a few ways. Hmm... wait! If "pkill" is installed,
#such command provides a single, succinct means of implementing this
#function. As fallback, call :set_list_to_process_pids_if_found() and then
#iterate such list, calling builtin kill() on each such PID.
#FUXME: Alternatives also include "killall".

        # # If such signal is in integer format, pass the appropriate option.
        # if { :int.is "${signal}" } {
        #     :die "Hurp!"
        # # Else, such signal is in string format. Pass the appropriate option.
        # } else {
        #     :die "Burp!"
        # }

        #FUXME: Ideally, we want to call is_list_index(). Unfortunately, that
        #functions accept negative indices as well. Perhaps we want a new
        #:is_list_index_nonnegative() tester? Right. Sounds good!

# string convert_list_to_string_columns_vertical(
# | command pr -5 -t
    #FUXME: zeshify "pr". Nice command; no reason we can't implement it
    #ourselves, yes? This is particularly important, as we'll be embedding ANSI
    #escape sequences in such strings and thus mucking with their perceived
    #length. Does "pr" portably handle such sequences? Somehow, I doubt it.
