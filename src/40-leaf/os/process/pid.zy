#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*PIDs* (i.e., process identifiers).
/---

#FIXME: Refactor getters into setters. *sigh*

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
:void die_unless_pid(
    :int pid
    ?:str error_message='Process ${pid} not found (i.e., no process running with such ID).')

Throw an exception with the passed message unless there exists a process with
the passed PID.

== See Also ==

* is_pid().
/---
function die_unless_pid() {
    die_unless_args_1_to_2 'Expected one process ID and optional error message.'
    is_pid "${1}" :or {
        :str pid="${1}"
        :die ${2-Process ${pid} not found (i.e., no process running with such ID).}
    }
}

# ....................{ TESTERS                            }....................
#FIXME: Improve example.
#FIXME: We're unconvinced that the external "kill" command *DOES* reliably
#output "no such process" in a cross-platform portable manner. At the very
#least, we should probably prefix such command by "LANG=C"; but, will even that
#suffice? Probably not. Honestly, we probably just need to implement OS X- and
#BSD-specific implementations. Kludgy cleverness only gets us so far.

# If:
#
# * The current OS is Linux, this test is efficiently implementable by testing
#   whether a "/proc" subdirectory with this PID exists.
# * Else, fallback to an inefficient OS-agnostic test leveraging signal 0.
#   Signal 0 is a poorly documented pseudo-signal. On attempting to send
#   signal 0 to a process, kill() returns success only if such process exists
#   and the current user has permission to signal such process. Specifically,
#   according to "man 2 kill":
#     "If sig is 0, then no signal is sent, but error checking is still
#      performed; this can be used to check for the existence of a process
#      ID or process group ID."
#   While merely sending signal 0 to such process does *NOT* suffice to decide
#   whether such process exists, kill() prints one of the following two error
#   messages to standard error on failure:
#   * When failing due to such process not existing,
#     "kill: kill ${pid} failed: no such process".
#   * When failing due to such process not being signalable by the current
#     user, "kill: kill ${pid} failed: operation not permitted"
#   Hence, match such output to discriminate between the two error conditions.
:declare_func_if_or_noop\
    '[status=:bool] is_pid(:int@nonnegative pid)'\
    ':str pid="${1}"'\
    ':is_os_trait_linux' 'is_dir "/proc/${pid}"'\
    ':else' '
        is_string_suffix\
            "$({ kill -0 "${pid}" } :=stdout)" " no such process"' <<'/---'
Report success if there exists a process with the passed *PID* (i.e., process
ID).

== Examples ==

==========================================
[source]
------------------------------------------
>>> sleep 10s &
>>> is_pid $! :and :stdout.echo "Awaken, young master."
Awaken, young master.
------------------------------------------
==========================================
/---

# ....................{ GETTERS                            }....................
#FIXME: Refactor into a setter (e.g., as set_integer_to_pid_shell_root()).
#FIXME: Define an analogous setter set_integer_to_pid() that *ACTUALLY* sets
#such integer to the PID of the current shell. To do so, expand ${pid} rather
#than ${$}.

:func.doc <<'/---'
:int get_pid()

Process ID (PID) of the main shell owning the current shell.
/---
function get_pid() {
    die_if_args
    :stdout.echo ${$}
}


#FIXME: Generalize to not require "pgrep".
#FIXME: Actually, this is horrible. Eliminate *ENTIRELY* in favor of a setter.

:func.doc <<'/---'
[stdout=:str status=:bool] get_pids_running_command_under_user_if_found(
    :str command_name :str username)

Newline-delimited list of all process IDs (PIDs) running the passed
command as the passed user if at least one such PID exists (i.e., if such
command is currently running) _or_ report failure.
/---
if { :pathable.is pgrep } {
    function get_pids_running_command_under_user_if_found() {
        die_unless_args_2 'Expected one command name and one username.'
        :str command_name="${1}" username="${2}"

        # Return these PIDs.
        {
            if { :path.is_absolute "${command_name}" } {
                command pgrep -u "${username}" -fx "${command_name}"
            } else {
                command pgrep -u "${username}"  -x "${command_name}"
            }
        } :=silent
    }
}

# ....................{ GETTERS ~ name                     }....................
#FIXME: Refactor to set a passed *LIST* variable to all elements of such
#command line rather than such line as a monolithic string. The reason, of
#course, is that the underlying OS internally delimits such string by null
#characters. We want to hide all such abstractions from the caller!
#FIXME: Can this even *BE* implemented outside of a Linux context?
#FIXME: Add example.

:declare_func_if_or_noop\
    ':str get_pid_command_line(:pid pid)'\
    ':str pid="${1}"'\
    :is_os_trait_linux '
        :str command_line
        :file.Text "/proc/${pid}/cmdline" command_line
        :stdout.echo "${command_line}"' <<'/---'
Get the command line of the process with the passed *PID* (i.e., process ID).
While system-specific and hence non-portable, such line is typically a string
consisting of (in order):

* Either the absolute or relative path to the command. In the latter case,
  there is no reliable means of resolving this path into an absolute path.
* Each command line argument passed to such command prefixed by a null
  delimiter (i.e., `\x00`).

Due to such inconsistencies, use such strings _only_ for non-critical display
purposes rather than critical functionality.
/---


#FIXME: This probably doesn't work as expected for scripts preceeded by set
#variables (e.g., "TMP=~/.tmp script.zeshy"). Test; hack; fix! Actually,
#stackoverflow can probably help us here.
#FIXME: Ugh. This is pretty terrible. Do we really still require or desire this?

:func.doc <<'/---'
:str get_pid_command_name(integer pid)

Name of the command running under the process with the passed process ID (PID).
/---
function get_pid_command_name() {
    die_unless_arg 'Expected one PID.'
    :str pid="${1}" command_name command_path
    :list command_line_words

    # List splitting the command-line the current process is running on words.
    # Dismantled, this is:
    #
    # * "(0)", split the command-line on null bytes. By Linux convention (and
    #   hence probably not applicable to other *nix), a null byte delimits each
    #   shell word of such line.
    command_line_words=( "${(0)$(get_pid_command_line "${pid}")}" )
#   :warning.print "pclp: ${command_line_words[@]}"

    # Name of the command such process is running.
    command_name="${command_line_words[1]}"

    # If such process is a zsh script (which it usually is), the absolute path
    # of such command is given by the third string in this list: e.g.,
    #
    #   # For a zeshy script "h3110", this array resembles...
    #   command_line_words=( zsh /usr/bin/zeshy h3110 )
    if { is_string_suffix "${command_name}" 'sh' :and
        (( ${#command_line_words} >= 3 )) } {
        command_path=${command_line_words[3]}
    } else {
        command_path=${command_name}
    }

    # If such path is prefixed by a hyphen, such hyphen symbolically signifies
    # such command to have been a login command. Since such hyphen does *NOT*
    # actually prefix such path, strip such hyphen.
    :Str.remove_prefix "${command_path}" '-'

    # Return the basename of such path.
#   print "\ncommand_line_words: ${command_line_words[@]}"
#   print "command_path: ${command_path}"
    :set_string_to_path_basename command_path "${command_path}"
    :stdout.echo "${command_path}"
}
