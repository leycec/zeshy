#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Processes* (i.e., currently running commands).
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void :die_unless_process(
    string command_name,
    string error_message = "No process running command \"${command_name}\".")

Throw an exception with the passed message unless the passed command is
currently running under some user.
/---
function :die_unless_process() {
    die_unless_args_1_to_2\
        'Expected one command name and optional error message.'
    :str command_name="${1}"
    :is_process "${command_name}" :or
        :die "${2-No process running command \"${command_name}\".}"
}

:func.doc <<'/---'
void :die_unless_process_under_user(
    string command_name,
    string username,
    string error_message =
        "No process running command \"${command_name}\" under user ${username}.")

Throw an exception with the passed message unless the passed command is running
under the passed user.
/---
function :die_unless_process_under_user() {
    die_unless_args_2_to_3\
        'Expected one command name, one username, and optional error message.'
    :str command_name="${1}" username="${2}"
    :is_process_under_user "${username}" "${command_name}" :or
        :die "${3-No process running command \"${command_name}\" under user ${username}.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: bool] :is_process(string command_name)

Report success if there exists at least one process running the passed command
under _any_ user.
/---
function :is_process() {
    die_unless_arg 'Expected one command name.'
    :list process_pids
    :set_list_to_process_pids_if_found process_pids "${1}"
}

#FIXME: Ugh. Reimplement this in terms of a new setter, as above.
:func.doc <<'/---'
[status: bool] :is_process_under_user(string command_name, string username)

Report success if there exists at least one process running the passed command
under the passed user.
/---
function :is_process_under_user() {
    die_unless_args_2 'Expected one command name and one username.'
    { get_pids_running_command_under_user_if_found "${@}" } :=silent
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
void :set_list_to_process_pids(string list_name, string command_name)

Set the passed list (ideally, list set) to the PIDs of all processes currently
running the passed command (in arbitrary order) if at least one such process
exists or throw an exception otherwise. See
:set_list_to_process_pids_if_found() for further details.
/---
function :set_list_to_process_pids() {
    # Ideally, we would simply defer to calling :die_unless_process() here.
    # However, doing so would introduce subtle race conditions: e.g., if such
    # process were created immediately after the call to
    # :set_list_to_process_pids_if_found() but before the call to
    # :die_unless_process(), this function would both fail to set such list
    # *AND* fail to throw an exception.
    die_unless_args_2 'Expected one list name and one command name.'
    :set_list_to_process_pids_if_found "${@}" :or {
        :str command_name="${2}"
        :die "No process running command \"${command_name}\"."
    }
}

:func.doc <<'/---'
[status: bool] :set_list_to_process_pids_if_found(
    string list_name, string command_name)

Set the passed list (ideally, list set) to the PIDs of all processes currently
running the passed command (in arbitrary order) if at least one such process
exists or report failure otherwise.
/---
# If "pidof" is pathable, prefer such command for terseness and efficacy.
if { :pathable.is pidof } {
    function :set_list_to_process_pids_if_found() {
        # Validate sanity.
        die_unless_args_2 'Expected one list name and one command name.'
        :str\
            list_name__sltppif="${1}"\
            command_name__sltppif="${2}"\
            process_pids__sltppif

        # Get a space-delimited string of such PIDs if at least one such process
        # exists or report failure otherwise.
        process_pids__sltppif=$(command pidof -- "${command_name__sltppif}") :or
            :failure.report

        # Set such list to such PIDs.
        :List.str_words\
            "${list_name__sltppif}" "${process_pids__sltppif}"
    }
# Else if "pgrep" is pathable, prefer such command.
} elif { :pathable.is pgrep } {
    function :set_list_to_process_pids_if_found() {
        # Validate sanity.
        die_unless_args_2 'Expected one list name and one command name.'
        :str\
            list_name__sltppif="${1}"\
            command_name__sltppif="${2}"\
            process_pids__sltppif

        # Get a newline-delimited string of such PIDs if at least one such
        # process exists or report failure otherwise. Call "pgrep" according to
        # whether the absolute path or only basename of such command was passed.
        if { :path.is_absolute "${command_name__sltppif}" } {
            process_pids__sltppif=$(command pgrep --exact --full --\
                "${command_name__sltppif}") :or :failure.report
        } else {
            process_pids__sltppif=$(command pgrep --exact --\
                "${command_name__sltppif}") :or :failure.report
        }

        # Set this list to these PIDs.
        :str.Lines "${process_pids__sltppif}" "${list_name__sltppif}" 
    }
# Else, fallback to parsing "ps" output. As such parsing is inevitably fragile,
# this implementation is hardly ideal. Nonetheless, "ps" is effectively
# guaranteed to exist by virtue of its use on all modern Unix derivatives.
} else {
    function :set_list_to_process_pids_if_found() {
        #FIXME: If such command name is prefixed by a hyphen, this probably
        #fails silently unexpectedly horribly. *shrug*

        # Validate sanity.
        die_unless_args_2 'Expected one list name and one command name.'
        :str\
            list_name__sltppif="${1}"\
            command_name__sltppif="${2}"\
            process_pids__sltppif

        # Reduce such command to its basename if passed as a path. Option "-C"
        # passed to "ps" below fails silently if passed a path.
        :remove_path_dirname command_name__sltppif

        # Get a newline-delimited string of such PIDs if at least one such
        # process exists or report failure otherwise. Dismantled, this is:
        #
        # * "-o 'pid='", outputting a newline-delimited string list of all such
        #   PIDs sans prefixing header.
        # * "-C", matching only processes running such command basename.
        process_pids__sltppif=$(command\
            ps -o 'pid=' -C "${command_name__sltppif}") :or :failure.report

        # Set this list to these PIDs.
        :str.Lines "${process_pids__sltppif}" "${list_name__sltppif}"
    }
}
