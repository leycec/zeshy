#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Current user.
/---

#FIXME: Refactor getters into setters.

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void :superuser.die_unless(
   ?:str error_message='User "$(get_user)" has no superuser privileges.')

Throw an exception with the passed message unless the current user currently has
superuser privileges.

== See Also ==

* :superuser.is().
/---
function :superuser.die_unless() {
    die_unless_args_0_to_1 'Expected optional error message.'
    :superuser.is :or :die\
        "${2-User \"$(get_user)\" has no superuser privileges.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] :superuser.is()

Report success only if the current user currently has superuser privileges
(i.e., `root` access), due to either being the superuser *or* receiving
temporarily escalated superuser privileges.
/---
function :superuser.is() {
    die_if_args
    (( $(get_uid_effective) == 0 ))
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_user()

Username of the current user.
/---
function get_user() {
    die_if_args
    :str.return "${USER}"
}

# ....................{ GETTERS ~ path                     }....................
:func.doc <<'/---'
:str get_home()

Absolute pathname of the home directory for the current user.
/---
function get_home() {
    die_if_args
    :str.return "${HOME}"
}

# ....................{ GETTERS ~ id                       }....................
:func.doc <<'/---'
:str get_uid()

User ID (UID) for the current user, a nonnegative integer uniquely identifying
this user.

== See Also ==

* get_uid_effective().
/---
function get_uid() {
    die_if_args
    :str.return "${UID}"
}


:func.doc <<'/---'
:str get_uid_effective()

*Effective user ID (EUID)* (i.e., nonnegative integer uniquely identifying the
user to whom the current user has escalated privileges) for the current user.

If the current user has *no* escalated privileges, this is simply the UID
returned by get_uid().
/---
function get_uid_effective() {
    die_if_args
    :str.return "${EUID}"
}

# ....................{ CHANGERS                           }....................
#FIXME: Implement an equivalent changer for "chfn" as well. ("Change
#fingerprint." Yes. Early UNIX jargon is somewhat... curious.)
#FIXME: In fact, there exist a rather large suite of such commands -- which,
#under FreeBSD at least, appear to all be symbolic links to "chpass". For
#further details, see:
#
#http://www.freebsd.org/cgi/man.cgi?query=chsh&sektion=1
#FIXME: For all such functions, define corresponding generalizations also
#accepting an arbitrary passed user as their first argument: e.g.,
#
#    void :change_user_shell(string username, string shell_name)
#
#Shouldn't be a terribly arduous generalization. Make it so, eh?

:declare_func_if_pathable_or_noop\
    ':void :change_shell(:str shell_name)'\
    ':str shell_name="${1}"'\
    chsh 'command chsh -s "${shell_name}"' <<'/---'
Change the current user's login shell to the passed shell. If such user does
_not_ have superuser privileges and such shell does _not_ appear in the
system-wide list of acceptable login shells (e.g., `/etc/shells`), an exception
is thrown.
/---
