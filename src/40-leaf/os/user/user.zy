#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Local users and groups.
/---

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_user(
   :str username :str error_message='User "${username}" not found.')

Throw an exception with the passed message unless the passed user exists.
/---
function die_unless_user() {
    die_unless_args_1_to_2\
        'Expected one username and optional error message.'
    is_user "${1}" :or {
        :str username="${1}"
        :die "${2-User \"${username}\" not found.}"
    }
}


:func.doc <<'/---'
:void die_unless_group(
   :str group_name ?:str error_message="Group \"${group_name}\" not found.")

Throw an exception with the passed message unless the passed group exists.
/---
function die_unless_group() {
    die_unless_args_1_to_2\
        'Expected one group name and optional error message.'
    is_group "${1}" :or {
        :str group_name="${1}"
        :die "${2-Group \"${group_name}\" not found.}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_user(:str username)

Report success if the passed user exists.
/---
function is_user() {
    die_unless_arg 'Expected one username.'
    is_string_line_match "$(get_users_file_text)" "${1}:"*
}


:func.doc <<'/---'
[status=:bool] is_group(:str group_name)

Report success if the passed group exists.
/---
function is_group() {
    die_unless_arg 'Expected one group name.'
    is_string_line_match "$(get_groups_file_text)" "${1}:"*
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_users_file()

Absolute path of the system-wide users file (e.g., `/etc/passwd`).
/---
function get_users_file() {
    die_if_args
    :stdout.echo '/etc/passwd'
}


:func.doc <<'/---'
:str get_groups_file()

Absolute path of the system-wide groups file (e.g., `/etc/group`).
/---
function get_groups_file() {
    die_if_args
    :stdout.echo '/etc/group'
}

# ....................{ GETTERS ~ content                  }....................
:func.doc <<'/---'
:str get_users_file_text()

Contents of the system-wide users file (e.g., `/etc/passwd`).
/---
function get_users_file_text() {
    die_if_args
    get_file_text "$(get_users_file)"
}


:func.doc <<'/---'
:str get_groups_file_text()

Contents of the system-wide groups file (e.g., `/etc/group`).
/---
function get_groups_file_text() {
    die_if_args
    get_file_text "$(get_group_file)"
}

# ....................{ GETTERS ~ path                     }....................
:func.doc <<'/---'
:str get_user_home(:str username)

Absolute path of the home directory of the passed user.
/---
function get_user_home() {
    die_unless_arg 'Expected one username.'
    :str username="${1}"
    die_unless_user "${username}"

    # Get such directory. Happily, zsh supplies a builtin map for such purpose.
    :stdout.echo "${userdirs[${username}]}"
}

# ....................{ [UN]MAKERS                         }....................
#FIXME: Supporting ${ZY_OPTIONS_USERADD} strikes us as an increasingly poor
#idea, given that "useradd" already has a builtin mechanism for supplying option
#defaults. Excise such functionality and the corresponding functionality for
#:remove_user() below. (This includes the corresponding config files, as well!)

# If:
#
# * "adduser" is pathable, prefer such command. On Debian-based Linux distros,
#   such command is a user-friendly frontend to "useradd" setting sane defaults.
# * "useradd" is pathable, fallback to such command.
:declare_func_if_pathable_or_noop\
    ':void :make_user(+:str usernames)' ''\
    adduser 'command adduser -- "${@}"'\
    useradd '
        run_code_with_options_configured "command useradd"\
            ZY_OPTIONS_USERADD -- "${@}"' <<'/---'
Create all passed local users (i.e., add such users to the local system).
/---


# If:
#
# * "deluser" is pathable, prefer such command. On Debian-based Linux distros,
#   such command is a user-friendly frontend to "userdel" with sane defaults.
# * "userdel" is pathable, fallback to such command.
:declare_func_if_pathable_or_noop\
    ':void :remove_user(+:str usernames)' ''\
    deluser 'command deluser -- "${@}"'\
    userdel 'run_code_with_options_configured "command userdel"\
        ZY_OPTIONS_USERDEL -- "${@}"' <<'/---'
Remove all passed local users (i.e., delete such users from the local system).
/---
