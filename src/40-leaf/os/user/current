#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle the current user.
/---

#FIXME: Refactor getters into setters.

# ....................{ EXCEPTIONS                         }....................
declare_function_with_stdin <<'/---'
void die_unless_superuser(
   string error_message = "User \"$(get_user)\" has no superuser privileges.")

Throw an exception with the passed message unless the current user currently has
superuser privileges. See is_superuser() for further details.
/---
function die_unless_superuser() {
    die_unless_args_0_to_1 'Expected optional error message.'
    is_superuser or :die\
        "${2-User \"$(get_user)\" has no superuser privileges.}"
}

# ....................{ TESTERS                            }....................
declare_function_with_stdin <<'/---'
[status: bool] is_superuser()

Report success if the current user currently has superuser privileges (i.e.,
`root` access) either due to being the superuser or having temporarily
escalated privileges to such user.
/---
function is_superuser() {
    die_if_args
    (( $(get_uid_effective) == 0 ))
}

# ....................{ GETTERS                            }....................
declare_function_with_stdin <<'/---'
string get_user()

Get the username of the current user.
/---
function get_user() {
    die_if_args
    return_string "${USER}"
}

# ....................{ GETTERS ~ path                     }....................
declare_function_with_stdin <<'/---'
string get_home()

Get the absolute path of the home directory for the current user.
/---
function get_home() {
    die_if_args
    return_string "${HOME}"
}

# ....................{ GETTERS ~ id                       }....................
declare_function_with_stdin <<'/---'
string get_uid()

Get the user ID (UID) for the current user, a nonnegative integer uniquely
identifying such user. See also get_uid_effective().
/---
function get_uid() {
    die_if_args
    return_string "${UID}"
}

declare_function_with_stdin <<'/---'
string get_uid_effective()

Get the effective user ID (EUID) for the current user, a nonnegative integer
uniquely identifying the user to whom the current user has escalated privileges.
If the current user has not escalated privileges, this is simply the UID
returned by get_uid().
/---
function get_uid_effective() {
    die_if_args
    return_string "${EUID}"
}

# ....................{ CHANGERS                           }....................
#FIXME: Implement an equivalent changer for "chfn" as well. ("Change
#fingerprint." Yes. Early UNIX jargon is somewhat... curious.)
#FIXME: In fact, there exist a rather large suite of such commands -- which,
#under FreeBSD at least, appear to all be symbolic links to "chpass". For
#further details, see:
#
#http://www.freebsd.org/cgi/man.cgi?query=chsh&sektion=1
#FIXME: For all such functions, define corresponding generalizations also
#accepting an arbitrary passed user as their first argument: e.g.,
#
#    void :change_user_shell(string username, string shell_name)
#
#Shouldn't be a terribly arduous generalization. Make it so, eh?

:declare_func_if_pathable_or_noop\
    ':void :change_shell(:string shell_name)'\
    ':string shell_name="${1}"'\
    chsh 'command chsh -s "${shell_name}"' <<'/---'
Change the current user's login shell to the passed shell. If such user does
_not_ have superuser privileges and such shell does _not_ appear in the
system-wide list of acceptable login shells (e.g., `/etc/shells`), an exception
is thrown.
/---

# --------------------( WASTELANDS                         )--------------------
#declare_function_with_stdin <<'/---'
#string get_pid_dir(string username)
#
#Get the absolute path of the directory containing PID files for the current user.
#See get_user_pid_dir() for further details.
#/---
#function get_pid_dir() {
#    get_user_pid_dir "$(get_user)"
#}

    # Test whether the current user's effective user ID is that of the superuser.
#Get the effective ID of the current user. Such ID can differ from the real ID
#of such user when subject to privelage escalation under `setuid`.
