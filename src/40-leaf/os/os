#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core operating system functionality.
/---

# ....................{ SETTERS                            }....................
declare_function_with_stdin <<'/---'
void :set_string_to_bit_bucket(string string_name)

Set the passed string variable to the absolute path of the system-wide *bit
bucket* (i.e., the world-readable and -writable device file to which ignorable
data may be safely redirected).
/---
function :set_string_to_bit_bucket() {
    die_unless_arg 'Expected one string name.'
    :string.set "${1}" '/dev/null'
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: Fairly horrible. Refactor into a new :set_string_to_os_readable()
#setter. Naturally, we'll also produce a new :set_string_to_os() setter setting
#the passed string to "${OSTYPE}", the strictly lowercase non-human-readable
#equivalent of the former.

# declare_function_with_stdin <<'/---'
# string get_os()
# 
# Get the canonicalized name of the current operating system: e.g.,
# 
# .get_os()
# ==========================================
# [source]
# ------------------------------------------
# >>> get_os
# FreeBSD  # under FreeBSD systems
# Linux    # under GNU/Linux systems
# ------------------------------------------
# ==========================================
# /---
# function get_os() {
#     die_if_args
#     command uname -s
# }

# ....................{ TESTERS                            }....................
#FUXME: Shift under @{always/00-core}.
# declare_function_with_stdin <<'/---'
# [status: bool] :is_os_trait_linux()
# 
# Report success if the current operating system runs the Linux kernel, including
# but _not_ limited to GNU/Linux.
# /---
# function :is_os_trait_linux() {
#     die_if_args
#     is "${OSNAME}" == 'linux-'* si
# }
# 
# declare_function_with_stdin <<'/---'
# [status: bool] is_os_trait_linux_gnu()
# 
# Report success if the current operating system is GNU/Linux.
# /---
# function is_os_trait_linux_gnu() {
#     die_if_args
#     is "${OSNAME}" == 'linux-gnu' si
# }

#FUXME: Architecture support should probably be split into a separate parcel
#@{device/architecture}. Since architecture encompasses both motherboard and CPU
#design, that seems an appropriate spot for it.

# declare_function_with_stdin <<'/---'
# string get_architecture()
# 
# Get the canonicalized name of the current machine architecture: e.g.,
# 
# .get_architecture()
# ==========================================
# [source]
# ------------------------------------------
# >>> get_architecture
# x86_64  # under 64-bit Intel and AMD architectures
# i386    # under 32-bit Intel architectures (older)
# i686    # under 32-bit Intel architectures (recent)
# ------------------------------------------
# ==========================================
# /---
# function get_architecture() {
#     die_if_args
# 
#     if { is_pathable arch } {
#         command arch
#     } else {
#         command uname -m
#     }
# }

#FUXME: Nice, but currently unused. Uncomment when adding support for non-Linux
#POSIX-compatible systems.
# The following functions are OS-specific, and thus defined for each OS-specific
# Zeshy component, elsewhere. By default, each dies with error.

# string get_current_process_basename()
#
# Get the basename of the binary corresponding to the current process.
#get_current_process_basename() { :die "unimplemented on $(get_os)" }

# string get_current_process_command_line()
#
# Get the command line under which the current process is executing. This is a
# single string having these parts:
#
# * Absolute OR relative path to the executable file from which the process was
#   executed. Note that, in the latter case, there is no reliable mechanism for
#   converting the relative path into an absolute path.
#
# Due to the above unreliabilities, this string is best used for displaying non-
# critical log and user interface labels rather than critical functionality.
#get_current_process_command_line() { :die "unimplemented on $(get_os)" }

    # List of all files matching /etc/*_version and /etc/*-version.
#   list version_files; version_files=( /etc/*{_,-}version(.) )

    # If at least one such file matches, take the prefix preceding
    # "-release" in the basename of such filename to be the distro name.
#   if is_list_nonempty version_files; then
#       print "$(capitalize_string "$(get_path_basename "${version_files[1]%[_-]version}")")"
#       report_success
#   fi

# Get the canonicalized name of the current operating system. This name is
# strictly lowercase_string with backslashes replaced by dashes and hence suitable for
# use in pathnames: e.g.,
#
#     >>> get_os
#     FreeBSD  # under FreeBSD systems
#     Linux    # under GNU/Linux systems
    # "uname" reports Linux as "GNU/Linux", so replace backslashes with dashes.
#   print "${$(lowercase_string "$(uname -o)")//\//-}"

#FUXME: Hmm; I could quite see the caller wanting the original name, as well.
    #FUXME: Alternate implementations; keep around!
    #echo $(match_multiline '^Mem:\s+(\d+)' "$(free -bt)")
    #$(cat '/proc/meminfo' | awk -F '[ ]+' '/^MemTotal/ { print $2 }')

#   string os_name="$(lowercase_string "$(uname -o)")"
#   os_name="${os_name//\//-}"
#   print "${os_name}"
