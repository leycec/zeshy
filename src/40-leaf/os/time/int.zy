#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
System time in integer format.
/---

# ....................{ GETTERS ~ period                   }....................
:func.doc <<'/---'
:int get_time_century()

Current century as a two-digit integer.

== Examples ==

.get_time_century()
==========================================
[source]
------------------------------------------
>>> get_time_century
20
------------------------------------------
==========================================
/---
function get_time_century() {
    die_if_args
    command date +'%C'
}


:func.doc <<'/---'
:int get_time_year()

Current year as a four-digit integer.

.get_time_year()
==========================================
[source]
------------------------------------------
>>> get_time_year
1989
------------------------------------------
==========================================
/---
function get_time_year() {
    die_if_args
    command date +'%Y'
}


:func.doc <<'/---'
:int get_time_month()

Current month of the year as a two-digit 01-based integer.

== Examples ==

.get_time_month()
==========================================
[source]
------------------------------------------
>>> get_time_month
11
------------------------------------------
==========================================
/---
function get_time_month() {
    die_if_args
    command date +'%m'
}


:func.doc <<'/---'
integer get_time_day()

Current day of the month as a two-digit 01-based integer.

== Examples ==

.get_time_day()
==========================================
[source]
------------------------------------------
>>> get_time_day
9
------------------------------------------
==========================================
/---
function get_time_day() {
    die_if_args
    command date +'%m'
}


#FIXME: Replace explicitly listing weekdays with a compact table.
:func.doc <<'/---'
:int get_time_weekday()

Current weekday as an integer ranging [1, 7].

This integer is assigned as follows:

.get_time_weekday()
[cols=">,<strong",options="header"]
|===============================================================================
| weekday   | integer
| sunday    | 1
| monday    | 2
| tuesday   | 3
| wednesday | 4
| thursday  | 5
| friday    | 6
| saturday  | 7
|===============================================================================

For example:

.get_time_weekday()
==========================================
[source]
------------------------------------------
# Assuming the current day to be Sunday:
>>> get_time_weekday
1
------------------------------------------
==========================================
/---
function get_time_weekday() {
    # Unlike customary indexing for days, weeks, months, and years, "date"
    # provides days of the week ranging [0, 6]. Increment accordingly.
    die_if_args
    :str.return $(( $(date +'%w') + 1 ))
}


:func.doc <<'/---'
:int get_time_hour()

Current hour as a two-digit integer ranging [00, 23].

== Examples ==

.get_time_hour()
==========================================
[source]
------------------------------------------
>>> get_time_hour
12
------------------------------------------
==========================================
/---
function get_time_hour() {
    die_if_args
    command date +'%H'
}


:func.doc <<'/---'
:int get_time_minute()

Current minute as a two-digit integer ranging [00, 59].

== Examples ==

.get_time_minute()
==========================================
[source]
------------------------------------------
>>> get_time_minute
30
------------------------------------------
==========================================
/---
function get_time_minute() {
    die_if_args
    command date +'%M'
}


:func.doc <<'/---'
:int get_time_second()

Current second as a two-digit integer ranging [00, 59].

== Examples ==

.get_time_second()
==========================================
[source]
------------------------------------------
>>> get_time_second
00
------------------------------------------
==========================================
/---
function get_time_second() {
    die_if_args
    command date +'%S'
}


:func.doc <<'/---'
:int get_time_nanosecond()

Current nanosecond as a nine-digit integer ranging [000000000, 999999999].

== Examples ==

.get_time_nanosecond()
==========================================
[source]
------------------------------------------
>>> get_time_nanosecond
554999445
------------------------------------------
==========================================
/---
function get_time_nanosecond() {
    die_if_args
    command date +'%N'
}

# ....................{ CONVERTERS ~ seconds               }....................
:func.doc <<'/---'
:int convert_weeks_to_seconds(:int weeks)

Convert the passed number of weeks to seconds.

== Examples ==

.convert_weeks_to_seconds()
==========================================
[source]
------------------------------------------
>>> convert_weeks_to_seconds 42
25401600
------------------------------------------
==========================================
/---
function convert_weeks_to_seconds() {
    die_unless_arg 'expected one number'
    :str weeks="${1}"
    :int.die_unless "${weeks}"
    :str.return $(( weeks * 7 * 24 * 60 * 60 ))
}


:func.doc <<'/---'
:int convert_days_to_seconds(:int days)

Convert the passed number of days to seconds.

== Examples ==

.convert_days_to_seconds()
==========================================
[source]
------------------------------------------
>>> convert_days_to_seconds 42
3628800
------------------------------------------
==========================================
/---
function convert_days_to_seconds() {
    die_unless_arg 'expected one number'
    :str days="${1}"
    :int.die_unless "${days}"
    :str.return $(( days * 24 * 60 * 60 ))
}


:func.doc <<'/---'
:int convert_hours_to_seconds(:int hours)

Convert the passed number of hours to seconds.

== Examples ==

.convert_hours_to_seconds()
==========================================
[source]
------------------------------------------
>>> convert_hours_to_seconds 42
151200
------------------------------------------
==========================================
/---
function convert_hours_to_seconds() {
    die_unless_arg 'expected one number'
    :str hours="${1}"
    :int.die_unless "${hours}"
    :str.return $(( hours * 60 * 60 ))
}


:func.doc <<'/---'
:int convert_minutes_to_seconds(:int minutes)

Convert the passed number of minutes to seconds.

== Examples ==

.convert_minutes_to_seconds()
==========================================
[source]
------------------------------------------
>>> convert_minutes_to_seconds 42
2520
------------------------------------------
==========================================
/---
function convert_minutes_to_seconds() {
    die_unless_arg 'expected one number'
    :str minutes="${1}"
    :int.die_unless "${minutes}"
    :str.return $(( minutes * 60 ))
}

# ....................{ SETTERS                            }....................
#FIXME: Rename to :time.set().
:func.doc <<'/---'
:void set_time_unix(:int seconds_since_unix_epoch)

Set the current time in seconds since the Unix epoch (January 1st, 1970).

Since setting this time manually is largely discouraged, consider calling
set_time_with_ntp() instead when network access is available.
/---
function set_time_unix() {
    die_if_args
    :str time_unix="${1}"
    :int.die_unless_positive "${time_unix}"

    #FIXME: Blatantly Linux-specific. *sigh*

    # Set the system clock to such time.
    command date +%s --set="${time_unix}"

    #FIXME: Considered harmful or helpful? Shouldn't most systems do so on
    #shutdown already?
    # Set the hardware clock from the system clock.
    command hwclock --systohc
}


#FIXME: Rename to :time.set_via_ntp().
:func.doc <<'/---'
:void set_time_with_ntp()

Synchronize local system time against remote time servers.

Generally speaking, the `ntpd` daemon should perform this synchronization on
your behalf in the background. Hence, this function should be called _only_ when
this daemon is _not_ currently running (which it really should be) or when this
daemon silently fails to run. The default configuration of `ntpd` makes such
failure unfortunately common: under large clock skew (i.e., local system time
desynchronized from remote time servers by over 15 minutes), the default
configuration of `ntpd` silently fails after roughly 15 seconds of successful
operation. In this case, calling this or a comparable command is the only means
of rejuvenating `ntpd`.

Technically, other ways do exist: adding `tinker panic 0` to `/etc/ntp.conf`,
for example, permits `ntpd` to accept any clock slew regardless of size. Doing
so is generally considered bad form, however. Hence, this function.
/---
function set_time_with_ntp() {
    die_if_args

    #FIXME: Extract into a configuration variable. (It's not POSIX, clearly;
    #perhaps a new "if_config/time" configuration file.)

    # Hostname of the default NTP server (typically, a pool of such servers
    # redirecting to the real NTP server "closest" to the caller).
    :str default_ntp_server='pool.ntp.org'

    #FIXME: See http://en.gentoo-wiki.com/wiki/Time_Synchronization for
    #additional methods. "htpdate" is quite clever, for example: pass it any
    #HTTP server (e.g., "www.linux.org") and it synchronizes the system time
    #against the server's reported time. Nice, assuming the same time zone.

    # Prefer "ntpd", if installed. "ntpd" is both the authoritative server and
    # client for NTP synchronization.
    if { :pathable.is ntpd } {
        # Dismantled, this is:
        #
        # * "-g", accepting arbitrarily large clock skew. Essential.
        # * "-q", exiting after first setting the local system time.
        print_message_item 'synchronizing via "ntpd"...'
        run_code_with_progress_timer 'ntpd -g -q'
    # Prefer "sntp", if installed. "sntp" is the authoritative client for NTP
    # synchronization on mobile devices.
    } elif { :pathable.is sntp } {
        # Dismantled, this is:
        #
        # * "-a", calling adjtime() to slew rather than settimeofday() to skew
        #   the local system time. Whereas skewing often unsafely jumps to the
        #   target time, slewing safely and slowly incrementally approaches the
        #   target time.
        print_message_item 'synchronizing via "sntp"...'
        command sntp -j "${default_ntp_server}"
    # Run a deprecated command, if nothing better is currently installed.
    } elif { :pathable.is ntpdate } {
        :warning.print '"ntpd" and "sntp" not installed'
        print_message_item 'synchronizing via "ntpdate"... (deprecated)'
        command ntpdate "${default_ntp_server}"
    # Else, throw an exception.
    } else {
        :die '"ntpd", "sntp", and "ntpdate" not installed'
    }
}

# ....................{ SLEEPERS                           }....................
#FIXME: Doesn't really belong here. Contemplate a new component "sleep".
:func.doc <<'/---'
:void sleep_seconds(:int seconds)

Idle the current shell for the passed number of seconds.
/---
function sleep_seconds() {
    die_unless_arg 'expected one nonnegative integer'
    :str seconds="${1}"
    :int.die_unless_nonnegative "${seconds}"

    # Sleep for such seconds.
    command sleep -- ${seconds}s
}
