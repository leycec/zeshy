#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core networking functionality.
/---

#FIXME: Interesting prettified UI for ping called "prettyping", seemingly
#written in Bourne shell (!). Strongly upvoted, suggesting quality:
#    http://my.opera.com/CrazyTerabyte/blog/2013/10/18/prettyping-sh-a-better-ui-for-watching-ping-responses
#FIXME: Add implicit support for the "usewithtor" command supplied by "torsocks",
#probably in a new "if_installed/torsocks" component. Since "torsocks" only
#supports a finite (and currently fairly small) subset of networking
#applications, this is reasonably implementable with interactive aliases. For
#a list of supported applications, see: https://code.google.com/p/torsocks/
#FIXME: A larger list of applications not explicitly supported by "usewithtor" is
#implicitly supportable by setting ${http_proxy} and ${HTTP_PROXY} (some
#applications use the former; some the latter) prior to executing such
#applications. Naturally, such globals should only be set if Tor is currently
#running and hence cannot be globally exported. The code simply resembles:
#
#    string_global_export http_proxy='http://127.0.0.1:8118/'
#    string_global_export HTTP_PROXY="${http_proxy}"
#
#Of course, such technique does not require "torsocks". All of this suggests
#implementing a new "os/net/anonymity" component.

# ....................{ GETTERS ~ hostname                 }....................
:func.doc <<'/---'
string :get_host()

Get the current system's *hostname* (i.e., subdomain name assigned such system).
Since such hostname is _not_ necessarily fully qualified (e.g., `ryleh` rather
than `ryleh.cthulhu.com`), consider calling get_host_fully_qualified()
instead.
/---
function :get_host() {
    die_if_args
    :str.output "${HOST}"
}

:func.doc <<'/---'
string get_host_fully_qualified()

Get the current system's *Fully Qualified Domain Name* (i.e., FQDN, a dot-
delimited string usually identical to `$(:get_host).$(get_domain:)`).
/---
function get_host_fully_qualified() {
    die_if_args
    command hostname --fqdn
}

# ....................{ GETTERS ~ domain name              }....................
:func.doc <<'/---'
string get_domain:()

Get the current system's domain name.
/---
function get_domain:() {
    #FIXME: If such command doesn't exist, fallback to parsing the domain name
    #from the current hostname. Or perhaps zsh provides a domain name variable?

    # Call "dnsdomainname" rather than "domainname". Curiously, the latter
    # gets the current NIS rather than DNS domain name. Since DNS (largely)
    # obsoletes NIS on modern systems, this is an unfortunate decision.
    die_if_args
    command dnsdomainname
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
string set_host:(string hostname)

Set the hostname of the current system to the passed string.
/---
function set_host:() {
    die_unless_arg 'Expected one string.'
    command hostname -- "${1}"
}

# ....................{ CONVERTERS                         }....................
:func.doc <<'/---'
string convert_ip_to_domain:(string ip_address)

Get the domain name hosted by the passed IP address. Specifically, perform
reverse lookup with PTR records for such IP address published by the global
domain name servers for the current system.
/---
# If "dig" is installed, prefer such command.
if { is_pathable dig } {
    function convert_ip_to_domain:() {
        # Validate sanity.
        die_unless_args 'Expected one IP address.'
        string ip="${1}" domain
        die_unless_ip "${ip}"

        # Since "dig" prints the empty string if no PTR record maps the passed
        # IP address, detecting such error state requires capturing output.
        domain="$(command dig +short -x -- "${ip}")"
        die_unless_string_nonempty "${domain}"\
            "IP ${ip} not found or associated with no authoritative PTR record."
        :str.output "${domain}"
    }
# Else if "host" is installed, fallback to such command.
} elif { is_pathable host } {
    function convert_ip_to_domain:() {
        # Validate sanity.
        die_unless_args 'Expected one IP address.'
        :str ip="${1}"
        die_unless_ip "${ip}"

        # "host" describes PTR record as follows:
        #
        #     >>> host 182.28.18.27
        #     27.18.28.182.in-addr.arpa domain name pointer e.transcendental.com.
        #
        # Hence, return the fifth field excluding trailing period.
        ip="$(get_string_word "$(command host -- "${ip}")" 5)"
        remove_string_suffix ip '.'
    }
# Else if "nslookup" is installed, fallback to such command. Since "nslookup" is
# principally designed for interactive use, parsing noninteractive output from
# such command is cumbersome and unreliable at best.
} elif { is_pathable nslookup } {
    function convert_ip_to_domain:() {
        # Validate sanity.
        die_unless_args 'Expected one IP address.'
        string ip="${1}"
        die_unless_ip "${ip}"

        #FIXME: Actually implement
        #get_string_first_matching_pcre_multiline_group:!

        # "nslookup" describes PTR records as follows:
        #
        #     >>> nslookup 8.8.8.8
        #     Server:		216.168.96.251
        #     Address:	216.168.96.251#53
        #
        #     Non-authoritative answer:
        #     8.8.8.8.in-addr.arpa	name = google-public-dns-a.google.com.
        #
        #     Authoritative answers can be found from:
        #     8.in-addr.arpa	nameserver = ns2.level3.net.
        #     8.in-addr.arpa	nameserver = ns1.level3.net.
        #     ns1.level3.net	internet address = 209.244.0.1
        #     ns2.level3.net	internet address = 209.244.0.2
        #
        # The desired domain name follows the first "name = " in such output,
        # excluding the suffixing ".".
        get_string_first_matching_pcre_multiline_group:\
            "$(command nslookup "${ip}")" '^.*?name = (.*)\.$'
    }
}

#FIXME: Implement an "nslookup" fallback as well.
:func.doc <<'/---'
string convert_domain_to_ip:(string domain_name)

Get the IP address hosting the passed domain name. Specifically, perform forward
lookup with A records for such domain name published by the authoritative domain
name servers for such domain.
/---
# If "dig" is installed, prefer such command.
if { is_pathable dig } {
    function convert_domain_to_ip:() {
        # Validate sanity.
        die_unless_args 'Expected one domain name.'
        string domain="${1}" ip

        # "dig" outputs the empty string if no A record maps the passed domain
        # name. Testing such condition requires capturing "dig" output.
        ip="$(command dig +short -- "${domain}")"
        die_unless_string_nonempty "${ip}"\
            "Domain \"${domain}\" not found or associated with no authoritative A record."
        :str.output "${ip}"
    }
# Else if "host" is installed, fallback to such command.
} elif { is_pathable host } {
    function convert_domain_to_ip:() {
        # Validate sanity.
        die_unless_args 'Expected one domain name.'
        string domain="${1}" ip

        # "host" describes A records as follows:
        #
        #     >>> host -t a e.transcendental.com
        #     e.transcendental.com has address 182.28.18.27
        #
        # Hence, return the fourth field as is.
        get_string_word "$(command host -- "${domain}")" 4
    }
# Else if "nslookup" is installed, fallback to such command. See above.
} elif { is_pathable nslookup } {
    function convert_domain_to_ip:() {
        # Validate sanity.
        die_unless_args 'Expected one domain name.'
        string domain="${1}" ip

        #FIXME: Actually implement
        #get_string_first_matching_pcre_multiline_group:!

        # "nslookup" describes A records as follows:
        #
        #     >>> nslookup google-public-dns-a.google.com
        #     Server:		216.168.96.251
        #     Address:	216.168.96.251#53
        #     
        #     Non-authoritative answer:
        #     Name:	google-public-dns-a.google.com
        #     Address: 8.8.8.8
        #
        # The desired IP address follows the first "Server:" in such output,
        # excluding intermediate whitespace.
        get_string_first_matching_pcre_multiline_group:\
            "$(command nslookup "${domain}")" '^Server:\s++(.++)$'
    }
}

# --------------------( WASTELANDS                         )--------------------
#                   sed -n 's~<fullcount>(.*)</fullcount>~\1~p'
        # Reverse lookup, preferring "dig" to "host" to "nslookup".
        # "dig" outputs the empty string if no PTR record maps the passed IP
        # address. Testing such condition requires capturing "dig" output.

#    } else {
#        :die 'Neither "host" or "dig" installed.'
#    }
#FUXME: Rename to convert_ip_to_domain_name:() and likewise below.
#FUXME: Again, extract is_pathable() tests *OUTSIDE* such functions.

    # If "ip" is pathable, query such command.
#    if { is_pathable ip } {
#        return_string ${"$(LC_ALL=C command ip addr show dev --\
#            "${device_name}")"[(f)3][(w)2]%/*}
#    # Else if "ifconfig" is pathable, query such command.
#    } elif { is_pathable ifconfig } {
#        return_string ${"$(LC_ALL=C command ifconfig --\
#            "${device_name}")"[(f)2][(w)2]#addr:}
#    # Else, throw an exception.
#    } else {
#        :die 'Neither "ip" or "ifconfig" installed.'
#    }

# = "$(get_network_device_name_default)"
# ....................{ GETTERS                            }....................
#:func.doc <<'/---'
#string get_net_command()
#
#Get the absolute path of the first command in the following list found in the
#current user's ${PATH} (in order):
#
#* `ip`, the preferred CLI for managing network interfaces.
#* `ifconfig`, an obsolete but popular CLI for managing network interfaces.
#/---
#function get_net_command() {
#    # While "/sbin" is rarely on the ${PATH} for non-wheel users, numerous
#    # commands in this path remain executable by non-wheel users: namely, "ip"
#    # and "ifconfig". "ip" typically supercedes "ifconfig", where installed.
#    die_if_args
#    get_first_command 'ip' 'ifconfig'
#}

    # While "/sbin" is rarely on the ${PATH} for non-wheel users, numerous
    # commands in this path remain executable by non-wheel users: namely, "ip"
    # and "ifconfig". Such commands are accessible only as absolute filenames.
    # "ip" supercedes "ifconfig", where installed.

#FUXME: Nomenclature backwards. This emulates a map lookup. Consequently, we
#want to instate new map-based nomenclature. Rename to
#map_domain_name_to_ip_address().
# ip_address="$(host "${domain_name}")"
#       ip_address="${ip_address[(w)4]}"
# "/sbin" supercedes
    # "/usr/sbin", by the Filesystem Hierarchy Standard (FHS).
#   die_unless_file "${pastebin_file}"
#consisting of the current hostname followed by current domain name uniquely identifying this host
#   die_unless_device "/dev/${device_name}"
