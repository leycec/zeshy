#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle IPv4 and IPv6 addresses.
/---

# ....................{ GLOBALS                            }....................
:str.global ZY_IP_PCRE <<'/---'
PCRE matching syntactically valid standard IPv4 and IPv6 addresses, including:

* All IPv4 addresses.
* IPv6 addresses consisting of eight `:`-delimited segments of four hexadecimal
  digits each, optionally:
** Omitting leading zeros in any such segments.
** Reducing one or more consecutive segments of zero value to `::`.

For compliance with external commands expecting only standard IPv6 addresses,
this PCRE does _not_ match:

* IPv4-embedded, -mapped, or -translated IPv6 addresses, otherwise referred to
  as *mixed IPv6 addresses* (e.g., `::ffff:192.168.0.1`).
* Link-local IPv6 addresses with zone index (e.g., `fe80::6:9%1`).
/---

() {
    # PCREs below largely inspired by the "Matching IPv6 Addresses" Chapter of
    # Oreilly's canonical "Regular Expression Cookbook." (Praise be to Goyvaerts
    # and Levithan.)

    # IPv4 address consisting of four "."-delimited octets.
    :str ipv4_segment='(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])'
    :str ipv4_address='(?:'${ipv4_segment}'\.){3}'${ipv4_segment}

    # IPv6 address consisting of eight ":"-delimited segments of four
    # hexadecimal digits each such that leading zeros in such segments are
    # optional and such that one or more consecutive segments of zero value are
    # optionally reducible to the empty group "::".
    :str ipv6_segment='[[:xdigit:]]{1,4}'
    :str ipv6_segment_suffixed='(?:'${ipv6_segment}':)'
    :str ipv6_segment_prefixed='(?::'${ipv6_segment}')'

    # IPv6 address containing exactly 7 colons.
    :str ipv6_colons_7=${ipv6_segment_suffixed}'{7}'${ipv6_segment}

    # IPv6 address containing exactly 8 colons. Since the empty group "::" may
    # either prefix or suffix such address, there exist two cases.
    :str ipv6_colons_8_suffixed=${ipv6_segment_suffixed}'{7}:'
    :str ipv6_colons_8_prefixed=':'${ipv6_segment_prefixed}'{7}'

    # IPv6 address containing between 2 to 7 colons *AND* exactly 1 double colon
    # "::". While no single PCRE expression is capable of simultaneously
    # matching both such conditions, a PCRE lookahead arbitrarily matching one
    # condition followed by a single PCRE expression matching the other
    # condition suffices. For simplicity, match the "between 2 to 7 colons"
    # condition with lookahead and the "exactly 1 double colon" condition with
    # a pair of expressions matching:
    #
    # * Between 1 to 7 ":"-suffixed segments _or_ a single ":".
    # * Between 1 to 7 ":"-prefixed segments _or_ a single ":".
    :str ipv6_colons_7_lookahead='(?=(?:[^:]*+:){2,7}[^:]*+$)'
    :str ipv6_colons_1_to_7_suffixed='(?:'${ipv6_segment_suffixed}'{1,7}|:)'
    :str ipv6_colons_1_to_7_prefixed='(?:'${ipv6_segment_prefixed}'{1,7}|:)'
    :str ipv6_colons_2_to_7=${ipv6_colons_7_lookahead}${ipv6_colons_1_to_7_suffixed}${ipv6_colons_1_to_7_prefixed}

    # IPv6 address containing all permissible number of colons.
    :str ipv6_address='(?:'${ipv6_colons_7}'|'${ipv6_colons_8_suffixed}'|'${ipv6_colons_8_prefixed}'|'${ipv6_colons_2_to_7}')'

    # PCRE matching either such address.
    ZY_IP_PCRE='^(?:'${ipv4_address}'|'${ipv6_address}')$'
}

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_ip(
    string ip,
    string error_message = "IP address ${ip} invalid.")

Report success if the passed string is a syntactically valid IPv4 or IPv6
address.
/---
function die_unless_ip() {
    die_unless_args_1_to_2 'Expected one IP address and optional error message.'
    string ip="${1}"
    is_ip "${ip}" or :die ${2-IP address ${ip} invalid.}
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: boolean] is_ip(string ip)

Report success if the passed string is a syntactically valid IPv4 or IPv6
address.
/---
function is_ip() {
    die_unless_arg 'Expected one IP address.'
    is "${1}" =~ "${ZY_IP_PCRE}" si
}

# --------------------( WASTELANDS                         )--------------------
#    '/^(?>
#    (?>
#        ([a-f0-9]{1,4})(?>:(?1)){7}|
#        (?!(?:.*[a-f0-9](?>:|$)){8,})((?1)(?>:(?1)){0,6})?::(?2)?)|
#    (?>
#        (?>(?1)(?>:(?1)){5}:|(?!(?:.*[a-f0-9]:){6,})(?3)?::(?>((?1)(?>:(?1)){0,4}):)?)?
#        (25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?>\.(?4)){3})
#    )$/iD'
#   string ipv6_segments_='('${ipv6_segment}'(?>'${ipv6_segment}'){0,6}+)?::(?2)?)'
#   string ipv6_segments_1_to_5_none_1_to_2=${ipv6_segment_colon}'{1,5}'${ipv6_colon_segment}'{1,2}'
#([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|          # 1:2:3:4:5:6:7:8
#([0-9a-fA-F]{1,4}:){1,7}:|                         # 1::                              1:2:3:4:5:6:7::
#([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|         # 1::8             1:2:3:4:5:6::8  1:2:3:4:5:6::8
#([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|  # 1::7:8           1:2:3:4:5::7:8  1:2:3:4:5::8
#([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|  # 1::6:7:8         1:2:3:4::6:7:8  1:2:3:4::8
#([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|  # 1::5:6:7:8       1:2:3::5:6:7:8  1:2:3::8
#([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|  # 1::4:5:6:7:8     1:2::4:5:6:7:8  1:2::8
#[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|       # 1::3:4:5:6:7:8   1::3:4:5:6:7:8  1::8  
#:((:[0-9a-fA-F]{1,4}){1,7}|:)|                     # ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8 ::8       ::

    # Such expressions guarantee such condition.
#    string ipv6_segment_colon='(?>'${ipv6_segment}':)'
#    string ipv6_colon_segment='(?>:'${ipv6_segment}')'
#    string ipv6_segments_8=${ipv6_segment_colon}'{7}'${ipv6_segment}
#    string      ipv6_segments_1_to_6_none_1=${ipv6_segment_colon}'{1,6}'${ipv6_colon_segment}
#    string ipv6_segments_1_to_5_none_1_to_2=${ipv6_segment_colon}'{1,5}'${ipv6_colon_segment}'{1,2}'
