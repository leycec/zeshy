#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle web browser functionality.
/---

#FIXME: The following Perl snippet globbed online suggests a more platform-
#portable approach to the problem. Note the use of "xdg-open" only as a fallback
#in the event a platform-specific browser opener does not exist:
#
#    if ($^O =~ m/darwin/i &&
#             -x '/usr/bin/open') { # MacOS X vs. just Darwin
#        @cmd = 'open';
#    } elsif (-x '/usr/bin/kfmclient') {
#        @cmd = qw(kfmclient exec);
#    } elsif (-x '/usr/bin/gnome-open') {
#        @cmd = 'gnome-open';
#    } elsif (-x '/usr/bin/gvfs-open) {
#        @cmd = 'gvfs-open';
#    } elsif (-x '/usr/bin/xdg-open') {
#        @cmd = 'xdg-open';
#    }
#
#Readily translatable into efficient zsh via :define_func_if_or_noop().

# ....................{ BROWSERS                           }....................
#FIXME: Interestingly, "xdg-open" is simply a Bourne shell script. (We're not
#kidding.) Hence, the ideal implementation is probably a pure-zeshy approach.
#Scarcity of time and what not, however, currently precludes that. When time
#admits, generalize "/usr/bin/xdg-open" into a pure-zeshy function. It's only
#about 800 lines, over 400 of which is simply (as is usual for shell scripts)
#setup code. The core functionality is probably quite small.
#
#According to Arch, "xdg-open" operates as follows:
#
#"Inside a desktop environment (e.g. GNOME, KDE, or Xfce), xdg-open simply
# passes the arguments to that desktop environment's file-opener application
# (gvfs-open, kde-open, or exo-open, respectively), which means that the
# associations are left up to the desktop environment. When no desktop
# environment is detected (for example when one runs a standalone window manager,
# e.g. Openbox), xdg-open will use its own configuration files."
#
#In fact, the whole article from which the above quote is called is absolutely
#fantastic, par the course for Arch wiki:
#
#    https://wiki.archlinux.org/index.php/xdg-open
#
#For example, here's how to set the default application for various MIME types
#from the CLI:
#
#    # Set default folder opener.
#    >>> xdg-mime default Thunar.desktop inode/directory
#
#    # Set default PDF viewer.
#    >>> xdg-mime default xpdf.desktop application/pdf
#
#    # Set default web browser.
#    >>> xdg-mime default firefox.desktop x-scheme-handler/http
#    >>> xdg-mime default firefox.desktop x-scheme-handler/https
#    >>> xdg-mime default firefox.desktop text/html
#
#Naturally, we should provide corresponding zeshy changers (*NOT* setters, as we
#reserve the set_*() family of functions for zsh-internal objects): e.g.,
#
#    void :change_media_type_editor(
#        string media_type, string command_name)
#    void :change_media_type_printer(
#        string media_type, string command_name)
#    void :change_media_type_viewer(
#        string media_type, string command_name)

#FIXME: Also provide a comparable :browse_url() function.
:func.doc <<'/---'
void :browse_file(string filename)

Open the passed file in the current user's preferred web browser.
/---
if { :pathable.is xdg-open } {
    function :browse_file() {
        # Validate sanity.
        die_unless_arg 'Expected one filename.'
        :str filename="${1}"
        die_unless_file "${filename}"

        # Browse such file.
        command xdg-open "${filename}"
    }
}

# --------------------( WASTELANDS                         )--------------------
#FUXME: This parcel should be shifted back under @{net}, a much more natural
#home for such operations.
