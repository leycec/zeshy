#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *networking interfaces* (i.e., networking devices).
/---

# ....................{ GETTERS                            }....................
#FIXME: Actually, isn't there an efficient means of listing all available device
#names? If so, use that to determine the default net device name.

:func.document <<'/---'
string get_interface_default:()

Get the name of the *default network interface* (i.e., basename of the first
enabled network device excluding the loopback device) on the current system if
such interface exists or throw an exception otherwise: e.g.,

.get_interface_default:()
==========================================
[source]
------------------------------------------
>>> get_interface_default:
eth0
------------------------------------------
==========================================
/---
# If "ip" is installed, prefer such command.
if { is_pathable ip } {
    function get_interface_default:() {
        # Validate sanity.
        die_if_args

        #FIXME: Actually implement
        #get_string_first_matching_pcre_multiline_group_if_found:!

        # Get the first enabled interface excluding loopback device "lo".
        get_string_first_matching_pcre_multiline_group_if_found:\
            "$(command ip addr show)"\
            '^[0-9]++: (?!lo)([^:]++): <[^>]*UP[,>]' or :die\
            'No enabled non-loopback network interface found.'
    }
# Else if "ifconfig" is installed, fallback to such command.
} elif { is_pathable ifconfig } {
    function get_interface_default:() {
        # Validate sanity.
        die_if_args

        # Get the first enabled interface excluding loopback device "lo".
        get_string_first_matching_pcre_multiline_group_if_found:\
            "$(command ifconfig)"\
            '^(?!lo)([^:]++): [^<]*<[^>]*UP[,>]' or :die\
            'No enabled non-loopback network interface found.'
    }
}

# ....................{ GETTERS ~ ip                       }....................
#FIXME: Throw an exception if no IP address is bound to this device.
#FIXME: Rather than test command availability from within this function, we
#should just test such availabity externally. Invert the conditionality.

:func.document <<'/---'
string get_interface_ip:(
    string interface_name = "$(get_interface_default:)")

Get the IP address bound to the passed network device (defaulting to the first
available network device, if called directly from the command line).
/---
# If "ip" is installed, prefer such command.
if { is_pathable ip } {
    function get_interface_ip:() {
        # Validate sanity.
        if { is_context_cli_function } {
            die_unless_args_0_to_1 'Expected optional device name.'
            is_arg or :args.set "$(get_interface_default:)"
        } else {
            die_unless_arg 'Expected one device name.'
        }
        string interface_name="${1}"

        # Get such address.
        :string.output "${"$(LC_ALL=C command ip addr show dev --\
            "${interface_name}")"[(f)3][(w)2]%/*}"
    }
# Else if "ifconfig" is installed, fallback to such command.
} elif { is_pathable ifconfig } {
    function get_interface_ip:() {
        # Validate sanity.
        if { is_context_cli_function } {
            die_unless_args_0_to_1 'Expected optional device name.'
            is_arg or :args.set "$(get_interface_default:)"
        } else {
            die_unless_arg 'Expected one device name.'
        }
        string interface_name="${1}"

        # Get such address.
        :string.output ${"$(LC_ALL=C command ifconfig --\
            "${interface_name}")"[(f)2][(w)2]#addr:}
    }
}

# ....................{ UNBINDERS                          }....................
#FIXME: How to implement such functionality with "ifconfig"?

:func.document <<'/---'
void unbind_interface_ip:(string ip_address, string device_name)

Unbind the passed IP address from the passed network device: e.g.,

.unbind_ip_address()
==========================================
[source]
------------------------------------------
>>> unbind_ip_address 10.0.0.2 eth0
------------------------------------------
==========================================
/---
function unbind_interface_ip:() {
    #FIXME: 
    # Validate sanity.
    die_unless_args_2\
        'Expected one IP address and one device name.'
    string ip="${1}" interface_name="${2}"
    die_unless_pathable ip

    #FIXME: Add support for "ifconfig", if "ip" not runnable. Also, ensure that
    #"${2}" refers to a real network device.
    print_message_item\
        "Unbinding IP address ${ip} from ${interface_name}..."
    command ip addr del "${ip}" dev "${interface_name}"
}

# --------------------( WASTELANDS                         )--------------------
        #FUXME: O.K.; not terribly difficult to implement. After extensive
        #Googling, the only way to reliably effect this is to call
        #"ip addr show" and then return the first multiline PCRE group matching
        #'^[0-9]++: (?!lo)([^:]++): <[^>]*UP[,>]'. The idea here is to match the
        #first enabled interface excluding the loopback device (i.e., "lo").

        #'^[0-9]++: (?!lo)([^:]++): <[^>]*(?:BROADCAST|MULTICAST),[^>]*UP,'. The
        #* Either broadcasting (e.g., IPv4) or multicasting (e.g., IPv6),
