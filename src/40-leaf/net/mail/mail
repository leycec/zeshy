#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core e-mail functionality.
/---

#FIXME: After a bit of Googling about, it's clear that zsh prompts can
#(hopefully reasonably efficiently) signify the availability of new remote
#e-mail. As example, testing for the presence of new mail with gmail is
#feasible as below.
#FIXME: Nice, eh? Note that whatever technique we eventually adopt, however,
#should transparently scale to any number of other e-mail providers (e.g.,
#Yahoo).
#FIXME: O.K.; we've done that. Now, it remains to incorporate this into the
#prompt. Since calling get_mail_remote_new_count:() on every prompt would
#probably be cost-prohibitive, we should only schedule such function to be
#routinely called in the background -- say, every 15 minutes. However, this
#then requires us to cache such total to a temporary file -- say,
#"~/.zsh/cache/mail_remote_new_count" -- to be deserialized by the function
#printing the prompt and embedded into such prompt. What say you?

# ....................{ TESTERS                            }....................
function is_mail_remote_new:() {
    die_if_args
    (( $(get_mail_remote_new_count) ))
}

# ....................{ GETTERS                            }....................
function get_mail_remote_new_count:() {
    # Validate sanity.
    die_if_args
    die_unless_pathable curl
    :int new_count new_count_total=0

    :str address password
    for     address password (
        "${ZY_MAIL_REMOTE_ADDRESS_TO_PASSWORD[@]}") {
        case "${address}" {
        (*'@gmail.com')
            set_integer_to_mail_remote_count_new_gmail:\
                new_count "${address}" "${password}"
            new_count_total+="${new_count}";;
        }
    }

    :stdout.echo ${new_count_total}
}

# ....................{ SETTERS                            }....................
function set_integer_to_mail_remote_count_new_gmail:() {
    # Validate sanity.
    die_unless_args_3\
        'Expected one integer name, one Gmail address, and one Gmail password.'
    string integer_name="${1}" address="${2}" password="${3}" new_count_string

    #FIXME: Actually implement
    #:set_string_to_string_matching_glob_group:()!
    #FIXME: Such indirection could be avoided by implementing a new
    #set_integer_to_string_matching_glob_group:() function.
    #FIXME: This should be further generalized. Capturing the output of an HTTP
    #or HTTPS GET or POST request is a common operation. Generalize such
    #operation via a new setter function
    #set_string_to_url_response_for_username_and_password:().

    # Set such integer.
    :set_string_to_string_matching_glob_group:\
        new_count_string\
        "$(command curl\
            --silent\
            --user "${address}:${password}"\
            'https://mail.google.com/mail/feed/atom')"\
        '\<fullcount\>([^<]##)\</fullcount\>'
    :Int.set "${integer_name}" new_count_string
}

# --------------------( WASTELANDS                         )--------------------
