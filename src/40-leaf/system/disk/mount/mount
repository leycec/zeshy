#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle device mounting and unmounting.
-/-

#FIXME: It'd be great to implement a pure-Zeshy alternative to the pure-bash
#"devmon" script bundled with "udevil" for automounting. This script, while
#lengthy, is well-written and readily translatable into Zeshy. (In fact, it
#spends most of its length setting up simple functionality already provided
#by Zeshy.) The core of "devmon" monitoring is a simple coprocess between it
#and "udevil", which it regularly polls for new events. Simple parsing. I
#reckon it'd be quite fun!
#FIXME: Split functions dealing with mount points into a new component
#"device/disk/mount/point".
#FIXME: When mounting by label, avoid accessing "/dev/disk/by-label/" symbolic
#links, which are notoriously unreliable. Rather, use option "-L" of external
#command "blkid", designed explicitly for such situations. In fact, mapping from
#disk labels to paths is a sufficiently important function to be a new function,
#don't you think? How about get_disk_labeled()? Simple; to the point!
#FIXME: The use of "awk" *EVERYWHERE* below is fairly hideous. Strip it out;
#replace it with pure-zeshy. A shame we didn't do so initially, eh? *sigh*

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
void die_unless_disk_unmounted(
    string device_filename,
    string error_message = "\"${device_filename}\" not an unmounted disk.")

Throw an exception with the passed message unless the passed disk is unmounted.
See is_disk_unmounted() for further details.
/---
function die_unless_disk_unmounted() {
    die_unless_args_1_to_2\
        'Expected one device filename and optional error message.'
    string filename="${1}"
    is_disk_unmounted "${filename}" or
        :die "${2:-\"${filename}\" not an unmounted disk.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status: boolean] is_disk_mounted(string device_filename)

Return success if either the passed disk or some partition of such disk is
currently mounted.
/---
function is_disk_mounted() {
    not is_disk_unmounted "${@}"
}

:func.doc <<'/---'
[status: boolean] is_disk_unmounted(string device_filename)

Return success if neither the passed disk or some partition of such disk is
currently mounted.
/---
function is_disk_unmounted() {
    # Validate passed arguments.
    die_unless_arg 'Expected one device filename.'
    string device_filename="${1}"

    #FIXME: Clearly, it'd be great to implement this *WITHOUT* "awk". Examine.

    # If "blkid -o list" reports such disk under column "mount point" to be
    # "(not mounted)", neither the disk itself or some partition of such disk is
    # currently mounted. Since there appears to be no reasonable means of
    # testing partition dependencies from the command line, this is great.
    is_string_equals\
        "$(blkid -o list | awk -v DEV="${device_filename}" '$1 == DEV { print $4, $5 }')"\
        '(not mounted)'
}

#FIXME: Implement without "mountpoint". Certainly feasible; just make it so.
#FIXME: Rename to is_disk_mounted_to_dir().
:func.doc <<'/---'
[status: boolean] is_disk_mounted_to(
    string device_filename, string mount_dirname)

Return success if the device with the passed filename is mounted to the directory
with the passed dirname.
/---
function is_disk_mounted_to() {
    # Validate passed arguments.
    die_unless_args_2\
        'Expected one device filename and mount dirname.'
    string device_filename="${1}" mount_dirname="${2}"
    die_unless_pathable mountpoint

    # If such device and directory do *NOT* exist, return failure.
    if { not { is_disk "${device_filename}" and is_dir "${mount_dirname}" } } {
        report_failure
    }

    is "$(mountpoint -x "${device_filename}" 2>&1)" ==\
       "$(mountpoint -d "${mount_dirname}"   2>&1)" si
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
string get_mount_home()

Get the absolute path of the top-level directory containing mount points
writable by the current user. If no such directory exists or is writable, an
exception is thrown; else, this is the first directory in the following list
writable by such user (in order):

* `/media`.
* `/mnt`.
* `${HOME}/media`.
* `${HOME}/mnt`.
/---
function get_mount_home() {
    die_if_args
    get_dir_writable_first '/media' '/mnt' "${HOME}/media" "${HOME}/mnt"
}

# ....................{ MOUNTERS                           }....................
#FIXME: Terrible name. Rename to mount_path_with_options().
:func.doc <<'/---'
void mount_nicely() --OR--
void mount_nicely(string mount_dirname) --OR--
void mount_nicely(
    string mount_option1, string mount_option2, ...,
    string device_filename) --OR--
void mount_nicely(
    string mount_option1, string mount_option2, ...,
    string device_filename, string mount_dirname)

Mount the passed disk to the passed mount point directory with the passed
mount options as follows:

* If this is an interactive shell and no arguments were passed, print a human-
  readable list of current mount points.
* If the passed device does not exist, attempt to find a device with such
  basename under these directories (in order):
  * `/dev/disk/by-label`.
  * `/dev`.
  * ...otherwise, raise an exception.
* If no mount point was passed, assume a mount point with the passed device
  basename under the current user's mount home.
* If the passed mount point does not exist, recursively make it.
* If the passed mount point is already mounted to:
  * ...the passed device, do nothing.
  * ...otherwise, raise an exception.
* If the passed device is:
  * ...a device file, perform the expected mount.
  * ...a file with filetype `.iso`, mount this file as an ISO image.

In other words, this function quasi-intelligently accepts darn near anything.
/---
function mount_nicely() {
    # If no arguments were passed, list all current mount points.
    if { is_args_0 } {
        print_mount_points
    # If one argument was passed listed by "/etc/fstab" as a static_mount point,
    # mount such point as such.
    } elif { is_args_1 and is_dir_mountable_statically "${1}" } {
        mount_dir_statically "${1}"
    # Otherwise, mount the passed device file to the passed mount point.
    } else {
        mount_disk  "${@}"
    }
}

#FIXME: Document.
:func.doc <<'/---'
void mount_disk(
    string mount_option1, string mount_option2, ..., string device_filename) --OR--
void mount_disk(
    string mount_option1, string mount_option2, ...,
    string device_filename, string mount_dirname)
/---
function mount_disk() {
    # Validate passed arguments.
    die_unless_args\
        'Expected optional mount options, one device filename, and optional mount dirname.'
    string device_filename mount_dirname

    # If the last passed argument is a writable directory, treat it as the
    # target mount point.
    if { is_dir_writable "${@[-1]}" } {
        die_unless_args_2_or_more\
            'Expected optional mount options, one device filename, and one mount dirname.'
        device_filename="${@[-2]}"
        mount_dirname="${@[-1]}"
        pop_args_2
    # Else, treat such argument as the source device file.
    } else {
        device_filename="${@[-1]}"
        mount_dirname="$(get_mount_home)/$(get_path_basename "${device_filename}")"
        pop_arg
    }

    # Make the mount point, if needed.
    die_if_dir_mounted      "${mount_dirname}"
    make_dir_if_not_found   "${mount_dirname}"
    die_unless_dir_writable "${mount_dirname}"

    #FIXME: Extract into a new function mount_iso(). The function name is valid,
    #as the term "ISO" now encompasses not merely files of type ".iso" but also:
    #".img", ".bin", ".mdf", and ".nrg". While plain ".iso" files are mountable
    #as below, the other types mentioned above require more specialized commands
    #-- specifically, CLI utility "fuseiso". It's very simple to use, if
    #installed: e.g., "fuseiso myisofile.nrg /media/fuseiso". Done!

    # If the passed device file is instead an ISO image, mount it as such.
    if { :is_file_type_equals "${device_filename}" 'iso' } {
#       :str.output "Mounting \"${device_filename}\" to \"${mount_dirname}\"."
        command mount "${@}" -t iso9660 -o 'exec,loop' --\
            "${device_filename}" "${mount_dirname}" and report_status
    }

    # If no passed device file exists, search these directories for such file:
    #
    # * "/dev/disk/by-label".
    # * "/dev/mapper".
    # * "/dev".
    if { is_path "${device_filename}" } {
        #FIXME: Uhm; explain this.
        is_path_absolute "${device_filename}" and
            :die "\"${device_filename}\" not found."
        device_filename="$(get_device_first "/dev/disk/by-label/${device_filename}" "/dev/mapper/${device_filename}" "/dev/${device_filename}")"
    }
    die_unless_device "${device_filename}"

    # If the passed device is already mounted to the passed directory, noop.
    # By default, "mount" unhelpfully fails with error.
    if { is_disk_mounted_to "${device_filename}" "${mount_dirname}" } {
        print_warning\
            "\"${device_filename}\" already mounted to \"${mount_dirname}\"."
        report_success
    }

    # Mount.
    command mount "${@}" -- "${device_filename}" "${mount_dirname}"
}

# --------------------( WASTELANDS                         )--------------------
#Rather than returning a static path, this function iteratively tests the following directories for such
#writability (in order):
#
#Get the absolute path of the canonical directory to which the current user has
#write permissions sufficient for mounting devices. Rather than returning a
#static path, this function iteratively tests the following directories for such
#writability (in order):
#
#* `/media`.
#* `/mnt`.
#* `${HOME}/media`.
#* `${HOME}/mnt`.
#
#If no such directory exists or is writable, throw an exception.

#FUXME: Use of "and report_status" below, while amusing, *SHOULD* be
#completely unnecessary. (I suspect we needed such expressions previously due
#to internal bugs in Zeshy's TRAPZERR() implementation, hopefully now fixed.
#Excise "and report_status" below and test again.)
#FUXME: Rename to die_unless_disk_unmounted() perhaps? This implies slightly
#different semantics, so examine usage.
#FUXME: O.K.; examined. Just do it; it's fine. :}

#FUXME: What's this? *sigh* I frankly can't recall. Excise, I should think.
# string get_mount_dir_statically(string mount_point_name)
#
# Get the absolute path of the passed mount point. If such point is already an
# absolute path, return such path as is; otherwise, return the first d
#get_static_mount_point_for_disk() {
#    # Validate passed arguments.
#    die_unless_arg 'expected one device filename'
#    string device_filename="${1}"
#    die_unless_disk "${device_filename}"
#        is_path_absolute "${device_filename}" and
#            :die "\"${device_filename}\" not found"
#        device_filename="$(get_device_first "/dev/disk/by-label/${device_filename}" "/dev/mapper/${device_filename}" "/dev/${device_filename}")"
#}

#FUXME: Alias "mount" to "mount_nicely", or perhaps simply rename the latter the
#former and improve such function so as to defer to "command mount" when non-
#interactive (much like grep()).
            #FUXME: New split_string_lines_to_list(), then:
            # get_mount_points | split_string_lines_to_list mount_points
#           mount_points=( ${(f)"$(get_mount_points)"} )
            #FUXME: O.K.; now, we need a function filtering elements from one
            #list into another. Sounds like fun. Something like
            #remove_list_items_matching(), yes? Note: this should probably
            #act in-place on the same list. Callers may always copy it before-
            #hand, if desiring non-in-place filtering.
# string get_mount_homes()
#
# Get the absolute paths of all typical mount point parent directories (e.g.,
# "/mnt", "/media").
#get_mount_homes() {
#    die_if_args
#    list mount_homes
#    mount_homes=( '/media' '/mnt' "${HOME}/media" "${HOME}/mnt" )
#    :List.as_string mount_homes
#}

        #FUXME (new): O.K.; we need a new function testify(). (Clever, no?
        #Also consider falsify(), though that name doesn't accurately describe
        #its purpose.) Call it like this:
        #device_filename="$(testify get_device_first "/dev/disk/by-label/${device_filename}" "/dev/${device_filename}")" or :die "device \"${device_filename}\" not found"
        #Simple. testify() calls the passed command via the typical run()
        #construct *BUT WRAPPED IN AN EXCEPTION HANDLER* implicitly squelching
        #any caught exception and simply converting it into a false return value.
        #That then causes the entire equality to evaluate to "false" and hence
        #implicitly throw an exception. Phew! Solved.
        #
        #FUXME: Hmm; this doesn't appear to behave as expected. If
        #get_device_first() raises an exception, I'd expect that to unwind
        #this function's stack frame as well. It doesn't. Instead, "device_filename"
        #just gets the :str.output of get_device_first(), which in the case of a
        #raised exception is a stack trace. Of course, that isn't a file, so
        #the subsequent call to die_unless_disk() fails as well. This
        #strikes me as a bug, perhaps corrected by a subsequent zsh update?
#
#       mountpoint -q "${mount_dirname}" | true; report_status
#       print 'here'
#       mountpoint -q "${mount_dirname}"
#       print "returned: $?"
#       mountpoint -q "${mount_dirname}" and report_success or report_failure
#       mountpoint -q "${mount_dirname}" | true and return ${pipestatus[-2]}
#       mountpoint -q "${mount_dirname}" | return 1
#       mountpoint -q "${mount_dirname}" and report_status
#       print 'there'
#   else is_string_nonempty "$(mount | awk '$3 == "/boot" {print $3}')"

#NR == 1 {
#    sub(/-/, " ")
#    print
#}

#   if is_string_nonempty\
#       "$(awk '!/^[[:blank:]]*#/ && $2 == "/boot" {print $2}' /etc/fstab)"; then
#   if is '/boot' == "$(awk '!/^[[:blank:]]*#/ {print $2}' /etc/fstab)" si; then

#is_disk "${device_filename}" and 

# void mount_iso(string filename)
#
# Mount the ISO image with the passed filename to a temporary directory under
# the current user's mount home.
#mount_iso() {
    # Localize and validate passed arguments.
#   die_unless_arg 'expected one ISO filename'
#   string iso_filename="${1}"
#   is "${iso_filename}" == *.iso si or
#       :die "\"${iso_filename}\" not an ISO"
#   die_unless_file "${iso_filename}"
#   string ZESHY_SCRIPT_FILENAME='mount_iso'

    # Find a suitable mount path.
#   integer iso_mount_path_suffix=0
#   string  iso_mount_path_prefix="${ZESHY_MOUNT_ISO_PATH}"\
#           iso_mount_path="${iso_mount_path_prefix}"
#   print_message 'searching for available mount point...'
#   while (is_dir_mounted "${iso_mount_path}") {
#       (( iso_mount_path_suffix++ ))
#       iso_mount_path="${iso_mount_path_prefix}${iso_mount_path_suffix}"
#   }
    
    # Mount the passed ISO filename to the desired mount path.
    #
    # Note that this does not pass the ",user" option when mounting, as doing so
    # would implicitly enables unhelpful mount options (e.g., "noexec").
#   print_message "mounting \"${iso_filename}\" to \"${iso_mount_path}\"..."
#   make_dir_if_not_found "${iso_mount_path}" 
#   mount -t iso9660 -o 'exec,loop'\
#       "${iso_filename}" "${iso_mount_path}" or
#       :die "\"${iso_filename}\" not static_mount to \"${iso_mount_path}\""
#}
#       if is_args_1 and is "${1}" == *.iso si; then
#           mount_iso "${1}"

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#FUXME: This is *TERRIBLE*. Just use "mount -l" to list current mount points.
#Grepping this Linux-specific file is horrible.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# * If only one argument was passed and:
#   * ...this is an existing file with filetype "ISO", mount this file as an ISO
#     image to the current user's mount home.
#   * ...otherwise, raise an exception.

# string get_mount_points_filename()
#
# Get the name of the system file listing current mount points.
#get_mount_points_filename() {
#    die_if_args
#    print '/proc/mounts'
#}
