#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle boot partition mounting and unmounting.
-/-

# ....................{ GETTERS                            }....................
#FIXME: Does there exist some means of sensibly querying the current system for
#such path? If not, we'll probably want to extract this into a user-configurable
#zeshy string global. Assuming "/boot" seems a bit strong of an assumption.
declare_function_with_stdin <<'/---'
[stdout: string, status: boolean] get_boot_dir_if_found()

Get the absolute path of the directory to which the boot partition is mounted
(e.g., `/boot`) if such partition (but _not_ necessarily directory) exists on
the current system or return failure otherwise.
/---
function get_boot_dir_if_found() {
    # Validate sanity.
    die_if_args

    # If "/etc/fstab" maps some disk device to "/boot", return such path.
    if { is_dir_mountable_statically '/boot' } {
        return_string '/boot'
    # Else, fail.
    } else {
        report_failure
    }
}

# ....................{ MOUNTERS                           }....................
declare_function_with_stdin <<'/---'
void mount_boot_dir_writable()

Mount the boot partition to the corresponding directory writable by the current
user (e.g., `/boot`) if such partition exists and is not already writably
mounted. If such partition does not exist or does and is already writably
mounted, silently return.
/---
function mount_boot_dir_writable() {
    # Validate sanity.
    die_if_args
    string boot_dirname

    # If such partition exists, mount such partition to such directory.
    if { boot_dirname="$(get_boot_dir_if_found)" } {
        print_message_item "Mounting \"${boot_dirname}\"."
        mount_dir_statically_writable "${boot_dirname}"
    }
}

# --------------------( WASTELANDS                         )--------------------
    # Else, raise an exception unless "/boot" is already writable.
#   } elif { not is_dir_writable "${mount_dirname}" } {
#       :die "directory \"${mount_dirname}\" unwritable and unlisted by \"/etc/fstab\""
#   }
