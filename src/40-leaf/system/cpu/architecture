#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2014 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle *CPU architecture* (i.e., the abstract type of instruction set accepted
by CPUs in the current system).
/---

#FIXME: Interestingly, there exists a POSIX-mandated means of determining the
#bit-width of the current CPU architecture, which none of the methods below
#provide. Fairly simple, as well:
#
#    # On 64-bit machines...
#    >>> getconf LONG_BIT
#    64

# ....................{ GETTERS                            }....................
#FIXME: Terrible. Firstly, such function should be refactored into a new setter
#:set_string_to_cpu_architecture(). Secondly, such function should simply be
#expanding canonical string global ${MACHTYPE} rather than running either "arch"
#or "uname". Indeed, such zsh always guarantees such global, such function
#should probably reduce to unconditionally setting such string to ${MACHTYPE}.

declare_function_with_stdin <<'/---'
string get_architecture()

Get the canonicalized name of the current CPU architecture: e.g.,

.get_architecture()
==========================================
[source]
------------------------------------------
# For 64-bit Intel and AMD architectures.
>>> get_architecture
x86_64
# For 32-bit Intel architectures (newer).
>>> get_architecture
i686
# For 32-bit Intel architectures (older).
>>> get_architecture
i386
------------------------------------------
==========================================
/---
if { is_pathable arch } {
    function get_architecture() {
        die_if_args
        command arch
    }
} else {
    function get_architecture() {
        die_if_args
        command uname -m
    }
}

# --------------------( WASTELANDS                         )--------------------
