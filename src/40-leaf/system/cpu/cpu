#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2015 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
Handle CPU profiling and reporting.
-/-

#FIXME: Rename "_processor" to "_cpu" everywhere. Just do it. The overlap with
#"_process" makes tab completion an inefficient bear and even less readable.

# ....................{ EXCEPTIONS                         }....................
#FIXME: Rename to die_unless_processor().
:func.doc <<'/---'
void die_unless_processor_index(
    integer processor_index,
    string error_message =
        "processor ${processor_index} not in [1, $(get_processor_count)]"

Throw an exception with the passed message unless the passed processor exists.
See is_processor_index() for further details.
/---
function die_unless_processor_index() {
    die_unless_args_1_to_2\
        'expected one processor index and optional error message'
    string processor_index="${1}"
    is_processor_index "${processor_index}" or :die\
        "${2:-processor ${processor_index} not in [1, $(get_processor_count)]}"
}

# ....................{ TESTERS                            }....................
#FIXME: Rename to is_processor(). And lest ye question the wisdom in such
#decision -- yes, this is *ABSOLUTELY* essential to scaling such function
#nomenclature elsewhere. Consider "if_pathable/cpufreq", in particular, whose
#existing functions set_processor_governor(), set_processor_frequency(), etc.
#read quite sensibly as is but *NOT* at all if converted to include "_index", as
#would be required for conformance with the functions here: e.g.,
#set_processor_index_governor(), set_processor_index_frequency(). I can't
#imagine any other means other than 0- or 1-based integers for referring to
#processors. This is how Linux operates, so... just embrace it, yes?
:func.doc <<'/---'
[status: boolean] is_processor_index(integer processor_index)

Return success if a processor with the passed 1-based index exists. In this
case, a *processor* is a logical abstraction representing physical hardware
admitting at most a single concurrent thread of execution, typically at a finer
level of granularity than merely a CPU. Under modern CPU architectures,
processors correspond to either threads under hyperthreaded systems or cores
under non-hyperthreaded systems. In either case, a physical system consists of
nodes consisting of sockets consisting of CPUs consisting of cores consisting of
threads.

For example, a hyperthreaded Intel CPU with two cores with two threads each is
represented by the following logical processors:

* Processor 1, the first thread on the first core of such CPU.
* Processor 2, the second thread on the first core of such CPU.
* Processor 3, the first thread on the second core of such CPU.
* Processor 4, the second thread on the second core of such CPU.
/---
function is_processor_index() {
   die_unless_arg 'expected one processor index'
   :is_int_in_range "${1}" 1 "$(get_processor_count)"
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
string get_processor_profile_file()

Get the absolute path of the system-wide file containing a human-readable
profile of processors on the current system.
/---
function get_processor_profile_file() {
    #FIXME: Generalize to BSD, etc.
    # Validate passed arguments.
    die_if_args
    string filename
    filename='/proc/cpuinfo'
    die_unless_file "${filename}"

    # Get such path.
    :str.output "${filename}"
}

# ....................{ GETTERS ~ counts                   }....................
:func.doc <<'/---'
integer get_processor_count()

Get the number of processors in the current system. If such system is
hyperthreaded, this is the total number of threads; else, this is the total
number of cores. See is_processor_index() for further details.
/---
function get_processor_count() {
    # Validate sanity.
    die_if_args

    #FIXME: This is probably Linux-specific. *massive shrug*
    #FIXME: Also document such global at the top-level above, in which case we
    #needn't declare such global here. (Zeshy semantics guarantee it to exist.)

    # Since processor count is strongly unlikely to change, cache results.
    integer_global_export ZESHY_PROCESSOR_COUNT
    ((  ZESHY_PROCESSOR_COUNT )) or
        ZESHY_PROCESSOR_COUNT="$(get_string_pcre_multiline_match_count\
            "$(get_file_text "$(get_processor_profile_file)")"\
            '^processor\s*:')"

    # Return the now-cached result.
    :str.output "${ZESHY_PROCESSOR_COUNT}"
}

#FIXME: Rename to get_core_count().
:func.doc <<'/---'
integer get_physical_processor_count()

Get the number of cores in the current system.
/---
function get_physical_processor_count() {
    #FIXME: Also implementable on "/proc/cpuinfo" itself, but much more
    #long-winded and requires Zeshyfication:
    #
    #   cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l
    #
    #To quote: "This command squishes the /proc/cpuinfo physical id and core id for
    #each logical CPU on to the same line, and then sorts them and runs uniq to
    #remove the extra hyperthreading logical CPU's. The final result is the number
    #of CPU cores on your Linux system." Courtesy:
    #
    #   https://www.ibm.com/developerworks/mydeveloperworks/blogs/brian/entry/linux_show_the_integer_of_cpu_cores_on_your_system17?lang=en
    #
    #Quite clever, actually.
    die_if_args
    die_unless_pathable lscpu

    # The number of uncommented lines "lscpu -p" outputs very concisely yields
    # the number of physical processors.
    get_string_pcre_multiline_match_count "$(lscpu -p)" '^\d+,'
}

#FIXME: Rename to get_processors().
:func.doc <<'/---'
string get_processor_indices()

List all processor indices (i.e., integers in `[1, $(get_processor_count)]`) in
the current system. See is_processor_index() for further details: e.g.,

.get_processor_indices()
==========================================
[source]
------------------------------------------
# Assuming a non-hyperthreaded quad-core single-CPU system.
>>> get_processor_indices
1 2 3 4
------------------------------------------
==========================================
/---
function get_processor_indices() {
    die_if_args
    get_integers_in_range 1 "$(get_processor_count)"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
void print_processor()

Print a human-readable profile of all processors (e.g., threads on cores on
CPUs on sockets on nodes) the current machine exposes.
/---
function print_processor() {
    # Validate sanity.
    die_if_args

    {
        # If "lscpu" is installed, run that first. "lscpu" prints a helpful
        # synopsis, if somewhat lacking in detail.
        is_pathable lscpu and {
            print_message_heading 'lscpu'
            lscpu
        }

        # If "cpufreq-info" is installed, run that next. "cpufreq-info" prints
        # data on frequency scaling (e.g., overclocking, underclocking).
        is_pathable cpufreq-info and {
            print_message_heading 'cpufreq-info'
            print_processor_scaling
        }

        # Last, print the detailed contents of the processor profile file.
        string profile_filename
        profile_filename="$(get_processor_profile_file)"
        :is_file "${profile_filename}" and {
            print_message_heading   "${profile_filename}"
            print_file_text "${profile_filename}"
        }
    } | page_stdin
}

# --------------------( WASTELANDS                         )--------------------
#physical processors in the current system. If such system is
#hyperthreaded, this is the return value of get_processor_count() less the number
#of threads; else, this is simply
#get_processor_count().
#, processor 2 the second thread on the first core, processor; similarly, processor 4 signifies the second thread on
#the second physical core on the first physical CPU on the first physical node has index 4.
        # Otherwise, raise an exception.
#       else :die '"lscpu" not installed and "/proc/cpuinfo" not found'

    # Capture "uptime" output, resembling:
    #     27:17:57 up  3:17,  1 user,  load average: 0.15, 0.12, 0.10
#   die_if_args
#   string uptime_output; uptime_output="$(uptime)"

    # Unnormalized processor load. Dismantled, this is:
    #
    # * "[(w)-3]", expanding to the third to last word of the output.
    # * "%,", removing the trailing comma.
#   float uptime_load; uptime_load="${uptime_output[(w)-3]%,}"

    # Normalize such load by the number of logical processors, rounded to four
    # decimal places of accuracy.
#   integer processor_count; processor_count=$(get_processor_count)
#   round_float $(( uptime_load / processor_count )) 4
#Quite clever, actually. Though, it's probably far easier to simply parse the
#machine-readable :str.output of "lscpu -p"; theoretically, the number of lines
#output by "lscpu -p" *NOT* prefixed with "#" are the number of physical
#processors. (Double-check, of course.)

# int get_cpu_physical_core_count()
#
# Get the number of physical CPU cores available in the current machine. This
# excludes available logical CPU cores (e.g., hyperthreaded cores).
#get_cpu_physical_core_count() {
#    die_if_args
#    :str.output ${"${"$(free -bt)"[(f)2]}"[(w)2]}
#}

# int get_cpu_core_count()
#
# Get the number of logical CPU cores available in the current machine. This
# includes physical cores and logical cores the hardware makes available (e.g.,
# hyperthreaded cores).
#get_cpu_core_count() {
#    die_if_args
#    cat /proc/cpuinfo | grep processor | wc -l
#}
