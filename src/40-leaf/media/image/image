#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle core image functionality.
/---

#FIXME: Implement :image.convert_to_favicon(), a favicon image creator function
#conditionally dependent on currently installed external commands. Since the
#favicon image format is actually an image container containing the same
#favicon at different resolutions, the ideal implementations leverage
#favicon-specific commands (rather than, say, generic ImageMagick converters).
#In order, prefer the following commands:
#
#* "icotool", run as follows:
#    icotool -c\
#            favicon-16-16.png\
#            favicon-32-32.png\
#            favicon-48-48.png\
#            favicon-64-64.png\
#            -o favicon.ico
#* "png2ico". While "icotool" is still currently maintained, "png2ico" was last
#  updated in 2003. (Ugh.) That said, it remains the best fallback. Unsure how
#  to call it, however. Research!
#* "convert", the ImageMagick utility. While ImageMagick *CAN* convert a single
#  PNG to a single favicon containing only that PNG, it *CANNOT* create a
#  favicon containing multiple PNGs. Hence, ImageMagick is only a last-ditch
#  fallback. A warning should probably be printed when using such fallback.
#
#Such function should have the following prototype:
#
#    :void :image.convert_to_favicon(
#        :str input_image_filename1, ...,
#        :str output_favicon_filename)
#
#Both "icotool" and "png2ico" require PNG images as input. Hence, if such zeshy
#function is passed one or more non-PNGs as input, call *ANOTHER* zeshy
#function to convert such images to PNG. A warning should probably be printed
#in such case; whereas PNG is lossless, most alternative image formats (e.g.,
#GIF, JPEG) are lossy.
#
#Such function should also ensure the input images are of the correct
#dimensions: namely, "icotool" and "png2ico" require *FOUR* PNGs in the
#following pixel resolutions: 64x64, 48x48, 32x32, and 16x16. This implies
#we'll need another zeshy function setting two integers to the width and height
#of the passed image file in arbitrary format. Call such function and, if the
#dimensions of the passed image(s) are insufficient, we'll need to call a
#rescaler to produce PNGs of the required dimensions -- hopefully, a
#*DOWN*scaler. Note, however, that downscaling is somewhat non-trivial. See
#~/pub/note/geek/work/image/process/downscale.note.
#
#In other words, there's a surprising amount of work to be done here.

# ....................{ CONVERTERS                         }....................

# --------------------( WASTELANDS                         )--------------------
