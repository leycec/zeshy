#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Devices and device files.
/---

#FIXME: Refactor getters into setters.

#FIXME: Check out "inxi". Looks to be a rather swag, single large bash script
#for printing human-readable profiles of system hardware, complete with a rather
# professional manpage. See: http://smxi.org/site/about.htm#inxi
#FIXME: Add support for "command aplay -L". "aplay" is typically bundled with
#ALSA and hence reliably available where ALSA is available; passing option "-L"
#outputs a human-readable synopsis of all current ALSA-discovered audio devices,
#which is quite helpful.

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_device(
    :str pathname ?:str error_message='Path "${pathname}" not a device.')

Throw an exception with the passed message unless the passed device file exists.
/---
function die_unless_device() {
    die_unless_args_1_to_2\
        'Expected one pathname and optional error message.'
    :str pathname="${1}"
    is_device "${pathname}" :or :die "${2-Path \"${pathname}\" not a device.}"
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_device(:str pathname)

Report success if the passed *device file* (i.e., block- or character-special
file corresponding to some physical device attached to the current system).
/---
function is_device() {
    die_unless_arg 'Expected one pathname.'
    :str pathname="${1}"
    :is -b "${pathname}" :or -c "${pathname}" :si
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
:str get_device_first(+:str filenames)

Absolute path of the first device file in the passed list of filenames to exist
if at least one such file exists _or_ throw an exception otherwise.
/---
function get_device_first() {
    # Dismantled, this is:
    #
    # * "-", resolving symbolic links prior to matching.
    # * "%", including only device files.
    get_path_matching_qualifier_first_if_found "${@}" '-%' :or :die\
        "$(join_strings_readable: "${@}") not found or not device files"
}

# ....................{ GETTERS ~ random                   }....................
:func.doc <<'/---'
:str get_device_random_nonblocking()

Absolute path of the preferred *non-blocking random device* (i.e., the canonical
system-wide device file generating pseudo-random bytes _without_ blocking on
external entropy).

Specifically, this function returns the first device file that exists on the
current system in the following list:

* `/dev/frandom`, a non-blocking generator commonly cited as faster than
  `/dev/urandom`, but available only after installing third-party software.
* `/dev/erandom`, a non-blocking generator by the same author as
  `/dev/frandom`, but consuming no entropy.
* `/dev/urandom`, the canonical non-blocking generator.
/---
function get_device_random_nonblocking() {
    die_if_args
    get_device_first '/dev/'{f,e,u,}'random'
}


:func.doc <<'/---'
:str get_device_random_blocking()

Absolute path of the preferred *blocking random device* (i.e., the canonical
system-wide device file generating pseudo-random bytes by blocking on external
entropy), typically `/dev/random`.

This device blocks after consuming all available input entropy and hence
generates bytes in a more cryptographically secure manner than that of the
non-blocking device returned by get_device_random_nonblocking().

== See Also ==

* get_device_random_nonblocking().
/---
function get_device_random_blocking() {
    die_if_args
    :stdout.echo '/dev/random'
}

# ....................{ PRINTERS                           }....................
#FIXME: Actually implement :print_devices_on_bus_usb() -- presumably, in a new
#parcel @{usb/usb}. See @{pci/pci} for related functionality.
:func_ ':str :print_devices()' :func{
    die_if_args

    # Print these devices.
    {
        #FIXME: Silly. Replace the iteration below with a single call to a new
        #utility function :call_func_if_found_or_noop(), called like so:
        #
        #    :call_func_if_found_or_noop\
        #        :print_devices_on_bus_pci\
        #        :print_devices_on_bus_usb
        :str printer_func_name
        for  printer_func_name (
            :print_devices_on_bus_pci
            :print_devices_on_bus_usb) {
            if { :func.is "${printer_func_name}" } {
                "${printer_func_name}"
            }
        }
    } | page_stdin
}:func <<'/---'
Print a human-readable synopsis of all devices on the current system.
/---


:func.doc <<'/---'
:str print_device(:str device_filename)

Print a human-readable synopsis of the passed device.
/---
function print_device() {
    die_unless_arg 'Expected one device filename.'
    :str device_filename="${1}"
    die_unless_device "${device_filename}"

    #FIXME: Linux-specific, clearly. This requires some generalization.
    #FIXME: Technically, this only tests whether or not "udev" is installed. Add
    #an additional test ensuring "udev" is also currently running, probably
    #implemented in "if_installed/udevadm" to test whether or not "udevd" is
    #currently running: say, is_udevd_running(). Actually, that seems fairly
    #straight-forward. Just implement as is here?
    #FIXME: Clearly, if such tests fail, an exception should be thrown.

    # If the current system is running a "udev" daemon, beg such daemon for data
    # on the passed device.
    run_code_if_pathable print_udev_device
}
