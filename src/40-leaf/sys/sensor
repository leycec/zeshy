#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
Handle *device sensors* (i.e., CPU, GPU, and/or motherboard sensors, typically
measuring heat and fan speeds for the corresponding devices).
/---

# ....................{ CONFIGURERS                        }....................
:func.doc <<'/---'
void :config_sensors()

Configure `lm_sensors` and hence the set of sensor-specific kernel modules
exposed to the `sensors` command run by :print_sensors().
/---
function :config_sensors() {
    # Validate sanity.
    die_if_args
    die_unless_pathable sensors-detect '"lm_sensors" uninstalled.'
    die_unless_pathable pwmconfig      '"lm_sensors" uninstalled.'
    die_unless_superuser
    die_unless_shell_interactive

    # If the system is under moderate load, require the user confirm his or her
    # desire to continue. "pwmconfig" temporarily turns off *ALL* fans, which
    # could result in hardware damage should the CPU attempt to soldier on.
    :float processor_load
    processor_load="$(get_processor_load_as_one_minute_normalized_average)"
    if (( processor_load >= 0.5 )) {
        print_message_unboxed
            "Configuring sensors temporarily turns off fans. Since the system is currently under ${processor_load}% load, turning off fans may induce hardware failure or loss. Consider reducing system load before continuing."
        is_query_line_yes 'Really turn fans off?' or :failure.report
    }

    # Configure.
    print_message_heading 'Configuring Sensors'
    sensors-detect
    print_message_heading 'Configuring Fans'
    pwmconfig
}

# ....................{ MONITORS                           }....................
:func.doc <<'/---'
void :monitor_sensors(integer seconds = 1)

Monitor all sensors on the current machine every passed number of seconds.
This function is the command-line analogue of GUI-driven thermal, voltage, and
fan monitoring (e.g., Conky, GKrellM).
/---
function :monitor_sensors() {
    # Validate passed arguments.
    die_unless_args_0_to_1 'Expected optional interval.'
    :str seconds="${1:-1}"
    :int.die_unless_positive "${seconds}"

    # Lightly sleep after each run to avoid obliterating print_disk_sensors()
    # output, which tends to take longer to harvest than print_sensors() output.
    run_code_every_interval ':print_sensors and sleep 0.5s' "${seconds}s"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
void :print_sensors()

Print a human-readable synopsis of all currently active hardware sensors.
/---
function :print_sensors() {
    # Validate sanity.
    die_if_args

    # If non-disk sensor monitoring is available, do so.
    if { :func.is :print_sensors_non_disk } {
        :print_sensors_non_disk
    # Else, print a useful warning.
    } else {
        print_warning\
            'Consider installing "lm_sensors" for optimal sensor monitoring.'
    }

    # If disk sensor monitoring is available, do so.
    if { :func.is :print_sensors_disk } {
        :print_sensors_disk
    # Else, print a useful warning.
    } else {
        print_warning\
            'Consider installing "hddtemp" for hard drive sensor monitoring.'
    }
}


# If:
#
# * "sensors" is pathable, "lm_sensors" is installed. Prefer such command.
# * "acpi" is pathable, fallback to such command. Since such command fails to
#   output a helpful profile under many machines, inform the user of the fact.
:declare_func_if_pathable_or_noop\
    ':void print_sensors_non_disk()' ''\
    sensors 'run_code_paged command sensors'\
    acpi '
        print_warning\
            ''Consider installing "lm_sensors" for optimal sensor monitoring. Falling back to "acpi"-based monitoring.''
        command acpi --thermal' <<'/---'
Print a human-readable synopsis of all currently active *non-disk sensors*
(i.e., all hardware sensors _not_ situated on disk and hard drives).
/---

:func.doc <<'/---'
void print_sensors_disk()

Print a human-readable synopsis of all currently active *disk sensors* (i.e.,
all hardware sensors situated on disk drives).
/---
if { :pathable.is hddtemp } {
    function :print_sensors_disk {
        # Validate sanity.
        die_if_args
        :list hddtemp_lines

        # Maximum temperature in Celcius past which a visual alarm is printed.
        :int maximum_safe_temperature=55

        #FIXME: This is Linux-specific and hence horrible. Generalize, please.

        # List of all lines split from "hddtemp" output on all available internal
        # hard drives.
        set_list_to_string_lines hddtemp_lines "$(command hddtemp -- /dev/sd[a-z])"

        # Unlike "sensors", "hddtemp" fails to highlight unsafe temperatures.
        # Manually iterate each line of :str.output for such temperatures and highlight
        # them in the same format as "sensors".
        :str.output 'Adapter: SATA adapter'
        :str hddtemp_line
        for     hddtemp_line ("${hddtemp_lines[@]}") {
            if { is_string_matches_pcre "${hddtemp_line}" '(\d+)°C$' and
                (( ${match[1]} >= maximum_safe_temperature )) } {
                hddtemp_line+='  (high = +'${maximum_safe_temperature}'°C) ALARM'
            }
            :str.output "${hddtemp_line}"
        }
    }
}

# --------------------( WASTELANDS                         )--------------------
    # Otherwise, throw an exception.
    # } else {
    #     :die 'neither "lm_sensors" or "acpi" installed'
    # }

#   die_unless_pathable sensors
