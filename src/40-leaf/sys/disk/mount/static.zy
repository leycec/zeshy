#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'-/-'
*Statically mountable directories* (i.e., directories mountable without
explicitly specifying the source disk or disk partition to be mounted).
-/-

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_dir_mountable_statically(
    :str dirname
    ?:str error_message='"${dirname}" not listed by "$(get_static_mount_point_file)".')

Throw an exception with the passed message unless the passed directory is an
existing static mount point. See is_dir_mountable_statically() for further
details.
/---
function die_unless_dir_mountable_statically() {
    die_unless_args_1_to_2\
        'expected one dirname and optional error message'
    :str dirname="${1}"

    # Test this mount point.
    is_dir_mountable_statically "${dirname}" :or {
        string static_filename; static_filename="$(get_static_mount_point_file)"
        :die "${2:-\"${dirname}\" not listed by \"${static_filename}\".}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_dir_mountable_statically(:str dirname)

Report success only if the passed directory is a *static mount point* (i.e.,
listed by `/etc/fstab` and hence implicitly mountable without explicitly
specifying a source disk or disk partition from which to mount).
/---
function is_dir_mountable_statically() {
    die_unless_arg 'expected one dirname'
    :str dirname="${1}"

    # For each line of "/etc/fstab", if the second field of such line
    # signifying a mount point matches such directory, return success. Ignore
    # comments (i.e., lines prefixed by optional whitespace followed by a "#").
    # Since the simplest (though not necessarily readable) means of immediately
    # returning from such iteration is to return failure on success and success
    # on failure, invert the exit status of such iteration to return the
    # expected exit status to our caller.
    :not for_string_line_fields_split_on_whitespace\
        "$(get_static_mount_point_file)" '
        if { :is "${field[1]}" != [[:blank:]]#"#"* :and
                 "${field[2]-}" == "${dirname}" :si } {
            :failure.report
        }'
}

# ....................{ GETTERS                            }....................
#FIXME: Rename to get_mount_points_static_file(). Hmm; that's rather poor. How
#about get_dir_mountable_statically_file()? Yup! The latter fits our
#nomenclature here.
#FIXME: Actually, this strikes me as overkill. Rename to get_fstab(), since
#that's exactly what this function returns.
:func.doc <<'/---'
:str get_static_mount_point_file()

Absolute filename of the file statically mapping disk devices to mount points
(e.g., `/etc/fstab`).
/---
function get_static_mount_point_file() {
    die_if_args
    :stdout.echo '/etc/fstab'
}


#FIXME: Rename to get_disk_dir_mountable_statically().
#FIXME: Rename to get_dir_mountable_statically_for_disk() or perhaps
#get_disk_dir_mountable_statically(). While the former strikes me as both more
#legible and in better keeping with nomenclature, this could even reasonably be
#a converter: e.g., convert_disk_to_dir_mountable_statically(). Uhm; no. That
#implies *FAR* more than is done here. (Perhaps
#map_disk_to_dir_mountable_statically()? Nah. Getters are more readable.) O.K.;
#so, get_dir_mountable_statically_for_disk() it is.
:func.doc <<'/---'
:str get_static_mount_point_for_disk(:str device_filename)

Mount point to which `/etc/fstab` maps the passed disk.
/---
function get_static_mount_point_for_disk() {
    # Validate passed arguments.
    die_unless_arg 'expected one device filename'
    :str device_filename="${1}" static_filename
    die_unless_disk "${device_filename}"

    #FIXME: Should be a pretty trivial implementation via
    #get_string_pcre_line_first_match_group(), which we'll want to augment to throw an
    #exception if no such group matches, possibly accepting an optional error
    #message (per usual). We'll probably also want a new
    #get_mount_point_setup_file() returning '/etc/fstab'. Yum.
    :die "Implement me."
    static_filename="$(get_static_mount_point_file)"
}

# ....................{ MOUNTERS                           }....................
#FIXME: Do we actually require the options? Contemplate simplifying this.
#Otherwise, rename this.
:func.doc <<'/---'
:void mount_dir_statically(*:str mount_options :str mount_dirname)

Mount the disk that `/etc/fstab` maps to the passed directory to that
directory with the passed options.
/---
function mount_dir_statically() {
    die_unless_args 'expected optional mount options and one mount dirname'
    :str mount_dirname="${@[-1]}"
    :args.pop 1

    #FIXME: O.K.; for orthogonality with mount_disk(), we should really avoid
    #remounting to an already mounted directory only if such mount point
    #corresponds to the current mapping defined by /etc/fstab. (Annoying, but
    #certainly feasible.)

    # If this directory is already a mount point, return immediately.
    if { is_dir_mountable_statically "${mount_dirname}" } {
        :success.report
    }

    # Else, create this directory if needed and ensure its writability.
    make_dir_if_not_found "${mount_dirname}"
    die_unless_dir_writable "${mount_dirname}"
    die_unless_dir_mountable_statically "${mount_dirname}"

    # Mount.this directory statically.
    print_message_item\
        "Mounting \"${mount_dirname}\" statically (i.e., by \"/etc/fstab\")..."
    command mount "${@}" -- "${mount_dirname}"
}


#FIXME: Do we actually require the options? Contemplate simplifying this.
#Otherwise, rename this.
:func.doc <<'/---'
:void mount_dir_statically_writable(*:str mount_options :str mount_dirname)

Mount the device that `/etc/fstab` maps to the passed dirname to that
directory writably with the passed options.
/---
function mount_dir_statically_writable() {
    die_unless_args 'expected optional mount options and one mount dirname'
    :str mount_dirname="${@[-1]}"

    # If this directory is already a writable point, return immediately.
    is_dir_mounted_writable "${mount_dirname}" :and :success.report

    # If this directory is already mounted (and hence read-only, since the prior
    # test fell through), remount "/boot" read-write; otherwise, mount "/boot"
    # read-write.
    if { is_dir_mounted "${mount_dirname}" } {
        mount_dir_statically -o remount,rw "${@}"
    } else {
        mount_dir_statically -o         rw "${@}"
    }
}
