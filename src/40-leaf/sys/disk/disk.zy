#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/--'
Disk storage.
/--

#FIXME: Add support for disk cloning. To be blunt, it's highly non-trivial and
#rather dangerous (an understatement); but, current Linux command-line
#support for such cloning only excacerbates this issue by unsafely admitting
#inherently damaging operations (e.g., "dd"-ing onto a mounted partition).
#
#Disk cloning requires two separate actions:
#
#1. First, cloning the partition(s) header(s) and ensuring the :stdout.echo disk or
#   partition is at least as large as the input disk or partition. Assuming
#   an :stdout.echo disk of /dev/sdb and input disk of /dev/sda, this is achievable
#   by running:
#      sfdisk -d /dev/sda | sfdisk /dev/sdb
#2. Second, cloning the actual disk or partition ("dd" operates on either
#   transparently, since both are device files). This is somewhat complicated
#   by the lack of a progress bar for "dd" and the need to prevent "dd" from
#   committing blatantly damaging data deletion. Specifically:
#   1. If the :stdout.echo is a disk, validate that no partition of that disk is
#      currently mounted. If the :stdout.echo is a partition, validate that that
#      partition is currently unmounted. Note that this implicitly guards
#      against overwriting of the main hard drive in use.
#   2. Validate that the :stdout.echo disk or partition is at least as large as the
#      input disk or partition. Note that the :stdout.echo may be an ".img" file,
#      thus somewhat complicating such checks.
#   3. Interactively confirm the user wishes to do so with is_query_character_yes().
#   4. Perform the actual clone with "pv" (pipe view) if installed, providing
#      a visual progress bar: e.g.,
#         dd if=/dev/sda bs=32M | pv -s 512M | dd bs=32M of=/dev/sdb
#      The "bs" (block size) argument is essential to provide decent
#      throughput. Being an archaic application, "dd" defaults to an absurd
#      512KB block size; anything from 4MB to 128MB appears to be the current
#      preferred default. Since "pv" can't reasonably know the full size of
#      data being transferred, we provide it the explicit size with "-s".

#FIXME: "blkid" is Linux-specific. Hence, so are most of this component's
#current implementations. Fix this.

# ....................{ EXCEPTIONS                         }....................
:func.doc <<'/---'
:void die_unless_disk(
    :str device_filename,
    ?:str error_message='"${device_filename}\" not a disk device')

Throw an exception with the passed message unless the passed disk device file
exists.

== See Also ==

* is_disk().
/---
function die_unless_disk() {
    die_unless_args_1_to_2\
        'Expected one device filename and optional error message.'
    is_disk "${filename}" :or {
        :str filename="${1}"
        :die "${2:-\"${filename}\" not a disk device}"
    }
}

# ....................{ TESTERS                            }....................
:func.doc <<'/---'
[status=:bool] is_disk(:str device_filename)

Return success if the passed device file exists and corresponds to a currently
physically attached block-storage device (e.g., hard disk, USB flash drive) or
partition of this device.

== See Also ==

* disk.is_mounted() to test whether this disk is currently mounted or not.
/---
function is_disk() {
    die_unless_arg 'Expected one device filename.'
    die_unless_pathable blkid
    run_code_silent  blkid -- "${1}"
}

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
[stdout=:str status=:bool] get_disk_filesystem_type_if_found(
    :str device_filename)

Lowercase filesystem type of the passed disk if this disk is formatted
with a filesystem _or_ report failure otherwise.

== Examples ==

.get_disk_filesystem_type_if_found()
==========================================
[source]
------------------------------------------
>>> get_disk_filesystem_type_if_found "/dev/sda1"
ext4
------------------------------------------
==========================================
/---
function get_disk_filesystem_type_if_found() {
    die_unless_arg 'expected one device filename'
    get_disk_property TYPE "${1}"
}


:func.doc <<'/---'
[stdout=:str status=:bool] get_disk_property(
    :str device_filename :str property)

Current value of the passed property for the passed disk if this disk
has such property or return failure otherwise.

Common properties include:

* `LABEL`, the case-sensitive human-readable label for this disk if this disk is
  labeled.
* `TYPE`, the lowercase filesystem type for this disk if this disk is formatted
  with a filesystem.
* `UUID`, the 128-bit universally unique identifier (UUID) assigned this disk.
/---
function get_disk_property() {
    die_unless_args_2\
        'Expected one device filename and one property name.'
    :str device_filename="${1}" property="${2}"
    die_unless_disk "${device_filename}"
    die_unless_pathable blkid

    # Print this property if found.
    command blkid -o value -s -- "${property}" "${device_filename}"
}

# ....................{ GETTERS ~ label                    }....................
:func.doc <<'/---'
[stdout=:str status=:bool] get_disk_label_if_found(:str device_filename)

Label of the passed disk if such disk is labeled _or_ report failure otherwise.
/---
function get_disk_label_if_found() {
    die_unless_arg 'expected one device filename'
    get_disk_property LABEL "${1}"
}

# ....................{ SETTERS                            }....................
:func.doc <<'/---'
:void set_disk_label(:str device_filename :str label)

Set the filesystem label of the passed disk to the passed string.

For safety, disk labels should typically be no longer than 16 characters. If
this disk is _not_ formatted with a filesystem, an exception is thrown.
/---
function set_disk_label() {

    die_unless_args_2 'expected one device filename and label'
    :str device_filename="${1}" label="${2}" filesystem_type

    #FIXME: Implement this function. *sigh*
    die_unless_disk_unmounted "${device_filename}"

    # Get the filesystem type of such disk if formatted with a filesystem or
    # throw an exception.
    filesystem_type="$(get_disk_filesystem_type_if_found "${device_filename}")"
    print_message_interactively\
        "labeling ${filesystem_type}-formatted \"${device_filename}\" as \"${label}\"..."

    # Label this disk according to this type.
    case "${filesystem_type}" {
    btrfs)
        die_unless_pathable btrfs
        command btrfs filesystem label -- "${device_filename}" "${label}";;
    ext<2-4>)
        die_unless_pathable e2label
        command e2label -- "${device_filename}" "${label}";;
    xfs)
        die_unless_pathable xfs_admin
        command xfs_admin -L "${label}" -- "${device_filename}";;
    *) :die "filesystem \"${filesystem_type}\" currently unsupported";;
    }
}

# ....................{ PRINTERS                           }....................
#FIXME: While decent, this could certainly use augmentation. For each such disk
#that is also mounted, suffix its device path with:
#
# * A subset of print_mount_points() output, omitting "FLAGS" for brevity.
# * A subset of "df" output.
#
# We can use the "paste" command to cleverly append columns cut from "df" onto
# each print_mount_points() row of output, I believe. (Ah; well, nearly. The
# print_mount_points() :stdout.echo is not suitable for munging. Due to its
# substitution of FLAGS commas with spaces, space delimiters cannot be matched
# properly. Instead, we'll have to manually hack it from the "mount" command.
# Note, however, that "df" nearly provides all we need: it lacks only the
# filesystem type. Hmm...) Also:
#
# * It'd be very nice to lexicographically sort "df" lines by their first column,
#   ignoring the initial header.
# * For devices with labels, it'd be nice to print both the symbolic link label
#   and the target absolute path. This may require we cut some of the "df"
#   content, but is absolutely vital and hence takes precedence over that. To
#   conserve space, print only the label basename.
#
# Ah. The "blkid" command prints more of what we need: the absolute device file,
# the label, and the filesystem type. Moreover, it does so for *ALL* currently
# attached device files, mounted or not. Much better! That said, its :stdout.echo is
# not the cleanest. We'll need to munge it up quite a bit to get :stdout.echo suitable
# for piping to "column -t".
#
# Oh. Actually, under "blkid -o list", the :stdout.echo is fairly ideal. No heavy
# munging required -- save possibly for replacing the rather useless "UUID"
# column with disk size statistics.

:func.doc <<'/---'
:str print_disks(+:str device_filenames)

Print a human-readable list describing each passed device or all available
disk devices if no such devices are passed.
/---
function print_disks() {
    die_unless_pathable blkid
    command blkid -o list "${@}"
    #FIXME: Does this handle whitespace in device filenames or labels? Hmm.
    #Probably need some form of quote protection, here.
    # See print_mount_points() for details.
#   (
#       print 'DEVICE LABEL'
#       print -C2 -- /dev/disk/by-label/*(:A) /dev/disk/by-label/*(:t)
#   ) | column -t
}

# ....................{ WRITERS                            }....................
#FIXME: Rename to check_disk_with_options().
#FIXME: Right. Accept "fsck" options *FIRST*, as is the standard. Not
#particularly difficult, thankfully.

:func.doc <<'/---'
:str check_disk(:str device_filename *:str fsck_options)

Check the passed disk device for errors with the passed custom "fsck" options,
automatically repairing all such errors.
/---
function check_disk() {
    # Validate passed arguments.
    die_unless_args\
        'Expected one device file and optional "fsck" arguments.'
    :str device_file="${1}"
    die_unless_disk_unmounted "${device_filename}"
    die_unless_pathable fsck
    :args.shift 1

    # Check and repair. Always enable option "-M" regardless of whether called
    # interactively or not, thus prohibiting disk repair on mounted devices.
    #
    # Do not, however, always enable options "-a" or "-p". While seemingly
    # sensible defaults, both induce "fsck" to conditionally ignore otherwise
    # repairable errors (e.g., superblock mount time in the future). Dismantled,
    # this is:
    #
    # * "-M", prohibiting disk repair on mounted devices, which current research
    #   shows to be inherently risky (on even read-only mounted devices!):
    #     http://serverfault.com/questions/405248/linux-force-fsck-of-a-read-only-mounted-filesystem
    # * "-C", displaying progress bars if interactive.
    # * "-T", not displaying the title if non-interactive.
    if { :shell.is_interactive } {
        command fsck -M -C "${device_filename}" -- "${@}"
    } else {
        command fsck -M -T "${device_filename}" -- "${@}"
    }
}

# ....................{ FORMATTERS                         }....................
#FIXME: Right. Accept "mkfs" options *FIRST*, as is the standard. Not
#particularly difficult; so, let's a-go!
:func.doc <<'/---'
:str format_disk_with_options(
    *:str mkfs_options :str device_filename :str filesystem_type)

Format the passed disk with the passed filesystem type under the passed `mkfs`
options.
/---
function format_disk_with_options() {
    die_unless_args\
        'Expected optional "mkfs" arguments, one device filename, and one filesystem type.'
    die_unless_shell_interactive
    :str device_filename="${@[-2]}" filesystem_type="${@[-1]}"
    :str formatter="mkfs.${filesystem_type}"
    die_unless_disk_unmounted "${device_filename}"
    die_unless_pathable "${formatter}"\
        "Filesystem type \"${filesystem_type}\" unrecognized."
    :args.pop 2

    # Astonishingly, "mkfs.*" commands do *NOT* ask interactive shell users to
    # confirm extremely destructive formats prior to doing so. (Really? Come on,
    # Linux! This isn't obtuse rocket science. It's common decency.)
    is_query_line_yes\
        "really format \"${device_filename}\" as ${filesystem_type}?" :or
        :status.report_failure
    :stdout.echo_newline

    #FIXME: Naturally, we *REALLY* want to ${ZY_MKFS_EXT4_OPTIONS}-style list
    #globals to perform formatting with run_code_with_options_configured().
    #Here's the plan:
    #
    #* Make a new "if_config/mkfs" file containing...
    #* Empty list global ${ZY_MKFS_OPTIONS}.
    #* List global ${ZY_MKFS_OPTIONS_IF_INTERACTIVE} containing option "-v".
    #* One list global for each common filesystem type: e.g.,
    #  ${ZY_MKFS_EXT4_OPTIONS} and so forth. (Don't bother with
    #  "_IF_INTERACTIVE" versions of these.)

    # Format under "-v" for forced verbosity.
    if { :str.is_nonempty "${label}" } {
        command "${formatter}" -v -L "${label}" "${@}" -- "${device_filename}"
    } else {
        command "${formatter}" -v               "${@}" -- "${device_filename}"
    }
}

# ....................{ FORMATTERS                         }....................
:func.doc <<'/---'
:str erase_disk_securely(:str device_filename)

Securely erase all content on the passed disk, including partition headers.

While resource-consumptive, this erasure guarantees this content to be
unrecoverable with even enhanced data retrieval (e.g., forensics).
/---
function erase_disk_securely() {
    die_unless_arg 'expected one device file'
    die_unless_shell_interactive
    :str device_filename="${1}"
    die_unless_disk_unmounted "${device_filename}"

    # Confirm erasure.
    is_query_line_yes\
        "really erase \"${device_filename}\"?" :or :status.report_failure
    print_message "securely erasing \"${device_filename}\"... (This may take several hours to days.)"

    # Disk erasure command to be run.
    list dd; dd=( command dd bs=16M of="${device_filename}" )

    # If "pv" is installed, print an incremental progress bar during erasure.
    if { :pathable.is pv } {
        command pv -- "$(get_device_random_nonblocking)" | "${dd[@]}"
    # Otherwise, print incremental status updates during erasure.
    } else {
        #FIXME: Hmm; we probably want a function get_backgrounded_pid() (or some such).
        #FIXME: Actually, how about this:
        #
        #    integer dd_pid
        #    run_code_in_background_and_set_integer_to_pid\
        #        "${dd[@]}" dd_pid

        # Erase in the background.
        "${dd[@]}" &

        # Process ID of such erasure.
        :int dd_pid=$!

        # Print incremental status updates every second until erasure completes.
        command watch -e -n1 "kill -USR1 ${dd_pid}"
    }
}
