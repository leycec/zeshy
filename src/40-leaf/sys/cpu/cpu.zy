#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
CPU profiling and reporting.
/---

#FIXME: Rename "_processor" to "_cpu" everywhere. Just do it. The overlap with
#"_process" makes tab completion an inefficient bear and even less readable.

# ....................{ EXCEPTIONS                         }....................
#FIXME: Rename to die_unless_processor().
:func.doc <<'/---'
:void die_unless_processor_index(
    :int processor_index
    :str error_message='Processor ${processor_index} not in [1, $(get_processor_count)].'
)

Throw an exception with the passed message unless the passed processor exists.

== See Also ==

* is_processor_index().
/---
function die_unless_processor_index() {
    die_unless_args_1_to_2\
        'Expected one processor index and optional error message.'
    :str processor_index="${1}"
    is_processor_index "${processor_index}" or :die\
        "${2:-processor ${processor_index} not in [1, $(get_processor_count)]}"
}

# ....................{ TESTERS                            }....................
#FIXME: Rename to is_processor(). And lest ye question the wisdom in such
#decision -- yes, this is *ABSOLUTELY* essential to scaling such function
#nomenclature elsewhere. Consider "if_pathable/cpufreq", in particular, whose
#existing functions set_processor_governor(), set_processor_frequency(), etc.
#read quite sensibly as is but *NOT* at all if converted to include "_index", as
#would be required for conformance with the functions here: e.g.,
#set_processor_index_governor(), set_processor_index_frequency(). I can't
#imagine any other means other than 0- or 1-based integers for referring to
#processors. This is how Linux operates, so... just embrace it, yes?
:func.doc <<'/---'
[status=:bool] is_processor_index(:int processor_index)

Return success if a processor with the passed 1-based index exists.

In this case, a *processor* is a logical abstraction representing physical
hardware admitting at most a single concurrent thread of execution, typically at
a finer level of granularity than merely a CPU. Under modern CPU architectures,
processors correspond to either threads under hyperthreaded systems or cores
under non-hyperthreaded systems. In either case, a physical system consists of
nodes consisting of sockets consisting of CPUs consisting of cores consisting of
threads.

For example, a hyperthreaded Intel CPU with two cores with two threads each is
represented by the following logical processors:

* Processor 1, the first thread on the first core of such CPU.
* Processor 2, the second thread on the first core of such CPU.
* Processor 3, the first thread on the second core of such CPU.
* Processor 4, the second thread on the second core of such CPU.
/---
function is_processor_index() {
   die_unless_arg 'Expected one processor index.'
   :int.is_'>=<' "${1}" 1 "$(get_processor_count)"
}

# ....................{ GETTERS                            }....................
#FIXME: Generalize to BSD, etc.

:func.doc <<'/---'
:str get_processor_profile_file()

Absolute path of the system-wide file containing a human-readable profile of
processors on the current system.
/---
function get_processor_profile_file() {
    die_if_args
    :str filename='/proc/cpuinfo'
    die_unless_file "${filename}"

    # Return this path.
    :stdout.echo "${filename}"
}

# ....................{ GETTERS ~ counts                   }....................
:func.doc <<'/---'
:int get_processor_count()

Number of processors in the current system.

If this system is hyperthreaded, this is the total number of threads; else, this
is the total number of cores.

== See Also ==

* is_processor_index().
/---
function get_processor_count() {
    die_if_args

    #FIXME: This is probably Linux-specific. *massive shrug*
    #FIXME: Also document such global at the top-level above, in which case we
    #needn't declare such global here. (Zeshy semantics guarantee it to exist.)

    # Since processor count is strongly unlikely to change, cache results.
    integer_global_export ZY_PROCESSOR_COUNT
    ((  ZY_PROCESSOR_COUNT )) :or
        ZY_PROCESSOR_COUNT="$(get_string_pcre_multiline_match_count\
            "$(get_file_text "$(get_processor_profile_file)")"\
            '^processor\s*:')"

    # Return the now-cached result.
    :stdout.echo "${ZY_PROCESSOR_COUNT}"
}


#FIXME: Rename to get_core_count().
:func.doc <<'/---'
:int get_physical_processor_count()

Number of cores in the current system.
/---
function get_physical_processor_count() {
    #FIXME: Also implementable on "/proc/cpuinfo" itself, but much more
    #long-winded and requires Zeshyfication:
    #
    #   cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l
    #
    #To quote: "This command squishes the /proc/cpuinfo physical id and core id for
    #each logical CPU on to the same line, and then sorts them and runs uniq to
    #remove the extra hyperthreading logical CPU's. The final result is the number
    #of CPU cores on your Linux system." Courtesy:
    #
    #   https://www.ibm.com/developerworks/mydeveloperworks/blogs/brian/entry/linux_show_the_integer_of_cpu_cores_on_your_system17?lang=en
    #
    #Quite clever, actually.
    die_if_args
    die_unless_pathable lscpu

    # The number of uncommented lines "lscpu -p" outputs very concisely yields
    # the number of physical processors.
    get_string_pcre_multiline_match_count "$(lscpu -p)" '^\d+,'
}


#FIXME: Rename to get_processors().
:func.doc <<'/---'
:str get_processor_indices()

List all processor indices (i.e., integers in `[1, $(get_processor_count)]`) in
the current system.

== See Also ==

* is_processor_index().

== Examples ==

.get_processor_indices()
==========================================
[source]
------------------------------------------
# Assuming a non-hyperthreaded quad-core single-CPU system.
>>> get_processor_indices
1 2 3 4
------------------------------------------
==========================================
/---
function get_processor_indices() {
    die_if_args
    get_integers_in_range 1 "$(get_processor_count)"
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
:void print_processor()

Print a human-readable profile of all processors (e.g., threads on cores on
CPUs on sockets on nodes) the current machine exposes.
/---
function print_processor() {
    die_if_args

    {
        # If "lscpu" is installed, run that first. "lscpu" prints a helpful
        # synopsis, if somewhat lacking in detail.
        :pathable.is lscpu :and {
            print_message_heading 'lscpu'
            lscpu
        }

        # If "cpufreq-info" is installed, run that next. "cpufreq-info" prints
        # data on frequency scaling (e.g., overclocking, underclocking).
        :pathable.is cpufreq-info :and {
            print_message_heading 'cpufreq-info'
            print_processor_scaling
        }

        # Last, print the detailed contents of the processor profile file.
        string profile_filename
        profile_filename="$(get_processor_profile_file)"
        :is_file "${profile_filename}" :and {
            print_message_heading   "${profile_filename}"
            print_file_text "${profile_filename}"
        }
    } | :stdin.page
}
