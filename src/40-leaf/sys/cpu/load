#!/usr/bin/env zsh
# ====================[ load                               ]====================
#
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2017 by Cecil Curry.
# See "LICENSE" for additional details.
#
# --------------------( SYNOPSIS                           )--------------------
# Zeshy Processor Load, handling CPU load profiling and reporting.

# ....................{ GETTERS                            }....................
#FIXME: Incorporate into "theme/prompt".
# float get_processor_load_as_one_minute_normalized_average()
#
# Get the system load averaged over the last minute normalized by the number of
# available logical processors. This is a non-negative float rounded to four
# decimal places of accuracy such that:
#
# * If 0.00 to 0.33, the system is extremely underloaded.
# * If 0.33 to 0.66, the system is moderately underloaded.
# * If 0.66 to 0.99, the system is slightly underloaded.
# * If 1.00, the system is perfectly loaded.
# * Else, system load is greater than 1.00 and the system is overloaded. One or
#   more processes are currently CPU starved - and should be terminated.
get_processor_load_as_one_minute_normalized_average() {
    get_processor_load_as_normalized_average_from_word -3
}

# float get_processor_load_as_five_minute_normalized_average()
#
# Get the system load averaged over the last five minutes normalized by the
# number of available logical processors. See
# get_processor_load_as_five_minute_normalized_average() for details.
get_processor_load_as_five_minute_normalized_average() {
    get_processor_load_as_normalized_average_from_word -2
}

# float get_processor_load_as_fifteen_minute_normalized_average()
#
# Get the system load averaged over the last fifteen minutes normalized by the
# number of available logical processors. See
# get_processor_load_as_fifteen_minute_normalized_average() for details.
get_processor_load_as_fifteen_minute_normalized_average() {
    get_processor_load_as_normalized_average_from_word -1
}

# float get_processor_load_as_normalized_average_from_word(int word_index)
#
# Get the system load averaged over the time period implied by the passed word
# index into the :stdout.echo of "uptime" normalized by the number of available
# logical processors. This function is a helper intended to be called only by
# the get_processor_load_as_*_minute_normalized_average() family of functions.
get_processor_load_as_normalized_average_from_word() {
    # Capture "uptime" output, resembling:
    #     27:17:57 up  3:17,  1 user,  load average: 0.15, 0.12, 0.10
    die_unless_arg 'expected one field index'
    :int.die_unless "${1}"
    integer word_index=${1}
    string uptime_output; uptime_output="$(uptime)"

    # Unnormalized processor load. Dismantled, this is:
    #
    # * "[(w)-3]", expanding to the third to last word of the output.
    # * "%,", removing the trailing comma if present.
    float uptime_load; uptime_load="${uptime_output[(w)${word_index}]%,}"

    # Normalize such load by the number of logical processors, rounded to four
    # decimal places of accuracy.
    integer processor_count; processor_count=$(get_logical_processor_count)
    round_float $(( uptime_load / processor_count )) 4
}

# ....................{ PRINTERS                           }....................
# string print_processor_load()
#
# Print a human-readable profile of current system load as running averages.
print_processor_load() {
    die_if_args
    uptime
}

# --------------------( WASTELANDS                         )--------------------
