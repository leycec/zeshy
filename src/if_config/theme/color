#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'-/-'
Configure default `zeshy` *color styles* (i.e., mappings from style to color
names, permitting human-readable customization of colors output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.
-/-

# ....................{ COLORS                             }....................

#FIXME: Replace *ALL* underscores in color names with colons. This pretty much
#has to be done either manually or by globally search-and-replacing on specific
#color name substrings (e.g., replacing ":bold" with ":bold"). Colons are useful
#for suggesting such values to actually be stringified lists; underscores are
#unhelpful here because some ANSI SGR color values contain underscores
#(e.g., "background_white").
#FIXME: Rename to ${ZESHY_STYLE_TO_COLOR_NAMES}. While
#${ZESHY_STYLE_TO_ANSI_SGR_NAMES} also seems like a feasible name, recall that
#the former may refer to pseudo-colors (e.g., "grey") not present in the latter.
#FIXME: Update the documentation; values are no longer keys of ${ZESHY_COLOR}
#but rather concatenations of keys of ${ZESHY_ANSI_SGR_NAME_TO_VALUE}
#internally delimited by `:`. Much more powerful.

declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_COLOR_NAMES

Map non-prompt style to color names, permitting human-readable customization of
colors output by all `zeshy` runnables _except_ those relating to the prompt.
See ${ZESHY_PROMPT_STYLE_TO_COLOR_NAMES} for further details on prompt styles.

== Styles ==

Styles are `.`-delimited identifiers specific to the runnables referencing such
styles (e.g., `print_call_stack.line`, the line style specific to function
print_call_stack()). To preserve uniqueness, such identifiers are typically
prefixed by the dot-suffixed name of the corresponding runnables.

== Color Names ==

Color names are `:`-delimited lists in string format (e.g.,
`intense_blue:italic`, referring to the color high-intensity, italicized blue).
Each `:`-delimited substring of each such string should be either:

* A key of map ${ZESHY_ANSI_SGR_NAME_TO_VALUE}.
* `grey`, a `zeshy`-specific pseudo-color _not_ a key of such map, guaranteed to
  be in greyscale, no darker than `black`, and no brighter than `white`. Since
  the ANSI standard specifies no such color, `zeshy` dynamically cobbles such
  color together from varying intensities of `black` and `white` supported by
  modern terminal emulators (e.g., `rxvt-unicode`).

Order is insignificant within such string (e.g., `white:bold` and `bold:white`
both refer to the same color). Ideally, such substrings should be unique within
such string, although this is not strictly necessary (e.g., while `white:bold`
and `white:bold:white` both refer to the same color, the latter is unseemly).

See ${ZESHY_ANSI_SGR_NAME_TO_VALUE} for further details.

== Internal Conversion ==

This map is intended for configuration purposes only. `zeshy` runnables should
(typically) instead expand ${ZESHY_STYLE_TO_COLOR}, a general-purpose map from
non-prompt style to color value initialized from this map during recompilation
of `zeshy`\'s user digest file.

Specifically, for each key-value pair of this map, `zeshy` defines the same key
of ${ZESHY_STYLE_TO_COLOR} to expand to the corresponding ANSI escape code. For
example, if this map has a key `print_call.line` with value `grey`, `zeshy` adds
to ${ZESHY_STYLE_TO_COLOR} key `print_call.line` with value `\E\[0;30m` (i.e.,
the ANSI escape code resetting the current foreground color to grey).
/---
ZESHY_STYLE_TO_COLOR_NAMES=(
    # is_query_character_yes().
    is_query_character_yes.choice_parens_left  grey
    is_query_character_yes.choice_parens_right grey
    is_query_character_yes.choice_default      blue:bold
    is_query_character_yes.choice_other        blue:italic

    # print_hard_rule().
    print_hard_rule blue

    # print_call_stack().
    print_call_stack.prefix          red:bold
    print_call_stack.function_name   blue:bold
    print_call_stack.function_parens blue
    print_call_stack.script_name     magenta:bold
    print_call_stack.script_quotes   magenta
    print_call_stack.eval_name       cyan:bold
    print_call_stack.eval_parens     cyan
    print_call_stack.brace           white:bold
    print_call_stack.filename        grey:bold
    print_call_stack.colon           grey
    print_call_stack.line            red

    # print_heading().
    print_heading.text         grey:bold
    print_heading.corner_left  blue:bold
    print_heading.corner_right blue:bold
    print_heading.border_left  blue
    print_heading.border_right blue
    print_heading.joiner_left  cyan
    print_heading.joiner_right cyan

    # print_aliases_cli().
    print_aliases_cli.type_abbreviation blue
    print_aliases_cli.type_substitution blue:bold
    print_aliases_cli.type_untyped      magenta
    print_aliases_cli.name              white:bold
    print_aliases_cli.equals            grey
    print_aliases_cli.quotes            grey:bold
    print_aliases_cli.expansion         cyan_italic

    # print_message().
    print_message.heading.text         grey:bold
    print_message.heading.corner_left  blue:bold
    print_message.heading.corner_right cyan:bold
    print_message.heading.border_left  blue
    print_message.heading.border_right blue
    print_message.heading.joiner_left  cyan
    print_message.heading.joiner_right cyan
    print_message.body.text            white:bold
    print_message.body.border_left     blue
    print_message.body.border_right    blue
    print_message.footing.corner_left  cyan:bold
    print_message.footing.corner_right blue:bold
    print_message.footing.border_left  blue
    print_message.footing.border_right blue

    # print_message_item().
    print_message_item.text                   white:bold
    print_message_item.border_left            blue:bold
    print_message_item.border_right           blue:bold
    print_message_item.border_continued_left  blue
    print_message_item.border_continued_right blue
    print_message_item.padding_joiner_right   grey
    print_message_item.padding_right          grey

    #FIXME: Obsolete. Excise!
    # print_message() and cohorts.
    print_warning.caller  yellow:bold
    print_error.caller    red:bold
    print_warning.colon   grey:bold
    print_error.colon     grey:bold
    print_warning.message white:bold
    print_error.message   white:bold

    #FIXME: Replace "command_synopsis" with "synopsis" and "synopsis." with
    #"synopsis_".

    # print_usage().
    print_usage.usage                         grey:bold
    print_usage.usage_colon                   grey:bold
    print_usage.command_name                  cyan:bold
    print_usage.arg_brace                     cyan
    print_usage.arg_name                      cyan:bold
    print_usage.arg_ellipsis                  grey:bold
    print_usage.command_synopsis              white:bold_italic
    print_usage.command_synopsis.command_name cyan:bold_italic
    print_usage.command_synopsis.arg_name     cyan:bold_italic
    print_usage.options_heading_name          magenta:bold
    print_usage.options_heading_colon         grey:bold
    print_usage.option_dash                   blue
    print_usage.option_name                   blue:bold
    print_usage.option_equals                 green
    print_usage.option_arg                    green:bold
    print_usage.option_comma                  grey:bold
    print_usage.option_synopsis               white_italic

    # Pseudo-styles mapped to the corresponding colors. Referencing such
    # pseudo-styles elsewhere is discouraged -- but sometimes unavoidable.
    color.reset          reset
    color.default        default
    color.black          black
    color.red            red
    color.green          green
    color.yellow         yellow
    color.blue           blue
    color.magenta        magenta
    color.cyan           cyan
    color.white          white
    color.black:bold     black:bold
    color.red:bold       red:bold
    color.green:bold     green:bold
    color.yellow:bold    yellow:bold
    color.blue:bold      blue:bold
    color.magenta:bold   magenta:bold
    color.cyan:bold      cyan:bold
    color.white:bold     white:bold
)

declare_global_with_stdin <<'/---'
map ZESHY_PROMPT_STYLE_TO_COLOR_NAMES

Map prompt style to color names, permitting human-readable customization of
colors output by `zeshy` runnables relating to the prompt. See
${ZESHY_STYLE_TO_COLOR_NAMES} for further details.

== Motivation ==

Prompt and non-prompt color values differ. While prompt colors must be delimited
by `%{` and `%}` to prevent such colors from erroneously contributing to the
prompt length, non-prompt colors require no such delimitation. Hence, mapping
style to color names requires separating such styles into prompt and non-prompt
styles and then maps from style to color names on the same basis.
/---
ZESHY_PROMPT_STYLE_TO_COLOR_NAMES=(
    # startup_zeshy_terminal_prompt() when the current user is root.
    startup_zeshy_terminal_prompt.superuser.brace                   grey
    startup_zeshy_terminal_prompt.superuser.host                    red
    startup_zeshy_terminal_prompt.superuser.user                    red:bold
    startup_zeshy_terminal_prompt.superuser.path                    grey:bold
    startup_zeshy_terminal_prompt.superuser.prior_command_succeeded grey:bold
    startup_zeshy_terminal_prompt.superuser.prior_command_failed    magenta:bold
    startup_zeshy_terminal_prompt.superuser.input                   white:bold

    # startup_zeshy_terminal_prompt() when the current user is not root.
    startup_zeshy_terminal_prompt.nonsuperuser.brace                   white:bold
    startup_zeshy_terminal_prompt.nonsuperuser.host                    cyan
    startup_zeshy_terminal_prompt.nonsuperuser.user                    cyan:bold
    startup_zeshy_terminal_prompt.nonsuperuser.path                    green
    startup_zeshy_terminal_prompt.nonsuperuser.prior_command_succeeded green
    startup_zeshy_terminal_prompt.nonsuperuser.prior_command_failed    red:bold
    startup_zeshy_terminal_prompt.nonsuperuser.input                   white:bold
)
