#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'-/-'
Configure default `zeshy` *text styles* (i.e., mappings from styles to string
literals, permitting human-readable customization of strings output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.

== See Also ==

* https://en.wikipedia.org/wiki/Box-drawing_character[Box-drawing characters] in
  a variety of popular encodings, including UTF-8.
-/-

# ....................{ TEXT                               }....................
declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_UTF8

Map styles to UTF-8-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal support such encoding. If such locale and terminal do _not_ support
such encoding, `zeshy` reverts to the ASCII-encoded string literals mapped by
${ZESHY_STYLE_TO_TEXT_ASCII}.

Such strings contain only *printable UTF-8-encoded characters* (i.e., any
Unicode character in UTF-8 encoding excluding control characters). Since ANSI
escape codes contain control characters, such strings contain no such codes.

See ${ZESHY_STYLE_TO_COLOR_NAMES} for further details on styles.
/---
ZESHY_STYLE_TO_TEXT_UTF8=(
    #FIXME: After finalized, migrate to ${ZESHY_STYLE_TO_TEXT_ASCII}.
    # is_input_character_yes_for_question().
    is_input_character_yes_for_question.choice_parens_left  ' ❰'  # ⦃⟦
    is_input_character_yes_for_question.choice_parens_right '❱ '  # ⦄⟧
    is_input_character_yes_for_question.choice_default      'n'
    is_input_character_yes_for_question.choice_other        'y'

    # print_heading(). Such schemes print strings resembling:
    #
    # ────────{ hello }─────────
    #
    # ────────╢ hello ╟─────────
    #
    # ────────┨ hello ┠─────────
    #
    # ├───────╼ hello ╾────────┤
    #
    # ┠───────╼ hello ╾────────┨
    #
    # ┌───────╼ hello ╾────────┐
    #
    # ┎───────╼ hello ╾────────┒
    #
    # ────────╼ hello ╾─────────
    #
    # ────────• hello •─────────
    #
    print_heading.corner_left  '┎'
    print_heading.corner_right '┒'
    print_heading.border_left  '─'
    print_heading.border_right '─'
    print_heading.joiner_left  '• '
    print_heading.joiner_right ' •'
#   print_heading.joiner_left  '╼ '
#   print_heading.joiner_right ' ╾'

    # print_message().
    print_message.heading.corner_left  '┎'
    print_message.heading.corner_right '┒'
    print_message.heading.border_left  '─'
    print_message.heading.border_right '─'
    print_message.heading.joiner_left  '╼ '
    print_message.heading.joiner_right ' ╾'
    print_message.body.border_left     '┃ '
    print_message.body.border_right    ' ┃'
    print_message.footing.corner_left  '┖'
    print_message.footing.corner_right '┚'
    print_message.footing.border_left  '─'
    print_message.footing.border_right '─'

    # print_message_item().
    print_message_item.border_left            '┇ '
    print_message_item.border_right           '┇'
    print_message_item.border_continued_left  '╏ '
    print_message_item.border_continued_right '╏'
    print_message_item.padding_joiner_right   ' •'  #◦‣╶
    print_message_item.padding_right          '┈'
)

# ....................{ STYLES ~ prompt                    }....................
declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_ASCII

Map styles to ASCII-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal do _not_ support any richer encoding. For example, if such locale and
terminal support the UTF-8 encoding, `zeshy` prefers the UTF-8-encoded string
literals mapped by ${ZESHY_STYLE_TO_TEXT_UTF8} to those of this map. See such
map for further details.
/---
ZESHY_STYLE_TO_TEXT_ASCII=(
    # print_heading().
    print_heading.corner_left  '-'
    print_heading.corner_right '-'
    print_heading.border_left  '-'
    print_heading.border_right '-'
    print_heading.joiner_left  '{ '
    print_heading.joiner_right ' }'

    # print_message().
    print_message.heading.corner_left  '/'
    print_message.heading.corner_right '\'
    print_message.heading.border_left  '-'
    print_message.heading.border_right '-'
    print_message.heading.joiner_left  '{ '
    print_message.heading.joiner_right ' }'
    print_message.body.border_left     '| '
    print_message.body.border_right    ' |'
    print_message.footing.corner_left  '\'
    print_message.footing.corner_right '/'
    print_message.footing.border_left  '-'
    print_message.footing.border_right '-'

    # print_message_item().
    print_message_item.border_left            '[ '
    print_message_item.border_right           ']'
    print_message_item.border_continued_left  '( '
    print_message_item.border_continued_right ')'
    print_message_item.padding_right          '-'
)
