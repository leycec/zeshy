#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'/---'
Configure default `zeshy` *color styles* (i.e., mappings from style to color
names, permitting human-readable customization of colors output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.
/---

# ....................{ COLORS                             }....................
declare_global_with_stdin map ZESHY_STYLE_TO_COLOR_NAMES <<'/---'
Map non-prompt style to color names, permitting human-readable customization of
colors output by all `zeshy` runnables _except_ those relating to the prompt.
See ${ZESHY_STYLE_TO_COLOR_NAMES_PROMPT} for further details on prompt styles.

== Styles ==

Styles are `.`-delimited identifiers specific to the runnables referencing such
styles (e.g., `output_call_stack.line`, the line style specific to function
output_call_stack()). To preserve uniqueness, such identifiers are typically
prefixed by the dot-suffixed name of the corresponding runnables.

== Color Names ==

Color names are `:`-delimited lists in string format (e.g.,
`intense_blue:italic`, referring to the color high-intensity, italicized blue).
Each `:`-delimited substring of each such string should be either:

* A key of map ${ZESHY_ANSI_SGR_NAME_TO_VALUE}.
* `grey`, a `zeshy`-specific pseudo-color _not_ a key of such map, guaranteed to
  be in greyscale, no darker than `black`, and no brighter than `white`. Since
  the ANSI standard specifies no such color, `zeshy` dynamically cobbles such
  color together from varying intensities of `black` and `white` supported by
  modern terminal emulators (e.g., `rxvt-unicode`).

Order is insignificant within such string (e.g., `white:bold` and `bold:white`
both refer to the same color). Ideally, such substrings should be unique within
such string, although this is not strictly necessary (e.g., while `white:bold`
and `white:bold:white` both refer to the same color, the latter is unseemly).

See ${ZESHY_ANSI_SGR_NAME_TO_VALUE} for further details.

== Internal Conversion ==

This map is intended for configuration purposes only. `zeshy` runnables should
(typically) instead expand ${ZESHY_STYLE_TO_COLOR}, a general-purpose map from
non-prompt style to color value initialized from this map during recompilation
of `zeshy`\'s user digest file.

Specifically, for each key-value pair of this map, `zeshy` defines the same key
of ${ZESHY_STYLE_TO_COLOR} to expand to the corresponding ANSI escape code. For
example, if this map has a key `print_call.line` with value `grey`, `zeshy` adds
to ${ZESHY_STYLE_TO_COLOR} key `print_call.line` with value `\E\[0;30m` (i.e.,
the ANSI escape code resetting the current foreground color to grey).
/---
() {
    # Colors commonly referenced below. Since zsh does *NOT* permit unquoted
    # colons in such text, quote such colors.
    string\
        message='blue:bold'\
        message_dim='blue'\
        warning='yellow:bold'\
        warning_dim='yellow'\
        exception='red:bold'\
        exception_dim='red'\
        text='white:bold'\
        text_dim='white'\
        border='grey'\
        joiner='grey'\
        runnable_function_prefix='blue'\
        runnable_function='blue:bold'\
        runnable_function_suffix='blue'\
        runnable_eval_prefix='cyan'\
        runnable_eval='cyan:bold'\
        runnable_eval_suffix='cyan'\
        runnable_filename_prefix='magenta'\
        runnable_filename='magenta:bold'\
        runnable_filename_suffix='magenta'\
        query_prompt_border_left='blue:bold'\
        query_prompt_joiner_left='grey'\
        query_prompt_parens_left='red:bold'\
        query_prompt_parens_right='red:bold'\
        query_prompt_choice_default='cyan:bold'\
        query_prompt_choice_nondefault='cyan:italic'\
        query_prompt_choice_separator='grey'\
        query_prompt_choice_fork='grey'\
        query_prompt_input='white:bold'

    ZESHY_STYLE_TO_COLOR_NAMES=(
        # Pseudo-styles mapped to the corresponding colors. Referencing such
        # pseudo-styles elsewhere is discouraged if occasionally unavoidable.
        color.reset          reset
        color.default        default
        color.black          black
        color.red            red
        color.green          green
        color.yellow         yellow
        color.blue           blue
        color.magenta        magenta
        color.cyan           cyan
        color.white          white
        color.black:bold     black:bold
        color.red:bold       red:bold
        color.green:bold     green:bold
        color.yellow:bold    yellow:bold
        color.blue:bold      blue:bold
        color.magenta:bold   magenta:bold
        color.cyan:bold      cyan:bold
        color.white:bold     white:bold

        # output_line_horizontal().
        output_line_horizontal.border blue

        # print_aliases_cli().
        print_aliases_cli.type_abbreviation blue
        print_aliases_cli.type_substitution blue:bold
        print_aliases_cli.type_untyped      magenta
        print_aliases_cli.name              white:bold
        print_aliases_cli.equals            grey
        print_aliases_cli.quotes            grey:bold
        print_aliases_cli.expansion         cyan:italic

        # print_call_stack().
        print_call_stack.stack.corner_left.first      "${border}"
        print_call_stack.stack.border_left.first      "${border}"
        print_call_stack.stack.joiner_left.first      green:bold
        print_call_stack.stack.corner_left.midst      "${border}"
        print_call_stack.stack.border_left.midst      "${border}"
        print_call_stack.stack.joiner_left.midst      green:bold
        print_call_stack.stack.corner_left.last       "${border}"
        print_call_stack.stack.border_left.last       "${border}"
        print_call_stack.stack.joiner_left.last       green:bold
        print_call_stack.stack.callee.function_prefix "${runnable_function_prefix}"
        print_call_stack.stack.callee.function        "${runnable_function}"
        print_call_stack.stack.callee.function_suffix "${runnable_function_suffix}"
        print_call_stack.stack.callee.eval_prefix     "${runnable_eval_prefix}"
        print_call_stack.stack.callee.eval            "${runnable_eval}"
        print_call_stack.stack.callee.eval_suffix     "${runnable_eval_suffix}"
        print_call_stack.stack.callee.filename_prefix "${runnable_filename_prefix}"
        print_call_stack.stack.callee.filename        "${runnable_filename}"
        print_call_stack.stack.callee.filename_suffix "${runnable_filename_suffix}"
        #FIXME: Ideally, I'd vastly prefer "corner_left", "border_left", and
        #"joiner_left" to be dark greys. Unfortunately, "grey" maps to "black:bold",
        #which is displayed under the bold variant of "DejaVu Sans Mono", which
        #sadly displays such characters either not at all or improperly. This is
        #correctable by mapping "grey" to an actual greyscale color under 88-
        #and 256-color terminals. Certainly doable; we just have to do it.
        print_call_stack.stack.caller.corner_left     white
        print_call_stack.stack.caller.border_left     grey:bold
        print_call_stack.stack.caller.joiner_left     grey:bold
        print_call_stack.stack.caller.filename_prefix grey
        print_call_stack.stack.caller.filename        green:bold
        print_call_stack.stack.caller.filename_suffix grey
        print_call_stack.stack.caller.line_prefix     white
        print_call_stack.stack.caller.line            green
        print_call_stack.stack.caller.line_suffix     white

        # print_exception().
        print_exception.heading.runnable.eval_prefix     "${exception_dim}"
        print_exception.heading.runnable.eval            "${exception}"
        print_exception.heading.runnable.eval_suffix     "${exception_dim}"
        print_exception.heading.runnable.function_prefix "${exception_dim}"
        print_exception.heading.runnable.function        "${exception}"
        print_exception.heading.runnable.function_suffix "${exception_dim}"
        print_exception.heading.runnable.filename_prefix "${exception_dim}"
        print_exception.heading.runnable.filename        "${exception}"
        print_exception.heading.runnable.filename_suffix "${exception_dim}"
        print_exception.heading.text                     "${exception}"
        print_exception.heading.corner_left              "${exception}"
        print_exception.heading.corner_right             "${exception}"
        print_exception.heading.border_left              "${border}"
        print_exception.heading.border_right             "${border}"
        print_exception.heading.joiner_left              "${joiner}"
        print_exception.heading.joiner_right             "${joiner}"
        print_exception.failure.runnable.function_prefix "${runnable_function_prefix}"
        print_exception.failure.runnable.function        "${runnable_function}"
        print_exception.failure.runnable.function_suffix "${runnable_function_suffix}"
        print_exception.failure.runnable.eval_prefix     "${runnable_eval_prefix}"
        print_exception.failure.runnable.eval            "${runnable_eval}"
        print_exception.failure.runnable.eval_suffix     "${runnable_eval_suffix}"
        print_exception.failure.runnable.filename_prefix "${runnable_filename_prefix}"
        print_exception.failure.runnable.filename        "${runnable_filename}"
        print_exception.failure.runnable.filename_suffix "${runnable_filename_suffix}"
        print_exception.failure.text                     "${text_dim}"
        print_exception.failure.status                   yellow:bold
        print_exception.failure.status_suffix            yellow
        print_exception.failure.footing.border_left      "${border}"
        print_exception.failure.footing.border_right     "${border}"
        print_exception.content.border_left              "${border}"
        print_exception.content.border_right             "${border}"
        print_exception.content.text                     "${text}"
        print_exception.footing.corner_left              "${exception}"
        print_exception.footing.corner_right             "${exception}"
        print_exception.footing.border_left              "${border}"
        print_exception.footing.border_right             "${border}"
        print_exception.stack.corner_left.first          "${border}"
        print_exception.stack.border_left.first          "${border}"
        print_exception.stack.joiner_left.first          "${exception}"
        print_exception.stack.corner_left.midst          "${border}"
        print_exception.stack.border_left.midst          "${border}"
        print_exception.stack.joiner_left.midst          "${exception}"
        print_exception.stack.corner_left.last           "${border}"
        print_exception.stack.border_left.last           "${border}"
        print_exception.stack.joiner_left.last           "${exception}"
        print_exception.stack.callee.function_prefix     "${runnable_function_prefix}"
        print_exception.stack.callee.function            "${runnable_function}"
        print_exception.stack.callee.function_suffix     "${runnable_function_suffix}"
        print_exception.stack.callee.eval_prefix         "${runnable_eval_prefix}"
        print_exception.stack.callee.eval                "${runnable_eval}"
        print_exception.stack.callee.eval_suffix         "${runnable_eval_suffix}"
        print_exception.stack.callee.filename_prefix     "${runnable_filename_prefix}"
        print_exception.stack.callee.filename            "${runnable_filename}"
        print_exception.stack.callee.filename_suffix     "${runnable_filename_suffix}"
        print_exception.stack.caller.corner_left         white
        print_exception.stack.caller.border_left         grey:bold
        print_exception.stack.caller.joiner_left         grey:bold
        print_exception.stack.caller.filename_prefix     grey
        print_exception.stack.caller.filename            green:bold
        print_exception.stack.caller.filename_suffix     grey
        print_exception.stack.caller.line_prefix         white
        print_exception.stack.caller.line                green
        print_exception.stack.caller.line_suffix         red

        # print_message().
        print_message.heading.runnable.eval_prefix     "${message_dim}"
        print_message.heading.runnable.eval            "${message}"
        print_message.heading.runnable.eval_suffix     "${message_dim}"
        print_message.heading.runnable.function_prefix "${message_dim}"
        print_message.heading.runnable.function        "${message}"
        print_message.heading.runnable.function_suffix "${message_dim}"
        print_message.heading.runnable.filename_prefix "${message_dim}"
        print_message.heading.runnable.filename        "${message}"
        print_message.heading.runnable.filename_suffix "${message_dim}"
        print_message.heading.text                     "${message}"
        print_message.heading.corner_left              "${message}"
        print_message.heading.corner_right             "${message}"
        print_message.heading.border_left              "${border}"
        print_message.heading.border_right             "${border}"
        print_message.heading.joiner_left              "${joiner}"
        print_message.heading.joiner_right             "${joiner}"
        print_message.content.text                     "${text}"
        print_message.content.border_left              "${border}"
        print_message.content.border_right             "${border}"
        print_message.footing.corner_left              "${message}"
        print_message.footing.corner_right             "${message}"
        print_message.footing.border_left              "${border}"
        print_message.footing.border_right             "${border}"

        # print_message_heading().
        print_message_heading.text         "${message}"
        print_message_heading.corner_left  "${message}"
        print_message_heading.corner_right "${message}"
        print_message_heading.border_left  "${border}"
        print_message_heading.border_right "${border}"
        print_message_heading.joiner_left  "${joiner}"
        print_message_heading.joiner_right "${joiner}"

        # print_message_item().
        print_message_item.text                   "${text}"
        print_message_item.border_left            "${message}"
        print_message_item.border_right           "${message}"
        print_message_item.border_left_continued  "${message_dim}"
        print_message_item.border_right_continued "${message_dim}"
        print_message_item.joiner_right           "${joiner}"
        print_message_item.padder_right           "${joiner}"

        # print_usage().
        print_usage.usage                 grey:bold
        print_usage.usage_colon           grey:bold
        print_usage.command_name          cyan:bold
        print_usage.arg_brace             cyan
        print_usage.arg_name              cyan:bold
        print_usage.arg_ellipsis          grey:bold
        print_usage.synopsis              white:bold:italic
        print_usage.synopsis_command_name cyan:bold:italic
        print_usage.synopsis_arg_name     cyan:bold:italic
        print_usage.options_heading_name  magenta:bold
        print_usage.options_heading_colon grey:bold
        print_usage.option_dash           blue
        print_usage.option_name           blue:bold
        print_usage.option_equals         green
        print_usage.option_arg            green:bold
        print_usage.option_comma          grey:bold
        print_usage.option_synopsis       white:italic

        # print_warning().
        print_warning.heading.runnable.eval_prefix     "${warning_dim}"
        print_warning.heading.runnable.eval            "${warning}"
        print_warning.heading.runnable.eval_suffix     "${warning_dim}"
        print_warning.heading.runnable.function_prefix "${warning_dim}"
        print_warning.heading.runnable.function        "${warning}"
        print_warning.heading.runnable.function_suffix "${warning_dim}"
        print_warning.heading.runnable.filename_prefix "${warning_dim}"
        print_warning.heading.runnable.filename        "${warning}"
        print_warning.heading.runnable.filename_suffix "${warning_dim}"
        print_warning.heading.text                     "${warning}"
        print_warning.heading.corner_left              "${warning}"
        print_warning.heading.corner_right             "${warning}"
        print_warning.heading.border_left              "${border}"
        print_warning.heading.border_right             "${border}"
        print_warning.heading.joiner_left              "${joiner}"
        print_warning.heading.joiner_right             "${joiner}"
        print_warning.content.text                     "${text}"
        print_warning.content.border_left              "${border}"
        print_warning.content.border_right             "${border}"
        print_warning.footing.corner_left              "${warning}"
        print_warning.footing.corner_right             "${warning}"
        print_warning.footing.border_left              "${border}"
        print_warning.footing.border_right             "${border}"

        # set_string_to_query_character().
        set_string_to_query_character.prompt.border_left       "${query_prompt_border_left}"
        set_string_to_query_character.prompt.joiner_left       "${query_prompt_joiner_left}"
        set_string_to_query_character.prompt.parens_left       "${query_prompt_parens_left}"
        set_string_to_query_character.prompt.parens_right      "${query_prompt_parens_right}"
        set_string_to_query_character.prompt.choice_default    "${query_prompt_choice_default}"
        set_string_to_query_character.prompt.choice_nondefault "${query_prompt_choice_nondefault}"
        set_string_to_query_character.prompt.choice_separator  "${query_prompt_choice_separator}"
        set_string_to_query_character.prompt.choice_fork       "${query_prompt_choice_fork}"
        set_string_to_query_character.prompt.input             "${query_prompt_input}"

        # set_string_to_query_line().
        set_string_to_query_line.prompt.border_left       "${query_prompt_border_left}"
        set_string_to_query_line.prompt.joiner_left       "${query_prompt_joiner_left}"
        set_string_to_query_line.prompt.parens_left       "${query_prompt_parens_left}"
        set_string_to_query_line.prompt.parens_right      "${query_prompt_parens_right}"
        set_string_to_query_line.prompt.choice_default    "${query_prompt_choice_default}"
        set_string_to_query_line.prompt.choice_nondefault "${query_prompt_choice_nondefault}"
        set_string_to_query_line.prompt.choice_separator  "${query_prompt_choice_separator}"
        set_string_to_query_line.prompt.choice_fork       "${query_prompt_choice_fork}"
        set_string_to_query_line.prompt.input             "${query_prompt_input}"
    )
}

declare_global_with_stdin map ZESHY_STYLE_TO_COLOR_NAMES_PROMPT <<'/---'
Map prompt style to color names, permitting human-readable customization of
colors output by `zeshy` runnables relating to the prompt. See
${ZESHY_STYLE_TO_COLOR_NAMES} for further details.

== Motivation ==

Prompt and non-prompt color values differ. While prompt colors must be delimited
by `%{` and `%}` to prevent such colors from erroneously contributing to the
prompt length, non-prompt colors require no such delimitation. Hence, mapping
style to color names requires separating such styles into prompt and non-prompt
styles and then maps from style to color names on the same basis.
/---
ZESHY_STYLE_TO_COLOR_NAMES_PROMPT=(
    # startup_zeshy_terminal_prompt() when the current user is root.
    startup_zeshy_terminal_prompt.superuser.brace                   grey
    startup_zeshy_terminal_prompt.superuser.host                    red
    startup_zeshy_terminal_prompt.superuser.user                    red:bold
    startup_zeshy_terminal_prompt.superuser.path                    grey:bold
    startup_zeshy_terminal_prompt.superuser.prior_command_succeeded grey:bold
    startup_zeshy_terminal_prompt.superuser.prior_command_failed    magenta:bold
    startup_zeshy_terminal_prompt.superuser.input                   white:bold

    # startup_zeshy_terminal_prompt() when the current user is not root.
    startup_zeshy_terminal_prompt.nonsuperuser.brace                   white:bold
    startup_zeshy_terminal_prompt.nonsuperuser.host                    cyan
    startup_zeshy_terminal_prompt.nonsuperuser.user                    cyan:bold
    startup_zeshy_terminal_prompt.nonsuperuser.path                    green
    startup_zeshy_terminal_prompt.nonsuperuser.prior_command_succeeded green
    startup_zeshy_terminal_prompt.nonsuperuser.prior_command_failed    red:bold
    startup_zeshy_terminal_prompt.nonsuperuser.input                   white:bold
)
