#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'-/-'
Configure default `zeshy` *text styles* (i.e., mappings from styles to string
literals, permitting human-readable customization of strings output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.

== See Also ==

* https://en.wikipedia.org/wiki/Box-drawing_character[Box-drawing characters] in
  a variety of popular encodings, including UTF-8.
-/-

# ....................{ TEXT                               }....................
#FIXME: Manually attempting to keep this synchronizing with
#${ZESHY_STYLE_TO_TEXT_UTF8} below is a fool's errand. If the current digest is
#the debug digest, we *NEED* to make sure that ${ZESHY_STYLE_TO_TEXT_UTF8}
#contains the exact same keys as this map. This should be a fairly simple
#algorithm: get the keys for both maps into two lists, then perform a list
#difference (in whatever arbitrary direction produces the most readable output).
#If such difference is empty, the two maps are synchronized; else, print a
#warning containing listing all keys which differ between the two.

declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_UTF8

Map styles to UTF-8-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal support such encoding. If such locale and terminal do _not_ support
such encoding, `zeshy` reverts to the ASCII-encoded string literals mapped by
${ZESHY_STYLE_TO_TEXT_ASCII}.

Such strings contain only *printable UTF-8-encoded characters* (i.e., any
Unicode character in UTF-8 encoding excluding control characters). Since ANSI
escape codes contain control characters, such strings contain no such codes.

See ${ZESHY_STYLE_TO_COLOR_NAMES} for further details on styles.
/---
() {
    # Strings commonly referenced below. Helpful strings include: #◦‣╶
    string\
        quote_double_left='“'\
        quote_double_right='”'\
        quote_single_left='‘'\
        quote_single_right='’'\
        parens_left='❰'\
        parens_right='❱'\
        border_top='┈'\
        border_bottom='┈'\
        border_left='┋ '\
        border_right=' ┋'\
        corner_top_left='┎'\
        corner_top_right='┒'\
        corner_bottom_left='┖'\
        corner_bottom_right='┚'\
        joiner_left='• '\
        joiner_tween='•'\
        joiner_right=' •'\
        runner_eval_prefix='('\
        runner_eval_suffix=')'\
        runner_function_prefix=''\
        runner_function_suffix='()'\
        runner_filename_prefix\
        runner_filename_suffix
    runner_filename_prefix="${quote_double_left}"
    runner_filename_suffix="${quote_double_right}"

    #FIXME: Rename "_continued" to "_nonfirst" everywhere.
    ZESHY_STYLE_TO_TEXT_UTF8=(
        # Pseudo-styles mapped to the corresponding characters.
        text.quote_double_left  "${quote_double_left}"
        text.quote_double_right "${quote_double_right}"
        text.quote_single_left  "${quote_single_left}"
        text.quote_single_right "${quote_single_right}"

        #FIXME: Copy below, after working.
        # output_call_stack(), printing output resembling:
        #
        #   ┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• mount_disk() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
        #   ┇ mount_boot_dir_writable() failed with 1:     ┇
        #   ┇ Expected no arguments.                       ┇
        #   ┇┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
        #   ┠┈┈┈•
        #   ┖┰┈┈•
        #    ┖┰┈•
        #     ┖┈•
        #
        # Or perhaps:
        #
        #   ┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• mount_disk() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
        #   ┇ mount_boot_dir_writable() failed with 1:     ┇
        #   ┇ Expected no arguments.                       ┇
        #   ┇┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
        #   ┠┈•
        #   ┖┰┈•
        #    ┖┰┈•
        #     ┖┈┈•
        #
        # I vastly prefer the former, but admit the latter to be slightly
        # easier implemented. Bah! Just go with the former.
        output_call_stack.corner_left_first      '┠'
        output_call_stack.border_left_first      "${border_top}"
        output_call_stack.joiner_left_first      "${joiner_left}"
        output_call_stack.corner_left_tween      '┖┰'
        output_call_stack.border_left_tween      "${border_top}"
        output_call_stack.joiner_left_tween      "${joiner_left}"
        output_call_stack.corner_left_last       '┖'
        output_call_stack.border_left_last       "${border_top}"
        output_call_stack.joiner_left_last       "${joiner_left}"
        output_call_stack.callee_eval_prefix     "${runner_eval_prefix}"
        output_call_stack.callee_eval_suffix     "${runner_eval_suffix}"
        output_call_stack.callee_function_prefix "${runner_function_prefix}"
        output_call_stack.callee_function_suffix "${runner_function_suffix}"
        output_call_stack.callee_filename_prefix "${runner_filename_prefix}"
        output_call_stack.callee_filename_suffix "${runner_filename_suffix}"
        output_call_stack.caller_parens_left     " ${parens_left} "
        output_call_stack.caller_parens_right    " ${parens_right}"
        output_call_stack.caller_filename_prefix "${runner_filename_prefix}"
        output_call_stack.caller_filename_suffix "${runner_filename_suffix}"
        output_call_stack.caller_line_prefix     " ${joiner_tween} "
        output_call_stack.caller_line_suffix     ''

        # output_line_horizontal().
        output_line_horizontal.border "${border_top}"

        # print_message().
        print_message.heading.corner_left  "${corner_top_left}"
        print_message.heading.corner_right "${corner_top_right}"
        print_message.heading.border_left  "${border_top}"
        print_message.heading.border_right "${border_top}"
        print_message.heading.joiner_left  "${joiner_left}"
        print_message.heading.joiner_right "${joiner_right}"
        print_message.content.border_left     "${border_left}"
        print_message.content.border_right    "${border_right}"
        print_message.footing.corner_left  "${corner_bottom_left}"
        print_message.footing.corner_right "${corner_bottom_right}"
        print_message.footing.border_left  "${border_bottom}"
        print_message.footing.border_right "${border_bottom}"

        # print_warning().
        print_warning.heading.corner_left  "${corner_top_left}"
        print_warning.heading.corner_right "${corner_top_right}"
        print_warning.heading.border_left  "${border_top}"
        print_warning.heading.border_right "${border_top}"
        print_warning.heading.joiner_left  "${joiner_left}"
        print_warning.heading.joiner_right "${joiner_right}"
        print_warning.content.border_left  "${border_left}"
        print_warning.content.border_right "${border_right}"
        print_warning.footing.corner_left  "${corner_bottom_left}"
        print_warning.footing.corner_right "${corner_bottom_right}"
        print_warning.footing.border_left  "${border_bottom}"
        print_warning.footing.border_right "${border_bottom}"

        # print_error().
#        print_error.heading.corner_left  "${corner_top_left}"
#        print_error.heading.corner_right "${corner_top_right}"
#        print_error.heading.border_left  "${border_top}"
#        print_error.heading.border_right "${border_top}"
#        print_error.heading.joiner_left  "${joiner_left}"
#        print_error.heading.joiner_right "${joiner_right}"
#        print_error.content.border_left     "${border_left}"
#        print_error.content.border_right    "${border_right}"
#        print_error.footing.corner_left  "${corner_bottom_left}"
#        print_error.footing.corner_right "${corner_bottom_right}"
#        print_error.footing.border_left  "${border_bottom}"
#        print_error.footing.border_right "${border_bottom}"

        #FIXME: Copy below.
        # print_exception().
# ❰❰❰ die_with() failed with exit status 2 ❱❱❱
# "/etc/runrc" not found.
#
# die_with() failed with exit status 2 ❱❱❱
# "/etc/runrc" not found.
#
# die_with() failed with exit status 2:
# "/etc/runrc" not found.
        print_exception.heading.corner_left            "${corner_top_left}"
        print_exception.heading.corner_right           "${corner_top_right}"
        print_exception.heading.border_left            "${border_top}"
        print_exception.heading.border_right           "${border_top}"
        print_exception.heading.joiner_left            "${joiner_left}"
        print_exception.heading.joiner_right           "${joiner_right}"
        print_exception.heading.runner_eval_prefix     "${runner_eval_prefix}"
        print_exception.heading.runner_eval_suffix     "${runner_eval_suffix}"
        print_exception.heading.runner_function_prefix "${runner_function_prefix}"
        print_exception.heading.runner_function_suffix "${runner_function_suffix}"
        print_exception.heading.runner_filename_prefix "${runner_filename_prefix}"
        print_exception.heading.runner_filename_suffix "${runner_filename_suffix}"
        print_exception.failure.runner_eval_prefix     "${runner_eval_prefix}"
        print_exception.failure.runner_eval_suffix     "${runner_eval_suffix}"
        print_exception.failure.runner_function_prefix "${runner_function_prefix}"
        print_exception.failure.runner_function_suffix "${runner_function_suffix}"
        print_exception.failure.runner_filename_prefix "${runner_filename_prefix}"
        print_exception.failure.runner_filename_suffix "${runner_filename_suffix}"
        print_exception.failure.suffix_empty           '.'
        print_exception.failure.suffix_nonempty        " ${parens_right}${parens_right}${parens_right}${ZESHY_ASCII_NEWLINE}"
        print_exception.content.border_left            "${border_left}"
        print_exception.content.border_right           "${border_right}"
        print_exception.footing.corner_left            "${border_left}"
        print_exception.footing.corner_right           "${corner_bottom_right}"
        print_exception.footing.border_left            "${border_bottom}"
        print_exception.footing.border_right           "${border_bottom}"

        # print_message_heading(), printing output resembling:
        #
        # ────────{ hello }─────────
        # ────────╢ hello ╟─────────
        # ────────┨ hello ┠─────────
        # ├───────╼ hello ╾────────┤
        # ┠───────╼ hello ╾────────┨
        # ┌───────╼ hello ╾────────┐
        # ┎───────╼ hello ╾────────┒
        # ────────╼ hello ╾─────────
        # ────────• hello •─────────
        print_message_heading.corner_left  '┃'
        print_message_heading.corner_right '┃'
        print_message_heading.border_left  "${border_top}"
        print_message_heading.border_right "${border_top}"
        print_message_heading.joiner_left  "${joiner_left}"
        print_message_heading.joiner_right "${joiner_right}"

        # print_message_item().
        print_message_item.border_left            '┇ '
        print_message_item.border_right           '┇'
        print_message_item.border_left_continued  '╏ '
        print_message_item.border_right_continued '╏'
        print_message_item.joiner_right           "${joiner_right}"
        print_message_item.padder_right           "${border_top}"

        # set_string_to_query_character(), printing output resembling:
        #
        # ┗╸ ❰n·N┃y·Y❱ 
        set_string_to_query_character.prompt.border_left      '┗╸'  # ┖━
        set_string_to_query_character.prompt.joiner_left      ''    # •
        set_string_to_query_character.prompt.parens_left      "${parens_left}"   # ⦃⟦
        set_string_to_query_character.prompt.parens_right     "${parens_right}"  # ⦄⟧
        set_string_to_query_character.prompt.choice_separator '•'   # •·
        set_string_to_query_character.prompt.choice_fork      '┃'   # ⋰⚕┋╏/
    )
}

# ....................{ STYLES ~ prompt                    }....................
declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_ASCII

Map styles to ASCII-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal do _not_ support any richer encoding. For example, if such locale and
terminal support the UTF-8 encoding, `zeshy` prefers the UTF-8-encoded string
literals mapped by ${ZESHY_STYLE_TO_TEXT_UTF8} to those of this map. See such
map for further details.
/---
() {
    # Strings commonly referenced below.
    string\
        border_top='-'\
        border_bottom='-'\
        border_left='| '\
        border_right=' |'\
        corner_top_left='/'\
        corner_top_right='\'\
        corner_bottom_left='\'\
        corner_bottom_right='/'\
        joiner_left='{ '\
        joiner_right=' }'

    ZESHY_STYLE_TO_TEXT_ASCII=(
        # Pseudo-styles. See ${ZESHY_STYLE_TO_TEXT_UTF8} above.
        text.quote_double_left  '"'
        text.quote_double_right '"'
        text.quote_single_left  "'"
        text.quote_single_right "'"

        # output_line_horizontal().
        output_line_horizontal.border "${border_top}"

        # print_message().
        print_message.heading.corner_left  "${corner_top_left}"
        print_message.heading.corner_right "${corner_top_right}"
        print_message.heading.border_left  "${border_top}"
        print_message.heading.border_right "${border_top}"
        print_message.heading.joiner_left  "${joiner_left}"
        print_message.heading.joiner_right "${joiner_right}"
        print_message.content.border_left     "${border_left}"
        print_message.content.border_right    "${border_right}"
        print_message.footing.corner_left  "${corner_bottom_left}"
        print_message.footing.corner_right "${corner_bottom_right}"
        print_message.footing.border_left  "${border_bottom}"
        print_message.footing.border_right "${border_bottom}"

        # print_warning().
        print_warning.heading.corner_left  "${corner_top_left}"
        print_warning.heading.corner_right "${corner_top_right}"
        print_warning.heading.border_left  "${border_top}"
        print_warning.heading.border_right "${border_top}"
        print_warning.heading.joiner_left  "${joiner_left}"
        print_warning.heading.joiner_right "${joiner_right}"
        print_warning.content.border_left  "${border_left}"
        print_warning.content.border_right "${border_right}"
        print_warning.footing.corner_left  "${corner_bottom_left}"
        print_warning.footing.corner_right "${corner_bottom_right}"
        print_warning.footing.border_left  "${border_bottom}"
        print_warning.footing.border_right "${border_bottom}"

        # print_error().
#        print_error.heading.corner_left  "${corner_top_left}"
#        print_error.heading.corner_right "${corner_top_right}"
#        print_error.heading.border_left  "${border_top}"
#        print_error.heading.border_right "${border_top}"
#        print_error.heading.joiner_left  "${joiner_left}"
#        print_error.heading.joiner_right "${joiner_right}"
#        print_error.content.border_left  "${border_left}"
#        print_error.content.border_right "${border_right}"
#        print_error.footing.corner_left  "${corner_bottom_left}"
#        print_error.footing.corner_right "${corner_bottom_right}"
#        print_error.footing.border_left  "${border_bottom}"
#        print_error.footing.border_right "${border_bottom}"

        # print_message_heading().
        #   |===================================={ hello }=================================|
        #   |------------------------------------{ hello }---------------------------------|
        #   -------------------------------------{ hello }----------------------------------
        #   ====================================={ hello }==================================
        #   _____________________________________[ hello ]__________________________________
        print_message_heading.corner_left  "${border_top}"
        print_message_heading.corner_right "${border_top}"
        print_message_heading.border_left  "${border_top}"
        print_message_heading.border_right "${border_top}"
        print_message_heading.joiner_left  "${joiner_left}"
        print_message_heading.joiner_right "${joiner_right}"

        # print_message_item().
        print_message_item.border_left            '[ '
        print_message_item.border_right           ']'
        print_message_item.border_left_continued  '( '
        print_message_item.border_right_continued ')'
        print_message_item.padder_right           "${border_top}"

        # set_string_to_query_character().
        set_string_to_query_character.prompt.border_left      '| '
        set_string_to_query_character.prompt.joiner_left      ''
        set_string_to_query_character.prompt.parens_left      ' ['
        set_string_to_query_character.prompt.parens_right     '] '
        set_string_to_query_character.prompt.choice_separator ','
        set_string_to_query_character.prompt.choice_fork      '/'
    )
}
