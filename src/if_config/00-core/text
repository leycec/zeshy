#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'-/-'
Configure default `zeshy` *text styles* (i.e., mappings from styles to string
literals, permitting human-readable customization of strings output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.

== See Also ==

* https://en.wikipedia.org/wiki/Box-drawing_character[Box-drawing characters] in
  a variety of popular encodings, including UTF-8.
-/-

# ....................{ TEXT                               }....................
#FIXME: Ah-ha! Right. I have another generalization that can help us
#significantly, here. We've begun to repeat our use of certain theme-specific
#characters over-and-over (e.g., "•"), which rather hampers sane maintenance.
#
#Instead, the code responsible for initializing map ${ZESHY_STYLE_TO_TEXT}
#should be tasked with the following:
#
#* If a value of the source map (e.g., ${ZESHY_STYLE_TO_TEXT_UTF8}) is itself
#  an existing key of the name map, then replace such value with the value of
#  such key.
#* Repeat until such value is no longer an existing key of such map.
#
#For example, rather than this:
#
#    print_message.heading.joiner_left  '•'
#
#...we would have this:
#
#    theme.joiner '•'
#    print_message.heading.joiner_left  theme.joiner
#
#But, of course, that isn't *QUITE* general enough. In the above example, we
#actually want:
#
#    print_message.heading.joiner_left '• '
#
#...implying we would need something resembling this:
#
#    theme.joiner '•'
#    print_message.heading.joiner_left '${theme.joiner} '
#
#There are two means of resolving such strings -- neither terribly arduous, but
#neither terribly straightforward either:
#
#* Iterate each key-value pair, declaring a local string with such key name
#  initialized to such value. (Technically, such declaration should occur
#  *AFTER* the following expansion. But, for the purposes of discussion, it
#  makes sense to discuss them in the opposite order.) Then, replace the value
#  of the current key-value pair with an evaluation statement as follows:
#
#      eval 'map[${key}]="'${map[${key}]}'"'
#
#  Wait. That obviously doesn't work, as such value could contain unbalanced
#  quote delimiters. It's also inherently dangerous (e.g., malicious "$(...)"
#  substrings). Instead, we need to apply the following efficient substitution:
#
#      map[${key}]=${${map[${key}]}//(#b)\$\{([[:IDENT:]]##)\}/${(P)match[1]}}
#
#  Untested, of course, but some variant of that should certainly work.
#
#O.K.; that's it. That's the implementation. Decently cool, no? This should give
#the patent duplication issue an approximate face-lift. Hence, the final loop
#iteration body might resemble something like:
#
#      map[${key}]=${${map[${key}]}//(#b)\$\{([[:IDENT:]]##)\}/${(P)match[1]}}
#      string ${key}="${map[${key}]}"
#FIXME: Wait. It's not *QUITE* that simple, as keys are arbitrary strings while
#variable names are highly constrained. For the moment, silently avoid declaring
#keys not valid variables names: e.g.,
#
#      map[${key}]="${map[${key}]//(#b)\$\{([[:IDENT:]]##)\}/${(P)match[1]}}"
#
#      if { is_variable_name "${key}" } {
#          string ${key}="${map[${key}]}"
#      }
#FIXME: Wait. It's not *QUITE* that simple, either. No keys are valid variable
#names, since variable names cannot contain ".". Oh! Obviously, the following
#works without any of that nonsense above:
#
#      map[${key}]="${map[${key}]//(#b)\$\{([[:IDENT:]]##)\}/${${map[${match[1]}]}}"
#
#Sigh. It really is quite simple. Note we could also extend this to support
#expanding both map keys *AND* global variables with the same "${...}" syntax:
#
#      map[${key}]="${map[${key}]//(#b)\$\{([[:IDENT:]]##)\}/${${map[${match[1]}]-${(P)${match[1]}}}}"
#
#Since global variables cannot contain "." characters and map keys *SHOULD*
#always contain such keys, there exists no conflict between the two. However,
#where hypothetical conflicts arise, map keys take precedence. Do *NOT* default
#the expansion "${(P)${match[1]}}" to ensure a warning is printed for nonextant
#variables.

declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_UTF8

Map styles to UTF-8-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal support such encoding. If such locale and terminal do _not_ support
such encoding, `zeshy` reverts to the ASCII-encoded string literals mapped by
${ZESHY_STYLE_TO_TEXT_ASCII}.

Such strings contain only *printable UTF-8-encoded characters* (i.e., any
Unicode character in UTF-8 encoding excluding control characters). Since ANSI
escape codes contain control characters, such strings contain no such codes.

See ${ZESHY_STYLE_TO_COLOR_NAMES} for further details on styles.
/---
ZESHY_STYLE_TO_TEXT_UTF8=(
    # Pseudo-styles mapped to the corresponding characters.
    text.quote_double_left  '“'
    text.quote_double_right '”'
    text.quote_single_left  '‘'
    text.quote_single_right '’'

    # Pseudo-styles expanded by styles below to reduce redundancy.
    theme.border_horizontal   '┈'
    theme.border_vertical     '┋'
    theme.corner_top_left     '┎'
    theme.corner_top_right    '┒'
    theme.corner_bottom_left  '┖'
    theme.corner_bottom_right '┚'
    theme.joiner_left         '•'
    theme.joiner_right        '•'

    #FIXME: Copy below, after working.
    # output_call_stack(), printing output resembling:
    #
    #   ┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• mount_disk() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
    #   ┇ mount_boot_dir_writable() failed with 1:     ┇
    #   ┇ Expected no arguments.                       ┇
    #   ┇┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
    #   ┠┈┈┈•
    #   ┖┰┈┈•
    #    ┖┰┈•
    #     ┖┈•
    #
    # Or perhaps:
    #
    #   ┎┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈• mount_disk() •┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┒
    #   ┇ mount_boot_dir_writable() failed with 1:     ┇
    #   ┇ Expected no arguments.                       ┇
    #   ┇┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┚
    #   ┠┈•
    #   ┖┰┈•
    #    ┖┰┈•
    #     ┖┈┈•
    #
    # I prefer the former, but admit that the latter to be easier implemented.
    output_call_stack.prefix   '\_ '
    output_call_stack.brace    ''
    output_call_stack.colon    ''
    output_call_stack.line     ''

    # output_line_horizontal().
    output_line_horizontal.border '${theme.border_horizontal}'

    # print_message().
    print_message.heading.corner_left  '┎'  # ┌
    print_message.heading.corner_right '┒'  # ┐
    print_message.heading.border_left  '┈'
    print_message.heading.border_right '┈'
    print_message.heading.joiner_left  '• '
    print_message.heading.joiner_right ' •'
    print_message.body.border_left     '┋ ' # ┊
    print_message.body.border_right    ' ┋' # ┊
    print_message.footing.corner_left  '┖'  # └
    print_message.footing.corner_right '┚'  # ┘
    print_message.footing.border_left  '┈'
    print_message.footing.border_right '┈'

    # print_warning().
    print_warning.heading.corner_left  '┎'  # ┌
    print_warning.heading.corner_right '┒'  # ┐
    print_warning.heading.border_left  '┈'
    print_warning.heading.border_right '┈'
    print_warning.heading.joiner_left  '• '
    print_warning.heading.joiner_right ' •'
    print_warning.body.border_left     '┋ ' # ┊
    print_warning.body.border_right    ' ┋' # ┊
    print_warning.footing.corner_left  '┖'  # └
    print_warning.footing.corner_right '┚'  # ┘
    print_warning.footing.border_left  '┈'
    print_warning.footing.border_right '┈'

    # print_error().
    print_error.heading.corner_left  '┎'  # ┌
    print_error.heading.corner_right '┒'  # ┐
    print_error.heading.border_left  '┈'
    print_error.heading.border_right '┈'
    print_error.heading.joiner_left  '• '
    print_error.heading.joiner_right ' •'
    print_error.body.border_left     '┋ ' # ┊
    print_error.body.border_right    ' ┋' # ┊
    print_error.footing.corner_left  '┖'  # └
    print_error.footing.corner_right '┚'  # ┘
    print_error.footing.border_left  '┈'
    print_error.footing.border_right '┈'

    # print_message_heading(), printing output resembling:
    #
    # ────────{ hello }─────────
    #
    # ────────╢ hello ╟─────────
    #
    # ────────┨ hello ┠─────────
    #
    # ├───────╼ hello ╾────────┤
    #
    # ┠───────╼ hello ╾────────┨
    #
    # ┌───────╼ hello ╾────────┐
    #
    # ┎───────╼ hello ╾────────┒
    #
    # ────────╼ hello ╾─────────
    #
    # ────────• hello •─────────
    #
    print_message_heading.corner_left  '┃'
    print_message_heading.corner_right '┃'
    print_message_heading.border_left  '┈'
    print_message_heading.border_right '┈'
    print_message_heading.joiner_left  '• '
    print_message_heading.joiner_right ' •'

    # print_message_item().
    print_message_item.border_left            '┇ '
    print_message_item.border_right           '┇'
    print_message_item.border_left_continued  '╏ '
    print_message_item.border_right_continued '╏'
    print_message_item.padding_joiner_right   ' •'  #◦‣╶
    print_message_item.padding_right          '┈'

    # set_string_to_query_character().
    set_string_to_query_character.prompt.border_left      '┗ '  # ┖
    set_string_to_query_character.prompt.parens_left      ' ❰'  # ⦃⟦
    set_string_to_query_character.prompt.parens_right     '❱ '  # ⦄⟧
    set_string_to_query_character.prompt.choice_delimiter '╏'   # /
)

# ....................{ STYLES ~ prompt                    }....................
declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_ASCII

Map styles to ASCII-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal do _not_ support any richer encoding. For example, if such locale and
terminal support the UTF-8 encoding, `zeshy` prefers the UTF-8-encoded string
literals mapped by ${ZESHY_STYLE_TO_TEXT_UTF8} to those of this map. See such
map for further details.
/---
ZESHY_STYLE_TO_TEXT_ASCII=(
    # Pseudo-styles. See ${ZESHY_STYLE_TO_TEXT_UTF8} above.
    text.quote_double_left  '"'
    text.quote_double_right '"'
    text.quote_single_left  "'"
    text.quote_single_right "'"

    # output_line_horizontal().
    output_line_horizontal.border '='

    # print_message().
    print_message.heading.corner_left  '/'
    print_message.heading.corner_right '\'
    print_message.heading.border_left  '-'
    print_message.heading.border_right '-'
    print_message.heading.joiner_left  '{ '
    print_message.heading.joiner_right ' }'
    print_message.body.border_left     '| '
    print_message.body.border_right    ' |'
    print_message.footing.corner_left  '\'
    print_message.footing.corner_right '/'
    print_message.footing.border_left  '-'
    print_message.footing.border_right '-'

    # print_warning().
    print_warning.heading.corner_left  '/'
    print_warning.heading.corner_right '\'
    print_warning.heading.border_left  '-'
    print_warning.heading.border_right '-'
    print_warning.heading.joiner_left  '{ '
    print_warning.heading.joiner_right ' }'
    print_warning.body.border_left     '| '
    print_warning.body.border_right    ' |'
    print_warning.footing.corner_left  '\'
    print_warning.footing.corner_right '/'
    print_warning.footing.border_left  '-'
    print_warning.footing.border_right '-'

    # print_error().
    print_error.heading.corner_left  '/'
    print_error.heading.corner_right '\'
    print_error.heading.border_left  '-'
    print_error.heading.border_right '-'
    print_error.heading.joiner_left  '{ '
    print_error.heading.joiner_right ' }'
    print_error.body.border_left     '| '
    print_error.body.border_right    ' |'
    print_error.footing.corner_left  '\'
    print_error.footing.corner_right '/'
    print_error.footing.border_left  '-'
    print_error.footing.border_right '-'

    # print_message_heading().
    print_message_heading.corner_left  '-'
    print_message_heading.corner_right '-'
    print_message_heading.border_left  '-'
    print_message_heading.border_right '-'
    print_message_heading.joiner_left  '{ '
    print_message_heading.joiner_right ' }'

    # print_message_item().
    print_message_item.border_left            '[ '
    print_message_item.border_right           ']'
    print_message_item.border_left_continued  '( '
    print_message_item.border_right_continued ')'
    print_message_item.padding_right          '-'

    # set_string_to_query_character().
    set_string_to_query_character.prompt.border_left      '| '
    set_string_to_query_character.prompt.parens_left      ' ['
    set_string_to_query_character.prompt.parens_right     '] '
    set_string_to_query_character.prompt.choice_delimiter '/'
)
