#!/usr/bin/env zsh

declare_parcel_as_script_with_stdin <<'-/-'
Configure default `zeshy` *text styles* (i.e., mappings from styles to string
literals, permitting human-readable customization of strings output by `zeshy`
runnables). Such styles are only defaults and hence only output if the current
user's configured theme fails to define such styles.

== See Also ==

* https://en.wikipedia.org/wiki/Box-drawing_character[Box-drawing characters] in
  a variety of popular encodings, including UTF-8.
-/-

# ....................{ TEXT                               }....................
declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_UTF8

Map styles to UTF-8-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal support such encoding. If such locale and terminal do _not_ support
such encoding, `zeshy` reverts to the ASCII-encoded string literals mapped by
${ZESHY_STYLE_TO_TEXT_ASCII}.

Such strings contain only *printable UTF-8-encoded characters* (i.e., any
Unicode character in UTF-8 encoding excluding control characters). Since ANSI
escape codes contain control characters, such strings contain no such codes.

See ${ZESHY_STYLE_TO_COLOR_NAMES} for further details on styles.
/---
ZESHY_STYLE_TO_TEXT_UTF8=(
    # Pseudo-styles mapped to the corresponding characters. Referencing such
    # pseudo-styles elsewhere is encouraged, unlike that of color-specific
    # pseudo-styles (e.g., "${ZESHY_STYLE_TO_COLOR[color.red:bold]}").
    text.quote_double_left  '“'
    text.quote_double_right '”'
    text.quote_single_left  '‘'
    text.quote_single_right '’'

    # output_line_horizontal().
    output_line_horizontal.border '═'

    # print_message().
    print_message.heading.corner_left  '┎'
    print_message.heading.corner_right '┒'
#   print_message.heading.corner_left  '┌'
#   print_message.heading.corner_right '┐'
    print_message.heading.border_left  '┈'
    print_message.heading.border_right '┈'
    print_message.heading.joiner_left  '• '
    print_message.heading.joiner_right ' •'
    print_message.body.border_left     '┋ '
    print_message.body.border_right    ' ┋'
#   print_message.body.border_left     '┊ '
#   print_message.body.border_right    ' ┊'
    print_message.footing.corner_left  '┖'
    print_message.footing.corner_right '┚'
#   print_message.footing.corner_left  '└'
#   print_message.footing.corner_right '┘'
    print_message.footing.border_left  '┈'
    print_message.footing.border_right '┈'

    # print_warning().
    print_warning.heading.corner_left  '┌'
    print_warning.heading.corner_right '┐'
    print_warning.heading.border_left  '┈'
    print_warning.heading.border_right '┈'
    print_warning.heading.joiner_left  '• '
    print_warning.heading.joiner_right ' •'
    print_warning.body.border_left     '┊ '
    print_warning.body.border_right    ' ┊'
    print_warning.footing.corner_left  '└'
    print_warning.footing.corner_right '┘'
    print_warning.footing.border_left  '┈'
    print_warning.footing.border_right '┈'

    # print_error().
    print_error.heading.corner_left  '┌'
    print_error.heading.corner_right '┐'
    print_error.heading.border_left  '┈'
    print_error.heading.border_right '┈'
    print_error.heading.joiner_left  '• '
    print_error.heading.joiner_right ' •'
    print_error.body.border_left     '┊ '
    print_error.body.border_right    ' ┊'
    print_error.footing.corner_left  '└'
    print_error.footing.corner_right '┘'
    print_error.footing.border_left  '┈'
    print_error.footing.border_right '┈'

    # print_message_heading(). Such schemes print strings resembling:
    #
    # ────────{ hello }─────────
    #
    # ────────╢ hello ╟─────────
    #
    # ────────┨ hello ┠─────────
    #
    # ├───────╼ hello ╾────────┤
    #
    # ┠───────╼ hello ╾────────┨
    #
    # ┌───────╼ hello ╾────────┐
    #
    # ┎───────╼ hello ╾────────┒
    #
    # ────────╼ hello ╾─────────
    #
    # ────────• hello •─────────
    #
    print_message_heading.corner_left  '┃'
    print_message_heading.corner_right '┃'
    print_message_heading.border_left  '┈'
    print_message_heading.border_right '┈'
    print_message_heading.joiner_left  '• '
    print_message_heading.joiner_right ' •'

    # print_message_item().
    print_message_item.border_left            '┇ '
    print_message_item.border_right           '┇'
    print_message_item.border_left_continued  '╏ '
    print_message_item.border_right_continued '╏'
    print_message_item.padding_joiner_right   ' •'  #◦‣╶
    print_message_item.padding_right          '┈'

    # set_string_to_query_character().
    set_string_to_query_character.prompt.border_left      '┗ '  # ┖
    set_string_to_query_character.prompt.parens_left      ' ❰'  # ⦃⟦
    set_string_to_query_character.prompt.parens_right     '❱ '  # ⦄⟧
    set_string_to_query_character.prompt.choice_delimiter '╏'   # /
)

# ....................{ STYLES ~ prompt                    }....................
declare_global_with_stdin <<'/---'
map ZESHY_STYLE_TO_TEXT_ASCII

Map styles to ASCII-encoded string literals, permitting human-readable
customization of strings output by `zeshy` runnables if the current locale and
terminal do _not_ support any richer encoding. For example, if such locale and
terminal support the UTF-8 encoding, `zeshy` prefers the UTF-8-encoded string
literals mapped by ${ZESHY_STYLE_TO_TEXT_UTF8} to those of this map. See such
map for further details.
/---
ZESHY_STYLE_TO_TEXT_ASCII=(
    # Pseudo-styles. See ${ZESHY_STYLE_TO_TEXT_UTF8} above.
    text.quote_double_left  '"'
    text.quote_double_right '"'
    text.quote_single_left  "'"
    text.quote_single_right "'"

    # output_line_horizontal().
    output_line_horizontal.border '='

    # print_message().
    print_message.heading.corner_left  '/'
    print_message.heading.corner_right '\'
    print_message.heading.border_left  '-'
    print_message.heading.border_right '-'
    print_message.heading.joiner_left  '{ '
    print_message.heading.joiner_right ' }'
    print_message.body.border_left     '| '
    print_message.body.border_right    ' |'
    print_message.footing.corner_left  '\'
    print_message.footing.corner_right '/'
    print_message.footing.border_left  '-'
    print_message.footing.border_right '-'

    # print_warning().
    print_warning.heading.corner_left  '/'
    print_warning.heading.corner_right '\'
    print_warning.heading.border_left  '-'
    print_warning.heading.border_right '-'
    print_warning.heading.joiner_left  '{ '
    print_warning.heading.joiner_right ' }'
    print_warning.body.border_left     '| '
    print_warning.body.border_right    ' |'
    print_warning.footing.corner_left  '\'
    print_warning.footing.corner_right '/'
    print_warning.footing.border_left  '-'
    print_warning.footing.border_right '-'

    # print_error().
    print_error.heading.corner_left  '/'
    print_error.heading.corner_right '\'
    print_error.heading.border_left  '-'
    print_error.heading.border_right '-'
    print_error.heading.joiner_left  '{ '
    print_error.heading.joiner_right ' }'
    print_error.body.border_left     '| '
    print_error.body.border_right    ' |'
    print_error.footing.corner_left  '\'
    print_error.footing.corner_right '/'
    print_error.footing.border_left  '-'
    print_error.footing.border_right '-'

    # print_message_heading().
    print_message_heading.corner_left  '-'
    print_message_heading.corner_right '-'
    print_message_heading.border_left  '-'
    print_message_heading.border_right '-'
    print_message_heading.joiner_left  '{ '
    print_message_heading.joiner_right ' }'

    # print_message_item().
    print_message_item.border_left            '[ '
    print_message_item.border_right           ']'
    print_message_item.border_left_continued  '( '
    print_message_item.border_right_continued ')'
    print_message_item.padding_right          '-'

    # set_string_to_query_character().
    set_string_to_query_character.prompt.border_left      '| '
    set_string_to_query_character.prompt.parens_left      ' ['
    set_string_to_query_character.prompt.parens_right     '] '
    set_string_to_query_character.prompt.choice_delimiter '/'
)
