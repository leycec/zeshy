#!/usr/bin/env zsh
# ====================[ 00-color                           ]====================
#
# --------------------( SYNOPSIS                           )--------------------
# Configure output string colors.

# ....................{ STYLES                             }....................
document_global '
map ZESHY_COLOR_STYLE_NAME_TO_COLOR_NAME

Map color style names to color names. Zeshy uses this map to set the convenience
map ${ZESHY_COLOR_STYLE}, which other Zeshy functions access to colorize output.
Specifically, for each key-value pair of this map, Zeshy defines the same key of
map ${ZESHY_COLOR_STYLE} to expand to the corresponding ANSI escape code (e.g.,
if this map contains key "print_call_stack.colon" with value "grey", then Zeshy
adds a corresponding key "print_call_stack.colon" with value "\E\[0;30m", the
ANSI escape code resetting the current foreground color to grey).

Color style names are arbitrary strings specific to the functions referencing
those styles. To avoid string conflicts, consider prefixing style names with the
specific function name referencing those styles followed by a dot (e.g.,
"print_call_stack.line", the "line" style specific to print_call_stack()).

Color names are any valid keys of map ${ZESHY_COLOR}, whose corresponding values
expand to the ANSI escape code enabling such color on the current terminal
(e.g., "grey_bold_italic", the color grey in bold-italic typeface).
'
ZESHY_COLOR_STYLE_NAME_TO_COLOR_NAME=(
    # Punctuation.
    punctuation          grey

    #FIXME: Terrible name, really. How about simply "punctuation_bold"?
    #FIXME: Actually, "punctuation" is increasingly terrible the more I consider
    #it in frustration. What if you want to change, say, the color of the colon
    #say() emits without changing *ALL* such punctuation? You can't. Hence, we
    #should avoid such generalized styles for function-specific styles. Remove
    #btho this and "punctuation".
    punctuation_semantic grey_bold

    # print_call_stack().
    print_call_stack.prefix          red_bold
    print_call_stack.function_name   blue_bold
    print_call_stack.function_parens blue
    print_call_stack.script_name     magenta_bold
    print_call_stack.script_quotes   magenta
    print_call_stack.eval_name       cyan_bold
    print_call_stack.eval_parens     cyan
    print_call_stack.brace           green
    print_call_stack.filename        yellow_bold
    print_call_stack.colon           grey
    print_call_stack.line            yellow

    # print_interactive_aliases().
    print_interactive_aliases.type_abbreviation blue
    print_interactive_aliases.type_substitution blue_bold
    print_interactive_aliases.type_alias        magenta
    print_interactive_aliases.name              white_bold
    print_interactive_aliases.quotes            grey_bold
    print_interactive_aliases.expansion         cyan_italic

    # say() and cohorts.
    say.caller  cyan
    cry.caller  cyan
    die.caller  cyan
    say.colon   grey
    cry.colon   grey
    die.colon   grey
    say.message white_bold
    cry.message yellow_bold
    die.message red_bold

    # say_banner().
    say_banner blue

    # say_heading().
    say_heading.border  blue
    say_heading.joiner  blue_bold
    say_heading.heading grey_bold
)

# ....................{ STYLES ~ prompt                    }....................
document_global '
map ZESHY_PROMPT_COLOR_STYLE_NAME_TO_COLOR_NAME

Map color style names to prompt color names. Zeshy uses this map to set the
convenience map ${ZESHY_PROMPT_COLOR_STYLE}, which other Zeshy functions access
to colorize shell prompt output. Color names are any valid keys of map
${ZESHY_PROMPT_COLOR}, whose corresponding values expand to the prompt-specific
ANSI escape code enabling such color at the shell prompt on the current terminal
(e.g., "grey_bold_italic", the color grey in bold-italic typeface). See
${ZESHY_COLOR_STYLE_NAME_TO_COLOR_NAME} for further details.
'
ZESHY_PROMPT_COLOR_STYLE_NAME_TO_COLOR_NAME=(
    # startup_zeshy_terminal_prompt() if the current user is root.
    startup_zeshy_terminal_prompt.superuser.brace                   grey
    startup_zeshy_terminal_prompt.superuser.host                    red
    startup_zeshy_terminal_prompt.superuser.user                    red_bold
    startup_zeshy_terminal_prompt.superuser.path                    grey_bold
    startup_zeshy_terminal_prompt.superuser.prior_command_succeeded grey_bold
    startup_zeshy_terminal_prompt.superuser.prior_command_failed    magenta_bold
    startup_zeshy_terminal_prompt.superuser.input                   white_bold

    # startup_zeshy_terminal_prompt() if the current user is non-root.
    startup_zeshy_terminal_prompt.nonsuperuser.brace                   white_bold
    startup_zeshy_terminal_prompt.nonsuperuser.host                    cyan
    startup_zeshy_terminal_prompt.nonsuperuser.user                    cyan_bold
    startup_zeshy_terminal_prompt.nonsuperuser.path                    green
    startup_zeshy_terminal_prompt.nonsuperuser.prior_command_succeeded green_bold
    startup_zeshy_terminal_prompt.nonsuperuser.prior_command_failed    red_bold
    startup_zeshy_terminal_prompt.nonsuperuser.input                   white_bold
)
