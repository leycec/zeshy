#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2016 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
*Screenshotters* (i.e., functions capturing screenshots of some or all of the
screen currently displayed by the window manager).
/---

#FIXME: Also support "KScreenshot" under KDE and "gnome-screenshot" under GNOME.
#FIXME: Although it doesn't pertain to this particular parcel, the following URL
#contains a veritable treasure-trove of single command-line commands for
#performing common tasks under various desktop environments (e.g., KDE, GNOME),
#including setting the background image, primary foreground color, and so on:
#    http://bobotig.fr/index.php?c=documents/fond-ecran-cli/
#FIXME: Interestingly, it's possible to take a pseudo-screenshot of terminal
#output via the "script" command. Running "script" enters a subshell under which
#all output is redirected to file "typescript", which is then convertable into
#an HTML file by installing and running command "ansi2html" on such file. zeshy
#should support such functionality *WITHOUT* use of "script" (but still using
#"ansi2html") -- probably through the customary
#:redirect_stdout_to_file_start() and
#:redirect_stdout_to_file_stop() approach.

# ....................{ SCREENSHOTTERS                     }....................
#FIXME: Replicate such implementation approach below.

# If the current display server supports the X11 protocol, define such function
# in terms of the preferred pathable for such protocol.
if { :is_display_server_trait_x } {
    :declare_func_if_pathable_in_list_order_or_noop\
        ':void :screenshot_screen_to_file(:str filename)'\
        ''\
        import      'command import -window root "${1}"'\
        scrot       'command scrot "${1}"'\
        imlib2_grab 'command imlib2_grab "${1}"'\
        'xwd and xwdtopnm' ':screenshot_xwd_with_options_to_file -root "${1}"'\
        ZY_ALTERNATIVES_SCREENSHOT_IF_DISPLAY_SERVER_TRAIT_X <<'/---'
Capture a screenshot of the screen currently displayed by the window manager to
the passed image file. Such file *must* be suffixed by an image-specific
filetype supported by the underlying screenshot command -- commonly either
`.jpg` or `.png` (e.g., `screen.jpg`, `screenshot.png`).
/---
}

#FIXME: Refactor so below as above.

:func.doc <<'/---'
void :screenshot_window_to_file(int window_id, string filename)

Capture a screenshot of the window with the passed ID under the current window
manager to the passed image file. See :screenshot_screen_to_file() for further
details.
/---
# If ImageMagick is pathable, prefer "import".
if { :pathable.is import } {
    function :screenshot_window_to_file() {
        die_unless_args_2 'Expected one window ID and one filename.'
        :str window_id="${1}" filename="${2}"
        :int.die_unless_nonnegative "${window_id}"
        command import -window "${window_id}" "${filename}"
    }
# Else if "imlib2_grab" is pathable, fallback to such command. (Interestingly,
# "scrot" simply defers to "imlib2_grab" but fails to provide a corresponding
# option.)
} elif { :pathable.is imlib2_grab } {
    function :screenshot_window_to_file() {
        die_unless_args_2 'Expected one window ID and one filename.'
        :str window_id="${1}" filename="${2}"
        :int.die_unless_nonnegative "${window_id}"
        command imlib2_grab -id "${window_id}" "${filename}"
    }
# Else if "xwd" *AND* "xwdtopnm" are both pathable, defer to such commands.
} elif { is_pathables xwd xwdtopnm } {
    function :screenshot_window_to_file() {
        die_unless_args_2 'Expected one window ID and one filename.'
        :str window_id="${1}" filename="${2}"
        :int.die_unless_nonnegative "${window_id}"
        :screenshot_xwd_with_options_to_file -id "${window_id}" "${filename}"
    }
}

:func.doc <<'/---'
void :screenshot_region_to_file(string filename)

Capture a screenshot of the *region* (i.e., rectangular area within the screen
currently displayed by the window manager interactively selected by the current
user) to the passed image file.  See :screenshot_screen_to_file() for further
details.
/---
# If ImageMagick is pathable, prefer "import".
if { :pathable.is import } {
    function :screenshot_region_to_file() {
        die_unless_arg 'Expected one filename.'
        command import "${filename}"
    }
# Else if "scrot" is pathable, fallback to such command. (Interestingly,
# "imlib2_grab" fails to provide a corresponding option.)
} elif { :pathable.is scrot } {
    function :screenshot_region_to_file() {
        die_unless_arg 'Expected one filename.'
        command scrot -s "${filename}"
    }
# Else if "xwd" *AND* "xwdtopnm" are both pathable, defer to such commands.
} elif { is_pathables xwd xwdtopnm } {
    function :screenshot_region_to_file() {
        die_unless_arg 'Expected one filename.'
        :screenshot_xwd_with_options_to_file "${filename}"
    }
}

# ....................{ SCREENSHOTTERS ~ xwd               }....................
# If both "xwd" *AND* "xwdtopnm" are installed, the Netpbm package and associate
# commands have *PROBABLY* been installed on the current system. In such case,
# define a helper function called above.
#
# Such package tends to be bundled with most X11 installations. "xwd" outputs
# only in the X11-specific XY and Z formats; "xwdtopnm" latter converts such
# output to the intermediate PNM format, which may then be converted to standard
# image formats via other Netpbm commands (e.g., "pnmtopng"). Somewhat insane,
# of course, but widely supported insanity.
if { :pathable.is xwd xwdtopnm } {
    :func.doc <<'/---'
[stdout: string, stderr: string, status: int] :screenshot_xwd_with_options_to_file(
    string xwd_option1?, ..., string filename)

Run `xwd` with the passed options, capturing the specified region of the current
X11 display to the passed image file. This function supports arbitrary image
formats (e.g., JPEG, PNG) by piping from `xwd` to `xwdtopnm` to
`pnmto$(get_file_type "${filename}")`. If the last command does not exist, such
image type is unsupported and an exception is thrown. The Netpbm package
installs commands supporting many common image types.
/---
    function :screenshot_xwd_with_options_to_file() {
        # Validate sanity.
        die_unless_args 'Expected optional options and one filename.'
        :str filename="${@[-1]}" filetype pnmto_command
        pop_arg

        # Get such filename's type.
        :file.Type "${filename}" filetype

        # Set the "pnmto*" command to call specific to such type if such command
        # exists or throw an exception otherwise. Since there exists no "pnmtojpg"
        # command, handle such case specifically.
        if :is ${filetype} == 'jpg' :si {
            pnmto_command='pnmtojpeg'
        } else {
            pnmto_command='pnmto'${filetype}
            die_unless_pathable "File \"${filename}\" type ${filetype} unsupported (i.e., command \"${pnmto_command}\" not found.)"
        }

        # Run "xwd", passing all remaining arguments as presumed options to
        # such command.
        command xwd "${@}" | command xwdtopnm | command "${pnmto_command}" >\
            "${filename}"
    }
}
