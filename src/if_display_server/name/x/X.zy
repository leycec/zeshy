#!/usr/bin/env zeshy
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2018 by Cecil Curry.
# See "LICENSE" for additional details.

:parcel <<'/---'
X11 and all forks thereof.
/---

#FIXME: Display server-specific functionality *CANNOT* be compiled into the
#current digest file merely on the basis of whether or not the corresponding
#binary ("X" in this case) is pathable. However, we're unconvinced we require a
#new @{50-if_display_server} tree. Hmm; O.K., we probably do. Consider font
#paths, for example. That strikes us as a *VERY* X11-specific chore inapplicable
#to other display servers.
#
#That said, much or all of the current functionality in this parcel does
#generally apply to other display servers and hence should be generalized into
#the main zeshy tree.

# ....................{ GETTERS                            }....................
:func.doc <<'/---'
string get_xset_status_of_type(string status_type)

Get all `xset -q` output matching the passed status type, a string exactly
matching one of following headings:

* "Keyboard Control", describing current keyboard settings.
* "Pointer Control", describing current pointer (e.g., mouse) settings.
* "Screen Saver", describing current screen saver settings.
* "Colors", describing current color settings.
* "Font Path", describing current font cache settings.
* "DPMS (Energy Star)", describing current screen dimming settings.
/---
function get_xset_status_of_type() {
    # Validate sanity.
    die_unless_arg 'Expected one status type.'
    die_unless_pathable xset
    :str status_type="${1}"

    #FIXME: Horrible. No way this still works.
    # Get such output.
    command xset -q | get_string_match_first_until_next "${status_type}:" '[^ ]*'
}

# ....................{ PRINTERS                           }....................
:func.doc <<'/---'
string print_x()

Print a human-readable synopsis of current X11 settings.
/---
function print_x() {
    # Validate sanity.
    die_if_args

    # Print such synopsis.
    {
        print_x_keyboard
        print_x_screen
    } | page_stdin
}

:func.doc <<'/---'
string print_x_keyboard()

Print a human-readable synopsis of current X11 keyboard settings.
/---
function print_x_keyboard() {
    # Validate sanity.
    die_if_args

    # Print all "setxkbmap" information, as even the most verbose of the
    # information output by this utility is informatively brief.
    if { :pathable.is setxkbmap } {
        print_message_heading 'setxkbmap'
        command setxkbmap -print -verbose 10
    }

    # Print all display-specific "xset" information.
    print_message_heading 'xset'
    get_xset_status_of_type 'Keyboard Control'
}

:func.doc <<'/---'
string print_x_screen()

Print a human-readable synopsis of current X11 display settings, including:

* Current resolution.
* Dots per inch (DPI).
/---
function print_x_screen() {
    # Validate sanity.
    die_if_args
    :str display_info

    # Print a subset of all "xdpyinfo" information, as most of the information
    # output by this utility is considerably more verbose than usually desired.
    print_message_heading 'xdpyinfo'

    # Copy the :stdout.echo of "xdpyinfo" into a local variable.
    display_info="$(xdpyinfo)"

    #FIXME: What the *HECK* is this? Ugh.
    # Grep this variable for relevant lines.
    match_first_line ' *dimensions: ' "${display_info}"
    match_first_line ' *resolution: ' "${display_info}"
    match_first_line ' *depth of root window: ' "${display_info}"

    # Print all "xrandr" information, as most of the information output by this
    # utility is informatively brief enough to be of general use.
    print_message_heading 'xrandr'
    command xrandr

    # Print all display-specific "xset" information.
    print_message_heading 'xset'
    _print_x_dpms
    get_xset_status_of_type 'Colors'
}
