#!/usr/bin/env zsh
# --------------------( LICENSE                            )--------------------
# Copyright 2007-2013 by Cecil Curry.
# See "COPYING" for additional details.

:parcel <<'/---'
Handle X11 font caching.
/---

# ....................{ PRINTERS                           }....................
declare_function_with_stdin <<'/---'
string :print_fonts()

Print a human-readable list of all fonts in the font cache for the current X11
session and hence available to X11 applications.
/---
function :print_fonts() {
    die_if_args
    command fc-cat -rv | page_stdin
}

# ....................{ CACHERS                            }....................
declare_function_with_stdin <<'/---'
void :add_font_dir(string dirname = "$(get_dir)")

Add all fonts in the passed directory (defaulting to the current working
directory, if called directly from the command line) to the in-memory font cache
for the current X11 session. If `fc-cache` is pathable, this function persists
such changes by permanently adding such fonts to the on-disk font cache for all
future X11 sessions; else, such changes will be lost on terminating the current
X11 session.
/---
function :add_font_dir() {
    # Validate sanity.
    if { is_context_cli_function } {
        die_unless_args_0_to_1 'Expected optional font directory.'
        is_arg or set_args "$(get_dir)}"
    } else {
        die_unless_arg 'Expected one font directory.'
    }
    :string font_dir="${1}"
    die_unless_pathables mkfontdir mkfontscale xset

    # Temporarily change to such directory.
    store_dir "${font_dir}"

    :try{
        # Make cache files "fonts.dir" and "fonts.scale" in such directory.
        print_message_item "Preparing \"${font_dir}\" for caching."
        command mkfontdir
        command mkfontscale

        # Add such directory to the current font cache.
        print_message_item 'Adding "'${font_dir}"' to X11 font cache."
        command xset fp+ "${font_dir}"

        # Update the font cache in a manner compatible with older systems.
        print_message_item 'Updating "xset" font cache.'
        command xset fp rehash

        # If "fc-cache" is pathable, permanently add all fonts in such directory
        # to the X11 font cache
        # "fc-cache" is an optional newer alternative to the above *NOT*
        # superceding the above (i.e., both the prior and following techniques
        # peacefully coexist). If pathable, update the X11 font cache.
        if { is_pathable fc-cache } {
            print_message_item 'Updating "fc-cache" font cache.'
            run_code_as_superuser command fc-cache -fv
        }
    }:catch{
        restore_dir
    :}
}

# --------------------( WASTELANDS                         )--------------------
        #FUXME: The repeated print_newline() pattern suggests an analogue to
        #print_message_heading() -- how about something resembling
        #print_message_grouped(). Of course, this suggests splitting a new
        #print_heading_grouped() from print_message_heading().

# else, 
# also add such fonts 
# such addition persists between
# X11 sessions; else, such addition _only_ applies

#function add_x_font_cache_dir() {
#function add_dir_to_x_font_cache() {
    # If non-empty, this function pushed the passed directory onto the stack and
    # must thus pop it from the stack prior to returning
#   bool is_pushing_directory

    # Font directory to be cached.
#   if is_string_nonempty "${1}"; then
#       font_dir="${1}"
#       is_pushing_directory=1
#       change_dir "${font_dir}"
#   else
#       font_dir="${PWD}"
#   fi
