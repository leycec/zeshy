=====================[ README.dev                         ]=====================

---------------------( CONSIDERED RISKY                   )---------------------
Zeshy suffers from more than a few gotchas, deriving from its dependence on Zsh.
These are:

* Pass by reference. No shell, including Zsh, currently provides pass by
  reference function semantics. This implies, in particular, that arrays may
  neither be directly passed to or returned from functions as a single
  argument. Nevertheless, there is a simple mechanism for passing *ONE* array as
  a list of arguments to a function: e.g.,

      # void apple_of_my_eye(int scalar1, char *scalar2, int *array)
      #
      # A function accepting two scalars followed by an array, called like so:
      #     SHEA=( "The Eye of the Pyramid" "Swift Kick Inc." )
      #     apple_of_my_eye 1776 "The Man Who Murdered God" "${SHEA[@]}"
      apple_of_my_eye() {
          local scalar1=$1; shift
          local scalar2=$2; shift
          local -A array
          set -A array "$@"   # or equivalently...
          array=( "$@" )      # ...is perhaps more readable
      }
  
  An alternative mechanism for passing multiple arrays requires the caller
  instead pass the names of locally or globally declared arrays, which the
  function then accesses via the "(P)" parameter expansion: e.g.,
  
      # void fire_of_my_loins(int *array1, char **array2)
      #
      # A function accepting two arrays, called like so:
      #     ROBERT=( "The Man Who Murdered God" )
      #     WILSON=( "Walpurgisnacht Rock" "Leviathan" )
      #     fire_of_my_loins 1976 ROBERT WILSON
      fire_of_my_loins() {
          local -A array1; set -A array1 "${(P)1}"
          local -A array2; set -A array2 "${(P)2}"
      }
  
  Unfortunately, there exists no comparable mechanism for returning arrays by
  value due to quoting issues. The best approximation is a terrible hack: e.g.,

      # char **light_of_my_life(void)
      #
      # A function returning an array of strings, called like so:
      #     DOG=$(light_of_my_life)     # the return value as a scalar...
      #     GOD=( "${(Q@)${(z)DOG}}" )  # ...parsed into this array
      light_of_my_life() {
          local -A array
          array=( "Heute die Welt" "Morgens das Sonnensystem!" )
          echo "${${(@qqkv)array}[@]}"    # yes, this is bad. not the good kind.
      }

  The above actually works in the general sense, but could (at best) be called
  one step from code apoptosism. The only sensible alternative is to require the
  user pass the name of an array to be set by this function as above.

  For alternative (not necessarily cleverer) hacks, see:
  http://www.zsh.org/mla/users/2004/msg01096.html

