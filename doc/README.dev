=====================[ README.dev                         ]=====================

---------------------( CONSIDERED RISKY                   )---------------------
zeshy suffers from more than a few dewy gotchas, deriving from its underlying
dependence on zsh. These are:

* Function declaration. *ALWAYS PREFIX FUNCTION DECLARATIONS WITH "function ".*
  The reason is subtle: zsh treats the function name when *NOT* prefixed by
  "function " as in command position and hence subject to alias expansion: e.g.,

      # Rhachon le! zsh subjects the "l" in "l()" to alias expanding. Hence,
      # the function declaration is equivalent to the erroneously recursive:
      #     /bin/ls -FAIL() { /bin/ls -lalala "$@" | more }
      alias l='/bin/ls -FAIL'
      l() { /bin/ls -lalala "$@" | more }

      # Lasto lalaith nÃ®n. The following function declarations work as expected.
      function l() { /bin/ls -lalala "$@" | more }
      'l'() { /bin/ls -lalala "$@" | more }     # ...but avoid this. It's fugly.

  Since there exists no guarantee a function declaration is *NOT* preceded by an
  alias declaration of the same name, safety requires *ALWAYS* prefixing
  function declarations with "function ".

* Variable declaration. *DO NOT DEFINE VARIABLES WHEN DECLARING VARIABLES*.
  Rather, separate variable declaration and definition into two separate
  statements: e.g.,

      # Bad. Baaaad. Never do this, even if the zeshy codebase sometimes does.
      # If get_first_file() throws an exception in the event of finding neither
      # "/rache" or "/bartmoss", the definition of ${brainware_blowout} still
      # silently succeeds. (Wut.)
      >>> string brainware_blowout="$(get_first_file /rache /bartmoss)"

      # Good. Goood. Always do this. ("Always" means somewhat more than never.)
      # If get_first_file() throws such an exception, the definition of
      # ${brainware_blowout} fails with an exception. Which is good.
      >>> string brainware_blowout
      >>> brainware_blowout="$(get_first_file /rache /bartmoss)"

  Certainly, the former form appears preferable. It's more concise. It's what
  high-level languages admit. It's what zsh *SUPERFICIALLY* admits. Alas, the
  former suffers critical defects in the event of unexpected exceptions, errors,
  or other fatal conundra.

  In zsh, syntactically correct declarations succeed with zero exit status even
  if some definition(s) in such declarations fail. Reread that sentence. It
  doesn't particularly make intuitive sense, does it? Declarations whose
  definitions fail should also fail. But they do not. Declarations effectively
  never fail. Which is why you should *NEVER* mix declarations and definitions
  -- at least, not declarations and definitions subject to possible failure.

  The line between safe and unsafe mixing is subtle, blurry, and best left to
  the capricious whimsy of zeshy developers. Please, for the sake of scripted
  sanity, avoid mixing declarations and definitions. Establish good habits. (Not
  like us. We revel in bad habits...and, oh, how we pay for it.)

* Integer variable declaration. *DO NOT DECLARE FUNCTION PARAMETERS TO BE
  "integer" WITHOUT PRIOR VERIFICATION*. zsh erroneously converts "integer"
  values to integers, even for values with no reasonable conversion: e.g.,

      >>> integer bad_int="oio_ooo_oio_ooo"
      >>> print ${bad_int}
      0

  zsh fails to provide an option for implicitly failing rather than converting
  erroneous integer values. Function parameters cannot be safely trusted to be
  integral and hence must be explicitly checked prior to assignment: e.g.,

      # A function accepting one integer parameter and dying otherwise.
      >>> function sturgeon_surge() {
      ...     die_unless_integer "${1}"
      ...     integer good_int=${1}
      ...     return_string ${good_int}
      ... }
      >>> sturgeon_surge "oio_ooo_oio_ooo"
      sturgeon_surge: "oio_ooo_oio_ooo" not an integer

* Integer variable assignment. *ASSIGN INTEGER VARIABLES WITH "...=$((...))"
  RATHER THAN "((...=...))" SYNTAX.* If such assignment succeeds, the former
  always returns success while the latter does *NOT* always return success.
  Specifically, the latter returns success on successful assignment only when
  the assigned integer is nonzero. While this is technically circumventable by
  appending "|| 1" to such assignment, doing so renders such assignment somewhat
  unreadable: e.g.,

      >>> integer int

      # This unconditionally succeeds.
      >>> int=$(( 0 )) and print 'success' or print 'failure'
      success

      # This conditionally fails, despite the successful assignment.
      >>> (( int = 0 )) and print 'success' or print 'failure'
      failure

      # This conditionally succeeds, but could hardly be called readable.
      >>> (( int = 0 || 1 )) and print 'success' or print 'failure'
      success

* Integer variable incrementation. *INCREMENT INTEGER VARIABLES WITH "...+=1"
  RATHER THAN EITHER "(( ...++ ))" or "(( ++... ))" SYNTAX,* for similar
  reasons as the prior caveat: e.g.,

      >>> integer int

      # This unconditionally succeeds.
      >>> int=0
      >>> int+=1 and print 'success' or print 'failure'
      success

      # Both conditionally fail, despite the successful incrementation.
      >>> int=0
      >>> (( int++ )) and print 'success' or print 'failure'
      failure
      >>> int=-1
      >>> (( ++int )) and print 'success' or print 'failure'
      failure

* Argument handling. *PREFER CANONICAL ZSH PARAMETER ${@} TO ITS HUMAN-READABLE
  SYNONYM ${argv}*, unless only the latter suffices. ${@} is correctly expanded
  when quoted both as is and as a slice, whereas ${argv} is correctly expanded
  when quoted as is but *NOT* as a slice: e.g.,

      >>> function on_earthism() {
      ...     string on_athiesm
      ...
      ...     print_string 'expansion by ${@}:'
      ...     for on_athiesm ("${@[6,-1]}") {
      ...         print_string "${on_athiesm}"
      ...     }
      ...
      ...     print_string 'expansion by ${argv}:'
      ...     for on_athiesm ("${argv[6,-1]}") {
      ...         print_string "${on_athiesm}"
      ...     }
      ... }
      expansion by ${@}:
      but
      an
      earthiest.
      expansion by ${argv}:
      but an earthiest.
      >>> on_earthism "I am not an atheist but an earthiest."

  Despite such deficiencies, ${argv} does provide a superior means of removing
  arguments from the argument list. See aliases shift_arg() and pop_arg() for
  further details.

* Line splitting. *DO NOT APPLY PARAMETER FLAG "(f)" IN A SCALAR CONTEXT*. When
  applying such flag to parameters whose values contain no newlines (i.e., are
  single-line strings), zsh expands such parameters to their scalar values
  rather than to single-element lists containing such values. Since one always
  wants a list rather than string when expanding such flag, this context-
  sensitive edge case arguably constitutes a zsh bug and in either case is
  demonstrably unintuitive. To avoid such edge cases, always split parameters
  into lines in an explicit list context: e.g.,

      # Baaad. Never do this. If "${1}" expands to a single-line string, this
      # prints the string length rather than the number of lines in "${1}"!
      print ${#${(f)1}}

      # Good. Always do this. While cumbersome, there's no avoiding some cumber.
      list lines; lines=( ${(f)1} )
      print ${#lines}

* Pass by reference. No shell, including zsh, currently provides pass by
  reference function semantics. This implies, in particular, that arrays may
  neither be directly passed to or returned from functions as a single
  argument. Nevertheless, there is a simple mechanism for passing *ONE* array as
  a list of arguments to a function: e.g.,

      # void apple_of_my_eye(int scalar1, char *scalar2, int *array)
      #
      # A function accepting two scalars followed by an array, called like so:
      #     SHEA=( "The Eye of the Pyramid" "Swift Kick Inc." )
      #     apple_of_my_eye 1776 "The Man Who Murdered God" "${SHEA[@]}"
      apple_of_my_eye() {
          local scalar1=$1; shift
          local scalar2=$2; shift
          local -A array
          set -A array "$@"   # or equivalently...
          array=( "$@" )      # ...is perhaps more readable
      }

  An alternative mechanism for passing multiple arrays requires the caller
  instead pass the names of locally or globally declared arrays, which the
  function then accesses via the "(P)" parameter expansion: e.g.,

      # void fire_of_my_loins(int *array1, char **array2)
      #
      # A function accepting two arrays, called like so:
      #     ROBERT=( "The Man Who Murdered God" )
      #     WILSON=( "Walpurgisnacht Rock" "Leviathan" )
      #     fire_of_my_loins 1976 ROBERT WILSON
      fire_of_my_loins() {
          local -A array1; set -A array1 "${(P)1}"
          local -A array2; set -A array2 "${(P)2}"
      }

  Unfortunately, there exists no comparable mechanism for returning arrays by
  value due to quoting issues. The best approximation is a terrible hack: e.g.,

      # char **light_of_my_life(void)
      #
      # A function returning an array of strings, called like so:
      #     DOG=$(light_of_my_life)     # the return value as a scalar...
      #     GOD=( "${(Q@)${(z)DOG}}" )  # ...parsed into this array
      light_of_my_life() {
          local -A array
          array=( "Heute die Welt" "Morgens das Sonnensystem!" )
          echo "${${(@qqkv)array}[@]}"    # yes, this is bad. not the good kind.
      }

  The above actually works in the general sense, but could (at best) be called
  one step from code apoptosism. The only sensible alternative is to require the
  user pass the name of an array to be set by this function as above.

  For alternative (not necessarily cleverer) hacks, see:
  http://www.zsh.org/mla/users/2004/msg01096.html

* Passing here-documents. *AVOID PASSING HERE-DOCUMENTS AS FUNCTION ARGUMENTS*.
  Pass single- or double-quoted strings instead. zsh and contemporary shells
  implement here-documents as temporary file descriptors to temporary files
  rather than as piped standard input. Since zsh appears to interface more
  poorly with the former than latter, consider passing here-documents only to
  external commands and zsh builtins explicitly designed to accept such file
  descriptors (e.g., "cat", "less").

  While here-documents are technically parsable by zsh functions, the effort
  required to do so truly qualifies as parsing: e.g.,

      # This is nonsensically hard.
      >>> function the_bells() {
      ...     string heredoc line
      ...     while read -r line; do
      ...         heredoc+="${line}"
      ...     done
      ... }
      >>> the_bells <<'EOF'
      And he rolls, rolls, rolls,
      Rolls
      A paean from the bells!
      And his merry bosom swells
      With the paean of the bells!
      And he dances, and he yells;
      Keeping time, time, time,
      In a sort of Runic rhyme,
      To the paean of the bells: -
      EOF
